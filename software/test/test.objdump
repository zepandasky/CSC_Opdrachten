
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00018614 memsz 0x00018614 flags r-x
    LOAD off    0x00019634 vaddr 0x00098634 paddr 0x0009a1ac align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x0001bd24 vaddr 0x0009bd24 paddr 0x0009bd24 align 2**12
         filesz 0x00000000 memsz 0x0000740c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017fe8  000801c0  000801c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000048c  000981a8  000981a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  00098634  0009a1ac  00019634  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000740c  0009bd24  0009bd24  0001bd24  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000a3130  000a3130  0001b1ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001b1ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fe8  00000000  00000000  0001b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002c3d7  00000000  00000000  0001c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a843  00000000  00000000  0004858f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d977  00000000  00000000  00052dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003160  00000000  00000000  0006074c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000473d  00000000  00000000  000638ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017833  00000000  00000000  00067fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0007f81c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001898  00000000  00000000  0007f830  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00085ade  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00085ae4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00085af0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00085af1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00085af2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00085afd  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00085b08  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  00085b13  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004c  00000000  00000000  00085b22  2**0
                  CONTENTS, READONLY
 26 .jdi          00005497  00000000  00000000  00085b6e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00037d48  00000000  00000000  0008b005  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801c0 l    d  .text	00000000 .text
000981a8 l    d  .rodata	00000000 .rodata
00098634 l    d  .rwdata	00000000 .rwdata
0009bd24 l    d  .bss	00000000 .bss
000a3130 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
000801f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
0009bd2c l     O .bss	00000006 hexadecimalnum.3350
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 vfprintf.c
00098256 l     O .rodata	00000010 zeroes.4404
000830e0 l     F .text	000000bc __sbprintf
00098266 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000832f0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084e48 l     F .text	00000008 __fp_unlock
00084e5c l     F .text	0000019c __sinit.part.1
00084ff8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00098634 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00098a78 l     O .rwdata	00000020 lc_ctype_charset
00098a58 l     O .rwdata	00000020 lc_message_charset
00098a98 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00098298 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00087900 l     F .text	000000fc __sprint_r.part.0
000983bc l     O .rodata	00000010 zeroes.4349
00088f3c l     F .text	000000bc __sbprintf
000983cc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008d958 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008da6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008da98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008de2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008df14 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008e000 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0008e1d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0009a124 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008e448 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0009a128 l     O .rwdata	00000004 lockid
0009bd7c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0009a12c l     O .rwdata	00000004 lockid
0009bd84 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0008fe80 l     F .text	00000048 OS_InitMisc
0008fec8 l     F .text	0000006c OS_InitRdyList
00090034 l     F .text	000000e4 OS_InitTCBList
0008fda0 l     F .text	000000e0 OS_InitEventList
0008ff34 l     F .text	00000080 OS_InitTaskIdle
0008ffb4 l     F .text	00000080 OS_InitTaskStat
000902a4 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00091fb4 l     F .text	000000f4 OS_FlagTaskRdy
00091d74 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0009608c l     F .text	00000034 alt_dev_reg
00099080 l     O .rwdata	0000106c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00096404 l     F .text	000002a4 altera_avalon_jtag_uart_irq
000966a8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00096e84 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000970c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00097284 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000973e4 l     F .text	0000003c alt_get_errno
00097420 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000874ec g     F .text	00000074 _mprec_log10
0009a17a g     O .rwdata	00000002 OSTaskNameSize
000875d8 g     F .text	0000008c __any_on
000899b8 g     F .text	00000054 _isatty_r
000982a4 g     O .rodata	00000028 __mprec_tinytens
0008e118 g     F .text	000000bc alt_main
0009fe0c g     O .bss	00000100 alt_irq
00089a0c g     F .text	00000060 _lseek_r
000927d4 g     F .text	000000d8 OS_MemInit
0009a1ac g       *ABS*	00000000 __flash_rwdata_start
0009602c g     F .text	00000060 OSTimeSet
0008c330 g     F .text	00000088 .hidden __eqdf2
0008eaf4 g     F .text	00000610 OSEventPendMulti
000a3130 g       *ABS*	00000000 __alt_heap_start
00097a5c g     F .text	00000024 OSTaskCreateHook
00080c18 g     F .text	0000003c printf
0009a152 g     O .rwdata	00000002 OSMboxEn
0008f15c g     F .text	0000004c OSIntEnter
0008a2e4 g     F .text	0000009c _wcrtomb_r
00087804 g     F .text	0000005c __sseek
000851a8 g     F .text	00000010 __sinit
0008a18c g     F .text	00000140 __swbuf_r
0009a162 g     O .rwdata	00000002 OSQEn
000857b4 g     F .text	0000007c _setlocale_r
00085000 g     F .text	00000078 __sfmoreglue
0008e7c8 g     F .text	000000cc __malloc_unlock
00097ac4 g     F .text	00000020 OSTaskStatHook
0009bd8c g     O .bss	00000001 OSLockNesting
0009a1a0 g     O .rwdata	00000002 OSDataSize
0009bd8d g     O .bss	00000001 OSRunning
00089a6c g     F .text	0000015c memmove
00097b04 g     F .text	00000020 OSInitHookBegin
0009a198 g     O .rwdata	00000002 OSTmrSize
00085190 g     F .text	00000018 _cleanup
000865ac g     F .text	000000a8 _Balloc
0009bd90 g     O .bss	00000004 OSIdleCtr
0008c3b8 g     F .text	000000dc .hidden __gtdf2
000978dc g       .text	00000000 OSStartTsk
000905d4 g     F .text	000002d4 OS_TCBInit
00080000 g     F .entry	0000000c __reset
0009bd28 g     O .bss	00000004 int1sCounter
0009a19e g     O .rwdata	00000002 OSTmrWheelTblSize
00080020 g       *ABS*	00000000 __flash_exceptions_start
0009a13e g     O .rwdata	00000002 OSEventSize
0009bd94 g     O .bss	00000001 OSPrioHighRdy
00089494 g     F .text	0000005c _fstat_r
00097a80 g     F .text	00000024 OSTaskDelHook
0009bd64 g     O .bss	00000004 errno
00087780 g     F .text	00000008 __seofread
000978bc g       .text	00000000 OSStartHighRdy
00094aac g     F .text	000001e4 OSTaskCreateExt
000918bc g     F .text	00000060 OSFlagPendGetFlagsRdy
0009a17e g     O .rwdata	00000002 OSTaskStatStkSize
00090a38 g     F .text	00000308 OSFlagAccept
00092e18 g     F .text	000000b8 OSQFlush
000928ac g     F .text	00000140 OSQAccept
0009bd74 g     O .bss	00000004 alt_argv
000a20ec g       *ABS*	00000000 _gp
00094900 g     F .text	000001ac OSTaskCreate
00094410 g     F .text	000004f0 OSTaskChangePrio
0009bd88 g     O .bss	00000004 alt_heapsem
000908a8 g     F .text	00000190 OSDebugInit
00094c90 g     F .text	00000344 OSTaskDel
00098f00 g     O .rwdata	00000180 alt_fd_list
0009ff0c g     O .bss	00000370 OSFlagTbl
0008fb80 g     F .text	000000b8 OS_EventTaskRemove
00097b88 g     F .text	00000090 alt_find_dev
0008633c g     F .text	00000148 memcpy
0009a168 g     O .rwdata	00000002 OSRdyTblSize
00084e50 g     F .text	0000000c _cleanup_r
0008d770 g     F .text	000000dc .hidden __floatsidf
00097368 g     F .text	0000007c alt_io_redirect
0008c494 g     F .text	000000f4 .hidden __ltdf2
000981a8 g       *ABS*	00000000 __DTOR_END__
0008e894 g     F .text	00000120 OSEventNameGet
0009a14c g     O .rwdata	00000002 OSFlagMax
00087664 g     F .text	00000074 __fpclassifyd
00087448 g     F .text	000000a4 __ratio
0008f1a8 g     F .text	000000f8 OSIntExit
00088f20 g     F .text	0000001c __vfiprintf_internal
0009a186 g     O .rwdata	00000002 OSTCBSize
0009bd95 g     O .bss	00000001 OSPrioCur
00096904 g     F .text	000002bc altera_avalon_jtag_uart_read
00080be8 g     F .text	00000030 _printf_r
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00080b2c g     F .text	00000064 .hidden __udivsi3
0008de68 g     F .text	000000ac isatty
0009a16c g     O .rwdata	00000002 OSStkWidth
000805f4 g     F .text	000000bc taskWriteHex0_3
000982f4 g     O .rodata	000000c8 __mprec_tens
0009a160 g     O .rwdata	00000002 OSPtrSize
00085830 g     F .text	0000000c __locale_charset
0009a140 g     O .rwdata	00000002 OSEventTblSize
00097830 g       .text	00000000 OSCtxSw
0009bd60 g     O .bss	00000004 __malloc_top_pad
0009bd98 g     O .bss	00000004 OSTCBList
0009bd68 g     O .bss	00000004 alt_fd_list_lock
0009a0f8 g     O .rwdata	00000004 __mb_cur_max
00085860 g     F .text	0000000c _localeconv_r
000894f0 g     F .text	000004c8 __sfvwrite_r
000869e0 g     F .text	0000003c __i2b
000a027c g     O .bss	00000c30 OSMemTbl
0009bd9c g     O .bss	00000001 OSTickStepState
000876d8 g     F .text	00000054 _sbrk_r
0009a164 g     O .rwdata	00000002 OSQMax
000a0eac g     O .bss	00000800 OSTaskStatStk
00092410 g     F .text	000000f0 OSMemNameGet
0009a144 g     O .rwdata	00000002 OSFlagEn
00089bc8 g     F .text	00000060 _read_r
0009a18a g     O .rwdata	00000002 OSTimeTickHookEn
000932c8 g     F .text	00000168 OSQPost
000920a8 g     F .text	000000a4 OS_FlagUnlink
0009a118 g     O .rwdata	00000004 alt_max_fd
0009016c g     F .text	00000068 OS_MemCopy
000901d4 g     F .text	000000d0 OS_Sched
00089188 g     F .text	000000f0 _fclose_r
00092320 g     F .text	000000f0 OSMemGet
000952bc g     F .text	000001b4 OSTaskNameSet
00084e18 g     F .text	00000030 fflush
0009bd5c g     O .bss	00000004 __malloc_max_sbrked_mem
0009bda0 g     O .bss	00000004 OSCtxSwCtr
00097ae4 g     F .text	00000020 OSTimeTickHook
0009a14e g     O .rwdata	00000002 OSFlagNameSize
0008fc38 g     F .text	00000100 OS_EventTaskRemoveMulti
0008b0b4 g     F .text	000008ac .hidden __adddf3
0009bd34 g     O .bss	00000004 noPara1
0008fa30 g     F .text	00000150 OS_EventTaskWaitMulti
000871f0 g     F .text	0000010c __b2d
0009a166 g     O .rwdata	00000002 OSQSize
0008aac8 g     F .text	000005c4 .hidden __umoddi3
0008e03c g     F .text	000000dc lseek
00093d78 g     F .text	0000020c OSSemPend
0009a0f0 g     O .rwdata	00000004 _global_impure_ptr
0009bd38 g     O .bss	00000004 flags1
00089c28 g     F .text	00000564 _realloc_r
0009a150 g     O .rwdata	00000002 OSLowestPrio
000a3130 g       *ABS*	00000000 __bss_end
0008dd3c g     F .text	000000f0 alt_iic_isr_register
00097b64 g     F .text	00000024 OSTCBInitHook
0009a196 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00097704 g     F .text	00000108 alt_tick
0008a4cc g     F .text	000005fc .hidden __udivdi3
000893f0 g     F .text	00000024 _fputwc_r
0009a138 g     O .rwdata	00000002 OSEventEn
000982cc g     O .rodata	00000028 __mprec_bigtens
000867c4 g     F .text	00000104 __s2b
0009a192 g     O .rwdata	00000002 OSTmrCfgNameSize
0008d84c g     F .text	000000a8 .hidden __floatunsidf
00086f30 g     F .text	00000060 __mcmp
000851c8 g     F .text	00000018 __fp_lock_all
0008dcf0 g     F .text	0000004c alt_ic_irq_enabled
00091ed4 g     F .text	000000e0 OS_FlagInit
00097668 g     F .text	0000009c alt_alarm_stop
0009a174 g     O .rwdata	00000002 OSTaskIdleStkSize
0009bd6c g     O .bss	00000004 alt_irq_active
000939b0 g     F .text	000000b0 OSSemAccept
00092614 g     F .text	000000d8 OSMemPut
0009214c g     F .text	000001d4 OSMemCreate
0009bda4 g     O .bss	00000004 OSIdleCtrMax
000800ec g     F .exceptions	000000d4 alt_irq_handler
00098ed8 g     O .rwdata	00000028 alt_dev_null
0009a188 g     O .rwdata	00000002 OSTicksPerSec
000801fc g     F .text	0000012c charToInt
00097830 g       .text	00000000 OSIntCtxSw
000970a4 g     F .text	00000020 alt_dcache_flush_all
000868c8 g     F .text	00000068 __hi0bits
0008d6f0 g     F .text	00000080 .hidden __fixdfsi
0009bda8 g     O .bss	00000004 OSTCBFreeList
0009a1ac g       *ABS*	00000000 __ram_rwdata_end
00093f84 g     F .text	0000016c OSSemPendAbort
0009a110 g     O .rwdata	00000008 alt_dev_list
0008e484 g     F .text	00000100 write
0009a18c g     O .rwdata	00000002 OSVersionNbr
00098634 g       *ABS*	00000000 __ram_rodata_end
0008dad4 g     F .text	000000b8 fstat
0008c494 g     F .text	000000f4 .hidden __ledf2
0009a134 g     O .rwdata	00000004 OSEndiannessTest
00086ca8 g     F .text	00000140 __pow5mult
00087a14 g     F .text	0000150c ___vfiprintf_internal_r
0009bd54 g     O .bss	00000004 __nlocale_changed
00080b90 g     F .text	00000058 .hidden __umodsi3
0008042c g     F .text	0000012c init_interrupt
0009a146 g     O .rwdata	00000002 OSFlagGrpSize
000a3130 g       *ABS*	00000000 end
0009be0c g     O .bss	00002000 taskWriteHex4_5_stk
00080558 g     F .text	0000009c counterInterrupt
000962bc g     F .text	00000148 altera_avalon_jtag_uart_init
0009043c g     F .text	000000cc OS_TaskStat
000981a8 g       *ABS*	00000000 __CTOR_LIST__
000be800 g       *ABS*	00000000 __alt_stack_pointer
00096efc g     F .text	0000007c alt_avalon_timer_sc_init
0008d8f4 g     F .text	00000064 .hidden __clzsi2
00096bc0 g     F .text	000002c4 altera_avalon_jtag_uart_write
000851b8 g     F .text	00000004 __sfp_lock_acquire
00086258 g     F .text	000000e4 memchr
00090118 g     F .text	00000054 OS_MemClr
00080de8 g     F .text	000022dc ___vfprintf_internal_r
00097900 g     F .text	0000015c OSTaskStkInit
0008531c g     F .text	00000310 _free_r
0008583c g     F .text	00000010 __locale_mb_cur_max
0008f788 g     F .text	00000198 OS_EventTaskRdy
00097ff4 g     F .text	00000180 __call_exitprocs
0009bdac g     O .bss	00000001 OSCPUUsage
0009bd50 g     O .bss	00000004 __mlocale_changed
0009a0fc g     O .rwdata	00000004 __malloc_sbrk_base
000801c0 g     F .text	0000003c _start
0009bddc g     O .bss	00000004 _alt_tick_rate
00092ed0 g     F .text	0000028c OSQPend
00095b7c g     F .text	00000104 OSTimeDly
0008076c g     F .text	000000ec jtagInterrupt
00086de8 g     F .text	00000148 __lshift
0009bde0 g     O .bss	00000004 _alt_nticks
0008e210 g     F .text	00000104 read
000960f8 g     F .text	00000060 alt_sys_init
00097edc g     F .text	00000118 __register_exitproc
0009bdad g     O .bss	00000001 OSTaskCtr
00095c80 g     F .text	0000017c OSTimeDlyHMSM
00086a1c g     F .text	0000028c __multiply
000967ac g     F .text	00000068 altera_avalon_jtag_uart_close
00080328 g     F .text	00000104 dec2ToHex
0008b08c g     F .text	00000028 .hidden __mulsi3
00098634 g       *ABS*	00000000 __ram_rwdata_start
000981a8 g       *ABS*	00000000 __ram_rodata_start
0009bde4 g     O .bss	00000028 __malloc_current_mallinfo
0009a13a g     O .rwdata	00000002 OSEventMax
000872fc g     F .text	0000014c __d2b
000940f0 g     F .text	00000110 OSSemPost
0008f32c g     F .text	000000dc OSSchedUnlock
0009bd24 g     O .bss	00000004 intCounter
00096158 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00097d20 g     F .text	000000f4 alt_get_fd
0009bdb0 g     O .bss	00000004 OSMemFreeList
0008f478 g     F .text	000000b0 OSStatInit
0009de0c g     O .bss	00002000 taskWriteHex0_3_stk
00091cb0 g     F .text	000000c4 OSFlagQuery
0009a170 g     O .rwdata	00000002 OSTaskCreateExtEn
00089058 g     F .text	00000054 _close_r
00097e60 g     F .text	0000007c memcmp
0008f768 g     F .text	00000020 OS_Dummy
00096218 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000a3130 g       *ABS*	00000000 __alt_stack_base
00096268 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0008319c g     F .text	00000154 __swsetup_r
000a16ac g     O .bss	000001e0 OSQTbl
0008b960 g     F .text	000009d0 .hidden __divdf3
00085078 g     F .text	00000118 __sfp
00080d30 g     F .text	000000b8 strncat
00087560 g     F .text	00000078 __copybits
00098ad0 g     O .rwdata	00000408 __malloc_av_
000851c4 g     F .text	00000004 __sinit_lock_release
0009bdb4 g     O .bss	00000004 OSTCBHighRdy
0008c588 g     F .text	0000086c .hidden __muldf3
0008772c g     F .text	00000054 __sread
0009bdb8 g     O .bss	00000004 OSQFreeList
00097c18 g     F .text	00000108 alt_find_file
00097100 g     F .text	000000a4 alt_dev_llist_insert
0008e6a8 g     F .text	00000120 __malloc_lock
0008e398 g     F .text	000000b0 sbrk
0008e9b4 g     F .text	00000140 OSEventNameSet
00084dbc g     F .text	0000005c _fflush_r
000890ac g     F .text	000000dc _calloc_r
0009bdbc g     O .bss	00000001 OSRdyGrp
0009bd24 g       *ABS*	00000000 __bss_start
00086484 g     F .text	00000128 memset
00080980 g     F .text	000000b4 main
0009bd78 g     O .bss	00000004 alt_envp
0009bd58 g     O .bss	00000004 __malloc_max_total_mem
000961b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008a2cc g     F .text	00000018 __swbuf
000984fc g     O .rodata	00000100 OSUnMapTbl
0009a16a g     O .rwdata	00000002 OSSemEn
0009191c g     F .text	00000394 OSFlagPost
00087860 g     F .text	00000008 __sclose
000be800 g       *ABS*	00000000 __alt_heap_limit
00089278 g     F .text	00000014 fclose
0008f920 g     F .text	00000110 OS_EventTaskWait
00090508 g     F .text	000000cc OS_TaskStatStkChk
00094fd4 g     F .text	00000150 OSTaskDelReq
00083518 g     F .text	00001688 _dtoa_r
00085a4c g     F .text	0000080c _malloc_r
0008a440 g     F .text	00000030 __ascii_wctomb
0009a11c g     O .rwdata	00000004 alt_errno
0008f408 g     F .text	00000070 OSStart
0008e648 g     F .text	00000060 __env_unlock
0008562c g     F .text	000000c4 _fwalk
00095470 g     F .text	000001d4 OSTaskResume
000926ec g     F .text	000000e8 OSMemQuery
0009a17c g     O .rwdata	00000002 OSTaskStatEn
0009a156 g     O .rwdata	00000002 OSMemMax
00093430 g     F .text	00000170 OSQPostFront
00080a34 g     F .text	00000084 .hidden __divsi3
0009bdbd g     O .bss	00000003 OSRdyTbl
0009a130 g     O .rwdata	00000002 OSDebugEn
000851f8 g     F .text	00000124 _malloc_trim_r
000981a8 g       *ABS*	00000000 __CTOR_END__
0009a148 g     O .rwdata	00000002 OSFlagNodeSize
0009a190 g     O .rwdata	00000002 OSTmrCfgMax
00080c54 g     F .text	000000dc strcmp
000929ec g     F .text	000001ac OSQCreate
00095124 g     F .text	00000198 OSTaskNameGet
000981a8 g       *ABS*	00000000 __flash_rodata_start
000935a0 g     F .text	0000020c OSQPostOpt
0008f528 g     F .text	00000220 OSTimeTick
0009a178 g     O .rwdata	00000002 OSTaskMax
000981a8 g       *ABS*	00000000 __DTOR_LIST__
00093a60 g     F .text	000000d8 OSSemCreate
0009a19c g     O .rwdata	00000002 OSTmrWheelSize
000806b0 g     F .text	000000bc taskWriteHex4_5
0008c330 g     F .text	00000088 .hidden __nedf2
0009a172 g     O .rwdata	00000002 OSTaskDelEn
00094200 g     F .text	00000110 OSSemQuery
00092b98 g     F .text	00000280 OSQDel
0009315c g     F .text	0000016c OSQPendAbort
000960c0 g     F .text	00000038 alt_irq_init
0008e314 g     F .text	00000084 alt_release_fd
000983dc g     O .rodata	00000100 .hidden __clz_tab
0009bd4c g     O .bss	00000004 _PathLocale
00097e14 g     F .text	00000014 atexit
00088ff8 g     F .text	00000060 _write_r
0008f2a0 g     F .text	0000008c OSSchedLock
0008586c g     F .text	00000018 setlocale
00090d40 g     F .text	00000108 OSFlagCreate
0009a0f4 g     O .rwdata	00000004 _impure_ptr
0009bd70 g     O .bss	00000004 alt_argc
00084ba0 g     F .text	0000021c __sflush_r
00097204 g     F .text	00000060 _do_dtors
00085858 g     F .text	00000008 __locale_cjk_lang
0009a142 g     O .rwdata	00000002 OSEventMultiEn
00090e48 g     F .text	00000248 OSFlagDel
0009bdc0 g     O .bss	00000004 OSEventFreeList
00080020 g       .exceptions	00000000 alt_irq_entry
0008718c g     F .text	00000064 __ulp
00091304 g     F .text	000005b8 OSFlagPend
0009a18e g     O .rwdata	00000002 OSTmrEn
000851e0 g     F .text	00000018 __fp_unlock_all
0009a108 g     O .rwdata	00000008 alt_fs_list
00090318 g     F .text	00000074 OS_StrCopy
0009a158 g     O .rwdata	00000002 OSMemNameSize
00097b24 g     F .text	00000020 OSInitHookEnd
00080020 g       *ABS*	00000000 __ram_exceptions_start
0009a184 g     O .rwdata	00000002 OSTCBPrioTblMax
00085884 g     F .text	0000000c localeconv
0009a180 g     O .rwdata	00000002 OSTaskStatStkChkEn
0008db8c g     F .text	00000050 alt_ic_isr_register
0009a154 g     O .rwdata	00000002 OSMemEn
0009a15e g     O .rwdata	00000002 OSMutexEn
0009a1ac g       *ABS*	00000000 _edata
000a3130 g       *ABS*	00000000 _end
0009bdc4 g     O .bss	00000001 OSIntNesting
0009bd3c g     O .bss	00000004 noPara
0008928c g     F .text	00000164 __fputwc
000801c0 g       *ABS*	00000000 __ram_exceptions_end
00096814 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00095dfc g     F .text	000001d4 OSTimeDlyResume
000911b8 g     F .text	0000014c OSFlagNameSet
00095644 g     F .text	000001c0 OSTaskStkChk
0008dc64 g     F .text	0000008c alt_ic_irq_disable
0009a15a g     O .rwdata	00000002 OSMemSize
00087788 g     F .text	0000007c __swrite
0009a100 g     O .rwdata	00000004 __malloc_trim_threshold
0009780c g     F .text	00000024 altera_nios2_qsys_irq_init
0008584c g     F .text	0000000c __locale_msgcharset
0009bdc8 g     O .bss	00000004 OSTCBCur
0009bd40 g     O .bss	00000004 hex0_3Counter
00097e28 g     F .text	00000038 exit
0009bd44 g     O .bss	00000004 flags
0009a15c g     O .rwdata	00000002 OSMemTblSize
000856f0 g     F .text	000000c4 _fwalk_reent
00086f90 g     F .text	000001fc __mdiff
00080ab8 g     F .text	00000074 .hidden __modsi3
000be800 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000851bc g     F .text	00000004 __sfp_lock_release
0008f104 g     F .text	00000058 OSInit
000959e8 g     F .text	00000124 OSTaskQuery
00093908 g     F .text	000000a8 OS_QInit
0009038c g     F .text	00000054 OS_StrLen
00092500 g     F .text	00000114 OSMemNameSet
0009a176 g     O .rwdata	00000002 OSTaskProfileEn
0009bdcc g     O .bss	00000004 OSTime
000a188c g     O .bss	00000800 OSTaskIdleStk
00098174 g     F .text	00000034 _exit
00096f78 g     F .text	0000012c alt_alarm_start
00091090 g     F .text	00000128 OSFlagNameGet
00095fd0 g     F .text	0000005c OSTimeGet
00085890 g     F .text	000001bc __smakebuf_r
00087868 g     F .text	00000098 strlen
00097aa4 g     F .text	00000020 OSTaskSwHook
0009750c g     F .text	0000015c open
000a208c g     O .bss	00000b40 OSEventTbl
0008c3b8 g     F .text	000000dc .hidden __gedf2
000a2bcc g     O .bss	00000510 OSTCBTbl
00094310 g     F .text	00000100 OSSemSet
0009a104 g     O .rwdata	00000004 __wctomb
000879fc g     F .text	00000018 __sprint_r
00097264 g     F .text	00000020 alt_icache_flush_all
0009a120 g     O .rwdata	00000004 alt_priority_mask
00093b38 g     F .text	00000240 OSSemDel
0009bdd0 g     O .bss	00000004 OSFlagFreeList
0008dbdc g     F .text	00000088 alt_ic_irq_enable
0009a13c g     O .rwdata	00000002 OSEventNameSize
000830c4 g     F .text	0000001c __vfprintf_internal
0009bdd4 g     O .bss	00000001 OSStatRdy
000a30dc g     O .bss	00000054 OSTCBPrioTbl
0008a470 g     F .text	0000005c _wctomb_r
0008e584 g     F .text	000000c4 __env_lock
0009a182 g     O .rwdata	00000002 OSTaskSwHookEn
0008cdf4 g     F .text	000008fc .hidden __subdf3
00086930 g     F .text	000000b0 __lo0bits
0009bd48 g     O .bss	00000004 hex4_5Counter
0009a1a4 g     O .rwdata	00000008 alt_alarm_list
0009a14a g     O .rwdata	00000002 OSFlagWidth
000971a4 g     F .text	00000060 _do_ctors
0008a380 g     F .text	000000c0 wcrtomb
0008d994 g     F .text	000000d8 close
0009bd80 g     O .bss	00000004 alt_envsem
0009bdd8 g     O .bss	00000004 OSIdleCtrRun
00080858 g     F .text	00000128 write7SegDisplay
0009a0ec g     O .rwdata	00000004 runTimer
0008f748 g     F .text	00000020 OSVersion
0009a194 g     O .rwdata	00000002 OSTmrCfgWheelSize
0008df7c g     F .text	00000084 alt_load
00095b0c g     F .text	00000070 OS_TaskStkClr
0009a16e g     O .rwdata	00000002 OSTaskCreateEn
0008fd38 g     F .text	00000068 OS_EventWaitListInit
00089414 g     F .text	00000080 fputwc
00097b44 g     F .text	00000020 OSTaskIdleHook
000851c0 g     F .text	00000004 __sinit_lock_acquire
0008667c g     F .text	00000148 __multadd
00086654 g     F .text	00000028 _Bfree
00095804 g     F .text	000001e4 OSTaskSuspend
000903e0 g     F .text	0000005c OS_TaskIdle
0009a19a g     O .rwdata	00000002 OSTmrTblSize
000937ac g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08407014 	ori	at,at,448
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	008f15c0 	call	8f15c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001426 	beq	r2,zero,8017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	008002b4 	movhi	r2,10
   80130:	10bf8304 	addi	r2,r2,-500
   80134:	e0fffd17 	ldw	r3,-12(fp)
   80138:	180690fa 	slli	r3,r3,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	008002b4 	movhi	r2,10
   80148:	10bf8304 	addi	r2,r2,-500
   8014c:	e13ffd17 	ldw	r4,-12(fp)
   80150:	200890fa 	slli	r4,r4,3
   80154:	1105883a 	add	r2,r2,r4
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	00000706 	br	80198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8017c:	e0bffc17 	ldw	r2,-16(fp)
   80180:	1085883a 	add	r2,r2,r2
   80184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80188:	e0bffd17 	ldw	r2,-12(fp)
   8018c:	10800044 	addi	r2,r2,1
   80190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   80194:	003fe106 	br	8011c <__alt_data_end+0xfffc191c>

    active = alt_irq_pending ();
   80198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8019c:	e0bffb17 	ldw	r2,-20(fp)
   801a0:	103fdb1e 	bne	r2,zero,80110 <__alt_data_end+0xfffc1910>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801a4:	008f1a80 	call	8f1a8 <OSIntExit>
}
   801a8:	0001883a 	nop
   801ac:	e037883a 	mov	sp,fp
   801b0:	dfc00117 	ldw	ra,4(sp)
   801b4:	df000017 	ldw	fp,0(sp)
   801b8:	dec00204 	addi	sp,sp,8
   801bc:	f800283a 	ret

Disassembly of section .text:

000801c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801c0:	06c002f4 	movhi	sp,11
    ori sp, sp, %lo(__alt_stack_pointer)
   801c4:	defa0014 	ori	sp,sp,59392
    movhi gp, %hi(_gp)
   801c8:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   801cc:	d6883b14 	ori	gp,gp,8428
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801d0:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801d4:	10af4914 	ori	r2,r2,48420

    movhi r3, %hi(__bss_end)
   801d8:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   801dc:	18cc4c14 	ori	r3,r3,12592

    beq r2, r3, 1f
   801e0:	10c00326 	beq	r2,r3,801f0 <_start+0x30>

0:
    stw zero, (r2)
   801e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801ec:	10fffd36 	bltu	r2,r3,801e4 <__alt_data_end+0xfffc19e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801f0:	008df7c0 	call	8df7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801f4:	008e1180 	call	8e118 <alt_main>

000801f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f8:	003fff06 	br	801f8 <__alt_data_end+0xfffc19f8>

000801fc <charToInt>:

volatile int runTimer = 1;	// AANPASSEN

//Convert a char hexadecimal character to its corresponding int value
int charToInt(char convert)
{
   801fc:	defffe04 	addi	sp,sp,-8
   80200:	df000115 	stw	fp,4(sp)
   80204:	df000104 	addi	fp,sp,4
   80208:	2005883a 	mov	r2,r4
   8020c:	e0bfff05 	stb	r2,-4(fp)
	switch(convert){
   80210:	e0bfff07 	ldb	r2,-4(fp)
   80214:	10bff404 	addi	r2,r2,-48
   80218:	10c005e8 	cmpgeui	r3,r2,23
   8021c:	18003d1e 	bne	r3,zero,80314 <charToInt+0x118>
   80220:	100690ba 	slli	r3,r2,2
   80224:	00800234 	movhi	r2,8
   80228:	10808e04 	addi	r2,r2,568
   8022c:	1885883a 	add	r2,r3,r2
   80230:	10800017 	ldw	r2,0(r2)
   80234:	1000683a 	jmp	r2
   80238:	00080294 	movui	zero,8202
   8023c:	0008029c 	xori	zero,zero,8202
   80240:	000802a4 	muli	zero,zero,8202
   80244:	000802ac 	andhi	zero,zero,8202
   80248:	000802b4 	movhi	zero,8202
   8024c:	000802bc 	xorhi	zero,zero,8202
   80250:	000802c4 	movi	zero,8203
   80254:	000802cc 	andi	zero,zero,8203
   80258:	000802d4 	movui	zero,8203
   8025c:	000802dc 	xori	zero,zero,8203
   80260:	00080314 	movui	zero,8204
   80264:	00080314 	movui	zero,8204
   80268:	00080314 	movui	zero,8204
   8026c:	00080314 	movui	zero,8204
   80270:	00080314 	movui	zero,8204
   80274:	00080314 	movui	zero,8204
   80278:	00080314 	movui	zero,8204
   8027c:	000802e4 	muli	zero,zero,8203
   80280:	000802ec 	andhi	zero,zero,8203
   80284:	000802f4 	movhi	zero,8203
   80288:	000802fc 	xorhi	zero,zero,8203
   8028c:	00080304 	movi	zero,8204
   80290:	0008030c 	andi	zero,zero,8204
        case '0' : return 0; break;
   80294:	0005883a 	mov	r2,zero
   80298:	00001f06 	br	80318 <charToInt+0x11c>
        case '1' : return 1; break;
   8029c:	00800044 	movi	r2,1
   802a0:	00001d06 	br	80318 <charToInt+0x11c>
        case '2' : return 2; break;
   802a4:	00800084 	movi	r2,2
   802a8:	00001b06 	br	80318 <charToInt+0x11c>
        case '3' : return 3; break;
   802ac:	008000c4 	movi	r2,3
   802b0:	00001906 	br	80318 <charToInt+0x11c>
        case '4' : return 4; break;
   802b4:	00800104 	movi	r2,4
   802b8:	00001706 	br	80318 <charToInt+0x11c>
        case '5' : return 5; break;
   802bc:	00800144 	movi	r2,5
   802c0:	00001506 	br	80318 <charToInt+0x11c>
        case '6' : return 6; break;
   802c4:	00800184 	movi	r2,6
   802c8:	00001306 	br	80318 <charToInt+0x11c>
        case '7' : return 7; break;
   802cc:	008001c4 	movi	r2,7
   802d0:	00001106 	br	80318 <charToInt+0x11c>
        case '8' : return 8; break;
   802d4:	00800204 	movi	r2,8
   802d8:	00000f06 	br	80318 <charToInt+0x11c>
        case '9' : return 9; break;
   802dc:	00800244 	movi	r2,9
   802e0:	00000d06 	br	80318 <charToInt+0x11c>
        case 'A' : return 10; break;
   802e4:	00800284 	movi	r2,10
   802e8:	00000b06 	br	80318 <charToInt+0x11c>
        case 'B' : return 11; break;
   802ec:	008002c4 	movi	r2,11
   802f0:	00000906 	br	80318 <charToInt+0x11c>
        case 'C' : return 12; break;
   802f4:	00800304 	movi	r2,12
   802f8:	00000706 	br	80318 <charToInt+0x11c>
        case 'D' : return 13; break;
   802fc:	00800344 	movi	r2,13
   80300:	00000506 	br	80318 <charToInt+0x11c>
        case 'E' : return 14; break;
   80304:	00800384 	movi	r2,14
   80308:	00000306 	br	80318 <charToInt+0x11c>
        case 'F' : return 15; break;
   8030c:	008003c4 	movi	r2,15
   80310:	00000106 	br	80318 <charToInt+0x11c>
        default  : return 0;
   80314:	0005883a 	mov	r2,zero
    }
}
   80318:	e037883a 	mov	sp,fp
   8031c:	df000017 	ldw	fp,0(sp)
   80320:	dec00104 	addi	sp,sp,4
   80324:	f800283a 	ret

00080328 <dec2ToHex>:
char* dec2ToHex(int decimalnum)
{
   80328:	defffa04 	addi	sp,sp,-24
   8032c:	df000515 	stw	fp,20(sp)
   80330:	df000504 	addi	fp,sp,20
   80334:	e13fff15 	stw	r4,-4(fp)
    int quotient, remainder;
    int j = 0;
   80338:	e03ffc15 	stw	zero,-16(fp)
    static char hexadecimalnum[MAX_HEX_SIZE];

    for(int i = 0; i < MAX_HEX_SIZE; i++)
   8033c:	e03ffd15 	stw	zero,-12(fp)
   80340:	00000806 	br	80364 <dec2ToHex+0x3c>
        hexadecimalnum[i] = '0';
   80344:	e0fffd17 	ldw	r3,-12(fp)
   80348:	d0a71004 	addi	r2,gp,-25536
   8034c:	1885883a 	add	r2,r3,r2
   80350:	00c00c04 	movi	r3,48
   80354:	10c00005 	stb	r3,0(r2)
{
    int quotient, remainder;
    int j = 0;
    static char hexadecimalnum[MAX_HEX_SIZE];

    for(int i = 0; i < MAX_HEX_SIZE; i++)
   80358:	e0bffd17 	ldw	r2,-12(fp)
   8035c:	10800044 	addi	r2,r2,1
   80360:	e0bffd15 	stw	r2,-12(fp)
   80364:	e0bffd17 	ldw	r2,-12(fp)
   80368:	10800190 	cmplti	r2,r2,6
   8036c:	103ff51e 	bne	r2,zero,80344 <__alt_data_end+0xfffc1b44>
        hexadecimalnum[i] = '0';

    quotient = decimalnum;
   80370:	e0bfff17 	ldw	r2,-4(fp)
   80374:	e0bffb15 	stw	r2,-20(fp)

    while (quotient != 0)
   80378:	00002506 	br	80410 <dec2ToHex+0xe8>
    {
        remainder = quotient % 16;
   8037c:	e0fffb17 	ldw	r3,-20(fp)
   80380:	00a00034 	movhi	r2,32768
   80384:	108003c4 	addi	r2,r2,15
   80388:	1884703a 	and	r2,r3,r2
   8038c:	1000040e 	bge	r2,zero,803a0 <dec2ToHex+0x78>
   80390:	10bfffc4 	addi	r2,r2,-1
   80394:	00fffc04 	movi	r3,-16
   80398:	10c4b03a 	or	r2,r2,r3
   8039c:	10800044 	addi	r2,r2,1
   803a0:	e0bffe15 	stw	r2,-8(fp)
        if (remainder < 10)
   803a4:	e0bffe17 	ldw	r2,-8(fp)
   803a8:	10800288 	cmpgei	r2,r2,10
   803ac:	10000a1e 	bne	r2,zero,803d8 <dec2ToHex+0xb0>
            hexadecimalnum[j++] = 48 + remainder;
   803b0:	e0bffc17 	ldw	r2,-16(fp)
   803b4:	10c00044 	addi	r3,r2,1
   803b8:	e0fffc15 	stw	r3,-16(fp)
   803bc:	e0fffe17 	ldw	r3,-8(fp)
   803c0:	18c00c04 	addi	r3,r3,48
   803c4:	1809883a 	mov	r4,r3
   803c8:	d0e71004 	addi	r3,gp,-25536
   803cc:	10c5883a 	add	r2,r2,r3
   803d0:	11000005 	stb	r4,0(r2)
   803d4:	00000906 	br	803fc <dec2ToHex+0xd4>
        else
            hexadecimalnum[j++] = 55 + remainder;
   803d8:	e0bffc17 	ldw	r2,-16(fp)
   803dc:	10c00044 	addi	r3,r2,1
   803e0:	e0fffc15 	stw	r3,-16(fp)
   803e4:	e0fffe17 	ldw	r3,-8(fp)
   803e8:	18c00dc4 	addi	r3,r3,55
   803ec:	1809883a 	mov	r4,r3
   803f0:	d0e71004 	addi	r3,gp,-25536
   803f4:	10c5883a 	add	r2,r2,r3
   803f8:	11000005 	stb	r4,0(r2)
        quotient = quotient / 16;
   803fc:	e0bffb17 	ldw	r2,-20(fp)
   80400:	1000010e 	bge	r2,zero,80408 <dec2ToHex+0xe0>
   80404:	108003c4 	addi	r2,r2,15
   80408:	1005d13a 	srai	r2,r2,4
   8040c:	e0bffb15 	stw	r2,-20(fp)
    for(int i = 0; i < MAX_HEX_SIZE; i++)
        hexadecimalnum[i] = '0';

    quotient = decimalnum;

    while (quotient != 0)
   80410:	e0bffb17 	ldw	r2,-20(fp)
   80414:	103fd91e 	bne	r2,zero,8037c <__alt_data_end+0xfffc1b7c>
            hexadecimalnum[j++] = 48 + remainder;
        else
            hexadecimalnum[j++] = 55 + remainder;
        quotient = quotient / 16;
    }
    return hexadecimalnum;
   80418:	d0a71004 	addi	r2,gp,-25536
}
   8041c:	e037883a 	mov	sp,fp
   80420:	df000017 	ldw	fp,0(sp)
   80424:	dec00104 	addi	sp,sp,4
   80428:	f800283a 	ret

0008042c <init_interrupt>:

void init_interrupt(){
   8042c:	defff804 	addi	sp,sp,-32
   80430:	dfc00715 	stw	ra,28(sp)
   80434:	df000615 	stw	fp,24(sp)
   80438:	df000604 	addi	fp,sp,24
		/*Set interrupt for interval timer*/
		int counter	= 50000;	// 1/(50MHz) x (50000) = 1msec
   8043c:	00b0d414 	movui	r2,50000
   80440:	e0bffb15 	stw	r2,-20(fp)
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, counter & 0xFFFF);
   80444:	e0bffb17 	ldw	r2,-20(fp)
   80448:	10ffffcc 	andi	r3,r2,65535
   8044c:	00800134 	movhi	r2,4
   80450:	10800a04 	addi	r2,r2,40
   80454:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (counter >> 16) & 0xFFFF);
   80458:	e0bffb17 	ldw	r2,-20(fp)
   8045c:	1004d43a 	srli	r2,r2,16
   80460:	1007883a 	mov	r3,r2
   80464:	00800134 	movhi	r2,4
   80468:	10800b04 	addi	r2,r2,44
   8046c:	10c00035 	stwio	r3,0(r2)

		//Set control register bits
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x7);
   80470:	00c001c4 	movi	r3,7
   80474:	00800134 	movhi	r2,4
   80478:	10800904 	addi	r2,r2,36
   8047c:	10c00035 	stwio	r3,0(r2)
		//Set control register bits, enable Write interrupts
		IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_0_BASE, 0x2);
   80480:	00c00084 	movi	r3,2
   80484:	00800134 	movhi	r2,4
   80488:	10801304 	addi	r2,r2,76
   8048c:	10c00035 	stwio	r3,0(r2)

		void* isrPara  = (void *) &noPara;
   80490:	d0a71404 	addi	r2,gp,-25520
   80494:	e0bffc15 	stw	r2,-16(fp)
		void* noFlags  = (void *) &flags;
   80498:	d0a71604 	addi	r2,gp,-25512
   8049c:	e0bffd15 	stw	r2,-12(fp)
		void* isrPara1 = (void *) &noPara1;
   804a0:	d0a71204 	addi	r2,gp,-25528
   804a4:	e0bffe15 	stw	r2,-8(fp)
		void* noFlags1 = (void *) &flags1;
   804a8:	d0a71304 	addi	r2,gp,-25524
   804ac:	e0bfff15 	stw	r2,-4(fp)
		//uitzoeken wat void isr_context moet zijn en de flags
		if(alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ, counterInterrupt, isrPara, noFlags) != 0){
   804b0:	e0bffd17 	ldw	r2,-12(fp)
   804b4:	d8800015 	stw	r2,0(sp)
   804b8:	e1fffc17 	ldw	r7,-16(fp)
   804bc:	01800234 	movhi	r6,8
   804c0:	31815604 	addi	r6,r6,1368
   804c4:	01400144 	movi	r5,5
   804c8:	0009883a 	mov	r4,zero
   804cc:	008db8c0 	call	8db8c <alt_ic_isr_register>
   804d0:	10000326 	beq	r2,zero,804e0 <init_interrupt+0xb4>
			printf("Error in initializing interval timer interrupt");
   804d4:	010002b4 	movhi	r4,10
   804d8:	21206a04 	addi	r4,r4,-32344
   804dc:	0080c180 	call	80c18 <printf>
		}
		/*Set jtag_uart interrupt */
		if(alt_ic_isr_register(JTAG_UART_0_IRQ_INTERRUPT_CONTROLLER_ID,JTAG_UART_0_IRQ, jtagInterrupt, isrPara1, noFlags1) != 0){
   804e0:	e0bfff17 	ldw	r2,-4(fp)
   804e4:	d8800015 	stw	r2,0(sp)
   804e8:	e1fffe17 	ldw	r7,-8(fp)
   804ec:	01800234 	movhi	r6,8
   804f0:	3181db04 	addi	r6,r6,1900
   804f4:	01400184 	movi	r5,6
   804f8:	0009883a 	mov	r4,zero
   804fc:	008db8c0 	call	8db8c <alt_ic_isr_register>
   80500:	10000326 	beq	r2,zero,80510 <init_interrupt+0xe4>
			printf("Error in initializing jtag_uart interrupt");
   80504:	010002b4 	movhi	r4,10
   80508:	21207604 	addi	r4,r4,-32296
   8050c:	0080c180 	call	80c18 <printf>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80510:	00800044 	movi	r2,1
   80514:	1001703a 	wrctl	status,r2
		}

		alt_irq_cpu_enable_interrupts();
		alt_ic_irq_enable(JTAG_UART_0_IRQ_INTERRUPT_CONTROLLER_ID,jtagInterrupt);
   80518:	00800234 	movhi	r2,8
   8051c:	1081db04 	addi	r2,r2,1900
   80520:	100b883a 	mov	r5,r2
   80524:	0009883a 	mov	r4,zero
   80528:	008dbdc0 	call	8dbdc <alt_ic_irq_enable>
		alt_ic_irq_enable(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, counterInterrupt);
   8052c:	00800234 	movhi	r2,8
   80530:	10815604 	addi	r2,r2,1368
   80534:	100b883a 	mov	r5,r2
   80538:	0009883a 	mov	r4,zero
   8053c:	008dbdc0 	call	8dbdc <alt_ic_irq_enable>
}
   80540:	0001883a 	nop
   80544:	e037883a 	mov	sp,fp
   80548:	dfc00117 	ldw	ra,4(sp)
   8054c:	df000017 	ldw	fp,0(sp)
   80550:	dec00204 	addi	sp,sp,8
   80554:	f800283a 	ret

00080558 <counterInterrupt>:

void counterInterrupt(void* pdata){
   80558:	defffd04 	addi	sp,sp,-12
   8055c:	dfc00215 	stw	ra,8(sp)
   80560:	df000115 	stw	fp,4(sp)
   80564:	df000104 	addi	fp,sp,4
   80568:	e13fff15 	stw	r4,-4(fp)
	//checkStatus();
	if(runTimer == 1){
   8056c:	d0a00017 	ldw	r2,-32768(gp)
   80570:	10800058 	cmpnei	r2,r2,1
   80574:	1000191e 	bne	r2,zero,805dc <counterInterrupt+0x84>
		if(((intCounter % 1000) == 0) && intCounter != 0){
   80578:	d0a70e17 	ldw	r2,-25544(gp)
   8057c:	0140fa04 	movi	r5,1000
   80580:	1009883a 	mov	r4,r2
   80584:	0080ab80 	call	80ab8 <__modsi3>
   80588:	10000d1e 	bne	r2,zero,805c0 <counterInterrupt+0x68>
   8058c:	d0a70e17 	ldw	r2,-25544(gp)
   80590:	10000b26 	beq	r2,zero,805c0 <counterInterrupt+0x68>
			int1sCounter++;
   80594:	d0a70f17 	ldw	r2,-25540(gp)
   80598:	10800044 	addi	r2,r2,1
   8059c:	d0a70f15 	stw	r2,-25540(gp)
			intCounter++;
   805a0:	d0a70e17 	ldw	r2,-25544(gp)
   805a4:	10800044 	addi	r2,r2,1
   805a8:	d0a70e15 	stw	r2,-25544(gp)
			OSTaskSuspend(taskWriteHex0_3Priority);
   805ac:	01000044 	movi	r4,1
   805b0:	00958040 	call	95804 <OSTaskSuspend>
			OSTaskResume(taskWriteHex4_5Priority);
   805b4:	01000084 	movi	r4,2
   805b8:	00954700 	call	95470 <OSTaskResume>
	}else{
//		//sleep the threads so they cant increase counter;
//		OSTaskSuspend(taskWriteHex0_3Priority);
//		OSTaskSuspend(taskWriteHex4_5Priority);
	}
}
   805bc:	00000706 	br	805dc <counterInterrupt+0x84>
			int1sCounter++;
			intCounter++;
			OSTaskSuspend(taskWriteHex0_3Priority);
			OSTaskResume(taskWriteHex4_5Priority);
		}else{
			intCounter++;
   805c0:	d0a70e17 	ldw	r2,-25544(gp)
   805c4:	10800044 	addi	r2,r2,1
   805c8:	d0a70e15 	stw	r2,-25544(gp)
			OSTaskSuspend(taskWriteHex4_5Priority);
   805cc:	01000084 	movi	r4,2
   805d0:	00958040 	call	95804 <OSTaskSuspend>
			OSTaskResume(taskWriteHex0_3Priority);
   805d4:	01000044 	movi	r4,1
   805d8:	00954700 	call	95470 <OSTaskResume>
	}else{
//		//sleep the threads so they cant increase counter;
//		OSTaskSuspend(taskWriteHex0_3Priority);
//		OSTaskSuspend(taskWriteHex4_5Priority);
	}
}
   805dc:	0001883a 	nop
   805e0:	e037883a 	mov	sp,fp
   805e4:	dfc00117 	ldw	ra,4(sp)
   805e8:	df000017 	ldw	fp,0(sp)
   805ec:	dec00204 	addi	sp,sp,8
   805f0:	f800283a 	ret

000805f4 <taskWriteHex0_3>:



/* Prints "Hello World" and sleeps for three seconds */
void taskWriteHex0_3(void* pdata){
   805f4:	defff904 	addi	sp,sp,-28
   805f8:	dfc00615 	stw	ra,24(sp)
   805fc:	df000515 	stw	fp,20(sp)
   80600:	df000504 	addi	fp,sp,20
   80604:	e13fff15 	stw	r4,-4(fp)
	int displaySelector = 0;
   80608:	e03ffb15 	stw	zero,-20(fp)
	while(1){
		displaySelector = 0;
   8060c:	e03ffb15 	stw	zero,-20(fp)
		if(runTimer == 1){
   80610:	d0a00017 	ldw	r2,-32768(gp)
   80614:	10800058 	cmpnei	r2,r2,1
   80618:	103ffc1e 	bne	r2,zero,8060c <__alt_data_end+0xfffc1e0c>
			char *intCounterHex;
			volatile int * interval_timer_ptr = (int *)TIMER_0_BASE;
   8061c:	00800134 	movhi	r2,4
   80620:	10800804 	addi	r2,r2,32
   80624:	e0bffd15 	stw	r2,-12(fp)
			*(interval_timer_ptr) = 0;
   80628:	e0bffd17 	ldw	r2,-12(fp)
   8062c:	10000015 	stw	zero,0(r2)

			if(intCounter > 65535) intCounter = 0;
   80630:	d0a70e17 	ldw	r2,-25544(gp)
   80634:	00ffffd4 	movui	r3,65535
   80638:	1880010e 	bge	r3,r2,80640 <taskWriteHex0_3+0x4c>
   8063c:	d0270e15 	stw	zero,-25544(gp)
			hex0_3Counter = intCounter;
   80640:	d0a70e17 	ldw	r2,-25544(gp)
   80644:	d0a71515 	stw	r2,-25516(gp)
			intCounterHex = dec2ToHex(intCounter);
   80648:	d0a70e17 	ldw	r2,-25544(gp)
   8064c:	1009883a 	mov	r4,r2
   80650:	00803280 	call	80328 <dec2ToHex>
   80654:	e0bffe15 	stw	r2,-8(fp)


			for(int i = 0; i < 4; i++){
   80658:	e03ffc15 	stw	zero,-16(fp)
   8065c:	00001006 	br	806a0 <taskWriteHex0_3+0xac>
				write7SegDisplay(intCounterHex[i], displaySelector);
   80660:	e0bffc17 	ldw	r2,-16(fp)
   80664:	e0fffe17 	ldw	r3,-8(fp)
   80668:	1885883a 	add	r2,r3,r2
   8066c:	10800003 	ldbu	r2,0(r2)
   80670:	10803fcc 	andi	r2,r2,255
   80674:	1080201c 	xori	r2,r2,128
   80678:	10bfe004 	addi	r2,r2,-128
   8067c:	e17ffb17 	ldw	r5,-20(fp)
   80680:	1009883a 	mov	r4,r2
   80684:	00808580 	call	80858 <write7SegDisplay>
				displaySelector++;
   80688:	e0bffb17 	ldw	r2,-20(fp)
   8068c:	10800044 	addi	r2,r2,1
   80690:	e0bffb15 	stw	r2,-20(fp)
			if(intCounter > 65535) intCounter = 0;
			hex0_3Counter = intCounter;
			intCounterHex = dec2ToHex(intCounter);


			for(int i = 0; i < 4; i++){
   80694:	e0bffc17 	ldw	r2,-16(fp)
   80698:	10800044 	addi	r2,r2,1
   8069c:	e0bffc15 	stw	r2,-16(fp)
   806a0:	e0bffc17 	ldw	r2,-16(fp)
   806a4:	10800110 	cmplti	r2,r2,4
   806a8:	103fed1e 	bne	r2,zero,80660 <__alt_data_end+0xfffc1e60>
				write7SegDisplay(intCounterHex[i], displaySelector);
				displaySelector++;
			}
		}
	}
   806ac:	003fd706 	br	8060c <__alt_data_end+0xfffc1e0c>

000806b0 <taskWriteHex4_5>:
	OSTaskSuspend(OS_PRIO_SELF);
}
void taskWriteHex4_5(void* pdata){
   806b0:	defff904 	addi	sp,sp,-28
   806b4:	dfc00615 	stw	ra,24(sp)
   806b8:	df000515 	stw	fp,20(sp)
   806bc:	df000504 	addi	fp,sp,20
   806c0:	e13fff15 	stw	r4,-4(fp)
	int displaySelector = 4;
   806c4:	00800104 	movi	r2,4
   806c8:	e0bffb15 	stw	r2,-20(fp)
	while(1){
		displaySelector = 4;
   806cc:	00800104 	movi	r2,4
   806d0:	e0bffb15 	stw	r2,-20(fp)
		if(runTimer == 1){
   806d4:	d0a00017 	ldw	r2,-32768(gp)
   806d8:	10800058 	cmpnei	r2,r2,1
   806dc:	103ffb1e 	bne	r2,zero,806cc <__alt_data_end+0xfffc1ecc>
			char *intCounterHex;
			volatile int * interval_timer_ptr = (int *)TIMER_0_BASE;
   806e0:	00800134 	movhi	r2,4
   806e4:	10800804 	addi	r2,r2,32
   806e8:	e0bffd15 	stw	r2,-12(fp)
			*(interval_timer_ptr) = 0;
   806ec:	e0bffd17 	ldw	r2,-12(fp)
   806f0:	10000015 	stw	zero,0(r2)

			if(int1sCounter > 255) int1sCounter = 0;
   806f4:	d0a70f17 	ldw	r2,-25540(gp)
   806f8:	10804010 	cmplti	r2,r2,256
   806fc:	1000011e 	bne	r2,zero,80704 <taskWriteHex4_5+0x54>
   80700:	d0270f15 	stw	zero,-25540(gp)
			intCounterHex = dec2ToHex(int1sCounter);
   80704:	d0a70f17 	ldw	r2,-25540(gp)
   80708:	1009883a 	mov	r4,r2
   8070c:	00803280 	call	80328 <dec2ToHex>
   80710:	e0bffe15 	stw	r2,-8(fp)

			for(int i = 0; i < 2; i++){
   80714:	e03ffc15 	stw	zero,-16(fp)
   80718:	00001006 	br	8075c <taskWriteHex4_5+0xac>
				write7SegDisplay(intCounterHex[i], displaySelector);
   8071c:	e0bffc17 	ldw	r2,-16(fp)
   80720:	e0fffe17 	ldw	r3,-8(fp)
   80724:	1885883a 	add	r2,r3,r2
   80728:	10800003 	ldbu	r2,0(r2)
   8072c:	10803fcc 	andi	r2,r2,255
   80730:	1080201c 	xori	r2,r2,128
   80734:	10bfe004 	addi	r2,r2,-128
   80738:	e17ffb17 	ldw	r5,-20(fp)
   8073c:	1009883a 	mov	r4,r2
   80740:	00808580 	call	80858 <write7SegDisplay>
				displaySelector++;
   80744:	e0bffb17 	ldw	r2,-20(fp)
   80748:	10800044 	addi	r2,r2,1
   8074c:	e0bffb15 	stw	r2,-20(fp)
			*(interval_timer_ptr) = 0;

			if(int1sCounter > 255) int1sCounter = 0;
			intCounterHex = dec2ToHex(int1sCounter);

			for(int i = 0; i < 2; i++){
   80750:	e0bffc17 	ldw	r2,-16(fp)
   80754:	10800044 	addi	r2,r2,1
   80758:	e0bffc15 	stw	r2,-16(fp)
   8075c:	e0bffc17 	ldw	r2,-16(fp)
   80760:	10800090 	cmplti	r2,r2,2
   80764:	103fed1e 	bne	r2,zero,8071c <__alt_data_end+0xfffc1f1c>
				write7SegDisplay(intCounterHex[i], displaySelector);
				displaySelector++;
			}
		}
	}
   80768:	003fd806 	br	806cc <__alt_data_end+0xfffc1ecc>

0008076c <jtagInterrupt>:
	OSTaskSuspend(OS_PRIO_SELF);
}

void jtagInterrupt(void* isr_context){
   8076c:	defffa04 	addi	sp,sp,-24
   80770:	dfc00515 	stw	ra,20(sp)
   80774:	df000415 	stw	fp,16(sp)
   80778:	df000404 	addi	fp,sp,16
   8077c:	e13fff15 	stw	r4,-4(fp)
	char data;
	char completeData[10] = "";
   80780:	e03ffc45 	stb	zero,-15(fp)
   80784:	e03ffc85 	stb	zero,-14(fp)
   80788:	e03ffcc5 	stb	zero,-13(fp)
   8078c:	e03ffd05 	stb	zero,-12(fp)
   80790:	e03ffd45 	stb	zero,-11(fp)
   80794:	e03ffd85 	stb	zero,-10(fp)
   80798:	e03ffdc5 	stb	zero,-9(fp)
   8079c:	e03ffe05 	stb	zero,-8(fp)
   807a0:	e03ffe45 	stb	zero,-7(fp)
   807a4:	e03ffe85 	stb	zero,-6(fp)

	do{
		data = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE);
   807a8:	00800134 	movhi	r2,4
   807ac:	10801204 	addi	r2,r2,72
   807b0:	10800037 	ldwio	r2,0(r2)
   807b4:	e0bffc05 	stb	r2,-16(fp)
		if(data == '\n')
   807b8:	e0bffc03 	ldbu	r2,-16(fp)
   807bc:	10803fcc 	andi	r2,r2,255
   807c0:	1080201c 	xori	r2,r2,128
   807c4:	10bfe004 	addi	r2,r2,-128
   807c8:	10800298 	cmpnei	r2,r2,10
   807cc:	10000c26 	beq	r2,zero,80800 <jtagInterrupt+0x94>
			break;
		strncat(completeData,&data,1);
   807d0:	e0bffc44 	addi	r2,fp,-15
   807d4:	01800044 	movi	r6,1
   807d8:	e17ffc04 	addi	r5,fp,-16
   807dc:	1009883a 	mov	r4,r2
   807e0:	0080d300 	call	80d30 <strncat>
	}while(data != '\n');
   807e4:	e0bffc03 	ldbu	r2,-16(fp)
   807e8:	10803fcc 	andi	r2,r2,255
   807ec:	1080201c 	xori	r2,r2,128
   807f0:	10bfe004 	addi	r2,r2,-128
   807f4:	10800298 	cmpnei	r2,r2,10
   807f8:	103feb1e 	bne	r2,zero,807a8 <__alt_data_end+0xfffc1fa8>
   807fc:	00000106 	br	80804 <jtagInterrupt+0x98>
	char completeData[10] = "";

	do{
		data = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE);
		if(data == '\n')
			break;
   80800:	0001883a 	nop
		strncat(completeData,&data,1);
	}while(data != '\n');

	if(!(strcmp (completeData,"start"))) //strcmp returns zero on succes
   80804:	e0bffc44 	addi	r2,fp,-15
   80808:	014002b4 	movhi	r5,10
   8080c:	29608104 	addi	r5,r5,-32252
   80810:	1009883a 	mov	r4,r2
   80814:	0080c540 	call	80c54 <strcmp>
   80818:	1000021e 	bne	r2,zero,80824 <jtagInterrupt+0xb8>
		runTimer = 1;
   8081c:	00800044 	movi	r2,1
   80820:	d0a00015 	stw	r2,-32768(gp)
	if(!(strcmp (completeData,"stop")))
   80824:	e0bffc44 	addi	r2,fp,-15
   80828:	014002b4 	movhi	r5,10
   8082c:	29608304 	addi	r5,r5,-32244
   80830:	1009883a 	mov	r4,r2
   80834:	0080c540 	call	80c54 <strcmp>
   80838:	1000011e 	bne	r2,zero,80840 <jtagInterrupt+0xd4>
		runTimer = 0;
   8083c:	d0200015 	stw	zero,-32768(gp)
}
   80840:	0001883a 	nop
   80844:	e037883a 	mov	sp,fp
   80848:	dfc00117 	ldw	ra,4(sp)
   8084c:	df000017 	ldw	fp,0(sp)
   80850:	dec00204 	addi	sp,sp,8
   80854:	f800283a 	ret

00080858 <write7SegDisplay>:

void write7SegDisplay(char displayValue, int displayNumber)
{
   80858:	defff904 	addi	sp,sp,-28
   8085c:	dfc00615 	stw	ra,24(sp)
   80860:	df000515 	stw	fp,20(sp)
   80864:	df000504 	addi	fp,sp,20
   80868:	2005883a 	mov	r2,r4
   8086c:	e17fff15 	stw	r5,-4(fp)
   80870:	e0bffe05 	stb	r2,-8(fp)
    int decNumber = charToInt(displayValue);
   80874:	e0bffe07 	ldb	r2,-8(fp)
   80878:	1009883a 	mov	r4,r2
   8087c:	00801fc0 	call	801fc <charToInt>
   80880:	e0bffb15 	stw	r2,-20(fp)

    volatile int* hexDisplay = (int *) REG32_AVALON_INTERFACE_0_AVALON_SLAVE_0_1_BASE;
   80884:	00800134 	movhi	r2,4
   80888:	10801504 	addi	r2,r2,84
   8088c:	e0bffc15 	stw	r2,-16(fp)
    volatile int* hexDisplay4_5 = (int *) REG32_AVALON_INTERFACE_0_AVALON_SLAVE_0_2_BASE;
   80890:	00800134 	movhi	r2,4
   80894:	10801404 	addi	r2,r2,80
   80898:	e0bffd15 	stw	r2,-12(fp)

    //Write to the correct adress for a given display
    if(displayNumber == 0)
   8089c:	e0bfff17 	ldw	r2,-4(fp)
   808a0:	1000031e 	bne	r2,zero,808b0 <write7SegDisplay+0x58>
    	*(hexDisplay) = decNumber;
   808a4:	e0bffc17 	ldw	r2,-16(fp)
   808a8:	e0fffb17 	ldw	r3,-20(fp)
   808ac:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 1)
   808b0:	e0bfff17 	ldw	r2,-4(fp)
   808b4:	10800058 	cmpnei	r2,r2,1
   808b8:	1000071e 	bne	r2,zero,808d8 <write7SegDisplay+0x80>
    	*(hexDisplay) = (decNumber << 4) | *(hexDisplay);
   808bc:	e0bffb17 	ldw	r2,-20(fp)
   808c0:	1006913a 	slli	r3,r2,4
   808c4:	e0bffc17 	ldw	r2,-16(fp)
   808c8:	10800017 	ldw	r2,0(r2)
   808cc:	1886b03a 	or	r3,r3,r2
   808d0:	e0bffc17 	ldw	r2,-16(fp)
   808d4:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 2)
   808d8:	e0bfff17 	ldw	r2,-4(fp)
   808dc:	10800098 	cmpnei	r2,r2,2
   808e0:	1000071e 	bne	r2,zero,80900 <write7SegDisplay+0xa8>
    	*(hexDisplay) = (decNumber << 8) | *(hexDisplay);
   808e4:	e0bffb17 	ldw	r2,-20(fp)
   808e8:	1006923a 	slli	r3,r2,8
   808ec:	e0bffc17 	ldw	r2,-16(fp)
   808f0:	10800017 	ldw	r2,0(r2)
   808f4:	1886b03a 	or	r3,r3,r2
   808f8:	e0bffc17 	ldw	r2,-16(fp)
   808fc:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 3)
   80900:	e0bfff17 	ldw	r2,-4(fp)
   80904:	108000d8 	cmpnei	r2,r2,3
   80908:	1000071e 	bne	r2,zero,80928 <write7SegDisplay+0xd0>
    	*(hexDisplay) = (decNumber << 12) | *(hexDisplay);
   8090c:	e0bffb17 	ldw	r2,-20(fp)
   80910:	1006933a 	slli	r3,r2,12
   80914:	e0bffc17 	ldw	r2,-16(fp)
   80918:	10800017 	ldw	r2,0(r2)
   8091c:	1886b03a 	or	r3,r3,r2
   80920:	e0bffc17 	ldw	r2,-16(fp)
   80924:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 4)
   80928:	e0bfff17 	ldw	r2,-4(fp)
   8092c:	10800118 	cmpnei	r2,r2,4
   80930:	1000031e 	bne	r2,zero,80940 <write7SegDisplay+0xe8>
    	*(hexDisplay4_5) = (decNumber);
   80934:	e0bffd17 	ldw	r2,-12(fp)
   80938:	e0fffb17 	ldw	r3,-20(fp)
   8093c:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 5)
   80940:	e0bfff17 	ldw	r2,-4(fp)
   80944:	10800158 	cmpnei	r2,r2,5
   80948:	1000071e 	bne	r2,zero,80968 <write7SegDisplay+0x110>
    	*(hexDisplay4_5) = (decNumber << 4) | *(hexDisplay4_5);
   8094c:	e0bffb17 	ldw	r2,-20(fp)
   80950:	1006913a 	slli	r3,r2,4
   80954:	e0bffd17 	ldw	r2,-12(fp)
   80958:	10800017 	ldw	r2,0(r2)
   8095c:	1886b03a 	or	r3,r3,r2
   80960:	e0bffd17 	ldw	r2,-12(fp)
   80964:	10c00015 	stw	r3,0(r2)
}
   80968:	0001883a 	nop
   8096c:	e037883a 	mov	sp,fp
   80970:	dfc00117 	ldw	ra,4(sp)
   80974:	df000017 	ldw	fp,0(sp)
   80978:	dec00204 	addi	sp,sp,8
   8097c:	f800283a 	ret

00080980 <main>:

/* The main function creates two task and starts multi-tasking */
int main(void)
{
   80980:	defff904 	addi	sp,sp,-28
   80984:	dfc00615 	stw	ra,24(sp)
   80988:	df000515 	stw	fp,20(sp)
   8098c:	df000504 	addi	fp,sp,20
  OSTaskCreateExt(taskWriteHex0_3,
   80990:	00800044 	movi	r2,1
   80994:	d8800415 	stw	r2,16(sp)
   80998:	d8000315 	stw	zero,12(sp)
   8099c:	00820004 	movi	r2,2048
   809a0:	d8800215 	stw	r2,8(sp)
   809a4:	008002b4 	movhi	r2,10
   809a8:	10b78304 	addi	r2,r2,-8692
   809ac:	d8800115 	stw	r2,4(sp)
   809b0:	00800044 	movi	r2,1
   809b4:	d8800015 	stw	r2,0(sp)
   809b8:	01c00044 	movi	r7,1
   809bc:	018002b4 	movhi	r6,10
   809c0:	31bf8204 	addi	r6,r6,-504
   809c4:	000b883a 	mov	r5,zero
   809c8:	01000234 	movhi	r4,8
   809cc:	21017d04 	addi	r4,r4,1524
   809d0:	0094aac0 	call	94aac <OSTaskCreateExt>
				  taskWriteHex0_3Priority,
				  &taskWriteHex0_3_stk[0],
				  TASK_STACKSIZE,
				  NULL,
				  OS_TASK_OPT_STK_CHK);
  OSTaskCreateExt(taskWriteHex4_5,
   809d4:	00800044 	movi	r2,1
   809d8:	d8800415 	stw	r2,16(sp)
   809dc:	d8000315 	stw	zero,12(sp)
   809e0:	00820004 	movi	r2,2048
   809e4:	d8800215 	stw	r2,8(sp)
   809e8:	008002b4 	movhi	r2,10
   809ec:	10af8304 	addi	r2,r2,-16884
   809f0:	d8800115 	stw	r2,4(sp)
   809f4:	00800084 	movi	r2,2
   809f8:	d8800015 	stw	r2,0(sp)
   809fc:	01c00084 	movi	r7,2
   80a00:	018002b4 	movhi	r6,10
   80a04:	31b78204 	addi	r6,r6,-8696
   80a08:	000b883a 	mov	r5,zero
   80a0c:	01000234 	movhi	r4,8
   80a10:	2101ac04 	addi	r4,r4,1712
   80a14:	0094aac0 	call	94aac <OSTaskCreateExt>
				  taskWriteHex4_5Priority,
				  &taskWriteHex4_5_stk[0],
  				  TASK_STACKSIZE,
  				  NULL,
				  OS_TASK_OPT_STK_CHK);
  OSStart();
   80a18:	008f4080 	call	8f408 <OSStart>
  return 0;
   80a1c:	0005883a 	mov	r2,zero
}
   80a20:	e037883a 	mov	sp,fp
   80a24:	dfc00117 	ldw	ra,4(sp)
   80a28:	df000017 	ldw	fp,0(sp)
   80a2c:	dec00204 	addi	sp,sp,8
   80a30:	f800283a 	ret

00080a34 <__divsi3>:
   80a34:	20001b16 	blt	r4,zero,80aa4 <__divsi3+0x70>
   80a38:	000f883a 	mov	r7,zero
   80a3c:	28001616 	blt	r5,zero,80a98 <__divsi3+0x64>
   80a40:	200d883a 	mov	r6,r4
   80a44:	29001a2e 	bgeu	r5,r4,80ab0 <__divsi3+0x7c>
   80a48:	00800804 	movi	r2,32
   80a4c:	00c00044 	movi	r3,1
   80a50:	00000106 	br	80a58 <__divsi3+0x24>
   80a54:	10000d26 	beq	r2,zero,80a8c <__divsi3+0x58>
   80a58:	294b883a 	add	r5,r5,r5
   80a5c:	10bfffc4 	addi	r2,r2,-1
   80a60:	18c7883a 	add	r3,r3,r3
   80a64:	293ffb36 	bltu	r5,r4,80a54 <__alt_data_end+0xfffc2254>
   80a68:	0005883a 	mov	r2,zero
   80a6c:	18000726 	beq	r3,zero,80a8c <__divsi3+0x58>
   80a70:	0005883a 	mov	r2,zero
   80a74:	31400236 	bltu	r6,r5,80a80 <__divsi3+0x4c>
   80a78:	314dc83a 	sub	r6,r6,r5
   80a7c:	10c4b03a 	or	r2,r2,r3
   80a80:	1806d07a 	srli	r3,r3,1
   80a84:	280ad07a 	srli	r5,r5,1
   80a88:	183ffa1e 	bne	r3,zero,80a74 <__alt_data_end+0xfffc2274>
   80a8c:	38000126 	beq	r7,zero,80a94 <__divsi3+0x60>
   80a90:	0085c83a 	sub	r2,zero,r2
   80a94:	f800283a 	ret
   80a98:	014bc83a 	sub	r5,zero,r5
   80a9c:	39c0005c 	xori	r7,r7,1
   80aa0:	003fe706 	br	80a40 <__alt_data_end+0xfffc2240>
   80aa4:	0109c83a 	sub	r4,zero,r4
   80aa8:	01c00044 	movi	r7,1
   80aac:	003fe306 	br	80a3c <__alt_data_end+0xfffc223c>
   80ab0:	00c00044 	movi	r3,1
   80ab4:	003fee06 	br	80a70 <__alt_data_end+0xfffc2270>

00080ab8 <__modsi3>:
   80ab8:	20001716 	blt	r4,zero,80b18 <__modsi3+0x60>
   80abc:	000f883a 	mov	r7,zero
   80ac0:	2005883a 	mov	r2,r4
   80ac4:	28001216 	blt	r5,zero,80b10 <__modsi3+0x58>
   80ac8:	2900162e 	bgeu	r5,r4,80b24 <__modsi3+0x6c>
   80acc:	01800804 	movi	r6,32
   80ad0:	00c00044 	movi	r3,1
   80ad4:	00000106 	br	80adc <__modsi3+0x24>
   80ad8:	30000a26 	beq	r6,zero,80b04 <__modsi3+0x4c>
   80adc:	294b883a 	add	r5,r5,r5
   80ae0:	31bfffc4 	addi	r6,r6,-1
   80ae4:	18c7883a 	add	r3,r3,r3
   80ae8:	293ffb36 	bltu	r5,r4,80ad8 <__alt_data_end+0xfffc22d8>
   80aec:	18000526 	beq	r3,zero,80b04 <__modsi3+0x4c>
   80af0:	1806d07a 	srli	r3,r3,1
   80af4:	11400136 	bltu	r2,r5,80afc <__modsi3+0x44>
   80af8:	1145c83a 	sub	r2,r2,r5
   80afc:	280ad07a 	srli	r5,r5,1
   80b00:	183ffb1e 	bne	r3,zero,80af0 <__alt_data_end+0xfffc22f0>
   80b04:	38000126 	beq	r7,zero,80b0c <__modsi3+0x54>
   80b08:	0085c83a 	sub	r2,zero,r2
   80b0c:	f800283a 	ret
   80b10:	014bc83a 	sub	r5,zero,r5
   80b14:	003fec06 	br	80ac8 <__alt_data_end+0xfffc22c8>
   80b18:	0109c83a 	sub	r4,zero,r4
   80b1c:	01c00044 	movi	r7,1
   80b20:	003fe706 	br	80ac0 <__alt_data_end+0xfffc22c0>
   80b24:	00c00044 	movi	r3,1
   80b28:	003ff106 	br	80af0 <__alt_data_end+0xfffc22f0>

00080b2c <__udivsi3>:
   80b2c:	200d883a 	mov	r6,r4
   80b30:	2900152e 	bgeu	r5,r4,80b88 <__udivsi3+0x5c>
   80b34:	28001416 	blt	r5,zero,80b88 <__udivsi3+0x5c>
   80b38:	00800804 	movi	r2,32
   80b3c:	00c00044 	movi	r3,1
   80b40:	00000206 	br	80b4c <__udivsi3+0x20>
   80b44:	10000e26 	beq	r2,zero,80b80 <__udivsi3+0x54>
   80b48:	28000516 	blt	r5,zero,80b60 <__udivsi3+0x34>
   80b4c:	294b883a 	add	r5,r5,r5
   80b50:	10bfffc4 	addi	r2,r2,-1
   80b54:	18c7883a 	add	r3,r3,r3
   80b58:	293ffa36 	bltu	r5,r4,80b44 <__alt_data_end+0xfffc2344>
   80b5c:	18000826 	beq	r3,zero,80b80 <__udivsi3+0x54>
   80b60:	0005883a 	mov	r2,zero
   80b64:	31400236 	bltu	r6,r5,80b70 <__udivsi3+0x44>
   80b68:	314dc83a 	sub	r6,r6,r5
   80b6c:	10c4b03a 	or	r2,r2,r3
   80b70:	1806d07a 	srli	r3,r3,1
   80b74:	280ad07a 	srli	r5,r5,1
   80b78:	183ffa1e 	bne	r3,zero,80b64 <__alt_data_end+0xfffc2364>
   80b7c:	f800283a 	ret
   80b80:	0005883a 	mov	r2,zero
   80b84:	f800283a 	ret
   80b88:	00c00044 	movi	r3,1
   80b8c:	003ff406 	br	80b60 <__alt_data_end+0xfffc2360>

00080b90 <__umodsi3>:
   80b90:	2005883a 	mov	r2,r4
   80b94:	2900122e 	bgeu	r5,r4,80be0 <__umodsi3+0x50>
   80b98:	28001116 	blt	r5,zero,80be0 <__umodsi3+0x50>
   80b9c:	01800804 	movi	r6,32
   80ba0:	00c00044 	movi	r3,1
   80ba4:	00000206 	br	80bb0 <__umodsi3+0x20>
   80ba8:	30000c26 	beq	r6,zero,80bdc <__umodsi3+0x4c>
   80bac:	28000516 	blt	r5,zero,80bc4 <__umodsi3+0x34>
   80bb0:	294b883a 	add	r5,r5,r5
   80bb4:	31bfffc4 	addi	r6,r6,-1
   80bb8:	18c7883a 	add	r3,r3,r3
   80bbc:	293ffa36 	bltu	r5,r4,80ba8 <__alt_data_end+0xfffc23a8>
   80bc0:	18000626 	beq	r3,zero,80bdc <__umodsi3+0x4c>
   80bc4:	1806d07a 	srli	r3,r3,1
   80bc8:	11400136 	bltu	r2,r5,80bd0 <__umodsi3+0x40>
   80bcc:	1145c83a 	sub	r2,r2,r5
   80bd0:	280ad07a 	srli	r5,r5,1
   80bd4:	183ffb1e 	bne	r3,zero,80bc4 <__alt_data_end+0xfffc23c4>
   80bd8:	f800283a 	ret
   80bdc:	f800283a 	ret
   80be0:	00c00044 	movi	r3,1
   80be4:	003ff706 	br	80bc4 <__alt_data_end+0xfffc23c4>

00080be8 <_printf_r>:
   80be8:	defffd04 	addi	sp,sp,-12
   80bec:	2805883a 	mov	r2,r5
   80bf0:	dfc00015 	stw	ra,0(sp)
   80bf4:	d9800115 	stw	r6,4(sp)
   80bf8:	d9c00215 	stw	r7,8(sp)
   80bfc:	21400217 	ldw	r5,8(r4)
   80c00:	d9c00104 	addi	r7,sp,4
   80c04:	100d883a 	mov	r6,r2
   80c08:	0080de80 	call	80de8 <___vfprintf_internal_r>
   80c0c:	dfc00017 	ldw	ra,0(sp)
   80c10:	dec00304 	addi	sp,sp,12
   80c14:	f800283a 	ret

00080c18 <printf>:
   80c18:	defffc04 	addi	sp,sp,-16
   80c1c:	dfc00015 	stw	ra,0(sp)
   80c20:	d9400115 	stw	r5,4(sp)
   80c24:	d9800215 	stw	r6,8(sp)
   80c28:	d9c00315 	stw	r7,12(sp)
   80c2c:	008002b4 	movhi	r2,10
   80c30:	10a83d04 	addi	r2,r2,-24332
   80c34:	10800017 	ldw	r2,0(r2)
   80c38:	200b883a 	mov	r5,r4
   80c3c:	d9800104 	addi	r6,sp,4
   80c40:	11000217 	ldw	r4,8(r2)
   80c44:	00830c40 	call	830c4 <__vfprintf_internal>
   80c48:	dfc00017 	ldw	ra,0(sp)
   80c4c:	dec00404 	addi	sp,sp,16
   80c50:	f800283a 	ret

00080c54 <strcmp>:
   80c54:	2144b03a 	or	r2,r4,r5
   80c58:	108000cc 	andi	r2,r2,3
   80c5c:	1000171e 	bne	r2,zero,80cbc <strcmp+0x68>
   80c60:	20800017 	ldw	r2,0(r4)
   80c64:	28c00017 	ldw	r3,0(r5)
   80c68:	10c0141e 	bne	r2,r3,80cbc <strcmp+0x68>
   80c6c:	027fbff4 	movhi	r9,65279
   80c70:	4a7fbfc4 	addi	r9,r9,-257
   80c74:	0086303a 	nor	r3,zero,r2
   80c78:	02202074 	movhi	r8,32897
   80c7c:	1245883a 	add	r2,r2,r9
   80c80:	42202004 	addi	r8,r8,-32640
   80c84:	10c4703a 	and	r2,r2,r3
   80c88:	1204703a 	and	r2,r2,r8
   80c8c:	10000226 	beq	r2,zero,80c98 <strcmp+0x44>
   80c90:	00002306 	br	80d20 <strcmp+0xcc>
   80c94:	1000221e 	bne	r2,zero,80d20 <strcmp+0xcc>
   80c98:	21000104 	addi	r4,r4,4
   80c9c:	20c00017 	ldw	r3,0(r4)
   80ca0:	29400104 	addi	r5,r5,4
   80ca4:	29800017 	ldw	r6,0(r5)
   80ca8:	1a4f883a 	add	r7,r3,r9
   80cac:	00c4303a 	nor	r2,zero,r3
   80cb0:	3884703a 	and	r2,r7,r2
   80cb4:	1204703a 	and	r2,r2,r8
   80cb8:	19bff626 	beq	r3,r6,80c94 <__alt_data_end+0xfffc2494>
   80cbc:	20800003 	ldbu	r2,0(r4)
   80cc0:	10c03fcc 	andi	r3,r2,255
   80cc4:	18c0201c 	xori	r3,r3,128
   80cc8:	18ffe004 	addi	r3,r3,-128
   80ccc:	18000c26 	beq	r3,zero,80d00 <strcmp+0xac>
   80cd0:	29800007 	ldb	r6,0(r5)
   80cd4:	19800326 	beq	r3,r6,80ce4 <strcmp+0x90>
   80cd8:	00001306 	br	80d28 <strcmp+0xd4>
   80cdc:	29800007 	ldb	r6,0(r5)
   80ce0:	11800b1e 	bne	r2,r6,80d10 <strcmp+0xbc>
   80ce4:	21000044 	addi	r4,r4,1
   80ce8:	20c00003 	ldbu	r3,0(r4)
   80cec:	29400044 	addi	r5,r5,1
   80cf0:	18803fcc 	andi	r2,r3,255
   80cf4:	1080201c 	xori	r2,r2,128
   80cf8:	10bfe004 	addi	r2,r2,-128
   80cfc:	103ff71e 	bne	r2,zero,80cdc <__alt_data_end+0xfffc24dc>
   80d00:	0007883a 	mov	r3,zero
   80d04:	28800003 	ldbu	r2,0(r5)
   80d08:	1885c83a 	sub	r2,r3,r2
   80d0c:	f800283a 	ret
   80d10:	28800003 	ldbu	r2,0(r5)
   80d14:	18c03fcc 	andi	r3,r3,255
   80d18:	1885c83a 	sub	r2,r3,r2
   80d1c:	f800283a 	ret
   80d20:	0005883a 	mov	r2,zero
   80d24:	f800283a 	ret
   80d28:	10c03fcc 	andi	r3,r2,255
   80d2c:	003ff506 	br	80d04 <__alt_data_end+0xfffc2504>

00080d30 <strncat>:
   80d30:	20c000cc 	andi	r3,r4,3
   80d34:	2005883a 	mov	r2,r4
   80d38:	1800271e 	bne	r3,zero,80dd8 <strncat+0xa8>
   80d3c:	21000017 	ldw	r4,0(r4)
   80d40:	02bfbff4 	movhi	r10,65279
   80d44:	52bfbfc4 	addi	r10,r10,-257
   80d48:	0106303a 	nor	r3,zero,r4
   80d4c:	02602074 	movhi	r9,32897
   80d50:	2289883a 	add	r4,r4,r10
   80d54:	20c8703a 	and	r4,r4,r3
   80d58:	4a602004 	addi	r9,r9,-32640
   80d5c:	2248703a 	and	r4,r4,r9
   80d60:	1007883a 	mov	r3,r2
   80d64:	2000071e 	bne	r4,zero,80d84 <strncat+0x54>
   80d68:	18c00104 	addi	r3,r3,4
   80d6c:	19c00017 	ldw	r7,0(r3)
   80d70:	3a91883a 	add	r8,r7,r10
   80d74:	01ce303a 	nor	r7,zero,r7
   80d78:	41ce703a 	and	r7,r8,r7
   80d7c:	3a4e703a 	and	r7,r7,r9
   80d80:	383ff926 	beq	r7,zero,80d68 <__alt_data_end+0xfffc2568>
   80d84:	19000007 	ldb	r4,0(r3)
   80d88:	20000326 	beq	r4,zero,80d98 <strncat+0x68>
   80d8c:	18c00044 	addi	r3,r3,1
   80d90:	19c00007 	ldb	r7,0(r3)
   80d94:	383ffd1e 	bne	r7,zero,80d8c <__alt_data_end+0xfffc258c>
   80d98:	1811883a 	mov	r8,r3
   80d9c:	1993883a 	add	r9,r3,r6
   80da0:	00000a06 	br	80dcc <strncat+0x9c>
   80da4:	29c00003 	ldbu	r7,0(r5)
   80da8:	18c00044 	addi	r3,r3,1
   80dac:	29400044 	addi	r5,r5,1
   80db0:	41c00005 	stb	r7,0(r8)
   80db4:	39c03fcc 	andi	r7,r7,255
   80db8:	39c0201c 	xori	r7,r7,128
   80dbc:	39ffe004 	addi	r7,r7,-128
   80dc0:	38000426 	beq	r7,zero,80dd4 <strncat+0xa4>
   80dc4:	30000626 	beq	r6,zero,80de0 <strncat+0xb0>
   80dc8:	42000044 	addi	r8,r8,1
   80dcc:	31bfffc4 	addi	r6,r6,-1
   80dd0:	1a7ff41e 	bne	r3,r9,80da4 <__alt_data_end+0xfffc25a4>
   80dd4:	f800283a 	ret
   80dd8:	2007883a 	mov	r3,r4
   80ddc:	003fe906 	br	80d84 <__alt_data_end+0xfffc2584>
   80de0:	18000005 	stb	zero,0(r3)
   80de4:	003ff806 	br	80dc8 <__alt_data_end+0xfffc25c8>

00080de8 <___vfprintf_internal_r>:
   80de8:	deffb804 	addi	sp,sp,-288
   80dec:	dfc04715 	stw	ra,284(sp)
   80df0:	ddc04515 	stw	r23,276(sp)
   80df4:	dd404315 	stw	r21,268(sp)
   80df8:	d9002d15 	stw	r4,180(sp)
   80dfc:	282f883a 	mov	r23,r5
   80e00:	302b883a 	mov	r21,r6
   80e04:	d9c02e15 	stw	r7,184(sp)
   80e08:	df004615 	stw	fp,280(sp)
   80e0c:	dd804415 	stw	r22,272(sp)
   80e10:	dd004215 	stw	r20,264(sp)
   80e14:	dcc04115 	stw	r19,260(sp)
   80e18:	dc804015 	stw	r18,256(sp)
   80e1c:	dc403f15 	stw	r17,252(sp)
   80e20:	dc003e15 	stw	r16,248(sp)
   80e24:	00858600 	call	85860 <_localeconv_r>
   80e28:	10800017 	ldw	r2,0(r2)
   80e2c:	1009883a 	mov	r4,r2
   80e30:	d8803415 	stw	r2,208(sp)
   80e34:	00878680 	call	87868 <strlen>
   80e38:	d8803715 	stw	r2,220(sp)
   80e3c:	d8802d17 	ldw	r2,180(sp)
   80e40:	10000226 	beq	r2,zero,80e4c <___vfprintf_internal_r+0x64>
   80e44:	10800e17 	ldw	r2,56(r2)
   80e48:	1000fb26 	beq	r2,zero,81238 <___vfprintf_internal_r+0x450>
   80e4c:	b880030b 	ldhu	r2,12(r23)
   80e50:	10c8000c 	andi	r3,r2,8192
   80e54:	1800061e 	bne	r3,zero,80e70 <___vfprintf_internal_r+0x88>
   80e58:	b9001917 	ldw	r4,100(r23)
   80e5c:	00f7ffc4 	movi	r3,-8193
   80e60:	10880014 	ori	r2,r2,8192
   80e64:	20c6703a 	and	r3,r4,r3
   80e68:	b880030d 	sth	r2,12(r23)
   80e6c:	b8c01915 	stw	r3,100(r23)
   80e70:	10c0020c 	andi	r3,r2,8
   80e74:	1800c326 	beq	r3,zero,81184 <___vfprintf_internal_r+0x39c>
   80e78:	b8c00417 	ldw	r3,16(r23)
   80e7c:	1800c126 	beq	r3,zero,81184 <___vfprintf_internal_r+0x39c>
   80e80:	1080068c 	andi	r2,r2,26
   80e84:	00c00284 	movi	r3,10
   80e88:	10c0c626 	beq	r2,r3,811a4 <___vfprintf_internal_r+0x3bc>
   80e8c:	d8c00404 	addi	r3,sp,16
   80e90:	050002b4 	movhi	r20,10
   80e94:	d9001e04 	addi	r4,sp,120
   80e98:	a5209584 	addi	r20,r20,-32170
   80e9c:	d8c01e15 	stw	r3,120(sp)
   80ea0:	d8002015 	stw	zero,128(sp)
   80ea4:	d8001f15 	stw	zero,124(sp)
   80ea8:	d8003315 	stw	zero,204(sp)
   80eac:	d8003615 	stw	zero,216(sp)
   80eb0:	d8003815 	stw	zero,224(sp)
   80eb4:	1811883a 	mov	r8,r3
   80eb8:	d8003915 	stw	zero,228(sp)
   80ebc:	d8003a15 	stw	zero,232(sp)
   80ec0:	d8002f15 	stw	zero,188(sp)
   80ec4:	d9002815 	stw	r4,160(sp)
   80ec8:	a8800007 	ldb	r2,0(r21)
   80ecc:	10028b26 	beq	r2,zero,818fc <___vfprintf_internal_r+0xb14>
   80ed0:	00c00944 	movi	r3,37
   80ed4:	a823883a 	mov	r17,r21
   80ed8:	10c0021e 	bne	r2,r3,80ee4 <___vfprintf_internal_r+0xfc>
   80edc:	00001406 	br	80f30 <___vfprintf_internal_r+0x148>
   80ee0:	10c00326 	beq	r2,r3,80ef0 <___vfprintf_internal_r+0x108>
   80ee4:	8c400044 	addi	r17,r17,1
   80ee8:	88800007 	ldb	r2,0(r17)
   80eec:	103ffc1e 	bne	r2,zero,80ee0 <__alt_data_end+0xfffc26e0>
   80ef0:	8d61c83a 	sub	r16,r17,r21
   80ef4:	80000e26 	beq	r16,zero,80f30 <___vfprintf_internal_r+0x148>
   80ef8:	d8c02017 	ldw	r3,128(sp)
   80efc:	d8801f17 	ldw	r2,124(sp)
   80f00:	45400015 	stw	r21,0(r8)
   80f04:	1c07883a 	add	r3,r3,r16
   80f08:	10800044 	addi	r2,r2,1
   80f0c:	d8c02015 	stw	r3,128(sp)
   80f10:	44000115 	stw	r16,4(r8)
   80f14:	d8801f15 	stw	r2,124(sp)
   80f18:	00c001c4 	movi	r3,7
   80f1c:	1880a916 	blt	r3,r2,811c4 <___vfprintf_internal_r+0x3dc>
   80f20:	42000204 	addi	r8,r8,8
   80f24:	d9402f17 	ldw	r5,188(sp)
   80f28:	2c0b883a 	add	r5,r5,r16
   80f2c:	d9402f15 	stw	r5,188(sp)
   80f30:	88800007 	ldb	r2,0(r17)
   80f34:	1000aa26 	beq	r2,zero,811e0 <___vfprintf_internal_r+0x3f8>
   80f38:	8d400044 	addi	r21,r17,1
   80f3c:	8c400047 	ldb	r17,1(r17)
   80f40:	0021883a 	mov	r16,zero
   80f44:	00bfffc4 	movi	r2,-1
   80f48:	0025883a 	mov	r18,zero
   80f4c:	dc002905 	stb	r16,164(sp)
   80f50:	d8002785 	stb	zero,158(sp)
   80f54:	d8002b05 	stb	zero,172(sp)
   80f58:	d8802a15 	stw	r2,168(sp)
   80f5c:	d8003115 	stw	zero,196(sp)
   80f60:	04c01604 	movi	r19,88
   80f64:	05800244 	movi	r22,9
   80f68:	9021883a 	mov	r16,r18
   80f6c:	4039883a 	mov	fp,r8
   80f70:	ad400044 	addi	r21,r21,1
   80f74:	88bff804 	addi	r2,r17,-32
   80f78:	98833236 	bltu	r19,r2,81c44 <___vfprintf_internal_r+0xe5c>
   80f7c:	100490ba 	slli	r2,r2,2
   80f80:	00c00234 	movhi	r3,8
   80f84:	18c3e504 	addi	r3,r3,3988
   80f88:	10c5883a 	add	r2,r2,r3
   80f8c:	10800017 	ldw	r2,0(r2)
   80f90:	1000683a 	jmp	r2
   80f94:	00081b3c 	xorhi	zero,zero,8300
   80f98:	00081c44 	movi	zero,8305
   80f9c:	00081c44 	movi	zero,8305
   80fa0:	00081b5c 	xori	zero,zero,8301
   80fa4:	00081c44 	movi	zero,8305
   80fa8:	00081c44 	movi	zero,8305
   80fac:	00081c44 	movi	zero,8305
   80fb0:	00081c44 	movi	zero,8305
   80fb4:	00081c44 	movi	zero,8305
   80fb8:	00081c44 	movi	zero,8305
   80fbc:	00081244 	movi	zero,8265
   80fc0:	00081a4c 	andi	zero,zero,8297
   80fc4:	00081c44 	movi	zero,8305
   80fc8:	00081108 	cmpgei	zero,zero,8260
   80fcc:	00081268 	cmpgeui	zero,zero,8265
   80fd0:	00081c44 	movi	zero,8305
   80fd4:	000812b8 	rdprs	zero,zero,8266
   80fd8:	000812c4 	movi	zero,8267
   80fdc:	000812c4 	movi	zero,8267
   80fe0:	000812c4 	movi	zero,8267
   80fe4:	000812c4 	movi	zero,8267
   80fe8:	000812c4 	movi	zero,8267
   80fec:	000812c4 	movi	zero,8267
   80ff0:	000812c4 	movi	zero,8267
   80ff4:	000812c4 	movi	zero,8267
   80ff8:	000812c4 	movi	zero,8267
   80ffc:	00081c44 	movi	zero,8305
   81000:	00081c44 	movi	zero,8305
   81004:	00081c44 	movi	zero,8305
   81008:	00081c44 	movi	zero,8305
   8100c:	00081c44 	movi	zero,8305
   81010:	00081c44 	movi	zero,8305
   81014:	00081c44 	movi	zero,8305
   81018:	00081c44 	movi	zero,8305
   8101c:	00081c44 	movi	zero,8305
   81020:	00081c44 	movi	zero,8305
   81024:	00081300 	call	8130 <OSCtxSw_SWITCH_PC+0x80f0>
   81028:	000813c8 	cmpgei	zero,zero,8271
   8102c:	00081c44 	movi	zero,8305
   81030:	000813c8 	cmpgei	zero,zero,8271
   81034:	00081c44 	movi	zero,8305
   81038:	00081c44 	movi	zero,8305
   8103c:	00081c44 	movi	zero,8305
   81040:	00081c44 	movi	zero,8305
   81044:	00081474 	movhi	zero,8273
   81048:	00081c44 	movi	zero,8305
   8104c:	00081c44 	movi	zero,8305
   81050:	00081480 	call	8148 <OSCtxSw_SWITCH_PC+0x8108>
   81054:	00081c44 	movi	zero,8305
   81058:	00081c44 	movi	zero,8305
   8105c:	00081c44 	movi	zero,8305
   81060:	00081c44 	movi	zero,8305
   81064:	00081c44 	movi	zero,8305
   81068:	00081904 	movi	zero,8292
   8106c:	00081c44 	movi	zero,8305
   81070:	00081c44 	movi	zero,8305
   81074:	00081970 	cmpltui	zero,zero,8293
   81078:	00081c44 	movi	zero,8305
   8107c:	00081c44 	movi	zero,8305
   81080:	00081c44 	movi	zero,8305
   81084:	00081c44 	movi	zero,8305
   81088:	00081c44 	movi	zero,8305
   8108c:	00081c44 	movi	zero,8305
   81090:	00081c44 	movi	zero,8305
   81094:	00081c44 	movi	zero,8305
   81098:	00081c44 	movi	zero,8305
   8109c:	00081c44 	movi	zero,8305
   810a0:	00081be8 	cmpgeui	zero,zero,8303
   810a4:	00081b68 	cmpgeui	zero,zero,8301
   810a8:	000813c8 	cmpgei	zero,zero,8271
   810ac:	000813c8 	cmpgei	zero,zero,8271
   810b0:	000813c8 	cmpgei	zero,zero,8271
   810b4:	00081b88 	cmpgei	zero,zero,8302
   810b8:	00081b68 	cmpgeui	zero,zero,8301
   810bc:	00081c44 	movi	zero,8305
   810c0:	00081c44 	movi	zero,8305
   810c4:	00081b94 	movui	zero,8302
   810c8:	00081c44 	movi	zero,8305
   810cc:	00081ba8 	cmpgeui	zero,zero,8302
   810d0:	00081a2c 	andhi	zero,zero,8296
   810d4:	00081114 	movui	zero,8260
   810d8:	00081a64 	muli	zero,zero,8297
   810dc:	00081c44 	movi	zero,8305
   810e0:	00081a70 	cmpltui	zero,zero,8297
   810e4:	00081c44 	movi	zero,8305
   810e8:	00081ad4 	movui	zero,8299
   810ec:	00081c44 	movi	zero,8305
   810f0:	00081c44 	movi	zero,8305
   810f4:	00081af4 	movhi	zero,8299
   810f8:	d8c03117 	ldw	r3,196(sp)
   810fc:	d8802e15 	stw	r2,184(sp)
   81100:	00c7c83a 	sub	r3,zero,r3
   81104:	d8c03115 	stw	r3,196(sp)
   81108:	84000114 	ori	r16,r16,4
   8110c:	ac400007 	ldb	r17,0(r21)
   81110:	003f9706 	br	80f70 <__alt_data_end+0xfffc2770>
   81114:	00800c04 	movi	r2,48
   81118:	d8802705 	stb	r2,156(sp)
   8111c:	00801e04 	movi	r2,120
   81120:	d8802745 	stb	r2,157(sp)
   81124:	d9002a17 	ldw	r4,168(sp)
   81128:	d8802e17 	ldw	r2,184(sp)
   8112c:	d8002785 	stb	zero,158(sp)
   81130:	e011883a 	mov	r8,fp
   81134:	10c00104 	addi	r3,r2,4
   81138:	14c00017 	ldw	r19,0(r2)
   8113c:	002d883a 	mov	r22,zero
   81140:	80800094 	ori	r2,r16,2
   81144:	2002ca16 	blt	r4,zero,81c70 <___vfprintf_internal_r+0xe88>
   81148:	00bfdfc4 	movi	r2,-129
   8114c:	80a4703a 	and	r18,r16,r2
   81150:	d8c02e15 	stw	r3,184(sp)
   81154:	94800094 	ori	r18,r18,2
   81158:	9802b41e 	bne	r19,zero,81c2c <___vfprintf_internal_r+0xe44>
   8115c:	014002b4 	movhi	r5,10
   81160:	29608e04 	addi	r5,r5,-32200
   81164:	d9403915 	stw	r5,228(sp)
   81168:	04401e04 	movi	r17,120
   8116c:	d8802a17 	ldw	r2,168(sp)
   81170:	0039883a 	mov	fp,zero
   81174:	1001fa26 	beq	r2,zero,81960 <___vfprintf_internal_r+0xb78>
   81178:	0027883a 	mov	r19,zero
   8117c:	002d883a 	mov	r22,zero
   81180:	00021906 	br	819e8 <___vfprintf_internal_r+0xc00>
   81184:	d9002d17 	ldw	r4,180(sp)
   81188:	b80b883a 	mov	r5,r23
   8118c:	008319c0 	call	8319c <__swsetup_r>
   81190:	1005dc1e 	bne	r2,zero,82904 <___vfprintf_internal_r+0x1b1c>
   81194:	b880030b 	ldhu	r2,12(r23)
   81198:	00c00284 	movi	r3,10
   8119c:	1080068c 	andi	r2,r2,26
   811a0:	10ff3a1e 	bne	r2,r3,80e8c <__alt_data_end+0xfffc268c>
   811a4:	b880038f 	ldh	r2,14(r23)
   811a8:	103f3816 	blt	r2,zero,80e8c <__alt_data_end+0xfffc268c>
   811ac:	d9c02e17 	ldw	r7,184(sp)
   811b0:	d9002d17 	ldw	r4,180(sp)
   811b4:	a80d883a 	mov	r6,r21
   811b8:	b80b883a 	mov	r5,r23
   811bc:	00830e00 	call	830e0 <__sbprintf>
   811c0:	00001106 	br	81208 <___vfprintf_internal_r+0x420>
   811c4:	d9002d17 	ldw	r4,180(sp)
   811c8:	d9801e04 	addi	r6,sp,120
   811cc:	b80b883a 	mov	r5,r23
   811d0:	00879fc0 	call	879fc <__sprint_r>
   811d4:	1000081e 	bne	r2,zero,811f8 <___vfprintf_internal_r+0x410>
   811d8:	da000404 	addi	r8,sp,16
   811dc:	003f5106 	br	80f24 <__alt_data_end+0xfffc2724>
   811e0:	d8802017 	ldw	r2,128(sp)
   811e4:	10000426 	beq	r2,zero,811f8 <___vfprintf_internal_r+0x410>
   811e8:	d9002d17 	ldw	r4,180(sp)
   811ec:	d9801e04 	addi	r6,sp,120
   811f0:	b80b883a 	mov	r5,r23
   811f4:	00879fc0 	call	879fc <__sprint_r>
   811f8:	b880030b 	ldhu	r2,12(r23)
   811fc:	1080100c 	andi	r2,r2,64
   81200:	1005c01e 	bne	r2,zero,82904 <___vfprintf_internal_r+0x1b1c>
   81204:	d8802f17 	ldw	r2,188(sp)
   81208:	dfc04717 	ldw	ra,284(sp)
   8120c:	df004617 	ldw	fp,280(sp)
   81210:	ddc04517 	ldw	r23,276(sp)
   81214:	dd804417 	ldw	r22,272(sp)
   81218:	dd404317 	ldw	r21,268(sp)
   8121c:	dd004217 	ldw	r20,264(sp)
   81220:	dcc04117 	ldw	r19,260(sp)
   81224:	dc804017 	ldw	r18,256(sp)
   81228:	dc403f17 	ldw	r17,252(sp)
   8122c:	dc003e17 	ldw	r16,248(sp)
   81230:	dec04804 	addi	sp,sp,288
   81234:	f800283a 	ret
   81238:	d9002d17 	ldw	r4,180(sp)
   8123c:	00851a80 	call	851a8 <__sinit>
   81240:	003f0206 	br	80e4c <__alt_data_end+0xfffc264c>
   81244:	d9002e17 	ldw	r4,184(sp)
   81248:	d9402e17 	ldw	r5,184(sp)
   8124c:	21000017 	ldw	r4,0(r4)
   81250:	28800104 	addi	r2,r5,4
   81254:	d9003115 	stw	r4,196(sp)
   81258:	203fa716 	blt	r4,zero,810f8 <__alt_data_end+0xfffc28f8>
   8125c:	d8802e15 	stw	r2,184(sp)
   81260:	ac400007 	ldb	r17,0(r21)
   81264:	003f4206 	br	80f70 <__alt_data_end+0xfffc2770>
   81268:	ac400007 	ldb	r17,0(r21)
   8126c:	01000a84 	movi	r4,42
   81270:	a8c00044 	addi	r3,r21,1
   81274:	89075826 	beq	r17,r4,82fd8 <___vfprintf_internal_r+0x21f0>
   81278:	8cbff404 	addi	r18,r17,-48
   8127c:	b486ae36 	bltu	r22,r18,82d38 <___vfprintf_internal_r+0x1f50>
   81280:	0009883a 	mov	r4,zero
   81284:	1823883a 	mov	r17,r3
   81288:	01400284 	movi	r5,10
   8128c:	008b08c0 	call	8b08c <__mulsi3>
   81290:	88c00007 	ldb	r3,0(r17)
   81294:	1489883a 	add	r4,r2,r18
   81298:	8d400044 	addi	r21,r17,1
   8129c:	1cbff404 	addi	r18,r3,-48
   812a0:	a823883a 	mov	r17,r21
   812a4:	b4bff82e 	bgeu	r22,r18,81288 <__alt_data_end+0xfffc2a88>
   812a8:	1823883a 	mov	r17,r3
   812ac:	2005f616 	blt	r4,zero,82a88 <___vfprintf_internal_r+0x1ca0>
   812b0:	d9002a15 	stw	r4,168(sp)
   812b4:	003f2f06 	br	80f74 <__alt_data_end+0xfffc2774>
   812b8:	84002014 	ori	r16,r16,128
   812bc:	ac400007 	ldb	r17,0(r21)
   812c0:	003f2b06 	br	80f70 <__alt_data_end+0xfffc2770>
   812c4:	8cbff404 	addi	r18,r17,-48
   812c8:	d8003115 	stw	zero,196(sp)
   812cc:	0009883a 	mov	r4,zero
   812d0:	a823883a 	mov	r17,r21
   812d4:	01400284 	movi	r5,10
   812d8:	008b08c0 	call	8b08c <__mulsi3>
   812dc:	88c00007 	ldb	r3,0(r17)
   812e0:	9089883a 	add	r4,r18,r2
   812e4:	ad400044 	addi	r21,r21,1
   812e8:	1cbff404 	addi	r18,r3,-48
   812ec:	a823883a 	mov	r17,r21
   812f0:	b4bff82e 	bgeu	r22,r18,812d4 <__alt_data_end+0xfffc2ad4>
   812f4:	1823883a 	mov	r17,r3
   812f8:	d9003115 	stw	r4,196(sp)
   812fc:	003f1d06 	br	80f74 <__alt_data_end+0xfffc2774>
   81300:	8025883a 	mov	r18,r16
   81304:	dc002903 	ldbu	r16,164(sp)
   81308:	e011883a 	mov	r8,fp
   8130c:	84003fcc 	andi	r16,r16,255
   81310:	8007531e 	bne	r16,zero,83060 <___vfprintf_internal_r+0x2278>
   81314:	94800414 	ori	r18,r18,16
   81318:	9080080c 	andi	r2,r18,32
   8131c:	1003a326 	beq	r2,zero,821ac <___vfprintf_internal_r+0x13c4>
   81320:	d9002e17 	ldw	r4,184(sp)
   81324:	20800117 	ldw	r2,4(r4)
   81328:	24c00017 	ldw	r19,0(r4)
   8132c:	21000204 	addi	r4,r4,8
   81330:	d9002e15 	stw	r4,184(sp)
   81334:	102d883a 	mov	r22,r2
   81338:	10047316 	blt	r2,zero,82508 <___vfprintf_internal_r+0x1720>
   8133c:	d9002a17 	ldw	r4,168(sp)
   81340:	df002783 	ldbu	fp,158(sp)
   81344:	2003e416 	blt	r4,zero,822d8 <___vfprintf_internal_r+0x14f0>
   81348:	00ffdfc4 	movi	r3,-129
   8134c:	9d84b03a 	or	r2,r19,r22
   81350:	90e4703a 	and	r18,r18,r3
   81354:	10018026 	beq	r2,zero,81958 <___vfprintf_internal_r+0xb70>
   81358:	b003ab26 	beq	r22,zero,82208 <___vfprintf_internal_r+0x1420>
   8135c:	dc402915 	stw	r17,164(sp)
   81360:	dc001e04 	addi	r16,sp,120
   81364:	b023883a 	mov	r17,r22
   81368:	402d883a 	mov	r22,r8
   8136c:	9809883a 	mov	r4,r19
   81370:	880b883a 	mov	r5,r17
   81374:	01800284 	movi	r6,10
   81378:	000f883a 	mov	r7,zero
   8137c:	008aac80 	call	8aac8 <__umoddi3>
   81380:	10800c04 	addi	r2,r2,48
   81384:	843fffc4 	addi	r16,r16,-1
   81388:	9809883a 	mov	r4,r19
   8138c:	880b883a 	mov	r5,r17
   81390:	80800005 	stb	r2,0(r16)
   81394:	01800284 	movi	r6,10
   81398:	000f883a 	mov	r7,zero
   8139c:	008a4cc0 	call	8a4cc <__udivdi3>
   813a0:	1027883a 	mov	r19,r2
   813a4:	10c4b03a 	or	r2,r2,r3
   813a8:	1823883a 	mov	r17,r3
   813ac:	103fef1e 	bne	r2,zero,8136c <__alt_data_end+0xfffc2b6c>
   813b0:	d8c02817 	ldw	r3,160(sp)
   813b4:	dc402917 	ldw	r17,164(sp)
   813b8:	b011883a 	mov	r8,r22
   813bc:	1c07c83a 	sub	r3,r3,r16
   813c0:	d8c02b15 	stw	r3,172(sp)
   813c4:	00005f06 	br	81544 <___vfprintf_internal_r+0x75c>
   813c8:	8025883a 	mov	r18,r16
   813cc:	dc002903 	ldbu	r16,164(sp)
   813d0:	e011883a 	mov	r8,fp
   813d4:	84003fcc 	andi	r16,r16,255
   813d8:	80071e1e 	bne	r16,zero,83054 <___vfprintf_internal_r+0x226c>
   813dc:	9080020c 	andi	r2,r18,8
   813e0:	1004af26 	beq	r2,zero,826a0 <___vfprintf_internal_r+0x18b8>
   813e4:	d9002e17 	ldw	r4,184(sp)
   813e8:	d9402e17 	ldw	r5,184(sp)
   813ec:	d8802e17 	ldw	r2,184(sp)
   813f0:	21000017 	ldw	r4,0(r4)
   813f4:	29400117 	ldw	r5,4(r5)
   813f8:	10800204 	addi	r2,r2,8
   813fc:	d9003615 	stw	r4,216(sp)
   81400:	d9403815 	stw	r5,224(sp)
   81404:	d8802e15 	stw	r2,184(sp)
   81408:	d9003617 	ldw	r4,216(sp)
   8140c:	d9403817 	ldw	r5,224(sp)
   81410:	da003d15 	stw	r8,244(sp)
   81414:	04000044 	movi	r16,1
   81418:	00876640 	call	87664 <__fpclassifyd>
   8141c:	da003d17 	ldw	r8,244(sp)
   81420:	1404441e 	bne	r2,r16,82534 <___vfprintf_internal_r+0x174c>
   81424:	d9003617 	ldw	r4,216(sp)
   81428:	d9403817 	ldw	r5,224(sp)
   8142c:	000d883a 	mov	r6,zero
   81430:	000f883a 	mov	r7,zero
   81434:	008c4940 	call	8c494 <__ledf2>
   81438:	da003d17 	ldw	r8,244(sp)
   8143c:	1005e316 	blt	r2,zero,82bcc <___vfprintf_internal_r+0x1de4>
   81440:	df002783 	ldbu	fp,158(sp)
   81444:	008011c4 	movi	r2,71
   81448:	1445580e 	bge	r2,r17,829ac <___vfprintf_internal_r+0x1bc4>
   8144c:	040002b4 	movhi	r16,10
   81450:	84208604 	addi	r16,r16,-32232
   81454:	00c000c4 	movi	r3,3
   81458:	00bfdfc4 	movi	r2,-129
   8145c:	d8c02915 	stw	r3,164(sp)
   81460:	90a4703a 	and	r18,r18,r2
   81464:	d8c02b15 	stw	r3,172(sp)
   81468:	d8002a15 	stw	zero,168(sp)
   8146c:	d8003215 	stw	zero,200(sp)
   81470:	00003a06 	br	8155c <___vfprintf_internal_r+0x774>
   81474:	84000214 	ori	r16,r16,8
   81478:	ac400007 	ldb	r17,0(r21)
   8147c:	003ebc06 	br	80f70 <__alt_data_end+0xfffc2770>
   81480:	8025883a 	mov	r18,r16
   81484:	dc002903 	ldbu	r16,164(sp)
   81488:	e011883a 	mov	r8,fp
   8148c:	84003fcc 	andi	r16,r16,255
   81490:	8007001e 	bne	r16,zero,83094 <___vfprintf_internal_r+0x22ac>
   81494:	94800414 	ori	r18,r18,16
   81498:	9080080c 	andi	r2,r18,32
   8149c:	1002fa26 	beq	r2,zero,82088 <___vfprintf_internal_r+0x12a0>
   814a0:	d9002e17 	ldw	r4,184(sp)
   814a4:	d9402a17 	ldw	r5,168(sp)
   814a8:	d8002785 	stb	zero,158(sp)
   814ac:	20800204 	addi	r2,r4,8
   814b0:	24c00017 	ldw	r19,0(r4)
   814b4:	25800117 	ldw	r22,4(r4)
   814b8:	2804b116 	blt	r5,zero,82780 <___vfprintf_internal_r+0x1998>
   814bc:	013fdfc4 	movi	r4,-129
   814c0:	9d86b03a 	or	r3,r19,r22
   814c4:	d8802e15 	stw	r2,184(sp)
   814c8:	9124703a 	and	r18,r18,r4
   814cc:	1802fb1e 	bne	r3,zero,820bc <___vfprintf_internal_r+0x12d4>
   814d0:	d8c02a17 	ldw	r3,168(sp)
   814d4:	0039883a 	mov	fp,zero
   814d8:	1805e526 	beq	r3,zero,82c70 <___vfprintf_internal_r+0x1e88>
   814dc:	0027883a 	mov	r19,zero
   814e0:	002d883a 	mov	r22,zero
   814e4:	dc001e04 	addi	r16,sp,120
   814e8:	9806d0fa 	srli	r3,r19,3
   814ec:	b008977a 	slli	r4,r22,29
   814f0:	b02cd0fa 	srli	r22,r22,3
   814f4:	9cc001cc 	andi	r19,r19,7
   814f8:	98800c04 	addi	r2,r19,48
   814fc:	843fffc4 	addi	r16,r16,-1
   81500:	20e6b03a 	or	r19,r4,r3
   81504:	80800005 	stb	r2,0(r16)
   81508:	9d86b03a 	or	r3,r19,r22
   8150c:	183ff61e 	bne	r3,zero,814e8 <__alt_data_end+0xfffc2ce8>
   81510:	90c0004c 	andi	r3,r18,1
   81514:	18014126 	beq	r3,zero,81a1c <___vfprintf_internal_r+0xc34>
   81518:	10803fcc 	andi	r2,r2,255
   8151c:	1080201c 	xori	r2,r2,128
   81520:	10bfe004 	addi	r2,r2,-128
   81524:	00c00c04 	movi	r3,48
   81528:	10c13c26 	beq	r2,r3,81a1c <___vfprintf_internal_r+0xc34>
   8152c:	80ffffc5 	stb	r3,-1(r16)
   81530:	d8c02817 	ldw	r3,160(sp)
   81534:	80bfffc4 	addi	r2,r16,-1
   81538:	1021883a 	mov	r16,r2
   8153c:	1887c83a 	sub	r3,r3,r2
   81540:	d8c02b15 	stw	r3,172(sp)
   81544:	d8802b17 	ldw	r2,172(sp)
   81548:	d9002a17 	ldw	r4,168(sp)
   8154c:	1100010e 	bge	r2,r4,81554 <___vfprintf_internal_r+0x76c>
   81550:	2005883a 	mov	r2,r4
   81554:	d8802915 	stw	r2,164(sp)
   81558:	d8003215 	stw	zero,200(sp)
   8155c:	e7003fcc 	andi	fp,fp,255
   81560:	e700201c 	xori	fp,fp,128
   81564:	e73fe004 	addi	fp,fp,-128
   81568:	e0000326 	beq	fp,zero,81578 <___vfprintf_internal_r+0x790>
   8156c:	d8c02917 	ldw	r3,164(sp)
   81570:	18c00044 	addi	r3,r3,1
   81574:	d8c02915 	stw	r3,164(sp)
   81578:	90c0008c 	andi	r3,r18,2
   8157c:	d8c02c15 	stw	r3,176(sp)
   81580:	18000326 	beq	r3,zero,81590 <___vfprintf_internal_r+0x7a8>
   81584:	d8c02917 	ldw	r3,164(sp)
   81588:	18c00084 	addi	r3,r3,2
   8158c:	d8c02915 	stw	r3,164(sp)
   81590:	90c0210c 	andi	r3,r18,132
   81594:	d8c03015 	stw	r3,192(sp)
   81598:	1801c51e 	bne	r3,zero,81cb0 <___vfprintf_internal_r+0xec8>
   8159c:	d9003117 	ldw	r4,196(sp)
   815a0:	d8c02917 	ldw	r3,164(sp)
   815a4:	20e7c83a 	sub	r19,r4,r3
   815a8:	04c1c10e 	bge	zero,r19,81cb0 <___vfprintf_internal_r+0xec8>
   815ac:	02400404 	movi	r9,16
   815b0:	d8c02017 	ldw	r3,128(sp)
   815b4:	d8801f17 	ldw	r2,124(sp)
   815b8:	4cc52f0e 	bge	r9,r19,82a78 <___vfprintf_internal_r+0x1c90>
   815bc:	014002b4 	movhi	r5,10
   815c0:	29609984 	addi	r5,r5,-32154
   815c4:	dc403b15 	stw	r17,236(sp)
   815c8:	d9403515 	stw	r5,212(sp)
   815cc:	9823883a 	mov	r17,r19
   815d0:	482d883a 	mov	r22,r9
   815d4:	9027883a 	mov	r19,r18
   815d8:	070001c4 	movi	fp,7
   815dc:	8025883a 	mov	r18,r16
   815e0:	dc002d17 	ldw	r16,180(sp)
   815e4:	00000306 	br	815f4 <___vfprintf_internal_r+0x80c>
   815e8:	8c7ffc04 	addi	r17,r17,-16
   815ec:	42000204 	addi	r8,r8,8
   815f0:	b440130e 	bge	r22,r17,81640 <___vfprintf_internal_r+0x858>
   815f4:	010002b4 	movhi	r4,10
   815f8:	18c00404 	addi	r3,r3,16
   815fc:	10800044 	addi	r2,r2,1
   81600:	21209984 	addi	r4,r4,-32154
   81604:	41000015 	stw	r4,0(r8)
   81608:	45800115 	stw	r22,4(r8)
   8160c:	d8c02015 	stw	r3,128(sp)
   81610:	d8801f15 	stw	r2,124(sp)
   81614:	e0bff40e 	bge	fp,r2,815e8 <__alt_data_end+0xfffc2de8>
   81618:	d9801e04 	addi	r6,sp,120
   8161c:	b80b883a 	mov	r5,r23
   81620:	8009883a 	mov	r4,r16
   81624:	00879fc0 	call	879fc <__sprint_r>
   81628:	103ef31e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   8162c:	8c7ffc04 	addi	r17,r17,-16
   81630:	d8c02017 	ldw	r3,128(sp)
   81634:	d8801f17 	ldw	r2,124(sp)
   81638:	da000404 	addi	r8,sp,16
   8163c:	b47fed16 	blt	r22,r17,815f4 <__alt_data_end+0xfffc2df4>
   81640:	9021883a 	mov	r16,r18
   81644:	9825883a 	mov	r18,r19
   81648:	8827883a 	mov	r19,r17
   8164c:	dc403b17 	ldw	r17,236(sp)
   81650:	d9403517 	ldw	r5,212(sp)
   81654:	98c7883a 	add	r3,r19,r3
   81658:	10800044 	addi	r2,r2,1
   8165c:	41400015 	stw	r5,0(r8)
   81660:	44c00115 	stw	r19,4(r8)
   81664:	d8c02015 	stw	r3,128(sp)
   81668:	d8801f15 	stw	r2,124(sp)
   8166c:	010001c4 	movi	r4,7
   81670:	2082c516 	blt	r4,r2,82188 <___vfprintf_internal_r+0x13a0>
   81674:	df002787 	ldb	fp,158(sp)
   81678:	42000204 	addi	r8,r8,8
   8167c:	e0000c26 	beq	fp,zero,816b0 <___vfprintf_internal_r+0x8c8>
   81680:	d8801f17 	ldw	r2,124(sp)
   81684:	d9002784 	addi	r4,sp,158
   81688:	18c00044 	addi	r3,r3,1
   8168c:	10800044 	addi	r2,r2,1
   81690:	41000015 	stw	r4,0(r8)
   81694:	01000044 	movi	r4,1
   81698:	41000115 	stw	r4,4(r8)
   8169c:	d8c02015 	stw	r3,128(sp)
   816a0:	d8801f15 	stw	r2,124(sp)
   816a4:	010001c4 	movi	r4,7
   816a8:	20825e16 	blt	r4,r2,82024 <___vfprintf_internal_r+0x123c>
   816ac:	42000204 	addi	r8,r8,8
   816b0:	d8802c17 	ldw	r2,176(sp)
   816b4:	10000c26 	beq	r2,zero,816e8 <___vfprintf_internal_r+0x900>
   816b8:	d8801f17 	ldw	r2,124(sp)
   816bc:	d9002704 	addi	r4,sp,156
   816c0:	18c00084 	addi	r3,r3,2
   816c4:	10800044 	addi	r2,r2,1
   816c8:	41000015 	stw	r4,0(r8)
   816cc:	01000084 	movi	r4,2
   816d0:	41000115 	stw	r4,4(r8)
   816d4:	d8c02015 	stw	r3,128(sp)
   816d8:	d8801f15 	stw	r2,124(sp)
   816dc:	010001c4 	movi	r4,7
   816e0:	20825816 	blt	r4,r2,82044 <___vfprintf_internal_r+0x125c>
   816e4:	42000204 	addi	r8,r8,8
   816e8:	d9003017 	ldw	r4,192(sp)
   816ec:	00802004 	movi	r2,128
   816f0:	2081bb26 	beq	r4,r2,81de0 <___vfprintf_internal_r+0xff8>
   816f4:	d9402a17 	ldw	r5,168(sp)
   816f8:	d8802b17 	ldw	r2,172(sp)
   816fc:	28adc83a 	sub	r22,r5,r2
   81700:	0580310e 	bge	zero,r22,817c8 <___vfprintf_internal_r+0x9e0>
   81704:	07000404 	movi	fp,16
   81708:	d8801f17 	ldw	r2,124(sp)
   8170c:	e584360e 	bge	fp,r22,827e8 <___vfprintf_internal_r+0x1a00>
   81710:	014002b4 	movhi	r5,10
   81714:	29609584 	addi	r5,r5,-32170
   81718:	dc402a15 	stw	r17,168(sp)
   8171c:	d9402c15 	stw	r5,176(sp)
   81720:	b023883a 	mov	r17,r22
   81724:	04c001c4 	movi	r19,7
   81728:	a82d883a 	mov	r22,r21
   8172c:	902b883a 	mov	r21,r18
   81730:	8025883a 	mov	r18,r16
   81734:	dc002d17 	ldw	r16,180(sp)
   81738:	00000306 	br	81748 <___vfprintf_internal_r+0x960>
   8173c:	8c7ffc04 	addi	r17,r17,-16
   81740:	42000204 	addi	r8,r8,8
   81744:	e440110e 	bge	fp,r17,8178c <___vfprintf_internal_r+0x9a4>
   81748:	18c00404 	addi	r3,r3,16
   8174c:	10800044 	addi	r2,r2,1
   81750:	45000015 	stw	r20,0(r8)
   81754:	47000115 	stw	fp,4(r8)
   81758:	d8c02015 	stw	r3,128(sp)
   8175c:	d8801f15 	stw	r2,124(sp)
   81760:	98bff60e 	bge	r19,r2,8173c <__alt_data_end+0xfffc2f3c>
   81764:	d9801e04 	addi	r6,sp,120
   81768:	b80b883a 	mov	r5,r23
   8176c:	8009883a 	mov	r4,r16
   81770:	00879fc0 	call	879fc <__sprint_r>
   81774:	103ea01e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   81778:	8c7ffc04 	addi	r17,r17,-16
   8177c:	d8c02017 	ldw	r3,128(sp)
   81780:	d8801f17 	ldw	r2,124(sp)
   81784:	da000404 	addi	r8,sp,16
   81788:	e47fef16 	blt	fp,r17,81748 <__alt_data_end+0xfffc2f48>
   8178c:	9021883a 	mov	r16,r18
   81790:	a825883a 	mov	r18,r21
   81794:	b02b883a 	mov	r21,r22
   81798:	882d883a 	mov	r22,r17
   8179c:	dc402a17 	ldw	r17,168(sp)
   817a0:	d9002c17 	ldw	r4,176(sp)
   817a4:	1d87883a 	add	r3,r3,r22
   817a8:	10800044 	addi	r2,r2,1
   817ac:	41000015 	stw	r4,0(r8)
   817b0:	45800115 	stw	r22,4(r8)
   817b4:	d8c02015 	stw	r3,128(sp)
   817b8:	d8801f15 	stw	r2,124(sp)
   817bc:	010001c4 	movi	r4,7
   817c0:	20821016 	blt	r4,r2,82004 <___vfprintf_internal_r+0x121c>
   817c4:	42000204 	addi	r8,r8,8
   817c8:	9080400c 	andi	r2,r18,256
   817cc:	10013a1e 	bne	r2,zero,81cb8 <___vfprintf_internal_r+0xed0>
   817d0:	d9402b17 	ldw	r5,172(sp)
   817d4:	d8801f17 	ldw	r2,124(sp)
   817d8:	44000015 	stw	r16,0(r8)
   817dc:	1947883a 	add	r3,r3,r5
   817e0:	10800044 	addi	r2,r2,1
   817e4:	41400115 	stw	r5,4(r8)
   817e8:	d8c02015 	stw	r3,128(sp)
   817ec:	d8801f15 	stw	r2,124(sp)
   817f0:	010001c4 	movi	r4,7
   817f4:	2081f516 	blt	r4,r2,81fcc <___vfprintf_internal_r+0x11e4>
   817f8:	42000204 	addi	r8,r8,8
   817fc:	9480010c 	andi	r18,r18,4
   81800:	90003226 	beq	r18,zero,818cc <___vfprintf_internal_r+0xae4>
   81804:	d9403117 	ldw	r5,196(sp)
   81808:	d8802917 	ldw	r2,164(sp)
   8180c:	28a1c83a 	sub	r16,r5,r2
   81810:	04002e0e 	bge	zero,r16,818cc <___vfprintf_internal_r+0xae4>
   81814:	04400404 	movi	r17,16
   81818:	d8801f17 	ldw	r2,124(sp)
   8181c:	8c04c40e 	bge	r17,r16,82b30 <___vfprintf_internal_r+0x1d48>
   81820:	014002b4 	movhi	r5,10
   81824:	29609984 	addi	r5,r5,-32154
   81828:	d9403515 	stw	r5,212(sp)
   8182c:	048001c4 	movi	r18,7
   81830:	dcc02d17 	ldw	r19,180(sp)
   81834:	00000306 	br	81844 <___vfprintf_internal_r+0xa5c>
   81838:	843ffc04 	addi	r16,r16,-16
   8183c:	42000204 	addi	r8,r8,8
   81840:	8c00130e 	bge	r17,r16,81890 <___vfprintf_internal_r+0xaa8>
   81844:	010002b4 	movhi	r4,10
   81848:	18c00404 	addi	r3,r3,16
   8184c:	10800044 	addi	r2,r2,1
   81850:	21209984 	addi	r4,r4,-32154
   81854:	41000015 	stw	r4,0(r8)
   81858:	44400115 	stw	r17,4(r8)
   8185c:	d8c02015 	stw	r3,128(sp)
   81860:	d8801f15 	stw	r2,124(sp)
   81864:	90bff40e 	bge	r18,r2,81838 <__alt_data_end+0xfffc3038>
   81868:	d9801e04 	addi	r6,sp,120
   8186c:	b80b883a 	mov	r5,r23
   81870:	9809883a 	mov	r4,r19
   81874:	00879fc0 	call	879fc <__sprint_r>
   81878:	103e5f1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   8187c:	843ffc04 	addi	r16,r16,-16
   81880:	d8c02017 	ldw	r3,128(sp)
   81884:	d8801f17 	ldw	r2,124(sp)
   81888:	da000404 	addi	r8,sp,16
   8188c:	8c3fed16 	blt	r17,r16,81844 <__alt_data_end+0xfffc3044>
   81890:	d9403517 	ldw	r5,212(sp)
   81894:	1c07883a 	add	r3,r3,r16
   81898:	10800044 	addi	r2,r2,1
   8189c:	41400015 	stw	r5,0(r8)
   818a0:	44000115 	stw	r16,4(r8)
   818a4:	d8c02015 	stw	r3,128(sp)
   818a8:	d8801f15 	stw	r2,124(sp)
   818ac:	010001c4 	movi	r4,7
   818b0:	2080060e 	bge	r4,r2,818cc <___vfprintf_internal_r+0xae4>
   818b4:	d9002d17 	ldw	r4,180(sp)
   818b8:	d9801e04 	addi	r6,sp,120
   818bc:	b80b883a 	mov	r5,r23
   818c0:	00879fc0 	call	879fc <__sprint_r>
   818c4:	103e4c1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   818c8:	d8c02017 	ldw	r3,128(sp)
   818cc:	d8803117 	ldw	r2,196(sp)
   818d0:	d9002917 	ldw	r4,164(sp)
   818d4:	1100010e 	bge	r2,r4,818dc <___vfprintf_internal_r+0xaf4>
   818d8:	2005883a 	mov	r2,r4
   818dc:	d9402f17 	ldw	r5,188(sp)
   818e0:	288b883a 	add	r5,r5,r2
   818e4:	d9402f15 	stw	r5,188(sp)
   818e8:	1801c01e 	bne	r3,zero,81fec <___vfprintf_internal_r+0x1204>
   818ec:	a8800007 	ldb	r2,0(r21)
   818f0:	d8001f15 	stw	zero,124(sp)
   818f4:	da000404 	addi	r8,sp,16
   818f8:	103d751e 	bne	r2,zero,80ed0 <__alt_data_end+0xfffc26d0>
   818fc:	a823883a 	mov	r17,r21
   81900:	003d8b06 	br	80f30 <__alt_data_end+0xfffc2730>
   81904:	8025883a 	mov	r18,r16
   81908:	dc002903 	ldbu	r16,164(sp)
   8190c:	e011883a 	mov	r8,fp
   81910:	84003fcc 	andi	r16,r16,255
   81914:	8005e51e 	bne	r16,zero,830ac <___vfprintf_internal_r+0x22c4>
   81918:	94800414 	ori	r18,r18,16
   8191c:	9080080c 	andi	r2,r18,32
   81920:	10022b26 	beq	r2,zero,821d0 <___vfprintf_internal_r+0x13e8>
   81924:	d9002e17 	ldw	r4,184(sp)
   81928:	d9402a17 	ldw	r5,168(sp)
   8192c:	d8002785 	stb	zero,158(sp)
   81930:	20c00204 	addi	r3,r4,8
   81934:	24c00017 	ldw	r19,0(r4)
   81938:	25800117 	ldw	r22,4(r4)
   8193c:	28042e16 	blt	r5,zero,829f8 <___vfprintf_internal_r+0x1c10>
   81940:	013fdfc4 	movi	r4,-129
   81944:	9d84b03a 	or	r2,r19,r22
   81948:	d8c02e15 	stw	r3,184(sp)
   8194c:	9124703a 	and	r18,r18,r4
   81950:	0039883a 	mov	fp,zero
   81954:	103e801e 	bne	r2,zero,81358 <__alt_data_end+0xfffc2b58>
   81958:	d9002a17 	ldw	r4,168(sp)
   8195c:	2002e01e 	bne	r4,zero,824e0 <___vfprintf_internal_r+0x16f8>
   81960:	d8002a15 	stw	zero,168(sp)
   81964:	d8002b15 	stw	zero,172(sp)
   81968:	dc001e04 	addi	r16,sp,120
   8196c:	003ef506 	br	81544 <__alt_data_end+0xfffc2d44>
   81970:	8025883a 	mov	r18,r16
   81974:	dc002903 	ldbu	r16,164(sp)
   81978:	e011883a 	mov	r8,fp
   8197c:	84003fcc 	andi	r16,r16,255
   81980:	8005ba1e 	bne	r16,zero,8306c <___vfprintf_internal_r+0x2284>
   81984:	010002b4 	movhi	r4,10
   81988:	21208904 	addi	r4,r4,-32220
   8198c:	d9003915 	stw	r4,228(sp)
   81990:	9080080c 	andi	r2,r18,32
   81994:	10006126 	beq	r2,zero,81b1c <___vfprintf_internal_r+0xd34>
   81998:	d9402e17 	ldw	r5,184(sp)
   8199c:	2cc00017 	ldw	r19,0(r5)
   819a0:	2d800117 	ldw	r22,4(r5)
   819a4:	29400204 	addi	r5,r5,8
   819a8:	d9402e15 	stw	r5,184(sp)
   819ac:	9080004c 	andi	r2,r18,1
   819b0:	1001ac26 	beq	r2,zero,82064 <___vfprintf_internal_r+0x127c>
   819b4:	9d84b03a 	or	r2,r19,r22
   819b8:	10038526 	beq	r2,zero,827d0 <___vfprintf_internal_r+0x19e8>
   819bc:	d8c02a17 	ldw	r3,168(sp)
   819c0:	00800c04 	movi	r2,48
   819c4:	d8802705 	stb	r2,156(sp)
   819c8:	dc402745 	stb	r17,157(sp)
   819cc:	d8002785 	stb	zero,158(sp)
   819d0:	90800094 	ori	r2,r18,2
   819d4:	18047916 	blt	r3,zero,82bbc <___vfprintf_internal_r+0x1dd4>
   819d8:	00bfdfc4 	movi	r2,-129
   819dc:	90a4703a 	and	r18,r18,r2
   819e0:	94800094 	ori	r18,r18,2
   819e4:	0039883a 	mov	fp,zero
   819e8:	d9003917 	ldw	r4,228(sp)
   819ec:	dc001e04 	addi	r16,sp,120
   819f0:	988003cc 	andi	r2,r19,15
   819f4:	b006973a 	slli	r3,r22,28
   819f8:	2085883a 	add	r2,r4,r2
   819fc:	9826d13a 	srli	r19,r19,4
   81a00:	10800003 	ldbu	r2,0(r2)
   81a04:	b02cd13a 	srli	r22,r22,4
   81a08:	843fffc4 	addi	r16,r16,-1
   81a0c:	1ce6b03a 	or	r19,r3,r19
   81a10:	80800005 	stb	r2,0(r16)
   81a14:	9d84b03a 	or	r2,r19,r22
   81a18:	103ff51e 	bne	r2,zero,819f0 <__alt_data_end+0xfffc31f0>
   81a1c:	d8c02817 	ldw	r3,160(sp)
   81a20:	1c07c83a 	sub	r3,r3,r16
   81a24:	d8c02b15 	stw	r3,172(sp)
   81a28:	003ec606 	br	81544 <__alt_data_end+0xfffc2d44>
   81a2c:	8025883a 	mov	r18,r16
   81a30:	dc002903 	ldbu	r16,164(sp)
   81a34:	e011883a 	mov	r8,fp
   81a38:	84003fcc 	andi	r16,r16,255
   81a3c:	803e9626 	beq	r16,zero,81498 <__alt_data_end+0xfffc2c98>
   81a40:	d8c02b03 	ldbu	r3,172(sp)
   81a44:	d8c02785 	stb	r3,158(sp)
   81a48:	003e9306 	br	81498 <__alt_data_end+0xfffc2c98>
   81a4c:	00c00044 	movi	r3,1
   81a50:	d8c02905 	stb	r3,164(sp)
   81a54:	00c00ac4 	movi	r3,43
   81a58:	d8c02b05 	stb	r3,172(sp)
   81a5c:	ac400007 	ldb	r17,0(r21)
   81a60:	003d4306 	br	80f70 <__alt_data_end+0xfffc2770>
   81a64:	84000814 	ori	r16,r16,32
   81a68:	ac400007 	ldb	r17,0(r21)
   81a6c:	003d4006 	br	80f70 <__alt_data_end+0xfffc2770>
   81a70:	d8802e17 	ldw	r2,184(sp)
   81a74:	8025883a 	mov	r18,r16
   81a78:	d8002785 	stb	zero,158(sp)
   81a7c:	14000017 	ldw	r16,0(r2)
   81a80:	e011883a 	mov	r8,fp
   81a84:	14c00104 	addi	r19,r2,4
   81a88:	80042d26 	beq	r16,zero,82b40 <___vfprintf_internal_r+0x1d58>
   81a8c:	d8c02a17 	ldw	r3,168(sp)
   81a90:	1803e416 	blt	r3,zero,82a24 <___vfprintf_internal_r+0x1c3c>
   81a94:	180d883a 	mov	r6,r3
   81a98:	000b883a 	mov	r5,zero
   81a9c:	8009883a 	mov	r4,r16
   81aa0:	df003d15 	stw	fp,244(sp)
   81aa4:	00862580 	call	86258 <memchr>
   81aa8:	da003d17 	ldw	r8,244(sp)
   81aac:	10046826 	beq	r2,zero,82c50 <___vfprintf_internal_r+0x1e68>
   81ab0:	1405c83a 	sub	r2,r2,r16
   81ab4:	d8802b15 	stw	r2,172(sp)
   81ab8:	1003e016 	blt	r2,zero,82a3c <___vfprintf_internal_r+0x1c54>
   81abc:	df002783 	ldbu	fp,158(sp)
   81ac0:	d8802915 	stw	r2,164(sp)
   81ac4:	dcc02e15 	stw	r19,184(sp)
   81ac8:	d8002a15 	stw	zero,168(sp)
   81acc:	d8003215 	stw	zero,200(sp)
   81ad0:	003ea206 	br	8155c <__alt_data_end+0xfffc2d5c>
   81ad4:	8025883a 	mov	r18,r16
   81ad8:	dc002903 	ldbu	r16,164(sp)
   81adc:	e011883a 	mov	r8,fp
   81ae0:	84003fcc 	andi	r16,r16,255
   81ae4:	803f8d26 	beq	r16,zero,8191c <__alt_data_end+0xfffc311c>
   81ae8:	d8c02b03 	ldbu	r3,172(sp)
   81aec:	d8c02785 	stb	r3,158(sp)
   81af0:	003f8a06 	br	8191c <__alt_data_end+0xfffc311c>
   81af4:	8025883a 	mov	r18,r16
   81af8:	dc002903 	ldbu	r16,164(sp)
   81afc:	e011883a 	mov	r8,fp
   81b00:	84003fcc 	andi	r16,r16,255
   81b04:	8005661e 	bne	r16,zero,830a0 <___vfprintf_internal_r+0x22b8>
   81b08:	010002b4 	movhi	r4,10
   81b0c:	21208e04 	addi	r4,r4,-32200
   81b10:	d9003915 	stw	r4,228(sp)
   81b14:	9080080c 	andi	r2,r18,32
   81b18:	103f9f1e 	bne	r2,zero,81998 <__alt_data_end+0xfffc3198>
   81b1c:	9080040c 	andi	r2,r18,16
   81b20:	1002eb26 	beq	r2,zero,826d0 <___vfprintf_internal_r+0x18e8>
   81b24:	d8802e17 	ldw	r2,184(sp)
   81b28:	002d883a 	mov	r22,zero
   81b2c:	14c00017 	ldw	r19,0(r2)
   81b30:	10800104 	addi	r2,r2,4
   81b34:	d8802e15 	stw	r2,184(sp)
   81b38:	003f9c06 	br	819ac <__alt_data_end+0xfffc31ac>
   81b3c:	d8802b07 	ldb	r2,172(sp)
   81b40:	1002e11e 	bne	r2,zero,826c8 <___vfprintf_internal_r+0x18e0>
   81b44:	00c00044 	movi	r3,1
   81b48:	d8c02905 	stb	r3,164(sp)
   81b4c:	00c00804 	movi	r3,32
   81b50:	d8c02b05 	stb	r3,172(sp)
   81b54:	ac400007 	ldb	r17,0(r21)
   81b58:	003d0506 	br	80f70 <__alt_data_end+0xfffc2770>
   81b5c:	84000054 	ori	r16,r16,1
   81b60:	ac400007 	ldb	r17,0(r21)
   81b64:	003d0206 	br	80f70 <__alt_data_end+0xfffc2770>
   81b68:	8025883a 	mov	r18,r16
   81b6c:	dc002903 	ldbu	r16,164(sp)
   81b70:	e011883a 	mov	r8,fp
   81b74:	84003fcc 	andi	r16,r16,255
   81b78:	803de726 	beq	r16,zero,81318 <__alt_data_end+0xfffc2b18>
   81b7c:	d8c02b03 	ldbu	r3,172(sp)
   81b80:	d8c02785 	stb	r3,158(sp)
   81b84:	003de406 	br	81318 <__alt_data_end+0xfffc2b18>
   81b88:	84001014 	ori	r16,r16,64
   81b8c:	ac400007 	ldb	r17,0(r21)
   81b90:	003cf706 	br	80f70 <__alt_data_end+0xfffc2770>
   81b94:	ac400007 	ldb	r17,0(r21)
   81b98:	00801b04 	movi	r2,108
   81b9c:	88838f26 	beq	r17,r2,829dc <___vfprintf_internal_r+0x1bf4>
   81ba0:	84000414 	ori	r16,r16,16
   81ba4:	003cf206 	br	80f70 <__alt_data_end+0xfffc2770>
   81ba8:	8025883a 	mov	r18,r16
   81bac:	dc002903 	ldbu	r16,164(sp)
   81bb0:	e011883a 	mov	r8,fp
   81bb4:	84003fcc 	andi	r16,r16,255
   81bb8:	80053f1e 	bne	r16,zero,830b8 <___vfprintf_internal_r+0x22d0>
   81bbc:	9080080c 	andi	r2,r18,32
   81bc0:	1002d226 	beq	r2,zero,8270c <___vfprintf_internal_r+0x1924>
   81bc4:	d9002e17 	ldw	r4,184(sp)
   81bc8:	d9402f17 	ldw	r5,188(sp)
   81bcc:	20800017 	ldw	r2,0(r4)
   81bd0:	2807d7fa 	srai	r3,r5,31
   81bd4:	21000104 	addi	r4,r4,4
   81bd8:	d9002e15 	stw	r4,184(sp)
   81bdc:	11400015 	stw	r5,0(r2)
   81be0:	10c00115 	stw	r3,4(r2)
   81be4:	003cb806 	br	80ec8 <__alt_data_end+0xfffc26c8>
   81be8:	d8c02e17 	ldw	r3,184(sp)
   81bec:	d9002e17 	ldw	r4,184(sp)
   81bf0:	8025883a 	mov	r18,r16
   81bf4:	18800017 	ldw	r2,0(r3)
   81bf8:	21000104 	addi	r4,r4,4
   81bfc:	00c00044 	movi	r3,1
   81c00:	e011883a 	mov	r8,fp
   81c04:	d8c02915 	stw	r3,164(sp)
   81c08:	d8002785 	stb	zero,158(sp)
   81c0c:	d8801405 	stb	r2,80(sp)
   81c10:	d9002e15 	stw	r4,184(sp)
   81c14:	d8c02b15 	stw	r3,172(sp)
   81c18:	d8002a15 	stw	zero,168(sp)
   81c1c:	d8003215 	stw	zero,200(sp)
   81c20:	dc001404 	addi	r16,sp,80
   81c24:	0039883a 	mov	fp,zero
   81c28:	003e5306 	br	81578 <__alt_data_end+0xfffc2d78>
   81c2c:	010002b4 	movhi	r4,10
   81c30:	21208e04 	addi	r4,r4,-32200
   81c34:	0039883a 	mov	fp,zero
   81c38:	d9003915 	stw	r4,228(sp)
   81c3c:	04401e04 	movi	r17,120
   81c40:	003f6906 	br	819e8 <__alt_data_end+0xfffc31e8>
   81c44:	8025883a 	mov	r18,r16
   81c48:	dc002903 	ldbu	r16,164(sp)
   81c4c:	e011883a 	mov	r8,fp
   81c50:	84003fcc 	andi	r16,r16,255
   81c54:	8005081e 	bne	r16,zero,83078 <___vfprintf_internal_r+0x2290>
   81c58:	883d6126 	beq	r17,zero,811e0 <__alt_data_end+0xfffc29e0>
   81c5c:	00c00044 	movi	r3,1
   81c60:	d8c02915 	stw	r3,164(sp)
   81c64:	dc401405 	stb	r17,80(sp)
   81c68:	d8002785 	stb	zero,158(sp)
   81c6c:	003fe906 	br	81c14 <__alt_data_end+0xfffc3414>
   81c70:	014002b4 	movhi	r5,10
   81c74:	29608e04 	addi	r5,r5,-32200
   81c78:	d9403915 	stw	r5,228(sp)
   81c7c:	d8c02e15 	stw	r3,184(sp)
   81c80:	1025883a 	mov	r18,r2
   81c84:	04401e04 	movi	r17,120
   81c88:	9d84b03a 	or	r2,r19,r22
   81c8c:	1000fc1e 	bne	r2,zero,82080 <___vfprintf_internal_r+0x1298>
   81c90:	0039883a 	mov	fp,zero
   81c94:	00800084 	movi	r2,2
   81c98:	10803fcc 	andi	r2,r2,255
   81c9c:	00c00044 	movi	r3,1
   81ca0:	10c20f26 	beq	r2,r3,824e0 <___vfprintf_internal_r+0x16f8>
   81ca4:	00c00084 	movi	r3,2
   81ca8:	10fd3326 	beq	r2,r3,81178 <__alt_data_end+0xfffc2978>
   81cac:	003e0b06 	br	814dc <__alt_data_end+0xfffc2cdc>
   81cb0:	d8c02017 	ldw	r3,128(sp)
   81cb4:	003e7106 	br	8167c <__alt_data_end+0xfffc2e7c>
   81cb8:	00801944 	movi	r2,101
   81cbc:	14407e0e 	bge	r2,r17,81eb8 <___vfprintf_internal_r+0x10d0>
   81cc0:	d9003617 	ldw	r4,216(sp)
   81cc4:	d9403817 	ldw	r5,224(sp)
   81cc8:	000d883a 	mov	r6,zero
   81ccc:	000f883a 	mov	r7,zero
   81cd0:	d8c03c15 	stw	r3,240(sp)
   81cd4:	da003d15 	stw	r8,244(sp)
   81cd8:	008c3300 	call	8c330 <__eqdf2>
   81cdc:	d8c03c17 	ldw	r3,240(sp)
   81ce0:	da003d17 	ldw	r8,244(sp)
   81ce4:	1000f71e 	bne	r2,zero,820c4 <___vfprintf_internal_r+0x12dc>
   81ce8:	d8801f17 	ldw	r2,124(sp)
   81cec:	010002b4 	movhi	r4,10
   81cf0:	21209504 	addi	r4,r4,-32172
   81cf4:	18c00044 	addi	r3,r3,1
   81cf8:	10800044 	addi	r2,r2,1
   81cfc:	41000015 	stw	r4,0(r8)
   81d00:	01000044 	movi	r4,1
   81d04:	41000115 	stw	r4,4(r8)
   81d08:	d8c02015 	stw	r3,128(sp)
   81d0c:	d8801f15 	stw	r2,124(sp)
   81d10:	010001c4 	movi	r4,7
   81d14:	2082b816 	blt	r4,r2,827f8 <___vfprintf_internal_r+0x1a10>
   81d18:	42000204 	addi	r8,r8,8
   81d1c:	d8802617 	ldw	r2,152(sp)
   81d20:	d9403317 	ldw	r5,204(sp)
   81d24:	11400216 	blt	r2,r5,81d30 <___vfprintf_internal_r+0xf48>
   81d28:	9080004c 	andi	r2,r18,1
   81d2c:	103eb326 	beq	r2,zero,817fc <__alt_data_end+0xfffc2ffc>
   81d30:	d8803717 	ldw	r2,220(sp)
   81d34:	d9003417 	ldw	r4,208(sp)
   81d38:	d9403717 	ldw	r5,220(sp)
   81d3c:	1887883a 	add	r3,r3,r2
   81d40:	d8801f17 	ldw	r2,124(sp)
   81d44:	41000015 	stw	r4,0(r8)
   81d48:	41400115 	stw	r5,4(r8)
   81d4c:	10800044 	addi	r2,r2,1
   81d50:	d8c02015 	stw	r3,128(sp)
   81d54:	d8801f15 	stw	r2,124(sp)
   81d58:	010001c4 	movi	r4,7
   81d5c:	20832916 	blt	r4,r2,82a04 <___vfprintf_internal_r+0x1c1c>
   81d60:	42000204 	addi	r8,r8,8
   81d64:	d8803317 	ldw	r2,204(sp)
   81d68:	143fffc4 	addi	r16,r2,-1
   81d6c:	043ea30e 	bge	zero,r16,817fc <__alt_data_end+0xfffc2ffc>
   81d70:	04400404 	movi	r17,16
   81d74:	d8801f17 	ldw	r2,124(sp)
   81d78:	8c00880e 	bge	r17,r16,81f9c <___vfprintf_internal_r+0x11b4>
   81d7c:	014002b4 	movhi	r5,10
   81d80:	29609584 	addi	r5,r5,-32170
   81d84:	d9402c15 	stw	r5,176(sp)
   81d88:	058001c4 	movi	r22,7
   81d8c:	dcc02d17 	ldw	r19,180(sp)
   81d90:	00000306 	br	81da0 <___vfprintf_internal_r+0xfb8>
   81d94:	42000204 	addi	r8,r8,8
   81d98:	843ffc04 	addi	r16,r16,-16
   81d9c:	8c00820e 	bge	r17,r16,81fa8 <___vfprintf_internal_r+0x11c0>
   81da0:	18c00404 	addi	r3,r3,16
   81da4:	10800044 	addi	r2,r2,1
   81da8:	45000015 	stw	r20,0(r8)
   81dac:	44400115 	stw	r17,4(r8)
   81db0:	d8c02015 	stw	r3,128(sp)
   81db4:	d8801f15 	stw	r2,124(sp)
   81db8:	b0bff60e 	bge	r22,r2,81d94 <__alt_data_end+0xfffc3594>
   81dbc:	d9801e04 	addi	r6,sp,120
   81dc0:	b80b883a 	mov	r5,r23
   81dc4:	9809883a 	mov	r4,r19
   81dc8:	00879fc0 	call	879fc <__sprint_r>
   81dcc:	103d0a1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   81dd0:	d8c02017 	ldw	r3,128(sp)
   81dd4:	d8801f17 	ldw	r2,124(sp)
   81dd8:	da000404 	addi	r8,sp,16
   81ddc:	003fee06 	br	81d98 <__alt_data_end+0xfffc3598>
   81de0:	d9403117 	ldw	r5,196(sp)
   81de4:	d8802917 	ldw	r2,164(sp)
   81de8:	28adc83a 	sub	r22,r5,r2
   81dec:	05be410e 	bge	zero,r22,816f4 <__alt_data_end+0xfffc2ef4>
   81df0:	07000404 	movi	fp,16
   81df4:	d8801f17 	ldw	r2,124(sp)
   81df8:	e5838f0e 	bge	fp,r22,82c38 <___vfprintf_internal_r+0x1e50>
   81dfc:	014002b4 	movhi	r5,10
   81e00:	29609584 	addi	r5,r5,-32170
   81e04:	dc403015 	stw	r17,192(sp)
   81e08:	d9402c15 	stw	r5,176(sp)
   81e0c:	b023883a 	mov	r17,r22
   81e10:	04c001c4 	movi	r19,7
   81e14:	a82d883a 	mov	r22,r21
   81e18:	902b883a 	mov	r21,r18
   81e1c:	8025883a 	mov	r18,r16
   81e20:	dc002d17 	ldw	r16,180(sp)
   81e24:	00000306 	br	81e34 <___vfprintf_internal_r+0x104c>
   81e28:	8c7ffc04 	addi	r17,r17,-16
   81e2c:	42000204 	addi	r8,r8,8
   81e30:	e440110e 	bge	fp,r17,81e78 <___vfprintf_internal_r+0x1090>
   81e34:	18c00404 	addi	r3,r3,16
   81e38:	10800044 	addi	r2,r2,1
   81e3c:	45000015 	stw	r20,0(r8)
   81e40:	47000115 	stw	fp,4(r8)
   81e44:	d8c02015 	stw	r3,128(sp)
   81e48:	d8801f15 	stw	r2,124(sp)
   81e4c:	98bff60e 	bge	r19,r2,81e28 <__alt_data_end+0xfffc3628>
   81e50:	d9801e04 	addi	r6,sp,120
   81e54:	b80b883a 	mov	r5,r23
   81e58:	8009883a 	mov	r4,r16
   81e5c:	00879fc0 	call	879fc <__sprint_r>
   81e60:	103ce51e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   81e64:	8c7ffc04 	addi	r17,r17,-16
   81e68:	d8c02017 	ldw	r3,128(sp)
   81e6c:	d8801f17 	ldw	r2,124(sp)
   81e70:	da000404 	addi	r8,sp,16
   81e74:	e47fef16 	blt	fp,r17,81e34 <__alt_data_end+0xfffc3634>
   81e78:	9021883a 	mov	r16,r18
   81e7c:	a825883a 	mov	r18,r21
   81e80:	b02b883a 	mov	r21,r22
   81e84:	882d883a 	mov	r22,r17
   81e88:	dc403017 	ldw	r17,192(sp)
   81e8c:	d9002c17 	ldw	r4,176(sp)
   81e90:	1d87883a 	add	r3,r3,r22
   81e94:	10800044 	addi	r2,r2,1
   81e98:	41000015 	stw	r4,0(r8)
   81e9c:	45800115 	stw	r22,4(r8)
   81ea0:	d8c02015 	stw	r3,128(sp)
   81ea4:	d8801f15 	stw	r2,124(sp)
   81ea8:	010001c4 	movi	r4,7
   81eac:	20818e16 	blt	r4,r2,824e8 <___vfprintf_internal_r+0x1700>
   81eb0:	42000204 	addi	r8,r8,8
   81eb4:	003e0f06 	br	816f4 <__alt_data_end+0xfffc2ef4>
   81eb8:	d9403317 	ldw	r5,204(sp)
   81ebc:	00800044 	movi	r2,1
   81ec0:	18c00044 	addi	r3,r3,1
   81ec4:	1141530e 	bge	r2,r5,82414 <___vfprintf_internal_r+0x162c>
   81ec8:	dc401f17 	ldw	r17,124(sp)
   81ecc:	00800044 	movi	r2,1
   81ed0:	40800115 	stw	r2,4(r8)
   81ed4:	8c400044 	addi	r17,r17,1
   81ed8:	44000015 	stw	r16,0(r8)
   81edc:	d8c02015 	stw	r3,128(sp)
   81ee0:	dc401f15 	stw	r17,124(sp)
   81ee4:	008001c4 	movi	r2,7
   81ee8:	14416b16 	blt	r2,r17,82498 <___vfprintf_internal_r+0x16b0>
   81eec:	42000204 	addi	r8,r8,8
   81ef0:	d8803717 	ldw	r2,220(sp)
   81ef4:	d9003417 	ldw	r4,208(sp)
   81ef8:	8c400044 	addi	r17,r17,1
   81efc:	10c7883a 	add	r3,r2,r3
   81f00:	40800115 	stw	r2,4(r8)
   81f04:	41000015 	stw	r4,0(r8)
   81f08:	d8c02015 	stw	r3,128(sp)
   81f0c:	dc401f15 	stw	r17,124(sp)
   81f10:	008001c4 	movi	r2,7
   81f14:	14416916 	blt	r2,r17,824bc <___vfprintf_internal_r+0x16d4>
   81f18:	45800204 	addi	r22,r8,8
   81f1c:	d9003617 	ldw	r4,216(sp)
   81f20:	d9403817 	ldw	r5,224(sp)
   81f24:	000d883a 	mov	r6,zero
   81f28:	000f883a 	mov	r7,zero
   81f2c:	d8c03c15 	stw	r3,240(sp)
   81f30:	008c3300 	call	8c330 <__eqdf2>
   81f34:	d8c03c17 	ldw	r3,240(sp)
   81f38:	1000bc26 	beq	r2,zero,8222c <___vfprintf_internal_r+0x1444>
   81f3c:	d9403317 	ldw	r5,204(sp)
   81f40:	84000044 	addi	r16,r16,1
   81f44:	8c400044 	addi	r17,r17,1
   81f48:	28bfffc4 	addi	r2,r5,-1
   81f4c:	1887883a 	add	r3,r3,r2
   81f50:	b0800115 	stw	r2,4(r22)
   81f54:	b4000015 	stw	r16,0(r22)
   81f58:	d8c02015 	stw	r3,128(sp)
   81f5c:	dc401f15 	stw	r17,124(sp)
   81f60:	008001c4 	movi	r2,7
   81f64:	14414316 	blt	r2,r17,82474 <___vfprintf_internal_r+0x168c>
   81f68:	b5800204 	addi	r22,r22,8
   81f6c:	d9003a17 	ldw	r4,232(sp)
   81f70:	df0022c4 	addi	fp,sp,139
   81f74:	8c400044 	addi	r17,r17,1
   81f78:	20c7883a 	add	r3,r4,r3
   81f7c:	b7000015 	stw	fp,0(r22)
   81f80:	b1000115 	stw	r4,4(r22)
   81f84:	d8c02015 	stw	r3,128(sp)
   81f88:	dc401f15 	stw	r17,124(sp)
   81f8c:	008001c4 	movi	r2,7
   81f90:	14400e16 	blt	r2,r17,81fcc <___vfprintf_internal_r+0x11e4>
   81f94:	b2000204 	addi	r8,r22,8
   81f98:	003e1806 	br	817fc <__alt_data_end+0xfffc2ffc>
   81f9c:	010002b4 	movhi	r4,10
   81fa0:	21209584 	addi	r4,r4,-32170
   81fa4:	d9002c15 	stw	r4,176(sp)
   81fa8:	d9002c17 	ldw	r4,176(sp)
   81fac:	1c07883a 	add	r3,r3,r16
   81fb0:	44000115 	stw	r16,4(r8)
   81fb4:	41000015 	stw	r4,0(r8)
   81fb8:	10800044 	addi	r2,r2,1
   81fbc:	d8c02015 	stw	r3,128(sp)
   81fc0:	d8801f15 	stw	r2,124(sp)
   81fc4:	010001c4 	movi	r4,7
   81fc8:	20be0b0e 	bge	r4,r2,817f8 <__alt_data_end+0xfffc2ff8>
   81fcc:	d9002d17 	ldw	r4,180(sp)
   81fd0:	d9801e04 	addi	r6,sp,120
   81fd4:	b80b883a 	mov	r5,r23
   81fd8:	00879fc0 	call	879fc <__sprint_r>
   81fdc:	103c861e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   81fe0:	d8c02017 	ldw	r3,128(sp)
   81fe4:	da000404 	addi	r8,sp,16
   81fe8:	003e0406 	br	817fc <__alt_data_end+0xfffc2ffc>
   81fec:	d9002d17 	ldw	r4,180(sp)
   81ff0:	d9801e04 	addi	r6,sp,120
   81ff4:	b80b883a 	mov	r5,r23
   81ff8:	00879fc0 	call	879fc <__sprint_r>
   81ffc:	103e3b26 	beq	r2,zero,818ec <__alt_data_end+0xfffc30ec>
   82000:	003c7d06 	br	811f8 <__alt_data_end+0xfffc29f8>
   82004:	d9002d17 	ldw	r4,180(sp)
   82008:	d9801e04 	addi	r6,sp,120
   8200c:	b80b883a 	mov	r5,r23
   82010:	00879fc0 	call	879fc <__sprint_r>
   82014:	103c781e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82018:	d8c02017 	ldw	r3,128(sp)
   8201c:	da000404 	addi	r8,sp,16
   82020:	003de906 	br	817c8 <__alt_data_end+0xfffc2fc8>
   82024:	d9002d17 	ldw	r4,180(sp)
   82028:	d9801e04 	addi	r6,sp,120
   8202c:	b80b883a 	mov	r5,r23
   82030:	00879fc0 	call	879fc <__sprint_r>
   82034:	103c701e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82038:	d8c02017 	ldw	r3,128(sp)
   8203c:	da000404 	addi	r8,sp,16
   82040:	003d9b06 	br	816b0 <__alt_data_end+0xfffc2eb0>
   82044:	d9002d17 	ldw	r4,180(sp)
   82048:	d9801e04 	addi	r6,sp,120
   8204c:	b80b883a 	mov	r5,r23
   82050:	00879fc0 	call	879fc <__sprint_r>
   82054:	103c681e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82058:	d8c02017 	ldw	r3,128(sp)
   8205c:	da000404 	addi	r8,sp,16
   82060:	003da106 	br	816e8 <__alt_data_end+0xfffc2ee8>
   82064:	d9402a17 	ldw	r5,168(sp)
   82068:	d8002785 	stb	zero,158(sp)
   8206c:	283f0616 	blt	r5,zero,81c88 <__alt_data_end+0xfffc3488>
   82070:	00ffdfc4 	movi	r3,-129
   82074:	9d84b03a 	or	r2,r19,r22
   82078:	90e4703a 	and	r18,r18,r3
   8207c:	103c3b26 	beq	r2,zero,8116c <__alt_data_end+0xfffc296c>
   82080:	0039883a 	mov	fp,zero
   82084:	003e5806 	br	819e8 <__alt_data_end+0xfffc31e8>
   82088:	9080040c 	andi	r2,r18,16
   8208c:	1001b326 	beq	r2,zero,8275c <___vfprintf_internal_r+0x1974>
   82090:	d8c02e17 	ldw	r3,184(sp)
   82094:	d9002a17 	ldw	r4,168(sp)
   82098:	d8002785 	stb	zero,158(sp)
   8209c:	18800104 	addi	r2,r3,4
   820a0:	1cc00017 	ldw	r19,0(r3)
   820a4:	002d883a 	mov	r22,zero
   820a8:	2001b516 	blt	r4,zero,82780 <___vfprintf_internal_r+0x1998>
   820ac:	00ffdfc4 	movi	r3,-129
   820b0:	d8802e15 	stw	r2,184(sp)
   820b4:	90e4703a 	and	r18,r18,r3
   820b8:	983d0526 	beq	r19,zero,814d0 <__alt_data_end+0xfffc2cd0>
   820bc:	0039883a 	mov	fp,zero
   820c0:	003d0806 	br	814e4 <__alt_data_end+0xfffc2ce4>
   820c4:	dc402617 	ldw	r17,152(sp)
   820c8:	0441d30e 	bge	zero,r17,82818 <___vfprintf_internal_r+0x1a30>
   820cc:	dc403217 	ldw	r17,200(sp)
   820d0:	d8803317 	ldw	r2,204(sp)
   820d4:	1440010e 	bge	r2,r17,820dc <___vfprintf_internal_r+0x12f4>
   820d8:	1023883a 	mov	r17,r2
   820dc:	04400a0e 	bge	zero,r17,82108 <___vfprintf_internal_r+0x1320>
   820e0:	d8801f17 	ldw	r2,124(sp)
   820e4:	1c47883a 	add	r3,r3,r17
   820e8:	44000015 	stw	r16,0(r8)
   820ec:	10800044 	addi	r2,r2,1
   820f0:	44400115 	stw	r17,4(r8)
   820f4:	d8c02015 	stw	r3,128(sp)
   820f8:	d8801f15 	stw	r2,124(sp)
   820fc:	010001c4 	movi	r4,7
   82100:	20826516 	blt	r4,r2,82a98 <___vfprintf_internal_r+0x1cb0>
   82104:	42000204 	addi	r8,r8,8
   82108:	88026116 	blt	r17,zero,82a90 <___vfprintf_internal_r+0x1ca8>
   8210c:	d9003217 	ldw	r4,200(sp)
   82110:	2463c83a 	sub	r17,r4,r17
   82114:	04407b0e 	bge	zero,r17,82304 <___vfprintf_internal_r+0x151c>
   82118:	05800404 	movi	r22,16
   8211c:	d8801f17 	ldw	r2,124(sp)
   82120:	b4419d0e 	bge	r22,r17,82798 <___vfprintf_internal_r+0x19b0>
   82124:	010002b4 	movhi	r4,10
   82128:	21209584 	addi	r4,r4,-32170
   8212c:	d9002c15 	stw	r4,176(sp)
   82130:	070001c4 	movi	fp,7
   82134:	dcc02d17 	ldw	r19,180(sp)
   82138:	00000306 	br	82148 <___vfprintf_internal_r+0x1360>
   8213c:	42000204 	addi	r8,r8,8
   82140:	8c7ffc04 	addi	r17,r17,-16
   82144:	b441970e 	bge	r22,r17,827a4 <___vfprintf_internal_r+0x19bc>
   82148:	18c00404 	addi	r3,r3,16
   8214c:	10800044 	addi	r2,r2,1
   82150:	45000015 	stw	r20,0(r8)
   82154:	45800115 	stw	r22,4(r8)
   82158:	d8c02015 	stw	r3,128(sp)
   8215c:	d8801f15 	stw	r2,124(sp)
   82160:	e0bff60e 	bge	fp,r2,8213c <__alt_data_end+0xfffc393c>
   82164:	d9801e04 	addi	r6,sp,120
   82168:	b80b883a 	mov	r5,r23
   8216c:	9809883a 	mov	r4,r19
   82170:	00879fc0 	call	879fc <__sprint_r>
   82174:	103c201e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82178:	d8c02017 	ldw	r3,128(sp)
   8217c:	d8801f17 	ldw	r2,124(sp)
   82180:	da000404 	addi	r8,sp,16
   82184:	003fee06 	br	82140 <__alt_data_end+0xfffc3940>
   82188:	d9002d17 	ldw	r4,180(sp)
   8218c:	d9801e04 	addi	r6,sp,120
   82190:	b80b883a 	mov	r5,r23
   82194:	00879fc0 	call	879fc <__sprint_r>
   82198:	103c171e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   8219c:	d8c02017 	ldw	r3,128(sp)
   821a0:	df002787 	ldb	fp,158(sp)
   821a4:	da000404 	addi	r8,sp,16
   821a8:	003d3406 	br	8167c <__alt_data_end+0xfffc2e7c>
   821ac:	9080040c 	andi	r2,r18,16
   821b0:	10016126 	beq	r2,zero,82738 <___vfprintf_internal_r+0x1950>
   821b4:	d9402e17 	ldw	r5,184(sp)
   821b8:	2cc00017 	ldw	r19,0(r5)
   821bc:	29400104 	addi	r5,r5,4
   821c0:	d9402e15 	stw	r5,184(sp)
   821c4:	982dd7fa 	srai	r22,r19,31
   821c8:	b005883a 	mov	r2,r22
   821cc:	003c5a06 	br	81338 <__alt_data_end+0xfffc2b38>
   821d0:	9080040c 	andi	r2,r18,16
   821d4:	10003526 	beq	r2,zero,822ac <___vfprintf_internal_r+0x14c4>
   821d8:	d8c02e17 	ldw	r3,184(sp)
   821dc:	d9002a17 	ldw	r4,168(sp)
   821e0:	d8002785 	stb	zero,158(sp)
   821e4:	18800104 	addi	r2,r3,4
   821e8:	1cc00017 	ldw	r19,0(r3)
   821ec:	002d883a 	mov	r22,zero
   821f0:	20003716 	blt	r4,zero,822d0 <___vfprintf_internal_r+0x14e8>
   821f4:	00ffdfc4 	movi	r3,-129
   821f8:	d8802e15 	stw	r2,184(sp)
   821fc:	90e4703a 	and	r18,r18,r3
   82200:	0039883a 	mov	fp,zero
   82204:	983dd426 	beq	r19,zero,81958 <__alt_data_end+0xfffc3158>
   82208:	00800244 	movi	r2,9
   8220c:	14fc5336 	bltu	r2,r19,8135c <__alt_data_end+0xfffc2b5c>
   82210:	d8c02817 	ldw	r3,160(sp)
   82214:	dc001dc4 	addi	r16,sp,119
   82218:	9cc00c04 	addi	r19,r19,48
   8221c:	1c07c83a 	sub	r3,r3,r16
   82220:	dcc01dc5 	stb	r19,119(sp)
   82224:	d8c02b15 	stw	r3,172(sp)
   82228:	003cc606 	br	81544 <__alt_data_end+0xfffc2d44>
   8222c:	d8803317 	ldw	r2,204(sp)
   82230:	143fffc4 	addi	r16,r2,-1
   82234:	043f4d0e 	bge	zero,r16,81f6c <__alt_data_end+0xfffc376c>
   82238:	07000404 	movi	fp,16
   8223c:	e400810e 	bge	fp,r16,82444 <___vfprintf_internal_r+0x165c>
   82240:	014002b4 	movhi	r5,10
   82244:	29609584 	addi	r5,r5,-32170
   82248:	d9402c15 	stw	r5,176(sp)
   8224c:	01c001c4 	movi	r7,7
   82250:	dcc02d17 	ldw	r19,180(sp)
   82254:	00000306 	br	82264 <___vfprintf_internal_r+0x147c>
   82258:	b5800204 	addi	r22,r22,8
   8225c:	843ffc04 	addi	r16,r16,-16
   82260:	e4007b0e 	bge	fp,r16,82450 <___vfprintf_internal_r+0x1668>
   82264:	18c00404 	addi	r3,r3,16
   82268:	8c400044 	addi	r17,r17,1
   8226c:	b5000015 	stw	r20,0(r22)
   82270:	b7000115 	stw	fp,4(r22)
   82274:	d8c02015 	stw	r3,128(sp)
   82278:	dc401f15 	stw	r17,124(sp)
   8227c:	3c7ff60e 	bge	r7,r17,82258 <__alt_data_end+0xfffc3a58>
   82280:	d9801e04 	addi	r6,sp,120
   82284:	b80b883a 	mov	r5,r23
   82288:	9809883a 	mov	r4,r19
   8228c:	d9c03c15 	stw	r7,240(sp)
   82290:	00879fc0 	call	879fc <__sprint_r>
   82294:	d9c03c17 	ldw	r7,240(sp)
   82298:	103bd71e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   8229c:	d8c02017 	ldw	r3,128(sp)
   822a0:	dc401f17 	ldw	r17,124(sp)
   822a4:	dd800404 	addi	r22,sp,16
   822a8:	003fec06 	br	8225c <__alt_data_end+0xfffc3a5c>
   822ac:	9080100c 	andi	r2,r18,64
   822b0:	d8002785 	stb	zero,158(sp)
   822b4:	10010e26 	beq	r2,zero,826f0 <___vfprintf_internal_r+0x1908>
   822b8:	d9402e17 	ldw	r5,184(sp)
   822bc:	d8c02a17 	ldw	r3,168(sp)
   822c0:	002d883a 	mov	r22,zero
   822c4:	28800104 	addi	r2,r5,4
   822c8:	2cc0000b 	ldhu	r19,0(r5)
   822cc:	183fc90e 	bge	r3,zero,821f4 <__alt_data_end+0xfffc39f4>
   822d0:	d8802e15 	stw	r2,184(sp)
   822d4:	0039883a 	mov	fp,zero
   822d8:	9d84b03a 	or	r2,r19,r22
   822dc:	103c1e1e 	bne	r2,zero,81358 <__alt_data_end+0xfffc2b58>
   822e0:	00800044 	movi	r2,1
   822e4:	003e6c06 	br	81c98 <__alt_data_end+0xfffc3498>
   822e8:	d9002d17 	ldw	r4,180(sp)
   822ec:	d9801e04 	addi	r6,sp,120
   822f0:	b80b883a 	mov	r5,r23
   822f4:	00879fc0 	call	879fc <__sprint_r>
   822f8:	103bbf1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   822fc:	d8c02017 	ldw	r3,128(sp)
   82300:	da000404 	addi	r8,sp,16
   82304:	d9003217 	ldw	r4,200(sp)
   82308:	d8802617 	ldw	r2,152(sp)
   8230c:	d9403317 	ldw	r5,204(sp)
   82310:	8123883a 	add	r17,r16,r4
   82314:	11400216 	blt	r2,r5,82320 <___vfprintf_internal_r+0x1538>
   82318:	9100004c 	andi	r4,r18,1
   8231c:	20000d26 	beq	r4,zero,82354 <___vfprintf_internal_r+0x156c>
   82320:	d9003717 	ldw	r4,220(sp)
   82324:	d9403417 	ldw	r5,208(sp)
   82328:	1907883a 	add	r3,r3,r4
   8232c:	d9001f17 	ldw	r4,124(sp)
   82330:	41400015 	stw	r5,0(r8)
   82334:	d9403717 	ldw	r5,220(sp)
   82338:	21000044 	addi	r4,r4,1
   8233c:	d8c02015 	stw	r3,128(sp)
   82340:	41400115 	stw	r5,4(r8)
   82344:	d9001f15 	stw	r4,124(sp)
   82348:	014001c4 	movi	r5,7
   8234c:	2901e816 	blt	r5,r4,82af0 <___vfprintf_internal_r+0x1d08>
   82350:	42000204 	addi	r8,r8,8
   82354:	d9003317 	ldw	r4,204(sp)
   82358:	8121883a 	add	r16,r16,r4
   8235c:	2085c83a 	sub	r2,r4,r2
   82360:	8461c83a 	sub	r16,r16,r17
   82364:	1400010e 	bge	r2,r16,8236c <___vfprintf_internal_r+0x1584>
   82368:	1021883a 	mov	r16,r2
   8236c:	04000a0e 	bge	zero,r16,82398 <___vfprintf_internal_r+0x15b0>
   82370:	d9001f17 	ldw	r4,124(sp)
   82374:	1c07883a 	add	r3,r3,r16
   82378:	44400015 	stw	r17,0(r8)
   8237c:	21000044 	addi	r4,r4,1
   82380:	44000115 	stw	r16,4(r8)
   82384:	d8c02015 	stw	r3,128(sp)
   82388:	d9001f15 	stw	r4,124(sp)
   8238c:	014001c4 	movi	r5,7
   82390:	2901fb16 	blt	r5,r4,82b80 <___vfprintf_internal_r+0x1d98>
   82394:	42000204 	addi	r8,r8,8
   82398:	8001f716 	blt	r16,zero,82b78 <___vfprintf_internal_r+0x1d90>
   8239c:	1421c83a 	sub	r16,r2,r16
   823a0:	043d160e 	bge	zero,r16,817fc <__alt_data_end+0xfffc2ffc>
   823a4:	04400404 	movi	r17,16
   823a8:	d8801f17 	ldw	r2,124(sp)
   823ac:	8c3efb0e 	bge	r17,r16,81f9c <__alt_data_end+0xfffc379c>
   823b0:	014002b4 	movhi	r5,10
   823b4:	29609584 	addi	r5,r5,-32170
   823b8:	d9402c15 	stw	r5,176(sp)
   823bc:	058001c4 	movi	r22,7
   823c0:	dcc02d17 	ldw	r19,180(sp)
   823c4:	00000306 	br	823d4 <___vfprintf_internal_r+0x15ec>
   823c8:	42000204 	addi	r8,r8,8
   823cc:	843ffc04 	addi	r16,r16,-16
   823d0:	8c3ef50e 	bge	r17,r16,81fa8 <__alt_data_end+0xfffc37a8>
   823d4:	18c00404 	addi	r3,r3,16
   823d8:	10800044 	addi	r2,r2,1
   823dc:	45000015 	stw	r20,0(r8)
   823e0:	44400115 	stw	r17,4(r8)
   823e4:	d8c02015 	stw	r3,128(sp)
   823e8:	d8801f15 	stw	r2,124(sp)
   823ec:	b0bff60e 	bge	r22,r2,823c8 <__alt_data_end+0xfffc3bc8>
   823f0:	d9801e04 	addi	r6,sp,120
   823f4:	b80b883a 	mov	r5,r23
   823f8:	9809883a 	mov	r4,r19
   823fc:	00879fc0 	call	879fc <__sprint_r>
   82400:	103b7d1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82404:	d8c02017 	ldw	r3,128(sp)
   82408:	d8801f17 	ldw	r2,124(sp)
   8240c:	da000404 	addi	r8,sp,16
   82410:	003fee06 	br	823cc <__alt_data_end+0xfffc3bcc>
   82414:	9088703a 	and	r4,r18,r2
   82418:	203eab1e 	bne	r4,zero,81ec8 <__alt_data_end+0xfffc36c8>
   8241c:	dc401f17 	ldw	r17,124(sp)
   82420:	40800115 	stw	r2,4(r8)
   82424:	44000015 	stw	r16,0(r8)
   82428:	8c400044 	addi	r17,r17,1
   8242c:	d8c02015 	stw	r3,128(sp)
   82430:	dc401f15 	stw	r17,124(sp)
   82434:	008001c4 	movi	r2,7
   82438:	14400e16 	blt	r2,r17,82474 <___vfprintf_internal_r+0x168c>
   8243c:	45800204 	addi	r22,r8,8
   82440:	003eca06 	br	81f6c <__alt_data_end+0xfffc376c>
   82444:	010002b4 	movhi	r4,10
   82448:	21209584 	addi	r4,r4,-32170
   8244c:	d9002c15 	stw	r4,176(sp)
   82450:	d8802c17 	ldw	r2,176(sp)
   82454:	1c07883a 	add	r3,r3,r16
   82458:	8c400044 	addi	r17,r17,1
   8245c:	b0800015 	stw	r2,0(r22)
   82460:	b4000115 	stw	r16,4(r22)
   82464:	d8c02015 	stw	r3,128(sp)
   82468:	dc401f15 	stw	r17,124(sp)
   8246c:	008001c4 	movi	r2,7
   82470:	147ebd0e 	bge	r2,r17,81f68 <__alt_data_end+0xfffc3768>
   82474:	d9002d17 	ldw	r4,180(sp)
   82478:	d9801e04 	addi	r6,sp,120
   8247c:	b80b883a 	mov	r5,r23
   82480:	00879fc0 	call	879fc <__sprint_r>
   82484:	103b5c1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82488:	d8c02017 	ldw	r3,128(sp)
   8248c:	dc401f17 	ldw	r17,124(sp)
   82490:	dd800404 	addi	r22,sp,16
   82494:	003eb506 	br	81f6c <__alt_data_end+0xfffc376c>
   82498:	d9002d17 	ldw	r4,180(sp)
   8249c:	d9801e04 	addi	r6,sp,120
   824a0:	b80b883a 	mov	r5,r23
   824a4:	00879fc0 	call	879fc <__sprint_r>
   824a8:	103b531e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   824ac:	d8c02017 	ldw	r3,128(sp)
   824b0:	dc401f17 	ldw	r17,124(sp)
   824b4:	da000404 	addi	r8,sp,16
   824b8:	003e8d06 	br	81ef0 <__alt_data_end+0xfffc36f0>
   824bc:	d9002d17 	ldw	r4,180(sp)
   824c0:	d9801e04 	addi	r6,sp,120
   824c4:	b80b883a 	mov	r5,r23
   824c8:	00879fc0 	call	879fc <__sprint_r>
   824cc:	103b4a1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   824d0:	d8c02017 	ldw	r3,128(sp)
   824d4:	dc401f17 	ldw	r17,124(sp)
   824d8:	dd800404 	addi	r22,sp,16
   824dc:	003e8f06 	br	81f1c <__alt_data_end+0xfffc371c>
   824e0:	0027883a 	mov	r19,zero
   824e4:	003f4a06 	br	82210 <__alt_data_end+0xfffc3a10>
   824e8:	d9002d17 	ldw	r4,180(sp)
   824ec:	d9801e04 	addi	r6,sp,120
   824f0:	b80b883a 	mov	r5,r23
   824f4:	00879fc0 	call	879fc <__sprint_r>
   824f8:	103b3f1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   824fc:	d8c02017 	ldw	r3,128(sp)
   82500:	da000404 	addi	r8,sp,16
   82504:	003c7b06 	br	816f4 <__alt_data_end+0xfffc2ef4>
   82508:	d9402a17 	ldw	r5,168(sp)
   8250c:	04e7c83a 	sub	r19,zero,r19
   82510:	07000b44 	movi	fp,45
   82514:	9804c03a 	cmpne	r2,r19,zero
   82518:	05adc83a 	sub	r22,zero,r22
   8251c:	df002785 	stb	fp,158(sp)
   82520:	b0adc83a 	sub	r22,r22,r2
   82524:	28017b16 	blt	r5,zero,82b14 <___vfprintf_internal_r+0x1d2c>
   82528:	00bfdfc4 	movi	r2,-129
   8252c:	90a4703a 	and	r18,r18,r2
   82530:	003b8906 	br	81358 <__alt_data_end+0xfffc2b58>
   82534:	d9003617 	ldw	r4,216(sp)
   82538:	d9403817 	ldw	r5,224(sp)
   8253c:	da003d15 	stw	r8,244(sp)
   82540:	00876640 	call	87664 <__fpclassifyd>
   82544:	da003d17 	ldw	r8,244(sp)
   82548:	1000f026 	beq	r2,zero,8290c <___vfprintf_internal_r+0x1b24>
   8254c:	d9002a17 	ldw	r4,168(sp)
   82550:	05bff7c4 	movi	r22,-33
   82554:	00bfffc4 	movi	r2,-1
   82558:	8dac703a 	and	r22,r17,r22
   8255c:	20820026 	beq	r4,r2,82d60 <___vfprintf_internal_r+0x1f78>
   82560:	008011c4 	movi	r2,71
   82564:	b081f726 	beq	r22,r2,82d44 <___vfprintf_internal_r+0x1f5c>
   82568:	d9003817 	ldw	r4,224(sp)
   8256c:	90c04014 	ori	r3,r18,256
   82570:	d8c02c15 	stw	r3,176(sp)
   82574:	20021516 	blt	r4,zero,82dcc <___vfprintf_internal_r+0x1fe4>
   82578:	dcc03817 	ldw	r19,224(sp)
   8257c:	d8002905 	stb	zero,164(sp)
   82580:	00801984 	movi	r2,102
   82584:	8881f926 	beq	r17,r2,82d6c <___vfprintf_internal_r+0x1f84>
   82588:	00801184 	movi	r2,70
   8258c:	88821c26 	beq	r17,r2,82e00 <___vfprintf_internal_r+0x2018>
   82590:	00801144 	movi	r2,69
   82594:	b081ef26 	beq	r22,r2,82d54 <___vfprintf_internal_r+0x1f6c>
   82598:	d8c02a17 	ldw	r3,168(sp)
   8259c:	d8802104 	addi	r2,sp,132
   825a0:	d8800315 	stw	r2,12(sp)
   825a4:	d9403617 	ldw	r5,216(sp)
   825a8:	d8802504 	addi	r2,sp,148
   825ac:	d9002d17 	ldw	r4,180(sp)
   825b0:	d8800215 	stw	r2,8(sp)
   825b4:	d8802604 	addi	r2,sp,152
   825b8:	d8c00015 	stw	r3,0(sp)
   825bc:	d8800115 	stw	r2,4(sp)
   825c0:	01c00084 	movi	r7,2
   825c4:	980d883a 	mov	r6,r19
   825c8:	d8c03c15 	stw	r3,240(sp)
   825cc:	da003d15 	stw	r8,244(sp)
   825d0:	00835180 	call	83518 <_dtoa_r>
   825d4:	1021883a 	mov	r16,r2
   825d8:	008019c4 	movi	r2,103
   825dc:	d8c03c17 	ldw	r3,240(sp)
   825e0:	da003d17 	ldw	r8,244(sp)
   825e4:	88817126 	beq	r17,r2,82bac <___vfprintf_internal_r+0x1dc4>
   825e8:	008011c4 	movi	r2,71
   825ec:	88829126 	beq	r17,r2,83034 <___vfprintf_internal_r+0x224c>
   825f0:	80f9883a 	add	fp,r16,r3
   825f4:	d9003617 	ldw	r4,216(sp)
   825f8:	000d883a 	mov	r6,zero
   825fc:	000f883a 	mov	r7,zero
   82600:	980b883a 	mov	r5,r19
   82604:	da003d15 	stw	r8,244(sp)
   82608:	008c3300 	call	8c330 <__eqdf2>
   8260c:	da003d17 	ldw	r8,244(sp)
   82610:	10018d26 	beq	r2,zero,82c48 <___vfprintf_internal_r+0x1e60>
   82614:	d8802117 	ldw	r2,132(sp)
   82618:	1700062e 	bgeu	r2,fp,82634 <___vfprintf_internal_r+0x184c>
   8261c:	01000c04 	movi	r4,48
   82620:	10c00044 	addi	r3,r2,1
   82624:	d8c02115 	stw	r3,132(sp)
   82628:	11000005 	stb	r4,0(r2)
   8262c:	d8802117 	ldw	r2,132(sp)
   82630:	173ffb36 	bltu	r2,fp,82620 <__alt_data_end+0xfffc3e20>
   82634:	1405c83a 	sub	r2,r2,r16
   82638:	d8803315 	stw	r2,204(sp)
   8263c:	008011c4 	movi	r2,71
   82640:	b0817626 	beq	r22,r2,82c1c <___vfprintf_internal_r+0x1e34>
   82644:	00801944 	movi	r2,101
   82648:	1442800e 	bge	r2,r17,8304c <___vfprintf_internal_r+0x2264>
   8264c:	d8c02617 	ldw	r3,152(sp)
   82650:	00801984 	movi	r2,102
   82654:	d8c03215 	stw	r3,200(sp)
   82658:	8881fe26 	beq	r17,r2,82e54 <___vfprintf_internal_r+0x206c>
   8265c:	d8c03217 	ldw	r3,200(sp)
   82660:	d9003317 	ldw	r4,204(sp)
   82664:	1901dd16 	blt	r3,r4,82ddc <___vfprintf_internal_r+0x1ff4>
   82668:	9480004c 	andi	r18,r18,1
   8266c:	90022b1e 	bne	r18,zero,82f1c <___vfprintf_internal_r+0x2134>
   82670:	1805883a 	mov	r2,r3
   82674:	18028316 	blt	r3,zero,83084 <___vfprintf_internal_r+0x229c>
   82678:	d8c03217 	ldw	r3,200(sp)
   8267c:	044019c4 	movi	r17,103
   82680:	d8c02b15 	stw	r3,172(sp)
   82684:	df002907 	ldb	fp,164(sp)
   82688:	e001531e 	bne	fp,zero,82bd8 <___vfprintf_internal_r+0x1df0>
   8268c:	df002783 	ldbu	fp,158(sp)
   82690:	d8802915 	stw	r2,164(sp)
   82694:	dc802c17 	ldw	r18,176(sp)
   82698:	d8002a15 	stw	zero,168(sp)
   8269c:	003baf06 	br	8155c <__alt_data_end+0xfffc2d5c>
   826a0:	d8c02e17 	ldw	r3,184(sp)
   826a4:	d9002e17 	ldw	r4,184(sp)
   826a8:	d9402e17 	ldw	r5,184(sp)
   826ac:	18c00017 	ldw	r3,0(r3)
   826b0:	21000117 	ldw	r4,4(r4)
   826b4:	29400204 	addi	r5,r5,8
   826b8:	d8c03615 	stw	r3,216(sp)
   826bc:	d9003815 	stw	r4,224(sp)
   826c0:	d9402e15 	stw	r5,184(sp)
   826c4:	003b5006 	br	81408 <__alt_data_end+0xfffc2c08>
   826c8:	ac400007 	ldb	r17,0(r21)
   826cc:	003a2806 	br	80f70 <__alt_data_end+0xfffc2770>
   826d0:	9080100c 	andi	r2,r18,64
   826d4:	1000a826 	beq	r2,zero,82978 <___vfprintf_internal_r+0x1b90>
   826d8:	d8c02e17 	ldw	r3,184(sp)
   826dc:	002d883a 	mov	r22,zero
   826e0:	1cc0000b 	ldhu	r19,0(r3)
   826e4:	18c00104 	addi	r3,r3,4
   826e8:	d8c02e15 	stw	r3,184(sp)
   826ec:	003caf06 	br	819ac <__alt_data_end+0xfffc31ac>
   826f0:	d9002e17 	ldw	r4,184(sp)
   826f4:	d9402a17 	ldw	r5,168(sp)
   826f8:	002d883a 	mov	r22,zero
   826fc:	20800104 	addi	r2,r4,4
   82700:	24c00017 	ldw	r19,0(r4)
   82704:	283ebb0e 	bge	r5,zero,821f4 <__alt_data_end+0xfffc39f4>
   82708:	003ef106 	br	822d0 <__alt_data_end+0xfffc3ad0>
   8270c:	9080040c 	andi	r2,r18,16
   82710:	1000921e 	bne	r2,zero,8295c <___vfprintf_internal_r+0x1b74>
   82714:	9480100c 	andi	r18,r18,64
   82718:	90013926 	beq	r18,zero,82c00 <___vfprintf_internal_r+0x1e18>
   8271c:	d9402e17 	ldw	r5,184(sp)
   82720:	d8c02f17 	ldw	r3,188(sp)
   82724:	28800017 	ldw	r2,0(r5)
   82728:	29400104 	addi	r5,r5,4
   8272c:	d9402e15 	stw	r5,184(sp)
   82730:	10c0000d 	sth	r3,0(r2)
   82734:	0039e406 	br	80ec8 <__alt_data_end+0xfffc26c8>
   82738:	9080100c 	andi	r2,r18,64
   8273c:	10008026 	beq	r2,zero,82940 <___vfprintf_internal_r+0x1b58>
   82740:	d8802e17 	ldw	r2,184(sp)
   82744:	14c0000f 	ldh	r19,0(r2)
   82748:	10800104 	addi	r2,r2,4
   8274c:	d8802e15 	stw	r2,184(sp)
   82750:	982dd7fa 	srai	r22,r19,31
   82754:	b005883a 	mov	r2,r22
   82758:	003af706 	br	81338 <__alt_data_end+0xfffc2b38>
   8275c:	9080100c 	andi	r2,r18,64
   82760:	d8002785 	stb	zero,158(sp)
   82764:	10008a1e 	bne	r2,zero,82990 <___vfprintf_internal_r+0x1ba8>
   82768:	d9002e17 	ldw	r4,184(sp)
   8276c:	d9402a17 	ldw	r5,168(sp)
   82770:	002d883a 	mov	r22,zero
   82774:	20800104 	addi	r2,r4,4
   82778:	24c00017 	ldw	r19,0(r4)
   8277c:	283e4b0e 	bge	r5,zero,820ac <__alt_data_end+0xfffc38ac>
   82780:	9d86b03a 	or	r3,r19,r22
   82784:	d8802e15 	stw	r2,184(sp)
   82788:	183e4c1e 	bne	r3,zero,820bc <__alt_data_end+0xfffc38bc>
   8278c:	0039883a 	mov	fp,zero
   82790:	0005883a 	mov	r2,zero
   82794:	003d4006 	br	81c98 <__alt_data_end+0xfffc3498>
   82798:	014002b4 	movhi	r5,10
   8279c:	29609584 	addi	r5,r5,-32170
   827a0:	d9402c15 	stw	r5,176(sp)
   827a4:	d9402c17 	ldw	r5,176(sp)
   827a8:	1c47883a 	add	r3,r3,r17
   827ac:	10800044 	addi	r2,r2,1
   827b0:	41400015 	stw	r5,0(r8)
   827b4:	44400115 	stw	r17,4(r8)
   827b8:	d8c02015 	stw	r3,128(sp)
   827bc:	d8801f15 	stw	r2,124(sp)
   827c0:	010001c4 	movi	r4,7
   827c4:	20bec816 	blt	r4,r2,822e8 <__alt_data_end+0xfffc3ae8>
   827c8:	42000204 	addi	r8,r8,8
   827cc:	003ecd06 	br	82304 <__alt_data_end+0xfffc3b04>
   827d0:	d9002a17 	ldw	r4,168(sp)
   827d4:	d8002785 	stb	zero,158(sp)
   827d8:	203d2d16 	blt	r4,zero,81c90 <__alt_data_end+0xfffc3490>
   827dc:	00bfdfc4 	movi	r2,-129
   827e0:	90a4703a 	and	r18,r18,r2
   827e4:	003a6106 	br	8116c <__alt_data_end+0xfffc296c>
   827e8:	010002b4 	movhi	r4,10
   827ec:	21209584 	addi	r4,r4,-32170
   827f0:	d9002c15 	stw	r4,176(sp)
   827f4:	003bea06 	br	817a0 <__alt_data_end+0xfffc2fa0>
   827f8:	d9002d17 	ldw	r4,180(sp)
   827fc:	d9801e04 	addi	r6,sp,120
   82800:	b80b883a 	mov	r5,r23
   82804:	00879fc0 	call	879fc <__sprint_r>
   82808:	103a7b1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   8280c:	d8c02017 	ldw	r3,128(sp)
   82810:	da000404 	addi	r8,sp,16
   82814:	003d4106 	br	81d1c <__alt_data_end+0xfffc351c>
   82818:	d8801f17 	ldw	r2,124(sp)
   8281c:	014002b4 	movhi	r5,10
   82820:	01000044 	movi	r4,1
   82824:	18c00044 	addi	r3,r3,1
   82828:	10800044 	addi	r2,r2,1
   8282c:	29609504 	addi	r5,r5,-32172
   82830:	41000115 	stw	r4,4(r8)
   82834:	41400015 	stw	r5,0(r8)
   82838:	d8c02015 	stw	r3,128(sp)
   8283c:	d8801f15 	stw	r2,124(sp)
   82840:	010001c4 	movi	r4,7
   82844:	20805c16 	blt	r4,r2,829b8 <___vfprintf_internal_r+0x1bd0>
   82848:	42000204 	addi	r8,r8,8
   8284c:	8800041e 	bne	r17,zero,82860 <___vfprintf_internal_r+0x1a78>
   82850:	d8803317 	ldw	r2,204(sp)
   82854:	1000021e 	bne	r2,zero,82860 <___vfprintf_internal_r+0x1a78>
   82858:	9080004c 	andi	r2,r18,1
   8285c:	103be726 	beq	r2,zero,817fc <__alt_data_end+0xfffc2ffc>
   82860:	d9003717 	ldw	r4,220(sp)
   82864:	d8801f17 	ldw	r2,124(sp)
   82868:	d9403417 	ldw	r5,208(sp)
   8286c:	20c7883a 	add	r3,r4,r3
   82870:	10800044 	addi	r2,r2,1
   82874:	41000115 	stw	r4,4(r8)
   82878:	41400015 	stw	r5,0(r8)
   8287c:	d8c02015 	stw	r3,128(sp)
   82880:	d8801f15 	stw	r2,124(sp)
   82884:	010001c4 	movi	r4,7
   82888:	20812116 	blt	r4,r2,82d10 <___vfprintf_internal_r+0x1f28>
   8288c:	42000204 	addi	r8,r8,8
   82890:	0463c83a 	sub	r17,zero,r17
   82894:	0440730e 	bge	zero,r17,82a64 <___vfprintf_internal_r+0x1c7c>
   82898:	05800404 	movi	r22,16
   8289c:	b440860e 	bge	r22,r17,82ab8 <___vfprintf_internal_r+0x1cd0>
   828a0:	014002b4 	movhi	r5,10
   828a4:	29609584 	addi	r5,r5,-32170
   828a8:	d9402c15 	stw	r5,176(sp)
   828ac:	070001c4 	movi	fp,7
   828b0:	dcc02d17 	ldw	r19,180(sp)
   828b4:	00000306 	br	828c4 <___vfprintf_internal_r+0x1adc>
   828b8:	42000204 	addi	r8,r8,8
   828bc:	8c7ffc04 	addi	r17,r17,-16
   828c0:	b440800e 	bge	r22,r17,82ac4 <___vfprintf_internal_r+0x1cdc>
   828c4:	18c00404 	addi	r3,r3,16
   828c8:	10800044 	addi	r2,r2,1
   828cc:	45000015 	stw	r20,0(r8)
   828d0:	45800115 	stw	r22,4(r8)
   828d4:	d8c02015 	stw	r3,128(sp)
   828d8:	d8801f15 	stw	r2,124(sp)
   828dc:	e0bff60e 	bge	fp,r2,828b8 <__alt_data_end+0xfffc40b8>
   828e0:	d9801e04 	addi	r6,sp,120
   828e4:	b80b883a 	mov	r5,r23
   828e8:	9809883a 	mov	r4,r19
   828ec:	00879fc0 	call	879fc <__sprint_r>
   828f0:	103a411e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   828f4:	d8c02017 	ldw	r3,128(sp)
   828f8:	d8801f17 	ldw	r2,124(sp)
   828fc:	da000404 	addi	r8,sp,16
   82900:	003fee06 	br	828bc <__alt_data_end+0xfffc40bc>
   82904:	00bfffc4 	movi	r2,-1
   82908:	003a3f06 	br	81208 <__alt_data_end+0xfffc2a08>
   8290c:	008011c4 	movi	r2,71
   82910:	1440b816 	blt	r2,r17,82bf4 <___vfprintf_internal_r+0x1e0c>
   82914:	040002b4 	movhi	r16,10
   82918:	84208704 	addi	r16,r16,-32228
   8291c:	00c000c4 	movi	r3,3
   82920:	00bfdfc4 	movi	r2,-129
   82924:	d8c02915 	stw	r3,164(sp)
   82928:	90a4703a 	and	r18,r18,r2
   8292c:	df002783 	ldbu	fp,158(sp)
   82930:	d8c02b15 	stw	r3,172(sp)
   82934:	d8002a15 	stw	zero,168(sp)
   82938:	d8003215 	stw	zero,200(sp)
   8293c:	003b0706 	br	8155c <__alt_data_end+0xfffc2d5c>
   82940:	d8c02e17 	ldw	r3,184(sp)
   82944:	1cc00017 	ldw	r19,0(r3)
   82948:	18c00104 	addi	r3,r3,4
   8294c:	d8c02e15 	stw	r3,184(sp)
   82950:	982dd7fa 	srai	r22,r19,31
   82954:	b005883a 	mov	r2,r22
   82958:	003a7706 	br	81338 <__alt_data_end+0xfffc2b38>
   8295c:	d8c02e17 	ldw	r3,184(sp)
   82960:	d9002f17 	ldw	r4,188(sp)
   82964:	18800017 	ldw	r2,0(r3)
   82968:	18c00104 	addi	r3,r3,4
   8296c:	d8c02e15 	stw	r3,184(sp)
   82970:	11000015 	stw	r4,0(r2)
   82974:	00395406 	br	80ec8 <__alt_data_end+0xfffc26c8>
   82978:	d9002e17 	ldw	r4,184(sp)
   8297c:	002d883a 	mov	r22,zero
   82980:	24c00017 	ldw	r19,0(r4)
   82984:	21000104 	addi	r4,r4,4
   82988:	d9002e15 	stw	r4,184(sp)
   8298c:	003c0706 	br	819ac <__alt_data_end+0xfffc31ac>
   82990:	d9402e17 	ldw	r5,184(sp)
   82994:	d8c02a17 	ldw	r3,168(sp)
   82998:	002d883a 	mov	r22,zero
   8299c:	28800104 	addi	r2,r5,4
   829a0:	2cc0000b 	ldhu	r19,0(r5)
   829a4:	183dc10e 	bge	r3,zero,820ac <__alt_data_end+0xfffc38ac>
   829a8:	003f7506 	br	82780 <__alt_data_end+0xfffc3f80>
   829ac:	040002b4 	movhi	r16,10
   829b0:	84208504 	addi	r16,r16,-32236
   829b4:	003aa706 	br	81454 <__alt_data_end+0xfffc2c54>
   829b8:	d9002d17 	ldw	r4,180(sp)
   829bc:	d9801e04 	addi	r6,sp,120
   829c0:	b80b883a 	mov	r5,r23
   829c4:	00879fc0 	call	879fc <__sprint_r>
   829c8:	103a0b1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   829cc:	dc402617 	ldw	r17,152(sp)
   829d0:	d8c02017 	ldw	r3,128(sp)
   829d4:	da000404 	addi	r8,sp,16
   829d8:	003f9c06 	br	8284c <__alt_data_end+0xfffc404c>
   829dc:	ac400043 	ldbu	r17,1(r21)
   829e0:	84000814 	ori	r16,r16,32
   829e4:	ad400044 	addi	r21,r21,1
   829e8:	8c403fcc 	andi	r17,r17,255
   829ec:	8c40201c 	xori	r17,r17,128
   829f0:	8c7fe004 	addi	r17,r17,-128
   829f4:	00395e06 	br	80f70 <__alt_data_end+0xfffc2770>
   829f8:	d8c02e15 	stw	r3,184(sp)
   829fc:	0039883a 	mov	fp,zero
   82a00:	003e3506 	br	822d8 <__alt_data_end+0xfffc3ad8>
   82a04:	d9002d17 	ldw	r4,180(sp)
   82a08:	d9801e04 	addi	r6,sp,120
   82a0c:	b80b883a 	mov	r5,r23
   82a10:	00879fc0 	call	879fc <__sprint_r>
   82a14:	1039f81e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82a18:	d8c02017 	ldw	r3,128(sp)
   82a1c:	da000404 	addi	r8,sp,16
   82a20:	003cd006 	br	81d64 <__alt_data_end+0xfffc3564>
   82a24:	8009883a 	mov	r4,r16
   82a28:	df003d15 	stw	fp,244(sp)
   82a2c:	00878680 	call	87868 <strlen>
   82a30:	d8802b15 	stw	r2,172(sp)
   82a34:	da003d17 	ldw	r8,244(sp)
   82a38:	103c200e 	bge	r2,zero,81abc <__alt_data_end+0xfffc32bc>
   82a3c:	0005883a 	mov	r2,zero
   82a40:	003c1e06 	br	81abc <__alt_data_end+0xfffc32bc>
   82a44:	d9002d17 	ldw	r4,180(sp)
   82a48:	d9801e04 	addi	r6,sp,120
   82a4c:	b80b883a 	mov	r5,r23
   82a50:	00879fc0 	call	879fc <__sprint_r>
   82a54:	1039e81e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82a58:	d8c02017 	ldw	r3,128(sp)
   82a5c:	d8801f17 	ldw	r2,124(sp)
   82a60:	da000404 	addi	r8,sp,16
   82a64:	d9403317 	ldw	r5,204(sp)
   82a68:	10800044 	addi	r2,r2,1
   82a6c:	44000015 	stw	r16,0(r8)
   82a70:	28c7883a 	add	r3,r5,r3
   82a74:	003b5b06 	br	817e4 <__alt_data_end+0xfffc2fe4>
   82a78:	010002b4 	movhi	r4,10
   82a7c:	21209984 	addi	r4,r4,-32154
   82a80:	d9003515 	stw	r4,212(sp)
   82a84:	003af206 	br	81650 <__alt_data_end+0xfffc2e50>
   82a88:	013fffc4 	movi	r4,-1
   82a8c:	003a0806 	br	812b0 <__alt_data_end+0xfffc2ab0>
   82a90:	0023883a 	mov	r17,zero
   82a94:	003d9d06 	br	8210c <__alt_data_end+0xfffc390c>
   82a98:	d9002d17 	ldw	r4,180(sp)
   82a9c:	d9801e04 	addi	r6,sp,120
   82aa0:	b80b883a 	mov	r5,r23
   82aa4:	00879fc0 	call	879fc <__sprint_r>
   82aa8:	1039d31e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82aac:	d8c02017 	ldw	r3,128(sp)
   82ab0:	da000404 	addi	r8,sp,16
   82ab4:	003d9406 	br	82108 <__alt_data_end+0xfffc3908>
   82ab8:	010002b4 	movhi	r4,10
   82abc:	21209584 	addi	r4,r4,-32170
   82ac0:	d9002c15 	stw	r4,176(sp)
   82ac4:	d9002c17 	ldw	r4,176(sp)
   82ac8:	1c47883a 	add	r3,r3,r17
   82acc:	10800044 	addi	r2,r2,1
   82ad0:	41000015 	stw	r4,0(r8)
   82ad4:	44400115 	stw	r17,4(r8)
   82ad8:	d8c02015 	stw	r3,128(sp)
   82adc:	d8801f15 	stw	r2,124(sp)
   82ae0:	010001c4 	movi	r4,7
   82ae4:	20bfd716 	blt	r4,r2,82a44 <__alt_data_end+0xfffc4244>
   82ae8:	42000204 	addi	r8,r8,8
   82aec:	003fdd06 	br	82a64 <__alt_data_end+0xfffc4264>
   82af0:	d9002d17 	ldw	r4,180(sp)
   82af4:	d9801e04 	addi	r6,sp,120
   82af8:	b80b883a 	mov	r5,r23
   82afc:	00879fc0 	call	879fc <__sprint_r>
   82b00:	1039bd1e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82b04:	d8802617 	ldw	r2,152(sp)
   82b08:	d8c02017 	ldw	r3,128(sp)
   82b0c:	da000404 	addi	r8,sp,16
   82b10:	003e1006 	br	82354 <__alt_data_end+0xfffc3b54>
   82b14:	00800044 	movi	r2,1
   82b18:	10803fcc 	andi	r2,r2,255
   82b1c:	00c00044 	movi	r3,1
   82b20:	10fa0d26 	beq	r2,r3,81358 <__alt_data_end+0xfffc2b58>
   82b24:	00c00084 	movi	r3,2
   82b28:	10fbaf26 	beq	r2,r3,819e8 <__alt_data_end+0xfffc31e8>
   82b2c:	003a6d06 	br	814e4 <__alt_data_end+0xfffc2ce4>
   82b30:	010002b4 	movhi	r4,10
   82b34:	21209984 	addi	r4,r4,-32154
   82b38:	d9003515 	stw	r4,212(sp)
   82b3c:	003b5406 	br	81890 <__alt_data_end+0xfffc3090>
   82b40:	d8802a17 	ldw	r2,168(sp)
   82b44:	00c00184 	movi	r3,6
   82b48:	1880012e 	bgeu	r3,r2,82b50 <___vfprintf_internal_r+0x1d68>
   82b4c:	1805883a 	mov	r2,r3
   82b50:	d8802b15 	stw	r2,172(sp)
   82b54:	1000ef16 	blt	r2,zero,82f14 <___vfprintf_internal_r+0x212c>
   82b58:	040002b4 	movhi	r16,10
   82b5c:	d8802915 	stw	r2,164(sp)
   82b60:	dcc02e15 	stw	r19,184(sp)
   82b64:	d8002a15 	stw	zero,168(sp)
   82b68:	d8003215 	stw	zero,200(sp)
   82b6c:	84209304 	addi	r16,r16,-32180
   82b70:	0039883a 	mov	fp,zero
   82b74:	003a8006 	br	81578 <__alt_data_end+0xfffc2d78>
   82b78:	0021883a 	mov	r16,zero
   82b7c:	003e0706 	br	8239c <__alt_data_end+0xfffc3b9c>
   82b80:	d9002d17 	ldw	r4,180(sp)
   82b84:	d9801e04 	addi	r6,sp,120
   82b88:	b80b883a 	mov	r5,r23
   82b8c:	00879fc0 	call	879fc <__sprint_r>
   82b90:	1039991e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82b94:	d8802617 	ldw	r2,152(sp)
   82b98:	d9403317 	ldw	r5,204(sp)
   82b9c:	d8c02017 	ldw	r3,128(sp)
   82ba0:	da000404 	addi	r8,sp,16
   82ba4:	2885c83a 	sub	r2,r5,r2
   82ba8:	003dfb06 	br	82398 <__alt_data_end+0xfffc3b98>
   82bac:	9080004c 	andi	r2,r18,1
   82bb0:	103e8f1e 	bne	r2,zero,825f0 <__alt_data_end+0xfffc3df0>
   82bb4:	d8802117 	ldw	r2,132(sp)
   82bb8:	003e9e06 	br	82634 <__alt_data_end+0xfffc3e34>
   82bbc:	1025883a 	mov	r18,r2
   82bc0:	0039883a 	mov	fp,zero
   82bc4:	00800084 	movi	r2,2
   82bc8:	003fd306 	br	82b18 <__alt_data_end+0xfffc4318>
   82bcc:	07000b44 	movi	fp,45
   82bd0:	df002785 	stb	fp,158(sp)
   82bd4:	003a1b06 	br	81444 <__alt_data_end+0xfffc2c44>
   82bd8:	00c00b44 	movi	r3,45
   82bdc:	d8c02785 	stb	r3,158(sp)
   82be0:	d8802915 	stw	r2,164(sp)
   82be4:	dc802c17 	ldw	r18,176(sp)
   82be8:	d8002a15 	stw	zero,168(sp)
   82bec:	07000b44 	movi	fp,45
   82bf0:	003a5e06 	br	8156c <__alt_data_end+0xfffc2d6c>
   82bf4:	040002b4 	movhi	r16,10
   82bf8:	84208804 	addi	r16,r16,-32224
   82bfc:	003f4706 	br	8291c <__alt_data_end+0xfffc411c>
   82c00:	d9002e17 	ldw	r4,184(sp)
   82c04:	d9402f17 	ldw	r5,188(sp)
   82c08:	20800017 	ldw	r2,0(r4)
   82c0c:	21000104 	addi	r4,r4,4
   82c10:	d9002e15 	stw	r4,184(sp)
   82c14:	11400015 	stw	r5,0(r2)
   82c18:	0038ab06 	br	80ec8 <__alt_data_end+0xfffc26c8>
   82c1c:	dd802617 	ldw	r22,152(sp)
   82c20:	00bfff44 	movi	r2,-3
   82c24:	b0801c16 	blt	r22,r2,82c98 <___vfprintf_internal_r+0x1eb0>
   82c28:	d9402a17 	ldw	r5,168(sp)
   82c2c:	2d801a16 	blt	r5,r22,82c98 <___vfprintf_internal_r+0x1eb0>
   82c30:	dd803215 	stw	r22,200(sp)
   82c34:	003e8906 	br	8265c <__alt_data_end+0xfffc3e5c>
   82c38:	010002b4 	movhi	r4,10
   82c3c:	21209584 	addi	r4,r4,-32170
   82c40:	d9002c15 	stw	r4,176(sp)
   82c44:	003c9106 	br	81e8c <__alt_data_end+0xfffc368c>
   82c48:	e005883a 	mov	r2,fp
   82c4c:	003e7906 	br	82634 <__alt_data_end+0xfffc3e34>
   82c50:	d9002a17 	ldw	r4,168(sp)
   82c54:	df002783 	ldbu	fp,158(sp)
   82c58:	dcc02e15 	stw	r19,184(sp)
   82c5c:	d9002915 	stw	r4,164(sp)
   82c60:	d9002b15 	stw	r4,172(sp)
   82c64:	d8002a15 	stw	zero,168(sp)
   82c68:	d8003215 	stw	zero,200(sp)
   82c6c:	003a3b06 	br	8155c <__alt_data_end+0xfffc2d5c>
   82c70:	9080004c 	andi	r2,r18,1
   82c74:	0039883a 	mov	fp,zero
   82c78:	10000426 	beq	r2,zero,82c8c <___vfprintf_internal_r+0x1ea4>
   82c7c:	00800c04 	movi	r2,48
   82c80:	dc001dc4 	addi	r16,sp,119
   82c84:	d8801dc5 	stb	r2,119(sp)
   82c88:	003b6406 	br	81a1c <__alt_data_end+0xfffc321c>
   82c8c:	d8002b15 	stw	zero,172(sp)
   82c90:	dc001e04 	addi	r16,sp,120
   82c94:	003a2b06 	br	81544 <__alt_data_end+0xfffc2d44>
   82c98:	8c7fff84 	addi	r17,r17,-2
   82c9c:	b5bfffc4 	addi	r22,r22,-1
   82ca0:	dd802615 	stw	r22,152(sp)
   82ca4:	dc4022c5 	stb	r17,139(sp)
   82ca8:	b000bf16 	blt	r22,zero,82fa8 <___vfprintf_internal_r+0x21c0>
   82cac:	00800ac4 	movi	r2,43
   82cb0:	d8802305 	stb	r2,140(sp)
   82cb4:	00800244 	movi	r2,9
   82cb8:	15807016 	blt	r2,r22,82e7c <___vfprintf_internal_r+0x2094>
   82cbc:	00800c04 	movi	r2,48
   82cc0:	b5800c04 	addi	r22,r22,48
   82cc4:	d8802345 	stb	r2,141(sp)
   82cc8:	dd802385 	stb	r22,142(sp)
   82ccc:	d88023c4 	addi	r2,sp,143
   82cd0:	df0022c4 	addi	fp,sp,139
   82cd4:	d8c03317 	ldw	r3,204(sp)
   82cd8:	1739c83a 	sub	fp,r2,fp
   82cdc:	d9003317 	ldw	r4,204(sp)
   82ce0:	e0c7883a 	add	r3,fp,r3
   82ce4:	df003a15 	stw	fp,232(sp)
   82ce8:	d8c02b15 	stw	r3,172(sp)
   82cec:	00800044 	movi	r2,1
   82cf0:	1100b30e 	bge	r2,r4,82fc0 <___vfprintf_internal_r+0x21d8>
   82cf4:	d8c02b17 	ldw	r3,172(sp)
   82cf8:	18c00044 	addi	r3,r3,1
   82cfc:	d8c02b15 	stw	r3,172(sp)
   82d00:	1805883a 	mov	r2,r3
   82d04:	1800ac16 	blt	r3,zero,82fb8 <___vfprintf_internal_r+0x21d0>
   82d08:	d8003215 	stw	zero,200(sp)
   82d0c:	003e5d06 	br	82684 <__alt_data_end+0xfffc3e84>
   82d10:	d9002d17 	ldw	r4,180(sp)
   82d14:	d9801e04 	addi	r6,sp,120
   82d18:	b80b883a 	mov	r5,r23
   82d1c:	00879fc0 	call	879fc <__sprint_r>
   82d20:	1039351e 	bne	r2,zero,811f8 <__alt_data_end+0xfffc29f8>
   82d24:	dc402617 	ldw	r17,152(sp)
   82d28:	d8c02017 	ldw	r3,128(sp)
   82d2c:	d8801f17 	ldw	r2,124(sp)
   82d30:	da000404 	addi	r8,sp,16
   82d34:	003ed606 	br	82890 <__alt_data_end+0xfffc4090>
   82d38:	182b883a 	mov	r21,r3
   82d3c:	d8002a15 	stw	zero,168(sp)
   82d40:	00388c06 	br	80f74 <__alt_data_end+0xfffc2774>
   82d44:	d8802a17 	ldw	r2,168(sp)
   82d48:	103e071e 	bne	r2,zero,82568 <__alt_data_end+0xfffc3d68>
   82d4c:	dc002a15 	stw	r16,168(sp)
   82d50:	003e0506 	br	82568 <__alt_data_end+0xfffc3d68>
   82d54:	d9002a17 	ldw	r4,168(sp)
   82d58:	20c00044 	addi	r3,r4,1
   82d5c:	003e0f06 	br	8259c <__alt_data_end+0xfffc3d9c>
   82d60:	01400184 	movi	r5,6
   82d64:	d9402a15 	stw	r5,168(sp)
   82d68:	003dff06 	br	82568 <__alt_data_end+0xfffc3d68>
   82d6c:	d8802104 	addi	r2,sp,132
   82d70:	d8800315 	stw	r2,12(sp)
   82d74:	d8802504 	addi	r2,sp,148
   82d78:	d8800215 	stw	r2,8(sp)
   82d7c:	d8802604 	addi	r2,sp,152
   82d80:	d8800115 	stw	r2,4(sp)
   82d84:	d8802a17 	ldw	r2,168(sp)
   82d88:	d9403617 	ldw	r5,216(sp)
   82d8c:	d9002d17 	ldw	r4,180(sp)
   82d90:	d8800015 	stw	r2,0(sp)
   82d94:	01c000c4 	movi	r7,3
   82d98:	980d883a 	mov	r6,r19
   82d9c:	da003d15 	stw	r8,244(sp)
   82da0:	00835180 	call	83518 <_dtoa_r>
   82da4:	d8c02a17 	ldw	r3,168(sp)
   82da8:	da003d17 	ldw	r8,244(sp)
   82dac:	1021883a 	mov	r16,r2
   82db0:	10f9883a 	add	fp,r2,r3
   82db4:	81000007 	ldb	r4,0(r16)
   82db8:	00800c04 	movi	r2,48
   82dbc:	20805e26 	beq	r4,r2,82f38 <___vfprintf_internal_r+0x2150>
   82dc0:	d8c02617 	ldw	r3,152(sp)
   82dc4:	e0f9883a 	add	fp,fp,r3
   82dc8:	003e0a06 	br	825f4 <__alt_data_end+0xfffc3df4>
   82dcc:	00c00b44 	movi	r3,45
   82dd0:	24e0003c 	xorhi	r19,r4,32768
   82dd4:	d8c02905 	stb	r3,164(sp)
   82dd8:	003de906 	br	82580 <__alt_data_end+0xfffc3d80>
   82ddc:	d8c03217 	ldw	r3,200(sp)
   82de0:	00c07a0e 	bge	zero,r3,82fcc <___vfprintf_internal_r+0x21e4>
   82de4:	00800044 	movi	r2,1
   82de8:	d9003317 	ldw	r4,204(sp)
   82dec:	1105883a 	add	r2,r2,r4
   82df0:	d8802b15 	stw	r2,172(sp)
   82df4:	10004e16 	blt	r2,zero,82f30 <___vfprintf_internal_r+0x2148>
   82df8:	044019c4 	movi	r17,103
   82dfc:	003e2106 	br	82684 <__alt_data_end+0xfffc3e84>
   82e00:	d9002a17 	ldw	r4,168(sp)
   82e04:	d8802104 	addi	r2,sp,132
   82e08:	d8800315 	stw	r2,12(sp)
   82e0c:	d9000015 	stw	r4,0(sp)
   82e10:	d8802504 	addi	r2,sp,148
   82e14:	d9403617 	ldw	r5,216(sp)
   82e18:	d9002d17 	ldw	r4,180(sp)
   82e1c:	d8800215 	stw	r2,8(sp)
   82e20:	d8802604 	addi	r2,sp,152
   82e24:	d8800115 	stw	r2,4(sp)
   82e28:	01c000c4 	movi	r7,3
   82e2c:	980d883a 	mov	r6,r19
   82e30:	da003d15 	stw	r8,244(sp)
   82e34:	00835180 	call	83518 <_dtoa_r>
   82e38:	d8c02a17 	ldw	r3,168(sp)
   82e3c:	da003d17 	ldw	r8,244(sp)
   82e40:	1021883a 	mov	r16,r2
   82e44:	00801184 	movi	r2,70
   82e48:	80f9883a 	add	fp,r16,r3
   82e4c:	88bfd926 	beq	r17,r2,82db4 <__alt_data_end+0xfffc45b4>
   82e50:	003de806 	br	825f4 <__alt_data_end+0xfffc3df4>
   82e54:	d9002a17 	ldw	r4,168(sp)
   82e58:	00c04d0e 	bge	zero,r3,82f90 <___vfprintf_internal_r+0x21a8>
   82e5c:	2000441e 	bne	r4,zero,82f70 <___vfprintf_internal_r+0x2188>
   82e60:	9480004c 	andi	r18,r18,1
   82e64:	9000421e 	bne	r18,zero,82f70 <___vfprintf_internal_r+0x2188>
   82e68:	1805883a 	mov	r2,r3
   82e6c:	18006f16 	blt	r3,zero,8302c <___vfprintf_internal_r+0x2244>
   82e70:	d8c03217 	ldw	r3,200(sp)
   82e74:	d8c02b15 	stw	r3,172(sp)
   82e78:	003e0206 	br	82684 <__alt_data_end+0xfffc3e84>
   82e7c:	df0022c4 	addi	fp,sp,139
   82e80:	dc002a15 	stw	r16,168(sp)
   82e84:	4027883a 	mov	r19,r8
   82e88:	e021883a 	mov	r16,fp
   82e8c:	b009883a 	mov	r4,r22
   82e90:	01400284 	movi	r5,10
   82e94:	0080ab80 	call	80ab8 <__modsi3>
   82e98:	10800c04 	addi	r2,r2,48
   82e9c:	843fffc4 	addi	r16,r16,-1
   82ea0:	b009883a 	mov	r4,r22
   82ea4:	01400284 	movi	r5,10
   82ea8:	80800005 	stb	r2,0(r16)
   82eac:	0080a340 	call	80a34 <__divsi3>
   82eb0:	102d883a 	mov	r22,r2
   82eb4:	00800244 	movi	r2,9
   82eb8:	15bff416 	blt	r2,r22,82e8c <__alt_data_end+0xfffc468c>
   82ebc:	9811883a 	mov	r8,r19
   82ec0:	b0800c04 	addi	r2,r22,48
   82ec4:	8027883a 	mov	r19,r16
   82ec8:	997fffc4 	addi	r5,r19,-1
   82ecc:	98bfffc5 	stb	r2,-1(r19)
   82ed0:	dc002a17 	ldw	r16,168(sp)
   82ed4:	2f006d2e 	bgeu	r5,fp,8308c <___vfprintf_internal_r+0x22a4>
   82ed8:	d9c02384 	addi	r7,sp,142
   82edc:	3ccfc83a 	sub	r7,r7,r19
   82ee0:	d9002344 	addi	r4,sp,141
   82ee4:	e1cf883a 	add	r7,fp,r7
   82ee8:	00000106 	br	82ef0 <___vfprintf_internal_r+0x2108>
   82eec:	28800003 	ldbu	r2,0(r5)
   82ef0:	20800005 	stb	r2,0(r4)
   82ef4:	21000044 	addi	r4,r4,1
   82ef8:	29400044 	addi	r5,r5,1
   82efc:	393ffb1e 	bne	r7,r4,82eec <__alt_data_end+0xfffc46ec>
   82f00:	d8802304 	addi	r2,sp,140
   82f04:	14c5c83a 	sub	r2,r2,r19
   82f08:	d8c02344 	addi	r3,sp,141
   82f0c:	1885883a 	add	r2,r3,r2
   82f10:	003f7006 	br	82cd4 <__alt_data_end+0xfffc44d4>
   82f14:	0005883a 	mov	r2,zero
   82f18:	003f0f06 	br	82b58 <__alt_data_end+0xfffc4358>
   82f1c:	d8c03217 	ldw	r3,200(sp)
   82f20:	18c00044 	addi	r3,r3,1
   82f24:	d8c02b15 	stw	r3,172(sp)
   82f28:	1805883a 	mov	r2,r3
   82f2c:	183fb20e 	bge	r3,zero,82df8 <__alt_data_end+0xfffc45f8>
   82f30:	0005883a 	mov	r2,zero
   82f34:	003fb006 	br	82df8 <__alt_data_end+0xfffc45f8>
   82f38:	d9003617 	ldw	r4,216(sp)
   82f3c:	000d883a 	mov	r6,zero
   82f40:	000f883a 	mov	r7,zero
   82f44:	980b883a 	mov	r5,r19
   82f48:	d8c03c15 	stw	r3,240(sp)
   82f4c:	da003d15 	stw	r8,244(sp)
   82f50:	008c3300 	call	8c330 <__eqdf2>
   82f54:	d8c03c17 	ldw	r3,240(sp)
   82f58:	da003d17 	ldw	r8,244(sp)
   82f5c:	103f9826 	beq	r2,zero,82dc0 <__alt_data_end+0xfffc45c0>
   82f60:	00800044 	movi	r2,1
   82f64:	10c7c83a 	sub	r3,r2,r3
   82f68:	d8c02615 	stw	r3,152(sp)
   82f6c:	003f9506 	br	82dc4 <__alt_data_end+0xfffc45c4>
   82f70:	d9002a17 	ldw	r4,168(sp)
   82f74:	d8c03217 	ldw	r3,200(sp)
   82f78:	20800044 	addi	r2,r4,1
   82f7c:	1885883a 	add	r2,r3,r2
   82f80:	d8802b15 	stw	r2,172(sp)
   82f84:	103dbf0e 	bge	r2,zero,82684 <__alt_data_end+0xfffc3e84>
   82f88:	0005883a 	mov	r2,zero
   82f8c:	003dbd06 	br	82684 <__alt_data_end+0xfffc3e84>
   82f90:	2000201e 	bne	r4,zero,83014 <___vfprintf_internal_r+0x222c>
   82f94:	9480004c 	andi	r18,r18,1
   82f98:	90001e1e 	bne	r18,zero,83014 <___vfprintf_internal_r+0x222c>
   82f9c:	00800044 	movi	r2,1
   82fa0:	d8802b15 	stw	r2,172(sp)
   82fa4:	003db706 	br	82684 <__alt_data_end+0xfffc3e84>
   82fa8:	00800b44 	movi	r2,45
   82fac:	05adc83a 	sub	r22,zero,r22
   82fb0:	d8802305 	stb	r2,140(sp)
   82fb4:	003f3f06 	br	82cb4 <__alt_data_end+0xfffc44b4>
   82fb8:	0005883a 	mov	r2,zero
   82fbc:	003f5206 	br	82d08 <__alt_data_end+0xfffc4508>
   82fc0:	90a4703a 	and	r18,r18,r2
   82fc4:	903f4e26 	beq	r18,zero,82d00 <__alt_data_end+0xfffc4500>
   82fc8:	003f4a06 	br	82cf4 <__alt_data_end+0xfffc44f4>
   82fcc:	00800084 	movi	r2,2
   82fd0:	10c5c83a 	sub	r2,r2,r3
   82fd4:	003f8406 	br	82de8 <__alt_data_end+0xfffc45e8>
   82fd8:	d9402e17 	ldw	r5,184(sp)
   82fdc:	d9002e17 	ldw	r4,184(sp)
   82fe0:	ac400043 	ldbu	r17,1(r21)
   82fe4:	29400017 	ldw	r5,0(r5)
   82fe8:	20800104 	addi	r2,r4,4
   82fec:	d8802e15 	stw	r2,184(sp)
   82ff0:	d9402a15 	stw	r5,168(sp)
   82ff4:	182b883a 	mov	r21,r3
   82ff8:	283e7b0e 	bge	r5,zero,829e8 <__alt_data_end+0xfffc41e8>
   82ffc:	8c403fcc 	andi	r17,r17,255
   83000:	017fffc4 	movi	r5,-1
   83004:	8c40201c 	xori	r17,r17,128
   83008:	d9402a15 	stw	r5,168(sp)
   8300c:	8c7fe004 	addi	r17,r17,-128
   83010:	0037d706 	br	80f70 <__alt_data_end+0xfffc2770>
   83014:	d8c02a17 	ldw	r3,168(sp)
   83018:	18c00084 	addi	r3,r3,2
   8301c:	d8c02b15 	stw	r3,172(sp)
   83020:	1805883a 	mov	r2,r3
   83024:	183d970e 	bge	r3,zero,82684 <__alt_data_end+0xfffc3e84>
   83028:	003fd706 	br	82f88 <__alt_data_end+0xfffc4788>
   8302c:	0005883a 	mov	r2,zero
   83030:	003f8f06 	br	82e70 <__alt_data_end+0xfffc4670>
   83034:	9080004c 	andi	r2,r18,1
   83038:	103f821e 	bne	r2,zero,82e44 <__alt_data_end+0xfffc4644>
   8303c:	d8802117 	ldw	r2,132(sp)
   83040:	1405c83a 	sub	r2,r2,r16
   83044:	d8803315 	stw	r2,204(sp)
   83048:	b47ef426 	beq	r22,r17,82c1c <__alt_data_end+0xfffc441c>
   8304c:	dd802617 	ldw	r22,152(sp)
   83050:	003f1206 	br	82c9c <__alt_data_end+0xfffc449c>
   83054:	d8c02b03 	ldbu	r3,172(sp)
   83058:	d8c02785 	stb	r3,158(sp)
   8305c:	0038df06 	br	813dc <__alt_data_end+0xfffc2bdc>
   83060:	d8c02b03 	ldbu	r3,172(sp)
   83064:	d8c02785 	stb	r3,158(sp)
   83068:	0038aa06 	br	81314 <__alt_data_end+0xfffc2b14>
   8306c:	d8c02b03 	ldbu	r3,172(sp)
   83070:	d8c02785 	stb	r3,158(sp)
   83074:	003a4306 	br	81984 <__alt_data_end+0xfffc3184>
   83078:	d8c02b03 	ldbu	r3,172(sp)
   8307c:	d8c02785 	stb	r3,158(sp)
   83080:	003af506 	br	81c58 <__alt_data_end+0xfffc3458>
   83084:	0005883a 	mov	r2,zero
   83088:	003d7b06 	br	82678 <__alt_data_end+0xfffc3e78>
   8308c:	d8802344 	addi	r2,sp,141
   83090:	003f1006 	br	82cd4 <__alt_data_end+0xfffc44d4>
   83094:	d8c02b03 	ldbu	r3,172(sp)
   83098:	d8c02785 	stb	r3,158(sp)
   8309c:	0038fd06 	br	81494 <__alt_data_end+0xfffc2c94>
   830a0:	d8c02b03 	ldbu	r3,172(sp)
   830a4:	d8c02785 	stb	r3,158(sp)
   830a8:	003a9706 	br	81b08 <__alt_data_end+0xfffc3308>
   830ac:	d8c02b03 	ldbu	r3,172(sp)
   830b0:	d8c02785 	stb	r3,158(sp)
   830b4:	003a1806 	br	81918 <__alt_data_end+0xfffc3118>
   830b8:	d8c02b03 	ldbu	r3,172(sp)
   830bc:	d8c02785 	stb	r3,158(sp)
   830c0:	003abe06 	br	81bbc <__alt_data_end+0xfffc33bc>

000830c4 <__vfprintf_internal>:
   830c4:	008002b4 	movhi	r2,10
   830c8:	10a83d04 	addi	r2,r2,-24332
   830cc:	300f883a 	mov	r7,r6
   830d0:	280d883a 	mov	r6,r5
   830d4:	200b883a 	mov	r5,r4
   830d8:	11000017 	ldw	r4,0(r2)
   830dc:	0080de81 	jmpi	80de8 <___vfprintf_internal_r>

000830e0 <__sbprintf>:
   830e0:	2880030b 	ldhu	r2,12(r5)
   830e4:	2ac01917 	ldw	r11,100(r5)
   830e8:	2a80038b 	ldhu	r10,14(r5)
   830ec:	2a400717 	ldw	r9,28(r5)
   830f0:	2a000917 	ldw	r8,36(r5)
   830f4:	defee204 	addi	sp,sp,-1144
   830f8:	00c10004 	movi	r3,1024
   830fc:	dc011a15 	stw	r16,1128(sp)
   83100:	10bfff4c 	andi	r2,r2,65533
   83104:	2821883a 	mov	r16,r5
   83108:	d8cb883a 	add	r5,sp,r3
   8310c:	dc811c15 	stw	r18,1136(sp)
   83110:	dc411b15 	stw	r17,1132(sp)
   83114:	dfc11d15 	stw	ra,1140(sp)
   83118:	2025883a 	mov	r18,r4
   8311c:	d881030d 	sth	r2,1036(sp)
   83120:	dac11915 	stw	r11,1124(sp)
   83124:	da81038d 	sth	r10,1038(sp)
   83128:	da410715 	stw	r9,1052(sp)
   8312c:	da010915 	stw	r8,1060(sp)
   83130:	dec10015 	stw	sp,1024(sp)
   83134:	dec10415 	stw	sp,1040(sp)
   83138:	d8c10215 	stw	r3,1032(sp)
   8313c:	d8c10515 	stw	r3,1044(sp)
   83140:	d8010615 	stw	zero,1048(sp)
   83144:	0080de80 	call	80de8 <___vfprintf_internal_r>
   83148:	1023883a 	mov	r17,r2
   8314c:	10000416 	blt	r2,zero,83160 <__sbprintf+0x80>
   83150:	d9410004 	addi	r5,sp,1024
   83154:	9009883a 	mov	r4,r18
   83158:	0084dbc0 	call	84dbc <_fflush_r>
   8315c:	10000d1e 	bne	r2,zero,83194 <__sbprintf+0xb4>
   83160:	d881030b 	ldhu	r2,1036(sp)
   83164:	1080100c 	andi	r2,r2,64
   83168:	10000326 	beq	r2,zero,83178 <__sbprintf+0x98>
   8316c:	8080030b 	ldhu	r2,12(r16)
   83170:	10801014 	ori	r2,r2,64
   83174:	8080030d 	sth	r2,12(r16)
   83178:	8805883a 	mov	r2,r17
   8317c:	dfc11d17 	ldw	ra,1140(sp)
   83180:	dc811c17 	ldw	r18,1136(sp)
   83184:	dc411b17 	ldw	r17,1132(sp)
   83188:	dc011a17 	ldw	r16,1128(sp)
   8318c:	dec11e04 	addi	sp,sp,1144
   83190:	f800283a 	ret
   83194:	047fffc4 	movi	r17,-1
   83198:	003ff106 	br	83160 <__alt_data_end+0xfffc4960>

0008319c <__swsetup_r>:
   8319c:	008002b4 	movhi	r2,10
   831a0:	defffd04 	addi	sp,sp,-12
   831a4:	10a83d04 	addi	r2,r2,-24332
   831a8:	dc400115 	stw	r17,4(sp)
   831ac:	2023883a 	mov	r17,r4
   831b0:	11000017 	ldw	r4,0(r2)
   831b4:	dc000015 	stw	r16,0(sp)
   831b8:	dfc00215 	stw	ra,8(sp)
   831bc:	2821883a 	mov	r16,r5
   831c0:	20000226 	beq	r4,zero,831cc <__swsetup_r+0x30>
   831c4:	20800e17 	ldw	r2,56(r4)
   831c8:	10003126 	beq	r2,zero,83290 <__swsetup_r+0xf4>
   831cc:	8080030b 	ldhu	r2,12(r16)
   831d0:	10c0020c 	andi	r3,r2,8
   831d4:	1009883a 	mov	r4,r2
   831d8:	18000f26 	beq	r3,zero,83218 <__swsetup_r+0x7c>
   831dc:	80c00417 	ldw	r3,16(r16)
   831e0:	18001526 	beq	r3,zero,83238 <__swsetup_r+0x9c>
   831e4:	1100004c 	andi	r4,r2,1
   831e8:	20001c1e 	bne	r4,zero,8325c <__swsetup_r+0xc0>
   831ec:	1080008c 	andi	r2,r2,2
   831f0:	1000291e 	bne	r2,zero,83298 <__swsetup_r+0xfc>
   831f4:	80800517 	ldw	r2,20(r16)
   831f8:	80800215 	stw	r2,8(r16)
   831fc:	18001c26 	beq	r3,zero,83270 <__swsetup_r+0xd4>
   83200:	0005883a 	mov	r2,zero
   83204:	dfc00217 	ldw	ra,8(sp)
   83208:	dc400117 	ldw	r17,4(sp)
   8320c:	dc000017 	ldw	r16,0(sp)
   83210:	dec00304 	addi	sp,sp,12
   83214:	f800283a 	ret
   83218:	2080040c 	andi	r2,r4,16
   8321c:	10002e26 	beq	r2,zero,832d8 <__swsetup_r+0x13c>
   83220:	2080010c 	andi	r2,r4,4
   83224:	10001e1e 	bne	r2,zero,832a0 <__swsetup_r+0x104>
   83228:	80c00417 	ldw	r3,16(r16)
   8322c:	20800214 	ori	r2,r4,8
   83230:	8080030d 	sth	r2,12(r16)
   83234:	183feb1e 	bne	r3,zero,831e4 <__alt_data_end+0xfffc49e4>
   83238:	1100a00c 	andi	r4,r2,640
   8323c:	01408004 	movi	r5,512
   83240:	217fe826 	beq	r4,r5,831e4 <__alt_data_end+0xfffc49e4>
   83244:	800b883a 	mov	r5,r16
   83248:	8809883a 	mov	r4,r17
   8324c:	00858900 	call	85890 <__smakebuf_r>
   83250:	8080030b 	ldhu	r2,12(r16)
   83254:	80c00417 	ldw	r3,16(r16)
   83258:	003fe206 	br	831e4 <__alt_data_end+0xfffc49e4>
   8325c:	80800517 	ldw	r2,20(r16)
   83260:	80000215 	stw	zero,8(r16)
   83264:	0085c83a 	sub	r2,zero,r2
   83268:	80800615 	stw	r2,24(r16)
   8326c:	183fe41e 	bne	r3,zero,83200 <__alt_data_end+0xfffc4a00>
   83270:	80c0030b 	ldhu	r3,12(r16)
   83274:	0005883a 	mov	r2,zero
   83278:	1900200c 	andi	r4,r3,128
   8327c:	203fe126 	beq	r4,zero,83204 <__alt_data_end+0xfffc4a04>
   83280:	18c01014 	ori	r3,r3,64
   83284:	80c0030d 	sth	r3,12(r16)
   83288:	00bfffc4 	movi	r2,-1
   8328c:	003fdd06 	br	83204 <__alt_data_end+0xfffc4a04>
   83290:	00851a80 	call	851a8 <__sinit>
   83294:	003fcd06 	br	831cc <__alt_data_end+0xfffc49cc>
   83298:	0005883a 	mov	r2,zero
   8329c:	003fd606 	br	831f8 <__alt_data_end+0xfffc49f8>
   832a0:	81400c17 	ldw	r5,48(r16)
   832a4:	28000626 	beq	r5,zero,832c0 <__swsetup_r+0x124>
   832a8:	80801004 	addi	r2,r16,64
   832ac:	28800326 	beq	r5,r2,832bc <__swsetup_r+0x120>
   832b0:	8809883a 	mov	r4,r17
   832b4:	008531c0 	call	8531c <_free_r>
   832b8:	8100030b 	ldhu	r4,12(r16)
   832bc:	80000c15 	stw	zero,48(r16)
   832c0:	80c00417 	ldw	r3,16(r16)
   832c4:	00bff6c4 	movi	r2,-37
   832c8:	1108703a 	and	r4,r2,r4
   832cc:	80000115 	stw	zero,4(r16)
   832d0:	80c00015 	stw	r3,0(r16)
   832d4:	003fd506 	br	8322c <__alt_data_end+0xfffc4a2c>
   832d8:	00800244 	movi	r2,9
   832dc:	88800015 	stw	r2,0(r17)
   832e0:	20801014 	ori	r2,r4,64
   832e4:	8080030d 	sth	r2,12(r16)
   832e8:	00bfffc4 	movi	r2,-1
   832ec:	003fc506 	br	83204 <__alt_data_end+0xfffc4a04>

000832f0 <quorem>:
   832f0:	defff204 	addi	sp,sp,-56
   832f4:	ddc00b15 	stw	r23,44(sp)
   832f8:	20800417 	ldw	r2,16(r4)
   832fc:	2dc00417 	ldw	r23,16(r5)
   83300:	dfc00d15 	stw	ra,52(sp)
   83304:	df000c15 	stw	fp,48(sp)
   83308:	dd800a15 	stw	r22,40(sp)
   8330c:	dd400915 	stw	r21,36(sp)
   83310:	dd000815 	stw	r20,32(sp)
   83314:	dcc00715 	stw	r19,28(sp)
   83318:	dc800615 	stw	r18,24(sp)
   8331c:	dc400515 	stw	r17,20(sp)
   83320:	dc000415 	stw	r16,16(sp)
   83324:	15c07a16 	blt	r2,r23,83510 <quorem+0x220>
   83328:	bdffffc4 	addi	r23,r23,-1
   8332c:	bde9883a 	add	r20,r23,r23
   83330:	28c00504 	addi	r3,r5,20
   83334:	a529883a 	add	r20,r20,r20
   83338:	1d39883a 	add	fp,r3,r20
   8333c:	24c00504 	addi	r19,r4,20
   83340:	d9400215 	stw	r5,8(sp)
   83344:	9d29883a 	add	r20,r19,r20
   83348:	e1400017 	ldw	r5,0(fp)
   8334c:	d9000015 	stw	r4,0(sp)
   83350:	a1000017 	ldw	r4,0(r20)
   83354:	29400044 	addi	r5,r5,1
   83358:	d8c00115 	stw	r3,4(sp)
   8335c:	dd000315 	stw	r20,12(sp)
   83360:	0080b2c0 	call	80b2c <__udivsi3>
   83364:	1025883a 	mov	r18,r2
   83368:	10003026 	beq	r2,zero,8342c <quorem+0x13c>
   8336c:	dc400117 	ldw	r17,4(sp)
   83370:	9829883a 	mov	r20,r19
   83374:	002d883a 	mov	r22,zero
   83378:	0021883a 	mov	r16,zero
   8337c:	8d400017 	ldw	r21,0(r17)
   83380:	900b883a 	mov	r5,r18
   83384:	8c400104 	addi	r17,r17,4
   83388:	a93fffcc 	andi	r4,r21,65535
   8338c:	008b08c0 	call	8b08c <__mulsi3>
   83390:	a808d43a 	srli	r4,r21,16
   83394:	900b883a 	mov	r5,r18
   83398:	15ad883a 	add	r22,r2,r22
   8339c:	008b08c0 	call	8b08c <__mulsi3>
   833a0:	a1000017 	ldw	r4,0(r20)
   833a4:	b00cd43a 	srli	r6,r22,16
   833a8:	b0ffffcc 	andi	r3,r22,65535
   833ac:	217fffcc 	andi	r5,r4,65535
   833b0:	2c21883a 	add	r16,r5,r16
   833b4:	80c7c83a 	sub	r3,r16,r3
   833b8:	2008d43a 	srli	r4,r4,16
   833bc:	1185883a 	add	r2,r2,r6
   833c0:	1821d43a 	srai	r16,r3,16
   833c4:	117fffcc 	andi	r5,r2,65535
   833c8:	2149c83a 	sub	r4,r4,r5
   833cc:	2421883a 	add	r16,r4,r16
   833d0:	8008943a 	slli	r4,r16,16
   833d4:	18ffffcc 	andi	r3,r3,65535
   833d8:	102cd43a 	srli	r22,r2,16
   833dc:	20c8b03a 	or	r4,r4,r3
   833e0:	a1000015 	stw	r4,0(r20)
   833e4:	8021d43a 	srai	r16,r16,16
   833e8:	a5000104 	addi	r20,r20,4
   833ec:	e47fe32e 	bgeu	fp,r17,8337c <__alt_data_end+0xfffc4b7c>
   833f0:	d8c00317 	ldw	r3,12(sp)
   833f4:	18800017 	ldw	r2,0(r3)
   833f8:	10000c1e 	bne	r2,zero,8342c <quorem+0x13c>
   833fc:	18bfff04 	addi	r2,r3,-4
   83400:	9880082e 	bgeu	r19,r2,83424 <quorem+0x134>
   83404:	18ffff17 	ldw	r3,-4(r3)
   83408:	18000326 	beq	r3,zero,83418 <quorem+0x128>
   8340c:	00000506 	br	83424 <quorem+0x134>
   83410:	10c00017 	ldw	r3,0(r2)
   83414:	1800031e 	bne	r3,zero,83424 <quorem+0x134>
   83418:	10bfff04 	addi	r2,r2,-4
   8341c:	bdffffc4 	addi	r23,r23,-1
   83420:	98bffb36 	bltu	r19,r2,83410 <__alt_data_end+0xfffc4c10>
   83424:	d8c00017 	ldw	r3,0(sp)
   83428:	1dc00415 	stw	r23,16(r3)
   8342c:	d9400217 	ldw	r5,8(sp)
   83430:	d9000017 	ldw	r4,0(sp)
   83434:	0086f300 	call	86f30 <__mcmp>
   83438:	10002816 	blt	r2,zero,834dc <quorem+0x1ec>
   8343c:	dc400117 	ldw	r17,4(sp)
   83440:	94800044 	addi	r18,r18,1
   83444:	980d883a 	mov	r6,r19
   83448:	0007883a 	mov	r3,zero
   8344c:	31000017 	ldw	r4,0(r6)
   83450:	89400017 	ldw	r5,0(r17)
   83454:	31800104 	addi	r6,r6,4
   83458:	20bfffcc 	andi	r2,r4,65535
   8345c:	10c7883a 	add	r3,r2,r3
   83460:	28bfffcc 	andi	r2,r5,65535
   83464:	1885c83a 	sub	r2,r3,r2
   83468:	280ad43a 	srli	r5,r5,16
   8346c:	2008d43a 	srli	r4,r4,16
   83470:	1007d43a 	srai	r3,r2,16
   83474:	10bfffcc 	andi	r2,r2,65535
   83478:	2149c83a 	sub	r4,r4,r5
   8347c:	20c9883a 	add	r4,r4,r3
   83480:	200a943a 	slli	r5,r4,16
   83484:	8c400104 	addi	r17,r17,4
   83488:	2007d43a 	srai	r3,r4,16
   8348c:	2884b03a 	or	r2,r5,r2
   83490:	30bfff15 	stw	r2,-4(r6)
   83494:	e47fed2e 	bgeu	fp,r17,8344c <__alt_data_end+0xfffc4c4c>
   83498:	bdc5883a 	add	r2,r23,r23
   8349c:	1085883a 	add	r2,r2,r2
   834a0:	9887883a 	add	r3,r19,r2
   834a4:	18800017 	ldw	r2,0(r3)
   834a8:	10000c1e 	bne	r2,zero,834dc <quorem+0x1ec>
   834ac:	18bfff04 	addi	r2,r3,-4
   834b0:	9880082e 	bgeu	r19,r2,834d4 <quorem+0x1e4>
   834b4:	18ffff17 	ldw	r3,-4(r3)
   834b8:	18000326 	beq	r3,zero,834c8 <quorem+0x1d8>
   834bc:	00000506 	br	834d4 <quorem+0x1e4>
   834c0:	10c00017 	ldw	r3,0(r2)
   834c4:	1800031e 	bne	r3,zero,834d4 <quorem+0x1e4>
   834c8:	10bfff04 	addi	r2,r2,-4
   834cc:	bdffffc4 	addi	r23,r23,-1
   834d0:	98bffb36 	bltu	r19,r2,834c0 <__alt_data_end+0xfffc4cc0>
   834d4:	d8c00017 	ldw	r3,0(sp)
   834d8:	1dc00415 	stw	r23,16(r3)
   834dc:	9005883a 	mov	r2,r18
   834e0:	dfc00d17 	ldw	ra,52(sp)
   834e4:	df000c17 	ldw	fp,48(sp)
   834e8:	ddc00b17 	ldw	r23,44(sp)
   834ec:	dd800a17 	ldw	r22,40(sp)
   834f0:	dd400917 	ldw	r21,36(sp)
   834f4:	dd000817 	ldw	r20,32(sp)
   834f8:	dcc00717 	ldw	r19,28(sp)
   834fc:	dc800617 	ldw	r18,24(sp)
   83500:	dc400517 	ldw	r17,20(sp)
   83504:	dc000417 	ldw	r16,16(sp)
   83508:	dec00e04 	addi	sp,sp,56
   8350c:	f800283a 	ret
   83510:	0005883a 	mov	r2,zero
   83514:	003ff206 	br	834e0 <__alt_data_end+0xfffc4ce0>

00083518 <_dtoa_r>:
   83518:	20801017 	ldw	r2,64(r4)
   8351c:	deffde04 	addi	sp,sp,-136
   83520:	df002015 	stw	fp,128(sp)
   83524:	dcc01b15 	stw	r19,108(sp)
   83528:	dc801a15 	stw	r18,104(sp)
   8352c:	dc401915 	stw	r17,100(sp)
   83530:	dc001815 	stw	r16,96(sp)
   83534:	dfc02115 	stw	ra,132(sp)
   83538:	ddc01f15 	stw	r23,124(sp)
   8353c:	dd801e15 	stw	r22,120(sp)
   83540:	dd401d15 	stw	r21,116(sp)
   83544:	dd001c15 	stw	r20,112(sp)
   83548:	d9c00315 	stw	r7,12(sp)
   8354c:	2039883a 	mov	fp,r4
   83550:	3023883a 	mov	r17,r6
   83554:	2825883a 	mov	r18,r5
   83558:	dc002417 	ldw	r16,144(sp)
   8355c:	3027883a 	mov	r19,r6
   83560:	10000826 	beq	r2,zero,83584 <_dtoa_r+0x6c>
   83564:	21801117 	ldw	r6,68(r4)
   83568:	00c00044 	movi	r3,1
   8356c:	100b883a 	mov	r5,r2
   83570:	1986983a 	sll	r3,r3,r6
   83574:	11800115 	stw	r6,4(r2)
   83578:	10c00215 	stw	r3,8(r2)
   8357c:	00866540 	call	86654 <_Bfree>
   83580:	e0001015 	stw	zero,64(fp)
   83584:	88002e16 	blt	r17,zero,83640 <_dtoa_r+0x128>
   83588:	80000015 	stw	zero,0(r16)
   8358c:	889ffc2c 	andhi	r2,r17,32752
   83590:	00dffc34 	movhi	r3,32752
   83594:	10c01c26 	beq	r2,r3,83608 <_dtoa_r+0xf0>
   83598:	000d883a 	mov	r6,zero
   8359c:	000f883a 	mov	r7,zero
   835a0:	9009883a 	mov	r4,r18
   835a4:	980b883a 	mov	r5,r19
   835a8:	008c3300 	call	8c330 <__eqdf2>
   835ac:	10002b1e 	bne	r2,zero,8365c <_dtoa_r+0x144>
   835b0:	d9c02317 	ldw	r7,140(sp)
   835b4:	00800044 	movi	r2,1
   835b8:	38800015 	stw	r2,0(r7)
   835bc:	d8802517 	ldw	r2,148(sp)
   835c0:	10019e26 	beq	r2,zero,83c3c <_dtoa_r+0x724>
   835c4:	d8c02517 	ldw	r3,148(sp)
   835c8:	008002b4 	movhi	r2,10
   835cc:	10a09544 	addi	r2,r2,-32171
   835d0:	18800015 	stw	r2,0(r3)
   835d4:	10bfffc4 	addi	r2,r2,-1
   835d8:	dfc02117 	ldw	ra,132(sp)
   835dc:	df002017 	ldw	fp,128(sp)
   835e0:	ddc01f17 	ldw	r23,124(sp)
   835e4:	dd801e17 	ldw	r22,120(sp)
   835e8:	dd401d17 	ldw	r21,116(sp)
   835ec:	dd001c17 	ldw	r20,112(sp)
   835f0:	dcc01b17 	ldw	r19,108(sp)
   835f4:	dc801a17 	ldw	r18,104(sp)
   835f8:	dc401917 	ldw	r17,100(sp)
   835fc:	dc001817 	ldw	r16,96(sp)
   83600:	dec02204 	addi	sp,sp,136
   83604:	f800283a 	ret
   83608:	d8c02317 	ldw	r3,140(sp)
   8360c:	0089c3c4 	movi	r2,9999
   83610:	18800015 	stw	r2,0(r3)
   83614:	90017726 	beq	r18,zero,83bf4 <_dtoa_r+0x6dc>
   83618:	008002b4 	movhi	r2,10
   8361c:	10a0a104 	addi	r2,r2,-32124
   83620:	d9002517 	ldw	r4,148(sp)
   83624:	203fec26 	beq	r4,zero,835d8 <__alt_data_end+0xfffc4dd8>
   83628:	10c000c7 	ldb	r3,3(r2)
   8362c:	1801781e 	bne	r3,zero,83c10 <_dtoa_r+0x6f8>
   83630:	10c000c4 	addi	r3,r2,3
   83634:	d9802517 	ldw	r6,148(sp)
   83638:	30c00015 	stw	r3,0(r6)
   8363c:	003fe606 	br	835d8 <__alt_data_end+0xfffc4dd8>
   83640:	04e00034 	movhi	r19,32768
   83644:	9cffffc4 	addi	r19,r19,-1
   83648:	00800044 	movi	r2,1
   8364c:	8ce6703a 	and	r19,r17,r19
   83650:	80800015 	stw	r2,0(r16)
   83654:	9823883a 	mov	r17,r19
   83658:	003fcc06 	br	8358c <__alt_data_end+0xfffc4d8c>
   8365c:	d8800204 	addi	r2,sp,8
   83660:	d8800015 	stw	r2,0(sp)
   83664:	d9c00104 	addi	r7,sp,4
   83668:	900b883a 	mov	r5,r18
   8366c:	980d883a 	mov	r6,r19
   83670:	e009883a 	mov	r4,fp
   83674:	8820d53a 	srli	r16,r17,20
   83678:	00872fc0 	call	872fc <__d2b>
   8367c:	d8800915 	stw	r2,36(sp)
   83680:	8001651e 	bne	r16,zero,83c18 <_dtoa_r+0x700>
   83684:	dd800217 	ldw	r22,8(sp)
   83688:	dc000117 	ldw	r16,4(sp)
   8368c:	00800804 	movi	r2,32
   83690:	b421883a 	add	r16,r22,r16
   83694:	80c10c84 	addi	r3,r16,1074
   83698:	10c2d10e 	bge	r2,r3,841e0 <_dtoa_r+0xcc8>
   8369c:	00801004 	movi	r2,64
   836a0:	81010484 	addi	r4,r16,1042
   836a4:	10c7c83a 	sub	r3,r2,r3
   836a8:	9108d83a 	srl	r4,r18,r4
   836ac:	88e2983a 	sll	r17,r17,r3
   836b0:	2448b03a 	or	r4,r4,r17
   836b4:	008d84c0 	call	8d84c <__floatunsidf>
   836b8:	017f8434 	movhi	r5,65040
   836bc:	01800044 	movi	r6,1
   836c0:	1009883a 	mov	r4,r2
   836c4:	194b883a 	add	r5,r3,r5
   836c8:	843fffc4 	addi	r16,r16,-1
   836cc:	d9801115 	stw	r6,68(sp)
   836d0:	000d883a 	mov	r6,zero
   836d4:	01cffe34 	movhi	r7,16376
   836d8:	008cdf40 	call	8cdf4 <__subdf3>
   836dc:	0198dbf4 	movhi	r6,25455
   836e0:	01cff4f4 	movhi	r7,16339
   836e4:	3190d844 	addi	r6,r6,17249
   836e8:	39e1e9c4 	addi	r7,r7,-30809
   836ec:	1009883a 	mov	r4,r2
   836f0:	180b883a 	mov	r5,r3
   836f4:	008c5880 	call	8c588 <__muldf3>
   836f8:	01a2d874 	movhi	r6,35681
   836fc:	01cff1f4 	movhi	r7,16327
   83700:	31b22cc4 	addi	r6,r6,-14157
   83704:	39e28a04 	addi	r7,r7,-30168
   83708:	180b883a 	mov	r5,r3
   8370c:	1009883a 	mov	r4,r2
   83710:	008b0b40 	call	8b0b4 <__adddf3>
   83714:	8009883a 	mov	r4,r16
   83718:	1029883a 	mov	r20,r2
   8371c:	1823883a 	mov	r17,r3
   83720:	008d7700 	call	8d770 <__floatsidf>
   83724:	019427f4 	movhi	r6,20639
   83728:	01cff4f4 	movhi	r7,16339
   8372c:	319e7ec4 	addi	r6,r6,31227
   83730:	39d104c4 	addi	r7,r7,17427
   83734:	1009883a 	mov	r4,r2
   83738:	180b883a 	mov	r5,r3
   8373c:	008c5880 	call	8c588 <__muldf3>
   83740:	100d883a 	mov	r6,r2
   83744:	180f883a 	mov	r7,r3
   83748:	a009883a 	mov	r4,r20
   8374c:	880b883a 	mov	r5,r17
   83750:	008b0b40 	call	8b0b4 <__adddf3>
   83754:	1009883a 	mov	r4,r2
   83758:	180b883a 	mov	r5,r3
   8375c:	1029883a 	mov	r20,r2
   83760:	1823883a 	mov	r17,r3
   83764:	008d6f00 	call	8d6f0 <__fixdfsi>
   83768:	000d883a 	mov	r6,zero
   8376c:	000f883a 	mov	r7,zero
   83770:	a009883a 	mov	r4,r20
   83774:	880b883a 	mov	r5,r17
   83778:	d8800515 	stw	r2,20(sp)
   8377c:	008c4940 	call	8c494 <__ledf2>
   83780:	10028716 	blt	r2,zero,841a0 <_dtoa_r+0xc88>
   83784:	d8c00517 	ldw	r3,20(sp)
   83788:	00800584 	movi	r2,22
   8378c:	10c27536 	bltu	r2,r3,84164 <_dtoa_r+0xc4c>
   83790:	180490fa 	slli	r2,r3,3
   83794:	00c002b4 	movhi	r3,10
   83798:	18e0bd04 	addi	r3,r3,-32012
   8379c:	1885883a 	add	r2,r3,r2
   837a0:	11000017 	ldw	r4,0(r2)
   837a4:	11400117 	ldw	r5,4(r2)
   837a8:	900d883a 	mov	r6,r18
   837ac:	980f883a 	mov	r7,r19
   837b0:	008c3b80 	call	8c3b8 <__gedf2>
   837b4:	00828d0e 	bge	zero,r2,841ec <_dtoa_r+0xcd4>
   837b8:	d9000517 	ldw	r4,20(sp)
   837bc:	d8000e15 	stw	zero,56(sp)
   837c0:	213fffc4 	addi	r4,r4,-1
   837c4:	d9000515 	stw	r4,20(sp)
   837c8:	b42dc83a 	sub	r22,r22,r16
   837cc:	b5bfffc4 	addi	r22,r22,-1
   837d0:	b0026f16 	blt	r22,zero,84190 <_dtoa_r+0xc78>
   837d4:	d8000815 	stw	zero,32(sp)
   837d8:	d9c00517 	ldw	r7,20(sp)
   837dc:	38026416 	blt	r7,zero,84170 <_dtoa_r+0xc58>
   837e0:	b1ed883a 	add	r22,r22,r7
   837e4:	d9c00d15 	stw	r7,52(sp)
   837e8:	d8000a15 	stw	zero,40(sp)
   837ec:	d9800317 	ldw	r6,12(sp)
   837f0:	00800244 	movi	r2,9
   837f4:	11811436 	bltu	r2,r6,83c48 <_dtoa_r+0x730>
   837f8:	00800144 	movi	r2,5
   837fc:	1184e10e 	bge	r2,r6,84b84 <_dtoa_r+0x166c>
   83800:	31bfff04 	addi	r6,r6,-4
   83804:	d9800315 	stw	r6,12(sp)
   83808:	0023883a 	mov	r17,zero
   8380c:	d9800317 	ldw	r6,12(sp)
   83810:	008000c4 	movi	r2,3
   83814:	30836726 	beq	r6,r2,845b4 <_dtoa_r+0x109c>
   83818:	1183410e 	bge	r2,r6,84520 <_dtoa_r+0x1008>
   8381c:	d9c00317 	ldw	r7,12(sp)
   83820:	00800104 	movi	r2,4
   83824:	38827c26 	beq	r7,r2,84218 <_dtoa_r+0xd00>
   83828:	00800144 	movi	r2,5
   8382c:	3884c41e 	bne	r7,r2,84b40 <_dtoa_r+0x1628>
   83830:	00800044 	movi	r2,1
   83834:	d8800b15 	stw	r2,44(sp)
   83838:	d8c00517 	ldw	r3,20(sp)
   8383c:	d9002217 	ldw	r4,136(sp)
   83840:	1907883a 	add	r3,r3,r4
   83844:	19800044 	addi	r6,r3,1
   83848:	d8c00c15 	stw	r3,48(sp)
   8384c:	d9800615 	stw	r6,24(sp)
   83850:	0183a40e 	bge	zero,r6,846e4 <_dtoa_r+0x11cc>
   83854:	d9800617 	ldw	r6,24(sp)
   83858:	3021883a 	mov	r16,r6
   8385c:	e0001115 	stw	zero,68(fp)
   83860:	008005c4 	movi	r2,23
   83864:	1184c92e 	bgeu	r2,r6,84b8c <_dtoa_r+0x1674>
   83868:	00c00044 	movi	r3,1
   8386c:	00800104 	movi	r2,4
   83870:	1085883a 	add	r2,r2,r2
   83874:	11000504 	addi	r4,r2,20
   83878:	180b883a 	mov	r5,r3
   8387c:	18c00044 	addi	r3,r3,1
   83880:	313ffb2e 	bgeu	r6,r4,83870 <__alt_data_end+0xfffc5070>
   83884:	e1401115 	stw	r5,68(fp)
   83888:	e009883a 	mov	r4,fp
   8388c:	00865ac0 	call	865ac <_Balloc>
   83890:	d8800715 	stw	r2,28(sp)
   83894:	e0801015 	stw	r2,64(fp)
   83898:	00800384 	movi	r2,14
   8389c:	1400f736 	bltu	r2,r16,83c7c <_dtoa_r+0x764>
   838a0:	8800f626 	beq	r17,zero,83c7c <_dtoa_r+0x764>
   838a4:	d9c00517 	ldw	r7,20(sp)
   838a8:	01c39a0e 	bge	zero,r7,84714 <_dtoa_r+0x11fc>
   838ac:	388003cc 	andi	r2,r7,15
   838b0:	100490fa 	slli	r2,r2,3
   838b4:	382bd13a 	srai	r21,r7,4
   838b8:	00c002b4 	movhi	r3,10
   838bc:	18e0bd04 	addi	r3,r3,-32012
   838c0:	1885883a 	add	r2,r3,r2
   838c4:	a8c0040c 	andi	r3,r21,16
   838c8:	12400017 	ldw	r9,0(r2)
   838cc:	12000117 	ldw	r8,4(r2)
   838d0:	18037926 	beq	r3,zero,846b8 <_dtoa_r+0x11a0>
   838d4:	008002b4 	movhi	r2,10
   838d8:	10a0b304 	addi	r2,r2,-32052
   838dc:	11800817 	ldw	r6,32(r2)
   838e0:	11c00917 	ldw	r7,36(r2)
   838e4:	9009883a 	mov	r4,r18
   838e8:	980b883a 	mov	r5,r19
   838ec:	da001715 	stw	r8,92(sp)
   838f0:	da401615 	stw	r9,88(sp)
   838f4:	008b9600 	call	8b960 <__divdf3>
   838f8:	da001717 	ldw	r8,92(sp)
   838fc:	da401617 	ldw	r9,88(sp)
   83900:	ad4003cc 	andi	r21,r21,15
   83904:	040000c4 	movi	r16,3
   83908:	1023883a 	mov	r17,r2
   8390c:	1829883a 	mov	r20,r3
   83910:	a8001126 	beq	r21,zero,83958 <_dtoa_r+0x440>
   83914:	05c002b4 	movhi	r23,10
   83918:	bde0b304 	addi	r23,r23,-32052
   8391c:	4805883a 	mov	r2,r9
   83920:	4007883a 	mov	r3,r8
   83924:	a980004c 	andi	r6,r21,1
   83928:	1009883a 	mov	r4,r2
   8392c:	a82bd07a 	srai	r21,r21,1
   83930:	180b883a 	mov	r5,r3
   83934:	30000426 	beq	r6,zero,83948 <_dtoa_r+0x430>
   83938:	b9800017 	ldw	r6,0(r23)
   8393c:	b9c00117 	ldw	r7,4(r23)
   83940:	84000044 	addi	r16,r16,1
   83944:	008c5880 	call	8c588 <__muldf3>
   83948:	bdc00204 	addi	r23,r23,8
   8394c:	a83ff51e 	bne	r21,zero,83924 <__alt_data_end+0xfffc5124>
   83950:	1013883a 	mov	r9,r2
   83954:	1811883a 	mov	r8,r3
   83958:	480d883a 	mov	r6,r9
   8395c:	400f883a 	mov	r7,r8
   83960:	8809883a 	mov	r4,r17
   83964:	a00b883a 	mov	r5,r20
   83968:	008b9600 	call	8b960 <__divdf3>
   8396c:	d8800f15 	stw	r2,60(sp)
   83970:	d8c01015 	stw	r3,64(sp)
   83974:	d8c00e17 	ldw	r3,56(sp)
   83978:	18000626 	beq	r3,zero,83994 <_dtoa_r+0x47c>
   8397c:	d9000f17 	ldw	r4,60(sp)
   83980:	d9401017 	ldw	r5,64(sp)
   83984:	000d883a 	mov	r6,zero
   83988:	01cffc34 	movhi	r7,16368
   8398c:	008c4940 	call	8c494 <__ledf2>
   83990:	10040b16 	blt	r2,zero,849c0 <_dtoa_r+0x14a8>
   83994:	8009883a 	mov	r4,r16
   83998:	008d7700 	call	8d770 <__floatsidf>
   8399c:	d9800f17 	ldw	r6,60(sp)
   839a0:	d9c01017 	ldw	r7,64(sp)
   839a4:	1009883a 	mov	r4,r2
   839a8:	180b883a 	mov	r5,r3
   839ac:	008c5880 	call	8c588 <__muldf3>
   839b0:	000d883a 	mov	r6,zero
   839b4:	01d00734 	movhi	r7,16412
   839b8:	1009883a 	mov	r4,r2
   839bc:	180b883a 	mov	r5,r3
   839c0:	008b0b40 	call	8b0b4 <__adddf3>
   839c4:	1021883a 	mov	r16,r2
   839c8:	d8800617 	ldw	r2,24(sp)
   839cc:	047f3034 	movhi	r17,64704
   839d0:	1c63883a 	add	r17,r3,r17
   839d4:	10031826 	beq	r2,zero,84638 <_dtoa_r+0x1120>
   839d8:	d8c00517 	ldw	r3,20(sp)
   839dc:	db000617 	ldw	r12,24(sp)
   839e0:	d8c01315 	stw	r3,76(sp)
   839e4:	d9000b17 	ldw	r4,44(sp)
   839e8:	20038f26 	beq	r4,zero,84828 <_dtoa_r+0x1310>
   839ec:	60bfffc4 	addi	r2,r12,-1
   839f0:	100490fa 	slli	r2,r2,3
   839f4:	00c002b4 	movhi	r3,10
   839f8:	18e0bd04 	addi	r3,r3,-32012
   839fc:	1885883a 	add	r2,r3,r2
   83a00:	11800017 	ldw	r6,0(r2)
   83a04:	11c00117 	ldw	r7,4(r2)
   83a08:	d8800717 	ldw	r2,28(sp)
   83a0c:	0009883a 	mov	r4,zero
   83a10:	014ff834 	movhi	r5,16352
   83a14:	db001615 	stw	r12,88(sp)
   83a18:	15c00044 	addi	r23,r2,1
   83a1c:	008b9600 	call	8b960 <__divdf3>
   83a20:	800d883a 	mov	r6,r16
   83a24:	880f883a 	mov	r7,r17
   83a28:	1009883a 	mov	r4,r2
   83a2c:	180b883a 	mov	r5,r3
   83a30:	008cdf40 	call	8cdf4 <__subdf3>
   83a34:	d9401017 	ldw	r5,64(sp)
   83a38:	d9000f17 	ldw	r4,60(sp)
   83a3c:	102b883a 	mov	r21,r2
   83a40:	d8c01215 	stw	r3,72(sp)
   83a44:	008d6f00 	call	8d6f0 <__fixdfsi>
   83a48:	1009883a 	mov	r4,r2
   83a4c:	1029883a 	mov	r20,r2
   83a50:	008d7700 	call	8d770 <__floatsidf>
   83a54:	d9000f17 	ldw	r4,60(sp)
   83a58:	d9401017 	ldw	r5,64(sp)
   83a5c:	100d883a 	mov	r6,r2
   83a60:	180f883a 	mov	r7,r3
   83a64:	008cdf40 	call	8cdf4 <__subdf3>
   83a68:	1823883a 	mov	r17,r3
   83a6c:	d8c00717 	ldw	r3,28(sp)
   83a70:	d9401217 	ldw	r5,72(sp)
   83a74:	a2000c04 	addi	r8,r20,48
   83a78:	1021883a 	mov	r16,r2
   83a7c:	1a000005 	stb	r8,0(r3)
   83a80:	800d883a 	mov	r6,r16
   83a84:	880f883a 	mov	r7,r17
   83a88:	a809883a 	mov	r4,r21
   83a8c:	4029883a 	mov	r20,r8
   83a90:	008c3b80 	call	8c3b8 <__gedf2>
   83a94:	00841d16 	blt	zero,r2,84b0c <_dtoa_r+0x15f4>
   83a98:	800d883a 	mov	r6,r16
   83a9c:	880f883a 	mov	r7,r17
   83aa0:	0009883a 	mov	r4,zero
   83aa4:	014ffc34 	movhi	r5,16368
   83aa8:	008cdf40 	call	8cdf4 <__subdf3>
   83aac:	d9401217 	ldw	r5,72(sp)
   83ab0:	100d883a 	mov	r6,r2
   83ab4:	180f883a 	mov	r7,r3
   83ab8:	a809883a 	mov	r4,r21
   83abc:	008c3b80 	call	8c3b8 <__gedf2>
   83ac0:	db001617 	ldw	r12,88(sp)
   83ac4:	00840e16 	blt	zero,r2,84b00 <_dtoa_r+0x15e8>
   83ac8:	00800044 	movi	r2,1
   83acc:	13006b0e 	bge	r2,r12,83c7c <_dtoa_r+0x764>
   83ad0:	d9000717 	ldw	r4,28(sp)
   83ad4:	dd800f15 	stw	r22,60(sp)
   83ad8:	dcc01015 	stw	r19,64(sp)
   83adc:	2319883a 	add	r12,r4,r12
   83ae0:	dcc01217 	ldw	r19,72(sp)
   83ae4:	602d883a 	mov	r22,r12
   83ae8:	dc801215 	stw	r18,72(sp)
   83aec:	b825883a 	mov	r18,r23
   83af0:	00000906 	br	83b18 <_dtoa_r+0x600>
   83af4:	008cdf40 	call	8cdf4 <__subdf3>
   83af8:	a80d883a 	mov	r6,r21
   83afc:	980f883a 	mov	r7,r19
   83b00:	1009883a 	mov	r4,r2
   83b04:	180b883a 	mov	r5,r3
   83b08:	008c4940 	call	8c494 <__ledf2>
   83b0c:	1003e816 	blt	r2,zero,84ab0 <_dtoa_r+0x1598>
   83b10:	b825883a 	mov	r18,r23
   83b14:	bd83e926 	beq	r23,r22,84abc <_dtoa_r+0x15a4>
   83b18:	a809883a 	mov	r4,r21
   83b1c:	980b883a 	mov	r5,r19
   83b20:	000d883a 	mov	r6,zero
   83b24:	01d00934 	movhi	r7,16420
   83b28:	008c5880 	call	8c588 <__muldf3>
   83b2c:	000d883a 	mov	r6,zero
   83b30:	01d00934 	movhi	r7,16420
   83b34:	8009883a 	mov	r4,r16
   83b38:	880b883a 	mov	r5,r17
   83b3c:	102b883a 	mov	r21,r2
   83b40:	1827883a 	mov	r19,r3
   83b44:	008c5880 	call	8c588 <__muldf3>
   83b48:	180b883a 	mov	r5,r3
   83b4c:	1009883a 	mov	r4,r2
   83b50:	1821883a 	mov	r16,r3
   83b54:	1023883a 	mov	r17,r2
   83b58:	008d6f00 	call	8d6f0 <__fixdfsi>
   83b5c:	1009883a 	mov	r4,r2
   83b60:	1029883a 	mov	r20,r2
   83b64:	008d7700 	call	8d770 <__floatsidf>
   83b68:	8809883a 	mov	r4,r17
   83b6c:	800b883a 	mov	r5,r16
   83b70:	100d883a 	mov	r6,r2
   83b74:	180f883a 	mov	r7,r3
   83b78:	008cdf40 	call	8cdf4 <__subdf3>
   83b7c:	a5000c04 	addi	r20,r20,48
   83b80:	a80d883a 	mov	r6,r21
   83b84:	980f883a 	mov	r7,r19
   83b88:	1009883a 	mov	r4,r2
   83b8c:	180b883a 	mov	r5,r3
   83b90:	95000005 	stb	r20,0(r18)
   83b94:	1021883a 	mov	r16,r2
   83b98:	1823883a 	mov	r17,r3
   83b9c:	008c4940 	call	8c494 <__ledf2>
   83ba0:	bdc00044 	addi	r23,r23,1
   83ba4:	800d883a 	mov	r6,r16
   83ba8:	880f883a 	mov	r7,r17
   83bac:	0009883a 	mov	r4,zero
   83bb0:	014ffc34 	movhi	r5,16368
   83bb4:	103fcf0e 	bge	r2,zero,83af4 <__alt_data_end+0xfffc52f4>
   83bb8:	d8c01317 	ldw	r3,76(sp)
   83bbc:	d8c00515 	stw	r3,20(sp)
   83bc0:	d9400917 	ldw	r5,36(sp)
   83bc4:	e009883a 	mov	r4,fp
   83bc8:	00866540 	call	86654 <_Bfree>
   83bcc:	d9000517 	ldw	r4,20(sp)
   83bd0:	d9802317 	ldw	r6,140(sp)
   83bd4:	d9c02517 	ldw	r7,148(sp)
   83bd8:	b8000005 	stb	zero,0(r23)
   83bdc:	20800044 	addi	r2,r4,1
   83be0:	30800015 	stw	r2,0(r6)
   83be4:	3802aa26 	beq	r7,zero,84690 <_dtoa_r+0x1178>
   83be8:	3dc00015 	stw	r23,0(r7)
   83bec:	d8800717 	ldw	r2,28(sp)
   83bf0:	003e7906 	br	835d8 <__alt_data_end+0xfffc4dd8>
   83bf4:	00800434 	movhi	r2,16
   83bf8:	10bfffc4 	addi	r2,r2,-1
   83bfc:	88a2703a 	and	r17,r17,r2
   83c00:	883e851e 	bne	r17,zero,83618 <__alt_data_end+0xfffc4e18>
   83c04:	008002b4 	movhi	r2,10
   83c08:	10a09e04 	addi	r2,r2,-32136
   83c0c:	003e8406 	br	83620 <__alt_data_end+0xfffc4e20>
   83c10:	10c00204 	addi	r3,r2,8
   83c14:	003e8706 	br	83634 <__alt_data_end+0xfffc4e34>
   83c18:	01400434 	movhi	r5,16
   83c1c:	297fffc4 	addi	r5,r5,-1
   83c20:	994a703a 	and	r5,r19,r5
   83c24:	9009883a 	mov	r4,r18
   83c28:	843f0044 	addi	r16,r16,-1023
   83c2c:	294ffc34 	orhi	r5,r5,16368
   83c30:	dd800217 	ldw	r22,8(sp)
   83c34:	d8001115 	stw	zero,68(sp)
   83c38:	003ea506 	br	836d0 <__alt_data_end+0xfffc4ed0>
   83c3c:	008002b4 	movhi	r2,10
   83c40:	10a09504 	addi	r2,r2,-32172
   83c44:	003e6406 	br	835d8 <__alt_data_end+0xfffc4dd8>
   83c48:	e0001115 	stw	zero,68(fp)
   83c4c:	000b883a 	mov	r5,zero
   83c50:	e009883a 	mov	r4,fp
   83c54:	00865ac0 	call	865ac <_Balloc>
   83c58:	01bfffc4 	movi	r6,-1
   83c5c:	01c00044 	movi	r7,1
   83c60:	d8800715 	stw	r2,28(sp)
   83c64:	d9800c15 	stw	r6,48(sp)
   83c68:	e0801015 	stw	r2,64(fp)
   83c6c:	d8000315 	stw	zero,12(sp)
   83c70:	d9c00b15 	stw	r7,44(sp)
   83c74:	d9800615 	stw	r6,24(sp)
   83c78:	d8002215 	stw	zero,136(sp)
   83c7c:	d8800117 	ldw	r2,4(sp)
   83c80:	10008916 	blt	r2,zero,83ea8 <_dtoa_r+0x990>
   83c84:	d9000517 	ldw	r4,20(sp)
   83c88:	00c00384 	movi	r3,14
   83c8c:	19008616 	blt	r3,r4,83ea8 <_dtoa_r+0x990>
   83c90:	200490fa 	slli	r2,r4,3
   83c94:	00c002b4 	movhi	r3,10
   83c98:	d9802217 	ldw	r6,136(sp)
   83c9c:	18e0bd04 	addi	r3,r3,-32012
   83ca0:	1885883a 	add	r2,r3,r2
   83ca4:	14000017 	ldw	r16,0(r2)
   83ca8:	14400117 	ldw	r17,4(r2)
   83cac:	30016316 	blt	r6,zero,8423c <_dtoa_r+0xd24>
   83cb0:	800d883a 	mov	r6,r16
   83cb4:	880f883a 	mov	r7,r17
   83cb8:	9009883a 	mov	r4,r18
   83cbc:	980b883a 	mov	r5,r19
   83cc0:	008b9600 	call	8b960 <__divdf3>
   83cc4:	180b883a 	mov	r5,r3
   83cc8:	1009883a 	mov	r4,r2
   83ccc:	008d6f00 	call	8d6f0 <__fixdfsi>
   83cd0:	1009883a 	mov	r4,r2
   83cd4:	102b883a 	mov	r21,r2
   83cd8:	008d7700 	call	8d770 <__floatsidf>
   83cdc:	800d883a 	mov	r6,r16
   83ce0:	880f883a 	mov	r7,r17
   83ce4:	1009883a 	mov	r4,r2
   83ce8:	180b883a 	mov	r5,r3
   83cec:	008c5880 	call	8c588 <__muldf3>
   83cf0:	100d883a 	mov	r6,r2
   83cf4:	180f883a 	mov	r7,r3
   83cf8:	9009883a 	mov	r4,r18
   83cfc:	980b883a 	mov	r5,r19
   83d00:	008cdf40 	call	8cdf4 <__subdf3>
   83d04:	d9c00717 	ldw	r7,28(sp)
   83d08:	1009883a 	mov	r4,r2
   83d0c:	a8800c04 	addi	r2,r21,48
   83d10:	38800005 	stb	r2,0(r7)
   83d14:	3dc00044 	addi	r23,r7,1
   83d18:	d9c00617 	ldw	r7,24(sp)
   83d1c:	01800044 	movi	r6,1
   83d20:	180b883a 	mov	r5,r3
   83d24:	2005883a 	mov	r2,r4
   83d28:	39803826 	beq	r7,r6,83e0c <_dtoa_r+0x8f4>
   83d2c:	000d883a 	mov	r6,zero
   83d30:	01d00934 	movhi	r7,16420
   83d34:	008c5880 	call	8c588 <__muldf3>
   83d38:	000d883a 	mov	r6,zero
   83d3c:	000f883a 	mov	r7,zero
   83d40:	1009883a 	mov	r4,r2
   83d44:	180b883a 	mov	r5,r3
   83d48:	1025883a 	mov	r18,r2
   83d4c:	1827883a 	mov	r19,r3
   83d50:	008c3300 	call	8c330 <__eqdf2>
   83d54:	103f9a26 	beq	r2,zero,83bc0 <__alt_data_end+0xfffc53c0>
   83d58:	d9c00617 	ldw	r7,24(sp)
   83d5c:	d8c00717 	ldw	r3,28(sp)
   83d60:	b829883a 	mov	r20,r23
   83d64:	38bfffc4 	addi	r2,r7,-1
   83d68:	18ad883a 	add	r22,r3,r2
   83d6c:	00000a06 	br	83d98 <_dtoa_r+0x880>
   83d70:	008c5880 	call	8c588 <__muldf3>
   83d74:	000d883a 	mov	r6,zero
   83d78:	000f883a 	mov	r7,zero
   83d7c:	1009883a 	mov	r4,r2
   83d80:	180b883a 	mov	r5,r3
   83d84:	1025883a 	mov	r18,r2
   83d88:	1827883a 	mov	r19,r3
   83d8c:	b829883a 	mov	r20,r23
   83d90:	008c3300 	call	8c330 <__eqdf2>
   83d94:	103f8a26 	beq	r2,zero,83bc0 <__alt_data_end+0xfffc53c0>
   83d98:	800d883a 	mov	r6,r16
   83d9c:	880f883a 	mov	r7,r17
   83da0:	9009883a 	mov	r4,r18
   83da4:	980b883a 	mov	r5,r19
   83da8:	008b9600 	call	8b960 <__divdf3>
   83dac:	180b883a 	mov	r5,r3
   83db0:	1009883a 	mov	r4,r2
   83db4:	008d6f00 	call	8d6f0 <__fixdfsi>
   83db8:	1009883a 	mov	r4,r2
   83dbc:	102b883a 	mov	r21,r2
   83dc0:	008d7700 	call	8d770 <__floatsidf>
   83dc4:	800d883a 	mov	r6,r16
   83dc8:	880f883a 	mov	r7,r17
   83dcc:	1009883a 	mov	r4,r2
   83dd0:	180b883a 	mov	r5,r3
   83dd4:	008c5880 	call	8c588 <__muldf3>
   83dd8:	100d883a 	mov	r6,r2
   83ddc:	180f883a 	mov	r7,r3
   83de0:	9009883a 	mov	r4,r18
   83de4:	980b883a 	mov	r5,r19
   83de8:	008cdf40 	call	8cdf4 <__subdf3>
   83dec:	aa000c04 	addi	r8,r21,48
   83df0:	a2000005 	stb	r8,0(r20)
   83df4:	000d883a 	mov	r6,zero
   83df8:	01d00934 	movhi	r7,16420
   83dfc:	1009883a 	mov	r4,r2
   83e00:	180b883a 	mov	r5,r3
   83e04:	a5c00044 	addi	r23,r20,1
   83e08:	b53fd91e 	bne	r22,r20,83d70 <__alt_data_end+0xfffc5570>
   83e0c:	100d883a 	mov	r6,r2
   83e10:	180f883a 	mov	r7,r3
   83e14:	1009883a 	mov	r4,r2
   83e18:	180b883a 	mov	r5,r3
   83e1c:	008b0b40 	call	8b0b4 <__adddf3>
   83e20:	100d883a 	mov	r6,r2
   83e24:	180f883a 	mov	r7,r3
   83e28:	8009883a 	mov	r4,r16
   83e2c:	880b883a 	mov	r5,r17
   83e30:	1027883a 	mov	r19,r2
   83e34:	1825883a 	mov	r18,r3
   83e38:	008c4940 	call	8c494 <__ledf2>
   83e3c:	10000816 	blt	r2,zero,83e60 <_dtoa_r+0x948>
   83e40:	980d883a 	mov	r6,r19
   83e44:	900f883a 	mov	r7,r18
   83e48:	8009883a 	mov	r4,r16
   83e4c:	880b883a 	mov	r5,r17
   83e50:	008c3300 	call	8c330 <__eqdf2>
   83e54:	103f5a1e 	bne	r2,zero,83bc0 <__alt_data_end+0xfffc53c0>
   83e58:	ad40004c 	andi	r21,r21,1
   83e5c:	a83f5826 	beq	r21,zero,83bc0 <__alt_data_end+0xfffc53c0>
   83e60:	bd3fffc3 	ldbu	r20,-1(r23)
   83e64:	b8bfffc4 	addi	r2,r23,-1
   83e68:	1007883a 	mov	r3,r2
   83e6c:	01400e44 	movi	r5,57
   83e70:	d9800717 	ldw	r6,28(sp)
   83e74:	00000506 	br	83e8c <_dtoa_r+0x974>
   83e78:	18ffffc4 	addi	r3,r3,-1
   83e7c:	11824726 	beq	r2,r6,8479c <_dtoa_r+0x1284>
   83e80:	1d000003 	ldbu	r20,0(r3)
   83e84:	102f883a 	mov	r23,r2
   83e88:	10bfffc4 	addi	r2,r2,-1
   83e8c:	a1003fcc 	andi	r4,r20,255
   83e90:	2100201c 	xori	r4,r4,128
   83e94:	213fe004 	addi	r4,r4,-128
   83e98:	217ff726 	beq	r4,r5,83e78 <__alt_data_end+0xfffc5678>
   83e9c:	a2000044 	addi	r8,r20,1
   83ea0:	12000005 	stb	r8,0(r2)
   83ea4:	003f4606 	br	83bc0 <__alt_data_end+0xfffc53c0>
   83ea8:	d9000b17 	ldw	r4,44(sp)
   83eac:	2000c826 	beq	r4,zero,841d0 <_dtoa_r+0xcb8>
   83eb0:	d9800317 	ldw	r6,12(sp)
   83eb4:	00c00044 	movi	r3,1
   83eb8:	1980f90e 	bge	r3,r6,842a0 <_dtoa_r+0xd88>
   83ebc:	d8800617 	ldw	r2,24(sp)
   83ec0:	d8c00a17 	ldw	r3,40(sp)
   83ec4:	157fffc4 	addi	r21,r2,-1
   83ec8:	1d41f316 	blt	r3,r21,84698 <_dtoa_r+0x1180>
   83ecc:	1d6bc83a 	sub	r21,r3,r21
   83ed0:	d9c00617 	ldw	r7,24(sp)
   83ed4:	3802aa16 	blt	r7,zero,84980 <_dtoa_r+0x1468>
   83ed8:	dd000817 	ldw	r20,32(sp)
   83edc:	d8800617 	ldw	r2,24(sp)
   83ee0:	d8c00817 	ldw	r3,32(sp)
   83ee4:	01400044 	movi	r5,1
   83ee8:	e009883a 	mov	r4,fp
   83eec:	1887883a 	add	r3,r3,r2
   83ef0:	d8c00815 	stw	r3,32(sp)
   83ef4:	b0ad883a 	add	r22,r22,r2
   83ef8:	00869e00 	call	869e0 <__i2b>
   83efc:	1023883a 	mov	r17,r2
   83f00:	a0000826 	beq	r20,zero,83f24 <_dtoa_r+0xa0c>
   83f04:	0580070e 	bge	zero,r22,83f24 <_dtoa_r+0xa0c>
   83f08:	a005883a 	mov	r2,r20
   83f0c:	b500b916 	blt	r22,r20,841f4 <_dtoa_r+0xcdc>
   83f10:	d9000817 	ldw	r4,32(sp)
   83f14:	a0a9c83a 	sub	r20,r20,r2
   83f18:	b0adc83a 	sub	r22,r22,r2
   83f1c:	2089c83a 	sub	r4,r4,r2
   83f20:	d9000815 	stw	r4,32(sp)
   83f24:	d9800a17 	ldw	r6,40(sp)
   83f28:	0181810e 	bge	zero,r6,84530 <_dtoa_r+0x1018>
   83f2c:	d9c00b17 	ldw	r7,44(sp)
   83f30:	3800b326 	beq	r7,zero,84200 <_dtoa_r+0xce8>
   83f34:	a800b226 	beq	r21,zero,84200 <_dtoa_r+0xce8>
   83f38:	880b883a 	mov	r5,r17
   83f3c:	a80d883a 	mov	r6,r21
   83f40:	e009883a 	mov	r4,fp
   83f44:	0086ca80 	call	86ca8 <__pow5mult>
   83f48:	d9800917 	ldw	r6,36(sp)
   83f4c:	100b883a 	mov	r5,r2
   83f50:	e009883a 	mov	r4,fp
   83f54:	1023883a 	mov	r17,r2
   83f58:	0086a1c0 	call	86a1c <__multiply>
   83f5c:	1021883a 	mov	r16,r2
   83f60:	d8800a17 	ldw	r2,40(sp)
   83f64:	d9400917 	ldw	r5,36(sp)
   83f68:	e009883a 	mov	r4,fp
   83f6c:	1545c83a 	sub	r2,r2,r21
   83f70:	d8800a15 	stw	r2,40(sp)
   83f74:	00866540 	call	86654 <_Bfree>
   83f78:	d8c00a17 	ldw	r3,40(sp)
   83f7c:	18009f1e 	bne	r3,zero,841fc <_dtoa_r+0xce4>
   83f80:	05c00044 	movi	r23,1
   83f84:	e009883a 	mov	r4,fp
   83f88:	b80b883a 	mov	r5,r23
   83f8c:	00869e00 	call	869e0 <__i2b>
   83f90:	d9000d17 	ldw	r4,52(sp)
   83f94:	102b883a 	mov	r21,r2
   83f98:	2000ce26 	beq	r4,zero,842d4 <_dtoa_r+0xdbc>
   83f9c:	200d883a 	mov	r6,r4
   83fa0:	100b883a 	mov	r5,r2
   83fa4:	e009883a 	mov	r4,fp
   83fa8:	0086ca80 	call	86ca8 <__pow5mult>
   83fac:	d9800317 	ldw	r6,12(sp)
   83fb0:	102b883a 	mov	r21,r2
   83fb4:	b981810e 	bge	r23,r6,845bc <_dtoa_r+0x10a4>
   83fb8:	0027883a 	mov	r19,zero
   83fbc:	a8800417 	ldw	r2,16(r21)
   83fc0:	05c00804 	movi	r23,32
   83fc4:	10800104 	addi	r2,r2,4
   83fc8:	1085883a 	add	r2,r2,r2
   83fcc:	1085883a 	add	r2,r2,r2
   83fd0:	a885883a 	add	r2,r21,r2
   83fd4:	11000017 	ldw	r4,0(r2)
   83fd8:	00868c80 	call	868c8 <__hi0bits>
   83fdc:	b885c83a 	sub	r2,r23,r2
   83fe0:	1585883a 	add	r2,r2,r22
   83fe4:	108007cc 	andi	r2,r2,31
   83fe8:	1000b326 	beq	r2,zero,842b8 <_dtoa_r+0xda0>
   83fec:	00c00804 	movi	r3,32
   83ff0:	1887c83a 	sub	r3,r3,r2
   83ff4:	01000104 	movi	r4,4
   83ff8:	20c2cd0e 	bge	r4,r3,84b30 <_dtoa_r+0x1618>
   83ffc:	00c00704 	movi	r3,28
   84000:	1885c83a 	sub	r2,r3,r2
   84004:	d8c00817 	ldw	r3,32(sp)
   84008:	a0a9883a 	add	r20,r20,r2
   8400c:	b0ad883a 	add	r22,r22,r2
   84010:	1887883a 	add	r3,r3,r2
   84014:	d8c00815 	stw	r3,32(sp)
   84018:	d9800817 	ldw	r6,32(sp)
   8401c:	0180040e 	bge	zero,r6,84030 <_dtoa_r+0xb18>
   84020:	800b883a 	mov	r5,r16
   84024:	e009883a 	mov	r4,fp
   84028:	0086de80 	call	86de8 <__lshift>
   8402c:	1021883a 	mov	r16,r2
   84030:	0580050e 	bge	zero,r22,84048 <_dtoa_r+0xb30>
   84034:	a80b883a 	mov	r5,r21
   84038:	b00d883a 	mov	r6,r22
   8403c:	e009883a 	mov	r4,fp
   84040:	0086de80 	call	86de8 <__lshift>
   84044:	102b883a 	mov	r21,r2
   84048:	d9c00e17 	ldw	r7,56(sp)
   8404c:	3801211e 	bne	r7,zero,844d4 <_dtoa_r+0xfbc>
   84050:	d9800617 	ldw	r6,24(sp)
   84054:	0181380e 	bge	zero,r6,84538 <_dtoa_r+0x1020>
   84058:	d8c00b17 	ldw	r3,44(sp)
   8405c:	1800ab1e 	bne	r3,zero,8430c <_dtoa_r+0xdf4>
   84060:	dc800717 	ldw	r18,28(sp)
   84064:	dcc00617 	ldw	r19,24(sp)
   84068:	9029883a 	mov	r20,r18
   8406c:	00000206 	br	84078 <_dtoa_r+0xb60>
   84070:	008667c0 	call	8667c <__multadd>
   84074:	1021883a 	mov	r16,r2
   84078:	a80b883a 	mov	r5,r21
   8407c:	8009883a 	mov	r4,r16
   84080:	00832f00 	call	832f0 <quorem>
   84084:	10800c04 	addi	r2,r2,48
   84088:	90800005 	stb	r2,0(r18)
   8408c:	94800044 	addi	r18,r18,1
   84090:	9507c83a 	sub	r3,r18,r20
   84094:	000f883a 	mov	r7,zero
   84098:	01800284 	movi	r6,10
   8409c:	800b883a 	mov	r5,r16
   840a0:	e009883a 	mov	r4,fp
   840a4:	1cfff216 	blt	r3,r19,84070 <__alt_data_end+0xfffc5870>
   840a8:	1011883a 	mov	r8,r2
   840ac:	d8800617 	ldw	r2,24(sp)
   840b0:	0082370e 	bge	zero,r2,84990 <_dtoa_r+0x1478>
   840b4:	d9000717 	ldw	r4,28(sp)
   840b8:	0025883a 	mov	r18,zero
   840bc:	20af883a 	add	r23,r4,r2
   840c0:	01800044 	movi	r6,1
   840c4:	800b883a 	mov	r5,r16
   840c8:	e009883a 	mov	r4,fp
   840cc:	da001715 	stw	r8,92(sp)
   840d0:	0086de80 	call	86de8 <__lshift>
   840d4:	a80b883a 	mov	r5,r21
   840d8:	1009883a 	mov	r4,r2
   840dc:	d8800915 	stw	r2,36(sp)
   840e0:	0086f300 	call	86f30 <__mcmp>
   840e4:	da001717 	ldw	r8,92(sp)
   840e8:	0081800e 	bge	zero,r2,846ec <_dtoa_r+0x11d4>
   840ec:	b93fffc3 	ldbu	r4,-1(r23)
   840f0:	b8bfffc4 	addi	r2,r23,-1
   840f4:	1007883a 	mov	r3,r2
   840f8:	01800e44 	movi	r6,57
   840fc:	d9c00717 	ldw	r7,28(sp)
   84100:	00000506 	br	84118 <_dtoa_r+0xc00>
   84104:	18ffffc4 	addi	r3,r3,-1
   84108:	11c12326 	beq	r2,r7,84598 <_dtoa_r+0x1080>
   8410c:	19000003 	ldbu	r4,0(r3)
   84110:	102f883a 	mov	r23,r2
   84114:	10bfffc4 	addi	r2,r2,-1
   84118:	21403fcc 	andi	r5,r4,255
   8411c:	2940201c 	xori	r5,r5,128
   84120:	297fe004 	addi	r5,r5,-128
   84124:	29bff726 	beq	r5,r6,84104 <__alt_data_end+0xfffc5904>
   84128:	21000044 	addi	r4,r4,1
   8412c:	11000005 	stb	r4,0(r2)
   84130:	a80b883a 	mov	r5,r21
   84134:	e009883a 	mov	r4,fp
   84138:	00866540 	call	86654 <_Bfree>
   8413c:	883ea026 	beq	r17,zero,83bc0 <__alt_data_end+0xfffc53c0>
   84140:	90000426 	beq	r18,zero,84154 <_dtoa_r+0xc3c>
   84144:	94400326 	beq	r18,r17,84154 <_dtoa_r+0xc3c>
   84148:	900b883a 	mov	r5,r18
   8414c:	e009883a 	mov	r4,fp
   84150:	00866540 	call	86654 <_Bfree>
   84154:	880b883a 	mov	r5,r17
   84158:	e009883a 	mov	r4,fp
   8415c:	00866540 	call	86654 <_Bfree>
   84160:	003e9706 	br	83bc0 <__alt_data_end+0xfffc53c0>
   84164:	01800044 	movi	r6,1
   84168:	d9800e15 	stw	r6,56(sp)
   8416c:	003d9606 	br	837c8 <__alt_data_end+0xfffc4fc8>
   84170:	d8800817 	ldw	r2,32(sp)
   84174:	d8c00517 	ldw	r3,20(sp)
   84178:	d8000d15 	stw	zero,52(sp)
   8417c:	10c5c83a 	sub	r2,r2,r3
   84180:	00c9c83a 	sub	r4,zero,r3
   84184:	d8800815 	stw	r2,32(sp)
   84188:	d9000a15 	stw	r4,40(sp)
   8418c:	003d9706 	br	837ec <__alt_data_end+0xfffc4fec>
   84190:	05adc83a 	sub	r22,zero,r22
   84194:	dd800815 	stw	r22,32(sp)
   84198:	002d883a 	mov	r22,zero
   8419c:	003d8e06 	br	837d8 <__alt_data_end+0xfffc4fd8>
   841a0:	d9000517 	ldw	r4,20(sp)
   841a4:	008d7700 	call	8d770 <__floatsidf>
   841a8:	100d883a 	mov	r6,r2
   841ac:	180f883a 	mov	r7,r3
   841b0:	a009883a 	mov	r4,r20
   841b4:	880b883a 	mov	r5,r17
   841b8:	008c3300 	call	8c330 <__eqdf2>
   841bc:	103d7126 	beq	r2,zero,83784 <__alt_data_end+0xfffc4f84>
   841c0:	d9c00517 	ldw	r7,20(sp)
   841c4:	39ffffc4 	addi	r7,r7,-1
   841c8:	d9c00515 	stw	r7,20(sp)
   841cc:	003d6d06 	br	83784 <__alt_data_end+0xfffc4f84>
   841d0:	dd400a17 	ldw	r21,40(sp)
   841d4:	dd000817 	ldw	r20,32(sp)
   841d8:	0023883a 	mov	r17,zero
   841dc:	003f4806 	br	83f00 <__alt_data_end+0xfffc5700>
   841e0:	10e3c83a 	sub	r17,r2,r3
   841e4:	9448983a 	sll	r4,r18,r17
   841e8:	003d3206 	br	836b4 <__alt_data_end+0xfffc4eb4>
   841ec:	d8000e15 	stw	zero,56(sp)
   841f0:	003d7506 	br	837c8 <__alt_data_end+0xfffc4fc8>
   841f4:	b005883a 	mov	r2,r22
   841f8:	003f4506 	br	83f10 <__alt_data_end+0xfffc5710>
   841fc:	dc000915 	stw	r16,36(sp)
   84200:	d9800a17 	ldw	r6,40(sp)
   84204:	d9400917 	ldw	r5,36(sp)
   84208:	e009883a 	mov	r4,fp
   8420c:	0086ca80 	call	86ca8 <__pow5mult>
   84210:	1021883a 	mov	r16,r2
   84214:	003f5a06 	br	83f80 <__alt_data_end+0xfffc5780>
   84218:	01c00044 	movi	r7,1
   8421c:	d9c00b15 	stw	r7,44(sp)
   84220:	d8802217 	ldw	r2,136(sp)
   84224:	0081280e 	bge	zero,r2,846c8 <_dtoa_r+0x11b0>
   84228:	100d883a 	mov	r6,r2
   8422c:	1021883a 	mov	r16,r2
   84230:	d8800c15 	stw	r2,48(sp)
   84234:	d8800615 	stw	r2,24(sp)
   84238:	003d8806 	br	8385c <__alt_data_end+0xfffc505c>
   8423c:	d8800617 	ldw	r2,24(sp)
   84240:	00be9b16 	blt	zero,r2,83cb0 <__alt_data_end+0xfffc54b0>
   84244:	10010f1e 	bne	r2,zero,84684 <_dtoa_r+0x116c>
   84248:	880b883a 	mov	r5,r17
   8424c:	000d883a 	mov	r6,zero
   84250:	01d00534 	movhi	r7,16404
   84254:	8009883a 	mov	r4,r16
   84258:	008c5880 	call	8c588 <__muldf3>
   8425c:	900d883a 	mov	r6,r18
   84260:	980f883a 	mov	r7,r19
   84264:	1009883a 	mov	r4,r2
   84268:	180b883a 	mov	r5,r3
   8426c:	008c3b80 	call	8c3b8 <__gedf2>
   84270:	002b883a 	mov	r21,zero
   84274:	0023883a 	mov	r17,zero
   84278:	1000bf16 	blt	r2,zero,84578 <_dtoa_r+0x1060>
   8427c:	d9802217 	ldw	r6,136(sp)
   84280:	ddc00717 	ldw	r23,28(sp)
   84284:	018c303a 	nor	r6,zero,r6
   84288:	d9800515 	stw	r6,20(sp)
   8428c:	a80b883a 	mov	r5,r21
   84290:	e009883a 	mov	r4,fp
   84294:	00866540 	call	86654 <_Bfree>
   84298:	883e4926 	beq	r17,zero,83bc0 <__alt_data_end+0xfffc53c0>
   8429c:	003fad06 	br	84154 <__alt_data_end+0xfffc5954>
   842a0:	d9c01117 	ldw	r7,68(sp)
   842a4:	3801bc26 	beq	r7,zero,84998 <_dtoa_r+0x1480>
   842a8:	10810cc4 	addi	r2,r2,1075
   842ac:	dd400a17 	ldw	r21,40(sp)
   842b0:	dd000817 	ldw	r20,32(sp)
   842b4:	003f0a06 	br	83ee0 <__alt_data_end+0xfffc56e0>
   842b8:	00800704 	movi	r2,28
   842bc:	d9000817 	ldw	r4,32(sp)
   842c0:	a0a9883a 	add	r20,r20,r2
   842c4:	b0ad883a 	add	r22,r22,r2
   842c8:	2089883a 	add	r4,r4,r2
   842cc:	d9000815 	stw	r4,32(sp)
   842d0:	003f5106 	br	84018 <__alt_data_end+0xfffc5818>
   842d4:	d8c00317 	ldw	r3,12(sp)
   842d8:	b8c1fc0e 	bge	r23,r3,84acc <_dtoa_r+0x15b4>
   842dc:	0027883a 	mov	r19,zero
   842e0:	b805883a 	mov	r2,r23
   842e4:	003f3e06 	br	83fe0 <__alt_data_end+0xfffc57e0>
   842e8:	880b883a 	mov	r5,r17
   842ec:	e009883a 	mov	r4,fp
   842f0:	000f883a 	mov	r7,zero
   842f4:	01800284 	movi	r6,10
   842f8:	008667c0 	call	8667c <__multadd>
   842fc:	d9000c17 	ldw	r4,48(sp)
   84300:	1023883a 	mov	r17,r2
   84304:	0102040e 	bge	zero,r4,84b18 <_dtoa_r+0x1600>
   84308:	d9000615 	stw	r4,24(sp)
   8430c:	0500050e 	bge	zero,r20,84324 <_dtoa_r+0xe0c>
   84310:	880b883a 	mov	r5,r17
   84314:	a00d883a 	mov	r6,r20
   84318:	e009883a 	mov	r4,fp
   8431c:	0086de80 	call	86de8 <__lshift>
   84320:	1023883a 	mov	r17,r2
   84324:	9801241e 	bne	r19,zero,847b8 <_dtoa_r+0x12a0>
   84328:	8829883a 	mov	r20,r17
   8432c:	d9000617 	ldw	r4,24(sp)
   84330:	dcc00717 	ldw	r19,28(sp)
   84334:	9480004c 	andi	r18,r18,1
   84338:	20bfffc4 	addi	r2,r4,-1
   8433c:	9885883a 	add	r2,r19,r2
   84340:	d8800415 	stw	r2,16(sp)
   84344:	dc800615 	stw	r18,24(sp)
   84348:	a80b883a 	mov	r5,r21
   8434c:	8009883a 	mov	r4,r16
   84350:	00832f00 	call	832f0 <quorem>
   84354:	880b883a 	mov	r5,r17
   84358:	8009883a 	mov	r4,r16
   8435c:	102f883a 	mov	r23,r2
   84360:	0086f300 	call	86f30 <__mcmp>
   84364:	a80b883a 	mov	r5,r21
   84368:	a00d883a 	mov	r6,r20
   8436c:	e009883a 	mov	r4,fp
   84370:	102d883a 	mov	r22,r2
   84374:	0086f900 	call	86f90 <__mdiff>
   84378:	1007883a 	mov	r3,r2
   8437c:	10800317 	ldw	r2,12(r2)
   84380:	bc800c04 	addi	r18,r23,48
   84384:	180b883a 	mov	r5,r3
   84388:	10004e1e 	bne	r2,zero,844c4 <_dtoa_r+0xfac>
   8438c:	8009883a 	mov	r4,r16
   84390:	d8c01615 	stw	r3,88(sp)
   84394:	0086f300 	call	86f30 <__mcmp>
   84398:	d8c01617 	ldw	r3,88(sp)
   8439c:	e009883a 	mov	r4,fp
   843a0:	d8801615 	stw	r2,88(sp)
   843a4:	180b883a 	mov	r5,r3
   843a8:	00866540 	call	86654 <_Bfree>
   843ac:	d8801617 	ldw	r2,88(sp)
   843b0:	1000041e 	bne	r2,zero,843c4 <_dtoa_r+0xeac>
   843b4:	d9800317 	ldw	r6,12(sp)
   843b8:	3000021e 	bne	r6,zero,843c4 <_dtoa_r+0xeac>
   843bc:	d8c00617 	ldw	r3,24(sp)
   843c0:	18003726 	beq	r3,zero,844a0 <_dtoa_r+0xf88>
   843c4:	b0002016 	blt	r22,zero,84448 <_dtoa_r+0xf30>
   843c8:	b000041e 	bne	r22,zero,843dc <_dtoa_r+0xec4>
   843cc:	d9000317 	ldw	r4,12(sp)
   843d0:	2000021e 	bne	r4,zero,843dc <_dtoa_r+0xec4>
   843d4:	d8c00617 	ldw	r3,24(sp)
   843d8:	18001b26 	beq	r3,zero,84448 <_dtoa_r+0xf30>
   843dc:	00810716 	blt	zero,r2,847fc <_dtoa_r+0x12e4>
   843e0:	d8c00417 	ldw	r3,16(sp)
   843e4:	9d800044 	addi	r22,r19,1
   843e8:	9c800005 	stb	r18,0(r19)
   843ec:	b02f883a 	mov	r23,r22
   843f0:	98c10626 	beq	r19,r3,8480c <_dtoa_r+0x12f4>
   843f4:	800b883a 	mov	r5,r16
   843f8:	000f883a 	mov	r7,zero
   843fc:	01800284 	movi	r6,10
   84400:	e009883a 	mov	r4,fp
   84404:	008667c0 	call	8667c <__multadd>
   84408:	1021883a 	mov	r16,r2
   8440c:	000f883a 	mov	r7,zero
   84410:	01800284 	movi	r6,10
   84414:	880b883a 	mov	r5,r17
   84418:	e009883a 	mov	r4,fp
   8441c:	8d002526 	beq	r17,r20,844b4 <_dtoa_r+0xf9c>
   84420:	008667c0 	call	8667c <__multadd>
   84424:	a00b883a 	mov	r5,r20
   84428:	000f883a 	mov	r7,zero
   8442c:	01800284 	movi	r6,10
   84430:	e009883a 	mov	r4,fp
   84434:	1023883a 	mov	r17,r2
   84438:	008667c0 	call	8667c <__multadd>
   8443c:	1029883a 	mov	r20,r2
   84440:	b027883a 	mov	r19,r22
   84444:	003fc006 	br	84348 <__alt_data_end+0xfffc5b48>
   84448:	9011883a 	mov	r8,r18
   8444c:	00800e0e 	bge	zero,r2,84488 <_dtoa_r+0xf70>
   84450:	800b883a 	mov	r5,r16
   84454:	01800044 	movi	r6,1
   84458:	e009883a 	mov	r4,fp
   8445c:	da001715 	stw	r8,92(sp)
   84460:	0086de80 	call	86de8 <__lshift>
   84464:	a80b883a 	mov	r5,r21
   84468:	1009883a 	mov	r4,r2
   8446c:	1021883a 	mov	r16,r2
   84470:	0086f300 	call	86f30 <__mcmp>
   84474:	da001717 	ldw	r8,92(sp)
   84478:	0081960e 	bge	zero,r2,84ad4 <_dtoa_r+0x15bc>
   8447c:	00800e44 	movi	r2,57
   84480:	40817026 	beq	r8,r2,84a44 <_dtoa_r+0x152c>
   84484:	ba000c44 	addi	r8,r23,49
   84488:	8825883a 	mov	r18,r17
   8448c:	9dc00044 	addi	r23,r19,1
   84490:	9a000005 	stb	r8,0(r19)
   84494:	a023883a 	mov	r17,r20
   84498:	dc000915 	stw	r16,36(sp)
   8449c:	003f2406 	br	84130 <__alt_data_end+0xfffc5930>
   844a0:	00800e44 	movi	r2,57
   844a4:	9011883a 	mov	r8,r18
   844a8:	90816626 	beq	r18,r2,84a44 <_dtoa_r+0x152c>
   844ac:	05bff516 	blt	zero,r22,84484 <__alt_data_end+0xfffc5c84>
   844b0:	003ff506 	br	84488 <__alt_data_end+0xfffc5c88>
   844b4:	008667c0 	call	8667c <__multadd>
   844b8:	1023883a 	mov	r17,r2
   844bc:	1029883a 	mov	r20,r2
   844c0:	003fdf06 	br	84440 <__alt_data_end+0xfffc5c40>
   844c4:	e009883a 	mov	r4,fp
   844c8:	00866540 	call	86654 <_Bfree>
   844cc:	00800044 	movi	r2,1
   844d0:	003fbc06 	br	843c4 <__alt_data_end+0xfffc5bc4>
   844d4:	a80b883a 	mov	r5,r21
   844d8:	8009883a 	mov	r4,r16
   844dc:	0086f300 	call	86f30 <__mcmp>
   844e0:	103edb0e 	bge	r2,zero,84050 <__alt_data_end+0xfffc5850>
   844e4:	800b883a 	mov	r5,r16
   844e8:	000f883a 	mov	r7,zero
   844ec:	01800284 	movi	r6,10
   844f0:	e009883a 	mov	r4,fp
   844f4:	008667c0 	call	8667c <__multadd>
   844f8:	1021883a 	mov	r16,r2
   844fc:	d8800517 	ldw	r2,20(sp)
   84500:	d8c00b17 	ldw	r3,44(sp)
   84504:	10bfffc4 	addi	r2,r2,-1
   84508:	d8800515 	stw	r2,20(sp)
   8450c:	183f761e 	bne	r3,zero,842e8 <__alt_data_end+0xfffc5ae8>
   84510:	d9000c17 	ldw	r4,48(sp)
   84514:	0101730e 	bge	zero,r4,84ae4 <_dtoa_r+0x15cc>
   84518:	d9000615 	stw	r4,24(sp)
   8451c:	003ed006 	br	84060 <__alt_data_end+0xfffc5860>
   84520:	00800084 	movi	r2,2
   84524:	3081861e 	bne	r6,r2,84b40 <_dtoa_r+0x1628>
   84528:	d8000b15 	stw	zero,44(sp)
   8452c:	003f3c06 	br	84220 <__alt_data_end+0xfffc5a20>
   84530:	dc000917 	ldw	r16,36(sp)
   84534:	003e9206 	br	83f80 <__alt_data_end+0xfffc5780>
   84538:	d9c00317 	ldw	r7,12(sp)
   8453c:	00800084 	movi	r2,2
   84540:	11fec50e 	bge	r2,r7,84058 <__alt_data_end+0xfffc5858>
   84544:	d9000617 	ldw	r4,24(sp)
   84548:	20013c1e 	bne	r4,zero,84a3c <_dtoa_r+0x1524>
   8454c:	a80b883a 	mov	r5,r21
   84550:	000f883a 	mov	r7,zero
   84554:	01800144 	movi	r6,5
   84558:	e009883a 	mov	r4,fp
   8455c:	008667c0 	call	8667c <__multadd>
   84560:	100b883a 	mov	r5,r2
   84564:	8009883a 	mov	r4,r16
   84568:	102b883a 	mov	r21,r2
   8456c:	0086f300 	call	86f30 <__mcmp>
   84570:	dc000915 	stw	r16,36(sp)
   84574:	00bf410e 	bge	zero,r2,8427c <__alt_data_end+0xfffc5a7c>
   84578:	d9c00717 	ldw	r7,28(sp)
   8457c:	00800c44 	movi	r2,49
   84580:	38800005 	stb	r2,0(r7)
   84584:	d8800517 	ldw	r2,20(sp)
   84588:	3dc00044 	addi	r23,r7,1
   8458c:	10800044 	addi	r2,r2,1
   84590:	d8800515 	stw	r2,20(sp)
   84594:	003f3d06 	br	8428c <__alt_data_end+0xfffc5a8c>
   84598:	d9800517 	ldw	r6,20(sp)
   8459c:	d9c00717 	ldw	r7,28(sp)
   845a0:	00800c44 	movi	r2,49
   845a4:	31800044 	addi	r6,r6,1
   845a8:	d9800515 	stw	r6,20(sp)
   845ac:	38800005 	stb	r2,0(r7)
   845b0:	003edf06 	br	84130 <__alt_data_end+0xfffc5930>
   845b4:	d8000b15 	stw	zero,44(sp)
   845b8:	003c9f06 	br	83838 <__alt_data_end+0xfffc5038>
   845bc:	903e7e1e 	bne	r18,zero,83fb8 <__alt_data_end+0xfffc57b8>
   845c0:	00800434 	movhi	r2,16
   845c4:	10bfffc4 	addi	r2,r2,-1
   845c8:	9884703a 	and	r2,r19,r2
   845cc:	1000ea1e 	bne	r2,zero,84978 <_dtoa_r+0x1460>
   845d0:	9cdffc2c 	andhi	r19,r19,32752
   845d4:	9800e826 	beq	r19,zero,84978 <_dtoa_r+0x1460>
   845d8:	d9c00817 	ldw	r7,32(sp)
   845dc:	b5800044 	addi	r22,r22,1
   845e0:	04c00044 	movi	r19,1
   845e4:	39c00044 	addi	r7,r7,1
   845e8:	d9c00815 	stw	r7,32(sp)
   845ec:	d8800d17 	ldw	r2,52(sp)
   845f0:	103e721e 	bne	r2,zero,83fbc <__alt_data_end+0xfffc57bc>
   845f4:	00800044 	movi	r2,1
   845f8:	003e7906 	br	83fe0 <__alt_data_end+0xfffc57e0>
   845fc:	8009883a 	mov	r4,r16
   84600:	008d7700 	call	8d770 <__floatsidf>
   84604:	d9800f17 	ldw	r6,60(sp)
   84608:	d9c01017 	ldw	r7,64(sp)
   8460c:	1009883a 	mov	r4,r2
   84610:	180b883a 	mov	r5,r3
   84614:	008c5880 	call	8c588 <__muldf3>
   84618:	000d883a 	mov	r6,zero
   8461c:	01d00734 	movhi	r7,16412
   84620:	1009883a 	mov	r4,r2
   84624:	180b883a 	mov	r5,r3
   84628:	008b0b40 	call	8b0b4 <__adddf3>
   8462c:	047f3034 	movhi	r17,64704
   84630:	1021883a 	mov	r16,r2
   84634:	1c63883a 	add	r17,r3,r17
   84638:	d9000f17 	ldw	r4,60(sp)
   8463c:	d9401017 	ldw	r5,64(sp)
   84640:	000d883a 	mov	r6,zero
   84644:	01d00534 	movhi	r7,16404
   84648:	008cdf40 	call	8cdf4 <__subdf3>
   8464c:	800d883a 	mov	r6,r16
   84650:	880f883a 	mov	r7,r17
   84654:	1009883a 	mov	r4,r2
   84658:	180b883a 	mov	r5,r3
   8465c:	102b883a 	mov	r21,r2
   84660:	1829883a 	mov	r20,r3
   84664:	008c3b80 	call	8c3b8 <__gedf2>
   84668:	00806c16 	blt	zero,r2,8481c <_dtoa_r+0x1304>
   8466c:	89e0003c 	xorhi	r7,r17,32768
   84670:	800d883a 	mov	r6,r16
   84674:	a809883a 	mov	r4,r21
   84678:	a00b883a 	mov	r5,r20
   8467c:	008c4940 	call	8c494 <__ledf2>
   84680:	103d7e0e 	bge	r2,zero,83c7c <__alt_data_end+0xfffc547c>
   84684:	002b883a 	mov	r21,zero
   84688:	0023883a 	mov	r17,zero
   8468c:	003efb06 	br	8427c <__alt_data_end+0xfffc5a7c>
   84690:	d8800717 	ldw	r2,28(sp)
   84694:	003bd006 	br	835d8 <__alt_data_end+0xfffc4dd8>
   84698:	d9000a17 	ldw	r4,40(sp)
   8469c:	d9800d17 	ldw	r6,52(sp)
   846a0:	dd400a15 	stw	r21,40(sp)
   846a4:	a905c83a 	sub	r2,r21,r4
   846a8:	308d883a 	add	r6,r6,r2
   846ac:	d9800d15 	stw	r6,52(sp)
   846b0:	002b883a 	mov	r21,zero
   846b4:	003e0606 	br	83ed0 <__alt_data_end+0xfffc56d0>
   846b8:	9023883a 	mov	r17,r18
   846bc:	9829883a 	mov	r20,r19
   846c0:	04000084 	movi	r16,2
   846c4:	003c9206 	br	83910 <__alt_data_end+0xfffc5110>
   846c8:	04000044 	movi	r16,1
   846cc:	dc000c15 	stw	r16,48(sp)
   846d0:	dc000615 	stw	r16,24(sp)
   846d4:	dc002215 	stw	r16,136(sp)
   846d8:	e0001115 	stw	zero,68(fp)
   846dc:	000b883a 	mov	r5,zero
   846e0:	003c6906 	br	83888 <__alt_data_end+0xfffc5088>
   846e4:	3021883a 	mov	r16,r6
   846e8:	003ffb06 	br	846d8 <__alt_data_end+0xfffc5ed8>
   846ec:	1000021e 	bne	r2,zero,846f8 <_dtoa_r+0x11e0>
   846f0:	4200004c 	andi	r8,r8,1
   846f4:	403e7d1e 	bne	r8,zero,840ec <__alt_data_end+0xfffc58ec>
   846f8:	01000c04 	movi	r4,48
   846fc:	00000106 	br	84704 <_dtoa_r+0x11ec>
   84700:	102f883a 	mov	r23,r2
   84704:	b8bfffc4 	addi	r2,r23,-1
   84708:	10c00007 	ldb	r3,0(r2)
   8470c:	193ffc26 	beq	r3,r4,84700 <__alt_data_end+0xfffc5f00>
   84710:	003e8706 	br	84130 <__alt_data_end+0xfffc5930>
   84714:	d8800517 	ldw	r2,20(sp)
   84718:	00a3c83a 	sub	r17,zero,r2
   8471c:	8800a426 	beq	r17,zero,849b0 <_dtoa_r+0x1498>
   84720:	888003cc 	andi	r2,r17,15
   84724:	100490fa 	slli	r2,r2,3
   84728:	00c002b4 	movhi	r3,10
   8472c:	18e0bd04 	addi	r3,r3,-32012
   84730:	1885883a 	add	r2,r3,r2
   84734:	11800017 	ldw	r6,0(r2)
   84738:	11c00117 	ldw	r7,4(r2)
   8473c:	9009883a 	mov	r4,r18
   84740:	980b883a 	mov	r5,r19
   84744:	8823d13a 	srai	r17,r17,4
   84748:	008c5880 	call	8c588 <__muldf3>
   8474c:	d8800f15 	stw	r2,60(sp)
   84750:	d8c01015 	stw	r3,64(sp)
   84754:	8800e826 	beq	r17,zero,84af8 <_dtoa_r+0x15e0>
   84758:	050002b4 	movhi	r20,10
   8475c:	a520b304 	addi	r20,r20,-32052
   84760:	04000084 	movi	r16,2
   84764:	8980004c 	andi	r6,r17,1
   84768:	1009883a 	mov	r4,r2
   8476c:	8823d07a 	srai	r17,r17,1
   84770:	180b883a 	mov	r5,r3
   84774:	30000426 	beq	r6,zero,84788 <_dtoa_r+0x1270>
   84778:	a1800017 	ldw	r6,0(r20)
   8477c:	a1c00117 	ldw	r7,4(r20)
   84780:	84000044 	addi	r16,r16,1
   84784:	008c5880 	call	8c588 <__muldf3>
   84788:	a5000204 	addi	r20,r20,8
   8478c:	883ff51e 	bne	r17,zero,84764 <__alt_data_end+0xfffc5f64>
   84790:	d8800f15 	stw	r2,60(sp)
   84794:	d8c01015 	stw	r3,64(sp)
   84798:	003c7606 	br	83974 <__alt_data_end+0xfffc5174>
   8479c:	00c00c04 	movi	r3,48
   847a0:	10c00005 	stb	r3,0(r2)
   847a4:	d8c00517 	ldw	r3,20(sp)
   847a8:	bd3fffc3 	ldbu	r20,-1(r23)
   847ac:	18c00044 	addi	r3,r3,1
   847b0:	d8c00515 	stw	r3,20(sp)
   847b4:	003db906 	br	83e9c <__alt_data_end+0xfffc569c>
   847b8:	89400117 	ldw	r5,4(r17)
   847bc:	e009883a 	mov	r4,fp
   847c0:	00865ac0 	call	865ac <_Balloc>
   847c4:	89800417 	ldw	r6,16(r17)
   847c8:	89400304 	addi	r5,r17,12
   847cc:	11000304 	addi	r4,r2,12
   847d0:	31800084 	addi	r6,r6,2
   847d4:	318d883a 	add	r6,r6,r6
   847d8:	318d883a 	add	r6,r6,r6
   847dc:	1027883a 	mov	r19,r2
   847e0:	008633c0 	call	8633c <memcpy>
   847e4:	01800044 	movi	r6,1
   847e8:	980b883a 	mov	r5,r19
   847ec:	e009883a 	mov	r4,fp
   847f0:	0086de80 	call	86de8 <__lshift>
   847f4:	1029883a 	mov	r20,r2
   847f8:	003ecc06 	br	8432c <__alt_data_end+0xfffc5b2c>
   847fc:	00800e44 	movi	r2,57
   84800:	90809026 	beq	r18,r2,84a44 <_dtoa_r+0x152c>
   84804:	92000044 	addi	r8,r18,1
   84808:	003f1f06 	br	84488 <__alt_data_end+0xfffc5c88>
   8480c:	9011883a 	mov	r8,r18
   84810:	8825883a 	mov	r18,r17
   84814:	a023883a 	mov	r17,r20
   84818:	003e2906 	br	840c0 <__alt_data_end+0xfffc58c0>
   8481c:	002b883a 	mov	r21,zero
   84820:	0023883a 	mov	r17,zero
   84824:	003f5406 	br	84578 <__alt_data_end+0xfffc5d78>
   84828:	61bfffc4 	addi	r6,r12,-1
   8482c:	300490fa 	slli	r2,r6,3
   84830:	00c002b4 	movhi	r3,10
   84834:	18e0bd04 	addi	r3,r3,-32012
   84838:	1885883a 	add	r2,r3,r2
   8483c:	11000017 	ldw	r4,0(r2)
   84840:	11400117 	ldw	r5,4(r2)
   84844:	d8800717 	ldw	r2,28(sp)
   84848:	880f883a 	mov	r7,r17
   8484c:	d9801215 	stw	r6,72(sp)
   84850:	800d883a 	mov	r6,r16
   84854:	db001615 	stw	r12,88(sp)
   84858:	15c00044 	addi	r23,r2,1
   8485c:	008c5880 	call	8c588 <__muldf3>
   84860:	d9401017 	ldw	r5,64(sp)
   84864:	d9000f17 	ldw	r4,60(sp)
   84868:	d8c01515 	stw	r3,84(sp)
   8486c:	d8801415 	stw	r2,80(sp)
   84870:	008d6f00 	call	8d6f0 <__fixdfsi>
   84874:	1009883a 	mov	r4,r2
   84878:	1021883a 	mov	r16,r2
   8487c:	008d7700 	call	8d770 <__floatsidf>
   84880:	d9000f17 	ldw	r4,60(sp)
   84884:	d9401017 	ldw	r5,64(sp)
   84888:	100d883a 	mov	r6,r2
   8488c:	180f883a 	mov	r7,r3
   84890:	008cdf40 	call	8cdf4 <__subdf3>
   84894:	1829883a 	mov	r20,r3
   84898:	d8c00717 	ldw	r3,28(sp)
   8489c:	84000c04 	addi	r16,r16,48
   848a0:	1023883a 	mov	r17,r2
   848a4:	1c000005 	stb	r16,0(r3)
   848a8:	db001617 	ldw	r12,88(sp)
   848ac:	00800044 	movi	r2,1
   848b0:	60802226 	beq	r12,r2,8493c <_dtoa_r+0x1424>
   848b4:	d9c00717 	ldw	r7,28(sp)
   848b8:	8805883a 	mov	r2,r17
   848bc:	b82b883a 	mov	r21,r23
   848c0:	3b19883a 	add	r12,r7,r12
   848c4:	6023883a 	mov	r17,r12
   848c8:	a007883a 	mov	r3,r20
   848cc:	dc800f15 	stw	r18,60(sp)
   848d0:	000d883a 	mov	r6,zero
   848d4:	01d00934 	movhi	r7,16420
   848d8:	1009883a 	mov	r4,r2
   848dc:	180b883a 	mov	r5,r3
   848e0:	008c5880 	call	8c588 <__muldf3>
   848e4:	180b883a 	mov	r5,r3
   848e8:	1009883a 	mov	r4,r2
   848ec:	1829883a 	mov	r20,r3
   848f0:	1025883a 	mov	r18,r2
   848f4:	008d6f00 	call	8d6f0 <__fixdfsi>
   848f8:	1009883a 	mov	r4,r2
   848fc:	1021883a 	mov	r16,r2
   84900:	008d7700 	call	8d770 <__floatsidf>
   84904:	100d883a 	mov	r6,r2
   84908:	180f883a 	mov	r7,r3
   8490c:	9009883a 	mov	r4,r18
   84910:	a00b883a 	mov	r5,r20
   84914:	84000c04 	addi	r16,r16,48
   84918:	008cdf40 	call	8cdf4 <__subdf3>
   8491c:	ad400044 	addi	r21,r21,1
   84920:	ac3fffc5 	stb	r16,-1(r21)
   84924:	ac7fea1e 	bne	r21,r17,848d0 <__alt_data_end+0xfffc60d0>
   84928:	1023883a 	mov	r17,r2
   8492c:	d8801217 	ldw	r2,72(sp)
   84930:	dc800f17 	ldw	r18,60(sp)
   84934:	1829883a 	mov	r20,r3
   84938:	b8af883a 	add	r23,r23,r2
   8493c:	d9001417 	ldw	r4,80(sp)
   84940:	d9401517 	ldw	r5,84(sp)
   84944:	000d883a 	mov	r6,zero
   84948:	01cff834 	movhi	r7,16352
   8494c:	008b0b40 	call	8b0b4 <__adddf3>
   84950:	880d883a 	mov	r6,r17
   84954:	a00f883a 	mov	r7,r20
   84958:	1009883a 	mov	r4,r2
   8495c:	180b883a 	mov	r5,r3
   84960:	008c4940 	call	8c494 <__ledf2>
   84964:	10003e0e 	bge	r2,zero,84a60 <_dtoa_r+0x1548>
   84968:	d9001317 	ldw	r4,76(sp)
   8496c:	bd3fffc3 	ldbu	r20,-1(r23)
   84970:	d9000515 	stw	r4,20(sp)
   84974:	003d3b06 	br	83e64 <__alt_data_end+0xfffc5664>
   84978:	0027883a 	mov	r19,zero
   8497c:	003f1b06 	br	845ec <__alt_data_end+0xfffc5dec>
   84980:	d8800817 	ldw	r2,32(sp)
   84984:	11e9c83a 	sub	r20,r2,r7
   84988:	0005883a 	mov	r2,zero
   8498c:	003d5406 	br	83ee0 <__alt_data_end+0xfffc56e0>
   84990:	00800044 	movi	r2,1
   84994:	003dc706 	br	840b4 <__alt_data_end+0xfffc58b4>
   84998:	d8c00217 	ldw	r3,8(sp)
   8499c:	00800d84 	movi	r2,54
   849a0:	dd400a17 	ldw	r21,40(sp)
   849a4:	10c5c83a 	sub	r2,r2,r3
   849a8:	dd000817 	ldw	r20,32(sp)
   849ac:	003d4c06 	br	83ee0 <__alt_data_end+0xfffc56e0>
   849b0:	dc800f15 	stw	r18,60(sp)
   849b4:	dcc01015 	stw	r19,64(sp)
   849b8:	04000084 	movi	r16,2
   849bc:	003bed06 	br	83974 <__alt_data_end+0xfffc5174>
   849c0:	d9000617 	ldw	r4,24(sp)
   849c4:	203f0d26 	beq	r4,zero,845fc <__alt_data_end+0xfffc5dfc>
   849c8:	d9800c17 	ldw	r6,48(sp)
   849cc:	01bcab0e 	bge	zero,r6,83c7c <__alt_data_end+0xfffc547c>
   849d0:	d9401017 	ldw	r5,64(sp)
   849d4:	d9000f17 	ldw	r4,60(sp)
   849d8:	000d883a 	mov	r6,zero
   849dc:	01d00934 	movhi	r7,16420
   849e0:	008c5880 	call	8c588 <__muldf3>
   849e4:	81000044 	addi	r4,r16,1
   849e8:	d8800f15 	stw	r2,60(sp)
   849ec:	d8c01015 	stw	r3,64(sp)
   849f0:	008d7700 	call	8d770 <__floatsidf>
   849f4:	d9800f17 	ldw	r6,60(sp)
   849f8:	d9c01017 	ldw	r7,64(sp)
   849fc:	1009883a 	mov	r4,r2
   84a00:	180b883a 	mov	r5,r3
   84a04:	008c5880 	call	8c588 <__muldf3>
   84a08:	01d00734 	movhi	r7,16412
   84a0c:	000d883a 	mov	r6,zero
   84a10:	1009883a 	mov	r4,r2
   84a14:	180b883a 	mov	r5,r3
   84a18:	008b0b40 	call	8b0b4 <__adddf3>
   84a1c:	d9c00517 	ldw	r7,20(sp)
   84a20:	047f3034 	movhi	r17,64704
   84a24:	1021883a 	mov	r16,r2
   84a28:	39ffffc4 	addi	r7,r7,-1
   84a2c:	d9c01315 	stw	r7,76(sp)
   84a30:	1c63883a 	add	r17,r3,r17
   84a34:	db000c17 	ldw	r12,48(sp)
   84a38:	003bea06 	br	839e4 <__alt_data_end+0xfffc51e4>
   84a3c:	dc000915 	stw	r16,36(sp)
   84a40:	003e0e06 	br	8427c <__alt_data_end+0xfffc5a7c>
   84a44:	01000e44 	movi	r4,57
   84a48:	8825883a 	mov	r18,r17
   84a4c:	9dc00044 	addi	r23,r19,1
   84a50:	99000005 	stb	r4,0(r19)
   84a54:	a023883a 	mov	r17,r20
   84a58:	dc000915 	stw	r16,36(sp)
   84a5c:	003da406 	br	840f0 <__alt_data_end+0xfffc58f0>
   84a60:	d9801417 	ldw	r6,80(sp)
   84a64:	d9c01517 	ldw	r7,84(sp)
   84a68:	0009883a 	mov	r4,zero
   84a6c:	014ff834 	movhi	r5,16352
   84a70:	008cdf40 	call	8cdf4 <__subdf3>
   84a74:	880d883a 	mov	r6,r17
   84a78:	a00f883a 	mov	r7,r20
   84a7c:	1009883a 	mov	r4,r2
   84a80:	180b883a 	mov	r5,r3
   84a84:	008c3b80 	call	8c3b8 <__gedf2>
   84a88:	00bc7c0e 	bge	zero,r2,83c7c <__alt_data_end+0xfffc547c>
   84a8c:	01000c04 	movi	r4,48
   84a90:	00000106 	br	84a98 <_dtoa_r+0x1580>
   84a94:	102f883a 	mov	r23,r2
   84a98:	b8bfffc4 	addi	r2,r23,-1
   84a9c:	10c00007 	ldb	r3,0(r2)
   84aa0:	193ffc26 	beq	r3,r4,84a94 <__alt_data_end+0xfffc6294>
   84aa4:	d9801317 	ldw	r6,76(sp)
   84aa8:	d9800515 	stw	r6,20(sp)
   84aac:	003c4406 	br	83bc0 <__alt_data_end+0xfffc53c0>
   84ab0:	d9801317 	ldw	r6,76(sp)
   84ab4:	d9800515 	stw	r6,20(sp)
   84ab8:	003cea06 	br	83e64 <__alt_data_end+0xfffc5664>
   84abc:	dd800f17 	ldw	r22,60(sp)
   84ac0:	dcc01017 	ldw	r19,64(sp)
   84ac4:	dc801217 	ldw	r18,72(sp)
   84ac8:	003c6c06 	br	83c7c <__alt_data_end+0xfffc547c>
   84acc:	903e031e 	bne	r18,zero,842dc <__alt_data_end+0xfffc5adc>
   84ad0:	003ebb06 	br	845c0 <__alt_data_end+0xfffc5dc0>
   84ad4:	103e6c1e 	bne	r2,zero,84488 <__alt_data_end+0xfffc5c88>
   84ad8:	4080004c 	andi	r2,r8,1
   84adc:	103e6a26 	beq	r2,zero,84488 <__alt_data_end+0xfffc5c88>
   84ae0:	003e6606 	br	8447c <__alt_data_end+0xfffc5c7c>
   84ae4:	d8c00317 	ldw	r3,12(sp)
   84ae8:	00800084 	movi	r2,2
   84aec:	10c02916 	blt	r2,r3,84b94 <_dtoa_r+0x167c>
   84af0:	d9000c17 	ldw	r4,48(sp)
   84af4:	003e8806 	br	84518 <__alt_data_end+0xfffc5d18>
   84af8:	04000084 	movi	r16,2
   84afc:	003b9d06 	br	83974 <__alt_data_end+0xfffc5174>
   84b00:	d9001317 	ldw	r4,76(sp)
   84b04:	d9000515 	stw	r4,20(sp)
   84b08:	003cd606 	br	83e64 <__alt_data_end+0xfffc5664>
   84b0c:	d8801317 	ldw	r2,76(sp)
   84b10:	d8800515 	stw	r2,20(sp)
   84b14:	003c2a06 	br	83bc0 <__alt_data_end+0xfffc53c0>
   84b18:	d9800317 	ldw	r6,12(sp)
   84b1c:	00800084 	movi	r2,2
   84b20:	11801516 	blt	r2,r6,84b78 <_dtoa_r+0x1660>
   84b24:	d9c00c17 	ldw	r7,48(sp)
   84b28:	d9c00615 	stw	r7,24(sp)
   84b2c:	003df706 	br	8430c <__alt_data_end+0xfffc5b0c>
   84b30:	193d3926 	beq	r3,r4,84018 <__alt_data_end+0xfffc5818>
   84b34:	00c00f04 	movi	r3,60
   84b38:	1885c83a 	sub	r2,r3,r2
   84b3c:	003ddf06 	br	842bc <__alt_data_end+0xfffc5abc>
   84b40:	e009883a 	mov	r4,fp
   84b44:	e0001115 	stw	zero,68(fp)
   84b48:	000b883a 	mov	r5,zero
   84b4c:	00865ac0 	call	865ac <_Balloc>
   84b50:	d8800715 	stw	r2,28(sp)
   84b54:	d8c00717 	ldw	r3,28(sp)
   84b58:	00bfffc4 	movi	r2,-1
   84b5c:	01000044 	movi	r4,1
   84b60:	d8800c15 	stw	r2,48(sp)
   84b64:	e0c01015 	stw	r3,64(fp)
   84b68:	d9000b15 	stw	r4,44(sp)
   84b6c:	d8800615 	stw	r2,24(sp)
   84b70:	d8002215 	stw	zero,136(sp)
   84b74:	003c4106 	br	83c7c <__alt_data_end+0xfffc547c>
   84b78:	d8c00c17 	ldw	r3,48(sp)
   84b7c:	d8c00615 	stw	r3,24(sp)
   84b80:	003e7006 	br	84544 <__alt_data_end+0xfffc5d44>
   84b84:	04400044 	movi	r17,1
   84b88:	003b2006 	br	8380c <__alt_data_end+0xfffc500c>
   84b8c:	000b883a 	mov	r5,zero
   84b90:	003b3d06 	br	83888 <__alt_data_end+0xfffc5088>
   84b94:	d8800c17 	ldw	r2,48(sp)
   84b98:	d8800615 	stw	r2,24(sp)
   84b9c:	003e6906 	br	84544 <__alt_data_end+0xfffc5d44>

00084ba0 <__sflush_r>:
   84ba0:	2880030b 	ldhu	r2,12(r5)
   84ba4:	defffb04 	addi	sp,sp,-20
   84ba8:	dcc00315 	stw	r19,12(sp)
   84bac:	dc400115 	stw	r17,4(sp)
   84bb0:	dfc00415 	stw	ra,16(sp)
   84bb4:	dc800215 	stw	r18,8(sp)
   84bb8:	dc000015 	stw	r16,0(sp)
   84bbc:	10c0020c 	andi	r3,r2,8
   84bc0:	2823883a 	mov	r17,r5
   84bc4:	2027883a 	mov	r19,r4
   84bc8:	1800311e 	bne	r3,zero,84c90 <__sflush_r+0xf0>
   84bcc:	28c00117 	ldw	r3,4(r5)
   84bd0:	10820014 	ori	r2,r2,2048
   84bd4:	2880030d 	sth	r2,12(r5)
   84bd8:	00c04b0e 	bge	zero,r3,84d08 <__sflush_r+0x168>
   84bdc:	8a000a17 	ldw	r8,40(r17)
   84be0:	40002326 	beq	r8,zero,84c70 <__sflush_r+0xd0>
   84be4:	9c000017 	ldw	r16,0(r19)
   84be8:	10c4000c 	andi	r3,r2,4096
   84bec:	98000015 	stw	zero,0(r19)
   84bf0:	18004826 	beq	r3,zero,84d14 <__sflush_r+0x174>
   84bf4:	89801417 	ldw	r6,80(r17)
   84bf8:	10c0010c 	andi	r3,r2,4
   84bfc:	18000626 	beq	r3,zero,84c18 <__sflush_r+0x78>
   84c00:	88c00117 	ldw	r3,4(r17)
   84c04:	88800c17 	ldw	r2,48(r17)
   84c08:	30cdc83a 	sub	r6,r6,r3
   84c0c:	10000226 	beq	r2,zero,84c18 <__sflush_r+0x78>
   84c10:	88800f17 	ldw	r2,60(r17)
   84c14:	308dc83a 	sub	r6,r6,r2
   84c18:	89400717 	ldw	r5,28(r17)
   84c1c:	000f883a 	mov	r7,zero
   84c20:	9809883a 	mov	r4,r19
   84c24:	403ee83a 	callr	r8
   84c28:	00ffffc4 	movi	r3,-1
   84c2c:	10c04426 	beq	r2,r3,84d40 <__sflush_r+0x1a0>
   84c30:	88c0030b 	ldhu	r3,12(r17)
   84c34:	89000417 	ldw	r4,16(r17)
   84c38:	88000115 	stw	zero,4(r17)
   84c3c:	197dffcc 	andi	r5,r3,63487
   84c40:	8940030d 	sth	r5,12(r17)
   84c44:	89000015 	stw	r4,0(r17)
   84c48:	18c4000c 	andi	r3,r3,4096
   84c4c:	18002c1e 	bne	r3,zero,84d00 <__sflush_r+0x160>
   84c50:	89400c17 	ldw	r5,48(r17)
   84c54:	9c000015 	stw	r16,0(r19)
   84c58:	28000526 	beq	r5,zero,84c70 <__sflush_r+0xd0>
   84c5c:	88801004 	addi	r2,r17,64
   84c60:	28800226 	beq	r5,r2,84c6c <__sflush_r+0xcc>
   84c64:	9809883a 	mov	r4,r19
   84c68:	008531c0 	call	8531c <_free_r>
   84c6c:	88000c15 	stw	zero,48(r17)
   84c70:	0005883a 	mov	r2,zero
   84c74:	dfc00417 	ldw	ra,16(sp)
   84c78:	dcc00317 	ldw	r19,12(sp)
   84c7c:	dc800217 	ldw	r18,8(sp)
   84c80:	dc400117 	ldw	r17,4(sp)
   84c84:	dc000017 	ldw	r16,0(sp)
   84c88:	dec00504 	addi	sp,sp,20
   84c8c:	f800283a 	ret
   84c90:	2c800417 	ldw	r18,16(r5)
   84c94:	903ff626 	beq	r18,zero,84c70 <__alt_data_end+0xfffc6470>
   84c98:	2c000017 	ldw	r16,0(r5)
   84c9c:	108000cc 	andi	r2,r2,3
   84ca0:	2c800015 	stw	r18,0(r5)
   84ca4:	84a1c83a 	sub	r16,r16,r18
   84ca8:	1000131e 	bne	r2,zero,84cf8 <__sflush_r+0x158>
   84cac:	28800517 	ldw	r2,20(r5)
   84cb0:	88800215 	stw	r2,8(r17)
   84cb4:	04000316 	blt	zero,r16,84cc4 <__sflush_r+0x124>
   84cb8:	003fed06 	br	84c70 <__alt_data_end+0xfffc6470>
   84cbc:	90a5883a 	add	r18,r18,r2
   84cc0:	043feb0e 	bge	zero,r16,84c70 <__alt_data_end+0xfffc6470>
   84cc4:	88800917 	ldw	r2,36(r17)
   84cc8:	89400717 	ldw	r5,28(r17)
   84ccc:	800f883a 	mov	r7,r16
   84cd0:	900d883a 	mov	r6,r18
   84cd4:	9809883a 	mov	r4,r19
   84cd8:	103ee83a 	callr	r2
   84cdc:	80a1c83a 	sub	r16,r16,r2
   84ce0:	00bff616 	blt	zero,r2,84cbc <__alt_data_end+0xfffc64bc>
   84ce4:	88c0030b 	ldhu	r3,12(r17)
   84ce8:	00bfffc4 	movi	r2,-1
   84cec:	18c01014 	ori	r3,r3,64
   84cf0:	88c0030d 	sth	r3,12(r17)
   84cf4:	003fdf06 	br	84c74 <__alt_data_end+0xfffc6474>
   84cf8:	0005883a 	mov	r2,zero
   84cfc:	003fec06 	br	84cb0 <__alt_data_end+0xfffc64b0>
   84d00:	88801415 	stw	r2,80(r17)
   84d04:	003fd206 	br	84c50 <__alt_data_end+0xfffc6450>
   84d08:	28c00f17 	ldw	r3,60(r5)
   84d0c:	00ffb316 	blt	zero,r3,84bdc <__alt_data_end+0xfffc63dc>
   84d10:	003fd706 	br	84c70 <__alt_data_end+0xfffc6470>
   84d14:	89400717 	ldw	r5,28(r17)
   84d18:	000d883a 	mov	r6,zero
   84d1c:	01c00044 	movi	r7,1
   84d20:	9809883a 	mov	r4,r19
   84d24:	403ee83a 	callr	r8
   84d28:	100d883a 	mov	r6,r2
   84d2c:	00bfffc4 	movi	r2,-1
   84d30:	30801426 	beq	r6,r2,84d84 <__sflush_r+0x1e4>
   84d34:	8880030b 	ldhu	r2,12(r17)
   84d38:	8a000a17 	ldw	r8,40(r17)
   84d3c:	003fae06 	br	84bf8 <__alt_data_end+0xfffc63f8>
   84d40:	98c00017 	ldw	r3,0(r19)
   84d44:	183fba26 	beq	r3,zero,84c30 <__alt_data_end+0xfffc6430>
   84d48:	01000744 	movi	r4,29
   84d4c:	19000626 	beq	r3,r4,84d68 <__sflush_r+0x1c8>
   84d50:	01000584 	movi	r4,22
   84d54:	19000426 	beq	r3,r4,84d68 <__sflush_r+0x1c8>
   84d58:	88c0030b 	ldhu	r3,12(r17)
   84d5c:	18c01014 	ori	r3,r3,64
   84d60:	88c0030d 	sth	r3,12(r17)
   84d64:	003fc306 	br	84c74 <__alt_data_end+0xfffc6474>
   84d68:	8880030b 	ldhu	r2,12(r17)
   84d6c:	88c00417 	ldw	r3,16(r17)
   84d70:	88000115 	stw	zero,4(r17)
   84d74:	10bdffcc 	andi	r2,r2,63487
   84d78:	8880030d 	sth	r2,12(r17)
   84d7c:	88c00015 	stw	r3,0(r17)
   84d80:	003fb306 	br	84c50 <__alt_data_end+0xfffc6450>
   84d84:	98800017 	ldw	r2,0(r19)
   84d88:	103fea26 	beq	r2,zero,84d34 <__alt_data_end+0xfffc6534>
   84d8c:	00c00744 	movi	r3,29
   84d90:	10c00226 	beq	r2,r3,84d9c <__sflush_r+0x1fc>
   84d94:	00c00584 	movi	r3,22
   84d98:	10c0031e 	bne	r2,r3,84da8 <__sflush_r+0x208>
   84d9c:	9c000015 	stw	r16,0(r19)
   84da0:	0005883a 	mov	r2,zero
   84da4:	003fb306 	br	84c74 <__alt_data_end+0xfffc6474>
   84da8:	88c0030b 	ldhu	r3,12(r17)
   84dac:	3005883a 	mov	r2,r6
   84db0:	18c01014 	ori	r3,r3,64
   84db4:	88c0030d 	sth	r3,12(r17)
   84db8:	003fae06 	br	84c74 <__alt_data_end+0xfffc6474>

00084dbc <_fflush_r>:
   84dbc:	defffd04 	addi	sp,sp,-12
   84dc0:	dc000115 	stw	r16,4(sp)
   84dc4:	dfc00215 	stw	ra,8(sp)
   84dc8:	2021883a 	mov	r16,r4
   84dcc:	20000226 	beq	r4,zero,84dd8 <_fflush_r+0x1c>
   84dd0:	20800e17 	ldw	r2,56(r4)
   84dd4:	10000c26 	beq	r2,zero,84e08 <_fflush_r+0x4c>
   84dd8:	2880030f 	ldh	r2,12(r5)
   84ddc:	1000051e 	bne	r2,zero,84df4 <_fflush_r+0x38>
   84de0:	0005883a 	mov	r2,zero
   84de4:	dfc00217 	ldw	ra,8(sp)
   84de8:	dc000117 	ldw	r16,4(sp)
   84dec:	dec00304 	addi	sp,sp,12
   84df0:	f800283a 	ret
   84df4:	8009883a 	mov	r4,r16
   84df8:	dfc00217 	ldw	ra,8(sp)
   84dfc:	dc000117 	ldw	r16,4(sp)
   84e00:	dec00304 	addi	sp,sp,12
   84e04:	0084ba01 	jmpi	84ba0 <__sflush_r>
   84e08:	d9400015 	stw	r5,0(sp)
   84e0c:	00851a80 	call	851a8 <__sinit>
   84e10:	d9400017 	ldw	r5,0(sp)
   84e14:	003ff006 	br	84dd8 <__alt_data_end+0xfffc65d8>

00084e18 <fflush>:
   84e18:	20000526 	beq	r4,zero,84e30 <fflush+0x18>
   84e1c:	008002b4 	movhi	r2,10
   84e20:	10a83d04 	addi	r2,r2,-24332
   84e24:	200b883a 	mov	r5,r4
   84e28:	11000017 	ldw	r4,0(r2)
   84e2c:	0084dbc1 	jmpi	84dbc <_fflush_r>
   84e30:	008002b4 	movhi	r2,10
   84e34:	10a83c04 	addi	r2,r2,-24336
   84e38:	11000017 	ldw	r4,0(r2)
   84e3c:	01400234 	movhi	r5,8
   84e40:	29536f04 	addi	r5,r5,19900
   84e44:	00856f01 	jmpi	856f0 <_fwalk_reent>

00084e48 <__fp_unlock>:
   84e48:	0005883a 	mov	r2,zero
   84e4c:	f800283a 	ret

00084e50 <_cleanup_r>:
   84e50:	01400274 	movhi	r5,9
   84e54:	29646204 	addi	r5,r5,-28280
   84e58:	00856f01 	jmpi	856f0 <_fwalk_reent>

00084e5c <__sinit.part.1>:
   84e5c:	defff704 	addi	sp,sp,-36
   84e60:	00c00234 	movhi	r3,8
   84e64:	dfc00815 	stw	ra,32(sp)
   84e68:	ddc00715 	stw	r23,28(sp)
   84e6c:	dd800615 	stw	r22,24(sp)
   84e70:	dd400515 	stw	r21,20(sp)
   84e74:	dd000415 	stw	r20,16(sp)
   84e78:	dcc00315 	stw	r19,12(sp)
   84e7c:	dc800215 	stw	r18,8(sp)
   84e80:	dc400115 	stw	r17,4(sp)
   84e84:	dc000015 	stw	r16,0(sp)
   84e88:	18d39404 	addi	r3,r3,20048
   84e8c:	24000117 	ldw	r16,4(r4)
   84e90:	20c00f15 	stw	r3,60(r4)
   84e94:	2080bb04 	addi	r2,r4,748
   84e98:	00c000c4 	movi	r3,3
   84e9c:	20c0b915 	stw	r3,740(r4)
   84ea0:	2080ba15 	stw	r2,744(r4)
   84ea4:	2000b815 	stw	zero,736(r4)
   84ea8:	05c00204 	movi	r23,8
   84eac:	00800104 	movi	r2,4
   84eb0:	2025883a 	mov	r18,r4
   84eb4:	b80d883a 	mov	r6,r23
   84eb8:	81001704 	addi	r4,r16,92
   84ebc:	000b883a 	mov	r5,zero
   84ec0:	80000015 	stw	zero,0(r16)
   84ec4:	80000115 	stw	zero,4(r16)
   84ec8:	80000215 	stw	zero,8(r16)
   84ecc:	8080030d 	sth	r2,12(r16)
   84ed0:	80001915 	stw	zero,100(r16)
   84ed4:	8000038d 	sth	zero,14(r16)
   84ed8:	80000415 	stw	zero,16(r16)
   84edc:	80000515 	stw	zero,20(r16)
   84ee0:	80000615 	stw	zero,24(r16)
   84ee4:	00864840 	call	86484 <memset>
   84ee8:	05800234 	movhi	r22,8
   84eec:	94400217 	ldw	r17,8(r18)
   84ef0:	05400234 	movhi	r21,8
   84ef4:	05000234 	movhi	r20,8
   84ef8:	04c00234 	movhi	r19,8
   84efc:	b59dcb04 	addi	r22,r22,30508
   84f00:	ad5de204 	addi	r21,r21,30600
   84f04:	a51e0104 	addi	r20,r20,30724
   84f08:	9cde1804 	addi	r19,r19,30816
   84f0c:	85800815 	stw	r22,32(r16)
   84f10:	85400915 	stw	r21,36(r16)
   84f14:	85000a15 	stw	r20,40(r16)
   84f18:	84c00b15 	stw	r19,44(r16)
   84f1c:	84000715 	stw	r16,28(r16)
   84f20:	00800284 	movi	r2,10
   84f24:	8880030d 	sth	r2,12(r17)
   84f28:	00800044 	movi	r2,1
   84f2c:	b80d883a 	mov	r6,r23
   84f30:	89001704 	addi	r4,r17,92
   84f34:	000b883a 	mov	r5,zero
   84f38:	88000015 	stw	zero,0(r17)
   84f3c:	88000115 	stw	zero,4(r17)
   84f40:	88000215 	stw	zero,8(r17)
   84f44:	88001915 	stw	zero,100(r17)
   84f48:	8880038d 	sth	r2,14(r17)
   84f4c:	88000415 	stw	zero,16(r17)
   84f50:	88000515 	stw	zero,20(r17)
   84f54:	88000615 	stw	zero,24(r17)
   84f58:	00864840 	call	86484 <memset>
   84f5c:	94000317 	ldw	r16,12(r18)
   84f60:	00800484 	movi	r2,18
   84f64:	8c400715 	stw	r17,28(r17)
   84f68:	8d800815 	stw	r22,32(r17)
   84f6c:	8d400915 	stw	r21,36(r17)
   84f70:	8d000a15 	stw	r20,40(r17)
   84f74:	8cc00b15 	stw	r19,44(r17)
   84f78:	8080030d 	sth	r2,12(r16)
   84f7c:	00800084 	movi	r2,2
   84f80:	80000015 	stw	zero,0(r16)
   84f84:	80000115 	stw	zero,4(r16)
   84f88:	80000215 	stw	zero,8(r16)
   84f8c:	80001915 	stw	zero,100(r16)
   84f90:	8080038d 	sth	r2,14(r16)
   84f94:	80000415 	stw	zero,16(r16)
   84f98:	80000515 	stw	zero,20(r16)
   84f9c:	80000615 	stw	zero,24(r16)
   84fa0:	b80d883a 	mov	r6,r23
   84fa4:	000b883a 	mov	r5,zero
   84fa8:	81001704 	addi	r4,r16,92
   84fac:	00864840 	call	86484 <memset>
   84fb0:	00800044 	movi	r2,1
   84fb4:	84000715 	stw	r16,28(r16)
   84fb8:	85800815 	stw	r22,32(r16)
   84fbc:	85400915 	stw	r21,36(r16)
   84fc0:	85000a15 	stw	r20,40(r16)
   84fc4:	84c00b15 	stw	r19,44(r16)
   84fc8:	90800e15 	stw	r2,56(r18)
   84fcc:	dfc00817 	ldw	ra,32(sp)
   84fd0:	ddc00717 	ldw	r23,28(sp)
   84fd4:	dd800617 	ldw	r22,24(sp)
   84fd8:	dd400517 	ldw	r21,20(sp)
   84fdc:	dd000417 	ldw	r20,16(sp)
   84fe0:	dcc00317 	ldw	r19,12(sp)
   84fe4:	dc800217 	ldw	r18,8(sp)
   84fe8:	dc400117 	ldw	r17,4(sp)
   84fec:	dc000017 	ldw	r16,0(sp)
   84ff0:	dec00904 	addi	sp,sp,36
   84ff4:	f800283a 	ret

00084ff8 <__fp_lock>:
   84ff8:	0005883a 	mov	r2,zero
   84ffc:	f800283a 	ret

00085000 <__sfmoreglue>:
   85000:	defffc04 	addi	sp,sp,-16
   85004:	dc800215 	stw	r18,8(sp)
   85008:	2825883a 	mov	r18,r5
   8500c:	dc000015 	stw	r16,0(sp)
   85010:	01401a04 	movi	r5,104
   85014:	2021883a 	mov	r16,r4
   85018:	913fffc4 	addi	r4,r18,-1
   8501c:	dfc00315 	stw	ra,12(sp)
   85020:	dc400115 	stw	r17,4(sp)
   85024:	008b08c0 	call	8b08c <__mulsi3>
   85028:	8009883a 	mov	r4,r16
   8502c:	11401d04 	addi	r5,r2,116
   85030:	1023883a 	mov	r17,r2
   85034:	0085a4c0 	call	85a4c <_malloc_r>
   85038:	1021883a 	mov	r16,r2
   8503c:	10000726 	beq	r2,zero,8505c <__sfmoreglue+0x5c>
   85040:	11000304 	addi	r4,r2,12
   85044:	10000015 	stw	zero,0(r2)
   85048:	14800115 	stw	r18,4(r2)
   8504c:	11000215 	stw	r4,8(r2)
   85050:	89801a04 	addi	r6,r17,104
   85054:	000b883a 	mov	r5,zero
   85058:	00864840 	call	86484 <memset>
   8505c:	8005883a 	mov	r2,r16
   85060:	dfc00317 	ldw	ra,12(sp)
   85064:	dc800217 	ldw	r18,8(sp)
   85068:	dc400117 	ldw	r17,4(sp)
   8506c:	dc000017 	ldw	r16,0(sp)
   85070:	dec00404 	addi	sp,sp,16
   85074:	f800283a 	ret

00085078 <__sfp>:
   85078:	defffb04 	addi	sp,sp,-20
   8507c:	dc000015 	stw	r16,0(sp)
   85080:	040002b4 	movhi	r16,10
   85084:	84283c04 	addi	r16,r16,-24336
   85088:	dcc00315 	stw	r19,12(sp)
   8508c:	2027883a 	mov	r19,r4
   85090:	81000017 	ldw	r4,0(r16)
   85094:	dfc00415 	stw	ra,16(sp)
   85098:	dc800215 	stw	r18,8(sp)
   8509c:	20800e17 	ldw	r2,56(r4)
   850a0:	dc400115 	stw	r17,4(sp)
   850a4:	1000021e 	bne	r2,zero,850b0 <__sfp+0x38>
   850a8:	0084e5c0 	call	84e5c <__sinit.part.1>
   850ac:	81000017 	ldw	r4,0(r16)
   850b0:	2480b804 	addi	r18,r4,736
   850b4:	047fffc4 	movi	r17,-1
   850b8:	91000117 	ldw	r4,4(r18)
   850bc:	94000217 	ldw	r16,8(r18)
   850c0:	213fffc4 	addi	r4,r4,-1
   850c4:	20000a16 	blt	r4,zero,850f0 <__sfp+0x78>
   850c8:	8080030f 	ldh	r2,12(r16)
   850cc:	10000c26 	beq	r2,zero,85100 <__sfp+0x88>
   850d0:	80c01d04 	addi	r3,r16,116
   850d4:	00000206 	br	850e0 <__sfp+0x68>
   850d8:	18bfe60f 	ldh	r2,-104(r3)
   850dc:	10000826 	beq	r2,zero,85100 <__sfp+0x88>
   850e0:	213fffc4 	addi	r4,r4,-1
   850e4:	1c3ffd04 	addi	r16,r3,-12
   850e8:	18c01a04 	addi	r3,r3,104
   850ec:	247ffa1e 	bne	r4,r17,850d8 <__alt_data_end+0xfffc68d8>
   850f0:	90800017 	ldw	r2,0(r18)
   850f4:	10001d26 	beq	r2,zero,8516c <__sfp+0xf4>
   850f8:	1025883a 	mov	r18,r2
   850fc:	003fee06 	br	850b8 <__alt_data_end+0xfffc68b8>
   85100:	00bfffc4 	movi	r2,-1
   85104:	8080038d 	sth	r2,14(r16)
   85108:	00800044 	movi	r2,1
   8510c:	8080030d 	sth	r2,12(r16)
   85110:	80001915 	stw	zero,100(r16)
   85114:	80000015 	stw	zero,0(r16)
   85118:	80000215 	stw	zero,8(r16)
   8511c:	80000115 	stw	zero,4(r16)
   85120:	80000415 	stw	zero,16(r16)
   85124:	80000515 	stw	zero,20(r16)
   85128:	80000615 	stw	zero,24(r16)
   8512c:	01800204 	movi	r6,8
   85130:	000b883a 	mov	r5,zero
   85134:	81001704 	addi	r4,r16,92
   85138:	00864840 	call	86484 <memset>
   8513c:	8005883a 	mov	r2,r16
   85140:	80000c15 	stw	zero,48(r16)
   85144:	80000d15 	stw	zero,52(r16)
   85148:	80001115 	stw	zero,68(r16)
   8514c:	80001215 	stw	zero,72(r16)
   85150:	dfc00417 	ldw	ra,16(sp)
   85154:	dcc00317 	ldw	r19,12(sp)
   85158:	dc800217 	ldw	r18,8(sp)
   8515c:	dc400117 	ldw	r17,4(sp)
   85160:	dc000017 	ldw	r16,0(sp)
   85164:	dec00504 	addi	sp,sp,20
   85168:	f800283a 	ret
   8516c:	01400104 	movi	r5,4
   85170:	9809883a 	mov	r4,r19
   85174:	00850000 	call	85000 <__sfmoreglue>
   85178:	90800015 	stw	r2,0(r18)
   8517c:	103fde1e 	bne	r2,zero,850f8 <__alt_data_end+0xfffc68f8>
   85180:	00800304 	movi	r2,12
   85184:	98800015 	stw	r2,0(r19)
   85188:	0005883a 	mov	r2,zero
   8518c:	003ff006 	br	85150 <__alt_data_end+0xfffc6950>

00085190 <_cleanup>:
   85190:	008002b4 	movhi	r2,10
   85194:	10a83c04 	addi	r2,r2,-24336
   85198:	11000017 	ldw	r4,0(r2)
   8519c:	01400274 	movhi	r5,9
   851a0:	29646204 	addi	r5,r5,-28280
   851a4:	00856f01 	jmpi	856f0 <_fwalk_reent>

000851a8 <__sinit>:
   851a8:	20800e17 	ldw	r2,56(r4)
   851ac:	10000126 	beq	r2,zero,851b4 <__sinit+0xc>
   851b0:	f800283a 	ret
   851b4:	0084e5c1 	jmpi	84e5c <__sinit.part.1>

000851b8 <__sfp_lock_acquire>:
   851b8:	f800283a 	ret

000851bc <__sfp_lock_release>:
   851bc:	f800283a 	ret

000851c0 <__sinit_lock_acquire>:
   851c0:	f800283a 	ret

000851c4 <__sinit_lock_release>:
   851c4:	f800283a 	ret

000851c8 <__fp_lock_all>:
   851c8:	008002b4 	movhi	r2,10
   851cc:	10a83d04 	addi	r2,r2,-24332
   851d0:	11000017 	ldw	r4,0(r2)
   851d4:	01400234 	movhi	r5,8
   851d8:	2953fe04 	addi	r5,r5,20472
   851dc:	008562c1 	jmpi	8562c <_fwalk>

000851e0 <__fp_unlock_all>:
   851e0:	008002b4 	movhi	r2,10
   851e4:	10a83d04 	addi	r2,r2,-24332
   851e8:	11000017 	ldw	r4,0(r2)
   851ec:	01400234 	movhi	r5,8
   851f0:	29539204 	addi	r5,r5,20040
   851f4:	008562c1 	jmpi	8562c <_fwalk>

000851f8 <_malloc_trim_r>:
   851f8:	defffb04 	addi	sp,sp,-20
   851fc:	dcc00315 	stw	r19,12(sp)
   85200:	04c002b4 	movhi	r19,10
   85204:	dc800215 	stw	r18,8(sp)
   85208:	dc400115 	stw	r17,4(sp)
   8520c:	dc000015 	stw	r16,0(sp)
   85210:	dfc00415 	stw	ra,16(sp)
   85214:	2821883a 	mov	r16,r5
   85218:	9ce2b404 	addi	r19,r19,-30000
   8521c:	2025883a 	mov	r18,r4
   85220:	008e6a80 	call	8e6a8 <__malloc_lock>
   85224:	98800217 	ldw	r2,8(r19)
   85228:	14400117 	ldw	r17,4(r2)
   8522c:	00bfff04 	movi	r2,-4
   85230:	88a2703a 	and	r17,r17,r2
   85234:	8c21c83a 	sub	r16,r17,r16
   85238:	8403fbc4 	addi	r16,r16,4079
   8523c:	8020d33a 	srli	r16,r16,12
   85240:	0083ffc4 	movi	r2,4095
   85244:	843fffc4 	addi	r16,r16,-1
   85248:	8020933a 	slli	r16,r16,12
   8524c:	1400060e 	bge	r2,r16,85268 <_malloc_trim_r+0x70>
   85250:	000b883a 	mov	r5,zero
   85254:	9009883a 	mov	r4,r18
   85258:	00876d80 	call	876d8 <_sbrk_r>
   8525c:	98c00217 	ldw	r3,8(r19)
   85260:	1c47883a 	add	r3,r3,r17
   85264:	10c00a26 	beq	r2,r3,85290 <_malloc_trim_r+0x98>
   85268:	9009883a 	mov	r4,r18
   8526c:	008e7c80 	call	8e7c8 <__malloc_unlock>
   85270:	0005883a 	mov	r2,zero
   85274:	dfc00417 	ldw	ra,16(sp)
   85278:	dcc00317 	ldw	r19,12(sp)
   8527c:	dc800217 	ldw	r18,8(sp)
   85280:	dc400117 	ldw	r17,4(sp)
   85284:	dc000017 	ldw	r16,0(sp)
   85288:	dec00504 	addi	sp,sp,20
   8528c:	f800283a 	ret
   85290:	040bc83a 	sub	r5,zero,r16
   85294:	9009883a 	mov	r4,r18
   85298:	00876d80 	call	876d8 <_sbrk_r>
   8529c:	00ffffc4 	movi	r3,-1
   852a0:	10c00d26 	beq	r2,r3,852d8 <_malloc_trim_r+0xe0>
   852a4:	00c002b4 	movhi	r3,10
   852a8:	18ef7904 	addi	r3,r3,-16924
   852ac:	18800017 	ldw	r2,0(r3)
   852b0:	99000217 	ldw	r4,8(r19)
   852b4:	8c23c83a 	sub	r17,r17,r16
   852b8:	8c400054 	ori	r17,r17,1
   852bc:	1421c83a 	sub	r16,r2,r16
   852c0:	24400115 	stw	r17,4(r4)
   852c4:	9009883a 	mov	r4,r18
   852c8:	1c000015 	stw	r16,0(r3)
   852cc:	008e7c80 	call	8e7c8 <__malloc_unlock>
   852d0:	00800044 	movi	r2,1
   852d4:	003fe706 	br	85274 <__alt_data_end+0xfffc6a74>
   852d8:	000b883a 	mov	r5,zero
   852dc:	9009883a 	mov	r4,r18
   852e0:	00876d80 	call	876d8 <_sbrk_r>
   852e4:	99000217 	ldw	r4,8(r19)
   852e8:	014003c4 	movi	r5,15
   852ec:	1107c83a 	sub	r3,r2,r4
   852f0:	28ffdd0e 	bge	r5,r3,85268 <__alt_data_end+0xfffc6a68>
   852f4:	014002b4 	movhi	r5,10
   852f8:	29683f04 	addi	r5,r5,-24324
   852fc:	29400017 	ldw	r5,0(r5)
   85300:	18c00054 	ori	r3,r3,1
   85304:	20c00115 	stw	r3,4(r4)
   85308:	00c002b4 	movhi	r3,10
   8530c:	1145c83a 	sub	r2,r2,r5
   85310:	18ef7904 	addi	r3,r3,-16924
   85314:	18800015 	stw	r2,0(r3)
   85318:	003fd306 	br	85268 <__alt_data_end+0xfffc6a68>

0008531c <_free_r>:
   8531c:	28004126 	beq	r5,zero,85424 <_free_r+0x108>
   85320:	defffd04 	addi	sp,sp,-12
   85324:	dc400115 	stw	r17,4(sp)
   85328:	dc000015 	stw	r16,0(sp)
   8532c:	2023883a 	mov	r17,r4
   85330:	2821883a 	mov	r16,r5
   85334:	dfc00215 	stw	ra,8(sp)
   85338:	008e6a80 	call	8e6a8 <__malloc_lock>
   8533c:	81ffff17 	ldw	r7,-4(r16)
   85340:	00bfff84 	movi	r2,-2
   85344:	010002b4 	movhi	r4,10
   85348:	81bffe04 	addi	r6,r16,-8
   8534c:	3884703a 	and	r2,r7,r2
   85350:	2122b404 	addi	r4,r4,-30000
   85354:	308b883a 	add	r5,r6,r2
   85358:	2a400117 	ldw	r9,4(r5)
   8535c:	22000217 	ldw	r8,8(r4)
   85360:	00ffff04 	movi	r3,-4
   85364:	48c6703a 	and	r3,r9,r3
   85368:	2a005726 	beq	r5,r8,854c8 <_free_r+0x1ac>
   8536c:	28c00115 	stw	r3,4(r5)
   85370:	39c0004c 	andi	r7,r7,1
   85374:	3800091e 	bne	r7,zero,8539c <_free_r+0x80>
   85378:	823ffe17 	ldw	r8,-8(r16)
   8537c:	22400204 	addi	r9,r4,8
   85380:	320dc83a 	sub	r6,r6,r8
   85384:	31c00217 	ldw	r7,8(r6)
   85388:	1205883a 	add	r2,r2,r8
   8538c:	3a406526 	beq	r7,r9,85524 <_free_r+0x208>
   85390:	32000317 	ldw	r8,12(r6)
   85394:	3a000315 	stw	r8,12(r7)
   85398:	41c00215 	stw	r7,8(r8)
   8539c:	28cf883a 	add	r7,r5,r3
   853a0:	39c00117 	ldw	r7,4(r7)
   853a4:	39c0004c 	andi	r7,r7,1
   853a8:	38003a26 	beq	r7,zero,85494 <_free_r+0x178>
   853ac:	10c00054 	ori	r3,r2,1
   853b0:	30c00115 	stw	r3,4(r6)
   853b4:	3087883a 	add	r3,r6,r2
   853b8:	18800015 	stw	r2,0(r3)
   853bc:	00c07fc4 	movi	r3,511
   853c0:	18801936 	bltu	r3,r2,85428 <_free_r+0x10c>
   853c4:	1004d0fa 	srli	r2,r2,3
   853c8:	01c00044 	movi	r7,1
   853cc:	21400117 	ldw	r5,4(r4)
   853d0:	10c00044 	addi	r3,r2,1
   853d4:	18c7883a 	add	r3,r3,r3
   853d8:	1005d0ba 	srai	r2,r2,2
   853dc:	18c7883a 	add	r3,r3,r3
   853e0:	18c7883a 	add	r3,r3,r3
   853e4:	1907883a 	add	r3,r3,r4
   853e8:	3884983a 	sll	r2,r7,r2
   853ec:	19c00017 	ldw	r7,0(r3)
   853f0:	1a3ffe04 	addi	r8,r3,-8
   853f4:	1144b03a 	or	r2,r2,r5
   853f8:	32000315 	stw	r8,12(r6)
   853fc:	31c00215 	stw	r7,8(r6)
   85400:	20800115 	stw	r2,4(r4)
   85404:	19800015 	stw	r6,0(r3)
   85408:	39800315 	stw	r6,12(r7)
   8540c:	8809883a 	mov	r4,r17
   85410:	dfc00217 	ldw	ra,8(sp)
   85414:	dc400117 	ldw	r17,4(sp)
   85418:	dc000017 	ldw	r16,0(sp)
   8541c:	dec00304 	addi	sp,sp,12
   85420:	008e7c81 	jmpi	8e7c8 <__malloc_unlock>
   85424:	f800283a 	ret
   85428:	100ad27a 	srli	r5,r2,9
   8542c:	00c00104 	movi	r3,4
   85430:	19404a36 	bltu	r3,r5,8555c <_free_r+0x240>
   85434:	100ad1ba 	srli	r5,r2,6
   85438:	28c00e44 	addi	r3,r5,57
   8543c:	18c7883a 	add	r3,r3,r3
   85440:	29400e04 	addi	r5,r5,56
   85444:	18c7883a 	add	r3,r3,r3
   85448:	18c7883a 	add	r3,r3,r3
   8544c:	1909883a 	add	r4,r3,r4
   85450:	20c00017 	ldw	r3,0(r4)
   85454:	01c002b4 	movhi	r7,10
   85458:	213ffe04 	addi	r4,r4,-8
   8545c:	39e2b404 	addi	r7,r7,-30000
   85460:	20c04426 	beq	r4,r3,85574 <_free_r+0x258>
   85464:	01ffff04 	movi	r7,-4
   85468:	19400117 	ldw	r5,4(r3)
   8546c:	29ca703a 	and	r5,r5,r7
   85470:	1140022e 	bgeu	r2,r5,8547c <_free_r+0x160>
   85474:	18c00217 	ldw	r3,8(r3)
   85478:	20fffb1e 	bne	r4,r3,85468 <__alt_data_end+0xfffc6c68>
   8547c:	19000317 	ldw	r4,12(r3)
   85480:	31000315 	stw	r4,12(r6)
   85484:	30c00215 	stw	r3,8(r6)
   85488:	21800215 	stw	r6,8(r4)
   8548c:	19800315 	stw	r6,12(r3)
   85490:	003fde06 	br	8540c <__alt_data_end+0xfffc6c0c>
   85494:	29c00217 	ldw	r7,8(r5)
   85498:	10c5883a 	add	r2,r2,r3
   8549c:	00c002b4 	movhi	r3,10
   854a0:	18e2b604 	addi	r3,r3,-29992
   854a4:	38c03b26 	beq	r7,r3,85594 <_free_r+0x278>
   854a8:	2a000317 	ldw	r8,12(r5)
   854ac:	11400054 	ori	r5,r2,1
   854b0:	3087883a 	add	r3,r6,r2
   854b4:	3a000315 	stw	r8,12(r7)
   854b8:	41c00215 	stw	r7,8(r8)
   854bc:	31400115 	stw	r5,4(r6)
   854c0:	18800015 	stw	r2,0(r3)
   854c4:	003fbd06 	br	853bc <__alt_data_end+0xfffc6bbc>
   854c8:	39c0004c 	andi	r7,r7,1
   854cc:	10c5883a 	add	r2,r2,r3
   854d0:	3800071e 	bne	r7,zero,854f0 <_free_r+0x1d4>
   854d4:	81fffe17 	ldw	r7,-8(r16)
   854d8:	31cdc83a 	sub	r6,r6,r7
   854dc:	30c00317 	ldw	r3,12(r6)
   854e0:	31400217 	ldw	r5,8(r6)
   854e4:	11c5883a 	add	r2,r2,r7
   854e8:	28c00315 	stw	r3,12(r5)
   854ec:	19400215 	stw	r5,8(r3)
   854f0:	10c00054 	ori	r3,r2,1
   854f4:	30c00115 	stw	r3,4(r6)
   854f8:	00c002b4 	movhi	r3,10
   854fc:	18e84004 	addi	r3,r3,-24320
   85500:	18c00017 	ldw	r3,0(r3)
   85504:	21800215 	stw	r6,8(r4)
   85508:	10ffc036 	bltu	r2,r3,8540c <__alt_data_end+0xfffc6c0c>
   8550c:	008002b4 	movhi	r2,10
   85510:	10af5804 	addi	r2,r2,-17056
   85514:	11400017 	ldw	r5,0(r2)
   85518:	8809883a 	mov	r4,r17
   8551c:	00851f80 	call	851f8 <_malloc_trim_r>
   85520:	003fba06 	br	8540c <__alt_data_end+0xfffc6c0c>
   85524:	28c9883a 	add	r4,r5,r3
   85528:	21000117 	ldw	r4,4(r4)
   8552c:	2100004c 	andi	r4,r4,1
   85530:	2000391e 	bne	r4,zero,85618 <_free_r+0x2fc>
   85534:	29c00217 	ldw	r7,8(r5)
   85538:	29000317 	ldw	r4,12(r5)
   8553c:	1885883a 	add	r2,r3,r2
   85540:	10c00054 	ori	r3,r2,1
   85544:	39000315 	stw	r4,12(r7)
   85548:	21c00215 	stw	r7,8(r4)
   8554c:	30c00115 	stw	r3,4(r6)
   85550:	308d883a 	add	r6,r6,r2
   85554:	30800015 	stw	r2,0(r6)
   85558:	003fac06 	br	8540c <__alt_data_end+0xfffc6c0c>
   8555c:	00c00504 	movi	r3,20
   85560:	19401536 	bltu	r3,r5,855b8 <_free_r+0x29c>
   85564:	28c01704 	addi	r3,r5,92
   85568:	18c7883a 	add	r3,r3,r3
   8556c:	294016c4 	addi	r5,r5,91
   85570:	003fb406 	br	85444 <__alt_data_end+0xfffc6c44>
   85574:	280bd0ba 	srai	r5,r5,2
   85578:	00c00044 	movi	r3,1
   8557c:	38800117 	ldw	r2,4(r7)
   85580:	194a983a 	sll	r5,r3,r5
   85584:	2007883a 	mov	r3,r4
   85588:	2884b03a 	or	r2,r5,r2
   8558c:	38800115 	stw	r2,4(r7)
   85590:	003fbb06 	br	85480 <__alt_data_end+0xfffc6c80>
   85594:	21800515 	stw	r6,20(r4)
   85598:	21800415 	stw	r6,16(r4)
   8559c:	10c00054 	ori	r3,r2,1
   855a0:	31c00315 	stw	r7,12(r6)
   855a4:	31c00215 	stw	r7,8(r6)
   855a8:	30c00115 	stw	r3,4(r6)
   855ac:	308d883a 	add	r6,r6,r2
   855b0:	30800015 	stw	r2,0(r6)
   855b4:	003f9506 	br	8540c <__alt_data_end+0xfffc6c0c>
   855b8:	00c01504 	movi	r3,84
   855bc:	19400536 	bltu	r3,r5,855d4 <_free_r+0x2b8>
   855c0:	100ad33a 	srli	r5,r2,12
   855c4:	28c01bc4 	addi	r3,r5,111
   855c8:	18c7883a 	add	r3,r3,r3
   855cc:	29401b84 	addi	r5,r5,110
   855d0:	003f9c06 	br	85444 <__alt_data_end+0xfffc6c44>
   855d4:	00c05504 	movi	r3,340
   855d8:	19400536 	bltu	r3,r5,855f0 <_free_r+0x2d4>
   855dc:	100ad3fa 	srli	r5,r2,15
   855e0:	28c01e04 	addi	r3,r5,120
   855e4:	18c7883a 	add	r3,r3,r3
   855e8:	29401dc4 	addi	r5,r5,119
   855ec:	003f9506 	br	85444 <__alt_data_end+0xfffc6c44>
   855f0:	00c15504 	movi	r3,1364
   855f4:	19400536 	bltu	r3,r5,8560c <_free_r+0x2f0>
   855f8:	100ad4ba 	srli	r5,r2,18
   855fc:	28c01f44 	addi	r3,r5,125
   85600:	18c7883a 	add	r3,r3,r3
   85604:	29401f04 	addi	r5,r5,124
   85608:	003f8e06 	br	85444 <__alt_data_end+0xfffc6c44>
   8560c:	00c03f84 	movi	r3,254
   85610:	01401f84 	movi	r5,126
   85614:	003f8b06 	br	85444 <__alt_data_end+0xfffc6c44>
   85618:	10c00054 	ori	r3,r2,1
   8561c:	30c00115 	stw	r3,4(r6)
   85620:	308d883a 	add	r6,r6,r2
   85624:	30800015 	stw	r2,0(r6)
   85628:	003f7806 	br	8540c <__alt_data_end+0xfffc6c0c>

0008562c <_fwalk>:
   8562c:	defff704 	addi	sp,sp,-36
   85630:	dd000415 	stw	r20,16(sp)
   85634:	dfc00815 	stw	ra,32(sp)
   85638:	ddc00715 	stw	r23,28(sp)
   8563c:	dd800615 	stw	r22,24(sp)
   85640:	dd400515 	stw	r21,20(sp)
   85644:	dcc00315 	stw	r19,12(sp)
   85648:	dc800215 	stw	r18,8(sp)
   8564c:	dc400115 	stw	r17,4(sp)
   85650:	dc000015 	stw	r16,0(sp)
   85654:	2500b804 	addi	r20,r4,736
   85658:	a0002326 	beq	r20,zero,856e8 <_fwalk+0xbc>
   8565c:	282b883a 	mov	r21,r5
   85660:	002f883a 	mov	r23,zero
   85664:	05800044 	movi	r22,1
   85668:	04ffffc4 	movi	r19,-1
   8566c:	a4400117 	ldw	r17,4(r20)
   85670:	a4800217 	ldw	r18,8(r20)
   85674:	8c7fffc4 	addi	r17,r17,-1
   85678:	88000d16 	blt	r17,zero,856b0 <_fwalk+0x84>
   8567c:	94000304 	addi	r16,r18,12
   85680:	94800384 	addi	r18,r18,14
   85684:	8080000b 	ldhu	r2,0(r16)
   85688:	8c7fffc4 	addi	r17,r17,-1
   8568c:	813ffd04 	addi	r4,r16,-12
   85690:	b080042e 	bgeu	r22,r2,856a4 <_fwalk+0x78>
   85694:	9080000f 	ldh	r2,0(r18)
   85698:	14c00226 	beq	r2,r19,856a4 <_fwalk+0x78>
   8569c:	a83ee83a 	callr	r21
   856a0:	b8aeb03a 	or	r23,r23,r2
   856a4:	84001a04 	addi	r16,r16,104
   856a8:	94801a04 	addi	r18,r18,104
   856ac:	8cfff51e 	bne	r17,r19,85684 <__alt_data_end+0xfffc6e84>
   856b0:	a5000017 	ldw	r20,0(r20)
   856b4:	a03fed1e 	bne	r20,zero,8566c <__alt_data_end+0xfffc6e6c>
   856b8:	b805883a 	mov	r2,r23
   856bc:	dfc00817 	ldw	ra,32(sp)
   856c0:	ddc00717 	ldw	r23,28(sp)
   856c4:	dd800617 	ldw	r22,24(sp)
   856c8:	dd400517 	ldw	r21,20(sp)
   856cc:	dd000417 	ldw	r20,16(sp)
   856d0:	dcc00317 	ldw	r19,12(sp)
   856d4:	dc800217 	ldw	r18,8(sp)
   856d8:	dc400117 	ldw	r17,4(sp)
   856dc:	dc000017 	ldw	r16,0(sp)
   856e0:	dec00904 	addi	sp,sp,36
   856e4:	f800283a 	ret
   856e8:	002f883a 	mov	r23,zero
   856ec:	003ff206 	br	856b8 <__alt_data_end+0xfffc6eb8>

000856f0 <_fwalk_reent>:
   856f0:	defff704 	addi	sp,sp,-36
   856f4:	dd000415 	stw	r20,16(sp)
   856f8:	dfc00815 	stw	ra,32(sp)
   856fc:	ddc00715 	stw	r23,28(sp)
   85700:	dd800615 	stw	r22,24(sp)
   85704:	dd400515 	stw	r21,20(sp)
   85708:	dcc00315 	stw	r19,12(sp)
   8570c:	dc800215 	stw	r18,8(sp)
   85710:	dc400115 	stw	r17,4(sp)
   85714:	dc000015 	stw	r16,0(sp)
   85718:	2500b804 	addi	r20,r4,736
   8571c:	a0002326 	beq	r20,zero,857ac <_fwalk_reent+0xbc>
   85720:	282b883a 	mov	r21,r5
   85724:	2027883a 	mov	r19,r4
   85728:	002f883a 	mov	r23,zero
   8572c:	05800044 	movi	r22,1
   85730:	04bfffc4 	movi	r18,-1
   85734:	a4400117 	ldw	r17,4(r20)
   85738:	a4000217 	ldw	r16,8(r20)
   8573c:	8c7fffc4 	addi	r17,r17,-1
   85740:	88000c16 	blt	r17,zero,85774 <_fwalk_reent+0x84>
   85744:	84000304 	addi	r16,r16,12
   85748:	8080000b 	ldhu	r2,0(r16)
   8574c:	8c7fffc4 	addi	r17,r17,-1
   85750:	817ffd04 	addi	r5,r16,-12
   85754:	b080052e 	bgeu	r22,r2,8576c <_fwalk_reent+0x7c>
   85758:	8080008f 	ldh	r2,2(r16)
   8575c:	9809883a 	mov	r4,r19
   85760:	14800226 	beq	r2,r18,8576c <_fwalk_reent+0x7c>
   85764:	a83ee83a 	callr	r21
   85768:	b8aeb03a 	or	r23,r23,r2
   8576c:	84001a04 	addi	r16,r16,104
   85770:	8cbff51e 	bne	r17,r18,85748 <__alt_data_end+0xfffc6f48>
   85774:	a5000017 	ldw	r20,0(r20)
   85778:	a03fee1e 	bne	r20,zero,85734 <__alt_data_end+0xfffc6f34>
   8577c:	b805883a 	mov	r2,r23
   85780:	dfc00817 	ldw	ra,32(sp)
   85784:	ddc00717 	ldw	r23,28(sp)
   85788:	dd800617 	ldw	r22,24(sp)
   8578c:	dd400517 	ldw	r21,20(sp)
   85790:	dd000417 	ldw	r20,16(sp)
   85794:	dcc00317 	ldw	r19,12(sp)
   85798:	dc800217 	ldw	r18,8(sp)
   8579c:	dc400117 	ldw	r17,4(sp)
   857a0:	dc000017 	ldw	r16,0(sp)
   857a4:	dec00904 	addi	sp,sp,36
   857a8:	f800283a 	ret
   857ac:	002f883a 	mov	r23,zero
   857b0:	003ff206 	br	8577c <__alt_data_end+0xfffc6f7c>

000857b4 <_setlocale_r>:
   857b4:	30001b26 	beq	r6,zero,85824 <_setlocale_r+0x70>
   857b8:	014002b4 	movhi	r5,10
   857bc:	defffe04 	addi	sp,sp,-8
   857c0:	2960a304 	addi	r5,r5,-32116
   857c4:	3009883a 	mov	r4,r6
   857c8:	dc000015 	stw	r16,0(sp)
   857cc:	dfc00115 	stw	ra,4(sp)
   857d0:	3021883a 	mov	r16,r6
   857d4:	0080c540 	call	80c54 <strcmp>
   857d8:	1000061e 	bne	r2,zero,857f4 <_setlocale_r+0x40>
   857dc:	008002b4 	movhi	r2,10
   857e0:	10a0a204 	addi	r2,r2,-32120
   857e4:	dfc00117 	ldw	ra,4(sp)
   857e8:	dc000017 	ldw	r16,0(sp)
   857ec:	dec00204 	addi	sp,sp,8
   857f0:	f800283a 	ret
   857f4:	014002b4 	movhi	r5,10
   857f8:	2960a204 	addi	r5,r5,-32120
   857fc:	8009883a 	mov	r4,r16
   85800:	0080c540 	call	80c54 <strcmp>
   85804:	103ff526 	beq	r2,zero,857dc <__alt_data_end+0xfffc6fdc>
   85808:	014002b4 	movhi	r5,10
   8580c:	29608d04 	addi	r5,r5,-32204
   85810:	8009883a 	mov	r4,r16
   85814:	0080c540 	call	80c54 <strcmp>
   85818:	103ff026 	beq	r2,zero,857dc <__alt_data_end+0xfffc6fdc>
   8581c:	0005883a 	mov	r2,zero
   85820:	003ff006 	br	857e4 <__alt_data_end+0xfffc6fe4>
   85824:	008002b4 	movhi	r2,10
   85828:	10a0a204 	addi	r2,r2,-32120
   8582c:	f800283a 	ret

00085830 <__locale_charset>:
   85830:	008002b4 	movhi	r2,10
   85834:	10a29e04 	addi	r2,r2,-30088
   85838:	f800283a 	ret

0008583c <__locale_mb_cur_max>:
   8583c:	008002b4 	movhi	r2,10
   85840:	10a83e04 	addi	r2,r2,-24328
   85844:	10800017 	ldw	r2,0(r2)
   85848:	f800283a 	ret

0008584c <__locale_msgcharset>:
   8584c:	008002b4 	movhi	r2,10
   85850:	10a29604 	addi	r2,r2,-30120
   85854:	f800283a 	ret

00085858 <__locale_cjk_lang>:
   85858:	0005883a 	mov	r2,zero
   8585c:	f800283a 	ret

00085860 <_localeconv_r>:
   85860:	008002b4 	movhi	r2,10
   85864:	10a2a604 	addi	r2,r2,-30056
   85868:	f800283a 	ret

0008586c <setlocale>:
   8586c:	008002b4 	movhi	r2,10
   85870:	10a83d04 	addi	r2,r2,-24332
   85874:	280d883a 	mov	r6,r5
   85878:	200b883a 	mov	r5,r4
   8587c:	11000017 	ldw	r4,0(r2)
   85880:	00857b41 	jmpi	857b4 <_setlocale_r>

00085884 <localeconv>:
   85884:	008002b4 	movhi	r2,10
   85888:	10a2a604 	addi	r2,r2,-30056
   8588c:	f800283a 	ret

00085890 <__smakebuf_r>:
   85890:	2880030b 	ldhu	r2,12(r5)
   85894:	10c0008c 	andi	r3,r2,2
   85898:	1800411e 	bne	r3,zero,859a0 <__smakebuf_r+0x110>
   8589c:	deffec04 	addi	sp,sp,-80
   858a0:	dc000f15 	stw	r16,60(sp)
   858a4:	2821883a 	mov	r16,r5
   858a8:	2940038f 	ldh	r5,14(r5)
   858ac:	dc401015 	stw	r17,64(sp)
   858b0:	dfc01315 	stw	ra,76(sp)
   858b4:	dcc01215 	stw	r19,72(sp)
   858b8:	dc801115 	stw	r18,68(sp)
   858bc:	2023883a 	mov	r17,r4
   858c0:	28001c16 	blt	r5,zero,85934 <__smakebuf_r+0xa4>
   858c4:	d80d883a 	mov	r6,sp
   858c8:	00894940 	call	89494 <_fstat_r>
   858cc:	10001816 	blt	r2,zero,85930 <__smakebuf_r+0xa0>
   858d0:	d8800117 	ldw	r2,4(sp)
   858d4:	00e00014 	movui	r3,32768
   858d8:	10bc000c 	andi	r2,r2,61440
   858dc:	14c80020 	cmpeqi	r19,r2,8192
   858e0:	10c03726 	beq	r2,r3,859c0 <__smakebuf_r+0x130>
   858e4:	80c0030b 	ldhu	r3,12(r16)
   858e8:	18c20014 	ori	r3,r3,2048
   858ec:	80c0030d 	sth	r3,12(r16)
   858f0:	00c80004 	movi	r3,8192
   858f4:	10c0521e 	bne	r2,r3,85a40 <__smakebuf_r+0x1b0>
   858f8:	8140038f 	ldh	r5,14(r16)
   858fc:	8809883a 	mov	r4,r17
   85900:	00899b80 	call	899b8 <_isatty_r>
   85904:	10004c26 	beq	r2,zero,85a38 <__smakebuf_r+0x1a8>
   85908:	8080030b 	ldhu	r2,12(r16)
   8590c:	80c010c4 	addi	r3,r16,67
   85910:	80c00015 	stw	r3,0(r16)
   85914:	10800054 	ori	r2,r2,1
   85918:	8080030d 	sth	r2,12(r16)
   8591c:	00800044 	movi	r2,1
   85920:	80c00415 	stw	r3,16(r16)
   85924:	80800515 	stw	r2,20(r16)
   85928:	04810004 	movi	r18,1024
   8592c:	00000706 	br	8594c <__smakebuf_r+0xbc>
   85930:	8080030b 	ldhu	r2,12(r16)
   85934:	10c0200c 	andi	r3,r2,128
   85938:	18001f1e 	bne	r3,zero,859b8 <__smakebuf_r+0x128>
   8593c:	04810004 	movi	r18,1024
   85940:	10820014 	ori	r2,r2,2048
   85944:	8080030d 	sth	r2,12(r16)
   85948:	0027883a 	mov	r19,zero
   8594c:	900b883a 	mov	r5,r18
   85950:	8809883a 	mov	r4,r17
   85954:	0085a4c0 	call	85a4c <_malloc_r>
   85958:	10002c26 	beq	r2,zero,85a0c <__smakebuf_r+0x17c>
   8595c:	80c0030b 	ldhu	r3,12(r16)
   85960:	01000234 	movhi	r4,8
   85964:	21139404 	addi	r4,r4,20048
   85968:	89000f15 	stw	r4,60(r17)
   8596c:	18c02014 	ori	r3,r3,128
   85970:	80c0030d 	sth	r3,12(r16)
   85974:	80800015 	stw	r2,0(r16)
   85978:	80800415 	stw	r2,16(r16)
   8597c:	84800515 	stw	r18,20(r16)
   85980:	98001a1e 	bne	r19,zero,859ec <__smakebuf_r+0x15c>
   85984:	dfc01317 	ldw	ra,76(sp)
   85988:	dcc01217 	ldw	r19,72(sp)
   8598c:	dc801117 	ldw	r18,68(sp)
   85990:	dc401017 	ldw	r17,64(sp)
   85994:	dc000f17 	ldw	r16,60(sp)
   85998:	dec01404 	addi	sp,sp,80
   8599c:	f800283a 	ret
   859a0:	288010c4 	addi	r2,r5,67
   859a4:	28800015 	stw	r2,0(r5)
   859a8:	28800415 	stw	r2,16(r5)
   859ac:	00800044 	movi	r2,1
   859b0:	28800515 	stw	r2,20(r5)
   859b4:	f800283a 	ret
   859b8:	04801004 	movi	r18,64
   859bc:	003fe006 	br	85940 <__alt_data_end+0xfffc7140>
   859c0:	81000a17 	ldw	r4,40(r16)
   859c4:	00c00234 	movhi	r3,8
   859c8:	18de0104 	addi	r3,r3,30724
   859cc:	20ffc51e 	bne	r4,r3,858e4 <__alt_data_end+0xfffc70e4>
   859d0:	8080030b 	ldhu	r2,12(r16)
   859d4:	04810004 	movi	r18,1024
   859d8:	84801315 	stw	r18,76(r16)
   859dc:	1484b03a 	or	r2,r2,r18
   859e0:	8080030d 	sth	r2,12(r16)
   859e4:	0027883a 	mov	r19,zero
   859e8:	003fd806 	br	8594c <__alt_data_end+0xfffc714c>
   859ec:	8140038f 	ldh	r5,14(r16)
   859f0:	8809883a 	mov	r4,r17
   859f4:	00899b80 	call	899b8 <_isatty_r>
   859f8:	103fe226 	beq	r2,zero,85984 <__alt_data_end+0xfffc7184>
   859fc:	8080030b 	ldhu	r2,12(r16)
   85a00:	10800054 	ori	r2,r2,1
   85a04:	8080030d 	sth	r2,12(r16)
   85a08:	003fde06 	br	85984 <__alt_data_end+0xfffc7184>
   85a0c:	8080030b 	ldhu	r2,12(r16)
   85a10:	10c0800c 	andi	r3,r2,512
   85a14:	183fdb1e 	bne	r3,zero,85984 <__alt_data_end+0xfffc7184>
   85a18:	10800094 	ori	r2,r2,2
   85a1c:	80c010c4 	addi	r3,r16,67
   85a20:	8080030d 	sth	r2,12(r16)
   85a24:	00800044 	movi	r2,1
   85a28:	80c00015 	stw	r3,0(r16)
   85a2c:	80c00415 	stw	r3,16(r16)
   85a30:	80800515 	stw	r2,20(r16)
   85a34:	003fd306 	br	85984 <__alt_data_end+0xfffc7184>
   85a38:	04810004 	movi	r18,1024
   85a3c:	003fc306 	br	8594c <__alt_data_end+0xfffc714c>
   85a40:	0027883a 	mov	r19,zero
   85a44:	04810004 	movi	r18,1024
   85a48:	003fc006 	br	8594c <__alt_data_end+0xfffc714c>

00085a4c <_malloc_r>:
   85a4c:	defff504 	addi	sp,sp,-44
   85a50:	dc800315 	stw	r18,12(sp)
   85a54:	dfc00a15 	stw	ra,40(sp)
   85a58:	df000915 	stw	fp,36(sp)
   85a5c:	ddc00815 	stw	r23,32(sp)
   85a60:	dd800715 	stw	r22,28(sp)
   85a64:	dd400615 	stw	r21,24(sp)
   85a68:	dd000515 	stw	r20,20(sp)
   85a6c:	dcc00415 	stw	r19,16(sp)
   85a70:	dc400215 	stw	r17,8(sp)
   85a74:	dc000115 	stw	r16,4(sp)
   85a78:	288002c4 	addi	r2,r5,11
   85a7c:	00c00584 	movi	r3,22
   85a80:	2025883a 	mov	r18,r4
   85a84:	18807f2e 	bgeu	r3,r2,85c84 <_malloc_r+0x238>
   85a88:	047ffe04 	movi	r17,-8
   85a8c:	1462703a 	and	r17,r2,r17
   85a90:	8800a316 	blt	r17,zero,85d20 <_malloc_r+0x2d4>
   85a94:	8940a236 	bltu	r17,r5,85d20 <_malloc_r+0x2d4>
   85a98:	008e6a80 	call	8e6a8 <__malloc_lock>
   85a9c:	00807dc4 	movi	r2,503
   85aa0:	1441e92e 	bgeu	r2,r17,86248 <_malloc_r+0x7fc>
   85aa4:	8804d27a 	srli	r2,r17,9
   85aa8:	1000a126 	beq	r2,zero,85d30 <_malloc_r+0x2e4>
   85aac:	00c00104 	movi	r3,4
   85ab0:	18811e36 	bltu	r3,r2,85f2c <_malloc_r+0x4e0>
   85ab4:	8804d1ba 	srli	r2,r17,6
   85ab8:	12000e44 	addi	r8,r2,57
   85abc:	11c00e04 	addi	r7,r2,56
   85ac0:	4209883a 	add	r4,r8,r8
   85ac4:	04c002b4 	movhi	r19,10
   85ac8:	2109883a 	add	r4,r4,r4
   85acc:	9ce2b404 	addi	r19,r19,-30000
   85ad0:	2109883a 	add	r4,r4,r4
   85ad4:	9909883a 	add	r4,r19,r4
   85ad8:	24000117 	ldw	r16,4(r4)
   85adc:	213ffe04 	addi	r4,r4,-8
   85ae0:	24009726 	beq	r4,r16,85d40 <_malloc_r+0x2f4>
   85ae4:	80800117 	ldw	r2,4(r16)
   85ae8:	01bfff04 	movi	r6,-4
   85aec:	014003c4 	movi	r5,15
   85af0:	1184703a 	and	r2,r2,r6
   85af4:	1447c83a 	sub	r3,r2,r17
   85af8:	28c00716 	blt	r5,r3,85b18 <_malloc_r+0xcc>
   85afc:	1800920e 	bge	r3,zero,85d48 <_malloc_r+0x2fc>
   85b00:	84000317 	ldw	r16,12(r16)
   85b04:	24008e26 	beq	r4,r16,85d40 <_malloc_r+0x2f4>
   85b08:	80800117 	ldw	r2,4(r16)
   85b0c:	1184703a 	and	r2,r2,r6
   85b10:	1447c83a 	sub	r3,r2,r17
   85b14:	28fff90e 	bge	r5,r3,85afc <__alt_data_end+0xfffc72fc>
   85b18:	3809883a 	mov	r4,r7
   85b1c:	018002b4 	movhi	r6,10
   85b20:	9c000417 	ldw	r16,16(r19)
   85b24:	31a2b404 	addi	r6,r6,-30000
   85b28:	32000204 	addi	r8,r6,8
   85b2c:	82013426 	beq	r16,r8,86000 <_malloc_r+0x5b4>
   85b30:	80c00117 	ldw	r3,4(r16)
   85b34:	00bfff04 	movi	r2,-4
   85b38:	188e703a 	and	r7,r3,r2
   85b3c:	3c45c83a 	sub	r2,r7,r17
   85b40:	00c003c4 	movi	r3,15
   85b44:	18811f16 	blt	r3,r2,85fc4 <_malloc_r+0x578>
   85b48:	32000515 	stw	r8,20(r6)
   85b4c:	32000415 	stw	r8,16(r6)
   85b50:	10007f0e 	bge	r2,zero,85d50 <_malloc_r+0x304>
   85b54:	00807fc4 	movi	r2,511
   85b58:	11c0fd36 	bltu	r2,r7,85f50 <_malloc_r+0x504>
   85b5c:	3806d0fa 	srli	r3,r7,3
   85b60:	01c00044 	movi	r7,1
   85b64:	30800117 	ldw	r2,4(r6)
   85b68:	19400044 	addi	r5,r3,1
   85b6c:	294b883a 	add	r5,r5,r5
   85b70:	1807d0ba 	srai	r3,r3,2
   85b74:	294b883a 	add	r5,r5,r5
   85b78:	294b883a 	add	r5,r5,r5
   85b7c:	298b883a 	add	r5,r5,r6
   85b80:	38c6983a 	sll	r3,r7,r3
   85b84:	29c00017 	ldw	r7,0(r5)
   85b88:	2a7ffe04 	addi	r9,r5,-8
   85b8c:	1886b03a 	or	r3,r3,r2
   85b90:	82400315 	stw	r9,12(r16)
   85b94:	81c00215 	stw	r7,8(r16)
   85b98:	30c00115 	stw	r3,4(r6)
   85b9c:	2c000015 	stw	r16,0(r5)
   85ba0:	3c000315 	stw	r16,12(r7)
   85ba4:	2005d0ba 	srai	r2,r4,2
   85ba8:	01400044 	movi	r5,1
   85bac:	288a983a 	sll	r5,r5,r2
   85bb0:	19406f36 	bltu	r3,r5,85d70 <_malloc_r+0x324>
   85bb4:	28c4703a 	and	r2,r5,r3
   85bb8:	10000a1e 	bne	r2,zero,85be4 <_malloc_r+0x198>
   85bbc:	00bfff04 	movi	r2,-4
   85bc0:	294b883a 	add	r5,r5,r5
   85bc4:	2088703a 	and	r4,r4,r2
   85bc8:	28c4703a 	and	r2,r5,r3
   85bcc:	21000104 	addi	r4,r4,4
   85bd0:	1000041e 	bne	r2,zero,85be4 <_malloc_r+0x198>
   85bd4:	294b883a 	add	r5,r5,r5
   85bd8:	28c4703a 	and	r2,r5,r3
   85bdc:	21000104 	addi	r4,r4,4
   85be0:	103ffc26 	beq	r2,zero,85bd4 <__alt_data_end+0xfffc73d4>
   85be4:	02bfff04 	movi	r10,-4
   85be8:	024003c4 	movi	r9,15
   85bec:	21800044 	addi	r6,r4,1
   85bf0:	318d883a 	add	r6,r6,r6
   85bf4:	318d883a 	add	r6,r6,r6
   85bf8:	318d883a 	add	r6,r6,r6
   85bfc:	998d883a 	add	r6,r19,r6
   85c00:	333ffe04 	addi	r12,r6,-8
   85c04:	2017883a 	mov	r11,r4
   85c08:	31800104 	addi	r6,r6,4
   85c0c:	34000017 	ldw	r16,0(r6)
   85c10:	31fffd04 	addi	r7,r6,-12
   85c14:	81c0041e 	bne	r16,r7,85c28 <_malloc_r+0x1dc>
   85c18:	0000fb06 	br	86008 <_malloc_r+0x5bc>
   85c1c:	1801030e 	bge	r3,zero,8602c <_malloc_r+0x5e0>
   85c20:	84000317 	ldw	r16,12(r16)
   85c24:	81c0f826 	beq	r16,r7,86008 <_malloc_r+0x5bc>
   85c28:	80800117 	ldw	r2,4(r16)
   85c2c:	1284703a 	and	r2,r2,r10
   85c30:	1447c83a 	sub	r3,r2,r17
   85c34:	48fff90e 	bge	r9,r3,85c1c <__alt_data_end+0xfffc741c>
   85c38:	80800317 	ldw	r2,12(r16)
   85c3c:	81000217 	ldw	r4,8(r16)
   85c40:	89400054 	ori	r5,r17,1
   85c44:	81400115 	stw	r5,4(r16)
   85c48:	20800315 	stw	r2,12(r4)
   85c4c:	11000215 	stw	r4,8(r2)
   85c50:	8463883a 	add	r17,r16,r17
   85c54:	9c400515 	stw	r17,20(r19)
   85c58:	9c400415 	stw	r17,16(r19)
   85c5c:	18800054 	ori	r2,r3,1
   85c60:	88800115 	stw	r2,4(r17)
   85c64:	8a000315 	stw	r8,12(r17)
   85c68:	8a000215 	stw	r8,8(r17)
   85c6c:	88e3883a 	add	r17,r17,r3
   85c70:	88c00015 	stw	r3,0(r17)
   85c74:	9009883a 	mov	r4,r18
   85c78:	008e7c80 	call	8e7c8 <__malloc_unlock>
   85c7c:	80800204 	addi	r2,r16,8
   85c80:	00001b06 	br	85cf0 <_malloc_r+0x2a4>
   85c84:	04400404 	movi	r17,16
   85c88:	89402536 	bltu	r17,r5,85d20 <_malloc_r+0x2d4>
   85c8c:	008e6a80 	call	8e6a8 <__malloc_lock>
   85c90:	00800184 	movi	r2,6
   85c94:	01000084 	movi	r4,2
   85c98:	04c002b4 	movhi	r19,10
   85c9c:	1085883a 	add	r2,r2,r2
   85ca0:	9ce2b404 	addi	r19,r19,-30000
   85ca4:	1085883a 	add	r2,r2,r2
   85ca8:	9885883a 	add	r2,r19,r2
   85cac:	14000117 	ldw	r16,4(r2)
   85cb0:	10fffe04 	addi	r3,r2,-8
   85cb4:	80c0d926 	beq	r16,r3,8601c <_malloc_r+0x5d0>
   85cb8:	80c00117 	ldw	r3,4(r16)
   85cbc:	81000317 	ldw	r4,12(r16)
   85cc0:	00bfff04 	movi	r2,-4
   85cc4:	1884703a 	and	r2,r3,r2
   85cc8:	81400217 	ldw	r5,8(r16)
   85ccc:	8085883a 	add	r2,r16,r2
   85cd0:	10c00117 	ldw	r3,4(r2)
   85cd4:	29000315 	stw	r4,12(r5)
   85cd8:	21400215 	stw	r5,8(r4)
   85cdc:	18c00054 	ori	r3,r3,1
   85ce0:	10c00115 	stw	r3,4(r2)
   85ce4:	9009883a 	mov	r4,r18
   85ce8:	008e7c80 	call	8e7c8 <__malloc_unlock>
   85cec:	80800204 	addi	r2,r16,8
   85cf0:	dfc00a17 	ldw	ra,40(sp)
   85cf4:	df000917 	ldw	fp,36(sp)
   85cf8:	ddc00817 	ldw	r23,32(sp)
   85cfc:	dd800717 	ldw	r22,28(sp)
   85d00:	dd400617 	ldw	r21,24(sp)
   85d04:	dd000517 	ldw	r20,20(sp)
   85d08:	dcc00417 	ldw	r19,16(sp)
   85d0c:	dc800317 	ldw	r18,12(sp)
   85d10:	dc400217 	ldw	r17,8(sp)
   85d14:	dc000117 	ldw	r16,4(sp)
   85d18:	dec00b04 	addi	sp,sp,44
   85d1c:	f800283a 	ret
   85d20:	00800304 	movi	r2,12
   85d24:	90800015 	stw	r2,0(r18)
   85d28:	0005883a 	mov	r2,zero
   85d2c:	003ff006 	br	85cf0 <__alt_data_end+0xfffc74f0>
   85d30:	01002004 	movi	r4,128
   85d34:	02001004 	movi	r8,64
   85d38:	01c00fc4 	movi	r7,63
   85d3c:	003f6106 	br	85ac4 <__alt_data_end+0xfffc72c4>
   85d40:	4009883a 	mov	r4,r8
   85d44:	003f7506 	br	85b1c <__alt_data_end+0xfffc731c>
   85d48:	81000317 	ldw	r4,12(r16)
   85d4c:	003fde06 	br	85cc8 <__alt_data_end+0xfffc74c8>
   85d50:	81c5883a 	add	r2,r16,r7
   85d54:	11400117 	ldw	r5,4(r2)
   85d58:	9009883a 	mov	r4,r18
   85d5c:	29400054 	ori	r5,r5,1
   85d60:	11400115 	stw	r5,4(r2)
   85d64:	008e7c80 	call	8e7c8 <__malloc_unlock>
   85d68:	80800204 	addi	r2,r16,8
   85d6c:	003fe006 	br	85cf0 <__alt_data_end+0xfffc74f0>
   85d70:	9c000217 	ldw	r16,8(r19)
   85d74:	00bfff04 	movi	r2,-4
   85d78:	85800117 	ldw	r22,4(r16)
   85d7c:	b0ac703a 	and	r22,r22,r2
   85d80:	b4400336 	bltu	r22,r17,85d90 <_malloc_r+0x344>
   85d84:	b445c83a 	sub	r2,r22,r17
   85d88:	00c003c4 	movi	r3,15
   85d8c:	18805d16 	blt	r3,r2,85f04 <_malloc_r+0x4b8>
   85d90:	05c002b4 	movhi	r23,10
   85d94:	008002b4 	movhi	r2,10
   85d98:	10af5804 	addi	r2,r2,-17056
   85d9c:	bde83f04 	addi	r23,r23,-24324
   85da0:	15400017 	ldw	r21,0(r2)
   85da4:	b8c00017 	ldw	r3,0(r23)
   85da8:	00bfffc4 	movi	r2,-1
   85dac:	858d883a 	add	r6,r16,r22
   85db0:	8d6b883a 	add	r21,r17,r21
   85db4:	1880ea26 	beq	r3,r2,86160 <_malloc_r+0x714>
   85db8:	ad4403c4 	addi	r21,r21,4111
   85dbc:	00bc0004 	movi	r2,-4096
   85dc0:	a8aa703a 	and	r21,r21,r2
   85dc4:	a80b883a 	mov	r5,r21
   85dc8:	9009883a 	mov	r4,r18
   85dcc:	d9800015 	stw	r6,0(sp)
   85dd0:	00876d80 	call	876d8 <_sbrk_r>
   85dd4:	1029883a 	mov	r20,r2
   85dd8:	00bfffc4 	movi	r2,-1
   85ddc:	d9800017 	ldw	r6,0(sp)
   85de0:	a080e826 	beq	r20,r2,86184 <_malloc_r+0x738>
   85de4:	a180a636 	bltu	r20,r6,86080 <_malloc_r+0x634>
   85de8:	070002b4 	movhi	fp,10
   85dec:	e72f7904 	addi	fp,fp,-16924
   85df0:	e0800017 	ldw	r2,0(fp)
   85df4:	a887883a 	add	r3,r21,r2
   85df8:	e0c00015 	stw	r3,0(fp)
   85dfc:	3500e626 	beq	r6,r20,86198 <_malloc_r+0x74c>
   85e00:	b9000017 	ldw	r4,0(r23)
   85e04:	00bfffc4 	movi	r2,-1
   85e08:	2080ee26 	beq	r4,r2,861c4 <_malloc_r+0x778>
   85e0c:	a185c83a 	sub	r2,r20,r6
   85e10:	10c5883a 	add	r2,r2,r3
   85e14:	e0800015 	stw	r2,0(fp)
   85e18:	a0c001cc 	andi	r3,r20,7
   85e1c:	1800bc26 	beq	r3,zero,86110 <_malloc_r+0x6c4>
   85e20:	a0e9c83a 	sub	r20,r20,r3
   85e24:	00840204 	movi	r2,4104
   85e28:	a5000204 	addi	r20,r20,8
   85e2c:	10c7c83a 	sub	r3,r2,r3
   85e30:	a545883a 	add	r2,r20,r21
   85e34:	1083ffcc 	andi	r2,r2,4095
   85e38:	18abc83a 	sub	r21,r3,r2
   85e3c:	a80b883a 	mov	r5,r21
   85e40:	9009883a 	mov	r4,r18
   85e44:	00876d80 	call	876d8 <_sbrk_r>
   85e48:	00ffffc4 	movi	r3,-1
   85e4c:	10c0e126 	beq	r2,r3,861d4 <_malloc_r+0x788>
   85e50:	1505c83a 	sub	r2,r2,r20
   85e54:	1545883a 	add	r2,r2,r21
   85e58:	10800054 	ori	r2,r2,1
   85e5c:	e0c00017 	ldw	r3,0(fp)
   85e60:	9d000215 	stw	r20,8(r19)
   85e64:	a0800115 	stw	r2,4(r20)
   85e68:	a8c7883a 	add	r3,r21,r3
   85e6c:	e0c00015 	stw	r3,0(fp)
   85e70:	84c00e26 	beq	r16,r19,85eac <_malloc_r+0x460>
   85e74:	018003c4 	movi	r6,15
   85e78:	3580a72e 	bgeu	r6,r22,86118 <_malloc_r+0x6cc>
   85e7c:	81400117 	ldw	r5,4(r16)
   85e80:	013ffe04 	movi	r4,-8
   85e84:	b0bffd04 	addi	r2,r22,-12
   85e88:	1104703a 	and	r2,r2,r4
   85e8c:	2900004c 	andi	r4,r5,1
   85e90:	2088b03a 	or	r4,r4,r2
   85e94:	81000115 	stw	r4,4(r16)
   85e98:	01400144 	movi	r5,5
   85e9c:	8089883a 	add	r4,r16,r2
   85ea0:	21400115 	stw	r5,4(r4)
   85ea4:	21400215 	stw	r5,8(r4)
   85ea8:	3080cd36 	bltu	r6,r2,861e0 <_malloc_r+0x794>
   85eac:	008002b4 	movhi	r2,10
   85eb0:	10af5704 	addi	r2,r2,-17060
   85eb4:	11000017 	ldw	r4,0(r2)
   85eb8:	20c0012e 	bgeu	r4,r3,85ec0 <_malloc_r+0x474>
   85ebc:	10c00015 	stw	r3,0(r2)
   85ec0:	008002b4 	movhi	r2,10
   85ec4:	10af5604 	addi	r2,r2,-17064
   85ec8:	11000017 	ldw	r4,0(r2)
   85ecc:	9c000217 	ldw	r16,8(r19)
   85ed0:	20c0012e 	bgeu	r4,r3,85ed8 <_malloc_r+0x48c>
   85ed4:	10c00015 	stw	r3,0(r2)
   85ed8:	80c00117 	ldw	r3,4(r16)
   85edc:	00bfff04 	movi	r2,-4
   85ee0:	1886703a 	and	r3,r3,r2
   85ee4:	1c45c83a 	sub	r2,r3,r17
   85ee8:	1c400236 	bltu	r3,r17,85ef4 <_malloc_r+0x4a8>
   85eec:	00c003c4 	movi	r3,15
   85ef0:	18800416 	blt	r3,r2,85f04 <_malloc_r+0x4b8>
   85ef4:	9009883a 	mov	r4,r18
   85ef8:	008e7c80 	call	8e7c8 <__malloc_unlock>
   85efc:	0005883a 	mov	r2,zero
   85f00:	003f7b06 	br	85cf0 <__alt_data_end+0xfffc74f0>
   85f04:	88c00054 	ori	r3,r17,1
   85f08:	80c00115 	stw	r3,4(r16)
   85f0c:	8463883a 	add	r17,r16,r17
   85f10:	10800054 	ori	r2,r2,1
   85f14:	9c400215 	stw	r17,8(r19)
   85f18:	88800115 	stw	r2,4(r17)
   85f1c:	9009883a 	mov	r4,r18
   85f20:	008e7c80 	call	8e7c8 <__malloc_unlock>
   85f24:	80800204 	addi	r2,r16,8
   85f28:	003f7106 	br	85cf0 <__alt_data_end+0xfffc74f0>
   85f2c:	00c00504 	movi	r3,20
   85f30:	18804a2e 	bgeu	r3,r2,8605c <_malloc_r+0x610>
   85f34:	00c01504 	movi	r3,84
   85f38:	18806e36 	bltu	r3,r2,860f4 <_malloc_r+0x6a8>
   85f3c:	8804d33a 	srli	r2,r17,12
   85f40:	12001bc4 	addi	r8,r2,111
   85f44:	11c01b84 	addi	r7,r2,110
   85f48:	4209883a 	add	r4,r8,r8
   85f4c:	003edd06 	br	85ac4 <__alt_data_end+0xfffc72c4>
   85f50:	3804d27a 	srli	r2,r7,9
   85f54:	00c00104 	movi	r3,4
   85f58:	1880442e 	bgeu	r3,r2,8606c <_malloc_r+0x620>
   85f5c:	00c00504 	movi	r3,20
   85f60:	18808136 	bltu	r3,r2,86168 <_malloc_r+0x71c>
   85f64:	11401704 	addi	r5,r2,92
   85f68:	10c016c4 	addi	r3,r2,91
   85f6c:	294b883a 	add	r5,r5,r5
   85f70:	294b883a 	add	r5,r5,r5
   85f74:	294b883a 	add	r5,r5,r5
   85f78:	994b883a 	add	r5,r19,r5
   85f7c:	28800017 	ldw	r2,0(r5)
   85f80:	018002b4 	movhi	r6,10
   85f84:	297ffe04 	addi	r5,r5,-8
   85f88:	31a2b404 	addi	r6,r6,-30000
   85f8c:	28806526 	beq	r5,r2,86124 <_malloc_r+0x6d8>
   85f90:	01bfff04 	movi	r6,-4
   85f94:	10c00117 	ldw	r3,4(r2)
   85f98:	1986703a 	and	r3,r3,r6
   85f9c:	38c0022e 	bgeu	r7,r3,85fa8 <_malloc_r+0x55c>
   85fa0:	10800217 	ldw	r2,8(r2)
   85fa4:	28bffb1e 	bne	r5,r2,85f94 <__alt_data_end+0xfffc7794>
   85fa8:	11400317 	ldw	r5,12(r2)
   85fac:	98c00117 	ldw	r3,4(r19)
   85fb0:	81400315 	stw	r5,12(r16)
   85fb4:	80800215 	stw	r2,8(r16)
   85fb8:	2c000215 	stw	r16,8(r5)
   85fbc:	14000315 	stw	r16,12(r2)
   85fc0:	003ef806 	br	85ba4 <__alt_data_end+0xfffc73a4>
   85fc4:	88c00054 	ori	r3,r17,1
   85fc8:	80c00115 	stw	r3,4(r16)
   85fcc:	8463883a 	add	r17,r16,r17
   85fd0:	34400515 	stw	r17,20(r6)
   85fd4:	34400415 	stw	r17,16(r6)
   85fd8:	10c00054 	ori	r3,r2,1
   85fdc:	8a000315 	stw	r8,12(r17)
   85fe0:	8a000215 	stw	r8,8(r17)
   85fe4:	88c00115 	stw	r3,4(r17)
   85fe8:	88a3883a 	add	r17,r17,r2
   85fec:	88800015 	stw	r2,0(r17)
   85ff0:	9009883a 	mov	r4,r18
   85ff4:	008e7c80 	call	8e7c8 <__malloc_unlock>
   85ff8:	80800204 	addi	r2,r16,8
   85ffc:	003f3c06 	br	85cf0 <__alt_data_end+0xfffc74f0>
   86000:	30c00117 	ldw	r3,4(r6)
   86004:	003ee706 	br	85ba4 <__alt_data_end+0xfffc73a4>
   86008:	5ac00044 	addi	r11,r11,1
   8600c:	588000cc 	andi	r2,r11,3
   86010:	31800204 	addi	r6,r6,8
   86014:	103efd1e 	bne	r2,zero,85c0c <__alt_data_end+0xfffc740c>
   86018:	00002406 	br	860ac <_malloc_r+0x660>
   8601c:	14000317 	ldw	r16,12(r2)
   86020:	143f251e 	bne	r2,r16,85cb8 <__alt_data_end+0xfffc74b8>
   86024:	21000084 	addi	r4,r4,2
   86028:	003ebc06 	br	85b1c <__alt_data_end+0xfffc731c>
   8602c:	8085883a 	add	r2,r16,r2
   86030:	10c00117 	ldw	r3,4(r2)
   86034:	81000317 	ldw	r4,12(r16)
   86038:	81400217 	ldw	r5,8(r16)
   8603c:	18c00054 	ori	r3,r3,1
   86040:	10c00115 	stw	r3,4(r2)
   86044:	29000315 	stw	r4,12(r5)
   86048:	21400215 	stw	r5,8(r4)
   8604c:	9009883a 	mov	r4,r18
   86050:	008e7c80 	call	8e7c8 <__malloc_unlock>
   86054:	80800204 	addi	r2,r16,8
   86058:	003f2506 	br	85cf0 <__alt_data_end+0xfffc74f0>
   8605c:	12001704 	addi	r8,r2,92
   86060:	11c016c4 	addi	r7,r2,91
   86064:	4209883a 	add	r4,r8,r8
   86068:	003e9606 	br	85ac4 <__alt_data_end+0xfffc72c4>
   8606c:	3804d1ba 	srli	r2,r7,6
   86070:	11400e44 	addi	r5,r2,57
   86074:	10c00e04 	addi	r3,r2,56
   86078:	294b883a 	add	r5,r5,r5
   8607c:	003fbc06 	br	85f70 <__alt_data_end+0xfffc7770>
   86080:	84ff5926 	beq	r16,r19,85de8 <__alt_data_end+0xfffc75e8>
   86084:	008002b4 	movhi	r2,10
   86088:	10a2b404 	addi	r2,r2,-30000
   8608c:	14000217 	ldw	r16,8(r2)
   86090:	00bfff04 	movi	r2,-4
   86094:	80c00117 	ldw	r3,4(r16)
   86098:	1886703a 	and	r3,r3,r2
   8609c:	003f9106 	br	85ee4 <__alt_data_end+0xfffc76e4>
   860a0:	60800217 	ldw	r2,8(r12)
   860a4:	213fffc4 	addi	r4,r4,-1
   860a8:	1300651e 	bne	r2,r12,86240 <_malloc_r+0x7f4>
   860ac:	208000cc 	andi	r2,r4,3
   860b0:	633ffe04 	addi	r12,r12,-8
   860b4:	103ffa1e 	bne	r2,zero,860a0 <__alt_data_end+0xfffc78a0>
   860b8:	98800117 	ldw	r2,4(r19)
   860bc:	0146303a 	nor	r3,zero,r5
   860c0:	1884703a 	and	r2,r3,r2
   860c4:	98800115 	stw	r2,4(r19)
   860c8:	294b883a 	add	r5,r5,r5
   860cc:	117f2836 	bltu	r2,r5,85d70 <__alt_data_end+0xfffc7570>
   860d0:	283f2726 	beq	r5,zero,85d70 <__alt_data_end+0xfffc7570>
   860d4:	2886703a 	and	r3,r5,r2
   860d8:	5809883a 	mov	r4,r11
   860dc:	183ec31e 	bne	r3,zero,85bec <__alt_data_end+0xfffc73ec>
   860e0:	294b883a 	add	r5,r5,r5
   860e4:	2886703a 	and	r3,r5,r2
   860e8:	21000104 	addi	r4,r4,4
   860ec:	183ffc26 	beq	r3,zero,860e0 <__alt_data_end+0xfffc78e0>
   860f0:	003ebe06 	br	85bec <__alt_data_end+0xfffc73ec>
   860f4:	00c05504 	movi	r3,340
   860f8:	18801236 	bltu	r3,r2,86144 <_malloc_r+0x6f8>
   860fc:	8804d3fa 	srli	r2,r17,15
   86100:	12001e04 	addi	r8,r2,120
   86104:	11c01dc4 	addi	r7,r2,119
   86108:	4209883a 	add	r4,r8,r8
   8610c:	003e6d06 	br	85ac4 <__alt_data_end+0xfffc72c4>
   86110:	00c40004 	movi	r3,4096
   86114:	003f4606 	br	85e30 <__alt_data_end+0xfffc7630>
   86118:	00800044 	movi	r2,1
   8611c:	a0800115 	stw	r2,4(r20)
   86120:	003f7406 	br	85ef4 <__alt_data_end+0xfffc76f4>
   86124:	1805d0ba 	srai	r2,r3,2
   86128:	01c00044 	movi	r7,1
   8612c:	30c00117 	ldw	r3,4(r6)
   86130:	388e983a 	sll	r7,r7,r2
   86134:	2805883a 	mov	r2,r5
   86138:	38c6b03a 	or	r3,r7,r3
   8613c:	30c00115 	stw	r3,4(r6)
   86140:	003f9b06 	br	85fb0 <__alt_data_end+0xfffc77b0>
   86144:	00c15504 	movi	r3,1364
   86148:	18801a36 	bltu	r3,r2,861b4 <_malloc_r+0x768>
   8614c:	8804d4ba 	srli	r2,r17,18
   86150:	12001f44 	addi	r8,r2,125
   86154:	11c01f04 	addi	r7,r2,124
   86158:	4209883a 	add	r4,r8,r8
   8615c:	003e5906 	br	85ac4 <__alt_data_end+0xfffc72c4>
   86160:	ad400404 	addi	r21,r21,16
   86164:	003f1706 	br	85dc4 <__alt_data_end+0xfffc75c4>
   86168:	00c01504 	movi	r3,84
   8616c:	18802336 	bltu	r3,r2,861fc <_malloc_r+0x7b0>
   86170:	3804d33a 	srli	r2,r7,12
   86174:	11401bc4 	addi	r5,r2,111
   86178:	10c01b84 	addi	r3,r2,110
   8617c:	294b883a 	add	r5,r5,r5
   86180:	003f7b06 	br	85f70 <__alt_data_end+0xfffc7770>
   86184:	9c000217 	ldw	r16,8(r19)
   86188:	00bfff04 	movi	r2,-4
   8618c:	80c00117 	ldw	r3,4(r16)
   86190:	1886703a 	and	r3,r3,r2
   86194:	003f5306 	br	85ee4 <__alt_data_end+0xfffc76e4>
   86198:	3083ffcc 	andi	r2,r6,4095
   8619c:	103f181e 	bne	r2,zero,85e00 <__alt_data_end+0xfffc7600>
   861a0:	99000217 	ldw	r4,8(r19)
   861a4:	b545883a 	add	r2,r22,r21
   861a8:	10800054 	ori	r2,r2,1
   861ac:	20800115 	stw	r2,4(r4)
   861b0:	003f3e06 	br	85eac <__alt_data_end+0xfffc76ac>
   861b4:	01003f84 	movi	r4,254
   861b8:	02001fc4 	movi	r8,127
   861bc:	01c01f84 	movi	r7,126
   861c0:	003e4006 	br	85ac4 <__alt_data_end+0xfffc72c4>
   861c4:	008002b4 	movhi	r2,10
   861c8:	10a83f04 	addi	r2,r2,-24324
   861cc:	15000015 	stw	r20,0(r2)
   861d0:	003f1106 	br	85e18 <__alt_data_end+0xfffc7618>
   861d4:	00800044 	movi	r2,1
   861d8:	002b883a 	mov	r21,zero
   861dc:	003f1f06 	br	85e5c <__alt_data_end+0xfffc765c>
   861e0:	81400204 	addi	r5,r16,8
   861e4:	9009883a 	mov	r4,r18
   861e8:	008531c0 	call	8531c <_free_r>
   861ec:	008002b4 	movhi	r2,10
   861f0:	10af7904 	addi	r2,r2,-16924
   861f4:	10c00017 	ldw	r3,0(r2)
   861f8:	003f2c06 	br	85eac <__alt_data_end+0xfffc76ac>
   861fc:	00c05504 	movi	r3,340
   86200:	18800536 	bltu	r3,r2,86218 <_malloc_r+0x7cc>
   86204:	3804d3fa 	srli	r2,r7,15
   86208:	11401e04 	addi	r5,r2,120
   8620c:	10c01dc4 	addi	r3,r2,119
   86210:	294b883a 	add	r5,r5,r5
   86214:	003f5606 	br	85f70 <__alt_data_end+0xfffc7770>
   86218:	00c15504 	movi	r3,1364
   8621c:	18800536 	bltu	r3,r2,86234 <_malloc_r+0x7e8>
   86220:	3804d4ba 	srli	r2,r7,18
   86224:	11401f44 	addi	r5,r2,125
   86228:	10c01f04 	addi	r3,r2,124
   8622c:	294b883a 	add	r5,r5,r5
   86230:	003f4f06 	br	85f70 <__alt_data_end+0xfffc7770>
   86234:	01403f84 	movi	r5,254
   86238:	00c01f84 	movi	r3,126
   8623c:	003f4c06 	br	85f70 <__alt_data_end+0xfffc7770>
   86240:	98800117 	ldw	r2,4(r19)
   86244:	003fa006 	br	860c8 <__alt_data_end+0xfffc78c8>
   86248:	8808d0fa 	srli	r4,r17,3
   8624c:	20800044 	addi	r2,r4,1
   86250:	1085883a 	add	r2,r2,r2
   86254:	003e9006 	br	85c98 <__alt_data_end+0xfffc7498>

00086258 <memchr>:
   86258:	208000cc 	andi	r2,r4,3
   8625c:	280f883a 	mov	r7,r5
   86260:	10003426 	beq	r2,zero,86334 <memchr+0xdc>
   86264:	30bfffc4 	addi	r2,r6,-1
   86268:	30001a26 	beq	r6,zero,862d4 <memchr+0x7c>
   8626c:	20c00003 	ldbu	r3,0(r4)
   86270:	29803fcc 	andi	r6,r5,255
   86274:	30c0051e 	bne	r6,r3,8628c <memchr+0x34>
   86278:	00001806 	br	862dc <memchr+0x84>
   8627c:	10001526 	beq	r2,zero,862d4 <memchr+0x7c>
   86280:	20c00003 	ldbu	r3,0(r4)
   86284:	10bfffc4 	addi	r2,r2,-1
   86288:	30c01426 	beq	r6,r3,862dc <memchr+0x84>
   8628c:	21000044 	addi	r4,r4,1
   86290:	20c000cc 	andi	r3,r4,3
   86294:	183ff91e 	bne	r3,zero,8627c <__alt_data_end+0xfffc7a7c>
   86298:	020000c4 	movi	r8,3
   8629c:	40801136 	bltu	r8,r2,862e4 <memchr+0x8c>
   862a0:	10000c26 	beq	r2,zero,862d4 <memchr+0x7c>
   862a4:	20c00003 	ldbu	r3,0(r4)
   862a8:	29403fcc 	andi	r5,r5,255
   862ac:	28c00b26 	beq	r5,r3,862dc <memchr+0x84>
   862b0:	20c00044 	addi	r3,r4,1
   862b4:	39803fcc 	andi	r6,r7,255
   862b8:	2089883a 	add	r4,r4,r2
   862bc:	00000306 	br	862cc <memchr+0x74>
   862c0:	18c00044 	addi	r3,r3,1
   862c4:	197fffc3 	ldbu	r5,-1(r3)
   862c8:	31400526 	beq	r6,r5,862e0 <memchr+0x88>
   862cc:	1805883a 	mov	r2,r3
   862d0:	20fffb1e 	bne	r4,r3,862c0 <__alt_data_end+0xfffc7ac0>
   862d4:	0005883a 	mov	r2,zero
   862d8:	f800283a 	ret
   862dc:	2005883a 	mov	r2,r4
   862e0:	f800283a 	ret
   862e4:	28c03fcc 	andi	r3,r5,255
   862e8:	1812923a 	slli	r9,r3,8
   862ec:	02ffbff4 	movhi	r11,65279
   862f0:	02a02074 	movhi	r10,32897
   862f4:	48d2b03a 	or	r9,r9,r3
   862f8:	4806943a 	slli	r3,r9,16
   862fc:	5affbfc4 	addi	r11,r11,-257
   86300:	52a02004 	addi	r10,r10,-32640
   86304:	48d2b03a 	or	r9,r9,r3
   86308:	20c00017 	ldw	r3,0(r4)
   8630c:	48c6f03a 	xor	r3,r9,r3
   86310:	1acd883a 	add	r6,r3,r11
   86314:	00c6303a 	nor	r3,zero,r3
   86318:	30c6703a 	and	r3,r6,r3
   8631c:	1a86703a 	and	r3,r3,r10
   86320:	183fe01e 	bne	r3,zero,862a4 <__alt_data_end+0xfffc7aa4>
   86324:	10bfff04 	addi	r2,r2,-4
   86328:	21000104 	addi	r4,r4,4
   8632c:	40bff636 	bltu	r8,r2,86308 <__alt_data_end+0xfffc7b08>
   86330:	003fdb06 	br	862a0 <__alt_data_end+0xfffc7aa0>
   86334:	3005883a 	mov	r2,r6
   86338:	003fd706 	br	86298 <__alt_data_end+0xfffc7a98>

0008633c <memcpy>:
   8633c:	defffd04 	addi	sp,sp,-12
   86340:	dfc00215 	stw	ra,8(sp)
   86344:	dc400115 	stw	r17,4(sp)
   86348:	dc000015 	stw	r16,0(sp)
   8634c:	00c003c4 	movi	r3,15
   86350:	2005883a 	mov	r2,r4
   86354:	1980452e 	bgeu	r3,r6,8646c <memcpy+0x130>
   86358:	2906b03a 	or	r3,r5,r4
   8635c:	18c000cc 	andi	r3,r3,3
   86360:	1800441e 	bne	r3,zero,86474 <memcpy+0x138>
   86364:	347ffc04 	addi	r17,r6,-16
   86368:	8822d13a 	srli	r17,r17,4
   8636c:	28c00104 	addi	r3,r5,4
   86370:	23400104 	addi	r13,r4,4
   86374:	8820913a 	slli	r16,r17,4
   86378:	2b000204 	addi	r12,r5,8
   8637c:	22c00204 	addi	r11,r4,8
   86380:	84000504 	addi	r16,r16,20
   86384:	2a800304 	addi	r10,r5,12
   86388:	22400304 	addi	r9,r4,12
   8638c:	2c21883a 	add	r16,r5,r16
   86390:	2811883a 	mov	r8,r5
   86394:	200f883a 	mov	r7,r4
   86398:	41000017 	ldw	r4,0(r8)
   8639c:	1fc00017 	ldw	ra,0(r3)
   863a0:	63c00017 	ldw	r15,0(r12)
   863a4:	39000015 	stw	r4,0(r7)
   863a8:	53800017 	ldw	r14,0(r10)
   863ac:	6fc00015 	stw	ra,0(r13)
   863b0:	5bc00015 	stw	r15,0(r11)
   863b4:	4b800015 	stw	r14,0(r9)
   863b8:	18c00404 	addi	r3,r3,16
   863bc:	39c00404 	addi	r7,r7,16
   863c0:	42000404 	addi	r8,r8,16
   863c4:	6b400404 	addi	r13,r13,16
   863c8:	63000404 	addi	r12,r12,16
   863cc:	5ac00404 	addi	r11,r11,16
   863d0:	52800404 	addi	r10,r10,16
   863d4:	4a400404 	addi	r9,r9,16
   863d8:	1c3fef1e 	bne	r3,r16,86398 <__alt_data_end+0xfffc7b98>
   863dc:	89c00044 	addi	r7,r17,1
   863e0:	380e913a 	slli	r7,r7,4
   863e4:	310003cc 	andi	r4,r6,15
   863e8:	02c000c4 	movi	r11,3
   863ec:	11c7883a 	add	r3,r2,r7
   863f0:	29cb883a 	add	r5,r5,r7
   863f4:	5900212e 	bgeu	r11,r4,8647c <memcpy+0x140>
   863f8:	1813883a 	mov	r9,r3
   863fc:	2811883a 	mov	r8,r5
   86400:	200f883a 	mov	r7,r4
   86404:	42800017 	ldw	r10,0(r8)
   86408:	4a400104 	addi	r9,r9,4
   8640c:	39ffff04 	addi	r7,r7,-4
   86410:	4abfff15 	stw	r10,-4(r9)
   86414:	42000104 	addi	r8,r8,4
   86418:	59fffa36 	bltu	r11,r7,86404 <__alt_data_end+0xfffc7c04>
   8641c:	213fff04 	addi	r4,r4,-4
   86420:	2008d0ba 	srli	r4,r4,2
   86424:	318000cc 	andi	r6,r6,3
   86428:	21000044 	addi	r4,r4,1
   8642c:	2109883a 	add	r4,r4,r4
   86430:	2109883a 	add	r4,r4,r4
   86434:	1907883a 	add	r3,r3,r4
   86438:	290b883a 	add	r5,r5,r4
   8643c:	30000626 	beq	r6,zero,86458 <memcpy+0x11c>
   86440:	198d883a 	add	r6,r3,r6
   86444:	29c00003 	ldbu	r7,0(r5)
   86448:	18c00044 	addi	r3,r3,1
   8644c:	29400044 	addi	r5,r5,1
   86450:	19ffffc5 	stb	r7,-1(r3)
   86454:	19bffb1e 	bne	r3,r6,86444 <__alt_data_end+0xfffc7c44>
   86458:	dfc00217 	ldw	ra,8(sp)
   8645c:	dc400117 	ldw	r17,4(sp)
   86460:	dc000017 	ldw	r16,0(sp)
   86464:	dec00304 	addi	sp,sp,12
   86468:	f800283a 	ret
   8646c:	2007883a 	mov	r3,r4
   86470:	003ff206 	br	8643c <__alt_data_end+0xfffc7c3c>
   86474:	2007883a 	mov	r3,r4
   86478:	003ff106 	br	86440 <__alt_data_end+0xfffc7c40>
   8647c:	200d883a 	mov	r6,r4
   86480:	003fee06 	br	8643c <__alt_data_end+0xfffc7c3c>

00086484 <memset>:
   86484:	20c000cc 	andi	r3,r4,3
   86488:	2005883a 	mov	r2,r4
   8648c:	18004426 	beq	r3,zero,865a0 <memset+0x11c>
   86490:	31ffffc4 	addi	r7,r6,-1
   86494:	30004026 	beq	r6,zero,86598 <memset+0x114>
   86498:	2813883a 	mov	r9,r5
   8649c:	200d883a 	mov	r6,r4
   864a0:	2007883a 	mov	r3,r4
   864a4:	00000406 	br	864b8 <memset+0x34>
   864a8:	3a3fffc4 	addi	r8,r7,-1
   864ac:	31800044 	addi	r6,r6,1
   864b0:	38003926 	beq	r7,zero,86598 <memset+0x114>
   864b4:	400f883a 	mov	r7,r8
   864b8:	18c00044 	addi	r3,r3,1
   864bc:	32400005 	stb	r9,0(r6)
   864c0:	1a0000cc 	andi	r8,r3,3
   864c4:	403ff81e 	bne	r8,zero,864a8 <__alt_data_end+0xfffc7ca8>
   864c8:	010000c4 	movi	r4,3
   864cc:	21c02d2e 	bgeu	r4,r7,86584 <memset+0x100>
   864d0:	29003fcc 	andi	r4,r5,255
   864d4:	200c923a 	slli	r6,r4,8
   864d8:	3108b03a 	or	r4,r6,r4
   864dc:	200c943a 	slli	r6,r4,16
   864e0:	218cb03a 	or	r6,r4,r6
   864e4:	010003c4 	movi	r4,15
   864e8:	21c0182e 	bgeu	r4,r7,8654c <memset+0xc8>
   864ec:	3b3ffc04 	addi	r12,r7,-16
   864f0:	6018d13a 	srli	r12,r12,4
   864f4:	1a000104 	addi	r8,r3,4
   864f8:	1ac00204 	addi	r11,r3,8
   864fc:	6008913a 	slli	r4,r12,4
   86500:	1a800304 	addi	r10,r3,12
   86504:	1813883a 	mov	r9,r3
   86508:	21000504 	addi	r4,r4,20
   8650c:	1909883a 	add	r4,r3,r4
   86510:	49800015 	stw	r6,0(r9)
   86514:	41800015 	stw	r6,0(r8)
   86518:	59800015 	stw	r6,0(r11)
   8651c:	51800015 	stw	r6,0(r10)
   86520:	42000404 	addi	r8,r8,16
   86524:	4a400404 	addi	r9,r9,16
   86528:	5ac00404 	addi	r11,r11,16
   8652c:	52800404 	addi	r10,r10,16
   86530:	413ff71e 	bne	r8,r4,86510 <__alt_data_end+0xfffc7d10>
   86534:	63000044 	addi	r12,r12,1
   86538:	6018913a 	slli	r12,r12,4
   8653c:	39c003cc 	andi	r7,r7,15
   86540:	010000c4 	movi	r4,3
   86544:	1b07883a 	add	r3,r3,r12
   86548:	21c00e2e 	bgeu	r4,r7,86584 <memset+0x100>
   8654c:	1813883a 	mov	r9,r3
   86550:	3811883a 	mov	r8,r7
   86554:	010000c4 	movi	r4,3
   86558:	49800015 	stw	r6,0(r9)
   8655c:	423fff04 	addi	r8,r8,-4
   86560:	4a400104 	addi	r9,r9,4
   86564:	223ffc36 	bltu	r4,r8,86558 <__alt_data_end+0xfffc7d58>
   86568:	393fff04 	addi	r4,r7,-4
   8656c:	2008d0ba 	srli	r4,r4,2
   86570:	39c000cc 	andi	r7,r7,3
   86574:	21000044 	addi	r4,r4,1
   86578:	2109883a 	add	r4,r4,r4
   8657c:	2109883a 	add	r4,r4,r4
   86580:	1907883a 	add	r3,r3,r4
   86584:	38000526 	beq	r7,zero,8659c <memset+0x118>
   86588:	19cf883a 	add	r7,r3,r7
   8658c:	19400005 	stb	r5,0(r3)
   86590:	18c00044 	addi	r3,r3,1
   86594:	38fffd1e 	bne	r7,r3,8658c <__alt_data_end+0xfffc7d8c>
   86598:	f800283a 	ret
   8659c:	f800283a 	ret
   865a0:	2007883a 	mov	r3,r4
   865a4:	300f883a 	mov	r7,r6
   865a8:	003fc706 	br	864c8 <__alt_data_end+0xfffc7cc8>

000865ac <_Balloc>:
   865ac:	20801317 	ldw	r2,76(r4)
   865b0:	defffc04 	addi	sp,sp,-16
   865b4:	dc400115 	stw	r17,4(sp)
   865b8:	dc000015 	stw	r16,0(sp)
   865bc:	dfc00315 	stw	ra,12(sp)
   865c0:	dc800215 	stw	r18,8(sp)
   865c4:	2023883a 	mov	r17,r4
   865c8:	2821883a 	mov	r16,r5
   865cc:	10000f26 	beq	r2,zero,8660c <_Balloc+0x60>
   865d0:	8407883a 	add	r3,r16,r16
   865d4:	18c7883a 	add	r3,r3,r3
   865d8:	10c7883a 	add	r3,r2,r3
   865dc:	18800017 	ldw	r2,0(r3)
   865e0:	10001126 	beq	r2,zero,86628 <_Balloc+0x7c>
   865e4:	11000017 	ldw	r4,0(r2)
   865e8:	19000015 	stw	r4,0(r3)
   865ec:	10000415 	stw	zero,16(r2)
   865f0:	10000315 	stw	zero,12(r2)
   865f4:	dfc00317 	ldw	ra,12(sp)
   865f8:	dc800217 	ldw	r18,8(sp)
   865fc:	dc400117 	ldw	r17,4(sp)
   86600:	dc000017 	ldw	r16,0(sp)
   86604:	dec00404 	addi	sp,sp,16
   86608:	f800283a 	ret
   8660c:	01800844 	movi	r6,33
   86610:	01400104 	movi	r5,4
   86614:	00890ac0 	call	890ac <_calloc_r>
   86618:	88801315 	stw	r2,76(r17)
   8661c:	103fec1e 	bne	r2,zero,865d0 <__alt_data_end+0xfffc7dd0>
   86620:	0005883a 	mov	r2,zero
   86624:	003ff306 	br	865f4 <__alt_data_end+0xfffc7df4>
   86628:	01400044 	movi	r5,1
   8662c:	2c24983a 	sll	r18,r5,r16
   86630:	8809883a 	mov	r4,r17
   86634:	91800144 	addi	r6,r18,5
   86638:	318d883a 	add	r6,r6,r6
   8663c:	318d883a 	add	r6,r6,r6
   86640:	00890ac0 	call	890ac <_calloc_r>
   86644:	103ff626 	beq	r2,zero,86620 <__alt_data_end+0xfffc7e20>
   86648:	14000115 	stw	r16,4(r2)
   8664c:	14800215 	stw	r18,8(r2)
   86650:	003fe606 	br	865ec <__alt_data_end+0xfffc7dec>

00086654 <_Bfree>:
   86654:	28000826 	beq	r5,zero,86678 <_Bfree+0x24>
   86658:	28c00117 	ldw	r3,4(r5)
   8665c:	20801317 	ldw	r2,76(r4)
   86660:	18c7883a 	add	r3,r3,r3
   86664:	18c7883a 	add	r3,r3,r3
   86668:	10c5883a 	add	r2,r2,r3
   8666c:	10c00017 	ldw	r3,0(r2)
   86670:	28c00015 	stw	r3,0(r5)
   86674:	11400015 	stw	r5,0(r2)
   86678:	f800283a 	ret

0008667c <__multadd>:
   8667c:	defff704 	addi	sp,sp,-36
   86680:	dc800215 	stw	r18,8(sp)
   86684:	2c800417 	ldw	r18,16(r5)
   86688:	dd800615 	stw	r22,24(sp)
   8668c:	dd400515 	stw	r21,20(sp)
   86690:	dd000415 	stw	r20,16(sp)
   86694:	dcc00315 	stw	r19,12(sp)
   86698:	dc400115 	stw	r17,4(sp)
   8669c:	dc000015 	stw	r16,0(sp)
   866a0:	dfc00815 	stw	ra,32(sp)
   866a4:	ddc00715 	stw	r23,28(sp)
   866a8:	2827883a 	mov	r19,r5
   866ac:	2029883a 	mov	r20,r4
   866b0:	3023883a 	mov	r17,r6
   866b4:	3821883a 	mov	r16,r7
   866b8:	2d400504 	addi	r21,r5,20
   866bc:	002d883a 	mov	r22,zero
   866c0:	adc00017 	ldw	r23,0(r21)
   866c4:	880b883a 	mov	r5,r17
   866c8:	ad400104 	addi	r21,r21,4
   866cc:	b93fffcc 	andi	r4,r23,65535
   866d0:	008b08c0 	call	8b08c <__mulsi3>
   866d4:	b808d43a 	srli	r4,r23,16
   866d8:	880b883a 	mov	r5,r17
   866dc:	1421883a 	add	r16,r2,r16
   866e0:	008b08c0 	call	8b08c <__mulsi3>
   866e4:	800ed43a 	srli	r7,r16,16
   866e8:	80ffffcc 	andi	r3,r16,65535
   866ec:	b5800044 	addi	r22,r22,1
   866f0:	11c5883a 	add	r2,r2,r7
   866f4:	100e943a 	slli	r7,r2,16
   866f8:	1020d43a 	srli	r16,r2,16
   866fc:	38c7883a 	add	r3,r7,r3
   86700:	a8ffff15 	stw	r3,-4(r21)
   86704:	b4bfee16 	blt	r22,r18,866c0 <__alt_data_end+0xfffc7ec0>
   86708:	80000926 	beq	r16,zero,86730 <__multadd+0xb4>
   8670c:	98800217 	ldw	r2,8(r19)
   86710:	9080130e 	bge	r18,r2,86760 <__multadd+0xe4>
   86714:	90800144 	addi	r2,r18,5
   86718:	1085883a 	add	r2,r2,r2
   8671c:	1085883a 	add	r2,r2,r2
   86720:	9885883a 	add	r2,r19,r2
   86724:	14000015 	stw	r16,0(r2)
   86728:	94800044 	addi	r18,r18,1
   8672c:	9c800415 	stw	r18,16(r19)
   86730:	9805883a 	mov	r2,r19
   86734:	dfc00817 	ldw	ra,32(sp)
   86738:	ddc00717 	ldw	r23,28(sp)
   8673c:	dd800617 	ldw	r22,24(sp)
   86740:	dd400517 	ldw	r21,20(sp)
   86744:	dd000417 	ldw	r20,16(sp)
   86748:	dcc00317 	ldw	r19,12(sp)
   8674c:	dc800217 	ldw	r18,8(sp)
   86750:	dc400117 	ldw	r17,4(sp)
   86754:	dc000017 	ldw	r16,0(sp)
   86758:	dec00904 	addi	sp,sp,36
   8675c:	f800283a 	ret
   86760:	99400117 	ldw	r5,4(r19)
   86764:	a009883a 	mov	r4,r20
   86768:	29400044 	addi	r5,r5,1
   8676c:	00865ac0 	call	865ac <_Balloc>
   86770:	99800417 	ldw	r6,16(r19)
   86774:	99400304 	addi	r5,r19,12
   86778:	11000304 	addi	r4,r2,12
   8677c:	31800084 	addi	r6,r6,2
   86780:	318d883a 	add	r6,r6,r6
   86784:	318d883a 	add	r6,r6,r6
   86788:	1023883a 	mov	r17,r2
   8678c:	008633c0 	call	8633c <memcpy>
   86790:	98000a26 	beq	r19,zero,867bc <__multadd+0x140>
   86794:	98c00117 	ldw	r3,4(r19)
   86798:	a0801317 	ldw	r2,76(r20)
   8679c:	18c7883a 	add	r3,r3,r3
   867a0:	18c7883a 	add	r3,r3,r3
   867a4:	10c5883a 	add	r2,r2,r3
   867a8:	10c00017 	ldw	r3,0(r2)
   867ac:	98c00015 	stw	r3,0(r19)
   867b0:	14c00015 	stw	r19,0(r2)
   867b4:	8827883a 	mov	r19,r17
   867b8:	003fd606 	br	86714 <__alt_data_end+0xfffc7f14>
   867bc:	8827883a 	mov	r19,r17
   867c0:	003fd406 	br	86714 <__alt_data_end+0xfffc7f14>

000867c4 <__s2b>:
   867c4:	defff904 	addi	sp,sp,-28
   867c8:	dc400115 	stw	r17,4(sp)
   867cc:	dc000015 	stw	r16,0(sp)
   867d0:	2023883a 	mov	r17,r4
   867d4:	2821883a 	mov	r16,r5
   867d8:	39000204 	addi	r4,r7,8
   867dc:	01400244 	movi	r5,9
   867e0:	dcc00315 	stw	r19,12(sp)
   867e4:	dc800215 	stw	r18,8(sp)
   867e8:	dfc00615 	stw	ra,24(sp)
   867ec:	dd400515 	stw	r21,20(sp)
   867f0:	dd000415 	stw	r20,16(sp)
   867f4:	3825883a 	mov	r18,r7
   867f8:	3027883a 	mov	r19,r6
   867fc:	0080a340 	call	80a34 <__divsi3>
   86800:	00c00044 	movi	r3,1
   86804:	000b883a 	mov	r5,zero
   86808:	1880030e 	bge	r3,r2,86818 <__s2b+0x54>
   8680c:	18c7883a 	add	r3,r3,r3
   86810:	29400044 	addi	r5,r5,1
   86814:	18bffd16 	blt	r3,r2,8680c <__alt_data_end+0xfffc800c>
   86818:	8809883a 	mov	r4,r17
   8681c:	00865ac0 	call	865ac <_Balloc>
   86820:	d8c00717 	ldw	r3,28(sp)
   86824:	10c00515 	stw	r3,20(r2)
   86828:	00c00044 	movi	r3,1
   8682c:	10c00415 	stw	r3,16(r2)
   86830:	00c00244 	movi	r3,9
   86834:	1cc0210e 	bge	r3,r19,868bc <__s2b+0xf8>
   86838:	80eb883a 	add	r21,r16,r3
   8683c:	a829883a 	mov	r20,r21
   86840:	84e1883a 	add	r16,r16,r19
   86844:	a1c00007 	ldb	r7,0(r20)
   86848:	01800284 	movi	r6,10
   8684c:	a5000044 	addi	r20,r20,1
   86850:	100b883a 	mov	r5,r2
   86854:	39fff404 	addi	r7,r7,-48
   86858:	8809883a 	mov	r4,r17
   8685c:	008667c0 	call	8667c <__multadd>
   86860:	a43ff81e 	bne	r20,r16,86844 <__alt_data_end+0xfffc8044>
   86864:	ace1883a 	add	r16,r21,r19
   86868:	843ffe04 	addi	r16,r16,-8
   8686c:	9c800a0e 	bge	r19,r18,86898 <__s2b+0xd4>
   86870:	94e5c83a 	sub	r18,r18,r19
   86874:	84a5883a 	add	r18,r16,r18
   86878:	81c00007 	ldb	r7,0(r16)
   8687c:	01800284 	movi	r6,10
   86880:	84000044 	addi	r16,r16,1
   86884:	100b883a 	mov	r5,r2
   86888:	39fff404 	addi	r7,r7,-48
   8688c:	8809883a 	mov	r4,r17
   86890:	008667c0 	call	8667c <__multadd>
   86894:	84bff81e 	bne	r16,r18,86878 <__alt_data_end+0xfffc8078>
   86898:	dfc00617 	ldw	ra,24(sp)
   8689c:	dd400517 	ldw	r21,20(sp)
   868a0:	dd000417 	ldw	r20,16(sp)
   868a4:	dcc00317 	ldw	r19,12(sp)
   868a8:	dc800217 	ldw	r18,8(sp)
   868ac:	dc400117 	ldw	r17,4(sp)
   868b0:	dc000017 	ldw	r16,0(sp)
   868b4:	dec00704 	addi	sp,sp,28
   868b8:	f800283a 	ret
   868bc:	84000284 	addi	r16,r16,10
   868c0:	1827883a 	mov	r19,r3
   868c4:	003fe906 	br	8686c <__alt_data_end+0xfffc806c>

000868c8 <__hi0bits>:
   868c8:	20bfffec 	andhi	r2,r4,65535
   868cc:	1000141e 	bne	r2,zero,86920 <__hi0bits+0x58>
   868d0:	2008943a 	slli	r4,r4,16
   868d4:	00800404 	movi	r2,16
   868d8:	20ffc02c 	andhi	r3,r4,65280
   868dc:	1800021e 	bne	r3,zero,868e8 <__hi0bits+0x20>
   868e0:	2008923a 	slli	r4,r4,8
   868e4:	10800204 	addi	r2,r2,8
   868e8:	20fc002c 	andhi	r3,r4,61440
   868ec:	1800021e 	bne	r3,zero,868f8 <__hi0bits+0x30>
   868f0:	2008913a 	slli	r4,r4,4
   868f4:	10800104 	addi	r2,r2,4
   868f8:	20f0002c 	andhi	r3,r4,49152
   868fc:	1800031e 	bne	r3,zero,8690c <__hi0bits+0x44>
   86900:	2109883a 	add	r4,r4,r4
   86904:	10800084 	addi	r2,r2,2
   86908:	2109883a 	add	r4,r4,r4
   8690c:	20000316 	blt	r4,zero,8691c <__hi0bits+0x54>
   86910:	2110002c 	andhi	r4,r4,16384
   86914:	2000041e 	bne	r4,zero,86928 <__hi0bits+0x60>
   86918:	00800804 	movi	r2,32
   8691c:	f800283a 	ret
   86920:	0005883a 	mov	r2,zero
   86924:	003fec06 	br	868d8 <__alt_data_end+0xfffc80d8>
   86928:	10800044 	addi	r2,r2,1
   8692c:	f800283a 	ret

00086930 <__lo0bits>:
   86930:	20c00017 	ldw	r3,0(r4)
   86934:	188001cc 	andi	r2,r3,7
   86938:	10000826 	beq	r2,zero,8695c <__lo0bits+0x2c>
   8693c:	1880004c 	andi	r2,r3,1
   86940:	1000211e 	bne	r2,zero,869c8 <__lo0bits+0x98>
   86944:	1880008c 	andi	r2,r3,2
   86948:	1000211e 	bne	r2,zero,869d0 <__lo0bits+0xa0>
   8694c:	1806d0ba 	srli	r3,r3,2
   86950:	00800084 	movi	r2,2
   86954:	20c00015 	stw	r3,0(r4)
   86958:	f800283a 	ret
   8695c:	18bfffcc 	andi	r2,r3,65535
   86960:	10001326 	beq	r2,zero,869b0 <__lo0bits+0x80>
   86964:	0005883a 	mov	r2,zero
   86968:	19403fcc 	andi	r5,r3,255
   8696c:	2800021e 	bne	r5,zero,86978 <__lo0bits+0x48>
   86970:	1806d23a 	srli	r3,r3,8
   86974:	10800204 	addi	r2,r2,8
   86978:	194003cc 	andi	r5,r3,15
   8697c:	2800021e 	bne	r5,zero,86988 <__lo0bits+0x58>
   86980:	1806d13a 	srli	r3,r3,4
   86984:	10800104 	addi	r2,r2,4
   86988:	194000cc 	andi	r5,r3,3
   8698c:	2800021e 	bne	r5,zero,86998 <__lo0bits+0x68>
   86990:	1806d0ba 	srli	r3,r3,2
   86994:	10800084 	addi	r2,r2,2
   86998:	1940004c 	andi	r5,r3,1
   8699c:	2800081e 	bne	r5,zero,869c0 <__lo0bits+0x90>
   869a0:	1806d07a 	srli	r3,r3,1
   869a4:	1800051e 	bne	r3,zero,869bc <__lo0bits+0x8c>
   869a8:	00800804 	movi	r2,32
   869ac:	f800283a 	ret
   869b0:	1806d43a 	srli	r3,r3,16
   869b4:	00800404 	movi	r2,16
   869b8:	003feb06 	br	86968 <__alt_data_end+0xfffc8168>
   869bc:	10800044 	addi	r2,r2,1
   869c0:	20c00015 	stw	r3,0(r4)
   869c4:	f800283a 	ret
   869c8:	0005883a 	mov	r2,zero
   869cc:	f800283a 	ret
   869d0:	1806d07a 	srli	r3,r3,1
   869d4:	00800044 	movi	r2,1
   869d8:	20c00015 	stw	r3,0(r4)
   869dc:	f800283a 	ret

000869e0 <__i2b>:
   869e0:	defffd04 	addi	sp,sp,-12
   869e4:	dc000015 	stw	r16,0(sp)
   869e8:	04000044 	movi	r16,1
   869ec:	dc400115 	stw	r17,4(sp)
   869f0:	2823883a 	mov	r17,r5
   869f4:	800b883a 	mov	r5,r16
   869f8:	dfc00215 	stw	ra,8(sp)
   869fc:	00865ac0 	call	865ac <_Balloc>
   86a00:	14400515 	stw	r17,20(r2)
   86a04:	14000415 	stw	r16,16(r2)
   86a08:	dfc00217 	ldw	ra,8(sp)
   86a0c:	dc400117 	ldw	r17,4(sp)
   86a10:	dc000017 	ldw	r16,0(sp)
   86a14:	dec00304 	addi	sp,sp,12
   86a18:	f800283a 	ret

00086a1c <__multiply>:
   86a1c:	deffef04 	addi	sp,sp,-68
   86a20:	dc400815 	stw	r17,32(sp)
   86a24:	dc000715 	stw	r16,28(sp)
   86a28:	34400417 	ldw	r17,16(r6)
   86a2c:	2c000417 	ldw	r16,16(r5)
   86a30:	dd800d15 	stw	r22,52(sp)
   86a34:	dc800915 	stw	r18,36(sp)
   86a38:	dfc01015 	stw	ra,64(sp)
   86a3c:	df000f15 	stw	fp,60(sp)
   86a40:	ddc00e15 	stw	r23,56(sp)
   86a44:	dd400c15 	stw	r21,48(sp)
   86a48:	dd000b15 	stw	r20,44(sp)
   86a4c:	dcc00a15 	stw	r19,40(sp)
   86a50:	2825883a 	mov	r18,r5
   86a54:	302d883a 	mov	r22,r6
   86a58:	8440050e 	bge	r16,r17,86a70 <__multiply+0x54>
   86a5c:	8007883a 	mov	r3,r16
   86a60:	3025883a 	mov	r18,r6
   86a64:	8821883a 	mov	r16,r17
   86a68:	282d883a 	mov	r22,r5
   86a6c:	1823883a 	mov	r17,r3
   86a70:	90800217 	ldw	r2,8(r18)
   86a74:	8447883a 	add	r3,r16,r17
   86a78:	d8c00215 	stw	r3,8(sp)
   86a7c:	91400117 	ldw	r5,4(r18)
   86a80:	10c0010e 	bge	r2,r3,86a88 <__multiply+0x6c>
   86a84:	29400044 	addi	r5,r5,1
   86a88:	00865ac0 	call	865ac <_Balloc>
   86a8c:	d8c00217 	ldw	r3,8(sp)
   86a90:	d8800615 	stw	r2,24(sp)
   86a94:	18eb883a 	add	r21,r3,r3
   86a98:	ad6b883a 	add	r21,r21,r21
   86a9c:	10c00504 	addi	r3,r2,20
   86aa0:	1d6b883a 	add	r21,r3,r21
   86aa4:	d8c00115 	stw	r3,4(sp)
   86aa8:	dd400315 	stw	r21,12(sp)
   86aac:	1805883a 	mov	r2,r3
   86ab0:	1d40042e 	bgeu	r3,r21,86ac4 <__multiply+0xa8>
   86ab4:	d8c00317 	ldw	r3,12(sp)
   86ab8:	10000015 	stw	zero,0(r2)
   86abc:	10800104 	addi	r2,r2,4
   86ac0:	10fffc36 	bltu	r2,r3,86ab4 <__alt_data_end+0xfffc82b4>
   86ac4:	8c63883a 	add	r17,r17,r17
   86ac8:	b5800504 	addi	r22,r22,20
   86acc:	8c63883a 	add	r17,r17,r17
   86ad0:	94800504 	addi	r18,r18,20
   86ad4:	8421883a 	add	r16,r16,r16
   86ad8:	b463883a 	add	r17,r22,r17
   86adc:	8421883a 	add	r16,r16,r16
   86ae0:	dd800015 	stw	r22,0(sp)
   86ae4:	dc800415 	stw	r18,16(sp)
   86ae8:	dc400515 	stw	r17,20(sp)
   86aec:	9429883a 	add	r20,r18,r16
   86af0:	b4404f2e 	bgeu	r22,r17,86c30 <__multiply+0x214>
   86af4:	d8c00017 	ldw	r3,0(sp)
   86af8:	1c800017 	ldw	r18,0(r3)
   86afc:	947fffcc 	andi	r17,r18,65535
   86b00:	88001e26 	beq	r17,zero,86b7c <__multiply+0x160>
   86b04:	dd800117 	ldw	r22,4(sp)
   86b08:	dd400417 	ldw	r21,16(sp)
   86b0c:	0027883a 	mov	r19,zero
   86b10:	ac800017 	ldw	r18,0(r21)
   86b14:	b4000017 	ldw	r16,0(r22)
   86b18:	880b883a 	mov	r5,r17
   86b1c:	913fffcc 	andi	r4,r18,65535
   86b20:	008b08c0 	call	8b08c <__mulsi3>
   86b24:	9008d43a 	srli	r4,r18,16
   86b28:	84bfffcc 	andi	r18,r16,65535
   86b2c:	1485883a 	add	r2,r2,r18
   86b30:	14e5883a 	add	r18,r2,r19
   86b34:	8020d43a 	srli	r16,r16,16
   86b38:	9026d43a 	srli	r19,r18,16
   86b3c:	880b883a 	mov	r5,r17
   86b40:	008b08c0 	call	8b08c <__mulsi3>
   86b44:	1405883a 	add	r2,r2,r16
   86b48:	14e1883a 	add	r16,r2,r19
   86b4c:	90ffffcc 	andi	r3,r18,65535
   86b50:	8024943a 	slli	r18,r16,16
   86b54:	ad400104 	addi	r21,r21,4
   86b58:	b005883a 	mov	r2,r22
   86b5c:	90c6b03a 	or	r3,r18,r3
   86b60:	b0c00015 	stw	r3,0(r22)
   86b64:	8026d43a 	srli	r19,r16,16
   86b68:	b5800104 	addi	r22,r22,4
   86b6c:	ad3fe836 	bltu	r21,r20,86b10 <__alt_data_end+0xfffc8310>
   86b70:	d8c00017 	ldw	r3,0(sp)
   86b74:	14c00115 	stw	r19,4(r2)
   86b78:	1c800017 	ldw	r18,0(r3)
   86b7c:	9024d43a 	srli	r18,r18,16
   86b80:	90002226 	beq	r18,zero,86c0c <__multiply+0x1f0>
   86b84:	d8c00117 	ldw	r3,4(sp)
   86b88:	dd800417 	ldw	r22,16(sp)
   86b8c:	002f883a 	mov	r23,zero
   86b90:	1f000017 	ldw	fp,0(r3)
   86b94:	1823883a 	mov	r17,r3
   86b98:	182b883a 	mov	r21,r3
   86b9c:	e021883a 	mov	r16,fp
   86ba0:	00000106 	br	86ba8 <__multiply+0x18c>
   86ba4:	982b883a 	mov	r21,r19
   86ba8:	b100000b 	ldhu	r4,0(r22)
   86bac:	8020d43a 	srli	r16,r16,16
   86bb0:	900b883a 	mov	r5,r18
   86bb4:	008b08c0 	call	8b08c <__mulsi3>
   86bb8:	1405883a 	add	r2,r2,r16
   86bbc:	15ef883a 	add	r23,r2,r23
   86bc0:	b804943a 	slli	r2,r23,16
   86bc4:	e0ffffcc 	andi	r3,fp,65535
   86bc8:	8c400104 	addi	r17,r17,4
   86bcc:	10c6b03a 	or	r3,r2,r3
   86bd0:	88ffff15 	stw	r3,-4(r17)
   86bd4:	b5800104 	addi	r22,r22,4
   86bd8:	b13fff17 	ldw	r4,-4(r22)
   86bdc:	acc00104 	addi	r19,r21,4
   86be0:	900b883a 	mov	r5,r18
   86be4:	2008d43a 	srli	r4,r4,16
   86be8:	9c000017 	ldw	r16,0(r19)
   86bec:	008b08c0 	call	8b08c <__mulsi3>
   86bf0:	b806d43a 	srli	r3,r23,16
   86bf4:	813fffcc 	andi	r4,r16,65535
   86bf8:	1105883a 	add	r2,r2,r4
   86bfc:	10f9883a 	add	fp,r2,r3
   86c00:	e02ed43a 	srli	r23,fp,16
   86c04:	b53fe736 	bltu	r22,r20,86ba4 <__alt_data_end+0xfffc83a4>
   86c08:	af000115 	stw	fp,4(r21)
   86c0c:	d8c00017 	ldw	r3,0(sp)
   86c10:	d9000517 	ldw	r4,20(sp)
   86c14:	18c00104 	addi	r3,r3,4
   86c18:	d8c00015 	stw	r3,0(sp)
   86c1c:	d8c00117 	ldw	r3,4(sp)
   86c20:	18c00104 	addi	r3,r3,4
   86c24:	d8c00115 	stw	r3,4(sp)
   86c28:	d8c00017 	ldw	r3,0(sp)
   86c2c:	193fb136 	bltu	r3,r4,86af4 <__alt_data_end+0xfffc82f4>
   86c30:	d8c00217 	ldw	r3,8(sp)
   86c34:	00c00c0e 	bge	zero,r3,86c68 <__multiply+0x24c>
   86c38:	d8c00317 	ldw	r3,12(sp)
   86c3c:	18bfff17 	ldw	r2,-4(r3)
   86c40:	1d7fff04 	addi	r21,r3,-4
   86c44:	10000326 	beq	r2,zero,86c54 <__multiply+0x238>
   86c48:	00000706 	br	86c68 <__multiply+0x24c>
   86c4c:	a8800017 	ldw	r2,0(r21)
   86c50:	1000051e 	bne	r2,zero,86c68 <__multiply+0x24c>
   86c54:	d8c00217 	ldw	r3,8(sp)
   86c58:	ad7fff04 	addi	r21,r21,-4
   86c5c:	18ffffc4 	addi	r3,r3,-1
   86c60:	d8c00215 	stw	r3,8(sp)
   86c64:	183ff91e 	bne	r3,zero,86c4c <__alt_data_end+0xfffc844c>
   86c68:	d8c00617 	ldw	r3,24(sp)
   86c6c:	d9000217 	ldw	r4,8(sp)
   86c70:	1805883a 	mov	r2,r3
   86c74:	19000415 	stw	r4,16(r3)
   86c78:	dfc01017 	ldw	ra,64(sp)
   86c7c:	df000f17 	ldw	fp,60(sp)
   86c80:	ddc00e17 	ldw	r23,56(sp)
   86c84:	dd800d17 	ldw	r22,52(sp)
   86c88:	dd400c17 	ldw	r21,48(sp)
   86c8c:	dd000b17 	ldw	r20,44(sp)
   86c90:	dcc00a17 	ldw	r19,40(sp)
   86c94:	dc800917 	ldw	r18,36(sp)
   86c98:	dc400817 	ldw	r17,32(sp)
   86c9c:	dc000717 	ldw	r16,28(sp)
   86ca0:	dec01104 	addi	sp,sp,68
   86ca4:	f800283a 	ret

00086ca8 <__pow5mult>:
   86ca8:	defffa04 	addi	sp,sp,-24
   86cac:	dcc00315 	stw	r19,12(sp)
   86cb0:	dc000015 	stw	r16,0(sp)
   86cb4:	dfc00515 	stw	ra,20(sp)
   86cb8:	dd000415 	stw	r20,16(sp)
   86cbc:	dc800215 	stw	r18,8(sp)
   86cc0:	dc400115 	stw	r17,4(sp)
   86cc4:	308000cc 	andi	r2,r6,3
   86cc8:	3021883a 	mov	r16,r6
   86ccc:	2027883a 	mov	r19,r4
   86cd0:	10002f1e 	bne	r2,zero,86d90 <__pow5mult+0xe8>
   86cd4:	2825883a 	mov	r18,r5
   86cd8:	8021d0ba 	srai	r16,r16,2
   86cdc:	80001a26 	beq	r16,zero,86d48 <__pow5mult+0xa0>
   86ce0:	9c401217 	ldw	r17,72(r19)
   86ce4:	8800061e 	bne	r17,zero,86d00 <__pow5mult+0x58>
   86ce8:	00003406 	br	86dbc <__pow5mult+0x114>
   86cec:	8021d07a 	srai	r16,r16,1
   86cf0:	80001526 	beq	r16,zero,86d48 <__pow5mult+0xa0>
   86cf4:	88800017 	ldw	r2,0(r17)
   86cf8:	10001c26 	beq	r2,zero,86d6c <__pow5mult+0xc4>
   86cfc:	1023883a 	mov	r17,r2
   86d00:	8080004c 	andi	r2,r16,1
   86d04:	103ff926 	beq	r2,zero,86cec <__alt_data_end+0xfffc84ec>
   86d08:	880d883a 	mov	r6,r17
   86d0c:	900b883a 	mov	r5,r18
   86d10:	9809883a 	mov	r4,r19
   86d14:	0086a1c0 	call	86a1c <__multiply>
   86d18:	90001b26 	beq	r18,zero,86d88 <__pow5mult+0xe0>
   86d1c:	91000117 	ldw	r4,4(r18)
   86d20:	98c01317 	ldw	r3,76(r19)
   86d24:	8021d07a 	srai	r16,r16,1
   86d28:	2109883a 	add	r4,r4,r4
   86d2c:	2109883a 	add	r4,r4,r4
   86d30:	1907883a 	add	r3,r3,r4
   86d34:	19000017 	ldw	r4,0(r3)
   86d38:	91000015 	stw	r4,0(r18)
   86d3c:	1c800015 	stw	r18,0(r3)
   86d40:	1025883a 	mov	r18,r2
   86d44:	803feb1e 	bne	r16,zero,86cf4 <__alt_data_end+0xfffc84f4>
   86d48:	9005883a 	mov	r2,r18
   86d4c:	dfc00517 	ldw	ra,20(sp)
   86d50:	dd000417 	ldw	r20,16(sp)
   86d54:	dcc00317 	ldw	r19,12(sp)
   86d58:	dc800217 	ldw	r18,8(sp)
   86d5c:	dc400117 	ldw	r17,4(sp)
   86d60:	dc000017 	ldw	r16,0(sp)
   86d64:	dec00604 	addi	sp,sp,24
   86d68:	f800283a 	ret
   86d6c:	880d883a 	mov	r6,r17
   86d70:	880b883a 	mov	r5,r17
   86d74:	9809883a 	mov	r4,r19
   86d78:	0086a1c0 	call	86a1c <__multiply>
   86d7c:	88800015 	stw	r2,0(r17)
   86d80:	10000015 	stw	zero,0(r2)
   86d84:	003fdd06 	br	86cfc <__alt_data_end+0xfffc84fc>
   86d88:	1025883a 	mov	r18,r2
   86d8c:	003fd706 	br	86cec <__alt_data_end+0xfffc84ec>
   86d90:	10bfffc4 	addi	r2,r2,-1
   86d94:	1085883a 	add	r2,r2,r2
   86d98:	00c002b4 	movhi	r3,10
   86d9c:	18e0a604 	addi	r3,r3,-32104
   86da0:	1085883a 	add	r2,r2,r2
   86da4:	1885883a 	add	r2,r3,r2
   86da8:	11800017 	ldw	r6,0(r2)
   86dac:	000f883a 	mov	r7,zero
   86db0:	008667c0 	call	8667c <__multadd>
   86db4:	1025883a 	mov	r18,r2
   86db8:	003fc706 	br	86cd8 <__alt_data_end+0xfffc84d8>
   86dbc:	05000044 	movi	r20,1
   86dc0:	a00b883a 	mov	r5,r20
   86dc4:	9809883a 	mov	r4,r19
   86dc8:	00865ac0 	call	865ac <_Balloc>
   86dcc:	1023883a 	mov	r17,r2
   86dd0:	00809c44 	movi	r2,625
   86dd4:	88800515 	stw	r2,20(r17)
   86dd8:	8d000415 	stw	r20,16(r17)
   86ddc:	9c401215 	stw	r17,72(r19)
   86de0:	88000015 	stw	zero,0(r17)
   86de4:	003fc606 	br	86d00 <__alt_data_end+0xfffc8500>

00086de8 <__lshift>:
   86de8:	defff904 	addi	sp,sp,-28
   86dec:	dd400515 	stw	r21,20(sp)
   86df0:	dcc00315 	stw	r19,12(sp)
   86df4:	302bd17a 	srai	r21,r6,5
   86df8:	2cc00417 	ldw	r19,16(r5)
   86dfc:	28800217 	ldw	r2,8(r5)
   86e00:	dd000415 	stw	r20,16(sp)
   86e04:	ace7883a 	add	r19,r21,r19
   86e08:	dc800215 	stw	r18,8(sp)
   86e0c:	dc400115 	stw	r17,4(sp)
   86e10:	dc000015 	stw	r16,0(sp)
   86e14:	dfc00615 	stw	ra,24(sp)
   86e18:	9c000044 	addi	r16,r19,1
   86e1c:	2823883a 	mov	r17,r5
   86e20:	3029883a 	mov	r20,r6
   86e24:	2025883a 	mov	r18,r4
   86e28:	29400117 	ldw	r5,4(r5)
   86e2c:	1400030e 	bge	r2,r16,86e3c <__lshift+0x54>
   86e30:	1085883a 	add	r2,r2,r2
   86e34:	29400044 	addi	r5,r5,1
   86e38:	143ffd16 	blt	r2,r16,86e30 <__alt_data_end+0xfffc8630>
   86e3c:	9009883a 	mov	r4,r18
   86e40:	00865ac0 	call	865ac <_Balloc>
   86e44:	10c00504 	addi	r3,r2,20
   86e48:	0540070e 	bge	zero,r21,86e68 <__lshift+0x80>
   86e4c:	ad6b883a 	add	r21,r21,r21
   86e50:	ad6b883a 	add	r21,r21,r21
   86e54:	1809883a 	mov	r4,r3
   86e58:	1d47883a 	add	r3,r3,r21
   86e5c:	20000015 	stw	zero,0(r4)
   86e60:	21000104 	addi	r4,r4,4
   86e64:	193ffd1e 	bne	r3,r4,86e5c <__alt_data_end+0xfffc865c>
   86e68:	8a000417 	ldw	r8,16(r17)
   86e6c:	89000504 	addi	r4,r17,20
   86e70:	a18007cc 	andi	r6,r20,31
   86e74:	4211883a 	add	r8,r8,r8
   86e78:	4211883a 	add	r8,r8,r8
   86e7c:	2211883a 	add	r8,r4,r8
   86e80:	30002326 	beq	r6,zero,86f10 <__lshift+0x128>
   86e84:	02400804 	movi	r9,32
   86e88:	4993c83a 	sub	r9,r9,r6
   86e8c:	000b883a 	mov	r5,zero
   86e90:	21c00017 	ldw	r7,0(r4)
   86e94:	1815883a 	mov	r10,r3
   86e98:	18c00104 	addi	r3,r3,4
   86e9c:	398e983a 	sll	r7,r7,r6
   86ea0:	21000104 	addi	r4,r4,4
   86ea4:	394ab03a 	or	r5,r7,r5
   86ea8:	197fff15 	stw	r5,-4(r3)
   86eac:	217fff17 	ldw	r5,-4(r4)
   86eb0:	2a4ad83a 	srl	r5,r5,r9
   86eb4:	223ff636 	bltu	r4,r8,86e90 <__alt_data_end+0xfffc8690>
   86eb8:	51400115 	stw	r5,4(r10)
   86ebc:	28001a1e 	bne	r5,zero,86f28 <__lshift+0x140>
   86ec0:	843fffc4 	addi	r16,r16,-1
   86ec4:	14000415 	stw	r16,16(r2)
   86ec8:	88000826 	beq	r17,zero,86eec <__lshift+0x104>
   86ecc:	89000117 	ldw	r4,4(r17)
   86ed0:	90c01317 	ldw	r3,76(r18)
   86ed4:	2109883a 	add	r4,r4,r4
   86ed8:	2109883a 	add	r4,r4,r4
   86edc:	1907883a 	add	r3,r3,r4
   86ee0:	19000017 	ldw	r4,0(r3)
   86ee4:	89000015 	stw	r4,0(r17)
   86ee8:	1c400015 	stw	r17,0(r3)
   86eec:	dfc00617 	ldw	ra,24(sp)
   86ef0:	dd400517 	ldw	r21,20(sp)
   86ef4:	dd000417 	ldw	r20,16(sp)
   86ef8:	dcc00317 	ldw	r19,12(sp)
   86efc:	dc800217 	ldw	r18,8(sp)
   86f00:	dc400117 	ldw	r17,4(sp)
   86f04:	dc000017 	ldw	r16,0(sp)
   86f08:	dec00704 	addi	sp,sp,28
   86f0c:	f800283a 	ret
   86f10:	21400017 	ldw	r5,0(r4)
   86f14:	18c00104 	addi	r3,r3,4
   86f18:	21000104 	addi	r4,r4,4
   86f1c:	197fff15 	stw	r5,-4(r3)
   86f20:	223ffb36 	bltu	r4,r8,86f10 <__alt_data_end+0xfffc8710>
   86f24:	003fe606 	br	86ec0 <__alt_data_end+0xfffc86c0>
   86f28:	9c000084 	addi	r16,r19,2
   86f2c:	003fe406 	br	86ec0 <__alt_data_end+0xfffc86c0>

00086f30 <__mcmp>:
   86f30:	20800417 	ldw	r2,16(r4)
   86f34:	28c00417 	ldw	r3,16(r5)
   86f38:	10c5c83a 	sub	r2,r2,r3
   86f3c:	1000111e 	bne	r2,zero,86f84 <__mcmp+0x54>
   86f40:	18c7883a 	add	r3,r3,r3
   86f44:	18c7883a 	add	r3,r3,r3
   86f48:	21000504 	addi	r4,r4,20
   86f4c:	29400504 	addi	r5,r5,20
   86f50:	20c5883a 	add	r2,r4,r3
   86f54:	28cb883a 	add	r5,r5,r3
   86f58:	00000106 	br	86f60 <__mcmp+0x30>
   86f5c:	20800a2e 	bgeu	r4,r2,86f88 <__mcmp+0x58>
   86f60:	10bfff04 	addi	r2,r2,-4
   86f64:	297fff04 	addi	r5,r5,-4
   86f68:	11800017 	ldw	r6,0(r2)
   86f6c:	28c00017 	ldw	r3,0(r5)
   86f70:	30fffa26 	beq	r6,r3,86f5c <__alt_data_end+0xfffc875c>
   86f74:	30c00236 	bltu	r6,r3,86f80 <__mcmp+0x50>
   86f78:	00800044 	movi	r2,1
   86f7c:	f800283a 	ret
   86f80:	00bfffc4 	movi	r2,-1
   86f84:	f800283a 	ret
   86f88:	0005883a 	mov	r2,zero
   86f8c:	f800283a 	ret

00086f90 <__mdiff>:
   86f90:	28c00417 	ldw	r3,16(r5)
   86f94:	30800417 	ldw	r2,16(r6)
   86f98:	defffa04 	addi	sp,sp,-24
   86f9c:	dcc00315 	stw	r19,12(sp)
   86fa0:	dc800215 	stw	r18,8(sp)
   86fa4:	dfc00515 	stw	ra,20(sp)
   86fa8:	dd000415 	stw	r20,16(sp)
   86fac:	dc400115 	stw	r17,4(sp)
   86fb0:	dc000015 	stw	r16,0(sp)
   86fb4:	1887c83a 	sub	r3,r3,r2
   86fb8:	2825883a 	mov	r18,r5
   86fbc:	3027883a 	mov	r19,r6
   86fc0:	1800141e 	bne	r3,zero,87014 <__mdiff+0x84>
   86fc4:	1085883a 	add	r2,r2,r2
   86fc8:	1085883a 	add	r2,r2,r2
   86fcc:	2a000504 	addi	r8,r5,20
   86fd0:	34000504 	addi	r16,r6,20
   86fd4:	4087883a 	add	r3,r8,r2
   86fd8:	8085883a 	add	r2,r16,r2
   86fdc:	00000106 	br	86fe4 <__mdiff+0x54>
   86fe0:	40c0592e 	bgeu	r8,r3,87148 <__mdiff+0x1b8>
   86fe4:	18ffff04 	addi	r3,r3,-4
   86fe8:	10bfff04 	addi	r2,r2,-4
   86fec:	19c00017 	ldw	r7,0(r3)
   86ff0:	11400017 	ldw	r5,0(r2)
   86ff4:	397ffa26 	beq	r7,r5,86fe0 <__alt_data_end+0xfffc87e0>
   86ff8:	3940592e 	bgeu	r7,r5,87160 <__mdiff+0x1d0>
   86ffc:	9005883a 	mov	r2,r18
   87000:	4023883a 	mov	r17,r8
   87004:	9825883a 	mov	r18,r19
   87008:	05000044 	movi	r20,1
   8700c:	1027883a 	mov	r19,r2
   87010:	00000406 	br	87024 <__mdiff+0x94>
   87014:	18005616 	blt	r3,zero,87170 <__mdiff+0x1e0>
   87018:	34400504 	addi	r17,r6,20
   8701c:	2c000504 	addi	r16,r5,20
   87020:	0029883a 	mov	r20,zero
   87024:	91400117 	ldw	r5,4(r18)
   87028:	00865ac0 	call	865ac <_Balloc>
   8702c:	92400417 	ldw	r9,16(r18)
   87030:	9b000417 	ldw	r12,16(r19)
   87034:	12c00504 	addi	r11,r2,20
   87038:	4a51883a 	add	r8,r9,r9
   8703c:	6319883a 	add	r12,r12,r12
   87040:	4211883a 	add	r8,r8,r8
   87044:	6319883a 	add	r12,r12,r12
   87048:	15000315 	stw	r20,12(r2)
   8704c:	8211883a 	add	r8,r16,r8
   87050:	8b19883a 	add	r12,r17,r12
   87054:	0007883a 	mov	r3,zero
   87058:	81400017 	ldw	r5,0(r16)
   8705c:	89c00017 	ldw	r7,0(r17)
   87060:	59800104 	addi	r6,r11,4
   87064:	293fffcc 	andi	r4,r5,65535
   87068:	20c7883a 	add	r3,r4,r3
   8706c:	393fffcc 	andi	r4,r7,65535
   87070:	1909c83a 	sub	r4,r3,r4
   87074:	280ad43a 	srli	r5,r5,16
   87078:	380ed43a 	srli	r7,r7,16
   8707c:	2007d43a 	srai	r3,r4,16
   87080:	213fffcc 	andi	r4,r4,65535
   87084:	29cbc83a 	sub	r5,r5,r7
   87088:	28c7883a 	add	r3,r5,r3
   8708c:	180a943a 	slli	r5,r3,16
   87090:	8c400104 	addi	r17,r17,4
   87094:	84000104 	addi	r16,r16,4
   87098:	2908b03a 	or	r4,r5,r4
   8709c:	59000015 	stw	r4,0(r11)
   870a0:	1807d43a 	srai	r3,r3,16
   870a4:	3015883a 	mov	r10,r6
   870a8:	3017883a 	mov	r11,r6
   870ac:	8b3fea36 	bltu	r17,r12,87058 <__alt_data_end+0xfffc8858>
   870b0:	8200162e 	bgeu	r16,r8,8710c <__mdiff+0x17c>
   870b4:	8017883a 	mov	r11,r16
   870b8:	59400017 	ldw	r5,0(r11)
   870bc:	31800104 	addi	r6,r6,4
   870c0:	5ac00104 	addi	r11,r11,4
   870c4:	293fffcc 	andi	r4,r5,65535
   870c8:	20c7883a 	add	r3,r4,r3
   870cc:	280ed43a 	srli	r7,r5,16
   870d0:	180bd43a 	srai	r5,r3,16
   870d4:	193fffcc 	andi	r4,r3,65535
   870d8:	3947883a 	add	r3,r7,r5
   870dc:	180a943a 	slli	r5,r3,16
   870e0:	1807d43a 	srai	r3,r3,16
   870e4:	2908b03a 	or	r4,r5,r4
   870e8:	313fff15 	stw	r4,-4(r6)
   870ec:	5a3ff236 	bltu	r11,r8,870b8 <__alt_data_end+0xfffc88b8>
   870f0:	0406303a 	nor	r3,zero,r16
   870f4:	1a07883a 	add	r3,r3,r8
   870f8:	1806d0ba 	srli	r3,r3,2
   870fc:	18c00044 	addi	r3,r3,1
   87100:	18c7883a 	add	r3,r3,r3
   87104:	18c7883a 	add	r3,r3,r3
   87108:	50d5883a 	add	r10,r10,r3
   8710c:	50ffff04 	addi	r3,r10,-4
   87110:	2000041e 	bne	r4,zero,87124 <__mdiff+0x194>
   87114:	18ffff04 	addi	r3,r3,-4
   87118:	19000017 	ldw	r4,0(r3)
   8711c:	4a7fffc4 	addi	r9,r9,-1
   87120:	203ffc26 	beq	r4,zero,87114 <__alt_data_end+0xfffc8914>
   87124:	12400415 	stw	r9,16(r2)
   87128:	dfc00517 	ldw	ra,20(sp)
   8712c:	dd000417 	ldw	r20,16(sp)
   87130:	dcc00317 	ldw	r19,12(sp)
   87134:	dc800217 	ldw	r18,8(sp)
   87138:	dc400117 	ldw	r17,4(sp)
   8713c:	dc000017 	ldw	r16,0(sp)
   87140:	dec00604 	addi	sp,sp,24
   87144:	f800283a 	ret
   87148:	000b883a 	mov	r5,zero
   8714c:	00865ac0 	call	865ac <_Balloc>
   87150:	00c00044 	movi	r3,1
   87154:	10c00415 	stw	r3,16(r2)
   87158:	10000515 	stw	zero,20(r2)
   8715c:	003ff206 	br	87128 <__alt_data_end+0xfffc8928>
   87160:	8023883a 	mov	r17,r16
   87164:	0029883a 	mov	r20,zero
   87168:	4021883a 	mov	r16,r8
   8716c:	003fad06 	br	87024 <__alt_data_end+0xfffc8824>
   87170:	9005883a 	mov	r2,r18
   87174:	94400504 	addi	r17,r18,20
   87178:	9c000504 	addi	r16,r19,20
   8717c:	9825883a 	mov	r18,r19
   87180:	05000044 	movi	r20,1
   87184:	1027883a 	mov	r19,r2
   87188:	003fa606 	br	87024 <__alt_data_end+0xfffc8824>

0008718c <__ulp>:
   8718c:	295ffc2c 	andhi	r5,r5,32752
   87190:	00bf3034 	movhi	r2,64704
   87194:	2887883a 	add	r3,r5,r2
   87198:	00c0020e 	bge	zero,r3,871a4 <__ulp+0x18>
   8719c:	0005883a 	mov	r2,zero
   871a0:	f800283a 	ret
   871a4:	00c7c83a 	sub	r3,zero,r3
   871a8:	1807d53a 	srai	r3,r3,20
   871ac:	008004c4 	movi	r2,19
   871b0:	10c00b0e 	bge	r2,r3,871e0 <__ulp+0x54>
   871b4:	18bffb04 	addi	r2,r3,-20
   871b8:	01000784 	movi	r4,30
   871bc:	0007883a 	mov	r3,zero
   871c0:	20800516 	blt	r4,r2,871d8 <__ulp+0x4c>
   871c4:	010007c4 	movi	r4,31
   871c8:	2089c83a 	sub	r4,r4,r2
   871cc:	00800044 	movi	r2,1
   871d0:	1104983a 	sll	r2,r2,r4
   871d4:	f800283a 	ret
   871d8:	00800044 	movi	r2,1
   871dc:	f800283a 	ret
   871e0:	01400234 	movhi	r5,8
   871e4:	28c7d83a 	sra	r3,r5,r3
   871e8:	0005883a 	mov	r2,zero
   871ec:	f800283a 	ret

000871f0 <__b2d>:
   871f0:	defffa04 	addi	sp,sp,-24
   871f4:	dc000015 	stw	r16,0(sp)
   871f8:	24000417 	ldw	r16,16(r4)
   871fc:	dc400115 	stw	r17,4(sp)
   87200:	24400504 	addi	r17,r4,20
   87204:	8421883a 	add	r16,r16,r16
   87208:	8421883a 	add	r16,r16,r16
   8720c:	8c21883a 	add	r16,r17,r16
   87210:	dc800215 	stw	r18,8(sp)
   87214:	84bfff17 	ldw	r18,-4(r16)
   87218:	dd000415 	stw	r20,16(sp)
   8721c:	dcc00315 	stw	r19,12(sp)
   87220:	9009883a 	mov	r4,r18
   87224:	2829883a 	mov	r20,r5
   87228:	dfc00515 	stw	ra,20(sp)
   8722c:	00868c80 	call	868c8 <__hi0bits>
   87230:	00c00804 	movi	r3,32
   87234:	1889c83a 	sub	r4,r3,r2
   87238:	a1000015 	stw	r4,0(r20)
   8723c:	01000284 	movi	r4,10
   87240:	84ffff04 	addi	r19,r16,-4
   87244:	20801216 	blt	r4,r2,87290 <__b2d+0xa0>
   87248:	018002c4 	movi	r6,11
   8724c:	308dc83a 	sub	r6,r6,r2
   87250:	9186d83a 	srl	r3,r18,r6
   87254:	18cffc34 	orhi	r3,r3,16368
   87258:	8cc0212e 	bgeu	r17,r19,872e0 <__b2d+0xf0>
   8725c:	813ffe17 	ldw	r4,-8(r16)
   87260:	218cd83a 	srl	r6,r4,r6
   87264:	10800544 	addi	r2,r2,21
   87268:	9084983a 	sll	r2,r18,r2
   8726c:	1184b03a 	or	r2,r2,r6
   87270:	dfc00517 	ldw	ra,20(sp)
   87274:	dd000417 	ldw	r20,16(sp)
   87278:	dcc00317 	ldw	r19,12(sp)
   8727c:	dc800217 	ldw	r18,8(sp)
   87280:	dc400117 	ldw	r17,4(sp)
   87284:	dc000017 	ldw	r16,0(sp)
   87288:	dec00604 	addi	sp,sp,24
   8728c:	f800283a 	ret
   87290:	8cc00f2e 	bgeu	r17,r19,872d0 <__b2d+0xe0>
   87294:	117ffd44 	addi	r5,r2,-11
   87298:	80bffe17 	ldw	r2,-8(r16)
   8729c:	28000e26 	beq	r5,zero,872d8 <__b2d+0xe8>
   872a0:	1949c83a 	sub	r4,r3,r5
   872a4:	9164983a 	sll	r18,r18,r5
   872a8:	1106d83a 	srl	r3,r2,r4
   872ac:	81bffe04 	addi	r6,r16,-8
   872b0:	948ffc34 	orhi	r18,r18,16368
   872b4:	90c6b03a 	or	r3,r18,r3
   872b8:	89800e2e 	bgeu	r17,r6,872f4 <__b2d+0x104>
   872bc:	81bffd17 	ldw	r6,-12(r16)
   872c0:	1144983a 	sll	r2,r2,r5
   872c4:	310ad83a 	srl	r5,r6,r4
   872c8:	2884b03a 	or	r2,r5,r2
   872cc:	003fe806 	br	87270 <__alt_data_end+0xfffc8a70>
   872d0:	10bffd44 	addi	r2,r2,-11
   872d4:	1000041e 	bne	r2,zero,872e8 <__b2d+0xf8>
   872d8:	90cffc34 	orhi	r3,r18,16368
   872dc:	003fe406 	br	87270 <__alt_data_end+0xfffc8a70>
   872e0:	000d883a 	mov	r6,zero
   872e4:	003fdf06 	br	87264 <__alt_data_end+0xfffc8a64>
   872e8:	90a4983a 	sll	r18,r18,r2
   872ec:	0005883a 	mov	r2,zero
   872f0:	003ff906 	br	872d8 <__alt_data_end+0xfffc8ad8>
   872f4:	1144983a 	sll	r2,r2,r5
   872f8:	003fdd06 	br	87270 <__alt_data_end+0xfffc8a70>

000872fc <__d2b>:
   872fc:	defff804 	addi	sp,sp,-32
   87300:	dc000215 	stw	r16,8(sp)
   87304:	3021883a 	mov	r16,r6
   87308:	dc400315 	stw	r17,12(sp)
   8730c:	8022907a 	slli	r17,r16,1
   87310:	dd000615 	stw	r20,24(sp)
   87314:	2829883a 	mov	r20,r5
   87318:	01400044 	movi	r5,1
   8731c:	dcc00515 	stw	r19,20(sp)
   87320:	dc800415 	stw	r18,16(sp)
   87324:	dfc00715 	stw	ra,28(sp)
   87328:	3825883a 	mov	r18,r7
   8732c:	8822d57a 	srli	r17,r17,21
   87330:	00865ac0 	call	865ac <_Balloc>
   87334:	1027883a 	mov	r19,r2
   87338:	00800434 	movhi	r2,16
   8733c:	10bfffc4 	addi	r2,r2,-1
   87340:	808c703a 	and	r6,r16,r2
   87344:	88000126 	beq	r17,zero,8734c <__d2b+0x50>
   87348:	31800434 	orhi	r6,r6,16
   8734c:	d9800015 	stw	r6,0(sp)
   87350:	a0002426 	beq	r20,zero,873e4 <__d2b+0xe8>
   87354:	d9000104 	addi	r4,sp,4
   87358:	dd000115 	stw	r20,4(sp)
   8735c:	00869300 	call	86930 <__lo0bits>
   87360:	d8c00017 	ldw	r3,0(sp)
   87364:	10002f1e 	bne	r2,zero,87424 <__d2b+0x128>
   87368:	d9000117 	ldw	r4,4(sp)
   8736c:	99000515 	stw	r4,20(r19)
   87370:	1821003a 	cmpeq	r16,r3,zero
   87374:	01000084 	movi	r4,2
   87378:	2421c83a 	sub	r16,r4,r16
   8737c:	98c00615 	stw	r3,24(r19)
   87380:	9c000415 	stw	r16,16(r19)
   87384:	88001f1e 	bne	r17,zero,87404 <__d2b+0x108>
   87388:	10bef384 	addi	r2,r2,-1074
   8738c:	90800015 	stw	r2,0(r18)
   87390:	00900034 	movhi	r2,16384
   87394:	10bfffc4 	addi	r2,r2,-1
   87398:	8085883a 	add	r2,r16,r2
   8739c:	1085883a 	add	r2,r2,r2
   873a0:	1085883a 	add	r2,r2,r2
   873a4:	9885883a 	add	r2,r19,r2
   873a8:	11000517 	ldw	r4,20(r2)
   873ac:	8020917a 	slli	r16,r16,5
   873b0:	00868c80 	call	868c8 <__hi0bits>
   873b4:	d8c00817 	ldw	r3,32(sp)
   873b8:	8085c83a 	sub	r2,r16,r2
   873bc:	18800015 	stw	r2,0(r3)
   873c0:	9805883a 	mov	r2,r19
   873c4:	dfc00717 	ldw	ra,28(sp)
   873c8:	dd000617 	ldw	r20,24(sp)
   873cc:	dcc00517 	ldw	r19,20(sp)
   873d0:	dc800417 	ldw	r18,16(sp)
   873d4:	dc400317 	ldw	r17,12(sp)
   873d8:	dc000217 	ldw	r16,8(sp)
   873dc:	dec00804 	addi	sp,sp,32
   873e0:	f800283a 	ret
   873e4:	d809883a 	mov	r4,sp
   873e8:	00869300 	call	86930 <__lo0bits>
   873ec:	d8c00017 	ldw	r3,0(sp)
   873f0:	04000044 	movi	r16,1
   873f4:	9c000415 	stw	r16,16(r19)
   873f8:	98c00515 	stw	r3,20(r19)
   873fc:	10800804 	addi	r2,r2,32
   87400:	883fe126 	beq	r17,zero,87388 <__alt_data_end+0xfffc8b88>
   87404:	00c00d44 	movi	r3,53
   87408:	8c7ef344 	addi	r17,r17,-1075
   8740c:	88a3883a 	add	r17,r17,r2
   87410:	1885c83a 	sub	r2,r3,r2
   87414:	d8c00817 	ldw	r3,32(sp)
   87418:	94400015 	stw	r17,0(r18)
   8741c:	18800015 	stw	r2,0(r3)
   87420:	003fe706 	br	873c0 <__alt_data_end+0xfffc8bc0>
   87424:	01000804 	movi	r4,32
   87428:	2089c83a 	sub	r4,r4,r2
   8742c:	1908983a 	sll	r4,r3,r4
   87430:	d9400117 	ldw	r5,4(sp)
   87434:	1886d83a 	srl	r3,r3,r2
   87438:	2148b03a 	or	r4,r4,r5
   8743c:	99000515 	stw	r4,20(r19)
   87440:	d8c00015 	stw	r3,0(sp)
   87444:	003fca06 	br	87370 <__alt_data_end+0xfffc8b70>

00087448 <__ratio>:
   87448:	defff904 	addi	sp,sp,-28
   8744c:	dc400315 	stw	r17,12(sp)
   87450:	2823883a 	mov	r17,r5
   87454:	d9400104 	addi	r5,sp,4
   87458:	dfc00615 	stw	ra,24(sp)
   8745c:	dcc00515 	stw	r19,20(sp)
   87460:	dc800415 	stw	r18,16(sp)
   87464:	2027883a 	mov	r19,r4
   87468:	dc000215 	stw	r16,8(sp)
   8746c:	00871f00 	call	871f0 <__b2d>
   87470:	d80b883a 	mov	r5,sp
   87474:	8809883a 	mov	r4,r17
   87478:	1025883a 	mov	r18,r2
   8747c:	1821883a 	mov	r16,r3
   87480:	00871f00 	call	871f0 <__b2d>
   87484:	8a000417 	ldw	r8,16(r17)
   87488:	99000417 	ldw	r4,16(r19)
   8748c:	d9400117 	ldw	r5,4(sp)
   87490:	2209c83a 	sub	r4,r4,r8
   87494:	2010917a 	slli	r8,r4,5
   87498:	d9000017 	ldw	r4,0(sp)
   8749c:	2909c83a 	sub	r4,r5,r4
   874a0:	4109883a 	add	r4,r8,r4
   874a4:	01000e0e 	bge	zero,r4,874e0 <__ratio+0x98>
   874a8:	2008953a 	slli	r4,r4,20
   874ac:	2421883a 	add	r16,r4,r16
   874b0:	100d883a 	mov	r6,r2
   874b4:	180f883a 	mov	r7,r3
   874b8:	9009883a 	mov	r4,r18
   874bc:	800b883a 	mov	r5,r16
   874c0:	008b9600 	call	8b960 <__divdf3>
   874c4:	dfc00617 	ldw	ra,24(sp)
   874c8:	dcc00517 	ldw	r19,20(sp)
   874cc:	dc800417 	ldw	r18,16(sp)
   874d0:	dc400317 	ldw	r17,12(sp)
   874d4:	dc000217 	ldw	r16,8(sp)
   874d8:	dec00704 	addi	sp,sp,28
   874dc:	f800283a 	ret
   874e0:	2008953a 	slli	r4,r4,20
   874e4:	1907c83a 	sub	r3,r3,r4
   874e8:	003ff106 	br	874b0 <__alt_data_end+0xfffc8cb0>

000874ec <_mprec_log10>:
   874ec:	defffe04 	addi	sp,sp,-8
   874f0:	dc000015 	stw	r16,0(sp)
   874f4:	dfc00115 	stw	ra,4(sp)
   874f8:	008005c4 	movi	r2,23
   874fc:	2021883a 	mov	r16,r4
   87500:	11000d0e 	bge	r2,r4,87538 <_mprec_log10+0x4c>
   87504:	0005883a 	mov	r2,zero
   87508:	00cffc34 	movhi	r3,16368
   8750c:	843fffc4 	addi	r16,r16,-1
   87510:	000d883a 	mov	r6,zero
   87514:	01d00934 	movhi	r7,16420
   87518:	1009883a 	mov	r4,r2
   8751c:	180b883a 	mov	r5,r3
   87520:	008c5880 	call	8c588 <__muldf3>
   87524:	803ff91e 	bne	r16,zero,8750c <__alt_data_end+0xfffc8d0c>
   87528:	dfc00117 	ldw	ra,4(sp)
   8752c:	dc000017 	ldw	r16,0(sp)
   87530:	dec00204 	addi	sp,sp,8
   87534:	f800283a 	ret
   87538:	202090fa 	slli	r16,r4,3
   8753c:	008002b4 	movhi	r2,10
   87540:	10a0bd04 	addi	r2,r2,-32012
   87544:	1421883a 	add	r16,r2,r16
   87548:	80800017 	ldw	r2,0(r16)
   8754c:	80c00117 	ldw	r3,4(r16)
   87550:	dfc00117 	ldw	ra,4(sp)
   87554:	dc000017 	ldw	r16,0(sp)
   87558:	dec00204 	addi	sp,sp,8
   8755c:	f800283a 	ret

00087560 <__copybits>:
   87560:	297fffc4 	addi	r5,r5,-1
   87564:	280fd17a 	srai	r7,r5,5
   87568:	30c00417 	ldw	r3,16(r6)
   8756c:	30800504 	addi	r2,r6,20
   87570:	39c00044 	addi	r7,r7,1
   87574:	18c7883a 	add	r3,r3,r3
   87578:	39cf883a 	add	r7,r7,r7
   8757c:	18c7883a 	add	r3,r3,r3
   87580:	39cf883a 	add	r7,r7,r7
   87584:	10c7883a 	add	r3,r2,r3
   87588:	21cf883a 	add	r7,r4,r7
   8758c:	10c00d2e 	bgeu	r2,r3,875c4 <__copybits+0x64>
   87590:	200b883a 	mov	r5,r4
   87594:	12000017 	ldw	r8,0(r2)
   87598:	29400104 	addi	r5,r5,4
   8759c:	10800104 	addi	r2,r2,4
   875a0:	2a3fff15 	stw	r8,-4(r5)
   875a4:	10fffb36 	bltu	r2,r3,87594 <__alt_data_end+0xfffc8d94>
   875a8:	1985c83a 	sub	r2,r3,r6
   875ac:	10bffac4 	addi	r2,r2,-21
   875b0:	1004d0ba 	srli	r2,r2,2
   875b4:	10800044 	addi	r2,r2,1
   875b8:	1085883a 	add	r2,r2,r2
   875bc:	1085883a 	add	r2,r2,r2
   875c0:	2089883a 	add	r4,r4,r2
   875c4:	21c0032e 	bgeu	r4,r7,875d4 <__copybits+0x74>
   875c8:	20000015 	stw	zero,0(r4)
   875cc:	21000104 	addi	r4,r4,4
   875d0:	21fffd36 	bltu	r4,r7,875c8 <__alt_data_end+0xfffc8dc8>
   875d4:	f800283a 	ret

000875d8 <__any_on>:
   875d8:	20c00417 	ldw	r3,16(r4)
   875dc:	2805d17a 	srai	r2,r5,5
   875e0:	21000504 	addi	r4,r4,20
   875e4:	18800d0e 	bge	r3,r2,8761c <__any_on+0x44>
   875e8:	18c7883a 	add	r3,r3,r3
   875ec:	18c7883a 	add	r3,r3,r3
   875f0:	20c7883a 	add	r3,r4,r3
   875f4:	20c0192e 	bgeu	r4,r3,8765c <__any_on+0x84>
   875f8:	18bfff17 	ldw	r2,-4(r3)
   875fc:	18ffff04 	addi	r3,r3,-4
   87600:	1000041e 	bne	r2,zero,87614 <__any_on+0x3c>
   87604:	20c0142e 	bgeu	r4,r3,87658 <__any_on+0x80>
   87608:	18ffff04 	addi	r3,r3,-4
   8760c:	19400017 	ldw	r5,0(r3)
   87610:	283ffc26 	beq	r5,zero,87604 <__alt_data_end+0xfffc8e04>
   87614:	00800044 	movi	r2,1
   87618:	f800283a 	ret
   8761c:	10c00a0e 	bge	r2,r3,87648 <__any_on+0x70>
   87620:	1085883a 	add	r2,r2,r2
   87624:	1085883a 	add	r2,r2,r2
   87628:	294007cc 	andi	r5,r5,31
   8762c:	2087883a 	add	r3,r4,r2
   87630:	283ff026 	beq	r5,zero,875f4 <__alt_data_end+0xfffc8df4>
   87634:	19800017 	ldw	r6,0(r3)
   87638:	3144d83a 	srl	r2,r6,r5
   8763c:	114a983a 	sll	r5,r2,r5
   87640:	317ff41e 	bne	r6,r5,87614 <__alt_data_end+0xfffc8e14>
   87644:	003feb06 	br	875f4 <__alt_data_end+0xfffc8df4>
   87648:	1085883a 	add	r2,r2,r2
   8764c:	1085883a 	add	r2,r2,r2
   87650:	2087883a 	add	r3,r4,r2
   87654:	003fe706 	br	875f4 <__alt_data_end+0xfffc8df4>
   87658:	f800283a 	ret
   8765c:	0005883a 	mov	r2,zero
   87660:	f800283a 	ret

00087664 <__fpclassifyd>:
   87664:	00a00034 	movhi	r2,32768
   87668:	10bfffc4 	addi	r2,r2,-1
   8766c:	2884703a 	and	r2,r5,r2
   87670:	10000726 	beq	r2,zero,87690 <__fpclassifyd+0x2c>
   87674:	00fffc34 	movhi	r3,65520
   87678:	019ff834 	movhi	r6,32736
   8767c:	28c7883a 	add	r3,r5,r3
   87680:	31bfffc4 	addi	r6,r6,-1
   87684:	30c00536 	bltu	r6,r3,8769c <__fpclassifyd+0x38>
   87688:	00800104 	movi	r2,4
   8768c:	f800283a 	ret
   87690:	2000021e 	bne	r4,zero,8769c <__fpclassifyd+0x38>
   87694:	00800084 	movi	r2,2
   87698:	f800283a 	ret
   8769c:	00dffc34 	movhi	r3,32752
   876a0:	019ff834 	movhi	r6,32736
   876a4:	28cb883a 	add	r5,r5,r3
   876a8:	31bfffc4 	addi	r6,r6,-1
   876ac:	317ff62e 	bgeu	r6,r5,87688 <__alt_data_end+0xfffc8e88>
   876b0:	01400434 	movhi	r5,16
   876b4:	297fffc4 	addi	r5,r5,-1
   876b8:	28800236 	bltu	r5,r2,876c4 <__fpclassifyd+0x60>
   876bc:	008000c4 	movi	r2,3
   876c0:	f800283a 	ret
   876c4:	10c00226 	beq	r2,r3,876d0 <__fpclassifyd+0x6c>
   876c8:	0005883a 	mov	r2,zero
   876cc:	f800283a 	ret
   876d0:	2005003a 	cmpeq	r2,r4,zero
   876d4:	f800283a 	ret

000876d8 <_sbrk_r>:
   876d8:	defffd04 	addi	sp,sp,-12
   876dc:	dc000015 	stw	r16,0(sp)
   876e0:	040002b4 	movhi	r16,10
   876e4:	dc400115 	stw	r17,4(sp)
   876e8:	842f5904 	addi	r16,r16,-17052
   876ec:	2023883a 	mov	r17,r4
   876f0:	2809883a 	mov	r4,r5
   876f4:	dfc00215 	stw	ra,8(sp)
   876f8:	80000015 	stw	zero,0(r16)
   876fc:	008e3980 	call	8e398 <sbrk>
   87700:	00ffffc4 	movi	r3,-1
   87704:	10c00526 	beq	r2,r3,8771c <_sbrk_r+0x44>
   87708:	dfc00217 	ldw	ra,8(sp)
   8770c:	dc400117 	ldw	r17,4(sp)
   87710:	dc000017 	ldw	r16,0(sp)
   87714:	dec00304 	addi	sp,sp,12
   87718:	f800283a 	ret
   8771c:	80c00017 	ldw	r3,0(r16)
   87720:	183ff926 	beq	r3,zero,87708 <__alt_data_end+0xfffc8f08>
   87724:	88c00015 	stw	r3,0(r17)
   87728:	003ff706 	br	87708 <__alt_data_end+0xfffc8f08>

0008772c <__sread>:
   8772c:	defffe04 	addi	sp,sp,-8
   87730:	dc000015 	stw	r16,0(sp)
   87734:	2821883a 	mov	r16,r5
   87738:	2940038f 	ldh	r5,14(r5)
   8773c:	dfc00115 	stw	ra,4(sp)
   87740:	0089bc80 	call	89bc8 <_read_r>
   87744:	10000716 	blt	r2,zero,87764 <__sread+0x38>
   87748:	80c01417 	ldw	r3,80(r16)
   8774c:	1887883a 	add	r3,r3,r2
   87750:	80c01415 	stw	r3,80(r16)
   87754:	dfc00117 	ldw	ra,4(sp)
   87758:	dc000017 	ldw	r16,0(sp)
   8775c:	dec00204 	addi	sp,sp,8
   87760:	f800283a 	ret
   87764:	80c0030b 	ldhu	r3,12(r16)
   87768:	18fbffcc 	andi	r3,r3,61439
   8776c:	80c0030d 	sth	r3,12(r16)
   87770:	dfc00117 	ldw	ra,4(sp)
   87774:	dc000017 	ldw	r16,0(sp)
   87778:	dec00204 	addi	sp,sp,8
   8777c:	f800283a 	ret

00087780 <__seofread>:
   87780:	0005883a 	mov	r2,zero
   87784:	f800283a 	ret

00087788 <__swrite>:
   87788:	2880030b 	ldhu	r2,12(r5)
   8778c:	defffb04 	addi	sp,sp,-20
   87790:	dcc00315 	stw	r19,12(sp)
   87794:	dc800215 	stw	r18,8(sp)
   87798:	dc400115 	stw	r17,4(sp)
   8779c:	dc000015 	stw	r16,0(sp)
   877a0:	dfc00415 	stw	ra,16(sp)
   877a4:	10c0400c 	andi	r3,r2,256
   877a8:	2821883a 	mov	r16,r5
   877ac:	2023883a 	mov	r17,r4
   877b0:	3025883a 	mov	r18,r6
   877b4:	3827883a 	mov	r19,r7
   877b8:	18000526 	beq	r3,zero,877d0 <__swrite+0x48>
   877bc:	2940038f 	ldh	r5,14(r5)
   877c0:	01c00084 	movi	r7,2
   877c4:	000d883a 	mov	r6,zero
   877c8:	0089a0c0 	call	89a0c <_lseek_r>
   877cc:	8080030b 	ldhu	r2,12(r16)
   877d0:	8140038f 	ldh	r5,14(r16)
   877d4:	10bbffcc 	andi	r2,r2,61439
   877d8:	980f883a 	mov	r7,r19
   877dc:	900d883a 	mov	r6,r18
   877e0:	8809883a 	mov	r4,r17
   877e4:	8080030d 	sth	r2,12(r16)
   877e8:	dfc00417 	ldw	ra,16(sp)
   877ec:	dcc00317 	ldw	r19,12(sp)
   877f0:	dc800217 	ldw	r18,8(sp)
   877f4:	dc400117 	ldw	r17,4(sp)
   877f8:	dc000017 	ldw	r16,0(sp)
   877fc:	dec00504 	addi	sp,sp,20
   87800:	0088ff81 	jmpi	88ff8 <_write_r>

00087804 <__sseek>:
   87804:	defffe04 	addi	sp,sp,-8
   87808:	dc000015 	stw	r16,0(sp)
   8780c:	2821883a 	mov	r16,r5
   87810:	2940038f 	ldh	r5,14(r5)
   87814:	dfc00115 	stw	ra,4(sp)
   87818:	0089a0c0 	call	89a0c <_lseek_r>
   8781c:	00ffffc4 	movi	r3,-1
   87820:	10c00826 	beq	r2,r3,87844 <__sseek+0x40>
   87824:	80c0030b 	ldhu	r3,12(r16)
   87828:	80801415 	stw	r2,80(r16)
   8782c:	18c40014 	ori	r3,r3,4096
   87830:	80c0030d 	sth	r3,12(r16)
   87834:	dfc00117 	ldw	ra,4(sp)
   87838:	dc000017 	ldw	r16,0(sp)
   8783c:	dec00204 	addi	sp,sp,8
   87840:	f800283a 	ret
   87844:	80c0030b 	ldhu	r3,12(r16)
   87848:	18fbffcc 	andi	r3,r3,61439
   8784c:	80c0030d 	sth	r3,12(r16)
   87850:	dfc00117 	ldw	ra,4(sp)
   87854:	dc000017 	ldw	r16,0(sp)
   87858:	dec00204 	addi	sp,sp,8
   8785c:	f800283a 	ret

00087860 <__sclose>:
   87860:	2940038f 	ldh	r5,14(r5)
   87864:	00890581 	jmpi	89058 <_close_r>

00087868 <strlen>:
   87868:	208000cc 	andi	r2,r4,3
   8786c:	10002026 	beq	r2,zero,878f0 <strlen+0x88>
   87870:	20800007 	ldb	r2,0(r4)
   87874:	10002026 	beq	r2,zero,878f8 <strlen+0x90>
   87878:	2005883a 	mov	r2,r4
   8787c:	00000206 	br	87888 <strlen+0x20>
   87880:	10c00007 	ldb	r3,0(r2)
   87884:	18001826 	beq	r3,zero,878e8 <strlen+0x80>
   87888:	10800044 	addi	r2,r2,1
   8788c:	10c000cc 	andi	r3,r2,3
   87890:	183ffb1e 	bne	r3,zero,87880 <__alt_data_end+0xfffc9080>
   87894:	10c00017 	ldw	r3,0(r2)
   87898:	01ffbff4 	movhi	r7,65279
   8789c:	39ffbfc4 	addi	r7,r7,-257
   878a0:	00ca303a 	nor	r5,zero,r3
   878a4:	01a02074 	movhi	r6,32897
   878a8:	19c7883a 	add	r3,r3,r7
   878ac:	31a02004 	addi	r6,r6,-32640
   878b0:	1946703a 	and	r3,r3,r5
   878b4:	1986703a 	and	r3,r3,r6
   878b8:	1800091e 	bne	r3,zero,878e0 <strlen+0x78>
   878bc:	10800104 	addi	r2,r2,4
   878c0:	10c00017 	ldw	r3,0(r2)
   878c4:	19cb883a 	add	r5,r3,r7
   878c8:	00c6303a 	nor	r3,zero,r3
   878cc:	28c6703a 	and	r3,r5,r3
   878d0:	1986703a 	and	r3,r3,r6
   878d4:	183ff926 	beq	r3,zero,878bc <__alt_data_end+0xfffc90bc>
   878d8:	00000106 	br	878e0 <strlen+0x78>
   878dc:	10800044 	addi	r2,r2,1
   878e0:	10c00007 	ldb	r3,0(r2)
   878e4:	183ffd1e 	bne	r3,zero,878dc <__alt_data_end+0xfffc90dc>
   878e8:	1105c83a 	sub	r2,r2,r4
   878ec:	f800283a 	ret
   878f0:	2005883a 	mov	r2,r4
   878f4:	003fe706 	br	87894 <__alt_data_end+0xfffc9094>
   878f8:	0005883a 	mov	r2,zero
   878fc:	f800283a 	ret

00087900 <__sprint_r.part.0>:
   87900:	28801917 	ldw	r2,100(r5)
   87904:	defff604 	addi	sp,sp,-40
   87908:	dd400515 	stw	r21,20(sp)
   8790c:	dfc00915 	stw	ra,36(sp)
   87910:	df000815 	stw	fp,32(sp)
   87914:	ddc00715 	stw	r23,28(sp)
   87918:	dd800615 	stw	r22,24(sp)
   8791c:	dd000415 	stw	r20,16(sp)
   87920:	dcc00315 	stw	r19,12(sp)
   87924:	dc800215 	stw	r18,8(sp)
   87928:	dc400115 	stw	r17,4(sp)
   8792c:	dc000015 	stw	r16,0(sp)
   87930:	1088000c 	andi	r2,r2,8192
   87934:	302b883a 	mov	r21,r6
   87938:	10002e26 	beq	r2,zero,879f4 <__sprint_r.part.0+0xf4>
   8793c:	30800217 	ldw	r2,8(r6)
   87940:	35800017 	ldw	r22,0(r6)
   87944:	10002926 	beq	r2,zero,879ec <__sprint_r.part.0+0xec>
   87948:	2827883a 	mov	r19,r5
   8794c:	2029883a 	mov	r20,r4
   87950:	b5c00104 	addi	r23,r22,4
   87954:	04bfffc4 	movi	r18,-1
   87958:	bc400017 	ldw	r17,0(r23)
   8795c:	b4000017 	ldw	r16,0(r22)
   87960:	0039883a 	mov	fp,zero
   87964:	8822d0ba 	srli	r17,r17,2
   87968:	8800031e 	bne	r17,zero,87978 <__sprint_r.part.0+0x78>
   8796c:	00001806 	br	879d0 <__sprint_r.part.0+0xd0>
   87970:	84000104 	addi	r16,r16,4
   87974:	8f001526 	beq	r17,fp,879cc <__sprint_r.part.0+0xcc>
   87978:	81400017 	ldw	r5,0(r16)
   8797c:	980d883a 	mov	r6,r19
   87980:	a009883a 	mov	r4,r20
   87984:	00893f00 	call	893f0 <_fputwc_r>
   87988:	e7000044 	addi	fp,fp,1
   8798c:	14bff81e 	bne	r2,r18,87970 <__alt_data_end+0xfffc9170>
   87990:	9005883a 	mov	r2,r18
   87994:	a8000215 	stw	zero,8(r21)
   87998:	a8000115 	stw	zero,4(r21)
   8799c:	dfc00917 	ldw	ra,36(sp)
   879a0:	df000817 	ldw	fp,32(sp)
   879a4:	ddc00717 	ldw	r23,28(sp)
   879a8:	dd800617 	ldw	r22,24(sp)
   879ac:	dd400517 	ldw	r21,20(sp)
   879b0:	dd000417 	ldw	r20,16(sp)
   879b4:	dcc00317 	ldw	r19,12(sp)
   879b8:	dc800217 	ldw	r18,8(sp)
   879bc:	dc400117 	ldw	r17,4(sp)
   879c0:	dc000017 	ldw	r16,0(sp)
   879c4:	dec00a04 	addi	sp,sp,40
   879c8:	f800283a 	ret
   879cc:	a8800217 	ldw	r2,8(r21)
   879d0:	8c63883a 	add	r17,r17,r17
   879d4:	8c63883a 	add	r17,r17,r17
   879d8:	1445c83a 	sub	r2,r2,r17
   879dc:	a8800215 	stw	r2,8(r21)
   879e0:	b5800204 	addi	r22,r22,8
   879e4:	bdc00204 	addi	r23,r23,8
   879e8:	103fdb1e 	bne	r2,zero,87958 <__alt_data_end+0xfffc9158>
   879ec:	0005883a 	mov	r2,zero
   879f0:	003fe806 	br	87994 <__alt_data_end+0xfffc9194>
   879f4:	00894f00 	call	894f0 <__sfvwrite_r>
   879f8:	003fe606 	br	87994 <__alt_data_end+0xfffc9194>

000879fc <__sprint_r>:
   879fc:	30c00217 	ldw	r3,8(r6)
   87a00:	18000126 	beq	r3,zero,87a08 <__sprint_r+0xc>
   87a04:	00879001 	jmpi	87900 <__sprint_r.part.0>
   87a08:	30000115 	stw	zero,4(r6)
   87a0c:	0005883a 	mov	r2,zero
   87a10:	f800283a 	ret

00087a14 <___vfiprintf_internal_r>:
   87a14:	deffca04 	addi	sp,sp,-216
   87a18:	dd403115 	stw	r21,196(sp)
   87a1c:	dfc03515 	stw	ra,212(sp)
   87a20:	df003415 	stw	fp,208(sp)
   87a24:	ddc03315 	stw	r23,204(sp)
   87a28:	dd803215 	stw	r22,200(sp)
   87a2c:	dd003015 	stw	r20,192(sp)
   87a30:	dcc02f15 	stw	r19,188(sp)
   87a34:	dc802e15 	stw	r18,184(sp)
   87a38:	dc402d15 	stw	r17,180(sp)
   87a3c:	dc002c15 	stw	r16,176(sp)
   87a40:	d9002115 	stw	r4,132(sp)
   87a44:	d9402015 	stw	r5,128(sp)
   87a48:	d9c02215 	stw	r7,136(sp)
   87a4c:	302b883a 	mov	r21,r6
   87a50:	20000226 	beq	r4,zero,87a5c <___vfiprintf_internal_r+0x48>
   87a54:	20800e17 	ldw	r2,56(r4)
   87a58:	1000cf26 	beq	r2,zero,87d98 <___vfiprintf_internal_r+0x384>
   87a5c:	d8c02017 	ldw	r3,128(sp)
   87a60:	1880030b 	ldhu	r2,12(r3)
   87a64:	10c8000c 	andi	r3,r2,8192
   87a68:	1800071e 	bne	r3,zero,87a88 <___vfiprintf_internal_r+0x74>
   87a6c:	d9402017 	ldw	r5,128(sp)
   87a70:	00f7ffc4 	movi	r3,-8193
   87a74:	10880014 	ori	r2,r2,8192
   87a78:	29001917 	ldw	r4,100(r5)
   87a7c:	2880030d 	sth	r2,12(r5)
   87a80:	20c6703a 	and	r3,r4,r3
   87a84:	28c01915 	stw	r3,100(r5)
   87a88:	10c0020c 	andi	r3,r2,8
   87a8c:	1800a526 	beq	r3,zero,87d24 <___vfiprintf_internal_r+0x310>
   87a90:	d9002017 	ldw	r4,128(sp)
   87a94:	20c00417 	ldw	r3,16(r4)
   87a98:	1800a226 	beq	r3,zero,87d24 <___vfiprintf_internal_r+0x310>
   87a9c:	1080068c 	andi	r2,r2,26
   87aa0:	00c00284 	movi	r3,10
   87aa4:	10c0a826 	beq	r2,r3,87d48 <___vfiprintf_internal_r+0x334>
   87aa8:	d9001a04 	addi	r4,sp,104
   87aac:	d94019c4 	addi	r5,sp,103
   87ab0:	048002b4 	movhi	r18,10
   87ab4:	2145c83a 	sub	r2,r4,r5
   87ab8:	94a0ef04 	addi	r18,r18,-31812
   87abc:	d9001e15 	stw	r4,120(sp)
   87ac0:	d9401f15 	stw	r5,124(sp)
   87ac4:	dec01a15 	stw	sp,104(sp)
   87ac8:	d8001c15 	stw	zero,112(sp)
   87acc:	d8001b15 	stw	zero,108(sp)
   87ad0:	d811883a 	mov	r8,sp
   87ad4:	d8002615 	stw	zero,152(sp)
   87ad8:	d8002415 	stw	zero,144(sp)
   87adc:	d8802815 	stw	r2,160(sp)
   87ae0:	a82d883a 	mov	r22,r21
   87ae4:	b0800007 	ldb	r2,0(r22)
   87ae8:	10040d26 	beq	r2,zero,88b20 <___vfiprintf_internal_r+0x110c>
   87aec:	00c00944 	movi	r3,37
   87af0:	b029883a 	mov	r20,r22
   87af4:	10c0021e 	bne	r2,r3,87b00 <___vfiprintf_internal_r+0xec>
   87af8:	00001606 	br	87b54 <___vfiprintf_internal_r+0x140>
   87afc:	10c00326 	beq	r2,r3,87b0c <___vfiprintf_internal_r+0xf8>
   87b00:	a5000044 	addi	r20,r20,1
   87b04:	a0800007 	ldb	r2,0(r20)
   87b08:	103ffc1e 	bne	r2,zero,87afc <__alt_data_end+0xfffc92fc>
   87b0c:	a5a1c83a 	sub	r16,r20,r22
   87b10:	80001026 	beq	r16,zero,87b54 <___vfiprintf_internal_r+0x140>
   87b14:	d8c01c17 	ldw	r3,112(sp)
   87b18:	d8801b17 	ldw	r2,108(sp)
   87b1c:	45800015 	stw	r22,0(r8)
   87b20:	80c7883a 	add	r3,r16,r3
   87b24:	10800044 	addi	r2,r2,1
   87b28:	44000115 	stw	r16,4(r8)
   87b2c:	d8c01c15 	stw	r3,112(sp)
   87b30:	d8801b15 	stw	r2,108(sp)
   87b34:	010001c4 	movi	r4,7
   87b38:	2080750e 	bge	r4,r2,87d10 <___vfiprintf_internal_r+0x2fc>
   87b3c:	1803951e 	bne	r3,zero,88994 <___vfiprintf_internal_r+0xf80>
   87b40:	d8c02417 	ldw	r3,144(sp)
   87b44:	d8001b15 	stw	zero,108(sp)
   87b48:	d811883a 	mov	r8,sp
   87b4c:	1c07883a 	add	r3,r3,r16
   87b50:	d8c02415 	stw	r3,144(sp)
   87b54:	a0800007 	ldb	r2,0(r20)
   87b58:	1002e026 	beq	r2,zero,886dc <___vfiprintf_internal_r+0xcc8>
   87b5c:	a5800044 	addi	r22,r20,1
   87b60:	a0c00047 	ldb	r3,1(r20)
   87b64:	d8001d85 	stb	zero,118(sp)
   87b68:	0027883a 	mov	r19,zero
   87b6c:	d8002305 	stb	zero,140(sp)
   87b70:	043fffc4 	movi	r16,-1
   87b74:	d8002515 	stw	zero,148(sp)
   87b78:	0023883a 	mov	r17,zero
   87b7c:	05001604 	movi	r20,88
   87b80:	05400244 	movi	r21,9
   87b84:	402f883a 	mov	r23,r8
   87b88:	b5800044 	addi	r22,r22,1
   87b8c:	18bff804 	addi	r2,r3,-32
   87b90:	a0827736 	bltu	r20,r2,88570 <___vfiprintf_internal_r+0xb5c>
   87b94:	100490ba 	slli	r2,r2,2
   87b98:	01000234 	movhi	r4,8
   87b9c:	211eeb04 	addi	r4,r4,31660
   87ba0:	1105883a 	add	r2,r2,r4
   87ba4:	10800017 	ldw	r2,0(r2)
   87ba8:	1000683a 	jmp	r2
   87bac:	00088270 	cmpltui	zero,zero,8713
   87bb0:	00088570 	cmpltui	zero,zero,8725
   87bb4:	00088570 	cmpltui	zero,zero,8725
   87bb8:	0008828c 	andi	zero,zero,8714
   87bbc:	00088570 	cmpltui	zero,zero,8725
   87bc0:	00088570 	cmpltui	zero,zero,8725
   87bc4:	00088570 	cmpltui	zero,zero,8725
   87bc8:	00088570 	cmpltui	zero,zero,8725
   87bcc:	00088570 	cmpltui	zero,zero,8725
   87bd0:	00088570 	cmpltui	zero,zero,8725
   87bd4:	00088494 	movui	zero,8722
   87bd8:	000884b8 	rdprs	zero,zero,8722
   87bdc:	00088570 	cmpltui	zero,zero,8725
   87be0:	00087db0 	cmpltui	zero,zero,8694
   87be4:	000884cc 	andi	zero,zero,8723
   87be8:	00088570 	cmpltui	zero,zero,8725
   87bec:	00088298 	cmpnei	zero,zero,8714
   87bf0:	000882a4 	muli	zero,zero,8714
   87bf4:	000882a4 	muli	zero,zero,8714
   87bf8:	000882a4 	muli	zero,zero,8714
   87bfc:	000882a4 	muli	zero,zero,8714
   87c00:	000882a4 	muli	zero,zero,8714
   87c04:	000882a4 	muli	zero,zero,8714
   87c08:	000882a4 	muli	zero,zero,8714
   87c0c:	000882a4 	muli	zero,zero,8714
   87c10:	000882a4 	muli	zero,zero,8714
   87c14:	00088570 	cmpltui	zero,zero,8725
   87c18:	00088570 	cmpltui	zero,zero,8725
   87c1c:	00088570 	cmpltui	zero,zero,8725
   87c20:	00088570 	cmpltui	zero,zero,8725
   87c24:	00088570 	cmpltui	zero,zero,8725
   87c28:	00088570 	cmpltui	zero,zero,8725
   87c2c:	00088570 	cmpltui	zero,zero,8725
   87c30:	00088570 	cmpltui	zero,zero,8725
   87c34:	00088570 	cmpltui	zero,zero,8725
   87c38:	00088570 	cmpltui	zero,zero,8725
   87c3c:	000882e4 	muli	zero,zero,8715
   87c40:	00088570 	cmpltui	zero,zero,8725
   87c44:	00088570 	cmpltui	zero,zero,8725
   87c48:	00088570 	cmpltui	zero,zero,8725
   87c4c:	00088570 	cmpltui	zero,zero,8725
   87c50:	00088570 	cmpltui	zero,zero,8725
   87c54:	00088570 	cmpltui	zero,zero,8725
   87c58:	00088570 	cmpltui	zero,zero,8725
   87c5c:	00088570 	cmpltui	zero,zero,8725
   87c60:	00088570 	cmpltui	zero,zero,8725
   87c64:	00088570 	cmpltui	zero,zero,8725
   87c68:	00088320 	cmpeqi	zero,zero,8716
   87c6c:	00088570 	cmpltui	zero,zero,8725
   87c70:	00088570 	cmpltui	zero,zero,8725
   87c74:	00088570 	cmpltui	zero,zero,8725
   87c78:	00088570 	cmpltui	zero,zero,8725
   87c7c:	00088570 	cmpltui	zero,zero,8725
   87c80:	0008837c 	xorhi	zero,zero,8717
   87c84:	00088570 	cmpltui	zero,zero,8725
   87c88:	00088570 	cmpltui	zero,zero,8725
   87c8c:	000883f0 	cmpltui	zero,zero,8719
   87c90:	00088570 	cmpltui	zero,zero,8725
   87c94:	00088570 	cmpltui	zero,zero,8725
   87c98:	00088570 	cmpltui	zero,zero,8725
   87c9c:	00088570 	cmpltui	zero,zero,8725
   87ca0:	00088570 	cmpltui	zero,zero,8725
   87ca4:	00088570 	cmpltui	zero,zero,8725
   87ca8:	00088570 	cmpltui	zero,zero,8725
   87cac:	00088570 	cmpltui	zero,zero,8725
   87cb0:	00088570 	cmpltui	zero,zero,8725
   87cb4:	00088570 	cmpltui	zero,zero,8725
   87cb8:	00088198 	cmpnei	zero,zero,8710
   87cbc:	000881c8 	cmpgei	zero,zero,8711
   87cc0:	00088570 	cmpltui	zero,zero,8725
   87cc4:	00088570 	cmpltui	zero,zero,8725
   87cc8:	00088570 	cmpltui	zero,zero,8725
   87ccc:	00088518 	cmpnei	zero,zero,8724
   87cd0:	000881c8 	cmpgei	zero,zero,8711
   87cd4:	00088570 	cmpltui	zero,zero,8725
   87cd8:	00088570 	cmpltui	zero,zero,8725
   87cdc:	00088070 	cmpltui	zero,zero,8705
   87ce0:	00088570 	cmpltui	zero,zero,8725
   87ce4:	00088084 	movi	zero,8706
   87ce8:	000880bc 	xorhi	zero,zero,8706
   87cec:	00087dbc 	xorhi	zero,zero,8694
   87cf0:	00088064 	muli	zero,zero,8705
   87cf4:	00088570 	cmpltui	zero,zero,8725
   87cf8:	00088430 	cmpltui	zero,zero,8720
   87cfc:	00088570 	cmpltui	zero,zero,8725
   87d00:	0008847c 	xorhi	zero,zero,8721
   87d04:	00088570 	cmpltui	zero,zero,8725
   87d08:	00088570 	cmpltui	zero,zero,8725
   87d0c:	00088140 	call	8814 <OSCtxSw_SWITCH_PC+0x87d4>
   87d10:	42000204 	addi	r8,r8,8
   87d14:	d8c02417 	ldw	r3,144(sp)
   87d18:	1c07883a 	add	r3,r3,r16
   87d1c:	d8c02415 	stw	r3,144(sp)
   87d20:	003f8c06 	br	87b54 <__alt_data_end+0xfffc9354>
   87d24:	d9402017 	ldw	r5,128(sp)
   87d28:	d9002117 	ldw	r4,132(sp)
   87d2c:	008319c0 	call	8319c <__swsetup_r>
   87d30:	1003c11e 	bne	r2,zero,88c38 <___vfiprintf_internal_r+0x1224>
   87d34:	d9402017 	ldw	r5,128(sp)
   87d38:	00c00284 	movi	r3,10
   87d3c:	2880030b 	ldhu	r2,12(r5)
   87d40:	1080068c 	andi	r2,r2,26
   87d44:	10ff581e 	bne	r2,r3,87aa8 <__alt_data_end+0xfffc92a8>
   87d48:	d8c02017 	ldw	r3,128(sp)
   87d4c:	1880038f 	ldh	r2,14(r3)
   87d50:	103f5516 	blt	r2,zero,87aa8 <__alt_data_end+0xfffc92a8>
   87d54:	d9c02217 	ldw	r7,136(sp)
   87d58:	d9002117 	ldw	r4,132(sp)
   87d5c:	a80d883a 	mov	r6,r21
   87d60:	180b883a 	mov	r5,r3
   87d64:	0088f3c0 	call	88f3c <__sbprintf>
   87d68:	dfc03517 	ldw	ra,212(sp)
   87d6c:	df003417 	ldw	fp,208(sp)
   87d70:	ddc03317 	ldw	r23,204(sp)
   87d74:	dd803217 	ldw	r22,200(sp)
   87d78:	dd403117 	ldw	r21,196(sp)
   87d7c:	dd003017 	ldw	r20,192(sp)
   87d80:	dcc02f17 	ldw	r19,188(sp)
   87d84:	dc802e17 	ldw	r18,184(sp)
   87d88:	dc402d17 	ldw	r17,180(sp)
   87d8c:	dc002c17 	ldw	r16,176(sp)
   87d90:	dec03604 	addi	sp,sp,216
   87d94:	f800283a 	ret
   87d98:	00851a80 	call	851a8 <__sinit>
   87d9c:	003f2f06 	br	87a5c <__alt_data_end+0xfffc925c>
   87da0:	d8c02517 	ldw	r3,148(sp)
   87da4:	d8802215 	stw	r2,136(sp)
   87da8:	00c7c83a 	sub	r3,zero,r3
   87dac:	d8c02515 	stw	r3,148(sp)
   87db0:	8c400114 	ori	r17,r17,4
   87db4:	b0c00007 	ldb	r3,0(r22)
   87db8:	003f7306 	br	87b88 <__alt_data_end+0xfffc9388>
   87dbc:	00800c04 	movi	r2,48
   87dc0:	d9402217 	ldw	r5,136(sp)
   87dc4:	d8801d05 	stb	r2,116(sp)
   87dc8:	00801e04 	movi	r2,120
   87dcc:	d8801d45 	stb	r2,117(sp)
   87dd0:	d8001d85 	stb	zero,118(sp)
   87dd4:	b811883a 	mov	r8,r23
   87dd8:	28c00104 	addi	r3,r5,4
   87ddc:	2cc00017 	ldw	r19,0(r5)
   87de0:	0029883a 	mov	r20,zero
   87de4:	88800094 	ori	r2,r17,2
   87de8:	80032516 	blt	r16,zero,88a80 <___vfiprintf_internal_r+0x106c>
   87dec:	00bfdfc4 	movi	r2,-129
   87df0:	88a2703a 	and	r17,r17,r2
   87df4:	d8c02215 	stw	r3,136(sp)
   87df8:	8c400094 	ori	r17,r17,2
   87dfc:	98032a1e 	bne	r19,zero,88aa8 <___vfiprintf_internal_r+0x1094>
   87e00:	008002b4 	movhi	r2,10
   87e04:	10a08e04 	addi	r2,r2,-32200
   87e08:	d8802615 	stw	r2,152(sp)
   87e0c:	002b883a 	mov	r21,zero
   87e10:	8001741e 	bne	r16,zero,883e4 <___vfiprintf_internal_r+0x9d0>
   87e14:	0021883a 	mov	r16,zero
   87e18:	0029883a 	mov	r20,zero
   87e1c:	ddc01a04 	addi	r23,sp,104
   87e20:	8027883a 	mov	r19,r16
   87e24:	8500010e 	bge	r16,r20,87e2c <___vfiprintf_internal_r+0x418>
   87e28:	a027883a 	mov	r19,r20
   87e2c:	ad403fcc 	andi	r21,r21,255
   87e30:	ad40201c 	xori	r21,r21,128
   87e34:	ad7fe004 	addi	r21,r21,-128
   87e38:	a8000126 	beq	r21,zero,87e40 <___vfiprintf_internal_r+0x42c>
   87e3c:	9cc00044 	addi	r19,r19,1
   87e40:	89c0008c 	andi	r7,r17,2
   87e44:	38000126 	beq	r7,zero,87e4c <___vfiprintf_internal_r+0x438>
   87e48:	9cc00084 	addi	r19,r19,2
   87e4c:	88c0210c 	andi	r3,r17,132
   87e50:	1801dd1e 	bne	r3,zero,885c8 <___vfiprintf_internal_r+0xbb4>
   87e54:	d9402517 	ldw	r5,148(sp)
   87e58:	2cebc83a 	sub	r21,r5,r19
   87e5c:	0541da0e 	bge	zero,r21,885c8 <___vfiprintf_internal_r+0xbb4>
   87e60:	07000404 	movi	fp,16
   87e64:	d8801c17 	ldw	r2,112(sp)
   87e68:	e543be0e 	bge	fp,r21,88d64 <___vfiprintf_internal_r+0x1350>
   87e6c:	014002b4 	movhi	r5,10
   87e70:	2960f304 	addi	r5,r5,-31796
   87e74:	dc002715 	stw	r16,156(sp)
   87e78:	d9801b17 	ldw	r6,108(sp)
   87e7c:	a821883a 	mov	r16,r21
   87e80:	d9402315 	stw	r5,140(sp)
   87e84:	028001c4 	movi	r10,7
   87e88:	d9c02915 	stw	r7,164(sp)
   87e8c:	182b883a 	mov	r21,r3
   87e90:	00000506 	br	87ea8 <___vfiprintf_internal_r+0x494>
   87e94:	31000084 	addi	r4,r6,2
   87e98:	42000204 	addi	r8,r8,8
   87e9c:	180d883a 	mov	r6,r3
   87ea0:	843ffc04 	addi	r16,r16,-16
   87ea4:	e4000f0e 	bge	fp,r16,87ee4 <___vfiprintf_internal_r+0x4d0>
   87ea8:	010002b4 	movhi	r4,10
   87eac:	10800404 	addi	r2,r2,16
   87eb0:	30c00044 	addi	r3,r6,1
   87eb4:	2120f304 	addi	r4,r4,-31796
   87eb8:	41000015 	stw	r4,0(r8)
   87ebc:	47000115 	stw	fp,4(r8)
   87ec0:	d8801c15 	stw	r2,112(sp)
   87ec4:	d8c01b15 	stw	r3,108(sp)
   87ec8:	50fff20e 	bge	r10,r3,87e94 <__alt_data_end+0xfffc9694>
   87ecc:	1001b21e 	bne	r2,zero,88598 <___vfiprintf_internal_r+0xb84>
   87ed0:	843ffc04 	addi	r16,r16,-16
   87ed4:	000d883a 	mov	r6,zero
   87ed8:	01000044 	movi	r4,1
   87edc:	d811883a 	mov	r8,sp
   87ee0:	e43ff116 	blt	fp,r16,87ea8 <__alt_data_end+0xfffc96a8>
   87ee4:	a807883a 	mov	r3,r21
   87ee8:	d9c02917 	ldw	r7,164(sp)
   87eec:	802b883a 	mov	r21,r16
   87ef0:	dc002717 	ldw	r16,156(sp)
   87ef4:	d9402317 	ldw	r5,140(sp)
   87ef8:	a885883a 	add	r2,r21,r2
   87efc:	45400115 	stw	r21,4(r8)
   87f00:	41400015 	stw	r5,0(r8)
   87f04:	d8801c15 	stw	r2,112(sp)
   87f08:	d9001b15 	stw	r4,108(sp)
   87f0c:	014001c4 	movi	r5,7
   87f10:	29026216 	blt	r5,r4,8889c <___vfiprintf_internal_r+0xe88>
   87f14:	d9801d87 	ldb	r6,118(sp)
   87f18:	42000204 	addi	r8,r8,8
   87f1c:	21400044 	addi	r5,r4,1
   87f20:	3001ae1e 	bne	r6,zero,885dc <___vfiprintf_internal_r+0xbc8>
   87f24:	3801bb26 	beq	r7,zero,88614 <___vfiprintf_internal_r+0xc00>
   87f28:	d9001d04 	addi	r4,sp,116
   87f2c:	10800084 	addi	r2,r2,2
   87f30:	41000015 	stw	r4,0(r8)
   87f34:	01000084 	movi	r4,2
   87f38:	41000115 	stw	r4,4(r8)
   87f3c:	d8801c15 	stw	r2,112(sp)
   87f40:	d9401b15 	stw	r5,108(sp)
   87f44:	010001c4 	movi	r4,7
   87f48:	2142680e 	bge	r4,r5,888ec <___vfiprintf_internal_r+0xed8>
   87f4c:	1002b11e 	bne	r2,zero,88a14 <___vfiprintf_internal_r+0x1000>
   87f50:	01802004 	movi	r6,128
   87f54:	01400044 	movi	r5,1
   87f58:	0009883a 	mov	r4,zero
   87f5c:	d811883a 	mov	r8,sp
   87f60:	1981ae1e 	bne	r3,r6,8861c <___vfiprintf_internal_r+0xc08>
   87f64:	d8c02517 	ldw	r3,148(sp)
   87f68:	1cf9c83a 	sub	fp,r3,r19
   87f6c:	0701ab0e 	bge	zero,fp,8861c <___vfiprintf_internal_r+0xc08>
   87f70:	05400404 	movi	r21,16
   87f74:	af03a90e 	bge	r21,fp,88e1c <___vfiprintf_internal_r+0x1408>
   87f78:	014002b4 	movhi	r5,10
   87f7c:	2960ef04 	addi	r5,r5,-31812
   87f80:	d9402315 	stw	r5,140(sp)
   87f84:	01c001c4 	movi	r7,7
   87f88:	00000506 	br	87fa0 <___vfiprintf_internal_r+0x58c>
   87f8c:	21800084 	addi	r6,r4,2
   87f90:	42000204 	addi	r8,r8,8
   87f94:	1809883a 	mov	r4,r3
   87f98:	e73ffc04 	addi	fp,fp,-16
   87f9c:	af000d0e 	bge	r21,fp,87fd4 <___vfiprintf_internal_r+0x5c0>
   87fa0:	10800404 	addi	r2,r2,16
   87fa4:	20c00044 	addi	r3,r4,1
   87fa8:	44800015 	stw	r18,0(r8)
   87fac:	45400115 	stw	r21,4(r8)
   87fb0:	d8801c15 	stw	r2,112(sp)
   87fb4:	d8c01b15 	stw	r3,108(sp)
   87fb8:	38fff40e 	bge	r7,r3,87f8c <__alt_data_end+0xfffc978c>
   87fbc:	10022b1e 	bne	r2,zero,8886c <___vfiprintf_internal_r+0xe58>
   87fc0:	e73ffc04 	addi	fp,fp,-16
   87fc4:	01800044 	movi	r6,1
   87fc8:	0009883a 	mov	r4,zero
   87fcc:	d811883a 	mov	r8,sp
   87fd0:	af3ff316 	blt	r21,fp,87fa0 <__alt_data_end+0xfffc97a0>
   87fd4:	d8c02317 	ldw	r3,140(sp)
   87fd8:	1705883a 	add	r2,r2,fp
   87fdc:	47000115 	stw	fp,4(r8)
   87fe0:	40c00015 	stw	r3,0(r8)
   87fe4:	d8801c15 	stw	r2,112(sp)
   87fe8:	d9801b15 	stw	r6,108(sp)
   87fec:	00c001c4 	movi	r3,7
   87ff0:	19829416 	blt	r3,r6,88a44 <___vfiprintf_internal_r+0x1030>
   87ff4:	8521c83a 	sub	r16,r16,r20
   87ff8:	42000204 	addi	r8,r8,8
   87ffc:	31400044 	addi	r5,r6,1
   88000:	3009883a 	mov	r4,r6
   88004:	04018716 	blt	zero,r16,88624 <___vfiprintf_internal_r+0xc10>
   88008:	a085883a 	add	r2,r20,r2
   8800c:	45c00015 	stw	r23,0(r8)
   88010:	45000115 	stw	r20,4(r8)
   88014:	d8801c15 	stw	r2,112(sp)
   88018:	d9401b15 	stw	r5,108(sp)
   8801c:	00c001c4 	movi	r3,7
   88020:	1941c20e 	bge	r3,r5,8872c <___vfiprintf_internal_r+0xd18>
   88024:	1002531e 	bne	r2,zero,88974 <___vfiprintf_internal_r+0xf60>
   88028:	d8001b15 	stw	zero,108(sp)
   8802c:	8c40010c 	andi	r17,r17,4
   88030:	88023226 	beq	r17,zero,888fc <___vfiprintf_internal_r+0xee8>
   88034:	d9002517 	ldw	r4,148(sp)
   88038:	24e3c83a 	sub	r17,r4,r19
   8803c:	04432916 	blt	zero,r17,88ce4 <___vfiprintf_internal_r+0x12d0>
   88040:	d8802517 	ldw	r2,148(sp)
   88044:	14c0010e 	bge	r2,r19,8804c <___vfiprintf_internal_r+0x638>
   88048:	9805883a 	mov	r2,r19
   8804c:	d8c02417 	ldw	r3,144(sp)
   88050:	1887883a 	add	r3,r3,r2
   88054:	d8c02415 	stw	r3,144(sp)
   88058:	d8001b15 	stw	zero,108(sp)
   8805c:	d811883a 	mov	r8,sp
   88060:	003ea006 	br	87ae4 <__alt_data_end+0xfffc92e4>
   88064:	8c400814 	ori	r17,r17,32
   88068:	b0c00007 	ldb	r3,0(r22)
   8806c:	003ec606 	br	87b88 <__alt_data_end+0xfffc9388>
   88070:	b0c00007 	ldb	r3,0(r22)
   88074:	00801b04 	movi	r2,108
   88078:	18832026 	beq	r3,r2,88cfc <___vfiprintf_internal_r+0x12e8>
   8807c:	8c400414 	ori	r17,r17,16
   88080:	003ec106 	br	87b88 <__alt_data_end+0xfffc9388>
   88084:	9cc03fcc 	andi	r19,r19,255
   88088:	b811883a 	mov	r8,r23
   8808c:	9803981e 	bne	r19,zero,88ef0 <___vfiprintf_internal_r+0x14dc>
   88090:	8880080c 	andi	r2,r17,32
   88094:	1002be26 	beq	r2,zero,88b90 <___vfiprintf_internal_r+0x117c>
   88098:	d9002217 	ldw	r4,136(sp)
   8809c:	d9402417 	ldw	r5,144(sp)
   880a0:	20800017 	ldw	r2,0(r4)
   880a4:	2807d7fa 	srai	r3,r5,31
   880a8:	21000104 	addi	r4,r4,4
   880ac:	d9002215 	stw	r4,136(sp)
   880b0:	11400015 	stw	r5,0(r2)
   880b4:	10c00115 	stw	r3,4(r2)
   880b8:	003e8a06 	br	87ae4 <__alt_data_end+0xfffc92e4>
   880bc:	9cc03fcc 	andi	r19,r19,255
   880c0:	b811883a 	mov	r8,r23
   880c4:	9803871e 	bne	r19,zero,88ee4 <___vfiprintf_internal_r+0x14d0>
   880c8:	8880080c 	andi	r2,r17,32
   880cc:	10009a26 	beq	r2,zero,88338 <___vfiprintf_internal_r+0x924>
   880d0:	d9002217 	ldw	r4,136(sp)
   880d4:	d8001d85 	stb	zero,118(sp)
   880d8:	20800204 	addi	r2,r4,8
   880dc:	24c00017 	ldw	r19,0(r4)
   880e0:	25000117 	ldw	r20,4(r4)
   880e4:	8002a416 	blt	r16,zero,88b78 <___vfiprintf_internal_r+0x1164>
   880e8:	013fdfc4 	movi	r4,-129
   880ec:	9d06b03a 	or	r3,r19,r20
   880f0:	d8802215 	stw	r2,136(sp)
   880f4:	8922703a 	and	r17,r17,r4
   880f8:	18009b26 	beq	r3,zero,88368 <___vfiprintf_internal_r+0x954>
   880fc:	002b883a 	mov	r21,zero
   88100:	ddc01a04 	addi	r23,sp,104
   88104:	9806d0fa 	srli	r3,r19,3
   88108:	a008977a 	slli	r4,r20,29
   8810c:	a028d0fa 	srli	r20,r20,3
   88110:	9cc001cc 	andi	r19,r19,7
   88114:	98800c04 	addi	r2,r19,48
   88118:	bdffffc4 	addi	r23,r23,-1
   8811c:	20e6b03a 	or	r19,r4,r3
   88120:	b8800005 	stb	r2,0(r23)
   88124:	9d06b03a 	or	r3,r19,r20
   88128:	183ff61e 	bne	r3,zero,88104 <__alt_data_end+0xfffc9904>
   8812c:	88c0004c 	andi	r3,r17,1
   88130:	18021f1e 	bne	r3,zero,889b0 <___vfiprintf_internal_r+0xf9c>
   88134:	d9401e17 	ldw	r5,120(sp)
   88138:	2de9c83a 	sub	r20,r5,r23
   8813c:	003f3806 	br	87e20 <__alt_data_end+0xfffc9620>
   88140:	9cc03fcc 	andi	r19,r19,255
   88144:	b811883a 	mov	r8,r23
   88148:	98034f1e 	bne	r19,zero,88e88 <___vfiprintf_internal_r+0x1474>
   8814c:	008002b4 	movhi	r2,10
   88150:	10a08e04 	addi	r2,r2,-32200
   88154:	d8802615 	stw	r2,152(sp)
   88158:	8880080c 	andi	r2,r17,32
   8815c:	1000ac26 	beq	r2,zero,88410 <___vfiprintf_internal_r+0x9fc>
   88160:	d9002217 	ldw	r4,136(sp)
   88164:	24c00017 	ldw	r19,0(r4)
   88168:	25000117 	ldw	r20,4(r4)
   8816c:	21000204 	addi	r4,r4,8
   88170:	d9002215 	stw	r4,136(sp)
   88174:	8880004c 	andi	r2,r17,1
   88178:	1001e726 	beq	r2,zero,88918 <___vfiprintf_internal_r+0xf04>
   8817c:	9d04b03a 	or	r2,r19,r20
   88180:	10025c1e 	bne	r2,zero,88af4 <___vfiprintf_internal_r+0x10e0>
   88184:	d8001d85 	stb	zero,118(sp)
   88188:	80024416 	blt	r16,zero,88a9c <___vfiprintf_internal_r+0x1088>
   8818c:	00bfdfc4 	movi	r2,-129
   88190:	88a2703a 	and	r17,r17,r2
   88194:	003f1d06 	br	87e0c <__alt_data_end+0xfffc960c>
   88198:	d8c02217 	ldw	r3,136(sp)
   8819c:	04c00044 	movi	r19,1
   881a0:	b811883a 	mov	r8,r23
   881a4:	18800017 	ldw	r2,0(r3)
   881a8:	18c00104 	addi	r3,r3,4
   881ac:	d8001d85 	stb	zero,118(sp)
   881b0:	d8801005 	stb	r2,64(sp)
   881b4:	d8c02215 	stw	r3,136(sp)
   881b8:	9829883a 	mov	r20,r19
   881bc:	ddc01004 	addi	r23,sp,64
   881c0:	0021883a 	mov	r16,zero
   881c4:	003f1e06 	br	87e40 <__alt_data_end+0xfffc9640>
   881c8:	9cc03fcc 	andi	r19,r19,255
   881cc:	b811883a 	mov	r8,r23
   881d0:	9803331e 	bne	r19,zero,88ea0 <___vfiprintf_internal_r+0x148c>
   881d4:	8880080c 	andi	r2,r17,32
   881d8:	10004826 	beq	r2,zero,882fc <___vfiprintf_internal_r+0x8e8>
   881dc:	d9002217 	ldw	r4,136(sp)
   881e0:	20800117 	ldw	r2,4(r4)
   881e4:	24c00017 	ldw	r19,0(r4)
   881e8:	21000204 	addi	r4,r4,8
   881ec:	d9002215 	stw	r4,136(sp)
   881f0:	1029883a 	mov	r20,r2
   881f4:	10024c16 	blt	r2,zero,88b28 <___vfiprintf_internal_r+0x1114>
   881f8:	dd401d83 	ldbu	r21,118(sp)
   881fc:	80007116 	blt	r16,zero,883c4 <___vfiprintf_internal_r+0x9b0>
   88200:	00ffdfc4 	movi	r3,-129
   88204:	9d04b03a 	or	r2,r19,r20
   88208:	88e2703a 	and	r17,r17,r3
   8820c:	1000d126 	beq	r2,zero,88554 <___vfiprintf_internal_r+0xb40>
   88210:	a0023526 	beq	r20,zero,88ae8 <___vfiprintf_internal_r+0x10d4>
   88214:	ddc01a04 	addi	r23,sp,104
   88218:	4039883a 	mov	fp,r8
   8821c:	9809883a 	mov	r4,r19
   88220:	a00b883a 	mov	r5,r20
   88224:	01800284 	movi	r6,10
   88228:	000f883a 	mov	r7,zero
   8822c:	008aac80 	call	8aac8 <__umoddi3>
   88230:	10800c04 	addi	r2,r2,48
   88234:	bdffffc4 	addi	r23,r23,-1
   88238:	9809883a 	mov	r4,r19
   8823c:	a00b883a 	mov	r5,r20
   88240:	b8800005 	stb	r2,0(r23)
   88244:	01800284 	movi	r6,10
   88248:	000f883a 	mov	r7,zero
   8824c:	008a4cc0 	call	8a4cc <__udivdi3>
   88250:	1027883a 	mov	r19,r2
   88254:	10c4b03a 	or	r2,r2,r3
   88258:	1829883a 	mov	r20,r3
   8825c:	103fef1e 	bne	r2,zero,8821c <__alt_data_end+0xfffc9a1c>
   88260:	d9001e17 	ldw	r4,120(sp)
   88264:	e011883a 	mov	r8,fp
   88268:	25e9c83a 	sub	r20,r4,r23
   8826c:	003eec06 	br	87e20 <__alt_data_end+0xfffc9620>
   88270:	d8802307 	ldb	r2,140(sp)
   88274:	1002361e 	bne	r2,zero,88b50 <___vfiprintf_internal_r+0x113c>
   88278:	00c00804 	movi	r3,32
   8827c:	d8c02305 	stb	r3,140(sp)
   88280:	04c00044 	movi	r19,1
   88284:	b0c00007 	ldb	r3,0(r22)
   88288:	003e3f06 	br	87b88 <__alt_data_end+0xfffc9388>
   8828c:	8c400054 	ori	r17,r17,1
   88290:	b0c00007 	ldb	r3,0(r22)
   88294:	003e3c06 	br	87b88 <__alt_data_end+0xfffc9388>
   88298:	8c402014 	ori	r17,r17,128
   8829c:	b0c00007 	ldb	r3,0(r22)
   882a0:	003e3906 	br	87b88 <__alt_data_end+0xfffc9388>
   882a4:	dc002715 	stw	r16,156(sp)
   882a8:	d8002515 	stw	zero,148(sp)
   882ac:	1f3ff404 	addi	fp,r3,-48
   882b0:	0009883a 	mov	r4,zero
   882b4:	b021883a 	mov	r16,r22
   882b8:	01400284 	movi	r5,10
   882bc:	008b08c0 	call	8b08c <__mulsi3>
   882c0:	80c00007 	ldb	r3,0(r16)
   882c4:	e089883a 	add	r4,fp,r2
   882c8:	b5800044 	addi	r22,r22,1
   882cc:	1f3ff404 	addi	fp,r3,-48
   882d0:	b021883a 	mov	r16,r22
   882d4:	af3ff82e 	bgeu	r21,fp,882b8 <__alt_data_end+0xfffc9ab8>
   882d8:	d9002515 	stw	r4,148(sp)
   882dc:	dc002717 	ldw	r16,156(sp)
   882e0:	003e2a06 	br	87b8c <__alt_data_end+0xfffc938c>
   882e4:	9cc03fcc 	andi	r19,r19,255
   882e8:	b811883a 	mov	r8,r23
   882ec:	9802e91e 	bne	r19,zero,88e94 <___vfiprintf_internal_r+0x1480>
   882f0:	8c400414 	ori	r17,r17,16
   882f4:	8880080c 	andi	r2,r17,32
   882f8:	103fb81e 	bne	r2,zero,881dc <__alt_data_end+0xfffc99dc>
   882fc:	8880040c 	andi	r2,r17,16
   88300:	10022e26 	beq	r2,zero,88bbc <___vfiprintf_internal_r+0x11a8>
   88304:	d9402217 	ldw	r5,136(sp)
   88308:	2cc00017 	ldw	r19,0(r5)
   8830c:	29400104 	addi	r5,r5,4
   88310:	d9402215 	stw	r5,136(sp)
   88314:	9829d7fa 	srai	r20,r19,31
   88318:	a005883a 	mov	r2,r20
   8831c:	003fb506 	br	881f4 <__alt_data_end+0xfffc99f4>
   88320:	9cc03fcc 	andi	r19,r19,255
   88324:	b811883a 	mov	r8,r23
   88328:	9802fa1e 	bne	r19,zero,88f14 <___vfiprintf_internal_r+0x1500>
   8832c:	8c400414 	ori	r17,r17,16
   88330:	8880080c 	andi	r2,r17,32
   88334:	103f661e 	bne	r2,zero,880d0 <__alt_data_end+0xfffc98d0>
   88338:	8880040c 	andi	r2,r17,16
   8833c:	10020626 	beq	r2,zero,88b58 <___vfiprintf_internal_r+0x1144>
   88340:	d9402217 	ldw	r5,136(sp)
   88344:	d8001d85 	stb	zero,118(sp)
   88348:	0029883a 	mov	r20,zero
   8834c:	28800104 	addi	r2,r5,4
   88350:	2cc00017 	ldw	r19,0(r5)
   88354:	80020816 	blt	r16,zero,88b78 <___vfiprintf_internal_r+0x1164>
   88358:	00ffdfc4 	movi	r3,-129
   8835c:	d8802215 	stw	r2,136(sp)
   88360:	88e2703a 	and	r17,r17,r3
   88364:	983f651e 	bne	r19,zero,880fc <__alt_data_end+0xfffc98fc>
   88368:	002b883a 	mov	r21,zero
   8836c:	8002cf26 	beq	r16,zero,88eac <___vfiprintf_internal_r+0x1498>
   88370:	0027883a 	mov	r19,zero
   88374:	0029883a 	mov	r20,zero
   88378:	003f6106 	br	88100 <__alt_data_end+0xfffc9900>
   8837c:	9cc03fcc 	andi	r19,r19,255
   88380:	b811883a 	mov	r8,r23
   88384:	9802e01e 	bne	r19,zero,88f08 <___vfiprintf_internal_r+0x14f4>
   88388:	8c400414 	ori	r17,r17,16
   8838c:	8880080c 	andi	r2,r17,32
   88390:	1000641e 	bne	r2,zero,88524 <___vfiprintf_internal_r+0xb10>
   88394:	8880040c 	andi	r2,r17,16
   88398:	1001c81e 	bne	r2,zero,88abc <___vfiprintf_internal_r+0x10a8>
   8839c:	8880100c 	andi	r2,r17,64
   883a0:	d8001d85 	stb	zero,118(sp)
   883a4:	1002281e 	bne	r2,zero,88c48 <___vfiprintf_internal_r+0x1234>
   883a8:	d9002217 	ldw	r4,136(sp)
   883ac:	0029883a 	mov	r20,zero
   883b0:	20800104 	addi	r2,r4,4
   883b4:	24c00017 	ldw	r19,0(r4)
   883b8:	8001c60e 	bge	r16,zero,88ad4 <___vfiprintf_internal_r+0x10c0>
   883bc:	d8802215 	stw	r2,136(sp)
   883c0:	002b883a 	mov	r21,zero
   883c4:	9d04b03a 	or	r2,r19,r20
   883c8:	103f911e 	bne	r2,zero,88210 <__alt_data_end+0xfffc9a10>
   883cc:	00800044 	movi	r2,1
   883d0:	10803fcc 	andi	r2,r2,255
   883d4:	00c00044 	movi	r3,1
   883d8:	10c05f26 	beq	r2,r3,88558 <___vfiprintf_internal_r+0xb44>
   883dc:	00c00084 	movi	r3,2
   883e0:	10ffe31e 	bne	r2,r3,88370 <__alt_data_end+0xfffc9b70>
   883e4:	0027883a 	mov	r19,zero
   883e8:	0029883a 	mov	r20,zero
   883ec:	00015106 	br	88934 <___vfiprintf_internal_r+0xf20>
   883f0:	9cc03fcc 	andi	r19,r19,255
   883f4:	b811883a 	mov	r8,r23
   883f8:	9802c01e 	bne	r19,zero,88efc <___vfiprintf_internal_r+0x14e8>
   883fc:	014002b4 	movhi	r5,10
   88400:	29608904 	addi	r5,r5,-32220
   88404:	d9402615 	stw	r5,152(sp)
   88408:	8880080c 	andi	r2,r17,32
   8840c:	103f541e 	bne	r2,zero,88160 <__alt_data_end+0xfffc9960>
   88410:	8880040c 	andi	r2,r17,16
   88414:	1001f226 	beq	r2,zero,88be0 <___vfiprintf_internal_r+0x11cc>
   88418:	d9402217 	ldw	r5,136(sp)
   8841c:	0029883a 	mov	r20,zero
   88420:	2cc00017 	ldw	r19,0(r5)
   88424:	29400104 	addi	r5,r5,4
   88428:	d9402215 	stw	r5,136(sp)
   8842c:	003f5106 	br	88174 <__alt_data_end+0xfffc9974>
   88430:	d8c02217 	ldw	r3,136(sp)
   88434:	b811883a 	mov	r8,r23
   88438:	d8001d85 	stb	zero,118(sp)
   8843c:	1dc00017 	ldw	r23,0(r3)
   88440:	1f000104 	addi	fp,r3,4
   88444:	b8025926 	beq	r23,zero,88dac <___vfiprintf_internal_r+0x1398>
   88448:	80023316 	blt	r16,zero,88d18 <___vfiprintf_internal_r+0x1304>
   8844c:	800d883a 	mov	r6,r16
   88450:	000b883a 	mov	r5,zero
   88454:	b809883a 	mov	r4,r23
   88458:	da002a15 	stw	r8,168(sp)
   8845c:	00862580 	call	86258 <memchr>
   88460:	da002a17 	ldw	r8,168(sp)
   88464:	10026826 	beq	r2,zero,88e08 <___vfiprintf_internal_r+0x13f4>
   88468:	15e9c83a 	sub	r20,r2,r23
   8846c:	dd401d83 	ldbu	r21,118(sp)
   88470:	df002215 	stw	fp,136(sp)
   88474:	0021883a 	mov	r16,zero
   88478:	003e6906 	br	87e20 <__alt_data_end+0xfffc9620>
   8847c:	9cc03fcc 	andi	r19,r19,255
   88480:	b811883a 	mov	r8,r23
   88484:	983fc126 	beq	r19,zero,8838c <__alt_data_end+0xfffc9b8c>
   88488:	d8c02303 	ldbu	r3,140(sp)
   8848c:	d8c01d85 	stb	r3,118(sp)
   88490:	003fbe06 	br	8838c <__alt_data_end+0xfffc9b8c>
   88494:	d9002217 	ldw	r4,136(sp)
   88498:	d9402217 	ldw	r5,136(sp)
   8849c:	21000017 	ldw	r4,0(r4)
   884a0:	28800104 	addi	r2,r5,4
   884a4:	d9002515 	stw	r4,148(sp)
   884a8:	203e3d16 	blt	r4,zero,87da0 <__alt_data_end+0xfffc95a0>
   884ac:	d8802215 	stw	r2,136(sp)
   884b0:	b0c00007 	ldb	r3,0(r22)
   884b4:	003db406 	br	87b88 <__alt_data_end+0xfffc9388>
   884b8:	00c00ac4 	movi	r3,43
   884bc:	d8c02305 	stb	r3,140(sp)
   884c0:	04c00044 	movi	r19,1
   884c4:	b0c00007 	ldb	r3,0(r22)
   884c8:	003daf06 	br	87b88 <__alt_data_end+0xfffc9388>
   884cc:	b0c00007 	ldb	r3,0(r22)
   884d0:	01000a84 	movi	r4,42
   884d4:	b4000044 	addi	r16,r22,1
   884d8:	19025e26 	beq	r3,r4,88e54 <___vfiprintf_internal_r+0x1440>
   884dc:	1f3ff404 	addi	fp,r3,-48
   884e0:	0009883a 	mov	r4,zero
   884e4:	af025236 	bltu	r21,fp,88e30 <___vfiprintf_internal_r+0x141c>
   884e8:	01400284 	movi	r5,10
   884ec:	008b08c0 	call	8b08c <__mulsi3>
   884f0:	80c00007 	ldb	r3,0(r16)
   884f4:	1709883a 	add	r4,r2,fp
   884f8:	85800044 	addi	r22,r16,1
   884fc:	1f3ff404 	addi	fp,r3,-48
   88500:	b021883a 	mov	r16,r22
   88504:	af3ff82e 	bgeu	r21,fp,884e8 <__alt_data_end+0xfffc9ce8>
   88508:	2021883a 	mov	r16,r4
   8850c:	203d9f0e 	bge	r4,zero,87b8c <__alt_data_end+0xfffc938c>
   88510:	043fffc4 	movi	r16,-1
   88514:	003d9d06 	br	87b8c <__alt_data_end+0xfffc938c>
   88518:	8c401014 	ori	r17,r17,64
   8851c:	b0c00007 	ldb	r3,0(r22)
   88520:	003d9906 	br	87b88 <__alt_data_end+0xfffc9388>
   88524:	d9002217 	ldw	r4,136(sp)
   88528:	d8001d85 	stb	zero,118(sp)
   8852c:	20c00204 	addi	r3,r4,8
   88530:	24c00017 	ldw	r19,0(r4)
   88534:	25000117 	ldw	r20,4(r4)
   88538:	8001e716 	blt	r16,zero,88cd8 <___vfiprintf_internal_r+0x12c4>
   8853c:	013fdfc4 	movi	r4,-129
   88540:	9d04b03a 	or	r2,r19,r20
   88544:	d8c02215 	stw	r3,136(sp)
   88548:	8922703a 	and	r17,r17,r4
   8854c:	002b883a 	mov	r21,zero
   88550:	103f2f1e 	bne	r2,zero,88210 <__alt_data_end+0xfffc9a10>
   88554:	803e2f26 	beq	r16,zero,87e14 <__alt_data_end+0xfffc9614>
   88558:	0027883a 	mov	r19,zero
   8855c:	9cc00c04 	addi	r19,r19,48
   88560:	dcc019c5 	stb	r19,103(sp)
   88564:	dd002817 	ldw	r20,160(sp)
   88568:	ddc019c4 	addi	r23,sp,103
   8856c:	003e2c06 	br	87e20 <__alt_data_end+0xfffc9620>
   88570:	9cc03fcc 	andi	r19,r19,255
   88574:	b811883a 	mov	r8,r23
   88578:	9802571e 	bne	r19,zero,88ed8 <___vfiprintf_internal_r+0x14c4>
   8857c:	18005726 	beq	r3,zero,886dc <___vfiprintf_internal_r+0xcc8>
   88580:	04c00044 	movi	r19,1
   88584:	d8c01005 	stb	r3,64(sp)
   88588:	d8001d85 	stb	zero,118(sp)
   8858c:	9829883a 	mov	r20,r19
   88590:	ddc01004 	addi	r23,sp,64
   88594:	003f0a06 	br	881c0 <__alt_data_end+0xfffc99c0>
   88598:	d9402017 	ldw	r5,128(sp)
   8859c:	d9002117 	ldw	r4,132(sp)
   885a0:	d9801a04 	addi	r6,sp,104
   885a4:	da802a15 	stw	r10,168(sp)
   885a8:	00879000 	call	87900 <__sprint_r.part.0>
   885ac:	da802a17 	ldw	r10,168(sp)
   885b0:	1000501e 	bne	r2,zero,886f4 <___vfiprintf_internal_r+0xce0>
   885b4:	d9801b17 	ldw	r6,108(sp)
   885b8:	d8801c17 	ldw	r2,112(sp)
   885bc:	d811883a 	mov	r8,sp
   885c0:	31000044 	addi	r4,r6,1
   885c4:	003e3606 	br	87ea0 <__alt_data_end+0xfffc96a0>
   885c8:	d9001b17 	ldw	r4,108(sp)
   885cc:	d8801c17 	ldw	r2,112(sp)
   885d0:	21400044 	addi	r5,r4,1
   885d4:	d9801d87 	ldb	r6,118(sp)
   885d8:	303e5226 	beq	r6,zero,87f24 <__alt_data_end+0xfffc9724>
   885dc:	01800044 	movi	r6,1
   885e0:	d9001d84 	addi	r4,sp,118
   885e4:	1185883a 	add	r2,r2,r6
   885e8:	41000015 	stw	r4,0(r8)
   885ec:	41800115 	stw	r6,4(r8)
   885f0:	d8801c15 	stw	r2,112(sp)
   885f4:	d9401b15 	stw	r5,108(sp)
   885f8:	010001c4 	movi	r4,7
   885fc:	2140b00e 	bge	r4,r5,888c0 <___vfiprintf_internal_r+0xeac>
   88600:	1000f61e 	bne	r2,zero,889dc <___vfiprintf_internal_r+0xfc8>
   88604:	3800b31e 	bne	r7,zero,888d4 <___vfiprintf_internal_r+0xec0>
   88608:	0009883a 	mov	r4,zero
   8860c:	300b883a 	mov	r5,r6
   88610:	d811883a 	mov	r8,sp
   88614:	01802004 	movi	r6,128
   88618:	19be5226 	beq	r3,r6,87f64 <__alt_data_end+0xfffc9764>
   8861c:	8521c83a 	sub	r16,r16,r20
   88620:	043e790e 	bge	zero,r16,88008 <__alt_data_end+0xfffc9808>
   88624:	05400404 	movi	r21,16
   88628:	ac01b00e 	bge	r21,r16,88cec <___vfiprintf_internal_r+0x12d8>
   8862c:	014002b4 	movhi	r5,10
   88630:	2960ef04 	addi	r5,r5,-31812
   88634:	d9402315 	stw	r5,140(sp)
   88638:	070001c4 	movi	fp,7
   8863c:	00000506 	br	88654 <___vfiprintf_internal_r+0xc40>
   88640:	21400084 	addi	r5,r4,2
   88644:	42000204 	addi	r8,r8,8
   88648:	1809883a 	mov	r4,r3
   8864c:	843ffc04 	addi	r16,r16,-16
   88650:	ac000d0e 	bge	r21,r16,88688 <___vfiprintf_internal_r+0xc74>
   88654:	10800404 	addi	r2,r2,16
   88658:	20c00044 	addi	r3,r4,1
   8865c:	44800015 	stw	r18,0(r8)
   88660:	45400115 	stw	r21,4(r8)
   88664:	d8801c15 	stw	r2,112(sp)
   88668:	d8c01b15 	stw	r3,108(sp)
   8866c:	e0fff40e 	bge	fp,r3,88640 <__alt_data_end+0xfffc9e40>
   88670:	1000101e 	bne	r2,zero,886b4 <___vfiprintf_internal_r+0xca0>
   88674:	843ffc04 	addi	r16,r16,-16
   88678:	01400044 	movi	r5,1
   8867c:	0009883a 	mov	r4,zero
   88680:	d811883a 	mov	r8,sp
   88684:	ac3ff316 	blt	r21,r16,88654 <__alt_data_end+0xfffc9e54>
   88688:	d8c02317 	ldw	r3,140(sp)
   8868c:	1405883a 	add	r2,r2,r16
   88690:	44000115 	stw	r16,4(r8)
   88694:	40c00015 	stw	r3,0(r8)
   88698:	d8801c15 	stw	r2,112(sp)
   8869c:	d9401b15 	stw	r5,108(sp)
   886a0:	00c001c4 	movi	r3,7
   886a4:	19401916 	blt	r3,r5,8870c <___vfiprintf_internal_r+0xcf8>
   886a8:	42000204 	addi	r8,r8,8
   886ac:	29400044 	addi	r5,r5,1
   886b0:	003e5506 	br	88008 <__alt_data_end+0xfffc9808>
   886b4:	d9402017 	ldw	r5,128(sp)
   886b8:	d9002117 	ldw	r4,132(sp)
   886bc:	d9801a04 	addi	r6,sp,104
   886c0:	00879000 	call	87900 <__sprint_r.part.0>
   886c4:	10000b1e 	bne	r2,zero,886f4 <___vfiprintf_internal_r+0xce0>
   886c8:	d9001b17 	ldw	r4,108(sp)
   886cc:	d8801c17 	ldw	r2,112(sp)
   886d0:	d811883a 	mov	r8,sp
   886d4:	21400044 	addi	r5,r4,1
   886d8:	003fdc06 	br	8864c <__alt_data_end+0xfffc9e4c>
   886dc:	d8801c17 	ldw	r2,112(sp)
   886e0:	10000426 	beq	r2,zero,886f4 <___vfiprintf_internal_r+0xce0>
   886e4:	d9402017 	ldw	r5,128(sp)
   886e8:	d9002117 	ldw	r4,132(sp)
   886ec:	d9801a04 	addi	r6,sp,104
   886f0:	00879000 	call	87900 <__sprint_r.part.0>
   886f4:	d9402017 	ldw	r5,128(sp)
   886f8:	2880030b 	ldhu	r2,12(r5)
   886fc:	1080100c 	andi	r2,r2,64
   88700:	10014d1e 	bne	r2,zero,88c38 <___vfiprintf_internal_r+0x1224>
   88704:	d8802417 	ldw	r2,144(sp)
   88708:	003d9706 	br	87d68 <__alt_data_end+0xfffc9568>
   8870c:	1000d21e 	bne	r2,zero,88a58 <___vfiprintf_internal_r+0x1044>
   88710:	00c00044 	movi	r3,1
   88714:	a005883a 	mov	r2,r20
   88718:	ddc00015 	stw	r23,0(sp)
   8871c:	dd000115 	stw	r20,4(sp)
   88720:	dd001c15 	stw	r20,112(sp)
   88724:	d8c01b15 	stw	r3,108(sp)
   88728:	d811883a 	mov	r8,sp
   8872c:	42000204 	addi	r8,r8,8
   88730:	8c40010c 	andi	r17,r17,4
   88734:	88004026 	beq	r17,zero,88838 <___vfiprintf_internal_r+0xe24>
   88738:	d9002517 	ldw	r4,148(sp)
   8873c:	24e3c83a 	sub	r17,r4,r19
   88740:	04403d0e 	bge	zero,r17,88838 <___vfiprintf_internal_r+0xe24>
   88744:	04000404 	movi	r16,16
   88748:	8441a90e 	bge	r16,r17,88df0 <___vfiprintf_internal_r+0x13dc>
   8874c:	00c002b4 	movhi	r3,10
   88750:	18e0f304 	addi	r3,r3,-31796
   88754:	d9001b17 	ldw	r4,108(sp)
   88758:	d8c02315 	stw	r3,140(sp)
   8875c:	050001c4 	movi	r20,7
   88760:	dd402117 	ldw	r21,132(sp)
   88764:	ddc02017 	ldw	r23,128(sp)
   88768:	00000506 	br	88780 <___vfiprintf_internal_r+0xd6c>
   8876c:	21400084 	addi	r5,r4,2
   88770:	42000204 	addi	r8,r8,8
   88774:	1809883a 	mov	r4,r3
   88778:	8c7ffc04 	addi	r17,r17,-16
   8877c:	84400f0e 	bge	r16,r17,887bc <___vfiprintf_internal_r+0xda8>
   88780:	014002b4 	movhi	r5,10
   88784:	10800404 	addi	r2,r2,16
   88788:	20c00044 	addi	r3,r4,1
   8878c:	2960f304 	addi	r5,r5,-31796
   88790:	41400015 	stw	r5,0(r8)
   88794:	44000115 	stw	r16,4(r8)
   88798:	d8801c15 	stw	r2,112(sp)
   8879c:	d8c01b15 	stw	r3,108(sp)
   887a0:	a0fff20e 	bge	r20,r3,8876c <__alt_data_end+0xfffc9f6c>
   887a4:	1000141e 	bne	r2,zero,887f8 <___vfiprintf_internal_r+0xde4>
   887a8:	8c7ffc04 	addi	r17,r17,-16
   887ac:	01400044 	movi	r5,1
   887b0:	0009883a 	mov	r4,zero
   887b4:	d811883a 	mov	r8,sp
   887b8:	847ff116 	blt	r16,r17,88780 <__alt_data_end+0xfffc9f80>
   887bc:	d8c02317 	ldw	r3,140(sp)
   887c0:	1445883a 	add	r2,r2,r17
   887c4:	44400115 	stw	r17,4(r8)
   887c8:	40c00015 	stw	r3,0(r8)
   887cc:	d8801c15 	stw	r2,112(sp)
   887d0:	d9401b15 	stw	r5,108(sp)
   887d4:	00c001c4 	movi	r3,7
   887d8:	1940170e 	bge	r3,r5,88838 <___vfiprintf_internal_r+0xe24>
   887dc:	1000101e 	bne	r2,zero,88820 <___vfiprintf_internal_r+0xe0c>
   887e0:	d8802517 	ldw	r2,148(sp)
   887e4:	14c11616 	blt	r2,r19,88c40 <___vfiprintf_internal_r+0x122c>
   887e8:	d9002417 	ldw	r4,144(sp)
   887ec:	2089883a 	add	r4,r4,r2
   887f0:	d9002415 	stw	r4,144(sp)
   887f4:	003e1806 	br	88058 <__alt_data_end+0xfffc9858>
   887f8:	d9801a04 	addi	r6,sp,104
   887fc:	b80b883a 	mov	r5,r23
   88800:	a809883a 	mov	r4,r21
   88804:	00879000 	call	87900 <__sprint_r.part.0>
   88808:	103fba1e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   8880c:	d9001b17 	ldw	r4,108(sp)
   88810:	d8801c17 	ldw	r2,112(sp)
   88814:	d811883a 	mov	r8,sp
   88818:	21400044 	addi	r5,r4,1
   8881c:	003fd606 	br	88778 <__alt_data_end+0xfffc9f78>
   88820:	d9402017 	ldw	r5,128(sp)
   88824:	d9002117 	ldw	r4,132(sp)
   88828:	d9801a04 	addi	r6,sp,104
   8882c:	00879000 	call	87900 <__sprint_r.part.0>
   88830:	103fb01e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   88834:	d8801c17 	ldw	r2,112(sp)
   88838:	d8c02517 	ldw	r3,148(sp)
   8883c:	1cc0010e 	bge	r3,r19,88844 <___vfiprintf_internal_r+0xe30>
   88840:	9807883a 	mov	r3,r19
   88844:	d9002417 	ldw	r4,144(sp)
   88848:	20c9883a 	add	r4,r4,r3
   8884c:	d9002415 	stw	r4,144(sp)
   88850:	103e0126 	beq	r2,zero,88058 <__alt_data_end+0xfffc9858>
   88854:	d9402017 	ldw	r5,128(sp)
   88858:	d9002117 	ldw	r4,132(sp)
   8885c:	d9801a04 	addi	r6,sp,104
   88860:	00879000 	call	87900 <__sprint_r.part.0>
   88864:	103dfc26 	beq	r2,zero,88058 <__alt_data_end+0xfffc9858>
   88868:	003fa206 	br	886f4 <__alt_data_end+0xfffc9ef4>
   8886c:	d9402017 	ldw	r5,128(sp)
   88870:	d9002117 	ldw	r4,132(sp)
   88874:	d9801a04 	addi	r6,sp,104
   88878:	d9c02b15 	stw	r7,172(sp)
   8887c:	00879000 	call	87900 <__sprint_r.part.0>
   88880:	d9c02b17 	ldw	r7,172(sp)
   88884:	103f9b1e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   88888:	d9001b17 	ldw	r4,108(sp)
   8888c:	d8801c17 	ldw	r2,112(sp)
   88890:	d811883a 	mov	r8,sp
   88894:	21800044 	addi	r6,r4,1
   88898:	003dbf06 	br	87f98 <__alt_data_end+0xfffc9798>
   8889c:	1000d81e 	bne	r2,zero,88c00 <___vfiprintf_internal_r+0x11ec>
   888a0:	d9001d87 	ldb	r4,118(sp)
   888a4:	20000a26 	beq	r4,zero,888d0 <___vfiprintf_internal_r+0xebc>
   888a8:	00800044 	movi	r2,1
   888ac:	d9001d84 	addi	r4,sp,118
   888b0:	100b883a 	mov	r5,r2
   888b4:	d9000015 	stw	r4,0(sp)
   888b8:	d8800115 	stw	r2,4(sp)
   888bc:	d811883a 	mov	r8,sp
   888c0:	2809883a 	mov	r4,r5
   888c4:	42000204 	addi	r8,r8,8
   888c8:	29400044 	addi	r5,r5,1
   888cc:	003d9506 	br	87f24 <__alt_data_end+0xfffc9724>
   888d0:	3800fd26 	beq	r7,zero,88cc8 <___vfiprintf_internal_r+0x12b4>
   888d4:	00800084 	movi	r2,2
   888d8:	d9001d04 	addi	r4,sp,116
   888dc:	d9000015 	stw	r4,0(sp)
   888e0:	d8800115 	stw	r2,4(sp)
   888e4:	01400044 	movi	r5,1
   888e8:	d811883a 	mov	r8,sp
   888ec:	2809883a 	mov	r4,r5
   888f0:	42000204 	addi	r8,r8,8
   888f4:	29400044 	addi	r5,r5,1
   888f8:	003f4606 	br	88614 <__alt_data_end+0xfffc9e14>
   888fc:	d8802517 	ldw	r2,148(sp)
   88900:	14c0010e 	bge	r2,r19,88908 <___vfiprintf_internal_r+0xef4>
   88904:	9805883a 	mov	r2,r19
   88908:	d9402417 	ldw	r5,144(sp)
   8890c:	288b883a 	add	r5,r5,r2
   88910:	d9402415 	stw	r5,144(sp)
   88914:	003dd006 	br	88058 <__alt_data_end+0xfffc9858>
   88918:	d8001d85 	stb	zero,118(sp)
   8891c:	80005d16 	blt	r16,zero,88a94 <___vfiprintf_internal_r+0x1080>
   88920:	00ffdfc4 	movi	r3,-129
   88924:	9d04b03a 	or	r2,r19,r20
   88928:	88e2703a 	and	r17,r17,r3
   8892c:	103d3726 	beq	r2,zero,87e0c <__alt_data_end+0xfffc960c>
   88930:	002b883a 	mov	r21,zero
   88934:	d9002617 	ldw	r4,152(sp)
   88938:	ddc01a04 	addi	r23,sp,104
   8893c:	988003cc 	andi	r2,r19,15
   88940:	a006973a 	slli	r3,r20,28
   88944:	2085883a 	add	r2,r4,r2
   88948:	9826d13a 	srli	r19,r19,4
   8894c:	10800003 	ldbu	r2,0(r2)
   88950:	a028d13a 	srli	r20,r20,4
   88954:	bdffffc4 	addi	r23,r23,-1
   88958:	1ce6b03a 	or	r19,r3,r19
   8895c:	b8800005 	stb	r2,0(r23)
   88960:	9d04b03a 	or	r2,r19,r20
   88964:	103ff51e 	bne	r2,zero,8893c <__alt_data_end+0xfffca13c>
   88968:	d8801e17 	ldw	r2,120(sp)
   8896c:	15e9c83a 	sub	r20,r2,r23
   88970:	003d2b06 	br	87e20 <__alt_data_end+0xfffc9620>
   88974:	d9402017 	ldw	r5,128(sp)
   88978:	d9002117 	ldw	r4,132(sp)
   8897c:	d9801a04 	addi	r6,sp,104
   88980:	00879000 	call	87900 <__sprint_r.part.0>
   88984:	103f5b1e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   88988:	d8801c17 	ldw	r2,112(sp)
   8898c:	d811883a 	mov	r8,sp
   88990:	003f6706 	br	88730 <__alt_data_end+0xfffc9f30>
   88994:	d9402017 	ldw	r5,128(sp)
   88998:	d9002117 	ldw	r4,132(sp)
   8899c:	d9801a04 	addi	r6,sp,104
   889a0:	00879000 	call	87900 <__sprint_r.part.0>
   889a4:	103f531e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   889a8:	d811883a 	mov	r8,sp
   889ac:	003cd906 	br	87d14 <__alt_data_end+0xfffc9514>
   889b0:	10803fcc 	andi	r2,r2,255
   889b4:	1080201c 	xori	r2,r2,128
   889b8:	10bfe004 	addi	r2,r2,-128
   889bc:	00c00c04 	movi	r3,48
   889c0:	10ffe926 	beq	r2,r3,88968 <__alt_data_end+0xfffca168>
   889c4:	b8ffffc5 	stb	r3,-1(r23)
   889c8:	d8c01e17 	ldw	r3,120(sp)
   889cc:	b8bfffc4 	addi	r2,r23,-1
   889d0:	102f883a 	mov	r23,r2
   889d4:	18a9c83a 	sub	r20,r3,r2
   889d8:	003d1106 	br	87e20 <__alt_data_end+0xfffc9620>
   889dc:	d9402017 	ldw	r5,128(sp)
   889e0:	d9002117 	ldw	r4,132(sp)
   889e4:	d9801a04 	addi	r6,sp,104
   889e8:	d8c02a15 	stw	r3,168(sp)
   889ec:	d9c02b15 	stw	r7,172(sp)
   889f0:	00879000 	call	87900 <__sprint_r.part.0>
   889f4:	d8c02a17 	ldw	r3,168(sp)
   889f8:	d9c02b17 	ldw	r7,172(sp)
   889fc:	103f3d1e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   88a00:	d9001b17 	ldw	r4,108(sp)
   88a04:	d8801c17 	ldw	r2,112(sp)
   88a08:	d811883a 	mov	r8,sp
   88a0c:	21400044 	addi	r5,r4,1
   88a10:	003d4406 	br	87f24 <__alt_data_end+0xfffc9724>
   88a14:	d9402017 	ldw	r5,128(sp)
   88a18:	d9002117 	ldw	r4,132(sp)
   88a1c:	d9801a04 	addi	r6,sp,104
   88a20:	d8c02a15 	stw	r3,168(sp)
   88a24:	00879000 	call	87900 <__sprint_r.part.0>
   88a28:	d8c02a17 	ldw	r3,168(sp)
   88a2c:	103f311e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   88a30:	d9001b17 	ldw	r4,108(sp)
   88a34:	d8801c17 	ldw	r2,112(sp)
   88a38:	d811883a 	mov	r8,sp
   88a3c:	21400044 	addi	r5,r4,1
   88a40:	003ef406 	br	88614 <__alt_data_end+0xfffc9e14>
   88a44:	1000bd1e 	bne	r2,zero,88d3c <___vfiprintf_internal_r+0x1328>
   88a48:	01400044 	movi	r5,1
   88a4c:	0009883a 	mov	r4,zero
   88a50:	d811883a 	mov	r8,sp
   88a54:	003ef106 	br	8861c <__alt_data_end+0xfffc9e1c>
   88a58:	d9402017 	ldw	r5,128(sp)
   88a5c:	d9002117 	ldw	r4,132(sp)
   88a60:	d9801a04 	addi	r6,sp,104
   88a64:	00879000 	call	87900 <__sprint_r.part.0>
   88a68:	103f221e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   88a6c:	d9401b17 	ldw	r5,108(sp)
   88a70:	d8801c17 	ldw	r2,112(sp)
   88a74:	d811883a 	mov	r8,sp
   88a78:	29400044 	addi	r5,r5,1
   88a7c:	003d6206 	br	88008 <__alt_data_end+0xfffc9808>
   88a80:	014002b4 	movhi	r5,10
   88a84:	29608e04 	addi	r5,r5,-32200
   88a88:	d9402615 	stw	r5,152(sp)
   88a8c:	d8c02215 	stw	r3,136(sp)
   88a90:	1023883a 	mov	r17,r2
   88a94:	9d04b03a 	or	r2,r19,r20
   88a98:	103fa51e 	bne	r2,zero,88930 <__alt_data_end+0xfffca130>
   88a9c:	002b883a 	mov	r21,zero
   88aa0:	00800084 	movi	r2,2
   88aa4:	003e4a06 	br	883d0 <__alt_data_end+0xfffc9bd0>
   88aa8:	014002b4 	movhi	r5,10
   88aac:	29608e04 	addi	r5,r5,-32200
   88ab0:	002b883a 	mov	r21,zero
   88ab4:	d9402615 	stw	r5,152(sp)
   88ab8:	003f9e06 	br	88934 <__alt_data_end+0xfffca134>
   88abc:	d9402217 	ldw	r5,136(sp)
   88ac0:	d8001d85 	stb	zero,118(sp)
   88ac4:	0029883a 	mov	r20,zero
   88ac8:	28800104 	addi	r2,r5,4
   88acc:	2cc00017 	ldw	r19,0(r5)
   88ad0:	803e3a16 	blt	r16,zero,883bc <__alt_data_end+0xfffc9bbc>
   88ad4:	00ffdfc4 	movi	r3,-129
   88ad8:	d8802215 	stw	r2,136(sp)
   88adc:	88e2703a 	and	r17,r17,r3
   88ae0:	002b883a 	mov	r21,zero
   88ae4:	983e9b26 	beq	r19,zero,88554 <__alt_data_end+0xfffc9d54>
   88ae8:	00800244 	movi	r2,9
   88aec:	14fdc936 	bltu	r2,r19,88214 <__alt_data_end+0xfffc9a14>
   88af0:	003e9a06 	br	8855c <__alt_data_end+0xfffc9d5c>
   88af4:	00800c04 	movi	r2,48
   88af8:	d8c01d45 	stb	r3,117(sp)
   88afc:	d8801d05 	stb	r2,116(sp)
   88b00:	d8001d85 	stb	zero,118(sp)
   88b04:	88c00094 	ori	r3,r17,2
   88b08:	80009c16 	blt	r16,zero,88d7c <___vfiprintf_internal_r+0x1368>
   88b0c:	00bfdfc4 	movi	r2,-129
   88b10:	88a2703a 	and	r17,r17,r2
   88b14:	8c400094 	ori	r17,r17,2
   88b18:	002b883a 	mov	r21,zero
   88b1c:	003f8506 	br	88934 <__alt_data_end+0xfffca134>
   88b20:	b029883a 	mov	r20,r22
   88b24:	003c0b06 	br	87b54 <__alt_data_end+0xfffc9354>
   88b28:	04e7c83a 	sub	r19,zero,r19
   88b2c:	05400b44 	movi	r21,45
   88b30:	9804c03a 	cmpne	r2,r19,zero
   88b34:	0529c83a 	sub	r20,zero,r20
   88b38:	dd401d85 	stb	r21,118(sp)
   88b3c:	a0a9c83a 	sub	r20,r20,r2
   88b40:	80009716 	blt	r16,zero,88da0 <___vfiprintf_internal_r+0x138c>
   88b44:	00bfdfc4 	movi	r2,-129
   88b48:	88a2703a 	and	r17,r17,r2
   88b4c:	003db006 	br	88210 <__alt_data_end+0xfffc9a10>
   88b50:	b0c00007 	ldb	r3,0(r22)
   88b54:	003c0c06 	br	87b88 <__alt_data_end+0xfffc9388>
   88b58:	8880100c 	andi	r2,r17,64
   88b5c:	d8001d85 	stb	zero,118(sp)
   88b60:	1000461e 	bne	r2,zero,88c7c <___vfiprintf_internal_r+0x1268>
   88b64:	d9002217 	ldw	r4,136(sp)
   88b68:	0029883a 	mov	r20,zero
   88b6c:	20800104 	addi	r2,r4,4
   88b70:	24c00017 	ldw	r19,0(r4)
   88b74:	803df80e 	bge	r16,zero,88358 <__alt_data_end+0xfffc9b58>
   88b78:	9d06b03a 	or	r3,r19,r20
   88b7c:	d8802215 	stw	r2,136(sp)
   88b80:	183d5e1e 	bne	r3,zero,880fc <__alt_data_end+0xfffc98fc>
   88b84:	002b883a 	mov	r21,zero
   88b88:	0005883a 	mov	r2,zero
   88b8c:	003e1006 	br	883d0 <__alt_data_end+0xfffc9bd0>
   88b90:	8880040c 	andi	r2,r17,16
   88b94:	1000321e 	bne	r2,zero,88c60 <___vfiprintf_internal_r+0x124c>
   88b98:	8c40100c 	andi	r17,r17,64
   88b9c:	88008d26 	beq	r17,zero,88dd4 <___vfiprintf_internal_r+0x13c0>
   88ba0:	d9402217 	ldw	r5,136(sp)
   88ba4:	d8c02417 	ldw	r3,144(sp)
   88ba8:	28800017 	ldw	r2,0(r5)
   88bac:	29400104 	addi	r5,r5,4
   88bb0:	d9402215 	stw	r5,136(sp)
   88bb4:	10c0000d 	sth	r3,0(r2)
   88bb8:	003bca06 	br	87ae4 <__alt_data_end+0xfffc92e4>
   88bbc:	8880100c 	andi	r2,r17,64
   88bc0:	10003a26 	beq	r2,zero,88cac <___vfiprintf_internal_r+0x1298>
   88bc4:	d8802217 	ldw	r2,136(sp)
   88bc8:	14c0000f 	ldh	r19,0(r2)
   88bcc:	10800104 	addi	r2,r2,4
   88bd0:	d8802215 	stw	r2,136(sp)
   88bd4:	9829d7fa 	srai	r20,r19,31
   88bd8:	a005883a 	mov	r2,r20
   88bdc:	003d8506 	br	881f4 <__alt_data_end+0xfffc99f4>
   88be0:	8880100c 	andi	r2,r17,64
   88be4:	10002b26 	beq	r2,zero,88c94 <___vfiprintf_internal_r+0x1280>
   88be8:	d8802217 	ldw	r2,136(sp)
   88bec:	0029883a 	mov	r20,zero
   88bf0:	14c0000b 	ldhu	r19,0(r2)
   88bf4:	10800104 	addi	r2,r2,4
   88bf8:	d8802215 	stw	r2,136(sp)
   88bfc:	003d5d06 	br	88174 <__alt_data_end+0xfffc9974>
   88c00:	d9402017 	ldw	r5,128(sp)
   88c04:	d9002117 	ldw	r4,132(sp)
   88c08:	d9801a04 	addi	r6,sp,104
   88c0c:	d8c02a15 	stw	r3,168(sp)
   88c10:	d9c02b15 	stw	r7,172(sp)
   88c14:	00879000 	call	87900 <__sprint_r.part.0>
   88c18:	d8c02a17 	ldw	r3,168(sp)
   88c1c:	d9c02b17 	ldw	r7,172(sp)
   88c20:	103eb41e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   88c24:	d9001b17 	ldw	r4,108(sp)
   88c28:	d8801c17 	ldw	r2,112(sp)
   88c2c:	d811883a 	mov	r8,sp
   88c30:	21400044 	addi	r5,r4,1
   88c34:	003e6706 	br	885d4 <__alt_data_end+0xfffc9dd4>
   88c38:	00bfffc4 	movi	r2,-1
   88c3c:	003c4a06 	br	87d68 <__alt_data_end+0xfffc9568>
   88c40:	9805883a 	mov	r2,r19
   88c44:	003ee806 	br	887e8 <__alt_data_end+0xfffc9fe8>
   88c48:	d8c02217 	ldw	r3,136(sp)
   88c4c:	0029883a 	mov	r20,zero
   88c50:	18800104 	addi	r2,r3,4
   88c54:	1cc0000b 	ldhu	r19,0(r3)
   88c58:	803f9e0e 	bge	r16,zero,88ad4 <__alt_data_end+0xfffca2d4>
   88c5c:	003dd706 	br	883bc <__alt_data_end+0xfffc9bbc>
   88c60:	d8c02217 	ldw	r3,136(sp)
   88c64:	d9002417 	ldw	r4,144(sp)
   88c68:	18800017 	ldw	r2,0(r3)
   88c6c:	18c00104 	addi	r3,r3,4
   88c70:	d8c02215 	stw	r3,136(sp)
   88c74:	11000015 	stw	r4,0(r2)
   88c78:	003b9a06 	br	87ae4 <__alt_data_end+0xfffc92e4>
   88c7c:	d8c02217 	ldw	r3,136(sp)
   88c80:	0029883a 	mov	r20,zero
   88c84:	18800104 	addi	r2,r3,4
   88c88:	1cc0000b 	ldhu	r19,0(r3)
   88c8c:	803db20e 	bge	r16,zero,88358 <__alt_data_end+0xfffc9b58>
   88c90:	003fb906 	br	88b78 <__alt_data_end+0xfffca378>
   88c94:	d9002217 	ldw	r4,136(sp)
   88c98:	0029883a 	mov	r20,zero
   88c9c:	24c00017 	ldw	r19,0(r4)
   88ca0:	21000104 	addi	r4,r4,4
   88ca4:	d9002215 	stw	r4,136(sp)
   88ca8:	003d3206 	br	88174 <__alt_data_end+0xfffc9974>
   88cac:	d8c02217 	ldw	r3,136(sp)
   88cb0:	1cc00017 	ldw	r19,0(r3)
   88cb4:	18c00104 	addi	r3,r3,4
   88cb8:	d8c02215 	stw	r3,136(sp)
   88cbc:	9829d7fa 	srai	r20,r19,31
   88cc0:	a005883a 	mov	r2,r20
   88cc4:	003d4b06 	br	881f4 <__alt_data_end+0xfffc99f4>
   88cc8:	0009883a 	mov	r4,zero
   88ccc:	01400044 	movi	r5,1
   88cd0:	d811883a 	mov	r8,sp
   88cd4:	003e4f06 	br	88614 <__alt_data_end+0xfffc9e14>
   88cd8:	d8c02215 	stw	r3,136(sp)
   88cdc:	002b883a 	mov	r21,zero
   88ce0:	003db806 	br	883c4 <__alt_data_end+0xfffc9bc4>
   88ce4:	d811883a 	mov	r8,sp
   88ce8:	003e9606 	br	88744 <__alt_data_end+0xfffc9f44>
   88cec:	010002b4 	movhi	r4,10
   88cf0:	2120ef04 	addi	r4,r4,-31812
   88cf4:	d9002315 	stw	r4,140(sp)
   88cf8:	003e6306 	br	88688 <__alt_data_end+0xfffc9e88>
   88cfc:	b0c00043 	ldbu	r3,1(r22)
   88d00:	8c400814 	ori	r17,r17,32
   88d04:	b5800044 	addi	r22,r22,1
   88d08:	18c03fcc 	andi	r3,r3,255
   88d0c:	18c0201c 	xori	r3,r3,128
   88d10:	18ffe004 	addi	r3,r3,-128
   88d14:	003b9c06 	br	87b88 <__alt_data_end+0xfffc9388>
   88d18:	b809883a 	mov	r4,r23
   88d1c:	da002a15 	stw	r8,168(sp)
   88d20:	00878680 	call	87868 <strlen>
   88d24:	1029883a 	mov	r20,r2
   88d28:	dd401d83 	ldbu	r21,118(sp)
   88d2c:	df002215 	stw	fp,136(sp)
   88d30:	0021883a 	mov	r16,zero
   88d34:	da002a17 	ldw	r8,168(sp)
   88d38:	003c3906 	br	87e20 <__alt_data_end+0xfffc9620>
   88d3c:	d9402017 	ldw	r5,128(sp)
   88d40:	d9002117 	ldw	r4,132(sp)
   88d44:	d9801a04 	addi	r6,sp,104
   88d48:	00879000 	call	87900 <__sprint_r.part.0>
   88d4c:	103e691e 	bne	r2,zero,886f4 <__alt_data_end+0xfffc9ef4>
   88d50:	d9001b17 	ldw	r4,108(sp)
   88d54:	d8801c17 	ldw	r2,112(sp)
   88d58:	d811883a 	mov	r8,sp
   88d5c:	21400044 	addi	r5,r4,1
   88d60:	003e2e06 	br	8861c <__alt_data_end+0xfffc9e1c>
   88d64:	010002b4 	movhi	r4,10
   88d68:	2120f304 	addi	r4,r4,-31796
   88d6c:	d9002315 	stw	r4,140(sp)
   88d70:	d9001b17 	ldw	r4,108(sp)
   88d74:	21000044 	addi	r4,r4,1
   88d78:	003c5e06 	br	87ef4 <__alt_data_end+0xfffc96f4>
   88d7c:	002b883a 	mov	r21,zero
   88d80:	00800084 	movi	r2,2
   88d84:	10803fcc 	andi	r2,r2,255
   88d88:	01000044 	movi	r4,1
   88d8c:	11002b26 	beq	r2,r4,88e3c <___vfiprintf_internal_r+0x1428>
   88d90:	01000084 	movi	r4,2
   88d94:	11002b1e 	bne	r2,r4,88e44 <___vfiprintf_internal_r+0x1430>
   88d98:	1823883a 	mov	r17,r3
   88d9c:	003ee506 	br	88934 <__alt_data_end+0xfffca134>
   88da0:	8807883a 	mov	r3,r17
   88da4:	00800044 	movi	r2,1
   88da8:	003ff606 	br	88d84 <__alt_data_end+0xfffca584>
   88dac:	00800184 	movi	r2,6
   88db0:	1400012e 	bgeu	r2,r16,88db8 <___vfiprintf_internal_r+0x13a4>
   88db4:	1021883a 	mov	r16,r2
   88db8:	8029883a 	mov	r20,r16
   88dbc:	8027883a 	mov	r19,r16
   88dc0:	80002216 	blt	r16,zero,88e4c <___vfiprintf_internal_r+0x1438>
   88dc4:	05c002b4 	movhi	r23,10
   88dc8:	df002215 	stw	fp,136(sp)
   88dcc:	bde09304 	addi	r23,r23,-32180
   88dd0:	003cfb06 	br	881c0 <__alt_data_end+0xfffc99c0>
   88dd4:	d9002217 	ldw	r4,136(sp)
   88dd8:	d9402417 	ldw	r5,144(sp)
   88ddc:	20800017 	ldw	r2,0(r4)
   88de0:	21000104 	addi	r4,r4,4
   88de4:	d9002215 	stw	r4,136(sp)
   88de8:	11400015 	stw	r5,0(r2)
   88dec:	003b3d06 	br	87ae4 <__alt_data_end+0xfffc92e4>
   88df0:	014002b4 	movhi	r5,10
   88df4:	2960f304 	addi	r5,r5,-31796
   88df8:	d9402315 	stw	r5,140(sp)
   88dfc:	d9401b17 	ldw	r5,108(sp)
   88e00:	29400044 	addi	r5,r5,1
   88e04:	003e6d06 	br	887bc <__alt_data_end+0xfffc9fbc>
   88e08:	8029883a 	mov	r20,r16
   88e0c:	dd401d83 	ldbu	r21,118(sp)
   88e10:	df002215 	stw	fp,136(sp)
   88e14:	0021883a 	mov	r16,zero
   88e18:	003c0106 	br	87e20 <__alt_data_end+0xfffc9620>
   88e1c:	00c002b4 	movhi	r3,10
   88e20:	18e0ef04 	addi	r3,r3,-31812
   88e24:	d8c02315 	stw	r3,140(sp)
   88e28:	280d883a 	mov	r6,r5
   88e2c:	003c6906 	br	87fd4 <__alt_data_end+0xfffc97d4>
   88e30:	802d883a 	mov	r22,r16
   88e34:	0021883a 	mov	r16,zero
   88e38:	003b5406 	br	87b8c <__alt_data_end+0xfffc938c>
   88e3c:	1823883a 	mov	r17,r3
   88e40:	003cf306 	br	88210 <__alt_data_end+0xfffc9a10>
   88e44:	1823883a 	mov	r17,r3
   88e48:	003cad06 	br	88100 <__alt_data_end+0xfffc9900>
   88e4c:	0027883a 	mov	r19,zero
   88e50:	003fdc06 	br	88dc4 <__alt_data_end+0xfffca5c4>
   88e54:	d9402217 	ldw	r5,136(sp)
   88e58:	8005883a 	mov	r2,r16
   88e5c:	b0c00043 	ldbu	r3,1(r22)
   88e60:	2c000017 	ldw	r16,0(r5)
   88e64:	29000104 	addi	r4,r5,4
   88e68:	d9002215 	stw	r4,136(sp)
   88e6c:	102d883a 	mov	r22,r2
   88e70:	803fa50e 	bge	r16,zero,88d08 <__alt_data_end+0xfffca508>
   88e74:	18c03fcc 	andi	r3,r3,255
   88e78:	18c0201c 	xori	r3,r3,128
   88e7c:	043fffc4 	movi	r16,-1
   88e80:	18ffe004 	addi	r3,r3,-128
   88e84:	003b4006 	br	87b88 <__alt_data_end+0xfffc9388>
   88e88:	d9402303 	ldbu	r5,140(sp)
   88e8c:	d9401d85 	stb	r5,118(sp)
   88e90:	003cae06 	br	8814c <__alt_data_end+0xfffc994c>
   88e94:	d8c02303 	ldbu	r3,140(sp)
   88e98:	d8c01d85 	stb	r3,118(sp)
   88e9c:	003d1406 	br	882f0 <__alt_data_end+0xfffc9af0>
   88ea0:	d8c02303 	ldbu	r3,140(sp)
   88ea4:	d8c01d85 	stb	r3,118(sp)
   88ea8:	003cca06 	br	881d4 <__alt_data_end+0xfffc99d4>
   88eac:	8880004c 	andi	r2,r17,1
   88eb0:	002b883a 	mov	r21,zero
   88eb4:	10000526 	beq	r2,zero,88ecc <___vfiprintf_internal_r+0x14b8>
   88eb8:	00800c04 	movi	r2,48
   88ebc:	d88019c5 	stb	r2,103(sp)
   88ec0:	dd002817 	ldw	r20,160(sp)
   88ec4:	ddc019c4 	addi	r23,sp,103
   88ec8:	003bd506 	br	87e20 <__alt_data_end+0xfffc9620>
   88ecc:	0029883a 	mov	r20,zero
   88ed0:	ddc01a04 	addi	r23,sp,104
   88ed4:	003bd206 	br	87e20 <__alt_data_end+0xfffc9620>
   88ed8:	d9002303 	ldbu	r4,140(sp)
   88edc:	d9001d85 	stb	r4,118(sp)
   88ee0:	003da606 	br	8857c <__alt_data_end+0xfffc9d7c>
   88ee4:	d8c02303 	ldbu	r3,140(sp)
   88ee8:	d8c01d85 	stb	r3,118(sp)
   88eec:	003c7606 	br	880c8 <__alt_data_end+0xfffc98c8>
   88ef0:	d8c02303 	ldbu	r3,140(sp)
   88ef4:	d8c01d85 	stb	r3,118(sp)
   88ef8:	003c6506 	br	88090 <__alt_data_end+0xfffc9890>
   88efc:	d9002303 	ldbu	r4,140(sp)
   88f00:	d9001d85 	stb	r4,118(sp)
   88f04:	003d3d06 	br	883fc <__alt_data_end+0xfffc9bfc>
   88f08:	d8c02303 	ldbu	r3,140(sp)
   88f0c:	d8c01d85 	stb	r3,118(sp)
   88f10:	003d1d06 	br	88388 <__alt_data_end+0xfffc9b88>
   88f14:	d8c02303 	ldbu	r3,140(sp)
   88f18:	d8c01d85 	stb	r3,118(sp)
   88f1c:	003d0306 	br	8832c <__alt_data_end+0xfffc9b2c>

00088f20 <__vfiprintf_internal>:
   88f20:	008002b4 	movhi	r2,10
   88f24:	10a83d04 	addi	r2,r2,-24332
   88f28:	300f883a 	mov	r7,r6
   88f2c:	280d883a 	mov	r6,r5
   88f30:	200b883a 	mov	r5,r4
   88f34:	11000017 	ldw	r4,0(r2)
   88f38:	0087a141 	jmpi	87a14 <___vfiprintf_internal_r>

00088f3c <__sbprintf>:
   88f3c:	2880030b 	ldhu	r2,12(r5)
   88f40:	2ac01917 	ldw	r11,100(r5)
   88f44:	2a80038b 	ldhu	r10,14(r5)
   88f48:	2a400717 	ldw	r9,28(r5)
   88f4c:	2a000917 	ldw	r8,36(r5)
   88f50:	defee204 	addi	sp,sp,-1144
   88f54:	00c10004 	movi	r3,1024
   88f58:	dc011a15 	stw	r16,1128(sp)
   88f5c:	10bfff4c 	andi	r2,r2,65533
   88f60:	2821883a 	mov	r16,r5
   88f64:	d8cb883a 	add	r5,sp,r3
   88f68:	dc811c15 	stw	r18,1136(sp)
   88f6c:	dc411b15 	stw	r17,1132(sp)
   88f70:	dfc11d15 	stw	ra,1140(sp)
   88f74:	2025883a 	mov	r18,r4
   88f78:	d881030d 	sth	r2,1036(sp)
   88f7c:	dac11915 	stw	r11,1124(sp)
   88f80:	da81038d 	sth	r10,1038(sp)
   88f84:	da410715 	stw	r9,1052(sp)
   88f88:	da010915 	stw	r8,1060(sp)
   88f8c:	dec10015 	stw	sp,1024(sp)
   88f90:	dec10415 	stw	sp,1040(sp)
   88f94:	d8c10215 	stw	r3,1032(sp)
   88f98:	d8c10515 	stw	r3,1044(sp)
   88f9c:	d8010615 	stw	zero,1048(sp)
   88fa0:	0087a140 	call	87a14 <___vfiprintf_internal_r>
   88fa4:	1023883a 	mov	r17,r2
   88fa8:	10000416 	blt	r2,zero,88fbc <__sbprintf+0x80>
   88fac:	d9410004 	addi	r5,sp,1024
   88fb0:	9009883a 	mov	r4,r18
   88fb4:	0084dbc0 	call	84dbc <_fflush_r>
   88fb8:	10000d1e 	bne	r2,zero,88ff0 <__sbprintf+0xb4>
   88fbc:	d881030b 	ldhu	r2,1036(sp)
   88fc0:	1080100c 	andi	r2,r2,64
   88fc4:	10000326 	beq	r2,zero,88fd4 <__sbprintf+0x98>
   88fc8:	8080030b 	ldhu	r2,12(r16)
   88fcc:	10801014 	ori	r2,r2,64
   88fd0:	8080030d 	sth	r2,12(r16)
   88fd4:	8805883a 	mov	r2,r17
   88fd8:	dfc11d17 	ldw	ra,1140(sp)
   88fdc:	dc811c17 	ldw	r18,1136(sp)
   88fe0:	dc411b17 	ldw	r17,1132(sp)
   88fe4:	dc011a17 	ldw	r16,1128(sp)
   88fe8:	dec11e04 	addi	sp,sp,1144
   88fec:	f800283a 	ret
   88ff0:	047fffc4 	movi	r17,-1
   88ff4:	003ff106 	br	88fbc <__alt_data_end+0xfffca7bc>

00088ff8 <_write_r>:
   88ff8:	defffd04 	addi	sp,sp,-12
   88ffc:	2805883a 	mov	r2,r5
   89000:	dc000015 	stw	r16,0(sp)
   89004:	040002b4 	movhi	r16,10
   89008:	dc400115 	stw	r17,4(sp)
   8900c:	300b883a 	mov	r5,r6
   89010:	842f5904 	addi	r16,r16,-17052
   89014:	2023883a 	mov	r17,r4
   89018:	380d883a 	mov	r6,r7
   8901c:	1009883a 	mov	r4,r2
   89020:	dfc00215 	stw	ra,8(sp)
   89024:	80000015 	stw	zero,0(r16)
   89028:	008e4840 	call	8e484 <write>
   8902c:	00ffffc4 	movi	r3,-1
   89030:	10c00526 	beq	r2,r3,89048 <_write_r+0x50>
   89034:	dfc00217 	ldw	ra,8(sp)
   89038:	dc400117 	ldw	r17,4(sp)
   8903c:	dc000017 	ldw	r16,0(sp)
   89040:	dec00304 	addi	sp,sp,12
   89044:	f800283a 	ret
   89048:	80c00017 	ldw	r3,0(r16)
   8904c:	183ff926 	beq	r3,zero,89034 <__alt_data_end+0xfffca834>
   89050:	88c00015 	stw	r3,0(r17)
   89054:	003ff706 	br	89034 <__alt_data_end+0xfffca834>

00089058 <_close_r>:
   89058:	defffd04 	addi	sp,sp,-12
   8905c:	dc000015 	stw	r16,0(sp)
   89060:	040002b4 	movhi	r16,10
   89064:	dc400115 	stw	r17,4(sp)
   89068:	842f5904 	addi	r16,r16,-17052
   8906c:	2023883a 	mov	r17,r4
   89070:	2809883a 	mov	r4,r5
   89074:	dfc00215 	stw	ra,8(sp)
   89078:	80000015 	stw	zero,0(r16)
   8907c:	008d9940 	call	8d994 <close>
   89080:	00ffffc4 	movi	r3,-1
   89084:	10c00526 	beq	r2,r3,8909c <_close_r+0x44>
   89088:	dfc00217 	ldw	ra,8(sp)
   8908c:	dc400117 	ldw	r17,4(sp)
   89090:	dc000017 	ldw	r16,0(sp)
   89094:	dec00304 	addi	sp,sp,12
   89098:	f800283a 	ret
   8909c:	80c00017 	ldw	r3,0(r16)
   890a0:	183ff926 	beq	r3,zero,89088 <__alt_data_end+0xfffca888>
   890a4:	88c00015 	stw	r3,0(r17)
   890a8:	003ff706 	br	89088 <__alt_data_end+0xfffca888>

000890ac <_calloc_r>:
   890ac:	defffe04 	addi	sp,sp,-8
   890b0:	2805883a 	mov	r2,r5
   890b4:	dc000015 	stw	r16,0(sp)
   890b8:	300b883a 	mov	r5,r6
   890bc:	2021883a 	mov	r16,r4
   890c0:	1009883a 	mov	r4,r2
   890c4:	dfc00115 	stw	ra,4(sp)
   890c8:	008b08c0 	call	8b08c <__mulsi3>
   890cc:	100b883a 	mov	r5,r2
   890d0:	8009883a 	mov	r4,r16
   890d4:	0085a4c0 	call	85a4c <_malloc_r>
   890d8:	10002926 	beq	r2,zero,89180 <_calloc_r+0xd4>
   890dc:	11bfff17 	ldw	r6,-4(r2)
   890e0:	1021883a 	mov	r16,r2
   890e4:	00bfff04 	movi	r2,-4
   890e8:	308c703a 	and	r6,r6,r2
   890ec:	00c00904 	movi	r3,36
   890f0:	308d883a 	add	r6,r6,r2
   890f4:	19801636 	bltu	r3,r6,89150 <_calloc_r+0xa4>
   890f8:	008004c4 	movi	r2,19
   890fc:	11800b2e 	bgeu	r2,r6,8912c <_calloc_r+0x80>
   89100:	80000015 	stw	zero,0(r16)
   89104:	80000115 	stw	zero,4(r16)
   89108:	008006c4 	movi	r2,27
   8910c:	11801a2e 	bgeu	r2,r6,89178 <_calloc_r+0xcc>
   89110:	80000215 	stw	zero,8(r16)
   89114:	80000315 	stw	zero,12(r16)
   89118:	30c0151e 	bne	r6,r3,89170 <_calloc_r+0xc4>
   8911c:	80000415 	stw	zero,16(r16)
   89120:	80800604 	addi	r2,r16,24
   89124:	80000515 	stw	zero,20(r16)
   89128:	00000106 	br	89130 <_calloc_r+0x84>
   8912c:	8005883a 	mov	r2,r16
   89130:	10000015 	stw	zero,0(r2)
   89134:	10000115 	stw	zero,4(r2)
   89138:	10000215 	stw	zero,8(r2)
   8913c:	8005883a 	mov	r2,r16
   89140:	dfc00117 	ldw	ra,4(sp)
   89144:	dc000017 	ldw	r16,0(sp)
   89148:	dec00204 	addi	sp,sp,8
   8914c:	f800283a 	ret
   89150:	000b883a 	mov	r5,zero
   89154:	8009883a 	mov	r4,r16
   89158:	00864840 	call	86484 <memset>
   8915c:	8005883a 	mov	r2,r16
   89160:	dfc00117 	ldw	ra,4(sp)
   89164:	dc000017 	ldw	r16,0(sp)
   89168:	dec00204 	addi	sp,sp,8
   8916c:	f800283a 	ret
   89170:	80800404 	addi	r2,r16,16
   89174:	003fee06 	br	89130 <__alt_data_end+0xfffca930>
   89178:	80800204 	addi	r2,r16,8
   8917c:	003fec06 	br	89130 <__alt_data_end+0xfffca930>
   89180:	0005883a 	mov	r2,zero
   89184:	003fee06 	br	89140 <__alt_data_end+0xfffca940>

00089188 <_fclose_r>:
   89188:	28003926 	beq	r5,zero,89270 <_fclose_r+0xe8>
   8918c:	defffc04 	addi	sp,sp,-16
   89190:	dc400115 	stw	r17,4(sp)
   89194:	dc000015 	stw	r16,0(sp)
   89198:	dfc00315 	stw	ra,12(sp)
   8919c:	dc800215 	stw	r18,8(sp)
   891a0:	2023883a 	mov	r17,r4
   891a4:	2821883a 	mov	r16,r5
   891a8:	20000226 	beq	r4,zero,891b4 <_fclose_r+0x2c>
   891ac:	20800e17 	ldw	r2,56(r4)
   891b0:	10002726 	beq	r2,zero,89250 <_fclose_r+0xc8>
   891b4:	8080030f 	ldh	r2,12(r16)
   891b8:	1000071e 	bne	r2,zero,891d8 <_fclose_r+0x50>
   891bc:	0005883a 	mov	r2,zero
   891c0:	dfc00317 	ldw	ra,12(sp)
   891c4:	dc800217 	ldw	r18,8(sp)
   891c8:	dc400117 	ldw	r17,4(sp)
   891cc:	dc000017 	ldw	r16,0(sp)
   891d0:	dec00404 	addi	sp,sp,16
   891d4:	f800283a 	ret
   891d8:	800b883a 	mov	r5,r16
   891dc:	8809883a 	mov	r4,r17
   891e0:	0084ba00 	call	84ba0 <__sflush_r>
   891e4:	1025883a 	mov	r18,r2
   891e8:	80800b17 	ldw	r2,44(r16)
   891ec:	10000426 	beq	r2,zero,89200 <_fclose_r+0x78>
   891f0:	81400717 	ldw	r5,28(r16)
   891f4:	8809883a 	mov	r4,r17
   891f8:	103ee83a 	callr	r2
   891fc:	10001616 	blt	r2,zero,89258 <_fclose_r+0xd0>
   89200:	8080030b 	ldhu	r2,12(r16)
   89204:	1080200c 	andi	r2,r2,128
   89208:	1000151e 	bne	r2,zero,89260 <_fclose_r+0xd8>
   8920c:	81400c17 	ldw	r5,48(r16)
   89210:	28000526 	beq	r5,zero,89228 <_fclose_r+0xa0>
   89214:	80801004 	addi	r2,r16,64
   89218:	28800226 	beq	r5,r2,89224 <_fclose_r+0x9c>
   8921c:	8809883a 	mov	r4,r17
   89220:	008531c0 	call	8531c <_free_r>
   89224:	80000c15 	stw	zero,48(r16)
   89228:	81401117 	ldw	r5,68(r16)
   8922c:	28000326 	beq	r5,zero,8923c <_fclose_r+0xb4>
   89230:	8809883a 	mov	r4,r17
   89234:	008531c0 	call	8531c <_free_r>
   89238:	80001115 	stw	zero,68(r16)
   8923c:	00851b80 	call	851b8 <__sfp_lock_acquire>
   89240:	8000030d 	sth	zero,12(r16)
   89244:	00851bc0 	call	851bc <__sfp_lock_release>
   89248:	9005883a 	mov	r2,r18
   8924c:	003fdc06 	br	891c0 <__alt_data_end+0xfffca9c0>
   89250:	00851a80 	call	851a8 <__sinit>
   89254:	003fd706 	br	891b4 <__alt_data_end+0xfffca9b4>
   89258:	04bfffc4 	movi	r18,-1
   8925c:	003fe806 	br	89200 <__alt_data_end+0xfffcaa00>
   89260:	81400417 	ldw	r5,16(r16)
   89264:	8809883a 	mov	r4,r17
   89268:	008531c0 	call	8531c <_free_r>
   8926c:	003fe706 	br	8920c <__alt_data_end+0xfffcaa0c>
   89270:	0005883a 	mov	r2,zero
   89274:	f800283a 	ret

00089278 <fclose>:
   89278:	008002b4 	movhi	r2,10
   8927c:	10a83d04 	addi	r2,r2,-24332
   89280:	200b883a 	mov	r5,r4
   89284:	11000017 	ldw	r4,0(r2)
   89288:	00891881 	jmpi	89188 <_fclose_r>

0008928c <__fputwc>:
   8928c:	defff804 	addi	sp,sp,-32
   89290:	dcc00415 	stw	r19,16(sp)
   89294:	dc800315 	stw	r18,12(sp)
   89298:	dc000115 	stw	r16,4(sp)
   8929c:	dfc00715 	stw	ra,28(sp)
   892a0:	dd400615 	stw	r21,24(sp)
   892a4:	dd000515 	stw	r20,20(sp)
   892a8:	dc400215 	stw	r17,8(sp)
   892ac:	2027883a 	mov	r19,r4
   892b0:	2825883a 	mov	r18,r5
   892b4:	3021883a 	mov	r16,r6
   892b8:	008583c0 	call	8583c <__locale_mb_cur_max>
   892bc:	00c00044 	movi	r3,1
   892c0:	10c03e26 	beq	r2,r3,893bc <__fputwc+0x130>
   892c4:	81c01704 	addi	r7,r16,92
   892c8:	900d883a 	mov	r6,r18
   892cc:	d80b883a 	mov	r5,sp
   892d0:	9809883a 	mov	r4,r19
   892d4:	008a2e40 	call	8a2e4 <_wcrtomb_r>
   892d8:	1029883a 	mov	r20,r2
   892dc:	00bfffc4 	movi	r2,-1
   892e0:	a0802026 	beq	r20,r2,89364 <__fputwc+0xd8>
   892e4:	d9400003 	ldbu	r5,0(sp)
   892e8:	a0001c26 	beq	r20,zero,8935c <__fputwc+0xd0>
   892ec:	0023883a 	mov	r17,zero
   892f0:	05400284 	movi	r21,10
   892f4:	00000906 	br	8931c <__fputwc+0x90>
   892f8:	80800017 	ldw	r2,0(r16)
   892fc:	11400005 	stb	r5,0(r2)
   89300:	80c00017 	ldw	r3,0(r16)
   89304:	18c00044 	addi	r3,r3,1
   89308:	80c00015 	stw	r3,0(r16)
   8930c:	8c400044 	addi	r17,r17,1
   89310:	dc45883a 	add	r2,sp,r17
   89314:	8d00112e 	bgeu	r17,r20,8935c <__fputwc+0xd0>
   89318:	11400003 	ldbu	r5,0(r2)
   8931c:	80c00217 	ldw	r3,8(r16)
   89320:	18ffffc4 	addi	r3,r3,-1
   89324:	80c00215 	stw	r3,8(r16)
   89328:	183ff30e 	bge	r3,zero,892f8 <__alt_data_end+0xfffcaaf8>
   8932c:	80800617 	ldw	r2,24(r16)
   89330:	18801916 	blt	r3,r2,89398 <__fputwc+0x10c>
   89334:	80800017 	ldw	r2,0(r16)
   89338:	11400005 	stb	r5,0(r2)
   8933c:	80800017 	ldw	r2,0(r16)
   89340:	10c00003 	ldbu	r3,0(r2)
   89344:	10800044 	addi	r2,r2,1
   89348:	1d402326 	beq	r3,r21,893d8 <__fputwc+0x14c>
   8934c:	80800015 	stw	r2,0(r16)
   89350:	8c400044 	addi	r17,r17,1
   89354:	dc45883a 	add	r2,sp,r17
   89358:	8d3fef36 	bltu	r17,r20,89318 <__alt_data_end+0xfffcab18>
   8935c:	9005883a 	mov	r2,r18
   89360:	00000406 	br	89374 <__fputwc+0xe8>
   89364:	80c0030b 	ldhu	r3,12(r16)
   89368:	a005883a 	mov	r2,r20
   8936c:	18c01014 	ori	r3,r3,64
   89370:	80c0030d 	sth	r3,12(r16)
   89374:	dfc00717 	ldw	ra,28(sp)
   89378:	dd400617 	ldw	r21,24(sp)
   8937c:	dd000517 	ldw	r20,20(sp)
   89380:	dcc00417 	ldw	r19,16(sp)
   89384:	dc800317 	ldw	r18,12(sp)
   89388:	dc400217 	ldw	r17,8(sp)
   8938c:	dc000117 	ldw	r16,4(sp)
   89390:	dec00804 	addi	sp,sp,32
   89394:	f800283a 	ret
   89398:	800d883a 	mov	r6,r16
   8939c:	29403fcc 	andi	r5,r5,255
   893a0:	9809883a 	mov	r4,r19
   893a4:	008a18c0 	call	8a18c <__swbuf_r>
   893a8:	10bfffe0 	cmpeqi	r2,r2,-1
   893ac:	10803fcc 	andi	r2,r2,255
   893b0:	103fd626 	beq	r2,zero,8930c <__alt_data_end+0xfffcab0c>
   893b4:	00bfffc4 	movi	r2,-1
   893b8:	003fee06 	br	89374 <__alt_data_end+0xfffcab74>
   893bc:	90ffffc4 	addi	r3,r18,-1
   893c0:	01003f84 	movi	r4,254
   893c4:	20ffbf36 	bltu	r4,r3,892c4 <__alt_data_end+0xfffcaac4>
   893c8:	900b883a 	mov	r5,r18
   893cc:	dc800005 	stb	r18,0(sp)
   893d0:	1029883a 	mov	r20,r2
   893d4:	003fc506 	br	892ec <__alt_data_end+0xfffcaaec>
   893d8:	800d883a 	mov	r6,r16
   893dc:	a80b883a 	mov	r5,r21
   893e0:	9809883a 	mov	r4,r19
   893e4:	008a18c0 	call	8a18c <__swbuf_r>
   893e8:	10bfffe0 	cmpeqi	r2,r2,-1
   893ec:	003fef06 	br	893ac <__alt_data_end+0xfffcabac>

000893f0 <_fputwc_r>:
   893f0:	3080030b 	ldhu	r2,12(r6)
   893f4:	10c8000c 	andi	r3,r2,8192
   893f8:	1800051e 	bne	r3,zero,89410 <_fputwc_r+0x20>
   893fc:	30c01917 	ldw	r3,100(r6)
   89400:	10880014 	ori	r2,r2,8192
   89404:	3080030d 	sth	r2,12(r6)
   89408:	18880014 	ori	r2,r3,8192
   8940c:	30801915 	stw	r2,100(r6)
   89410:	008928c1 	jmpi	8928c <__fputwc>

00089414 <fputwc>:
   89414:	008002b4 	movhi	r2,10
   89418:	defffc04 	addi	sp,sp,-16
   8941c:	10a83d04 	addi	r2,r2,-24332
   89420:	dc000115 	stw	r16,4(sp)
   89424:	14000017 	ldw	r16,0(r2)
   89428:	dc400215 	stw	r17,8(sp)
   8942c:	dfc00315 	stw	ra,12(sp)
   89430:	2023883a 	mov	r17,r4
   89434:	80000226 	beq	r16,zero,89440 <fputwc+0x2c>
   89438:	80800e17 	ldw	r2,56(r16)
   8943c:	10001026 	beq	r2,zero,89480 <fputwc+0x6c>
   89440:	2880030b 	ldhu	r2,12(r5)
   89444:	10c8000c 	andi	r3,r2,8192
   89448:	1800051e 	bne	r3,zero,89460 <fputwc+0x4c>
   8944c:	28c01917 	ldw	r3,100(r5)
   89450:	10880014 	ori	r2,r2,8192
   89454:	2880030d 	sth	r2,12(r5)
   89458:	18880014 	ori	r2,r3,8192
   8945c:	28801915 	stw	r2,100(r5)
   89460:	280d883a 	mov	r6,r5
   89464:	8009883a 	mov	r4,r16
   89468:	880b883a 	mov	r5,r17
   8946c:	dfc00317 	ldw	ra,12(sp)
   89470:	dc400217 	ldw	r17,8(sp)
   89474:	dc000117 	ldw	r16,4(sp)
   89478:	dec00404 	addi	sp,sp,16
   8947c:	008928c1 	jmpi	8928c <__fputwc>
   89480:	8009883a 	mov	r4,r16
   89484:	d9400015 	stw	r5,0(sp)
   89488:	00851a80 	call	851a8 <__sinit>
   8948c:	d9400017 	ldw	r5,0(sp)
   89490:	003feb06 	br	89440 <__alt_data_end+0xfffcac40>

00089494 <_fstat_r>:
   89494:	defffd04 	addi	sp,sp,-12
   89498:	2805883a 	mov	r2,r5
   8949c:	dc000015 	stw	r16,0(sp)
   894a0:	040002b4 	movhi	r16,10
   894a4:	dc400115 	stw	r17,4(sp)
   894a8:	842f5904 	addi	r16,r16,-17052
   894ac:	2023883a 	mov	r17,r4
   894b0:	300b883a 	mov	r5,r6
   894b4:	1009883a 	mov	r4,r2
   894b8:	dfc00215 	stw	ra,8(sp)
   894bc:	80000015 	stw	zero,0(r16)
   894c0:	008dad40 	call	8dad4 <fstat>
   894c4:	00ffffc4 	movi	r3,-1
   894c8:	10c00526 	beq	r2,r3,894e0 <_fstat_r+0x4c>
   894cc:	dfc00217 	ldw	ra,8(sp)
   894d0:	dc400117 	ldw	r17,4(sp)
   894d4:	dc000017 	ldw	r16,0(sp)
   894d8:	dec00304 	addi	sp,sp,12
   894dc:	f800283a 	ret
   894e0:	80c00017 	ldw	r3,0(r16)
   894e4:	183ff926 	beq	r3,zero,894cc <__alt_data_end+0xfffcaccc>
   894e8:	88c00015 	stw	r3,0(r17)
   894ec:	003ff706 	br	894cc <__alt_data_end+0xfffcaccc>

000894f0 <__sfvwrite_r>:
   894f0:	30800217 	ldw	r2,8(r6)
   894f4:	10006726 	beq	r2,zero,89694 <__sfvwrite_r+0x1a4>
   894f8:	28c0030b 	ldhu	r3,12(r5)
   894fc:	defff404 	addi	sp,sp,-48
   89500:	dd400715 	stw	r21,28(sp)
   89504:	dd000615 	stw	r20,24(sp)
   89508:	dc000215 	stw	r16,8(sp)
   8950c:	dfc00b15 	stw	ra,44(sp)
   89510:	df000a15 	stw	fp,40(sp)
   89514:	ddc00915 	stw	r23,36(sp)
   89518:	dd800815 	stw	r22,32(sp)
   8951c:	dcc00515 	stw	r19,20(sp)
   89520:	dc800415 	stw	r18,16(sp)
   89524:	dc400315 	stw	r17,12(sp)
   89528:	1880020c 	andi	r2,r3,8
   8952c:	2821883a 	mov	r16,r5
   89530:	202b883a 	mov	r21,r4
   89534:	3029883a 	mov	r20,r6
   89538:	10002726 	beq	r2,zero,895d8 <__sfvwrite_r+0xe8>
   8953c:	28800417 	ldw	r2,16(r5)
   89540:	10002526 	beq	r2,zero,895d8 <__sfvwrite_r+0xe8>
   89544:	1880008c 	andi	r2,r3,2
   89548:	a4400017 	ldw	r17,0(r20)
   8954c:	10002a26 	beq	r2,zero,895f8 <__sfvwrite_r+0x108>
   89550:	05a00034 	movhi	r22,32768
   89554:	0027883a 	mov	r19,zero
   89558:	0025883a 	mov	r18,zero
   8955c:	b5bf0004 	addi	r22,r22,-1024
   89560:	980d883a 	mov	r6,r19
   89564:	a809883a 	mov	r4,r21
   89568:	90004626 	beq	r18,zero,89684 <__sfvwrite_r+0x194>
   8956c:	900f883a 	mov	r7,r18
   89570:	b480022e 	bgeu	r22,r18,8957c <__sfvwrite_r+0x8c>
   89574:	01e00034 	movhi	r7,32768
   89578:	39ff0004 	addi	r7,r7,-1024
   8957c:	80800917 	ldw	r2,36(r16)
   89580:	81400717 	ldw	r5,28(r16)
   89584:	103ee83a 	callr	r2
   89588:	00805a0e 	bge	zero,r2,896f4 <__sfvwrite_r+0x204>
   8958c:	a0c00217 	ldw	r3,8(r20)
   89590:	98a7883a 	add	r19,r19,r2
   89594:	90a5c83a 	sub	r18,r18,r2
   89598:	1885c83a 	sub	r2,r3,r2
   8959c:	a0800215 	stw	r2,8(r20)
   895a0:	103fef1e 	bne	r2,zero,89560 <__alt_data_end+0xfffcad60>
   895a4:	0005883a 	mov	r2,zero
   895a8:	dfc00b17 	ldw	ra,44(sp)
   895ac:	df000a17 	ldw	fp,40(sp)
   895b0:	ddc00917 	ldw	r23,36(sp)
   895b4:	dd800817 	ldw	r22,32(sp)
   895b8:	dd400717 	ldw	r21,28(sp)
   895bc:	dd000617 	ldw	r20,24(sp)
   895c0:	dcc00517 	ldw	r19,20(sp)
   895c4:	dc800417 	ldw	r18,16(sp)
   895c8:	dc400317 	ldw	r17,12(sp)
   895cc:	dc000217 	ldw	r16,8(sp)
   895d0:	dec00c04 	addi	sp,sp,48
   895d4:	f800283a 	ret
   895d8:	800b883a 	mov	r5,r16
   895dc:	a809883a 	mov	r4,r21
   895e0:	008319c0 	call	8319c <__swsetup_r>
   895e4:	1000ee1e 	bne	r2,zero,899a0 <__sfvwrite_r+0x4b0>
   895e8:	80c0030b 	ldhu	r3,12(r16)
   895ec:	a4400017 	ldw	r17,0(r20)
   895f0:	1880008c 	andi	r2,r3,2
   895f4:	103fd61e 	bne	r2,zero,89550 <__alt_data_end+0xfffcad50>
   895f8:	1880004c 	andi	r2,r3,1
   895fc:	1000421e 	bne	r2,zero,89708 <__sfvwrite_r+0x218>
   89600:	0039883a 	mov	fp,zero
   89604:	0025883a 	mov	r18,zero
   89608:	90001a26 	beq	r18,zero,89674 <__sfvwrite_r+0x184>
   8960c:	1880800c 	andi	r2,r3,512
   89610:	84c00217 	ldw	r19,8(r16)
   89614:	10002126 	beq	r2,zero,8969c <__sfvwrite_r+0x1ac>
   89618:	982f883a 	mov	r23,r19
   8961c:	94c09636 	bltu	r18,r19,89878 <__sfvwrite_r+0x388>
   89620:	1881200c 	andi	r2,r3,1152
   89624:	1000a11e 	bne	r2,zero,898ac <__sfvwrite_r+0x3bc>
   89628:	81000017 	ldw	r4,0(r16)
   8962c:	b80d883a 	mov	r6,r23
   89630:	e00b883a 	mov	r5,fp
   89634:	0089a6c0 	call	89a6c <memmove>
   89638:	80c00217 	ldw	r3,8(r16)
   8963c:	81000017 	ldw	r4,0(r16)
   89640:	9005883a 	mov	r2,r18
   89644:	1ce7c83a 	sub	r19,r3,r19
   89648:	25cf883a 	add	r7,r4,r23
   8964c:	84c00215 	stw	r19,8(r16)
   89650:	81c00015 	stw	r7,0(r16)
   89654:	a0c00217 	ldw	r3,8(r20)
   89658:	e0b9883a 	add	fp,fp,r2
   8965c:	90a5c83a 	sub	r18,r18,r2
   89660:	18a7c83a 	sub	r19,r3,r2
   89664:	a4c00215 	stw	r19,8(r20)
   89668:	983fce26 	beq	r19,zero,895a4 <__alt_data_end+0xfffcada4>
   8966c:	80c0030b 	ldhu	r3,12(r16)
   89670:	903fe61e 	bne	r18,zero,8960c <__alt_data_end+0xfffcae0c>
   89674:	8f000017 	ldw	fp,0(r17)
   89678:	8c800117 	ldw	r18,4(r17)
   8967c:	8c400204 	addi	r17,r17,8
   89680:	003fe106 	br	89608 <__alt_data_end+0xfffcae08>
   89684:	8cc00017 	ldw	r19,0(r17)
   89688:	8c800117 	ldw	r18,4(r17)
   8968c:	8c400204 	addi	r17,r17,8
   89690:	003fb306 	br	89560 <__alt_data_end+0xfffcad60>
   89694:	0005883a 	mov	r2,zero
   89698:	f800283a 	ret
   8969c:	81000017 	ldw	r4,0(r16)
   896a0:	80800417 	ldw	r2,16(r16)
   896a4:	11005a36 	bltu	r2,r4,89810 <__sfvwrite_r+0x320>
   896a8:	85c00517 	ldw	r23,20(r16)
   896ac:	95c05836 	bltu	r18,r23,89810 <__sfvwrite_r+0x320>
   896b0:	00a00034 	movhi	r2,32768
   896b4:	10bfffc4 	addi	r2,r2,-1
   896b8:	9009883a 	mov	r4,r18
   896bc:	1480012e 	bgeu	r2,r18,896c4 <__sfvwrite_r+0x1d4>
   896c0:	1009883a 	mov	r4,r2
   896c4:	b80b883a 	mov	r5,r23
   896c8:	0080a340 	call	80a34 <__divsi3>
   896cc:	b80b883a 	mov	r5,r23
   896d0:	1009883a 	mov	r4,r2
   896d4:	008b08c0 	call	8b08c <__mulsi3>
   896d8:	81400717 	ldw	r5,28(r16)
   896dc:	80c00917 	ldw	r3,36(r16)
   896e0:	100f883a 	mov	r7,r2
   896e4:	e00d883a 	mov	r6,fp
   896e8:	a809883a 	mov	r4,r21
   896ec:	183ee83a 	callr	r3
   896f0:	00bfd816 	blt	zero,r2,89654 <__alt_data_end+0xfffcae54>
   896f4:	8080030b 	ldhu	r2,12(r16)
   896f8:	10801014 	ori	r2,r2,64
   896fc:	8080030d 	sth	r2,12(r16)
   89700:	00bfffc4 	movi	r2,-1
   89704:	003fa806 	br	895a8 <__alt_data_end+0xfffcada8>
   89708:	0027883a 	mov	r19,zero
   8970c:	0011883a 	mov	r8,zero
   89710:	0039883a 	mov	fp,zero
   89714:	0025883a 	mov	r18,zero
   89718:	90001f26 	beq	r18,zero,89798 <__sfvwrite_r+0x2a8>
   8971c:	40005a26 	beq	r8,zero,89888 <__sfvwrite_r+0x398>
   89720:	982d883a 	mov	r22,r19
   89724:	94c0012e 	bgeu	r18,r19,8972c <__sfvwrite_r+0x23c>
   89728:	902d883a 	mov	r22,r18
   8972c:	81000017 	ldw	r4,0(r16)
   89730:	80800417 	ldw	r2,16(r16)
   89734:	b02f883a 	mov	r23,r22
   89738:	81c00517 	ldw	r7,20(r16)
   8973c:	1100032e 	bgeu	r2,r4,8974c <__sfvwrite_r+0x25c>
   89740:	80c00217 	ldw	r3,8(r16)
   89744:	38c7883a 	add	r3,r7,r3
   89748:	1d801816 	blt	r3,r22,897ac <__sfvwrite_r+0x2bc>
   8974c:	b1c03e16 	blt	r22,r7,89848 <__sfvwrite_r+0x358>
   89750:	80800917 	ldw	r2,36(r16)
   89754:	81400717 	ldw	r5,28(r16)
   89758:	e00d883a 	mov	r6,fp
   8975c:	da000115 	stw	r8,4(sp)
   89760:	a809883a 	mov	r4,r21
   89764:	103ee83a 	callr	r2
   89768:	102f883a 	mov	r23,r2
   8976c:	da000117 	ldw	r8,4(sp)
   89770:	00bfe00e 	bge	zero,r2,896f4 <__alt_data_end+0xfffcaef4>
   89774:	9de7c83a 	sub	r19,r19,r23
   89778:	98001f26 	beq	r19,zero,897f8 <__sfvwrite_r+0x308>
   8977c:	a0800217 	ldw	r2,8(r20)
   89780:	e5f9883a 	add	fp,fp,r23
   89784:	95e5c83a 	sub	r18,r18,r23
   89788:	15efc83a 	sub	r23,r2,r23
   8978c:	a5c00215 	stw	r23,8(r20)
   89790:	b83f8426 	beq	r23,zero,895a4 <__alt_data_end+0xfffcada4>
   89794:	903fe11e 	bne	r18,zero,8971c <__alt_data_end+0xfffcaf1c>
   89798:	8f000017 	ldw	fp,0(r17)
   8979c:	8c800117 	ldw	r18,4(r17)
   897a0:	0011883a 	mov	r8,zero
   897a4:	8c400204 	addi	r17,r17,8
   897a8:	003fdb06 	br	89718 <__alt_data_end+0xfffcaf18>
   897ac:	180d883a 	mov	r6,r3
   897b0:	e00b883a 	mov	r5,fp
   897b4:	da000115 	stw	r8,4(sp)
   897b8:	d8c00015 	stw	r3,0(sp)
   897bc:	0089a6c0 	call	89a6c <memmove>
   897c0:	d8c00017 	ldw	r3,0(sp)
   897c4:	80800017 	ldw	r2,0(r16)
   897c8:	800b883a 	mov	r5,r16
   897cc:	a809883a 	mov	r4,r21
   897d0:	10c5883a 	add	r2,r2,r3
   897d4:	80800015 	stw	r2,0(r16)
   897d8:	d8c00015 	stw	r3,0(sp)
   897dc:	0084dbc0 	call	84dbc <_fflush_r>
   897e0:	d8c00017 	ldw	r3,0(sp)
   897e4:	da000117 	ldw	r8,4(sp)
   897e8:	103fc21e 	bne	r2,zero,896f4 <__alt_data_end+0xfffcaef4>
   897ec:	182f883a 	mov	r23,r3
   897f0:	9de7c83a 	sub	r19,r19,r23
   897f4:	983fe11e 	bne	r19,zero,8977c <__alt_data_end+0xfffcaf7c>
   897f8:	800b883a 	mov	r5,r16
   897fc:	a809883a 	mov	r4,r21
   89800:	0084dbc0 	call	84dbc <_fflush_r>
   89804:	103fbb1e 	bne	r2,zero,896f4 <__alt_data_end+0xfffcaef4>
   89808:	0011883a 	mov	r8,zero
   8980c:	003fdb06 	br	8977c <__alt_data_end+0xfffcaf7c>
   89810:	94c0012e 	bgeu	r18,r19,89818 <__sfvwrite_r+0x328>
   89814:	9027883a 	mov	r19,r18
   89818:	980d883a 	mov	r6,r19
   8981c:	e00b883a 	mov	r5,fp
   89820:	0089a6c0 	call	89a6c <memmove>
   89824:	80800217 	ldw	r2,8(r16)
   89828:	80c00017 	ldw	r3,0(r16)
   8982c:	14c5c83a 	sub	r2,r2,r19
   89830:	1cc7883a 	add	r3,r3,r19
   89834:	80800215 	stw	r2,8(r16)
   89838:	80c00015 	stw	r3,0(r16)
   8983c:	10004326 	beq	r2,zero,8994c <__sfvwrite_r+0x45c>
   89840:	9805883a 	mov	r2,r19
   89844:	003f8306 	br	89654 <__alt_data_end+0xfffcae54>
   89848:	b00d883a 	mov	r6,r22
   8984c:	e00b883a 	mov	r5,fp
   89850:	da000115 	stw	r8,4(sp)
   89854:	0089a6c0 	call	89a6c <memmove>
   89858:	80800217 	ldw	r2,8(r16)
   8985c:	80c00017 	ldw	r3,0(r16)
   89860:	da000117 	ldw	r8,4(sp)
   89864:	1585c83a 	sub	r2,r2,r22
   89868:	1dad883a 	add	r22,r3,r22
   8986c:	80800215 	stw	r2,8(r16)
   89870:	85800015 	stw	r22,0(r16)
   89874:	003fbf06 	br	89774 <__alt_data_end+0xfffcaf74>
   89878:	81000017 	ldw	r4,0(r16)
   8987c:	9027883a 	mov	r19,r18
   89880:	902f883a 	mov	r23,r18
   89884:	003f6906 	br	8962c <__alt_data_end+0xfffcae2c>
   89888:	900d883a 	mov	r6,r18
   8988c:	01400284 	movi	r5,10
   89890:	e009883a 	mov	r4,fp
   89894:	00862580 	call	86258 <memchr>
   89898:	10003e26 	beq	r2,zero,89994 <__sfvwrite_r+0x4a4>
   8989c:	10800044 	addi	r2,r2,1
   898a0:	1727c83a 	sub	r19,r2,fp
   898a4:	02000044 	movi	r8,1
   898a8:	003f9d06 	br	89720 <__alt_data_end+0xfffcaf20>
   898ac:	80800517 	ldw	r2,20(r16)
   898b0:	81400417 	ldw	r5,16(r16)
   898b4:	81c00017 	ldw	r7,0(r16)
   898b8:	10a7883a 	add	r19,r2,r2
   898bc:	9885883a 	add	r2,r19,r2
   898c0:	1026d7fa 	srli	r19,r2,31
   898c4:	396dc83a 	sub	r22,r7,r5
   898c8:	b1000044 	addi	r4,r22,1
   898cc:	9885883a 	add	r2,r19,r2
   898d0:	1027d07a 	srai	r19,r2,1
   898d4:	2485883a 	add	r2,r4,r18
   898d8:	980d883a 	mov	r6,r19
   898dc:	9880022e 	bgeu	r19,r2,898e8 <__sfvwrite_r+0x3f8>
   898e0:	1027883a 	mov	r19,r2
   898e4:	100d883a 	mov	r6,r2
   898e8:	18c1000c 	andi	r3,r3,1024
   898ec:	18001c26 	beq	r3,zero,89960 <__sfvwrite_r+0x470>
   898f0:	300b883a 	mov	r5,r6
   898f4:	a809883a 	mov	r4,r21
   898f8:	0085a4c0 	call	85a4c <_malloc_r>
   898fc:	102f883a 	mov	r23,r2
   89900:	10002926 	beq	r2,zero,899a8 <__sfvwrite_r+0x4b8>
   89904:	81400417 	ldw	r5,16(r16)
   89908:	b00d883a 	mov	r6,r22
   8990c:	1009883a 	mov	r4,r2
   89910:	008633c0 	call	8633c <memcpy>
   89914:	8080030b 	ldhu	r2,12(r16)
   89918:	00fedfc4 	movi	r3,-1153
   8991c:	10c4703a 	and	r2,r2,r3
   89920:	10802014 	ori	r2,r2,128
   89924:	8080030d 	sth	r2,12(r16)
   89928:	bd89883a 	add	r4,r23,r22
   8992c:	9d8fc83a 	sub	r7,r19,r22
   89930:	85c00415 	stw	r23,16(r16)
   89934:	84c00515 	stw	r19,20(r16)
   89938:	81000015 	stw	r4,0(r16)
   8993c:	9027883a 	mov	r19,r18
   89940:	81c00215 	stw	r7,8(r16)
   89944:	902f883a 	mov	r23,r18
   89948:	003f3806 	br	8962c <__alt_data_end+0xfffcae2c>
   8994c:	800b883a 	mov	r5,r16
   89950:	a809883a 	mov	r4,r21
   89954:	0084dbc0 	call	84dbc <_fflush_r>
   89958:	103fb926 	beq	r2,zero,89840 <__alt_data_end+0xfffcb040>
   8995c:	003f6506 	br	896f4 <__alt_data_end+0xfffcaef4>
   89960:	a809883a 	mov	r4,r21
   89964:	0089c280 	call	89c28 <_realloc_r>
   89968:	102f883a 	mov	r23,r2
   8996c:	103fee1e 	bne	r2,zero,89928 <__alt_data_end+0xfffcb128>
   89970:	81400417 	ldw	r5,16(r16)
   89974:	a809883a 	mov	r4,r21
   89978:	008531c0 	call	8531c <_free_r>
   8997c:	8080030b 	ldhu	r2,12(r16)
   89980:	00ffdfc4 	movi	r3,-129
   89984:	1884703a 	and	r2,r3,r2
   89988:	00c00304 	movi	r3,12
   8998c:	a8c00015 	stw	r3,0(r21)
   89990:	003f5906 	br	896f8 <__alt_data_end+0xfffcaef8>
   89994:	94c00044 	addi	r19,r18,1
   89998:	02000044 	movi	r8,1
   8999c:	003f6006 	br	89720 <__alt_data_end+0xfffcaf20>
   899a0:	00bfffc4 	movi	r2,-1
   899a4:	003f0006 	br	895a8 <__alt_data_end+0xfffcada8>
   899a8:	00800304 	movi	r2,12
   899ac:	a8800015 	stw	r2,0(r21)
   899b0:	8080030b 	ldhu	r2,12(r16)
   899b4:	003f5006 	br	896f8 <__alt_data_end+0xfffcaef8>

000899b8 <_isatty_r>:
   899b8:	defffd04 	addi	sp,sp,-12
   899bc:	dc000015 	stw	r16,0(sp)
   899c0:	040002b4 	movhi	r16,10
   899c4:	dc400115 	stw	r17,4(sp)
   899c8:	842f5904 	addi	r16,r16,-17052
   899cc:	2023883a 	mov	r17,r4
   899d0:	2809883a 	mov	r4,r5
   899d4:	dfc00215 	stw	ra,8(sp)
   899d8:	80000015 	stw	zero,0(r16)
   899dc:	008de680 	call	8de68 <isatty>
   899e0:	00ffffc4 	movi	r3,-1
   899e4:	10c00526 	beq	r2,r3,899fc <_isatty_r+0x44>
   899e8:	dfc00217 	ldw	ra,8(sp)
   899ec:	dc400117 	ldw	r17,4(sp)
   899f0:	dc000017 	ldw	r16,0(sp)
   899f4:	dec00304 	addi	sp,sp,12
   899f8:	f800283a 	ret
   899fc:	80c00017 	ldw	r3,0(r16)
   89a00:	183ff926 	beq	r3,zero,899e8 <__alt_data_end+0xfffcb1e8>
   89a04:	88c00015 	stw	r3,0(r17)
   89a08:	003ff706 	br	899e8 <__alt_data_end+0xfffcb1e8>

00089a0c <_lseek_r>:
   89a0c:	defffd04 	addi	sp,sp,-12
   89a10:	2805883a 	mov	r2,r5
   89a14:	dc000015 	stw	r16,0(sp)
   89a18:	040002b4 	movhi	r16,10
   89a1c:	dc400115 	stw	r17,4(sp)
   89a20:	300b883a 	mov	r5,r6
   89a24:	842f5904 	addi	r16,r16,-17052
   89a28:	2023883a 	mov	r17,r4
   89a2c:	380d883a 	mov	r6,r7
   89a30:	1009883a 	mov	r4,r2
   89a34:	dfc00215 	stw	ra,8(sp)
   89a38:	80000015 	stw	zero,0(r16)
   89a3c:	008e03c0 	call	8e03c <lseek>
   89a40:	00ffffc4 	movi	r3,-1
   89a44:	10c00526 	beq	r2,r3,89a5c <_lseek_r+0x50>
   89a48:	dfc00217 	ldw	ra,8(sp)
   89a4c:	dc400117 	ldw	r17,4(sp)
   89a50:	dc000017 	ldw	r16,0(sp)
   89a54:	dec00304 	addi	sp,sp,12
   89a58:	f800283a 	ret
   89a5c:	80c00017 	ldw	r3,0(r16)
   89a60:	183ff926 	beq	r3,zero,89a48 <__alt_data_end+0xfffcb248>
   89a64:	88c00015 	stw	r3,0(r17)
   89a68:	003ff706 	br	89a48 <__alt_data_end+0xfffcb248>

00089a6c <memmove>:
   89a6c:	2005883a 	mov	r2,r4
   89a70:	29000b2e 	bgeu	r5,r4,89aa0 <memmove+0x34>
   89a74:	298f883a 	add	r7,r5,r6
   89a78:	21c0092e 	bgeu	r4,r7,89aa0 <memmove+0x34>
   89a7c:	2187883a 	add	r3,r4,r6
   89a80:	198bc83a 	sub	r5,r3,r6
   89a84:	30004826 	beq	r6,zero,89ba8 <memmove+0x13c>
   89a88:	39ffffc4 	addi	r7,r7,-1
   89a8c:	39000003 	ldbu	r4,0(r7)
   89a90:	18ffffc4 	addi	r3,r3,-1
   89a94:	19000005 	stb	r4,0(r3)
   89a98:	28fffb1e 	bne	r5,r3,89a88 <__alt_data_end+0xfffcb288>
   89a9c:	f800283a 	ret
   89aa0:	00c003c4 	movi	r3,15
   89aa4:	1980412e 	bgeu	r3,r6,89bac <memmove+0x140>
   89aa8:	2886b03a 	or	r3,r5,r2
   89aac:	18c000cc 	andi	r3,r3,3
   89ab0:	1800401e 	bne	r3,zero,89bb4 <memmove+0x148>
   89ab4:	33fffc04 	addi	r15,r6,-16
   89ab8:	781ed13a 	srli	r15,r15,4
   89abc:	28c00104 	addi	r3,r5,4
   89ac0:	13400104 	addi	r13,r2,4
   89ac4:	781c913a 	slli	r14,r15,4
   89ac8:	2b000204 	addi	r12,r5,8
   89acc:	12c00204 	addi	r11,r2,8
   89ad0:	73800504 	addi	r14,r14,20
   89ad4:	2a800304 	addi	r10,r5,12
   89ad8:	12400304 	addi	r9,r2,12
   89adc:	2b9d883a 	add	r14,r5,r14
   89ae0:	2811883a 	mov	r8,r5
   89ae4:	100f883a 	mov	r7,r2
   89ae8:	41000017 	ldw	r4,0(r8)
   89aec:	39c00404 	addi	r7,r7,16
   89af0:	18c00404 	addi	r3,r3,16
   89af4:	393ffc15 	stw	r4,-16(r7)
   89af8:	193ffc17 	ldw	r4,-16(r3)
   89afc:	6b400404 	addi	r13,r13,16
   89b00:	5ac00404 	addi	r11,r11,16
   89b04:	693ffc15 	stw	r4,-16(r13)
   89b08:	61000017 	ldw	r4,0(r12)
   89b0c:	4a400404 	addi	r9,r9,16
   89b10:	42000404 	addi	r8,r8,16
   89b14:	593ffc15 	stw	r4,-16(r11)
   89b18:	51000017 	ldw	r4,0(r10)
   89b1c:	63000404 	addi	r12,r12,16
   89b20:	52800404 	addi	r10,r10,16
   89b24:	493ffc15 	stw	r4,-16(r9)
   89b28:	1bbfef1e 	bne	r3,r14,89ae8 <__alt_data_end+0xfffcb2e8>
   89b2c:	79000044 	addi	r4,r15,1
   89b30:	2008913a 	slli	r4,r4,4
   89b34:	328003cc 	andi	r10,r6,15
   89b38:	02c000c4 	movi	r11,3
   89b3c:	1107883a 	add	r3,r2,r4
   89b40:	290b883a 	add	r5,r5,r4
   89b44:	5a801e2e 	bgeu	r11,r10,89bc0 <memmove+0x154>
   89b48:	1813883a 	mov	r9,r3
   89b4c:	2811883a 	mov	r8,r5
   89b50:	500f883a 	mov	r7,r10
   89b54:	41000017 	ldw	r4,0(r8)
   89b58:	4a400104 	addi	r9,r9,4
   89b5c:	39ffff04 	addi	r7,r7,-4
   89b60:	493fff15 	stw	r4,-4(r9)
   89b64:	42000104 	addi	r8,r8,4
   89b68:	59fffa36 	bltu	r11,r7,89b54 <__alt_data_end+0xfffcb354>
   89b6c:	513fff04 	addi	r4,r10,-4
   89b70:	2008d0ba 	srli	r4,r4,2
   89b74:	318000cc 	andi	r6,r6,3
   89b78:	21000044 	addi	r4,r4,1
   89b7c:	2109883a 	add	r4,r4,r4
   89b80:	2109883a 	add	r4,r4,r4
   89b84:	1907883a 	add	r3,r3,r4
   89b88:	290b883a 	add	r5,r5,r4
   89b8c:	30000b26 	beq	r6,zero,89bbc <memmove+0x150>
   89b90:	198d883a 	add	r6,r3,r6
   89b94:	29c00003 	ldbu	r7,0(r5)
   89b98:	18c00044 	addi	r3,r3,1
   89b9c:	29400044 	addi	r5,r5,1
   89ba0:	19ffffc5 	stb	r7,-1(r3)
   89ba4:	19bffb1e 	bne	r3,r6,89b94 <__alt_data_end+0xfffcb394>
   89ba8:	f800283a 	ret
   89bac:	1007883a 	mov	r3,r2
   89bb0:	003ff606 	br	89b8c <__alt_data_end+0xfffcb38c>
   89bb4:	1007883a 	mov	r3,r2
   89bb8:	003ff506 	br	89b90 <__alt_data_end+0xfffcb390>
   89bbc:	f800283a 	ret
   89bc0:	500d883a 	mov	r6,r10
   89bc4:	003ff106 	br	89b8c <__alt_data_end+0xfffcb38c>

00089bc8 <_read_r>:
   89bc8:	defffd04 	addi	sp,sp,-12
   89bcc:	2805883a 	mov	r2,r5
   89bd0:	dc000015 	stw	r16,0(sp)
   89bd4:	040002b4 	movhi	r16,10
   89bd8:	dc400115 	stw	r17,4(sp)
   89bdc:	300b883a 	mov	r5,r6
   89be0:	842f5904 	addi	r16,r16,-17052
   89be4:	2023883a 	mov	r17,r4
   89be8:	380d883a 	mov	r6,r7
   89bec:	1009883a 	mov	r4,r2
   89bf0:	dfc00215 	stw	ra,8(sp)
   89bf4:	80000015 	stw	zero,0(r16)
   89bf8:	008e2100 	call	8e210 <read>
   89bfc:	00ffffc4 	movi	r3,-1
   89c00:	10c00526 	beq	r2,r3,89c18 <_read_r+0x50>
   89c04:	dfc00217 	ldw	ra,8(sp)
   89c08:	dc400117 	ldw	r17,4(sp)
   89c0c:	dc000017 	ldw	r16,0(sp)
   89c10:	dec00304 	addi	sp,sp,12
   89c14:	f800283a 	ret
   89c18:	80c00017 	ldw	r3,0(r16)
   89c1c:	183ff926 	beq	r3,zero,89c04 <__alt_data_end+0xfffcb404>
   89c20:	88c00015 	stw	r3,0(r17)
   89c24:	003ff706 	br	89c04 <__alt_data_end+0xfffcb404>

00089c28 <_realloc_r>:
   89c28:	defff604 	addi	sp,sp,-40
   89c2c:	dc800215 	stw	r18,8(sp)
   89c30:	dfc00915 	stw	ra,36(sp)
   89c34:	df000815 	stw	fp,32(sp)
   89c38:	ddc00715 	stw	r23,28(sp)
   89c3c:	dd800615 	stw	r22,24(sp)
   89c40:	dd400515 	stw	r21,20(sp)
   89c44:	dd000415 	stw	r20,16(sp)
   89c48:	dcc00315 	stw	r19,12(sp)
   89c4c:	dc400115 	stw	r17,4(sp)
   89c50:	dc000015 	stw	r16,0(sp)
   89c54:	3025883a 	mov	r18,r6
   89c58:	2800b726 	beq	r5,zero,89f38 <_realloc_r+0x310>
   89c5c:	282b883a 	mov	r21,r5
   89c60:	2029883a 	mov	r20,r4
   89c64:	008e6a80 	call	8e6a8 <__malloc_lock>
   89c68:	a8bfff17 	ldw	r2,-4(r21)
   89c6c:	043fff04 	movi	r16,-4
   89c70:	90c002c4 	addi	r3,r18,11
   89c74:	01000584 	movi	r4,22
   89c78:	acfffe04 	addi	r19,r21,-8
   89c7c:	1420703a 	and	r16,r2,r16
   89c80:	20c0332e 	bgeu	r4,r3,89d50 <_realloc_r+0x128>
   89c84:	047ffe04 	movi	r17,-8
   89c88:	1c62703a 	and	r17,r3,r17
   89c8c:	8807883a 	mov	r3,r17
   89c90:	88005816 	blt	r17,zero,89df4 <_realloc_r+0x1cc>
   89c94:	8c805736 	bltu	r17,r18,89df4 <_realloc_r+0x1cc>
   89c98:	80c0300e 	bge	r16,r3,89d5c <_realloc_r+0x134>
   89c9c:	070002b4 	movhi	fp,10
   89ca0:	e722b404 	addi	fp,fp,-30000
   89ca4:	e1c00217 	ldw	r7,8(fp)
   89ca8:	9c09883a 	add	r4,r19,r16
   89cac:	22000117 	ldw	r8,4(r4)
   89cb0:	21c06326 	beq	r4,r7,89e40 <_realloc_r+0x218>
   89cb4:	017fff84 	movi	r5,-2
   89cb8:	414a703a 	and	r5,r8,r5
   89cbc:	214b883a 	add	r5,r4,r5
   89cc0:	29800117 	ldw	r6,4(r5)
   89cc4:	3180004c 	andi	r6,r6,1
   89cc8:	30003f26 	beq	r6,zero,89dc8 <_realloc_r+0x1a0>
   89ccc:	1080004c 	andi	r2,r2,1
   89cd0:	10008326 	beq	r2,zero,89ee0 <_realloc_r+0x2b8>
   89cd4:	900b883a 	mov	r5,r18
   89cd8:	a009883a 	mov	r4,r20
   89cdc:	0085a4c0 	call	85a4c <_malloc_r>
   89ce0:	1025883a 	mov	r18,r2
   89ce4:	10011e26 	beq	r2,zero,8a160 <_realloc_r+0x538>
   89ce8:	a93fff17 	ldw	r4,-4(r21)
   89cec:	10fffe04 	addi	r3,r2,-8
   89cf0:	00bfff84 	movi	r2,-2
   89cf4:	2084703a 	and	r2,r4,r2
   89cf8:	9885883a 	add	r2,r19,r2
   89cfc:	1880ee26 	beq	r3,r2,8a0b8 <_realloc_r+0x490>
   89d00:	81bfff04 	addi	r6,r16,-4
   89d04:	00800904 	movi	r2,36
   89d08:	1180b836 	bltu	r2,r6,89fec <_realloc_r+0x3c4>
   89d0c:	00c004c4 	movi	r3,19
   89d10:	19809636 	bltu	r3,r6,89f6c <_realloc_r+0x344>
   89d14:	9005883a 	mov	r2,r18
   89d18:	a807883a 	mov	r3,r21
   89d1c:	19000017 	ldw	r4,0(r3)
   89d20:	11000015 	stw	r4,0(r2)
   89d24:	19000117 	ldw	r4,4(r3)
   89d28:	11000115 	stw	r4,4(r2)
   89d2c:	18c00217 	ldw	r3,8(r3)
   89d30:	10c00215 	stw	r3,8(r2)
   89d34:	a80b883a 	mov	r5,r21
   89d38:	a009883a 	mov	r4,r20
   89d3c:	008531c0 	call	8531c <_free_r>
   89d40:	a009883a 	mov	r4,r20
   89d44:	008e7c80 	call	8e7c8 <__malloc_unlock>
   89d48:	9005883a 	mov	r2,r18
   89d4c:	00001206 	br	89d98 <_realloc_r+0x170>
   89d50:	00c00404 	movi	r3,16
   89d54:	1823883a 	mov	r17,r3
   89d58:	003fce06 	br	89c94 <__alt_data_end+0xfffcb494>
   89d5c:	a825883a 	mov	r18,r21
   89d60:	8445c83a 	sub	r2,r16,r17
   89d64:	00c003c4 	movi	r3,15
   89d68:	18802636 	bltu	r3,r2,89e04 <_realloc_r+0x1dc>
   89d6c:	99800117 	ldw	r6,4(r19)
   89d70:	9c07883a 	add	r3,r19,r16
   89d74:	3180004c 	andi	r6,r6,1
   89d78:	3420b03a 	or	r16,r6,r16
   89d7c:	9c000115 	stw	r16,4(r19)
   89d80:	18800117 	ldw	r2,4(r3)
   89d84:	10800054 	ori	r2,r2,1
   89d88:	18800115 	stw	r2,4(r3)
   89d8c:	a009883a 	mov	r4,r20
   89d90:	008e7c80 	call	8e7c8 <__malloc_unlock>
   89d94:	9005883a 	mov	r2,r18
   89d98:	dfc00917 	ldw	ra,36(sp)
   89d9c:	df000817 	ldw	fp,32(sp)
   89da0:	ddc00717 	ldw	r23,28(sp)
   89da4:	dd800617 	ldw	r22,24(sp)
   89da8:	dd400517 	ldw	r21,20(sp)
   89dac:	dd000417 	ldw	r20,16(sp)
   89db0:	dcc00317 	ldw	r19,12(sp)
   89db4:	dc800217 	ldw	r18,8(sp)
   89db8:	dc400117 	ldw	r17,4(sp)
   89dbc:	dc000017 	ldw	r16,0(sp)
   89dc0:	dec00a04 	addi	sp,sp,40
   89dc4:	f800283a 	ret
   89dc8:	017fff04 	movi	r5,-4
   89dcc:	414a703a 	and	r5,r8,r5
   89dd0:	814d883a 	add	r6,r16,r5
   89dd4:	30c01f16 	blt	r6,r3,89e54 <_realloc_r+0x22c>
   89dd8:	20800317 	ldw	r2,12(r4)
   89ddc:	20c00217 	ldw	r3,8(r4)
   89de0:	a825883a 	mov	r18,r21
   89de4:	3021883a 	mov	r16,r6
   89de8:	18800315 	stw	r2,12(r3)
   89dec:	10c00215 	stw	r3,8(r2)
   89df0:	003fdb06 	br	89d60 <__alt_data_end+0xfffcb560>
   89df4:	00800304 	movi	r2,12
   89df8:	a0800015 	stw	r2,0(r20)
   89dfc:	0005883a 	mov	r2,zero
   89e00:	003fe506 	br	89d98 <__alt_data_end+0xfffcb598>
   89e04:	98c00117 	ldw	r3,4(r19)
   89e08:	9c4b883a 	add	r5,r19,r17
   89e0c:	11000054 	ori	r4,r2,1
   89e10:	18c0004c 	andi	r3,r3,1
   89e14:	1c62b03a 	or	r17,r3,r17
   89e18:	9c400115 	stw	r17,4(r19)
   89e1c:	29000115 	stw	r4,4(r5)
   89e20:	2885883a 	add	r2,r5,r2
   89e24:	10c00117 	ldw	r3,4(r2)
   89e28:	29400204 	addi	r5,r5,8
   89e2c:	a009883a 	mov	r4,r20
   89e30:	18c00054 	ori	r3,r3,1
   89e34:	10c00115 	stw	r3,4(r2)
   89e38:	008531c0 	call	8531c <_free_r>
   89e3c:	003fd306 	br	89d8c <__alt_data_end+0xfffcb58c>
   89e40:	017fff04 	movi	r5,-4
   89e44:	414a703a 	and	r5,r8,r5
   89e48:	89800404 	addi	r6,r17,16
   89e4c:	8151883a 	add	r8,r16,r5
   89e50:	4180590e 	bge	r8,r6,89fb8 <_realloc_r+0x390>
   89e54:	1080004c 	andi	r2,r2,1
   89e58:	103f9e1e 	bne	r2,zero,89cd4 <__alt_data_end+0xfffcb4d4>
   89e5c:	adbffe17 	ldw	r22,-8(r21)
   89e60:	00bfff04 	movi	r2,-4
   89e64:	9dadc83a 	sub	r22,r19,r22
   89e68:	b1800117 	ldw	r6,4(r22)
   89e6c:	3084703a 	and	r2,r6,r2
   89e70:	20002026 	beq	r4,zero,89ef4 <_realloc_r+0x2cc>
   89e74:	80af883a 	add	r23,r16,r2
   89e78:	b96f883a 	add	r23,r23,r5
   89e7c:	21c05f26 	beq	r4,r7,89ffc <_realloc_r+0x3d4>
   89e80:	b8c01c16 	blt	r23,r3,89ef4 <_realloc_r+0x2cc>
   89e84:	20800317 	ldw	r2,12(r4)
   89e88:	20c00217 	ldw	r3,8(r4)
   89e8c:	81bfff04 	addi	r6,r16,-4
   89e90:	01000904 	movi	r4,36
   89e94:	18800315 	stw	r2,12(r3)
   89e98:	10c00215 	stw	r3,8(r2)
   89e9c:	b0c00217 	ldw	r3,8(r22)
   89ea0:	b0800317 	ldw	r2,12(r22)
   89ea4:	b4800204 	addi	r18,r22,8
   89ea8:	18800315 	stw	r2,12(r3)
   89eac:	10c00215 	stw	r3,8(r2)
   89eb0:	21801b36 	bltu	r4,r6,89f20 <_realloc_r+0x2f8>
   89eb4:	008004c4 	movi	r2,19
   89eb8:	1180352e 	bgeu	r2,r6,89f90 <_realloc_r+0x368>
   89ebc:	a8800017 	ldw	r2,0(r21)
   89ec0:	b0800215 	stw	r2,8(r22)
   89ec4:	a8800117 	ldw	r2,4(r21)
   89ec8:	b0800315 	stw	r2,12(r22)
   89ecc:	008006c4 	movi	r2,27
   89ed0:	11807f36 	bltu	r2,r6,8a0d0 <_realloc_r+0x4a8>
   89ed4:	b0800404 	addi	r2,r22,16
   89ed8:	ad400204 	addi	r21,r21,8
   89edc:	00002d06 	br	89f94 <_realloc_r+0x36c>
   89ee0:	adbffe17 	ldw	r22,-8(r21)
   89ee4:	00bfff04 	movi	r2,-4
   89ee8:	9dadc83a 	sub	r22,r19,r22
   89eec:	b1000117 	ldw	r4,4(r22)
   89ef0:	2084703a 	and	r2,r4,r2
   89ef4:	b03f7726 	beq	r22,zero,89cd4 <__alt_data_end+0xfffcb4d4>
   89ef8:	80af883a 	add	r23,r16,r2
   89efc:	b8ff7516 	blt	r23,r3,89cd4 <__alt_data_end+0xfffcb4d4>
   89f00:	b0800317 	ldw	r2,12(r22)
   89f04:	b0c00217 	ldw	r3,8(r22)
   89f08:	81bfff04 	addi	r6,r16,-4
   89f0c:	01000904 	movi	r4,36
   89f10:	18800315 	stw	r2,12(r3)
   89f14:	10c00215 	stw	r3,8(r2)
   89f18:	b4800204 	addi	r18,r22,8
   89f1c:	21bfe52e 	bgeu	r4,r6,89eb4 <__alt_data_end+0xfffcb6b4>
   89f20:	a80b883a 	mov	r5,r21
   89f24:	9009883a 	mov	r4,r18
   89f28:	0089a6c0 	call	89a6c <memmove>
   89f2c:	b821883a 	mov	r16,r23
   89f30:	b027883a 	mov	r19,r22
   89f34:	003f8a06 	br	89d60 <__alt_data_end+0xfffcb560>
   89f38:	300b883a 	mov	r5,r6
   89f3c:	dfc00917 	ldw	ra,36(sp)
   89f40:	df000817 	ldw	fp,32(sp)
   89f44:	ddc00717 	ldw	r23,28(sp)
   89f48:	dd800617 	ldw	r22,24(sp)
   89f4c:	dd400517 	ldw	r21,20(sp)
   89f50:	dd000417 	ldw	r20,16(sp)
   89f54:	dcc00317 	ldw	r19,12(sp)
   89f58:	dc800217 	ldw	r18,8(sp)
   89f5c:	dc400117 	ldw	r17,4(sp)
   89f60:	dc000017 	ldw	r16,0(sp)
   89f64:	dec00a04 	addi	sp,sp,40
   89f68:	0085a4c1 	jmpi	85a4c <_malloc_r>
   89f6c:	a8c00017 	ldw	r3,0(r21)
   89f70:	90c00015 	stw	r3,0(r18)
   89f74:	a8c00117 	ldw	r3,4(r21)
   89f78:	90c00115 	stw	r3,4(r18)
   89f7c:	00c006c4 	movi	r3,27
   89f80:	19804536 	bltu	r3,r6,8a098 <_realloc_r+0x470>
   89f84:	90800204 	addi	r2,r18,8
   89f88:	a8c00204 	addi	r3,r21,8
   89f8c:	003f6306 	br	89d1c <__alt_data_end+0xfffcb51c>
   89f90:	9005883a 	mov	r2,r18
   89f94:	a8c00017 	ldw	r3,0(r21)
   89f98:	b821883a 	mov	r16,r23
   89f9c:	b027883a 	mov	r19,r22
   89fa0:	10c00015 	stw	r3,0(r2)
   89fa4:	a8c00117 	ldw	r3,4(r21)
   89fa8:	10c00115 	stw	r3,4(r2)
   89fac:	a8c00217 	ldw	r3,8(r21)
   89fb0:	10c00215 	stw	r3,8(r2)
   89fb4:	003f6a06 	br	89d60 <__alt_data_end+0xfffcb560>
   89fb8:	9c67883a 	add	r19,r19,r17
   89fbc:	4445c83a 	sub	r2,r8,r17
   89fc0:	e4c00215 	stw	r19,8(fp)
   89fc4:	10800054 	ori	r2,r2,1
   89fc8:	98800115 	stw	r2,4(r19)
   89fcc:	a8bfff17 	ldw	r2,-4(r21)
   89fd0:	a009883a 	mov	r4,r20
   89fd4:	1080004c 	andi	r2,r2,1
   89fd8:	1462b03a 	or	r17,r2,r17
   89fdc:	ac7fff15 	stw	r17,-4(r21)
   89fe0:	008e7c80 	call	8e7c8 <__malloc_unlock>
   89fe4:	a805883a 	mov	r2,r21
   89fe8:	003f6b06 	br	89d98 <__alt_data_end+0xfffcb598>
   89fec:	a80b883a 	mov	r5,r21
   89ff0:	9009883a 	mov	r4,r18
   89ff4:	0089a6c0 	call	89a6c <memmove>
   89ff8:	003f4e06 	br	89d34 <__alt_data_end+0xfffcb534>
   89ffc:	89000404 	addi	r4,r17,16
   8a000:	b93fbc16 	blt	r23,r4,89ef4 <__alt_data_end+0xfffcb6f4>
   8a004:	b0800317 	ldw	r2,12(r22)
   8a008:	b0c00217 	ldw	r3,8(r22)
   8a00c:	81bfff04 	addi	r6,r16,-4
   8a010:	01000904 	movi	r4,36
   8a014:	18800315 	stw	r2,12(r3)
   8a018:	10c00215 	stw	r3,8(r2)
   8a01c:	b4800204 	addi	r18,r22,8
   8a020:	21804336 	bltu	r4,r6,8a130 <_realloc_r+0x508>
   8a024:	008004c4 	movi	r2,19
   8a028:	11803f2e 	bgeu	r2,r6,8a128 <_realloc_r+0x500>
   8a02c:	a8800017 	ldw	r2,0(r21)
   8a030:	b0800215 	stw	r2,8(r22)
   8a034:	a8800117 	ldw	r2,4(r21)
   8a038:	b0800315 	stw	r2,12(r22)
   8a03c:	008006c4 	movi	r2,27
   8a040:	11803f36 	bltu	r2,r6,8a140 <_realloc_r+0x518>
   8a044:	b0800404 	addi	r2,r22,16
   8a048:	ad400204 	addi	r21,r21,8
   8a04c:	a8c00017 	ldw	r3,0(r21)
   8a050:	10c00015 	stw	r3,0(r2)
   8a054:	a8c00117 	ldw	r3,4(r21)
   8a058:	10c00115 	stw	r3,4(r2)
   8a05c:	a8c00217 	ldw	r3,8(r21)
   8a060:	10c00215 	stw	r3,8(r2)
   8a064:	b447883a 	add	r3,r22,r17
   8a068:	bc45c83a 	sub	r2,r23,r17
   8a06c:	e0c00215 	stw	r3,8(fp)
   8a070:	10800054 	ori	r2,r2,1
   8a074:	18800115 	stw	r2,4(r3)
   8a078:	b0800117 	ldw	r2,4(r22)
   8a07c:	a009883a 	mov	r4,r20
   8a080:	1080004c 	andi	r2,r2,1
   8a084:	1462b03a 	or	r17,r2,r17
   8a088:	b4400115 	stw	r17,4(r22)
   8a08c:	008e7c80 	call	8e7c8 <__malloc_unlock>
   8a090:	9005883a 	mov	r2,r18
   8a094:	003f4006 	br	89d98 <__alt_data_end+0xfffcb598>
   8a098:	a8c00217 	ldw	r3,8(r21)
   8a09c:	90c00215 	stw	r3,8(r18)
   8a0a0:	a8c00317 	ldw	r3,12(r21)
   8a0a4:	90c00315 	stw	r3,12(r18)
   8a0a8:	30801126 	beq	r6,r2,8a0f0 <_realloc_r+0x4c8>
   8a0ac:	90800404 	addi	r2,r18,16
   8a0b0:	a8c00404 	addi	r3,r21,16
   8a0b4:	003f1906 	br	89d1c <__alt_data_end+0xfffcb51c>
   8a0b8:	90ffff17 	ldw	r3,-4(r18)
   8a0bc:	00bfff04 	movi	r2,-4
   8a0c0:	a825883a 	mov	r18,r21
   8a0c4:	1884703a 	and	r2,r3,r2
   8a0c8:	80a1883a 	add	r16,r16,r2
   8a0cc:	003f2406 	br	89d60 <__alt_data_end+0xfffcb560>
   8a0d0:	a8800217 	ldw	r2,8(r21)
   8a0d4:	b0800415 	stw	r2,16(r22)
   8a0d8:	a8800317 	ldw	r2,12(r21)
   8a0dc:	b0800515 	stw	r2,20(r22)
   8a0e0:	31000a26 	beq	r6,r4,8a10c <_realloc_r+0x4e4>
   8a0e4:	b0800604 	addi	r2,r22,24
   8a0e8:	ad400404 	addi	r21,r21,16
   8a0ec:	003fa906 	br	89f94 <__alt_data_end+0xfffcb794>
   8a0f0:	a9000417 	ldw	r4,16(r21)
   8a0f4:	90800604 	addi	r2,r18,24
   8a0f8:	a8c00604 	addi	r3,r21,24
   8a0fc:	91000415 	stw	r4,16(r18)
   8a100:	a9000517 	ldw	r4,20(r21)
   8a104:	91000515 	stw	r4,20(r18)
   8a108:	003f0406 	br	89d1c <__alt_data_end+0xfffcb51c>
   8a10c:	a8c00417 	ldw	r3,16(r21)
   8a110:	ad400604 	addi	r21,r21,24
   8a114:	b0800804 	addi	r2,r22,32
   8a118:	b0c00615 	stw	r3,24(r22)
   8a11c:	a8ffff17 	ldw	r3,-4(r21)
   8a120:	b0c00715 	stw	r3,28(r22)
   8a124:	003f9b06 	br	89f94 <__alt_data_end+0xfffcb794>
   8a128:	9005883a 	mov	r2,r18
   8a12c:	003fc706 	br	8a04c <__alt_data_end+0xfffcb84c>
   8a130:	a80b883a 	mov	r5,r21
   8a134:	9009883a 	mov	r4,r18
   8a138:	0089a6c0 	call	89a6c <memmove>
   8a13c:	003fc906 	br	8a064 <__alt_data_end+0xfffcb864>
   8a140:	a8800217 	ldw	r2,8(r21)
   8a144:	b0800415 	stw	r2,16(r22)
   8a148:	a8800317 	ldw	r2,12(r21)
   8a14c:	b0800515 	stw	r2,20(r22)
   8a150:	31000726 	beq	r6,r4,8a170 <_realloc_r+0x548>
   8a154:	b0800604 	addi	r2,r22,24
   8a158:	ad400404 	addi	r21,r21,16
   8a15c:	003fbb06 	br	8a04c <__alt_data_end+0xfffcb84c>
   8a160:	a009883a 	mov	r4,r20
   8a164:	008e7c80 	call	8e7c8 <__malloc_unlock>
   8a168:	0005883a 	mov	r2,zero
   8a16c:	003f0a06 	br	89d98 <__alt_data_end+0xfffcb598>
   8a170:	a8c00417 	ldw	r3,16(r21)
   8a174:	ad400604 	addi	r21,r21,24
   8a178:	b0800804 	addi	r2,r22,32
   8a17c:	b0c00615 	stw	r3,24(r22)
   8a180:	a8ffff17 	ldw	r3,-4(r21)
   8a184:	b0c00715 	stw	r3,28(r22)
   8a188:	003fb006 	br	8a04c <__alt_data_end+0xfffcb84c>

0008a18c <__swbuf_r>:
   8a18c:	defffb04 	addi	sp,sp,-20
   8a190:	dcc00315 	stw	r19,12(sp)
   8a194:	dc800215 	stw	r18,8(sp)
   8a198:	dc000015 	stw	r16,0(sp)
   8a19c:	dfc00415 	stw	ra,16(sp)
   8a1a0:	dc400115 	stw	r17,4(sp)
   8a1a4:	2025883a 	mov	r18,r4
   8a1a8:	2827883a 	mov	r19,r5
   8a1ac:	3021883a 	mov	r16,r6
   8a1b0:	20000226 	beq	r4,zero,8a1bc <__swbuf_r+0x30>
   8a1b4:	20800e17 	ldw	r2,56(r4)
   8a1b8:	10004226 	beq	r2,zero,8a2c4 <__swbuf_r+0x138>
   8a1bc:	80800617 	ldw	r2,24(r16)
   8a1c0:	8100030b 	ldhu	r4,12(r16)
   8a1c4:	80800215 	stw	r2,8(r16)
   8a1c8:	2080020c 	andi	r2,r4,8
   8a1cc:	10003626 	beq	r2,zero,8a2a8 <__swbuf_r+0x11c>
   8a1d0:	80c00417 	ldw	r3,16(r16)
   8a1d4:	18003426 	beq	r3,zero,8a2a8 <__swbuf_r+0x11c>
   8a1d8:	2088000c 	andi	r2,r4,8192
   8a1dc:	9c403fcc 	andi	r17,r19,255
   8a1e0:	10001a26 	beq	r2,zero,8a24c <__swbuf_r+0xc0>
   8a1e4:	80800017 	ldw	r2,0(r16)
   8a1e8:	81000517 	ldw	r4,20(r16)
   8a1ec:	10c7c83a 	sub	r3,r2,r3
   8a1f0:	1900200e 	bge	r3,r4,8a274 <__swbuf_r+0xe8>
   8a1f4:	18c00044 	addi	r3,r3,1
   8a1f8:	81000217 	ldw	r4,8(r16)
   8a1fc:	11400044 	addi	r5,r2,1
   8a200:	81400015 	stw	r5,0(r16)
   8a204:	213fffc4 	addi	r4,r4,-1
   8a208:	81000215 	stw	r4,8(r16)
   8a20c:	14c00005 	stb	r19,0(r2)
   8a210:	80800517 	ldw	r2,20(r16)
   8a214:	10c01e26 	beq	r2,r3,8a290 <__swbuf_r+0x104>
   8a218:	8080030b 	ldhu	r2,12(r16)
   8a21c:	1080004c 	andi	r2,r2,1
   8a220:	10000226 	beq	r2,zero,8a22c <__swbuf_r+0xa0>
   8a224:	00800284 	movi	r2,10
   8a228:	88801926 	beq	r17,r2,8a290 <__swbuf_r+0x104>
   8a22c:	8805883a 	mov	r2,r17
   8a230:	dfc00417 	ldw	ra,16(sp)
   8a234:	dcc00317 	ldw	r19,12(sp)
   8a238:	dc800217 	ldw	r18,8(sp)
   8a23c:	dc400117 	ldw	r17,4(sp)
   8a240:	dc000017 	ldw	r16,0(sp)
   8a244:	dec00504 	addi	sp,sp,20
   8a248:	f800283a 	ret
   8a24c:	81401917 	ldw	r5,100(r16)
   8a250:	00b7ffc4 	movi	r2,-8193
   8a254:	21080014 	ori	r4,r4,8192
   8a258:	2884703a 	and	r2,r5,r2
   8a25c:	80801915 	stw	r2,100(r16)
   8a260:	80800017 	ldw	r2,0(r16)
   8a264:	8100030d 	sth	r4,12(r16)
   8a268:	81000517 	ldw	r4,20(r16)
   8a26c:	10c7c83a 	sub	r3,r2,r3
   8a270:	193fe016 	blt	r3,r4,8a1f4 <__alt_data_end+0xfffcb9f4>
   8a274:	800b883a 	mov	r5,r16
   8a278:	9009883a 	mov	r4,r18
   8a27c:	0084dbc0 	call	84dbc <_fflush_r>
   8a280:	1000071e 	bne	r2,zero,8a2a0 <__swbuf_r+0x114>
   8a284:	80800017 	ldw	r2,0(r16)
   8a288:	00c00044 	movi	r3,1
   8a28c:	003fda06 	br	8a1f8 <__alt_data_end+0xfffcb9f8>
   8a290:	800b883a 	mov	r5,r16
   8a294:	9009883a 	mov	r4,r18
   8a298:	0084dbc0 	call	84dbc <_fflush_r>
   8a29c:	103fe326 	beq	r2,zero,8a22c <__alt_data_end+0xfffcba2c>
   8a2a0:	00bfffc4 	movi	r2,-1
   8a2a4:	003fe206 	br	8a230 <__alt_data_end+0xfffcba30>
   8a2a8:	800b883a 	mov	r5,r16
   8a2ac:	9009883a 	mov	r4,r18
   8a2b0:	008319c0 	call	8319c <__swsetup_r>
   8a2b4:	103ffa1e 	bne	r2,zero,8a2a0 <__alt_data_end+0xfffcbaa0>
   8a2b8:	8100030b 	ldhu	r4,12(r16)
   8a2bc:	80c00417 	ldw	r3,16(r16)
   8a2c0:	003fc506 	br	8a1d8 <__alt_data_end+0xfffcb9d8>
   8a2c4:	00851a80 	call	851a8 <__sinit>
   8a2c8:	003fbc06 	br	8a1bc <__alt_data_end+0xfffcb9bc>

0008a2cc <__swbuf>:
   8a2cc:	008002b4 	movhi	r2,10
   8a2d0:	10a83d04 	addi	r2,r2,-24332
   8a2d4:	280d883a 	mov	r6,r5
   8a2d8:	200b883a 	mov	r5,r4
   8a2dc:	11000017 	ldw	r4,0(r2)
   8a2e0:	008a18c1 	jmpi	8a18c <__swbuf_r>

0008a2e4 <_wcrtomb_r>:
   8a2e4:	defff604 	addi	sp,sp,-40
   8a2e8:	008002b4 	movhi	r2,10
   8a2ec:	dc800815 	stw	r18,32(sp)
   8a2f0:	dc400715 	stw	r17,28(sp)
   8a2f4:	dc000615 	stw	r16,24(sp)
   8a2f8:	10a84104 	addi	r2,r2,-24316
   8a2fc:	dfc00915 	stw	ra,36(sp)
   8a300:	2021883a 	mov	r16,r4
   8a304:	3823883a 	mov	r17,r7
   8a308:	14800017 	ldw	r18,0(r2)
   8a30c:	28001426 	beq	r5,zero,8a360 <_wcrtomb_r+0x7c>
   8a310:	d9400415 	stw	r5,16(sp)
   8a314:	d9800515 	stw	r6,20(sp)
   8a318:	00858300 	call	85830 <__locale_charset>
   8a31c:	d9800517 	ldw	r6,20(sp)
   8a320:	d9400417 	ldw	r5,16(sp)
   8a324:	100f883a 	mov	r7,r2
   8a328:	dc400015 	stw	r17,0(sp)
   8a32c:	8009883a 	mov	r4,r16
   8a330:	903ee83a 	callr	r18
   8a334:	00ffffc4 	movi	r3,-1
   8a338:	10c0031e 	bne	r2,r3,8a348 <_wcrtomb_r+0x64>
   8a33c:	88000015 	stw	zero,0(r17)
   8a340:	00c02284 	movi	r3,138
   8a344:	80c00015 	stw	r3,0(r16)
   8a348:	dfc00917 	ldw	ra,36(sp)
   8a34c:	dc800817 	ldw	r18,32(sp)
   8a350:	dc400717 	ldw	r17,28(sp)
   8a354:	dc000617 	ldw	r16,24(sp)
   8a358:	dec00a04 	addi	sp,sp,40
   8a35c:	f800283a 	ret
   8a360:	00858300 	call	85830 <__locale_charset>
   8a364:	100f883a 	mov	r7,r2
   8a368:	dc400015 	stw	r17,0(sp)
   8a36c:	000d883a 	mov	r6,zero
   8a370:	d9400104 	addi	r5,sp,4
   8a374:	8009883a 	mov	r4,r16
   8a378:	903ee83a 	callr	r18
   8a37c:	003fed06 	br	8a334 <__alt_data_end+0xfffcbb34>

0008a380 <wcrtomb>:
   8a380:	defff604 	addi	sp,sp,-40
   8a384:	008002b4 	movhi	r2,10
   8a388:	dc800615 	stw	r18,24(sp)
   8a38c:	dc400515 	stw	r17,20(sp)
   8a390:	10a83d04 	addi	r2,r2,-24332
   8a394:	dfc00915 	stw	ra,36(sp)
   8a398:	dd000815 	stw	r20,32(sp)
   8a39c:	dcc00715 	stw	r19,28(sp)
   8a3a0:	dc000415 	stw	r16,16(sp)
   8a3a4:	3025883a 	mov	r18,r6
   8a3a8:	14400017 	ldw	r17,0(r2)
   8a3ac:	20001926 	beq	r4,zero,8a414 <wcrtomb+0x94>
   8a3b0:	008002b4 	movhi	r2,10
   8a3b4:	10a84104 	addi	r2,r2,-24316
   8a3b8:	15000017 	ldw	r20,0(r2)
   8a3bc:	2021883a 	mov	r16,r4
   8a3c0:	2827883a 	mov	r19,r5
   8a3c4:	00858300 	call	85830 <__locale_charset>
   8a3c8:	100f883a 	mov	r7,r2
   8a3cc:	dc800015 	stw	r18,0(sp)
   8a3d0:	980d883a 	mov	r6,r19
   8a3d4:	800b883a 	mov	r5,r16
   8a3d8:	8809883a 	mov	r4,r17
   8a3dc:	a03ee83a 	callr	r20
   8a3e0:	00ffffc4 	movi	r3,-1
   8a3e4:	10c0031e 	bne	r2,r3,8a3f4 <wcrtomb+0x74>
   8a3e8:	90000015 	stw	zero,0(r18)
   8a3ec:	00c02284 	movi	r3,138
   8a3f0:	88c00015 	stw	r3,0(r17)
   8a3f4:	dfc00917 	ldw	ra,36(sp)
   8a3f8:	dd000817 	ldw	r20,32(sp)
   8a3fc:	dcc00717 	ldw	r19,28(sp)
   8a400:	dc800617 	ldw	r18,24(sp)
   8a404:	dc400517 	ldw	r17,20(sp)
   8a408:	dc000417 	ldw	r16,16(sp)
   8a40c:	dec00a04 	addi	sp,sp,40
   8a410:	f800283a 	ret
   8a414:	008002b4 	movhi	r2,10
   8a418:	10a84104 	addi	r2,r2,-24316
   8a41c:	14000017 	ldw	r16,0(r2)
   8a420:	00858300 	call	85830 <__locale_charset>
   8a424:	100f883a 	mov	r7,r2
   8a428:	dc800015 	stw	r18,0(sp)
   8a42c:	000d883a 	mov	r6,zero
   8a430:	d9400104 	addi	r5,sp,4
   8a434:	8809883a 	mov	r4,r17
   8a438:	803ee83a 	callr	r16
   8a43c:	003fe806 	br	8a3e0 <__alt_data_end+0xfffcbbe0>

0008a440 <__ascii_wctomb>:
   8a440:	28000526 	beq	r5,zero,8a458 <__ascii_wctomb+0x18>
   8a444:	00803fc4 	movi	r2,255
   8a448:	11800536 	bltu	r2,r6,8a460 <__ascii_wctomb+0x20>
   8a44c:	29800005 	stb	r6,0(r5)
   8a450:	00800044 	movi	r2,1
   8a454:	f800283a 	ret
   8a458:	0005883a 	mov	r2,zero
   8a45c:	f800283a 	ret
   8a460:	00802284 	movi	r2,138
   8a464:	20800015 	stw	r2,0(r4)
   8a468:	00bfffc4 	movi	r2,-1
   8a46c:	f800283a 	ret

0008a470 <_wctomb_r>:
   8a470:	008002b4 	movhi	r2,10
   8a474:	defff904 	addi	sp,sp,-28
   8a478:	10a84104 	addi	r2,r2,-24316
   8a47c:	dfc00615 	stw	ra,24(sp)
   8a480:	dc400515 	stw	r17,20(sp)
   8a484:	dc000415 	stw	r16,16(sp)
   8a488:	3823883a 	mov	r17,r7
   8a48c:	14000017 	ldw	r16,0(r2)
   8a490:	d9000115 	stw	r4,4(sp)
   8a494:	d9400215 	stw	r5,8(sp)
   8a498:	d9800315 	stw	r6,12(sp)
   8a49c:	00858300 	call	85830 <__locale_charset>
   8a4a0:	d9800317 	ldw	r6,12(sp)
   8a4a4:	d9400217 	ldw	r5,8(sp)
   8a4a8:	d9000117 	ldw	r4,4(sp)
   8a4ac:	100f883a 	mov	r7,r2
   8a4b0:	dc400015 	stw	r17,0(sp)
   8a4b4:	803ee83a 	callr	r16
   8a4b8:	dfc00617 	ldw	ra,24(sp)
   8a4bc:	dc400517 	ldw	r17,20(sp)
   8a4c0:	dc000417 	ldw	r16,16(sp)
   8a4c4:	dec00704 	addi	sp,sp,28
   8a4c8:	f800283a 	ret

0008a4cc <__udivdi3>:
   8a4cc:	defff404 	addi	sp,sp,-48
   8a4d0:	dcc00515 	stw	r19,20(sp)
   8a4d4:	dc000215 	stw	r16,8(sp)
   8a4d8:	dfc00b15 	stw	ra,44(sp)
   8a4dc:	df000a15 	stw	fp,40(sp)
   8a4e0:	ddc00915 	stw	r23,36(sp)
   8a4e4:	dd800815 	stw	r22,32(sp)
   8a4e8:	dd400715 	stw	r21,28(sp)
   8a4ec:	dd000615 	stw	r20,24(sp)
   8a4f0:	dc800415 	stw	r18,16(sp)
   8a4f4:	dc400315 	stw	r17,12(sp)
   8a4f8:	2027883a 	mov	r19,r4
   8a4fc:	2821883a 	mov	r16,r5
   8a500:	3800461e 	bne	r7,zero,8a61c <__udivdi3+0x150>
   8a504:	3023883a 	mov	r17,r6
   8a508:	2025883a 	mov	r18,r4
   8a50c:	2980572e 	bgeu	r5,r6,8a66c <__udivdi3+0x1a0>
   8a510:	00bfffd4 	movui	r2,65535
   8a514:	282d883a 	mov	r22,r5
   8a518:	1180b236 	bltu	r2,r6,8a7e4 <__udivdi3+0x318>
   8a51c:	00803fc4 	movi	r2,255
   8a520:	1185803a 	cmpltu	r2,r2,r6
   8a524:	100490fa 	slli	r2,r2,3
   8a528:	3086d83a 	srl	r3,r6,r2
   8a52c:	010002b4 	movhi	r4,10
   8a530:	2120f704 	addi	r4,r4,-31780
   8a534:	20c7883a 	add	r3,r4,r3
   8a538:	18c00003 	ldbu	r3,0(r3)
   8a53c:	1885883a 	add	r2,r3,r2
   8a540:	00c00804 	movi	r3,32
   8a544:	1887c83a 	sub	r3,r3,r2
   8a548:	18000526 	beq	r3,zero,8a560 <__udivdi3+0x94>
   8a54c:	80e0983a 	sll	r16,r16,r3
   8a550:	9884d83a 	srl	r2,r19,r2
   8a554:	30e2983a 	sll	r17,r6,r3
   8a558:	98e4983a 	sll	r18,r19,r3
   8a55c:	142cb03a 	or	r22,r2,r16
   8a560:	882ad43a 	srli	r21,r17,16
   8a564:	b009883a 	mov	r4,r22
   8a568:	8d3fffcc 	andi	r20,r17,65535
   8a56c:	a80b883a 	mov	r5,r21
   8a570:	0080b900 	call	80b90 <__umodsi3>
   8a574:	b009883a 	mov	r4,r22
   8a578:	a80b883a 	mov	r5,r21
   8a57c:	1027883a 	mov	r19,r2
   8a580:	0080b2c0 	call	80b2c <__udivsi3>
   8a584:	100b883a 	mov	r5,r2
   8a588:	a009883a 	mov	r4,r20
   8a58c:	102d883a 	mov	r22,r2
   8a590:	008b08c0 	call	8b08c <__mulsi3>
   8a594:	9826943a 	slli	r19,r19,16
   8a598:	9006d43a 	srli	r3,r18,16
   8a59c:	1cc6b03a 	or	r3,r3,r19
   8a5a0:	1880052e 	bgeu	r3,r2,8a5b8 <__udivdi3+0xec>
   8a5a4:	1c47883a 	add	r3,r3,r17
   8a5a8:	b13fffc4 	addi	r4,r22,-1
   8a5ac:	1c400136 	bltu	r3,r17,8a5b4 <__udivdi3+0xe8>
   8a5b0:	18814236 	bltu	r3,r2,8aabc <__udivdi3+0x5f0>
   8a5b4:	202d883a 	mov	r22,r4
   8a5b8:	18a1c83a 	sub	r16,r3,r2
   8a5bc:	8009883a 	mov	r4,r16
   8a5c0:	a80b883a 	mov	r5,r21
   8a5c4:	0080b900 	call	80b90 <__umodsi3>
   8a5c8:	1027883a 	mov	r19,r2
   8a5cc:	8009883a 	mov	r4,r16
   8a5d0:	a80b883a 	mov	r5,r21
   8a5d4:	9826943a 	slli	r19,r19,16
   8a5d8:	0080b2c0 	call	80b2c <__udivsi3>
   8a5dc:	100b883a 	mov	r5,r2
   8a5e0:	a009883a 	mov	r4,r20
   8a5e4:	94bfffcc 	andi	r18,r18,65535
   8a5e8:	1021883a 	mov	r16,r2
   8a5ec:	94e4b03a 	or	r18,r18,r19
   8a5f0:	008b08c0 	call	8b08c <__mulsi3>
   8a5f4:	9080052e 	bgeu	r18,r2,8a60c <__udivdi3+0x140>
   8a5f8:	8ca5883a 	add	r18,r17,r18
   8a5fc:	80ffffc4 	addi	r3,r16,-1
   8a600:	94410c36 	bltu	r18,r17,8aa34 <__udivdi3+0x568>
   8a604:	90810b2e 	bgeu	r18,r2,8aa34 <__udivdi3+0x568>
   8a608:	843fff84 	addi	r16,r16,-2
   8a60c:	b004943a 	slli	r2,r22,16
   8a610:	0007883a 	mov	r3,zero
   8a614:	1404b03a 	or	r2,r2,r16
   8a618:	00005e06 	br	8a794 <__udivdi3+0x2c8>
   8a61c:	29c05b36 	bltu	r5,r7,8a78c <__udivdi3+0x2c0>
   8a620:	00bfffd4 	movui	r2,65535
   8a624:	11c0672e 	bgeu	r2,r7,8a7c4 <__udivdi3+0x2f8>
   8a628:	00804034 	movhi	r2,256
   8a62c:	10bfffc4 	addi	r2,r2,-1
   8a630:	11c10a36 	bltu	r2,r7,8aa5c <__udivdi3+0x590>
   8a634:	00800404 	movi	r2,16
   8a638:	3886d83a 	srl	r3,r7,r2
   8a63c:	010002b4 	movhi	r4,10
   8a640:	2120f704 	addi	r4,r4,-31780
   8a644:	20c7883a 	add	r3,r4,r3
   8a648:	18c00003 	ldbu	r3,0(r3)
   8a64c:	05c00804 	movi	r23,32
   8a650:	1885883a 	add	r2,r3,r2
   8a654:	b8afc83a 	sub	r23,r23,r2
   8a658:	b800671e 	bne	r23,zero,8a7f8 <__udivdi3+0x32c>
   8a65c:	3c010536 	bltu	r7,r16,8aa74 <__udivdi3+0x5a8>
   8a660:	9985403a 	cmpgeu	r2,r19,r6
   8a664:	0007883a 	mov	r3,zero
   8a668:	00004a06 	br	8a794 <__udivdi3+0x2c8>
   8a66c:	3000041e 	bne	r6,zero,8a680 <__udivdi3+0x1b4>
   8a670:	000b883a 	mov	r5,zero
   8a674:	01000044 	movi	r4,1
   8a678:	0080b2c0 	call	80b2c <__udivsi3>
   8a67c:	1023883a 	mov	r17,r2
   8a680:	00bfffd4 	movui	r2,65535
   8a684:	1440532e 	bgeu	r2,r17,8a7d4 <__udivdi3+0x308>
   8a688:	00804034 	movhi	r2,256
   8a68c:	10bfffc4 	addi	r2,r2,-1
   8a690:	1440f436 	bltu	r2,r17,8aa64 <__udivdi3+0x598>
   8a694:	00800404 	movi	r2,16
   8a698:	8886d83a 	srl	r3,r17,r2
   8a69c:	010002b4 	movhi	r4,10
   8a6a0:	2120f704 	addi	r4,r4,-31780
   8a6a4:	20c7883a 	add	r3,r4,r3
   8a6a8:	18c00003 	ldbu	r3,0(r3)
   8a6ac:	1885883a 	add	r2,r3,r2
   8a6b0:	00c00804 	movi	r3,32
   8a6b4:	1887c83a 	sub	r3,r3,r2
   8a6b8:	1800a51e 	bne	r3,zero,8a950 <__udivdi3+0x484>
   8a6bc:	882ad43a 	srli	r21,r17,16
   8a6c0:	8461c83a 	sub	r16,r16,r17
   8a6c4:	8d3fffcc 	andi	r20,r17,65535
   8a6c8:	00c00044 	movi	r3,1
   8a6cc:	a80b883a 	mov	r5,r21
   8a6d0:	8009883a 	mov	r4,r16
   8a6d4:	d8c00115 	stw	r3,4(sp)
   8a6d8:	0080b900 	call	80b90 <__umodsi3>
   8a6dc:	a80b883a 	mov	r5,r21
   8a6e0:	8009883a 	mov	r4,r16
   8a6e4:	1027883a 	mov	r19,r2
   8a6e8:	0080b2c0 	call	80b2c <__udivsi3>
   8a6ec:	a00b883a 	mov	r5,r20
   8a6f0:	1009883a 	mov	r4,r2
   8a6f4:	102d883a 	mov	r22,r2
   8a6f8:	008b08c0 	call	8b08c <__mulsi3>
   8a6fc:	9826943a 	slli	r19,r19,16
   8a700:	900ed43a 	srli	r7,r18,16
   8a704:	d8c00117 	ldw	r3,4(sp)
   8a708:	3cceb03a 	or	r7,r7,r19
   8a70c:	3880052e 	bgeu	r7,r2,8a724 <__udivdi3+0x258>
   8a710:	3c4f883a 	add	r7,r7,r17
   8a714:	b13fffc4 	addi	r4,r22,-1
   8a718:	3c400136 	bltu	r7,r17,8a720 <__udivdi3+0x254>
   8a71c:	3880e436 	bltu	r7,r2,8aab0 <__udivdi3+0x5e4>
   8a720:	202d883a 	mov	r22,r4
   8a724:	38a1c83a 	sub	r16,r7,r2
   8a728:	8009883a 	mov	r4,r16
   8a72c:	a80b883a 	mov	r5,r21
   8a730:	d8c00115 	stw	r3,4(sp)
   8a734:	0080b900 	call	80b90 <__umodsi3>
   8a738:	1027883a 	mov	r19,r2
   8a73c:	8009883a 	mov	r4,r16
   8a740:	a80b883a 	mov	r5,r21
   8a744:	9826943a 	slli	r19,r19,16
   8a748:	0080b2c0 	call	80b2c <__udivsi3>
   8a74c:	a00b883a 	mov	r5,r20
   8a750:	1009883a 	mov	r4,r2
   8a754:	94bfffcc 	andi	r18,r18,65535
   8a758:	1021883a 	mov	r16,r2
   8a75c:	94e4b03a 	or	r18,r18,r19
   8a760:	008b08c0 	call	8b08c <__mulsi3>
   8a764:	d8c00117 	ldw	r3,4(sp)
   8a768:	9080052e 	bgeu	r18,r2,8a780 <__udivdi3+0x2b4>
   8a76c:	8ca5883a 	add	r18,r17,r18
   8a770:	813fffc4 	addi	r4,r16,-1
   8a774:	9440ad36 	bltu	r18,r17,8aa2c <__udivdi3+0x560>
   8a778:	9080ac2e 	bgeu	r18,r2,8aa2c <__udivdi3+0x560>
   8a77c:	843fff84 	addi	r16,r16,-2
   8a780:	b004943a 	slli	r2,r22,16
   8a784:	1404b03a 	or	r2,r2,r16
   8a788:	00000206 	br	8a794 <__udivdi3+0x2c8>
   8a78c:	0007883a 	mov	r3,zero
   8a790:	0005883a 	mov	r2,zero
   8a794:	dfc00b17 	ldw	ra,44(sp)
   8a798:	df000a17 	ldw	fp,40(sp)
   8a79c:	ddc00917 	ldw	r23,36(sp)
   8a7a0:	dd800817 	ldw	r22,32(sp)
   8a7a4:	dd400717 	ldw	r21,28(sp)
   8a7a8:	dd000617 	ldw	r20,24(sp)
   8a7ac:	dcc00517 	ldw	r19,20(sp)
   8a7b0:	dc800417 	ldw	r18,16(sp)
   8a7b4:	dc400317 	ldw	r17,12(sp)
   8a7b8:	dc000217 	ldw	r16,8(sp)
   8a7bc:	dec00c04 	addi	sp,sp,48
   8a7c0:	f800283a 	ret
   8a7c4:	00803fc4 	movi	r2,255
   8a7c8:	11c5803a 	cmpltu	r2,r2,r7
   8a7cc:	100490fa 	slli	r2,r2,3
   8a7d0:	003f9906 	br	8a638 <__alt_data_end+0xfffcbe38>
   8a7d4:	00803fc4 	movi	r2,255
   8a7d8:	1445803a 	cmpltu	r2,r2,r17
   8a7dc:	100490fa 	slli	r2,r2,3
   8a7e0:	003fad06 	br	8a698 <__alt_data_end+0xfffcbe98>
   8a7e4:	00804034 	movhi	r2,256
   8a7e8:	10bfffc4 	addi	r2,r2,-1
   8a7ec:	11809f36 	bltu	r2,r6,8aa6c <__udivdi3+0x5a0>
   8a7f0:	00800404 	movi	r2,16
   8a7f4:	003f4c06 	br	8a528 <__alt_data_end+0xfffcbd28>
   8a7f8:	3dce983a 	sll	r7,r7,r23
   8a7fc:	30b8d83a 	srl	fp,r6,r2
   8a800:	80a2d83a 	srl	r17,r16,r2
   8a804:	35cc983a 	sll	r6,r6,r23
   8a808:	3f38b03a 	or	fp,r7,fp
   8a80c:	e024d43a 	srli	r18,fp,16
   8a810:	9884d83a 	srl	r2,r19,r2
   8a814:	85e0983a 	sll	r16,r16,r23
   8a818:	8809883a 	mov	r4,r17
   8a81c:	900b883a 	mov	r5,r18
   8a820:	d9800015 	stw	r6,0(sp)
   8a824:	1420b03a 	or	r16,r2,r16
   8a828:	0080b900 	call	80b90 <__umodsi3>
   8a82c:	900b883a 	mov	r5,r18
   8a830:	8809883a 	mov	r4,r17
   8a834:	1029883a 	mov	r20,r2
   8a838:	e5bfffcc 	andi	r22,fp,65535
   8a83c:	0080b2c0 	call	80b2c <__udivsi3>
   8a840:	100b883a 	mov	r5,r2
   8a844:	b009883a 	mov	r4,r22
   8a848:	102b883a 	mov	r21,r2
   8a84c:	008b08c0 	call	8b08c <__mulsi3>
   8a850:	a028943a 	slli	r20,r20,16
   8a854:	8006d43a 	srli	r3,r16,16
   8a858:	1d06b03a 	or	r3,r3,r20
   8a85c:	1880042e 	bgeu	r3,r2,8a870 <__udivdi3+0x3a4>
   8a860:	1f07883a 	add	r3,r3,fp
   8a864:	a93fffc4 	addi	r4,r21,-1
   8a868:	1f00892e 	bgeu	r3,fp,8aa90 <__udivdi3+0x5c4>
   8a86c:	202b883a 	mov	r21,r4
   8a870:	18a3c83a 	sub	r17,r3,r2
   8a874:	8809883a 	mov	r4,r17
   8a878:	900b883a 	mov	r5,r18
   8a87c:	0080b900 	call	80b90 <__umodsi3>
   8a880:	1029883a 	mov	r20,r2
   8a884:	8809883a 	mov	r4,r17
   8a888:	900b883a 	mov	r5,r18
   8a88c:	a028943a 	slli	r20,r20,16
   8a890:	0080b2c0 	call	80b2c <__udivsi3>
   8a894:	100b883a 	mov	r5,r2
   8a898:	b009883a 	mov	r4,r22
   8a89c:	843fffcc 	andi	r16,r16,65535
   8a8a0:	1023883a 	mov	r17,r2
   8a8a4:	8520b03a 	or	r16,r16,r20
   8a8a8:	008b08c0 	call	8b08c <__mulsi3>
   8a8ac:	8080042e 	bgeu	r16,r2,8a8c0 <__udivdi3+0x3f4>
   8a8b0:	8721883a 	add	r16,r16,fp
   8a8b4:	88ffffc4 	addi	r3,r17,-1
   8a8b8:	8700712e 	bgeu	r16,fp,8aa80 <__udivdi3+0x5b4>
   8a8bc:	1823883a 	mov	r17,r3
   8a8c0:	a80e943a 	slli	r7,r21,16
   8a8c4:	d8c00017 	ldw	r3,0(sp)
   8a8c8:	80a1c83a 	sub	r16,r16,r2
   8a8cc:	3c64b03a 	or	r18,r7,r17
   8a8d0:	1d3fffcc 	andi	r20,r3,65535
   8a8d4:	9022d43a 	srli	r17,r18,16
   8a8d8:	95bfffcc 	andi	r22,r18,65535
   8a8dc:	a00b883a 	mov	r5,r20
   8a8e0:	b009883a 	mov	r4,r22
   8a8e4:	182ad43a 	srli	r21,r3,16
   8a8e8:	008b08c0 	call	8b08c <__mulsi3>
   8a8ec:	a00b883a 	mov	r5,r20
   8a8f0:	8809883a 	mov	r4,r17
   8a8f4:	1039883a 	mov	fp,r2
   8a8f8:	008b08c0 	call	8b08c <__mulsi3>
   8a8fc:	8809883a 	mov	r4,r17
   8a900:	a80b883a 	mov	r5,r21
   8a904:	1029883a 	mov	r20,r2
   8a908:	008b08c0 	call	8b08c <__mulsi3>
   8a90c:	a80b883a 	mov	r5,r21
   8a910:	b009883a 	mov	r4,r22
   8a914:	1023883a 	mov	r17,r2
   8a918:	008b08c0 	call	8b08c <__mulsi3>
   8a91c:	e006d43a 	srli	r3,fp,16
   8a920:	1505883a 	add	r2,r2,r20
   8a924:	1887883a 	add	r3,r3,r2
   8a928:	1d00022e 	bgeu	r3,r20,8a934 <__udivdi3+0x468>
   8a92c:	00800074 	movhi	r2,1
   8a930:	88a3883a 	add	r17,r17,r2
   8a934:	1804d43a 	srli	r2,r3,16
   8a938:	1463883a 	add	r17,r2,r17
   8a93c:	84404436 	bltu	r16,r17,8aa50 <__udivdi3+0x584>
   8a940:	84403e26 	beq	r16,r17,8aa3c <__udivdi3+0x570>
   8a944:	9005883a 	mov	r2,r18
   8a948:	0007883a 	mov	r3,zero
   8a94c:	003f9106 	br	8a794 <__alt_data_end+0xfffcbf94>
   8a950:	88e2983a 	sll	r17,r17,r3
   8a954:	80aed83a 	srl	r23,r16,r2
   8a958:	80e0983a 	sll	r16,r16,r3
   8a95c:	882ad43a 	srli	r21,r17,16
   8a960:	9884d83a 	srl	r2,r19,r2
   8a964:	b809883a 	mov	r4,r23
   8a968:	a80b883a 	mov	r5,r21
   8a96c:	98e4983a 	sll	r18,r19,r3
   8a970:	142cb03a 	or	r22,r2,r16
   8a974:	0080b900 	call	80b90 <__umodsi3>
   8a978:	b809883a 	mov	r4,r23
   8a97c:	a80b883a 	mov	r5,r21
   8a980:	1027883a 	mov	r19,r2
   8a984:	8d3fffcc 	andi	r20,r17,65535
   8a988:	0080b2c0 	call	80b2c <__udivsi3>
   8a98c:	a009883a 	mov	r4,r20
   8a990:	100b883a 	mov	r5,r2
   8a994:	102f883a 	mov	r23,r2
   8a998:	008b08c0 	call	8b08c <__mulsi3>
   8a99c:	9826943a 	slli	r19,r19,16
   8a9a0:	b008d43a 	srli	r4,r22,16
   8a9a4:	24c8b03a 	or	r4,r4,r19
   8a9a8:	2080062e 	bgeu	r4,r2,8a9c4 <__udivdi3+0x4f8>
   8a9ac:	2449883a 	add	r4,r4,r17
   8a9b0:	b8ffffc4 	addi	r3,r23,-1
   8a9b4:	24403c36 	bltu	r4,r17,8aaa8 <__udivdi3+0x5dc>
   8a9b8:	20803b2e 	bgeu	r4,r2,8aaa8 <__udivdi3+0x5dc>
   8a9bc:	bdffff84 	addi	r23,r23,-2
   8a9c0:	2449883a 	add	r4,r4,r17
   8a9c4:	20a1c83a 	sub	r16,r4,r2
   8a9c8:	a80b883a 	mov	r5,r21
   8a9cc:	8009883a 	mov	r4,r16
   8a9d0:	0080b900 	call	80b90 <__umodsi3>
   8a9d4:	a80b883a 	mov	r5,r21
   8a9d8:	8009883a 	mov	r4,r16
   8a9dc:	1027883a 	mov	r19,r2
   8a9e0:	0080b2c0 	call	80b2c <__udivsi3>
   8a9e4:	a009883a 	mov	r4,r20
   8a9e8:	100b883a 	mov	r5,r2
   8a9ec:	9826943a 	slli	r19,r19,16
   8a9f0:	1039883a 	mov	fp,r2
   8a9f4:	008b08c0 	call	8b08c <__mulsi3>
   8a9f8:	b13fffcc 	andi	r4,r22,65535
   8a9fc:	24c8b03a 	or	r4,r4,r19
   8aa00:	2080062e 	bgeu	r4,r2,8aa1c <__udivdi3+0x550>
   8aa04:	2449883a 	add	r4,r4,r17
   8aa08:	e0ffffc4 	addi	r3,fp,-1
   8aa0c:	24402436 	bltu	r4,r17,8aaa0 <__udivdi3+0x5d4>
   8aa10:	2080232e 	bgeu	r4,r2,8aaa0 <__udivdi3+0x5d4>
   8aa14:	e73fff84 	addi	fp,fp,-2
   8aa18:	2449883a 	add	r4,r4,r17
   8aa1c:	b82e943a 	slli	r23,r23,16
   8aa20:	20a1c83a 	sub	r16,r4,r2
   8aa24:	bf06b03a 	or	r3,r23,fp
   8aa28:	003f2806 	br	8a6cc <__alt_data_end+0xfffcbecc>
   8aa2c:	2021883a 	mov	r16,r4
   8aa30:	003f5306 	br	8a780 <__alt_data_end+0xfffcbf80>
   8aa34:	1821883a 	mov	r16,r3
   8aa38:	003ef406 	br	8a60c <__alt_data_end+0xfffcbe0c>
   8aa3c:	1806943a 	slli	r3,r3,16
   8aa40:	9de6983a 	sll	r19,r19,r23
   8aa44:	e73fffcc 	andi	fp,fp,65535
   8aa48:	1f07883a 	add	r3,r3,fp
   8aa4c:	98ffbd2e 	bgeu	r19,r3,8a944 <__alt_data_end+0xfffcc144>
   8aa50:	90bfffc4 	addi	r2,r18,-1
   8aa54:	0007883a 	mov	r3,zero
   8aa58:	003f4e06 	br	8a794 <__alt_data_end+0xfffcbf94>
   8aa5c:	00800604 	movi	r2,24
   8aa60:	003ef506 	br	8a638 <__alt_data_end+0xfffcbe38>
   8aa64:	00800604 	movi	r2,24
   8aa68:	003f0b06 	br	8a698 <__alt_data_end+0xfffcbe98>
   8aa6c:	00800604 	movi	r2,24
   8aa70:	003ead06 	br	8a528 <__alt_data_end+0xfffcbd28>
   8aa74:	0007883a 	mov	r3,zero
   8aa78:	00800044 	movi	r2,1
   8aa7c:	003f4506 	br	8a794 <__alt_data_end+0xfffcbf94>
   8aa80:	80bf8e2e 	bgeu	r16,r2,8a8bc <__alt_data_end+0xfffcc0bc>
   8aa84:	8c7fff84 	addi	r17,r17,-2
   8aa88:	8721883a 	add	r16,r16,fp
   8aa8c:	003f8c06 	br	8a8c0 <__alt_data_end+0xfffcc0c0>
   8aa90:	18bf762e 	bgeu	r3,r2,8a86c <__alt_data_end+0xfffcc06c>
   8aa94:	ad7fff84 	addi	r21,r21,-2
   8aa98:	1f07883a 	add	r3,r3,fp
   8aa9c:	003f7406 	br	8a870 <__alt_data_end+0xfffcc070>
   8aaa0:	1839883a 	mov	fp,r3
   8aaa4:	003fdd06 	br	8aa1c <__alt_data_end+0xfffcc21c>
   8aaa8:	182f883a 	mov	r23,r3
   8aaac:	003fc506 	br	8a9c4 <__alt_data_end+0xfffcc1c4>
   8aab0:	b5bfff84 	addi	r22,r22,-2
   8aab4:	3c4f883a 	add	r7,r7,r17
   8aab8:	003f1a06 	br	8a724 <__alt_data_end+0xfffcbf24>
   8aabc:	b5bfff84 	addi	r22,r22,-2
   8aac0:	1c47883a 	add	r3,r3,r17
   8aac4:	003ebc06 	br	8a5b8 <__alt_data_end+0xfffcbdb8>

0008aac8 <__umoddi3>:
   8aac8:	defff304 	addi	sp,sp,-52
   8aacc:	df000b15 	stw	fp,44(sp)
   8aad0:	dc400415 	stw	r17,16(sp)
   8aad4:	dc000315 	stw	r16,12(sp)
   8aad8:	dfc00c15 	stw	ra,48(sp)
   8aadc:	ddc00a15 	stw	r23,40(sp)
   8aae0:	dd800915 	stw	r22,36(sp)
   8aae4:	dd400815 	stw	r21,32(sp)
   8aae8:	dd000715 	stw	r20,28(sp)
   8aaec:	dcc00615 	stw	r19,24(sp)
   8aaf0:	dc800515 	stw	r18,20(sp)
   8aaf4:	2021883a 	mov	r16,r4
   8aaf8:	2823883a 	mov	r17,r5
   8aafc:	2839883a 	mov	fp,r5
   8ab00:	3800401e 	bne	r7,zero,8ac04 <__umoddi3+0x13c>
   8ab04:	3027883a 	mov	r19,r6
   8ab08:	2029883a 	mov	r20,r4
   8ab0c:	2980552e 	bgeu	r5,r6,8ac64 <__umoddi3+0x19c>
   8ab10:	00bfffd4 	movui	r2,65535
   8ab14:	1180a236 	bltu	r2,r6,8ada0 <__umoddi3+0x2d8>
   8ab18:	01003fc4 	movi	r4,255
   8ab1c:	2189803a 	cmpltu	r4,r4,r6
   8ab20:	200890fa 	slli	r4,r4,3
   8ab24:	3104d83a 	srl	r2,r6,r4
   8ab28:	00c002b4 	movhi	r3,10
   8ab2c:	18e0f704 	addi	r3,r3,-31780
   8ab30:	1885883a 	add	r2,r3,r2
   8ab34:	10c00003 	ldbu	r3,0(r2)
   8ab38:	00800804 	movi	r2,32
   8ab3c:	1909883a 	add	r4,r3,r4
   8ab40:	1125c83a 	sub	r18,r2,r4
   8ab44:	90000526 	beq	r18,zero,8ab5c <__umoddi3+0x94>
   8ab48:	8ca2983a 	sll	r17,r17,r18
   8ab4c:	8108d83a 	srl	r4,r16,r4
   8ab50:	34a6983a 	sll	r19,r6,r18
   8ab54:	84a8983a 	sll	r20,r16,r18
   8ab58:	2478b03a 	or	fp,r4,r17
   8ab5c:	982cd43a 	srli	r22,r19,16
   8ab60:	e009883a 	mov	r4,fp
   8ab64:	9dffffcc 	andi	r23,r19,65535
   8ab68:	b00b883a 	mov	r5,r22
   8ab6c:	0080b900 	call	80b90 <__umodsi3>
   8ab70:	b00b883a 	mov	r5,r22
   8ab74:	e009883a 	mov	r4,fp
   8ab78:	102b883a 	mov	r21,r2
   8ab7c:	0080b2c0 	call	80b2c <__udivsi3>
   8ab80:	100b883a 	mov	r5,r2
   8ab84:	b809883a 	mov	r4,r23
   8ab88:	008b08c0 	call	8b08c <__mulsi3>
   8ab8c:	a82a943a 	slli	r21,r21,16
   8ab90:	a006d43a 	srli	r3,r20,16
   8ab94:	1d46b03a 	or	r3,r3,r21
   8ab98:	1880032e 	bgeu	r3,r2,8aba8 <__umoddi3+0xe0>
   8ab9c:	1cc7883a 	add	r3,r3,r19
   8aba0:	1cc00136 	bltu	r3,r19,8aba8 <__umoddi3+0xe0>
   8aba4:	18813136 	bltu	r3,r2,8b06c <__umoddi3+0x5a4>
   8aba8:	18a1c83a 	sub	r16,r3,r2
   8abac:	b00b883a 	mov	r5,r22
   8abb0:	8009883a 	mov	r4,r16
   8abb4:	0080b900 	call	80b90 <__umodsi3>
   8abb8:	b00b883a 	mov	r5,r22
   8abbc:	8009883a 	mov	r4,r16
   8abc0:	1023883a 	mov	r17,r2
   8abc4:	0080b2c0 	call	80b2c <__udivsi3>
   8abc8:	100b883a 	mov	r5,r2
   8abcc:	b809883a 	mov	r4,r23
   8abd0:	8822943a 	slli	r17,r17,16
   8abd4:	008b08c0 	call	8b08c <__mulsi3>
   8abd8:	a0ffffcc 	andi	r3,r20,65535
   8abdc:	1c46b03a 	or	r3,r3,r17
   8abe0:	1880042e 	bgeu	r3,r2,8abf4 <__umoddi3+0x12c>
   8abe4:	1cc7883a 	add	r3,r3,r19
   8abe8:	1cc00236 	bltu	r3,r19,8abf4 <__umoddi3+0x12c>
   8abec:	1880012e 	bgeu	r3,r2,8abf4 <__umoddi3+0x12c>
   8abf0:	1cc7883a 	add	r3,r3,r19
   8abf4:	1885c83a 	sub	r2,r3,r2
   8abf8:	1484d83a 	srl	r2,r2,r18
   8abfc:	0007883a 	mov	r3,zero
   8ac00:	00005306 	br	8ad50 <__umoddi3+0x288>
   8ac04:	29c05036 	bltu	r5,r7,8ad48 <__umoddi3+0x280>
   8ac08:	00bfffd4 	movui	r2,65535
   8ac0c:	11c05c2e 	bgeu	r2,r7,8ad80 <__umoddi3+0x2b8>
   8ac10:	00804034 	movhi	r2,256
   8ac14:	10bfffc4 	addi	r2,r2,-1
   8ac18:	11c10636 	bltu	r2,r7,8b034 <__umoddi3+0x56c>
   8ac1c:	01000404 	movi	r4,16
   8ac20:	3904d83a 	srl	r2,r7,r4
   8ac24:	00c002b4 	movhi	r3,10
   8ac28:	18e0f704 	addi	r3,r3,-31780
   8ac2c:	1885883a 	add	r2,r3,r2
   8ac30:	14c00003 	ldbu	r19,0(r2)
   8ac34:	00c00804 	movi	r3,32
   8ac38:	9927883a 	add	r19,r19,r4
   8ac3c:	1ce9c83a 	sub	r20,r3,r19
   8ac40:	a0005c1e 	bne	r20,zero,8adb4 <__umoddi3+0x2ec>
   8ac44:	3c400136 	bltu	r7,r17,8ac4c <__umoddi3+0x184>
   8ac48:	81810a36 	bltu	r16,r6,8b074 <__umoddi3+0x5ac>
   8ac4c:	8185c83a 	sub	r2,r16,r6
   8ac50:	89e3c83a 	sub	r17,r17,r7
   8ac54:	8089803a 	cmpltu	r4,r16,r2
   8ac58:	8939c83a 	sub	fp,r17,r4
   8ac5c:	e007883a 	mov	r3,fp
   8ac60:	00003b06 	br	8ad50 <__umoddi3+0x288>
   8ac64:	3000041e 	bne	r6,zero,8ac78 <__umoddi3+0x1b0>
   8ac68:	000b883a 	mov	r5,zero
   8ac6c:	01000044 	movi	r4,1
   8ac70:	0080b2c0 	call	80b2c <__udivsi3>
   8ac74:	1027883a 	mov	r19,r2
   8ac78:	00bfffd4 	movui	r2,65535
   8ac7c:	14c0442e 	bgeu	r2,r19,8ad90 <__umoddi3+0x2c8>
   8ac80:	00804034 	movhi	r2,256
   8ac84:	10bfffc4 	addi	r2,r2,-1
   8ac88:	14c0ec36 	bltu	r2,r19,8b03c <__umoddi3+0x574>
   8ac8c:	00800404 	movi	r2,16
   8ac90:	9886d83a 	srl	r3,r19,r2
   8ac94:	010002b4 	movhi	r4,10
   8ac98:	2120f704 	addi	r4,r4,-31780
   8ac9c:	20c7883a 	add	r3,r4,r3
   8aca0:	18c00003 	ldbu	r3,0(r3)
   8aca4:	1887883a 	add	r3,r3,r2
   8aca8:	00800804 	movi	r2,32
   8acac:	10e5c83a 	sub	r18,r2,r3
   8acb0:	9000ab1e 	bne	r18,zero,8af60 <__umoddi3+0x498>
   8acb4:	982cd43a 	srli	r22,r19,16
   8acb8:	8ce3c83a 	sub	r17,r17,r19
   8acbc:	9dffffcc 	andi	r23,r19,65535
   8acc0:	b00b883a 	mov	r5,r22
   8acc4:	8809883a 	mov	r4,r17
   8acc8:	0080b900 	call	80b90 <__umodsi3>
   8accc:	b00b883a 	mov	r5,r22
   8acd0:	8809883a 	mov	r4,r17
   8acd4:	102b883a 	mov	r21,r2
   8acd8:	0080b2c0 	call	80b2c <__udivsi3>
   8acdc:	b80b883a 	mov	r5,r23
   8ace0:	1009883a 	mov	r4,r2
   8ace4:	008b08c0 	call	8b08c <__mulsi3>
   8ace8:	a82a943a 	slli	r21,r21,16
   8acec:	a006d43a 	srli	r3,r20,16
   8acf0:	1d46b03a 	or	r3,r3,r21
   8acf4:	1880042e 	bgeu	r3,r2,8ad08 <__umoddi3+0x240>
   8acf8:	1cc7883a 	add	r3,r3,r19
   8acfc:	1cc00236 	bltu	r3,r19,8ad08 <__umoddi3+0x240>
   8ad00:	1880012e 	bgeu	r3,r2,8ad08 <__umoddi3+0x240>
   8ad04:	1cc7883a 	add	r3,r3,r19
   8ad08:	18a1c83a 	sub	r16,r3,r2
   8ad0c:	b00b883a 	mov	r5,r22
   8ad10:	8009883a 	mov	r4,r16
   8ad14:	0080b900 	call	80b90 <__umodsi3>
   8ad18:	1023883a 	mov	r17,r2
   8ad1c:	b00b883a 	mov	r5,r22
   8ad20:	8009883a 	mov	r4,r16
   8ad24:	0080b2c0 	call	80b2c <__udivsi3>
   8ad28:	8822943a 	slli	r17,r17,16
   8ad2c:	b80b883a 	mov	r5,r23
   8ad30:	1009883a 	mov	r4,r2
   8ad34:	008b08c0 	call	8b08c <__mulsi3>
   8ad38:	a53fffcc 	andi	r20,r20,65535
   8ad3c:	a446b03a 	or	r3,r20,r17
   8ad40:	18bfac2e 	bgeu	r3,r2,8abf4 <__alt_data_end+0xfffcc3f4>
   8ad44:	003fa706 	br	8abe4 <__alt_data_end+0xfffcc3e4>
   8ad48:	2005883a 	mov	r2,r4
   8ad4c:	2807883a 	mov	r3,r5
   8ad50:	dfc00c17 	ldw	ra,48(sp)
   8ad54:	df000b17 	ldw	fp,44(sp)
   8ad58:	ddc00a17 	ldw	r23,40(sp)
   8ad5c:	dd800917 	ldw	r22,36(sp)
   8ad60:	dd400817 	ldw	r21,32(sp)
   8ad64:	dd000717 	ldw	r20,28(sp)
   8ad68:	dcc00617 	ldw	r19,24(sp)
   8ad6c:	dc800517 	ldw	r18,20(sp)
   8ad70:	dc400417 	ldw	r17,16(sp)
   8ad74:	dc000317 	ldw	r16,12(sp)
   8ad78:	dec00d04 	addi	sp,sp,52
   8ad7c:	f800283a 	ret
   8ad80:	04c03fc4 	movi	r19,255
   8ad84:	99c9803a 	cmpltu	r4,r19,r7
   8ad88:	200890fa 	slli	r4,r4,3
   8ad8c:	003fa406 	br	8ac20 <__alt_data_end+0xfffcc420>
   8ad90:	00803fc4 	movi	r2,255
   8ad94:	14c5803a 	cmpltu	r2,r2,r19
   8ad98:	100490fa 	slli	r2,r2,3
   8ad9c:	003fbc06 	br	8ac90 <__alt_data_end+0xfffcc490>
   8ada0:	00804034 	movhi	r2,256
   8ada4:	10bfffc4 	addi	r2,r2,-1
   8ada8:	1180a636 	bltu	r2,r6,8b044 <__umoddi3+0x57c>
   8adac:	01000404 	movi	r4,16
   8adb0:	003f5c06 	br	8ab24 <__alt_data_end+0xfffcc324>
   8adb4:	3d0e983a 	sll	r7,r7,r20
   8adb8:	34ead83a 	srl	r21,r6,r19
   8adbc:	8cc6d83a 	srl	r3,r17,r19
   8adc0:	8d10983a 	sll	r8,r17,r20
   8adc4:	3d6ab03a 	or	r21,r7,r21
   8adc8:	a82cd43a 	srli	r22,r21,16
   8adcc:	84e2d83a 	srl	r17,r16,r19
   8add0:	1809883a 	mov	r4,r3
   8add4:	b00b883a 	mov	r5,r22
   8add8:	8a22b03a 	or	r17,r17,r8
   8addc:	3524983a 	sll	r18,r6,r20
   8ade0:	dc400015 	stw	r17,0(sp)
   8ade4:	d8c00115 	stw	r3,4(sp)
   8ade8:	0080b900 	call	80b90 <__umodsi3>
   8adec:	d8c00117 	ldw	r3,4(sp)
   8adf0:	b00b883a 	mov	r5,r22
   8adf4:	1039883a 	mov	fp,r2
   8adf8:	1809883a 	mov	r4,r3
   8adfc:	0080b2c0 	call	80b2c <__udivsi3>
   8ae00:	adffffcc 	andi	r23,r21,65535
   8ae04:	100b883a 	mov	r5,r2
   8ae08:	b809883a 	mov	r4,r23
   8ae0c:	1023883a 	mov	r17,r2
   8ae10:	008b08c0 	call	8b08c <__mulsi3>
   8ae14:	d9400017 	ldw	r5,0(sp)
   8ae18:	e008943a 	slli	r4,fp,16
   8ae1c:	8520983a 	sll	r16,r16,r20
   8ae20:	2806d43a 	srli	r3,r5,16
   8ae24:	1906b03a 	or	r3,r3,r4
   8ae28:	1880042e 	bgeu	r3,r2,8ae3c <__umoddi3+0x374>
   8ae2c:	1d47883a 	add	r3,r3,r21
   8ae30:	893fffc4 	addi	r4,r17,-1
   8ae34:	1d40892e 	bgeu	r3,r21,8b05c <__umoddi3+0x594>
   8ae38:	2023883a 	mov	r17,r4
   8ae3c:	18b9c83a 	sub	fp,r3,r2
   8ae40:	b00b883a 	mov	r5,r22
   8ae44:	e009883a 	mov	r4,fp
   8ae48:	0080b900 	call	80b90 <__umodsi3>
   8ae4c:	b00b883a 	mov	r5,r22
   8ae50:	e009883a 	mov	r4,fp
   8ae54:	d8800215 	stw	r2,8(sp)
   8ae58:	0080b2c0 	call	80b2c <__udivsi3>
   8ae5c:	100b883a 	mov	r5,r2
   8ae60:	b809883a 	mov	r4,r23
   8ae64:	102d883a 	mov	r22,r2
   8ae68:	008b08c0 	call	8b08c <__mulsi3>
   8ae6c:	d9800217 	ldw	r6,8(sp)
   8ae70:	d8c00017 	ldw	r3,0(sp)
   8ae74:	300c943a 	slli	r6,r6,16
   8ae78:	1a3fffcc 	andi	r8,r3,65535
   8ae7c:	4190b03a 	or	r8,r8,r6
   8ae80:	4080042e 	bgeu	r8,r2,8ae94 <__umoddi3+0x3cc>
   8ae84:	4551883a 	add	r8,r8,r21
   8ae88:	b0ffffc4 	addi	r3,r22,-1
   8ae8c:	45406f2e 	bgeu	r8,r21,8b04c <__umoddi3+0x584>
   8ae90:	182d883a 	mov	r22,r3
   8ae94:	880e943a 	slli	r7,r17,16
   8ae98:	9006d43a 	srli	r3,r18,16
   8ae9c:	91bfffcc 	andi	r6,r18,65535
   8aea0:	3dacb03a 	or	r22,r7,r22
   8aea4:	b02ed43a 	srli	r23,r22,16
   8aea8:	b5bfffcc 	andi	r22,r22,65535
   8aeac:	300b883a 	mov	r5,r6
   8aeb0:	b009883a 	mov	r4,r22
   8aeb4:	40a3c83a 	sub	r17,r8,r2
   8aeb8:	d8c00115 	stw	r3,4(sp)
   8aebc:	d9800215 	stw	r6,8(sp)
   8aec0:	008b08c0 	call	8b08c <__mulsi3>
   8aec4:	d9800217 	ldw	r6,8(sp)
   8aec8:	b809883a 	mov	r4,r23
   8aecc:	1039883a 	mov	fp,r2
   8aed0:	300b883a 	mov	r5,r6
   8aed4:	008b08c0 	call	8b08c <__mulsi3>
   8aed8:	d8c00117 	ldw	r3,4(sp)
   8aedc:	b809883a 	mov	r4,r23
   8aee0:	d8800215 	stw	r2,8(sp)
   8aee4:	180b883a 	mov	r5,r3
   8aee8:	008b08c0 	call	8b08c <__mulsi3>
   8aeec:	d8c00117 	ldw	r3,4(sp)
   8aef0:	b009883a 	mov	r4,r22
   8aef4:	102f883a 	mov	r23,r2
   8aef8:	180b883a 	mov	r5,r3
   8aefc:	008b08c0 	call	8b08c <__mulsi3>
   8af00:	d9800217 	ldw	r6,8(sp)
   8af04:	e006d43a 	srli	r3,fp,16
   8af08:	1185883a 	add	r2,r2,r6
   8af0c:	1885883a 	add	r2,r3,r2
   8af10:	1180022e 	bgeu	r2,r6,8af1c <__umoddi3+0x454>
   8af14:	00c00074 	movhi	r3,1
   8af18:	b8ef883a 	add	r23,r23,r3
   8af1c:	1006d43a 	srli	r3,r2,16
   8af20:	1004943a 	slli	r2,r2,16
   8af24:	e73fffcc 	andi	fp,fp,65535
   8af28:	1dc7883a 	add	r3,r3,r23
   8af2c:	1739883a 	add	fp,r2,fp
   8af30:	88c03a36 	bltu	r17,r3,8b01c <__umoddi3+0x554>
   8af34:	88c05126 	beq	r17,r3,8b07c <__umoddi3+0x5b4>
   8af38:	88c9c83a 	sub	r4,r17,r3
   8af3c:	e00f883a 	mov	r7,fp
   8af40:	81cfc83a 	sub	r7,r16,r7
   8af44:	81c7803a 	cmpltu	r3,r16,r7
   8af48:	20c7c83a 	sub	r3,r4,r3
   8af4c:	1cc4983a 	sll	r2,r3,r19
   8af50:	3d0ed83a 	srl	r7,r7,r20
   8af54:	1d06d83a 	srl	r3,r3,r20
   8af58:	11c4b03a 	or	r2,r2,r7
   8af5c:	003f7c06 	br	8ad50 <__alt_data_end+0xfffcc550>
   8af60:	9ca6983a 	sll	r19,r19,r18
   8af64:	88f8d83a 	srl	fp,r17,r3
   8af68:	80c4d83a 	srl	r2,r16,r3
   8af6c:	982cd43a 	srli	r22,r19,16
   8af70:	8ca2983a 	sll	r17,r17,r18
   8af74:	e009883a 	mov	r4,fp
   8af78:	b00b883a 	mov	r5,r22
   8af7c:	146ab03a 	or	r21,r2,r17
   8af80:	0080b900 	call	80b90 <__umodsi3>
   8af84:	b00b883a 	mov	r5,r22
   8af88:	e009883a 	mov	r4,fp
   8af8c:	1029883a 	mov	r20,r2
   8af90:	9dffffcc 	andi	r23,r19,65535
   8af94:	0080b2c0 	call	80b2c <__udivsi3>
   8af98:	b809883a 	mov	r4,r23
   8af9c:	100b883a 	mov	r5,r2
   8afa0:	008b08c0 	call	8b08c <__mulsi3>
   8afa4:	a008943a 	slli	r4,r20,16
   8afa8:	a806d43a 	srli	r3,r21,16
   8afac:	84a8983a 	sll	r20,r16,r18
   8afb0:	1906b03a 	or	r3,r3,r4
   8afb4:	1880042e 	bgeu	r3,r2,8afc8 <__umoddi3+0x500>
   8afb8:	1cc7883a 	add	r3,r3,r19
   8afbc:	1cc00236 	bltu	r3,r19,8afc8 <__umoddi3+0x500>
   8afc0:	1880012e 	bgeu	r3,r2,8afc8 <__umoddi3+0x500>
   8afc4:	1cc7883a 	add	r3,r3,r19
   8afc8:	18a3c83a 	sub	r17,r3,r2
   8afcc:	b00b883a 	mov	r5,r22
   8afd0:	8809883a 	mov	r4,r17
   8afd4:	0080b900 	call	80b90 <__umodsi3>
   8afd8:	b00b883a 	mov	r5,r22
   8afdc:	8809883a 	mov	r4,r17
   8afe0:	1021883a 	mov	r16,r2
   8afe4:	0080b2c0 	call	80b2c <__udivsi3>
   8afe8:	100b883a 	mov	r5,r2
   8afec:	b809883a 	mov	r4,r23
   8aff0:	8020943a 	slli	r16,r16,16
   8aff4:	008b08c0 	call	8b08c <__mulsi3>
   8aff8:	a8ffffcc 	andi	r3,r21,65535
   8affc:	1c06b03a 	or	r3,r3,r16
   8b000:	1880042e 	bgeu	r3,r2,8b014 <__umoddi3+0x54c>
   8b004:	1cc7883a 	add	r3,r3,r19
   8b008:	1cc00236 	bltu	r3,r19,8b014 <__umoddi3+0x54c>
   8b00c:	1880012e 	bgeu	r3,r2,8b014 <__umoddi3+0x54c>
   8b010:	1cc7883a 	add	r3,r3,r19
   8b014:	18a3c83a 	sub	r17,r3,r2
   8b018:	003f2906 	br	8acc0 <__alt_data_end+0xfffcc4c0>
   8b01c:	e48fc83a 	sub	r7,fp,r18
   8b020:	1d49c83a 	sub	r4,r3,r21
   8b024:	e1f9803a 	cmpltu	fp,fp,r7
   8b028:	2739c83a 	sub	fp,r4,fp
   8b02c:	8f09c83a 	sub	r4,r17,fp
   8b030:	003fc306 	br	8af40 <__alt_data_end+0xfffcc740>
   8b034:	01000604 	movi	r4,24
   8b038:	003ef906 	br	8ac20 <__alt_data_end+0xfffcc420>
   8b03c:	00800604 	movi	r2,24
   8b040:	003f1306 	br	8ac90 <__alt_data_end+0xfffcc490>
   8b044:	01000604 	movi	r4,24
   8b048:	003eb606 	br	8ab24 <__alt_data_end+0xfffcc324>
   8b04c:	40bf902e 	bgeu	r8,r2,8ae90 <__alt_data_end+0xfffcc690>
   8b050:	b5bfff84 	addi	r22,r22,-2
   8b054:	4551883a 	add	r8,r8,r21
   8b058:	003f8e06 	br	8ae94 <__alt_data_end+0xfffcc694>
   8b05c:	18bf762e 	bgeu	r3,r2,8ae38 <__alt_data_end+0xfffcc638>
   8b060:	8c7fff84 	addi	r17,r17,-2
   8b064:	1d47883a 	add	r3,r3,r21
   8b068:	003f7406 	br	8ae3c <__alt_data_end+0xfffcc63c>
   8b06c:	1cc7883a 	add	r3,r3,r19
   8b070:	003ecd06 	br	8aba8 <__alt_data_end+0xfffcc3a8>
   8b074:	8005883a 	mov	r2,r16
   8b078:	003ef806 	br	8ac5c <__alt_data_end+0xfffcc45c>
   8b07c:	873fe736 	bltu	r16,fp,8b01c <__alt_data_end+0xfffcc81c>
   8b080:	e00f883a 	mov	r7,fp
   8b084:	0009883a 	mov	r4,zero
   8b088:	003fad06 	br	8af40 <__alt_data_end+0xfffcc740>

0008b08c <__mulsi3>:
   8b08c:	0005883a 	mov	r2,zero
   8b090:	20000726 	beq	r4,zero,8b0b0 <__mulsi3+0x24>
   8b094:	20c0004c 	andi	r3,r4,1
   8b098:	2008d07a 	srli	r4,r4,1
   8b09c:	18000126 	beq	r3,zero,8b0a4 <__mulsi3+0x18>
   8b0a0:	1145883a 	add	r2,r2,r5
   8b0a4:	294b883a 	add	r5,r5,r5
   8b0a8:	203ffa1e 	bne	r4,zero,8b094 <__alt_data_end+0xfffcc894>
   8b0ac:	f800283a 	ret
   8b0b0:	f800283a 	ret

0008b0b4 <__adddf3>:
   8b0b4:	02c00434 	movhi	r11,16
   8b0b8:	5affffc4 	addi	r11,r11,-1
   8b0bc:	2806d7fa 	srli	r3,r5,31
   8b0c0:	2ad4703a 	and	r10,r5,r11
   8b0c4:	3ad2703a 	and	r9,r7,r11
   8b0c8:	3804d53a 	srli	r2,r7,20
   8b0cc:	3018d77a 	srli	r12,r6,29
   8b0d0:	280ad53a 	srli	r5,r5,20
   8b0d4:	501490fa 	slli	r10,r10,3
   8b0d8:	2010d77a 	srli	r8,r4,29
   8b0dc:	481290fa 	slli	r9,r9,3
   8b0e0:	380ed7fa 	srli	r7,r7,31
   8b0e4:	defffb04 	addi	sp,sp,-20
   8b0e8:	dc800215 	stw	r18,8(sp)
   8b0ec:	dc400115 	stw	r17,4(sp)
   8b0f0:	dc000015 	stw	r16,0(sp)
   8b0f4:	dfc00415 	stw	ra,16(sp)
   8b0f8:	dcc00315 	stw	r19,12(sp)
   8b0fc:	1c803fcc 	andi	r18,r3,255
   8b100:	2c01ffcc 	andi	r16,r5,2047
   8b104:	5210b03a 	or	r8,r10,r8
   8b108:	202290fa 	slli	r17,r4,3
   8b10c:	1081ffcc 	andi	r2,r2,2047
   8b110:	4b12b03a 	or	r9,r9,r12
   8b114:	300c90fa 	slli	r6,r6,3
   8b118:	91c07526 	beq	r18,r7,8b2f0 <__adddf3+0x23c>
   8b11c:	8087c83a 	sub	r3,r16,r2
   8b120:	00c0ab0e 	bge	zero,r3,8b3d0 <__adddf3+0x31c>
   8b124:	10002a1e 	bne	r2,zero,8b1d0 <__adddf3+0x11c>
   8b128:	4984b03a 	or	r2,r9,r6
   8b12c:	1000961e 	bne	r2,zero,8b388 <__adddf3+0x2d4>
   8b130:	888001cc 	andi	r2,r17,7
   8b134:	10000726 	beq	r2,zero,8b154 <__adddf3+0xa0>
   8b138:	888003cc 	andi	r2,r17,15
   8b13c:	00c00104 	movi	r3,4
   8b140:	10c00426 	beq	r2,r3,8b154 <__adddf3+0xa0>
   8b144:	88c7883a 	add	r3,r17,r3
   8b148:	1c63803a 	cmpltu	r17,r3,r17
   8b14c:	4451883a 	add	r8,r8,r17
   8b150:	1823883a 	mov	r17,r3
   8b154:	4080202c 	andhi	r2,r8,128
   8b158:	10005926 	beq	r2,zero,8b2c0 <__adddf3+0x20c>
   8b15c:	84000044 	addi	r16,r16,1
   8b160:	0081ffc4 	movi	r2,2047
   8b164:	8080ba26 	beq	r16,r2,8b450 <__adddf3+0x39c>
   8b168:	00bfe034 	movhi	r2,65408
   8b16c:	10bfffc4 	addi	r2,r2,-1
   8b170:	4090703a 	and	r8,r8,r2
   8b174:	4004977a 	slli	r2,r8,29
   8b178:	4010927a 	slli	r8,r8,9
   8b17c:	8822d0fa 	srli	r17,r17,3
   8b180:	8401ffcc 	andi	r16,r16,2047
   8b184:	4010d33a 	srli	r8,r8,12
   8b188:	9007883a 	mov	r3,r18
   8b18c:	1444b03a 	or	r2,r2,r17
   8b190:	8401ffcc 	andi	r16,r16,2047
   8b194:	8020953a 	slli	r16,r16,20
   8b198:	18c03fcc 	andi	r3,r3,255
   8b19c:	01000434 	movhi	r4,16
   8b1a0:	213fffc4 	addi	r4,r4,-1
   8b1a4:	180697fa 	slli	r3,r3,31
   8b1a8:	4110703a 	and	r8,r8,r4
   8b1ac:	4410b03a 	or	r8,r8,r16
   8b1b0:	40c6b03a 	or	r3,r8,r3
   8b1b4:	dfc00417 	ldw	ra,16(sp)
   8b1b8:	dcc00317 	ldw	r19,12(sp)
   8b1bc:	dc800217 	ldw	r18,8(sp)
   8b1c0:	dc400117 	ldw	r17,4(sp)
   8b1c4:	dc000017 	ldw	r16,0(sp)
   8b1c8:	dec00504 	addi	sp,sp,20
   8b1cc:	f800283a 	ret
   8b1d0:	0081ffc4 	movi	r2,2047
   8b1d4:	80bfd626 	beq	r16,r2,8b130 <__alt_data_end+0xfffcc930>
   8b1d8:	4a402034 	orhi	r9,r9,128
   8b1dc:	00800e04 	movi	r2,56
   8b1e0:	10c09f16 	blt	r2,r3,8b460 <__adddf3+0x3ac>
   8b1e4:	008007c4 	movi	r2,31
   8b1e8:	10c0c216 	blt	r2,r3,8b4f4 <__adddf3+0x440>
   8b1ec:	00800804 	movi	r2,32
   8b1f0:	10c5c83a 	sub	r2,r2,r3
   8b1f4:	488a983a 	sll	r5,r9,r2
   8b1f8:	30c8d83a 	srl	r4,r6,r3
   8b1fc:	3084983a 	sll	r2,r6,r2
   8b200:	48c6d83a 	srl	r3,r9,r3
   8b204:	290cb03a 	or	r6,r5,r4
   8b208:	1004c03a 	cmpne	r2,r2,zero
   8b20c:	308cb03a 	or	r6,r6,r2
   8b210:	898dc83a 	sub	r6,r17,r6
   8b214:	89a3803a 	cmpltu	r17,r17,r6
   8b218:	40d1c83a 	sub	r8,r8,r3
   8b21c:	4451c83a 	sub	r8,r8,r17
   8b220:	3023883a 	mov	r17,r6
   8b224:	4080202c 	andhi	r2,r8,128
   8b228:	10002326 	beq	r2,zero,8b2b8 <__adddf3+0x204>
   8b22c:	04c02034 	movhi	r19,128
   8b230:	9cffffc4 	addi	r19,r19,-1
   8b234:	44e6703a 	and	r19,r8,r19
   8b238:	98007626 	beq	r19,zero,8b414 <__adddf3+0x360>
   8b23c:	9809883a 	mov	r4,r19
   8b240:	008d8f40 	call	8d8f4 <__clzsi2>
   8b244:	10fffe04 	addi	r3,r2,-8
   8b248:	010007c4 	movi	r4,31
   8b24c:	20c07716 	blt	r4,r3,8b42c <__adddf3+0x378>
   8b250:	00800804 	movi	r2,32
   8b254:	10c5c83a 	sub	r2,r2,r3
   8b258:	8884d83a 	srl	r2,r17,r2
   8b25c:	98d0983a 	sll	r8,r19,r3
   8b260:	88e2983a 	sll	r17,r17,r3
   8b264:	1204b03a 	or	r2,r2,r8
   8b268:	1c007416 	blt	r3,r16,8b43c <__adddf3+0x388>
   8b26c:	1c21c83a 	sub	r16,r3,r16
   8b270:	82000044 	addi	r8,r16,1
   8b274:	00c007c4 	movi	r3,31
   8b278:	1a009116 	blt	r3,r8,8b4c0 <__adddf3+0x40c>
   8b27c:	00c00804 	movi	r3,32
   8b280:	1a07c83a 	sub	r3,r3,r8
   8b284:	8a08d83a 	srl	r4,r17,r8
   8b288:	88e2983a 	sll	r17,r17,r3
   8b28c:	10c6983a 	sll	r3,r2,r3
   8b290:	1210d83a 	srl	r8,r2,r8
   8b294:	8804c03a 	cmpne	r2,r17,zero
   8b298:	1906b03a 	or	r3,r3,r4
   8b29c:	18a2b03a 	or	r17,r3,r2
   8b2a0:	0021883a 	mov	r16,zero
   8b2a4:	003fa206 	br	8b130 <__alt_data_end+0xfffcc930>
   8b2a8:	1890b03a 	or	r8,r3,r2
   8b2ac:	40017d26 	beq	r8,zero,8b8a4 <__adddf3+0x7f0>
   8b2b0:	1011883a 	mov	r8,r2
   8b2b4:	1823883a 	mov	r17,r3
   8b2b8:	888001cc 	andi	r2,r17,7
   8b2bc:	103f9e1e 	bne	r2,zero,8b138 <__alt_data_end+0xfffcc938>
   8b2c0:	4004977a 	slli	r2,r8,29
   8b2c4:	8822d0fa 	srli	r17,r17,3
   8b2c8:	4010d0fa 	srli	r8,r8,3
   8b2cc:	9007883a 	mov	r3,r18
   8b2d0:	1444b03a 	or	r2,r2,r17
   8b2d4:	0101ffc4 	movi	r4,2047
   8b2d8:	81002426 	beq	r16,r4,8b36c <__adddf3+0x2b8>
   8b2dc:	8120703a 	and	r16,r16,r4
   8b2e0:	01000434 	movhi	r4,16
   8b2e4:	213fffc4 	addi	r4,r4,-1
   8b2e8:	4110703a 	and	r8,r8,r4
   8b2ec:	003fa806 	br	8b190 <__alt_data_end+0xfffcc990>
   8b2f0:	8089c83a 	sub	r4,r16,r2
   8b2f4:	01005e0e 	bge	zero,r4,8b470 <__adddf3+0x3bc>
   8b2f8:	10002b26 	beq	r2,zero,8b3a8 <__adddf3+0x2f4>
   8b2fc:	0081ffc4 	movi	r2,2047
   8b300:	80bf8b26 	beq	r16,r2,8b130 <__alt_data_end+0xfffcc930>
   8b304:	4a402034 	orhi	r9,r9,128
   8b308:	00800e04 	movi	r2,56
   8b30c:	1100a40e 	bge	r2,r4,8b5a0 <__adddf3+0x4ec>
   8b310:	498cb03a 	or	r6,r9,r6
   8b314:	300ac03a 	cmpne	r5,r6,zero
   8b318:	0013883a 	mov	r9,zero
   8b31c:	2c4b883a 	add	r5,r5,r17
   8b320:	2c63803a 	cmpltu	r17,r5,r17
   8b324:	4a11883a 	add	r8,r9,r8
   8b328:	8a11883a 	add	r8,r17,r8
   8b32c:	2823883a 	mov	r17,r5
   8b330:	4080202c 	andhi	r2,r8,128
   8b334:	103fe026 	beq	r2,zero,8b2b8 <__alt_data_end+0xfffccab8>
   8b338:	84000044 	addi	r16,r16,1
   8b33c:	0081ffc4 	movi	r2,2047
   8b340:	8080d226 	beq	r16,r2,8b68c <__adddf3+0x5d8>
   8b344:	00bfe034 	movhi	r2,65408
   8b348:	10bfffc4 	addi	r2,r2,-1
   8b34c:	4090703a 	and	r8,r8,r2
   8b350:	880ad07a 	srli	r5,r17,1
   8b354:	400897fa 	slli	r4,r8,31
   8b358:	88c0004c 	andi	r3,r17,1
   8b35c:	28e2b03a 	or	r17,r5,r3
   8b360:	4010d07a 	srli	r8,r8,1
   8b364:	2462b03a 	or	r17,r4,r17
   8b368:	003f7106 	br	8b130 <__alt_data_end+0xfffcc930>
   8b36c:	4088b03a 	or	r4,r8,r2
   8b370:	20014526 	beq	r4,zero,8b888 <__adddf3+0x7d4>
   8b374:	01000434 	movhi	r4,16
   8b378:	42000234 	orhi	r8,r8,8
   8b37c:	213fffc4 	addi	r4,r4,-1
   8b380:	4110703a 	and	r8,r8,r4
   8b384:	003f8206 	br	8b190 <__alt_data_end+0xfffcc990>
   8b388:	18ffffc4 	addi	r3,r3,-1
   8b38c:	1800491e 	bne	r3,zero,8b4b4 <__adddf3+0x400>
   8b390:	898bc83a 	sub	r5,r17,r6
   8b394:	8963803a 	cmpltu	r17,r17,r5
   8b398:	4251c83a 	sub	r8,r8,r9
   8b39c:	4451c83a 	sub	r8,r8,r17
   8b3a0:	2823883a 	mov	r17,r5
   8b3a4:	003f9f06 	br	8b224 <__alt_data_end+0xfffcca24>
   8b3a8:	4984b03a 	or	r2,r9,r6
   8b3ac:	103f6026 	beq	r2,zero,8b130 <__alt_data_end+0xfffcc930>
   8b3b0:	213fffc4 	addi	r4,r4,-1
   8b3b4:	2000931e 	bne	r4,zero,8b604 <__adddf3+0x550>
   8b3b8:	898d883a 	add	r6,r17,r6
   8b3bc:	3463803a 	cmpltu	r17,r6,r17
   8b3c0:	4251883a 	add	r8,r8,r9
   8b3c4:	8a11883a 	add	r8,r17,r8
   8b3c8:	3023883a 	mov	r17,r6
   8b3cc:	003fd806 	br	8b330 <__alt_data_end+0xfffccb30>
   8b3d0:	1800541e 	bne	r3,zero,8b524 <__adddf3+0x470>
   8b3d4:	80800044 	addi	r2,r16,1
   8b3d8:	1081ffcc 	andi	r2,r2,2047
   8b3dc:	00c00044 	movi	r3,1
   8b3e0:	1880a00e 	bge	r3,r2,8b664 <__adddf3+0x5b0>
   8b3e4:	8989c83a 	sub	r4,r17,r6
   8b3e8:	8905803a 	cmpltu	r2,r17,r4
   8b3ec:	4267c83a 	sub	r19,r8,r9
   8b3f0:	98a7c83a 	sub	r19,r19,r2
   8b3f4:	9880202c 	andhi	r2,r19,128
   8b3f8:	10006326 	beq	r2,zero,8b588 <__adddf3+0x4d4>
   8b3fc:	3463c83a 	sub	r17,r6,r17
   8b400:	4a07c83a 	sub	r3,r9,r8
   8b404:	344d803a 	cmpltu	r6,r6,r17
   8b408:	19a7c83a 	sub	r19,r3,r6
   8b40c:	3825883a 	mov	r18,r7
   8b410:	983f8a1e 	bne	r19,zero,8b23c <__alt_data_end+0xfffcca3c>
   8b414:	8809883a 	mov	r4,r17
   8b418:	008d8f40 	call	8d8f4 <__clzsi2>
   8b41c:	10800804 	addi	r2,r2,32
   8b420:	10fffe04 	addi	r3,r2,-8
   8b424:	010007c4 	movi	r4,31
   8b428:	20ff890e 	bge	r4,r3,8b250 <__alt_data_end+0xfffcca50>
   8b42c:	10bff604 	addi	r2,r2,-40
   8b430:	8884983a 	sll	r2,r17,r2
   8b434:	0023883a 	mov	r17,zero
   8b438:	1c3f8c0e 	bge	r3,r16,8b26c <__alt_data_end+0xfffcca6c>
   8b43c:	023fe034 	movhi	r8,65408
   8b440:	423fffc4 	addi	r8,r8,-1
   8b444:	80e1c83a 	sub	r16,r16,r3
   8b448:	1210703a 	and	r8,r2,r8
   8b44c:	003f3806 	br	8b130 <__alt_data_end+0xfffcc930>
   8b450:	9007883a 	mov	r3,r18
   8b454:	0011883a 	mov	r8,zero
   8b458:	0005883a 	mov	r2,zero
   8b45c:	003f4c06 	br	8b190 <__alt_data_end+0xfffcc990>
   8b460:	498cb03a 	or	r6,r9,r6
   8b464:	300cc03a 	cmpne	r6,r6,zero
   8b468:	0007883a 	mov	r3,zero
   8b46c:	003f6806 	br	8b210 <__alt_data_end+0xfffcca10>
   8b470:	20009c1e 	bne	r4,zero,8b6e4 <__adddf3+0x630>
   8b474:	80800044 	addi	r2,r16,1
   8b478:	1141ffcc 	andi	r5,r2,2047
   8b47c:	01000044 	movi	r4,1
   8b480:	2140670e 	bge	r4,r5,8b620 <__adddf3+0x56c>
   8b484:	0101ffc4 	movi	r4,2047
   8b488:	11007f26 	beq	r2,r4,8b688 <__adddf3+0x5d4>
   8b48c:	898d883a 	add	r6,r17,r6
   8b490:	4247883a 	add	r3,r8,r9
   8b494:	3451803a 	cmpltu	r8,r6,r17
   8b498:	40d1883a 	add	r8,r8,r3
   8b49c:	402297fa 	slli	r17,r8,31
   8b4a0:	300cd07a 	srli	r6,r6,1
   8b4a4:	4010d07a 	srli	r8,r8,1
   8b4a8:	1021883a 	mov	r16,r2
   8b4ac:	89a2b03a 	or	r17,r17,r6
   8b4b0:	003f1f06 	br	8b130 <__alt_data_end+0xfffcc930>
   8b4b4:	0081ffc4 	movi	r2,2047
   8b4b8:	80bf481e 	bne	r16,r2,8b1dc <__alt_data_end+0xfffcc9dc>
   8b4bc:	003f1c06 	br	8b130 <__alt_data_end+0xfffcc930>
   8b4c0:	843ff844 	addi	r16,r16,-31
   8b4c4:	01000804 	movi	r4,32
   8b4c8:	1406d83a 	srl	r3,r2,r16
   8b4cc:	41005026 	beq	r8,r4,8b610 <__adddf3+0x55c>
   8b4d0:	01001004 	movi	r4,64
   8b4d4:	2211c83a 	sub	r8,r4,r8
   8b4d8:	1204983a 	sll	r2,r2,r8
   8b4dc:	88a2b03a 	or	r17,r17,r2
   8b4e0:	8822c03a 	cmpne	r17,r17,zero
   8b4e4:	1c62b03a 	or	r17,r3,r17
   8b4e8:	0011883a 	mov	r8,zero
   8b4ec:	0021883a 	mov	r16,zero
   8b4f0:	003f7106 	br	8b2b8 <__alt_data_end+0xfffccab8>
   8b4f4:	193ff804 	addi	r4,r3,-32
   8b4f8:	00800804 	movi	r2,32
   8b4fc:	4908d83a 	srl	r4,r9,r4
   8b500:	18804526 	beq	r3,r2,8b618 <__adddf3+0x564>
   8b504:	00801004 	movi	r2,64
   8b508:	10c5c83a 	sub	r2,r2,r3
   8b50c:	4886983a 	sll	r3,r9,r2
   8b510:	198cb03a 	or	r6,r3,r6
   8b514:	300cc03a 	cmpne	r6,r6,zero
   8b518:	218cb03a 	or	r6,r4,r6
   8b51c:	0007883a 	mov	r3,zero
   8b520:	003f3b06 	br	8b210 <__alt_data_end+0xfffcca10>
   8b524:	80002a26 	beq	r16,zero,8b5d0 <__adddf3+0x51c>
   8b528:	0101ffc4 	movi	r4,2047
   8b52c:	11006826 	beq	r2,r4,8b6d0 <__adddf3+0x61c>
   8b530:	00c7c83a 	sub	r3,zero,r3
   8b534:	42002034 	orhi	r8,r8,128
   8b538:	01000e04 	movi	r4,56
   8b53c:	20c07c16 	blt	r4,r3,8b730 <__adddf3+0x67c>
   8b540:	010007c4 	movi	r4,31
   8b544:	20c0da16 	blt	r4,r3,8b8b0 <__adddf3+0x7fc>
   8b548:	01000804 	movi	r4,32
   8b54c:	20c9c83a 	sub	r4,r4,r3
   8b550:	4114983a 	sll	r10,r8,r4
   8b554:	88cad83a 	srl	r5,r17,r3
   8b558:	8908983a 	sll	r4,r17,r4
   8b55c:	40c6d83a 	srl	r3,r8,r3
   8b560:	5162b03a 	or	r17,r10,r5
   8b564:	2008c03a 	cmpne	r4,r4,zero
   8b568:	8922b03a 	or	r17,r17,r4
   8b56c:	3463c83a 	sub	r17,r6,r17
   8b570:	48c7c83a 	sub	r3,r9,r3
   8b574:	344d803a 	cmpltu	r6,r6,r17
   8b578:	1991c83a 	sub	r8,r3,r6
   8b57c:	1021883a 	mov	r16,r2
   8b580:	3825883a 	mov	r18,r7
   8b584:	003f2706 	br	8b224 <__alt_data_end+0xfffcca24>
   8b588:	24d0b03a 	or	r8,r4,r19
   8b58c:	40001b1e 	bne	r8,zero,8b5fc <__adddf3+0x548>
   8b590:	0005883a 	mov	r2,zero
   8b594:	0007883a 	mov	r3,zero
   8b598:	0021883a 	mov	r16,zero
   8b59c:	003f4d06 	br	8b2d4 <__alt_data_end+0xfffccad4>
   8b5a0:	008007c4 	movi	r2,31
   8b5a4:	11003c16 	blt	r2,r4,8b698 <__adddf3+0x5e4>
   8b5a8:	00800804 	movi	r2,32
   8b5ac:	1105c83a 	sub	r2,r2,r4
   8b5b0:	488e983a 	sll	r7,r9,r2
   8b5b4:	310ad83a 	srl	r5,r6,r4
   8b5b8:	3084983a 	sll	r2,r6,r2
   8b5bc:	4912d83a 	srl	r9,r9,r4
   8b5c0:	394ab03a 	or	r5,r7,r5
   8b5c4:	1004c03a 	cmpne	r2,r2,zero
   8b5c8:	288ab03a 	or	r5,r5,r2
   8b5cc:	003f5306 	br	8b31c <__alt_data_end+0xfffccb1c>
   8b5d0:	4448b03a 	or	r4,r8,r17
   8b5d4:	20003e26 	beq	r4,zero,8b6d0 <__adddf3+0x61c>
   8b5d8:	00c6303a 	nor	r3,zero,r3
   8b5dc:	18003a1e 	bne	r3,zero,8b6c8 <__adddf3+0x614>
   8b5e0:	3463c83a 	sub	r17,r6,r17
   8b5e4:	4a07c83a 	sub	r3,r9,r8
   8b5e8:	344d803a 	cmpltu	r6,r6,r17
   8b5ec:	1991c83a 	sub	r8,r3,r6
   8b5f0:	1021883a 	mov	r16,r2
   8b5f4:	3825883a 	mov	r18,r7
   8b5f8:	003f0a06 	br	8b224 <__alt_data_end+0xfffcca24>
   8b5fc:	2023883a 	mov	r17,r4
   8b600:	003f0d06 	br	8b238 <__alt_data_end+0xfffcca38>
   8b604:	0081ffc4 	movi	r2,2047
   8b608:	80bf3f1e 	bne	r16,r2,8b308 <__alt_data_end+0xfffccb08>
   8b60c:	003ec806 	br	8b130 <__alt_data_end+0xfffcc930>
   8b610:	0005883a 	mov	r2,zero
   8b614:	003fb106 	br	8b4dc <__alt_data_end+0xfffcccdc>
   8b618:	0007883a 	mov	r3,zero
   8b61c:	003fbc06 	br	8b510 <__alt_data_end+0xfffccd10>
   8b620:	4444b03a 	or	r2,r8,r17
   8b624:	8000871e 	bne	r16,zero,8b844 <__adddf3+0x790>
   8b628:	1000ba26 	beq	r2,zero,8b914 <__adddf3+0x860>
   8b62c:	4984b03a 	or	r2,r9,r6
   8b630:	103ebf26 	beq	r2,zero,8b130 <__alt_data_end+0xfffcc930>
   8b634:	8985883a 	add	r2,r17,r6
   8b638:	4247883a 	add	r3,r8,r9
   8b63c:	1451803a 	cmpltu	r8,r2,r17
   8b640:	40d1883a 	add	r8,r8,r3
   8b644:	40c0202c 	andhi	r3,r8,128
   8b648:	1023883a 	mov	r17,r2
   8b64c:	183f1a26 	beq	r3,zero,8b2b8 <__alt_data_end+0xfffccab8>
   8b650:	00bfe034 	movhi	r2,65408
   8b654:	10bfffc4 	addi	r2,r2,-1
   8b658:	2021883a 	mov	r16,r4
   8b65c:	4090703a 	and	r8,r8,r2
   8b660:	003eb306 	br	8b130 <__alt_data_end+0xfffcc930>
   8b664:	4444b03a 	or	r2,r8,r17
   8b668:	8000291e 	bne	r16,zero,8b710 <__adddf3+0x65c>
   8b66c:	10004b1e 	bne	r2,zero,8b79c <__adddf3+0x6e8>
   8b670:	4990b03a 	or	r8,r9,r6
   8b674:	40008b26 	beq	r8,zero,8b8a4 <__adddf3+0x7f0>
   8b678:	4811883a 	mov	r8,r9
   8b67c:	3023883a 	mov	r17,r6
   8b680:	3825883a 	mov	r18,r7
   8b684:	003eaa06 	br	8b130 <__alt_data_end+0xfffcc930>
   8b688:	1021883a 	mov	r16,r2
   8b68c:	0011883a 	mov	r8,zero
   8b690:	0005883a 	mov	r2,zero
   8b694:	003f0f06 	br	8b2d4 <__alt_data_end+0xfffccad4>
   8b698:	217ff804 	addi	r5,r4,-32
   8b69c:	00800804 	movi	r2,32
   8b6a0:	494ad83a 	srl	r5,r9,r5
   8b6a4:	20807d26 	beq	r4,r2,8b89c <__adddf3+0x7e8>
   8b6a8:	00801004 	movi	r2,64
   8b6ac:	1109c83a 	sub	r4,r2,r4
   8b6b0:	4912983a 	sll	r9,r9,r4
   8b6b4:	498cb03a 	or	r6,r9,r6
   8b6b8:	300cc03a 	cmpne	r6,r6,zero
   8b6bc:	298ab03a 	or	r5,r5,r6
   8b6c0:	0013883a 	mov	r9,zero
   8b6c4:	003f1506 	br	8b31c <__alt_data_end+0xfffccb1c>
   8b6c8:	0101ffc4 	movi	r4,2047
   8b6cc:	113f9a1e 	bne	r2,r4,8b538 <__alt_data_end+0xfffccd38>
   8b6d0:	4811883a 	mov	r8,r9
   8b6d4:	3023883a 	mov	r17,r6
   8b6d8:	1021883a 	mov	r16,r2
   8b6dc:	3825883a 	mov	r18,r7
   8b6e0:	003e9306 	br	8b130 <__alt_data_end+0xfffcc930>
   8b6e4:	8000161e 	bne	r16,zero,8b740 <__adddf3+0x68c>
   8b6e8:	444ab03a 	or	r5,r8,r17
   8b6ec:	28005126 	beq	r5,zero,8b834 <__adddf3+0x780>
   8b6f0:	0108303a 	nor	r4,zero,r4
   8b6f4:	20004d1e 	bne	r4,zero,8b82c <__adddf3+0x778>
   8b6f8:	89a3883a 	add	r17,r17,r6
   8b6fc:	4253883a 	add	r9,r8,r9
   8b700:	898d803a 	cmpltu	r6,r17,r6
   8b704:	3251883a 	add	r8,r6,r9
   8b708:	1021883a 	mov	r16,r2
   8b70c:	003f0806 	br	8b330 <__alt_data_end+0xfffccb30>
   8b710:	1000301e 	bne	r2,zero,8b7d4 <__adddf3+0x720>
   8b714:	4984b03a 	or	r2,r9,r6
   8b718:	10007126 	beq	r2,zero,8b8e0 <__adddf3+0x82c>
   8b71c:	4811883a 	mov	r8,r9
   8b720:	3023883a 	mov	r17,r6
   8b724:	3825883a 	mov	r18,r7
   8b728:	0401ffc4 	movi	r16,2047
   8b72c:	003e8006 	br	8b130 <__alt_data_end+0xfffcc930>
   8b730:	4462b03a 	or	r17,r8,r17
   8b734:	8822c03a 	cmpne	r17,r17,zero
   8b738:	0007883a 	mov	r3,zero
   8b73c:	003f8b06 	br	8b56c <__alt_data_end+0xfffccd6c>
   8b740:	0141ffc4 	movi	r5,2047
   8b744:	11403b26 	beq	r2,r5,8b834 <__adddf3+0x780>
   8b748:	0109c83a 	sub	r4,zero,r4
   8b74c:	42002034 	orhi	r8,r8,128
   8b750:	01400e04 	movi	r5,56
   8b754:	29006716 	blt	r5,r4,8b8f4 <__adddf3+0x840>
   8b758:	014007c4 	movi	r5,31
   8b75c:	29007016 	blt	r5,r4,8b920 <__adddf3+0x86c>
   8b760:	01400804 	movi	r5,32
   8b764:	290bc83a 	sub	r5,r5,r4
   8b768:	4154983a 	sll	r10,r8,r5
   8b76c:	890ed83a 	srl	r7,r17,r4
   8b770:	894a983a 	sll	r5,r17,r5
   8b774:	4108d83a 	srl	r4,r8,r4
   8b778:	51e2b03a 	or	r17,r10,r7
   8b77c:	280ac03a 	cmpne	r5,r5,zero
   8b780:	8962b03a 	or	r17,r17,r5
   8b784:	89a3883a 	add	r17,r17,r6
   8b788:	2253883a 	add	r9,r4,r9
   8b78c:	898d803a 	cmpltu	r6,r17,r6
   8b790:	3251883a 	add	r8,r6,r9
   8b794:	1021883a 	mov	r16,r2
   8b798:	003ee506 	br	8b330 <__alt_data_end+0xfffccb30>
   8b79c:	4984b03a 	or	r2,r9,r6
   8b7a0:	103e6326 	beq	r2,zero,8b130 <__alt_data_end+0xfffcc930>
   8b7a4:	8987c83a 	sub	r3,r17,r6
   8b7a8:	88c9803a 	cmpltu	r4,r17,r3
   8b7ac:	4245c83a 	sub	r2,r8,r9
   8b7b0:	1105c83a 	sub	r2,r2,r4
   8b7b4:	1100202c 	andhi	r4,r2,128
   8b7b8:	203ebb26 	beq	r4,zero,8b2a8 <__alt_data_end+0xfffccaa8>
   8b7bc:	3463c83a 	sub	r17,r6,r17
   8b7c0:	4a07c83a 	sub	r3,r9,r8
   8b7c4:	344d803a 	cmpltu	r6,r6,r17
   8b7c8:	1991c83a 	sub	r8,r3,r6
   8b7cc:	3825883a 	mov	r18,r7
   8b7d0:	003e5706 	br	8b130 <__alt_data_end+0xfffcc930>
   8b7d4:	4984b03a 	or	r2,r9,r6
   8b7d8:	10002e26 	beq	r2,zero,8b894 <__adddf3+0x7e0>
   8b7dc:	4004d0fa 	srli	r2,r8,3
   8b7e0:	8822d0fa 	srli	r17,r17,3
   8b7e4:	4010977a 	slli	r8,r8,29
   8b7e8:	10c0022c 	andhi	r3,r2,8
   8b7ec:	4462b03a 	or	r17,r8,r17
   8b7f0:	18000826 	beq	r3,zero,8b814 <__adddf3+0x760>
   8b7f4:	4808d0fa 	srli	r4,r9,3
   8b7f8:	20c0022c 	andhi	r3,r4,8
   8b7fc:	1800051e 	bne	r3,zero,8b814 <__adddf3+0x760>
   8b800:	300cd0fa 	srli	r6,r6,3
   8b804:	4806977a 	slli	r3,r9,29
   8b808:	2005883a 	mov	r2,r4
   8b80c:	3825883a 	mov	r18,r7
   8b810:	19a2b03a 	or	r17,r3,r6
   8b814:	8810d77a 	srli	r8,r17,29
   8b818:	100490fa 	slli	r2,r2,3
   8b81c:	882290fa 	slli	r17,r17,3
   8b820:	0401ffc4 	movi	r16,2047
   8b824:	4090b03a 	or	r8,r8,r2
   8b828:	003e4106 	br	8b130 <__alt_data_end+0xfffcc930>
   8b82c:	0141ffc4 	movi	r5,2047
   8b830:	117fc71e 	bne	r2,r5,8b750 <__alt_data_end+0xfffccf50>
   8b834:	4811883a 	mov	r8,r9
   8b838:	3023883a 	mov	r17,r6
   8b83c:	1021883a 	mov	r16,r2
   8b840:	003e3b06 	br	8b130 <__alt_data_end+0xfffcc930>
   8b844:	10002f26 	beq	r2,zero,8b904 <__adddf3+0x850>
   8b848:	4984b03a 	or	r2,r9,r6
   8b84c:	10001126 	beq	r2,zero,8b894 <__adddf3+0x7e0>
   8b850:	4004d0fa 	srli	r2,r8,3
   8b854:	8822d0fa 	srli	r17,r17,3
   8b858:	4010977a 	slli	r8,r8,29
   8b85c:	10c0022c 	andhi	r3,r2,8
   8b860:	4462b03a 	or	r17,r8,r17
   8b864:	183feb26 	beq	r3,zero,8b814 <__alt_data_end+0xfffcd014>
   8b868:	4808d0fa 	srli	r4,r9,3
   8b86c:	20c0022c 	andhi	r3,r4,8
   8b870:	183fe81e 	bne	r3,zero,8b814 <__alt_data_end+0xfffcd014>
   8b874:	300cd0fa 	srli	r6,r6,3
   8b878:	4806977a 	slli	r3,r9,29
   8b87c:	2005883a 	mov	r2,r4
   8b880:	19a2b03a 	or	r17,r3,r6
   8b884:	003fe306 	br	8b814 <__alt_data_end+0xfffcd014>
   8b888:	0011883a 	mov	r8,zero
   8b88c:	0005883a 	mov	r2,zero
   8b890:	003e3f06 	br	8b190 <__alt_data_end+0xfffcc990>
   8b894:	0401ffc4 	movi	r16,2047
   8b898:	003e2506 	br	8b130 <__alt_data_end+0xfffcc930>
   8b89c:	0013883a 	mov	r9,zero
   8b8a0:	003f8406 	br	8b6b4 <__alt_data_end+0xfffcceb4>
   8b8a4:	0005883a 	mov	r2,zero
   8b8a8:	0007883a 	mov	r3,zero
   8b8ac:	003e8906 	br	8b2d4 <__alt_data_end+0xfffccad4>
   8b8b0:	197ff804 	addi	r5,r3,-32
   8b8b4:	01000804 	movi	r4,32
   8b8b8:	414ad83a 	srl	r5,r8,r5
   8b8bc:	19002426 	beq	r3,r4,8b950 <__adddf3+0x89c>
   8b8c0:	01001004 	movi	r4,64
   8b8c4:	20c7c83a 	sub	r3,r4,r3
   8b8c8:	40c6983a 	sll	r3,r8,r3
   8b8cc:	1c46b03a 	or	r3,r3,r17
   8b8d0:	1806c03a 	cmpne	r3,r3,zero
   8b8d4:	28e2b03a 	or	r17,r5,r3
   8b8d8:	0007883a 	mov	r3,zero
   8b8dc:	003f2306 	br	8b56c <__alt_data_end+0xfffccd6c>
   8b8e0:	0007883a 	mov	r3,zero
   8b8e4:	5811883a 	mov	r8,r11
   8b8e8:	00bfffc4 	movi	r2,-1
   8b8ec:	0401ffc4 	movi	r16,2047
   8b8f0:	003e7806 	br	8b2d4 <__alt_data_end+0xfffccad4>
   8b8f4:	4462b03a 	or	r17,r8,r17
   8b8f8:	8822c03a 	cmpne	r17,r17,zero
   8b8fc:	0009883a 	mov	r4,zero
   8b900:	003fa006 	br	8b784 <__alt_data_end+0xfffccf84>
   8b904:	4811883a 	mov	r8,r9
   8b908:	3023883a 	mov	r17,r6
   8b90c:	0401ffc4 	movi	r16,2047
   8b910:	003e0706 	br	8b130 <__alt_data_end+0xfffcc930>
   8b914:	4811883a 	mov	r8,r9
   8b918:	3023883a 	mov	r17,r6
   8b91c:	003e0406 	br	8b130 <__alt_data_end+0xfffcc930>
   8b920:	21fff804 	addi	r7,r4,-32
   8b924:	01400804 	movi	r5,32
   8b928:	41ced83a 	srl	r7,r8,r7
   8b92c:	21400a26 	beq	r4,r5,8b958 <__adddf3+0x8a4>
   8b930:	01401004 	movi	r5,64
   8b934:	2909c83a 	sub	r4,r5,r4
   8b938:	4108983a 	sll	r4,r8,r4
   8b93c:	2448b03a 	or	r4,r4,r17
   8b940:	2008c03a 	cmpne	r4,r4,zero
   8b944:	3922b03a 	or	r17,r7,r4
   8b948:	0009883a 	mov	r4,zero
   8b94c:	003f8d06 	br	8b784 <__alt_data_end+0xfffccf84>
   8b950:	0007883a 	mov	r3,zero
   8b954:	003fdd06 	br	8b8cc <__alt_data_end+0xfffcd0cc>
   8b958:	0009883a 	mov	r4,zero
   8b95c:	003ff706 	br	8b93c <__alt_data_end+0xfffcd13c>

0008b960 <__divdf3>:
   8b960:	defff004 	addi	sp,sp,-64
   8b964:	dc800815 	stw	r18,32(sp)
   8b968:	2824d53a 	srli	r18,r5,20
   8b96c:	dd800c15 	stw	r22,48(sp)
   8b970:	282cd7fa 	srli	r22,r5,31
   8b974:	dc000615 	stw	r16,24(sp)
   8b978:	04000434 	movhi	r16,16
   8b97c:	843fffc4 	addi	r16,r16,-1
   8b980:	dfc00f15 	stw	ra,60(sp)
   8b984:	df000e15 	stw	fp,56(sp)
   8b988:	ddc00d15 	stw	r23,52(sp)
   8b98c:	dd400b15 	stw	r21,44(sp)
   8b990:	dd000a15 	stw	r20,40(sp)
   8b994:	dcc00915 	stw	r19,36(sp)
   8b998:	dc400715 	stw	r17,28(sp)
   8b99c:	9481ffcc 	andi	r18,r18,2047
   8b9a0:	2c20703a 	and	r16,r5,r16
   8b9a4:	b2003fcc 	andi	r8,r22,255
   8b9a8:	90006126 	beq	r18,zero,8bb30 <__divdf3+0x1d0>
   8b9ac:	0081ffc4 	movi	r2,2047
   8b9b0:	202b883a 	mov	r21,r4
   8b9b4:	90803726 	beq	r18,r2,8ba94 <__divdf3+0x134>
   8b9b8:	80800434 	orhi	r2,r16,16
   8b9bc:	100490fa 	slli	r2,r2,3
   8b9c0:	2020d77a 	srli	r16,r4,29
   8b9c4:	202a90fa 	slli	r21,r4,3
   8b9c8:	94bf0044 	addi	r18,r18,-1023
   8b9cc:	80a0b03a 	or	r16,r16,r2
   8b9d0:	0013883a 	mov	r9,zero
   8b9d4:	000b883a 	mov	r5,zero
   8b9d8:	3806d53a 	srli	r3,r7,20
   8b9dc:	382ed7fa 	srli	r23,r7,31
   8b9e0:	04400434 	movhi	r17,16
   8b9e4:	8c7fffc4 	addi	r17,r17,-1
   8b9e8:	18c1ffcc 	andi	r3,r3,2047
   8b9ec:	3029883a 	mov	r20,r6
   8b9f0:	3c62703a 	and	r17,r7,r17
   8b9f4:	bf003fcc 	andi	fp,r23,255
   8b9f8:	18006e26 	beq	r3,zero,8bbb4 <__divdf3+0x254>
   8b9fc:	0081ffc4 	movi	r2,2047
   8ba00:	18806626 	beq	r3,r2,8bb9c <__divdf3+0x23c>
   8ba04:	88800434 	orhi	r2,r17,16
   8ba08:	100490fa 	slli	r2,r2,3
   8ba0c:	3022d77a 	srli	r17,r6,29
   8ba10:	302890fa 	slli	r20,r6,3
   8ba14:	18ff0044 	addi	r3,r3,-1023
   8ba18:	88a2b03a 	or	r17,r17,r2
   8ba1c:	000f883a 	mov	r7,zero
   8ba20:	b5e6f03a 	xor	r19,r22,r23
   8ba24:	3a4cb03a 	or	r6,r7,r9
   8ba28:	008003c4 	movi	r2,15
   8ba2c:	9809883a 	mov	r4,r19
   8ba30:	90c7c83a 	sub	r3,r18,r3
   8ba34:	9cc03fcc 	andi	r19,r19,255
   8ba38:	11809636 	bltu	r2,r6,8bc94 <__divdf3+0x334>
   8ba3c:	300c90ba 	slli	r6,r6,2
   8ba40:	00800274 	movhi	r2,9
   8ba44:	10ae9504 	addi	r2,r2,-17836
   8ba48:	308d883a 	add	r6,r6,r2
   8ba4c:	30800017 	ldw	r2,0(r6)
   8ba50:	1000683a 	jmp	r2
   8ba54:	0008bc94 	movui	zero,8946
   8ba58:	0008bacc 	andi	zero,zero,8939
   8ba5c:	0008bc84 	movi	zero,8946
   8ba60:	0008bac0 	call	8bac <OSCtxSw_SWITCH_PC+0x8b6c>
   8ba64:	0008bc84 	movi	zero,8946
   8ba68:	0008bc58 	cmpnei	zero,zero,8945
   8ba6c:	0008bc84 	movi	zero,8946
   8ba70:	0008bac0 	call	8bac <OSCtxSw_SWITCH_PC+0x8b6c>
   8ba74:	0008bacc 	andi	zero,zero,8939
   8ba78:	0008bacc 	andi	zero,zero,8939
   8ba7c:	0008bc58 	cmpnei	zero,zero,8945
   8ba80:	0008bac0 	call	8bac <OSCtxSw_SWITCH_PC+0x8b6c>
   8ba84:	0008bab0 	cmpltui	zero,zero,8938
   8ba88:	0008bab0 	cmpltui	zero,zero,8938
   8ba8c:	0008bab0 	cmpltui	zero,zero,8938
   8ba90:	0008c01c 	xori	zero,zero,8960
   8ba94:	2404b03a 	or	r2,r4,r16
   8ba98:	10006c1e 	bne	r2,zero,8bc4c <__divdf3+0x2ec>
   8ba9c:	02400204 	movi	r9,8
   8baa0:	0021883a 	mov	r16,zero
   8baa4:	002b883a 	mov	r21,zero
   8baa8:	01400084 	movi	r5,2
   8baac:	003fca06 	br	8b9d8 <__alt_data_end+0xfffcd1d8>
   8bab0:	8023883a 	mov	r17,r16
   8bab4:	a829883a 	mov	r20,r21
   8bab8:	4039883a 	mov	fp,r8
   8babc:	280f883a 	mov	r7,r5
   8bac0:	00800084 	movi	r2,2
   8bac4:	3881601e 	bne	r7,r2,8c048 <__divdf3+0x6e8>
   8bac8:	e027883a 	mov	r19,fp
   8bacc:	9900004c 	andi	r4,r19,1
   8bad0:	0081ffc4 	movi	r2,2047
   8bad4:	0021883a 	mov	r16,zero
   8bad8:	002b883a 	mov	r21,zero
   8badc:	1004953a 	slli	r2,r2,20
   8bae0:	20c03fcc 	andi	r3,r4,255
   8bae4:	01400434 	movhi	r5,16
   8bae8:	297fffc4 	addi	r5,r5,-1
   8baec:	180697fa 	slli	r3,r3,31
   8baf0:	8160703a 	and	r16,r16,r5
   8baf4:	80a0b03a 	or	r16,r16,r2
   8baf8:	80c6b03a 	or	r3,r16,r3
   8bafc:	a805883a 	mov	r2,r21
   8bb00:	dfc00f17 	ldw	ra,60(sp)
   8bb04:	df000e17 	ldw	fp,56(sp)
   8bb08:	ddc00d17 	ldw	r23,52(sp)
   8bb0c:	dd800c17 	ldw	r22,48(sp)
   8bb10:	dd400b17 	ldw	r21,44(sp)
   8bb14:	dd000a17 	ldw	r20,40(sp)
   8bb18:	dcc00917 	ldw	r19,36(sp)
   8bb1c:	dc800817 	ldw	r18,32(sp)
   8bb20:	dc400717 	ldw	r17,28(sp)
   8bb24:	dc000617 	ldw	r16,24(sp)
   8bb28:	dec01004 	addi	sp,sp,64
   8bb2c:	f800283a 	ret
   8bb30:	2404b03a 	or	r2,r4,r16
   8bb34:	2023883a 	mov	r17,r4
   8bb38:	10003f26 	beq	r2,zero,8bc38 <__divdf3+0x2d8>
   8bb3c:	80015e26 	beq	r16,zero,8c0b8 <__divdf3+0x758>
   8bb40:	8009883a 	mov	r4,r16
   8bb44:	d9800215 	stw	r6,8(sp)
   8bb48:	d9c00515 	stw	r7,20(sp)
   8bb4c:	da000415 	stw	r8,16(sp)
   8bb50:	008d8f40 	call	8d8f4 <__clzsi2>
   8bb54:	d9800217 	ldw	r6,8(sp)
   8bb58:	d9c00517 	ldw	r7,20(sp)
   8bb5c:	da000417 	ldw	r8,16(sp)
   8bb60:	113ffd44 	addi	r4,r2,-11
   8bb64:	00c00704 	movi	r3,28
   8bb68:	19014f16 	blt	r3,r4,8c0a8 <__divdf3+0x748>
   8bb6c:	00c00744 	movi	r3,29
   8bb70:	157ffe04 	addi	r21,r2,-8
   8bb74:	1907c83a 	sub	r3,r3,r4
   8bb78:	8560983a 	sll	r16,r16,r21
   8bb7c:	88c6d83a 	srl	r3,r17,r3
   8bb80:	8d6a983a 	sll	r21,r17,r21
   8bb84:	1c20b03a 	or	r16,r3,r16
   8bb88:	1080fcc4 	addi	r2,r2,1011
   8bb8c:	00a5c83a 	sub	r18,zero,r2
   8bb90:	0013883a 	mov	r9,zero
   8bb94:	000b883a 	mov	r5,zero
   8bb98:	003f8f06 	br	8b9d8 <__alt_data_end+0xfffcd1d8>
   8bb9c:	3444b03a 	or	r2,r6,r17
   8bba0:	1000231e 	bne	r2,zero,8bc30 <__divdf3+0x2d0>
   8bba4:	0023883a 	mov	r17,zero
   8bba8:	0029883a 	mov	r20,zero
   8bbac:	01c00084 	movi	r7,2
   8bbb0:	003f9b06 	br	8ba20 <__alt_data_end+0xfffcd220>
   8bbb4:	3444b03a 	or	r2,r6,r17
   8bbb8:	10001926 	beq	r2,zero,8bc20 <__divdf3+0x2c0>
   8bbbc:	88014b26 	beq	r17,zero,8c0ec <__divdf3+0x78c>
   8bbc0:	8809883a 	mov	r4,r17
   8bbc4:	d9400115 	stw	r5,4(sp)
   8bbc8:	d9800215 	stw	r6,8(sp)
   8bbcc:	da000415 	stw	r8,16(sp)
   8bbd0:	da400315 	stw	r9,12(sp)
   8bbd4:	008d8f40 	call	8d8f4 <__clzsi2>
   8bbd8:	d9400117 	ldw	r5,4(sp)
   8bbdc:	d9800217 	ldw	r6,8(sp)
   8bbe0:	da000417 	ldw	r8,16(sp)
   8bbe4:	da400317 	ldw	r9,12(sp)
   8bbe8:	113ffd44 	addi	r4,r2,-11
   8bbec:	00c00704 	movi	r3,28
   8bbf0:	19013a16 	blt	r3,r4,8c0dc <__divdf3+0x77c>
   8bbf4:	00c00744 	movi	r3,29
   8bbf8:	153ffe04 	addi	r20,r2,-8
   8bbfc:	1907c83a 	sub	r3,r3,r4
   8bc00:	8d22983a 	sll	r17,r17,r20
   8bc04:	30c6d83a 	srl	r3,r6,r3
   8bc08:	3528983a 	sll	r20,r6,r20
   8bc0c:	1c62b03a 	or	r17,r3,r17
   8bc10:	1080fcc4 	addi	r2,r2,1011
   8bc14:	0087c83a 	sub	r3,zero,r2
   8bc18:	000f883a 	mov	r7,zero
   8bc1c:	003f8006 	br	8ba20 <__alt_data_end+0xfffcd220>
   8bc20:	0023883a 	mov	r17,zero
   8bc24:	0029883a 	mov	r20,zero
   8bc28:	01c00044 	movi	r7,1
   8bc2c:	003f7c06 	br	8ba20 <__alt_data_end+0xfffcd220>
   8bc30:	01c000c4 	movi	r7,3
   8bc34:	003f7a06 	br	8ba20 <__alt_data_end+0xfffcd220>
   8bc38:	02400104 	movi	r9,4
   8bc3c:	0021883a 	mov	r16,zero
   8bc40:	002b883a 	mov	r21,zero
   8bc44:	01400044 	movi	r5,1
   8bc48:	003f6306 	br	8b9d8 <__alt_data_end+0xfffcd1d8>
   8bc4c:	02400304 	movi	r9,12
   8bc50:	014000c4 	movi	r5,3
   8bc54:	003f6006 	br	8b9d8 <__alt_data_end+0xfffcd1d8>
   8bc58:	04000434 	movhi	r16,16
   8bc5c:	0009883a 	mov	r4,zero
   8bc60:	843fffc4 	addi	r16,r16,-1
   8bc64:	057fffc4 	movi	r21,-1
   8bc68:	0081ffc4 	movi	r2,2047
   8bc6c:	003f9b06 	br	8badc <__alt_data_end+0xfffcd2dc>
   8bc70:	00c00044 	movi	r3,1
   8bc74:	1887c83a 	sub	r3,r3,r2
   8bc78:	01000e04 	movi	r4,56
   8bc7c:	20c1530e 	bge	r4,r3,8c1cc <__divdf3+0x86c>
   8bc80:	9900004c 	andi	r4,r19,1
   8bc84:	0005883a 	mov	r2,zero
   8bc88:	0021883a 	mov	r16,zero
   8bc8c:	002b883a 	mov	r21,zero
   8bc90:	003f9206 	br	8badc <__alt_data_end+0xfffcd2dc>
   8bc94:	8c012e36 	bltu	r17,r16,8c150 <__divdf3+0x7f0>
   8bc98:	84412c26 	beq	r16,r17,8c14c <__divdf3+0x7ec>
   8bc9c:	a82f883a 	mov	r23,r21
   8bca0:	18ffffc4 	addi	r3,r3,-1
   8bca4:	002b883a 	mov	r21,zero
   8bca8:	a004d63a 	srli	r2,r20,24
   8bcac:	8822923a 	slli	r17,r17,8
   8bcb0:	a028923a 	slli	r20,r20,8
   8bcb4:	8009883a 	mov	r4,r16
   8bcb8:	88acb03a 	or	r22,r17,r2
   8bcbc:	dd000015 	stw	r20,0(sp)
   8bcc0:	b028d43a 	srli	r20,r22,16
   8bcc4:	d8c00215 	stw	r3,8(sp)
   8bcc8:	b4bfffcc 	andi	r18,r22,65535
   8bccc:	a00b883a 	mov	r5,r20
   8bcd0:	0080b2c0 	call	80b2c <__udivsi3>
   8bcd4:	100b883a 	mov	r5,r2
   8bcd8:	9009883a 	mov	r4,r18
   8bcdc:	1023883a 	mov	r17,r2
   8bce0:	008b08c0 	call	8b08c <__mulsi3>
   8bce4:	8009883a 	mov	r4,r16
   8bce8:	a00b883a 	mov	r5,r20
   8bcec:	1039883a 	mov	fp,r2
   8bcf0:	0080b900 	call	80b90 <__umodsi3>
   8bcf4:	1004943a 	slli	r2,r2,16
   8bcf8:	b808d43a 	srli	r4,r23,16
   8bcfc:	d8c00217 	ldw	r3,8(sp)
   8bd00:	2084b03a 	or	r2,r4,r2
   8bd04:	1700062e 	bgeu	r2,fp,8bd20 <__divdf3+0x3c0>
   8bd08:	1585883a 	add	r2,r2,r22
   8bd0c:	893fffc4 	addi	r4,r17,-1
   8bd10:	15811d36 	bltu	r2,r22,8c188 <__divdf3+0x828>
   8bd14:	17011c2e 	bgeu	r2,fp,8c188 <__divdf3+0x828>
   8bd18:	8c7fff84 	addi	r17,r17,-2
   8bd1c:	1585883a 	add	r2,r2,r22
   8bd20:	1739c83a 	sub	fp,r2,fp
   8bd24:	a00b883a 	mov	r5,r20
   8bd28:	e009883a 	mov	r4,fp
   8bd2c:	d8c00215 	stw	r3,8(sp)
   8bd30:	0080b2c0 	call	80b2c <__udivsi3>
   8bd34:	100b883a 	mov	r5,r2
   8bd38:	9009883a 	mov	r4,r18
   8bd3c:	1021883a 	mov	r16,r2
   8bd40:	008b08c0 	call	8b08c <__mulsi3>
   8bd44:	a00b883a 	mov	r5,r20
   8bd48:	e009883a 	mov	r4,fp
   8bd4c:	d8800415 	stw	r2,16(sp)
   8bd50:	0080b900 	call	80b90 <__umodsi3>
   8bd54:	1004943a 	slli	r2,r2,16
   8bd58:	da000417 	ldw	r8,16(sp)
   8bd5c:	bdffffcc 	andi	r23,r23,65535
   8bd60:	b884b03a 	or	r2,r23,r2
   8bd64:	d8c00217 	ldw	r3,8(sp)
   8bd68:	1200062e 	bgeu	r2,r8,8bd84 <__divdf3+0x424>
   8bd6c:	1585883a 	add	r2,r2,r22
   8bd70:	813fffc4 	addi	r4,r16,-1
   8bd74:	15810236 	bltu	r2,r22,8c180 <__divdf3+0x820>
   8bd78:	1201012e 	bgeu	r2,r8,8c180 <__divdf3+0x820>
   8bd7c:	843fff84 	addi	r16,r16,-2
   8bd80:	1585883a 	add	r2,r2,r22
   8bd84:	8822943a 	slli	r17,r17,16
   8bd88:	d9800017 	ldw	r6,0(sp)
   8bd8c:	1211c83a 	sub	r8,r2,r8
   8bd90:	8c22b03a 	or	r17,r17,r16
   8bd94:	373fffcc 	andi	fp,r6,65535
   8bd98:	8abfffcc 	andi	r10,r17,65535
   8bd9c:	8820d43a 	srli	r16,r17,16
   8bda0:	5009883a 	mov	r4,r10
   8bda4:	e00b883a 	mov	r5,fp
   8bda8:	302ed43a 	srli	r23,r6,16
   8bdac:	d8c00215 	stw	r3,8(sp)
   8bdb0:	da000415 	stw	r8,16(sp)
   8bdb4:	da800115 	stw	r10,4(sp)
   8bdb8:	008b08c0 	call	8b08c <__mulsi3>
   8bdbc:	800b883a 	mov	r5,r16
   8bdc0:	e009883a 	mov	r4,fp
   8bdc4:	d8800515 	stw	r2,20(sp)
   8bdc8:	008b08c0 	call	8b08c <__mulsi3>
   8bdcc:	8009883a 	mov	r4,r16
   8bdd0:	b80b883a 	mov	r5,r23
   8bdd4:	d8800315 	stw	r2,12(sp)
   8bdd8:	008b08c0 	call	8b08c <__mulsi3>
   8bddc:	da800117 	ldw	r10,4(sp)
   8bde0:	b80b883a 	mov	r5,r23
   8bde4:	1021883a 	mov	r16,r2
   8bde8:	5009883a 	mov	r4,r10
   8bdec:	008b08c0 	call	8b08c <__mulsi3>
   8bdf0:	d9c00517 	ldw	r7,20(sp)
   8bdf4:	da400317 	ldw	r9,12(sp)
   8bdf8:	d8c00217 	ldw	r3,8(sp)
   8bdfc:	3808d43a 	srli	r4,r7,16
   8be00:	1245883a 	add	r2,r2,r9
   8be04:	da000417 	ldw	r8,16(sp)
   8be08:	2085883a 	add	r2,r4,r2
   8be0c:	1240022e 	bgeu	r2,r9,8be18 <__divdf3+0x4b8>
   8be10:	01000074 	movhi	r4,1
   8be14:	8121883a 	add	r16,r16,r4
   8be18:	1008d43a 	srli	r4,r2,16
   8be1c:	1004943a 	slli	r2,r2,16
   8be20:	39ffffcc 	andi	r7,r7,65535
   8be24:	2409883a 	add	r4,r4,r16
   8be28:	11c5883a 	add	r2,r2,r7
   8be2c:	4100bb36 	bltu	r8,r4,8c11c <__divdf3+0x7bc>
   8be30:	4100d726 	beq	r8,r4,8c190 <__divdf3+0x830>
   8be34:	4109c83a 	sub	r4,r8,r4
   8be38:	a8a1c83a 	sub	r16,r21,r2
   8be3c:	ac2b803a 	cmpltu	r21,r21,r16
   8be40:	256bc83a 	sub	r21,r4,r21
   8be44:	b540d926 	beq	r22,r21,8c1ac <__divdf3+0x84c>
   8be48:	a00b883a 	mov	r5,r20
   8be4c:	a809883a 	mov	r4,r21
   8be50:	d8c00215 	stw	r3,8(sp)
   8be54:	0080b2c0 	call	80b2c <__udivsi3>
   8be58:	100b883a 	mov	r5,r2
   8be5c:	9009883a 	mov	r4,r18
   8be60:	d8800515 	stw	r2,20(sp)
   8be64:	008b08c0 	call	8b08c <__mulsi3>
   8be68:	a809883a 	mov	r4,r21
   8be6c:	a00b883a 	mov	r5,r20
   8be70:	d8800415 	stw	r2,16(sp)
   8be74:	0080b900 	call	80b90 <__umodsi3>
   8be78:	1004943a 	slli	r2,r2,16
   8be7c:	8008d43a 	srli	r4,r16,16
   8be80:	da000417 	ldw	r8,16(sp)
   8be84:	d8c00217 	ldw	r3,8(sp)
   8be88:	2084b03a 	or	r2,r4,r2
   8be8c:	d9c00517 	ldw	r7,20(sp)
   8be90:	1200062e 	bgeu	r2,r8,8beac <__divdf3+0x54c>
   8be94:	1585883a 	add	r2,r2,r22
   8be98:	393fffc4 	addi	r4,r7,-1
   8be9c:	1580c536 	bltu	r2,r22,8c1b4 <__divdf3+0x854>
   8bea0:	1200c42e 	bgeu	r2,r8,8c1b4 <__divdf3+0x854>
   8bea4:	39ffff84 	addi	r7,r7,-2
   8bea8:	1585883a 	add	r2,r2,r22
   8beac:	122bc83a 	sub	r21,r2,r8
   8beb0:	a00b883a 	mov	r5,r20
   8beb4:	a809883a 	mov	r4,r21
   8beb8:	d8c00215 	stw	r3,8(sp)
   8bebc:	d9c00515 	stw	r7,20(sp)
   8bec0:	0080b2c0 	call	80b2c <__udivsi3>
   8bec4:	9009883a 	mov	r4,r18
   8bec8:	100b883a 	mov	r5,r2
   8becc:	d8800415 	stw	r2,16(sp)
   8bed0:	008b08c0 	call	8b08c <__mulsi3>
   8bed4:	a809883a 	mov	r4,r21
   8bed8:	a00b883a 	mov	r5,r20
   8bedc:	1025883a 	mov	r18,r2
   8bee0:	0080b900 	call	80b90 <__umodsi3>
   8bee4:	1004943a 	slli	r2,r2,16
   8bee8:	813fffcc 	andi	r4,r16,65535
   8beec:	d8c00217 	ldw	r3,8(sp)
   8bef0:	20a0b03a 	or	r16,r4,r2
   8bef4:	d9c00517 	ldw	r7,20(sp)
   8bef8:	da000417 	ldw	r8,16(sp)
   8befc:	8480062e 	bgeu	r16,r18,8bf18 <__divdf3+0x5b8>
   8bf00:	85a1883a 	add	r16,r16,r22
   8bf04:	40bfffc4 	addi	r2,r8,-1
   8bf08:	8580ac36 	bltu	r16,r22,8c1bc <__divdf3+0x85c>
   8bf0c:	8480ab2e 	bgeu	r16,r18,8c1bc <__divdf3+0x85c>
   8bf10:	423fff84 	addi	r8,r8,-2
   8bf14:	85a1883a 	add	r16,r16,r22
   8bf18:	3804943a 	slli	r2,r7,16
   8bf1c:	84a1c83a 	sub	r16,r16,r18
   8bf20:	e009883a 	mov	r4,fp
   8bf24:	1228b03a 	or	r20,r2,r8
   8bf28:	a1ffffcc 	andi	r7,r20,65535
   8bf2c:	a024d43a 	srli	r18,r20,16
   8bf30:	380b883a 	mov	r5,r7
   8bf34:	d8c00215 	stw	r3,8(sp)
   8bf38:	d9c00515 	stw	r7,20(sp)
   8bf3c:	008b08c0 	call	8b08c <__mulsi3>
   8bf40:	900b883a 	mov	r5,r18
   8bf44:	e009883a 	mov	r4,fp
   8bf48:	102b883a 	mov	r21,r2
   8bf4c:	008b08c0 	call	8b08c <__mulsi3>
   8bf50:	900b883a 	mov	r5,r18
   8bf54:	b809883a 	mov	r4,r23
   8bf58:	1039883a 	mov	fp,r2
   8bf5c:	008b08c0 	call	8b08c <__mulsi3>
   8bf60:	d9c00517 	ldw	r7,20(sp)
   8bf64:	b80b883a 	mov	r5,r23
   8bf68:	1025883a 	mov	r18,r2
   8bf6c:	3809883a 	mov	r4,r7
   8bf70:	008b08c0 	call	8b08c <__mulsi3>
   8bf74:	a808d43a 	srli	r4,r21,16
   8bf78:	1705883a 	add	r2,r2,fp
   8bf7c:	d8c00217 	ldw	r3,8(sp)
   8bf80:	2085883a 	add	r2,r4,r2
   8bf84:	1700022e 	bgeu	r2,fp,8bf90 <__divdf3+0x630>
   8bf88:	01000074 	movhi	r4,1
   8bf8c:	9125883a 	add	r18,r18,r4
   8bf90:	1008d43a 	srli	r4,r2,16
   8bf94:	1004943a 	slli	r2,r2,16
   8bf98:	ad7fffcc 	andi	r21,r21,65535
   8bf9c:	2489883a 	add	r4,r4,r18
   8bfa0:	1545883a 	add	r2,r2,r21
   8bfa4:	81003836 	bltu	r16,r4,8c088 <__divdf3+0x728>
   8bfa8:	81003626 	beq	r16,r4,8c084 <__divdf3+0x724>
   8bfac:	a5000054 	ori	r20,r20,1
   8bfb0:	1880ffc4 	addi	r2,r3,1023
   8bfb4:	00bf2e0e 	bge	zero,r2,8bc70 <__alt_data_end+0xfffcd470>
   8bfb8:	a10001cc 	andi	r4,r20,7
   8bfbc:	20000726 	beq	r4,zero,8bfdc <__divdf3+0x67c>
   8bfc0:	a10003cc 	andi	r4,r20,15
   8bfc4:	01400104 	movi	r5,4
   8bfc8:	21400426 	beq	r4,r5,8bfdc <__divdf3+0x67c>
   8bfcc:	a149883a 	add	r4,r20,r5
   8bfd0:	2529803a 	cmpltu	r20,r4,r20
   8bfd4:	8d23883a 	add	r17,r17,r20
   8bfd8:	2029883a 	mov	r20,r4
   8bfdc:	8900402c 	andhi	r4,r17,256
   8bfe0:	20000426 	beq	r4,zero,8bff4 <__divdf3+0x694>
   8bfe4:	18810004 	addi	r2,r3,1024
   8bfe8:	00ffc034 	movhi	r3,65280
   8bfec:	18ffffc4 	addi	r3,r3,-1
   8bff0:	88e2703a 	and	r17,r17,r3
   8bff4:	00c1ff84 	movi	r3,2046
   8bff8:	18beb416 	blt	r3,r2,8bacc <__alt_data_end+0xfffcd2cc>
   8bffc:	a028d0fa 	srli	r20,r20,3
   8c000:	882a977a 	slli	r21,r17,29
   8c004:	8820927a 	slli	r16,r17,9
   8c008:	1081ffcc 	andi	r2,r2,2047
   8c00c:	ad2ab03a 	or	r21,r21,r20
   8c010:	8020d33a 	srli	r16,r16,12
   8c014:	9900004c 	andi	r4,r19,1
   8c018:	003eb006 	br	8badc <__alt_data_end+0xfffcd2dc>
   8c01c:	8080022c 	andhi	r2,r16,8
   8c020:	10001226 	beq	r2,zero,8c06c <__divdf3+0x70c>
   8c024:	8880022c 	andhi	r2,r17,8
   8c028:	1000101e 	bne	r2,zero,8c06c <__divdf3+0x70c>
   8c02c:	00800434 	movhi	r2,16
   8c030:	8c000234 	orhi	r16,r17,8
   8c034:	10bfffc4 	addi	r2,r2,-1
   8c038:	b809883a 	mov	r4,r23
   8c03c:	80a0703a 	and	r16,r16,r2
   8c040:	a02b883a 	mov	r21,r20
   8c044:	003f0806 	br	8bc68 <__alt_data_end+0xfffcd468>
   8c048:	008000c4 	movi	r2,3
   8c04c:	3880b126 	beq	r7,r2,8c314 <__divdf3+0x9b4>
   8c050:	00800044 	movi	r2,1
   8c054:	38805b1e 	bne	r7,r2,8c1c4 <__divdf3+0x864>
   8c058:	e009883a 	mov	r4,fp
   8c05c:	0005883a 	mov	r2,zero
   8c060:	0021883a 	mov	r16,zero
   8c064:	002b883a 	mov	r21,zero
   8c068:	003e9c06 	br	8badc <__alt_data_end+0xfffcd2dc>
   8c06c:	00800434 	movhi	r2,16
   8c070:	84000234 	orhi	r16,r16,8
   8c074:	10bfffc4 	addi	r2,r2,-1
   8c078:	b009883a 	mov	r4,r22
   8c07c:	80a0703a 	and	r16,r16,r2
   8c080:	003ef906 	br	8bc68 <__alt_data_end+0xfffcd468>
   8c084:	103fca26 	beq	r2,zero,8bfb0 <__alt_data_end+0xfffcd7b0>
   8c088:	b421883a 	add	r16,r22,r16
   8c08c:	a17fffc4 	addi	r5,r20,-1
   8c090:	8580422e 	bgeu	r16,r22,8c19c <__divdf3+0x83c>
   8c094:	2829883a 	mov	r20,r5
   8c098:	813fc41e 	bne	r16,r4,8bfac <__alt_data_end+0xfffcd7ac>
   8c09c:	d9800017 	ldw	r6,0(sp)
   8c0a0:	30bfc21e 	bne	r6,r2,8bfac <__alt_data_end+0xfffcd7ac>
   8c0a4:	003fc206 	br	8bfb0 <__alt_data_end+0xfffcd7b0>
   8c0a8:	143ff604 	addi	r16,r2,-40
   8c0ac:	8c20983a 	sll	r16,r17,r16
   8c0b0:	002b883a 	mov	r21,zero
   8c0b4:	003eb406 	br	8bb88 <__alt_data_end+0xfffcd388>
   8c0b8:	d9800215 	stw	r6,8(sp)
   8c0bc:	d9c00515 	stw	r7,20(sp)
   8c0c0:	da000415 	stw	r8,16(sp)
   8c0c4:	008d8f40 	call	8d8f4 <__clzsi2>
   8c0c8:	10800804 	addi	r2,r2,32
   8c0cc:	da000417 	ldw	r8,16(sp)
   8c0d0:	d9c00517 	ldw	r7,20(sp)
   8c0d4:	d9800217 	ldw	r6,8(sp)
   8c0d8:	003ea106 	br	8bb60 <__alt_data_end+0xfffcd360>
   8c0dc:	147ff604 	addi	r17,r2,-40
   8c0e0:	3462983a 	sll	r17,r6,r17
   8c0e4:	0029883a 	mov	r20,zero
   8c0e8:	003ec906 	br	8bc10 <__alt_data_end+0xfffcd410>
   8c0ec:	3009883a 	mov	r4,r6
   8c0f0:	d9400115 	stw	r5,4(sp)
   8c0f4:	d9800215 	stw	r6,8(sp)
   8c0f8:	da000415 	stw	r8,16(sp)
   8c0fc:	da400315 	stw	r9,12(sp)
   8c100:	008d8f40 	call	8d8f4 <__clzsi2>
   8c104:	10800804 	addi	r2,r2,32
   8c108:	da400317 	ldw	r9,12(sp)
   8c10c:	da000417 	ldw	r8,16(sp)
   8c110:	d9800217 	ldw	r6,8(sp)
   8c114:	d9400117 	ldw	r5,4(sp)
   8c118:	003eb306 	br	8bbe8 <__alt_data_end+0xfffcd3e8>
   8c11c:	d9800017 	ldw	r6,0(sp)
   8c120:	a9ab883a 	add	r21,r21,r6
   8c124:	a98b803a 	cmpltu	r5,r21,r6
   8c128:	2d8b883a 	add	r5,r5,r22
   8c12c:	2a11883a 	add	r8,r5,r8
   8c130:	897fffc4 	addi	r5,r17,-1
   8c134:	b2000c2e 	bgeu	r22,r8,8c168 <__divdf3+0x808>
   8c138:	41003f36 	bltu	r8,r4,8c238 <__divdf3+0x8d8>
   8c13c:	22006c26 	beq	r4,r8,8c2f0 <__divdf3+0x990>
   8c140:	4109c83a 	sub	r4,r8,r4
   8c144:	2823883a 	mov	r17,r5
   8c148:	003f3b06 	br	8be38 <__alt_data_end+0xfffcd638>
   8c14c:	ad3ed336 	bltu	r21,r20,8bc9c <__alt_data_end+0xfffcd49c>
   8c150:	a804d07a 	srli	r2,r21,1
   8c154:	802e97fa 	slli	r23,r16,31
   8c158:	a82a97fa 	slli	r21,r21,31
   8c15c:	8020d07a 	srli	r16,r16,1
   8c160:	b8aeb03a 	or	r23,r23,r2
   8c164:	003ed006 	br	8bca8 <__alt_data_end+0xfffcd4a8>
   8c168:	b23ff51e 	bne	r22,r8,8c140 <__alt_data_end+0xfffcd940>
   8c16c:	d9800017 	ldw	r6,0(sp)
   8c170:	a9bff12e 	bgeu	r21,r6,8c138 <__alt_data_end+0xfffcd938>
   8c174:	b109c83a 	sub	r4,r22,r4
   8c178:	2823883a 	mov	r17,r5
   8c17c:	003f2e06 	br	8be38 <__alt_data_end+0xfffcd638>
   8c180:	2021883a 	mov	r16,r4
   8c184:	003eff06 	br	8bd84 <__alt_data_end+0xfffcd584>
   8c188:	2023883a 	mov	r17,r4
   8c18c:	003ee406 	br	8bd20 <__alt_data_end+0xfffcd520>
   8c190:	a8bfe236 	bltu	r21,r2,8c11c <__alt_data_end+0xfffcd91c>
   8c194:	0009883a 	mov	r4,zero
   8c198:	003f2706 	br	8be38 <__alt_data_end+0xfffcd638>
   8c19c:	81002d36 	bltu	r16,r4,8c254 <__divdf3+0x8f4>
   8c1a0:	24005626 	beq	r4,r16,8c2fc <__divdf3+0x99c>
   8c1a4:	2829883a 	mov	r20,r5
   8c1a8:	003f8006 	br	8bfac <__alt_data_end+0xfffcd7ac>
   8c1ac:	053fffc4 	movi	r20,-1
   8c1b0:	003f7f06 	br	8bfb0 <__alt_data_end+0xfffcd7b0>
   8c1b4:	200f883a 	mov	r7,r4
   8c1b8:	003f3c06 	br	8beac <__alt_data_end+0xfffcd6ac>
   8c1bc:	1011883a 	mov	r8,r2
   8c1c0:	003f5506 	br	8bf18 <__alt_data_end+0xfffcd718>
   8c1c4:	e027883a 	mov	r19,fp
   8c1c8:	003f7906 	br	8bfb0 <__alt_data_end+0xfffcd7b0>
   8c1cc:	010007c4 	movi	r4,31
   8c1d0:	20c02816 	blt	r4,r3,8c274 <__divdf3+0x914>
   8c1d4:	00800804 	movi	r2,32
   8c1d8:	10c5c83a 	sub	r2,r2,r3
   8c1dc:	888a983a 	sll	r5,r17,r2
   8c1e0:	a0c8d83a 	srl	r4,r20,r3
   8c1e4:	a084983a 	sll	r2,r20,r2
   8c1e8:	88e2d83a 	srl	r17,r17,r3
   8c1ec:	2906b03a 	or	r3,r5,r4
   8c1f0:	1004c03a 	cmpne	r2,r2,zero
   8c1f4:	1886b03a 	or	r3,r3,r2
   8c1f8:	188001cc 	andi	r2,r3,7
   8c1fc:	10000726 	beq	r2,zero,8c21c <__divdf3+0x8bc>
   8c200:	188003cc 	andi	r2,r3,15
   8c204:	01000104 	movi	r4,4
   8c208:	11000426 	beq	r2,r4,8c21c <__divdf3+0x8bc>
   8c20c:	1805883a 	mov	r2,r3
   8c210:	10c00104 	addi	r3,r2,4
   8c214:	1885803a 	cmpltu	r2,r3,r2
   8c218:	88a3883a 	add	r17,r17,r2
   8c21c:	8880202c 	andhi	r2,r17,128
   8c220:	10002926 	beq	r2,zero,8c2c8 <__divdf3+0x968>
   8c224:	9900004c 	andi	r4,r19,1
   8c228:	00800044 	movi	r2,1
   8c22c:	0021883a 	mov	r16,zero
   8c230:	002b883a 	mov	r21,zero
   8c234:	003e2906 	br	8badc <__alt_data_end+0xfffcd2dc>
   8c238:	d9800017 	ldw	r6,0(sp)
   8c23c:	8c7fff84 	addi	r17,r17,-2
   8c240:	a9ab883a 	add	r21,r21,r6
   8c244:	a98b803a 	cmpltu	r5,r21,r6
   8c248:	2d8b883a 	add	r5,r5,r22
   8c24c:	2a11883a 	add	r8,r5,r8
   8c250:	003ef806 	br	8be34 <__alt_data_end+0xfffcd634>
   8c254:	d9800017 	ldw	r6,0(sp)
   8c258:	318f883a 	add	r7,r6,r6
   8c25c:	398b803a 	cmpltu	r5,r7,r6
   8c260:	2d8d883a 	add	r6,r5,r22
   8c264:	81a1883a 	add	r16,r16,r6
   8c268:	a17fff84 	addi	r5,r20,-2
   8c26c:	d9c00015 	stw	r7,0(sp)
   8c270:	003f8806 	br	8c094 <__alt_data_end+0xfffcd894>
   8c274:	013ff844 	movi	r4,-31
   8c278:	2085c83a 	sub	r2,r4,r2
   8c27c:	8888d83a 	srl	r4,r17,r2
   8c280:	00800804 	movi	r2,32
   8c284:	18802126 	beq	r3,r2,8c30c <__divdf3+0x9ac>
   8c288:	04001004 	movi	r16,64
   8c28c:	80c7c83a 	sub	r3,r16,r3
   8c290:	88e0983a 	sll	r16,r17,r3
   8c294:	8504b03a 	or	r2,r16,r20
   8c298:	1004c03a 	cmpne	r2,r2,zero
   8c29c:	2084b03a 	or	r2,r4,r2
   8c2a0:	144001cc 	andi	r17,r2,7
   8c2a4:	88000d1e 	bne	r17,zero,8c2dc <__divdf3+0x97c>
   8c2a8:	0021883a 	mov	r16,zero
   8c2ac:	102ad0fa 	srli	r21,r2,3
   8c2b0:	9900004c 	andi	r4,r19,1
   8c2b4:	0005883a 	mov	r2,zero
   8c2b8:	ac6ab03a 	or	r21,r21,r17
   8c2bc:	003e0706 	br	8badc <__alt_data_end+0xfffcd2dc>
   8c2c0:	1007883a 	mov	r3,r2
   8c2c4:	0023883a 	mov	r17,zero
   8c2c8:	8820927a 	slli	r16,r17,9
   8c2cc:	1805883a 	mov	r2,r3
   8c2d0:	8822977a 	slli	r17,r17,29
   8c2d4:	8020d33a 	srli	r16,r16,12
   8c2d8:	003ff406 	br	8c2ac <__alt_data_end+0xfffcdaac>
   8c2dc:	10c003cc 	andi	r3,r2,15
   8c2e0:	01000104 	movi	r4,4
   8c2e4:	193ff626 	beq	r3,r4,8c2c0 <__alt_data_end+0xfffcdac0>
   8c2e8:	0023883a 	mov	r17,zero
   8c2ec:	003fc806 	br	8c210 <__alt_data_end+0xfffcda10>
   8c2f0:	a8bfd136 	bltu	r21,r2,8c238 <__alt_data_end+0xfffcda38>
   8c2f4:	2823883a 	mov	r17,r5
   8c2f8:	003fa606 	br	8c194 <__alt_data_end+0xfffcd994>
   8c2fc:	d9800017 	ldw	r6,0(sp)
   8c300:	30bfd436 	bltu	r6,r2,8c254 <__alt_data_end+0xfffcda54>
   8c304:	2829883a 	mov	r20,r5
   8c308:	003f6406 	br	8c09c <__alt_data_end+0xfffcd89c>
   8c30c:	0021883a 	mov	r16,zero
   8c310:	003fe006 	br	8c294 <__alt_data_end+0xfffcda94>
   8c314:	00800434 	movhi	r2,16
   8c318:	8c000234 	orhi	r16,r17,8
   8c31c:	10bfffc4 	addi	r2,r2,-1
   8c320:	e009883a 	mov	r4,fp
   8c324:	80a0703a 	and	r16,r16,r2
   8c328:	a02b883a 	mov	r21,r20
   8c32c:	003e4e06 	br	8bc68 <__alt_data_end+0xfffcd468>

0008c330 <__eqdf2>:
   8c330:	2804d53a 	srli	r2,r5,20
   8c334:	3806d53a 	srli	r3,r7,20
   8c338:	02000434 	movhi	r8,16
   8c33c:	423fffc4 	addi	r8,r8,-1
   8c340:	1081ffcc 	andi	r2,r2,2047
   8c344:	0281ffc4 	movi	r10,2047
   8c348:	2a12703a 	and	r9,r5,r8
   8c34c:	18c1ffcc 	andi	r3,r3,2047
   8c350:	3a10703a 	and	r8,r7,r8
   8c354:	280ad7fa 	srli	r5,r5,31
   8c358:	380ed7fa 	srli	r7,r7,31
   8c35c:	12801026 	beq	r2,r10,8c3a0 <__eqdf2+0x70>
   8c360:	0281ffc4 	movi	r10,2047
   8c364:	1a800a26 	beq	r3,r10,8c390 <__eqdf2+0x60>
   8c368:	10c00226 	beq	r2,r3,8c374 <__eqdf2+0x44>
   8c36c:	00800044 	movi	r2,1
   8c370:	f800283a 	ret
   8c374:	4a3ffd1e 	bne	r9,r8,8c36c <__alt_data_end+0xfffcdb6c>
   8c378:	21bffc1e 	bne	r4,r6,8c36c <__alt_data_end+0xfffcdb6c>
   8c37c:	29c00c26 	beq	r5,r7,8c3b0 <__eqdf2+0x80>
   8c380:	103ffa1e 	bne	r2,zero,8c36c <__alt_data_end+0xfffcdb6c>
   8c384:	2244b03a 	or	r2,r4,r9
   8c388:	1004c03a 	cmpne	r2,r2,zero
   8c38c:	f800283a 	ret
   8c390:	3214b03a 	or	r10,r6,r8
   8c394:	503ff426 	beq	r10,zero,8c368 <__alt_data_end+0xfffcdb68>
   8c398:	00800044 	movi	r2,1
   8c39c:	f800283a 	ret
   8c3a0:	2254b03a 	or	r10,r4,r9
   8c3a4:	503fee26 	beq	r10,zero,8c360 <__alt_data_end+0xfffcdb60>
   8c3a8:	00800044 	movi	r2,1
   8c3ac:	f800283a 	ret
   8c3b0:	0005883a 	mov	r2,zero
   8c3b4:	f800283a 	ret

0008c3b8 <__gedf2>:
   8c3b8:	2804d53a 	srli	r2,r5,20
   8c3bc:	3806d53a 	srli	r3,r7,20
   8c3c0:	02000434 	movhi	r8,16
   8c3c4:	423fffc4 	addi	r8,r8,-1
   8c3c8:	1081ffcc 	andi	r2,r2,2047
   8c3cc:	0241ffc4 	movi	r9,2047
   8c3d0:	2a14703a 	and	r10,r5,r8
   8c3d4:	18c1ffcc 	andi	r3,r3,2047
   8c3d8:	3a10703a 	and	r8,r7,r8
   8c3dc:	280ad7fa 	srli	r5,r5,31
   8c3e0:	380ed7fa 	srli	r7,r7,31
   8c3e4:	12401d26 	beq	r2,r9,8c45c <__gedf2+0xa4>
   8c3e8:	0241ffc4 	movi	r9,2047
   8c3ec:	1a401226 	beq	r3,r9,8c438 <__gedf2+0x80>
   8c3f0:	1000081e 	bne	r2,zero,8c414 <__gedf2+0x5c>
   8c3f4:	2296b03a 	or	r11,r4,r10
   8c3f8:	5813003a 	cmpeq	r9,r11,zero
   8c3fc:	1800091e 	bne	r3,zero,8c424 <__gedf2+0x6c>
   8c400:	3218b03a 	or	r12,r6,r8
   8c404:	6000071e 	bne	r12,zero,8c424 <__gedf2+0x6c>
   8c408:	0005883a 	mov	r2,zero
   8c40c:	5800101e 	bne	r11,zero,8c450 <__gedf2+0x98>
   8c410:	f800283a 	ret
   8c414:	18000c1e 	bne	r3,zero,8c448 <__gedf2+0x90>
   8c418:	3212b03a 	or	r9,r6,r8
   8c41c:	48000c26 	beq	r9,zero,8c450 <__gedf2+0x98>
   8c420:	0013883a 	mov	r9,zero
   8c424:	39c03fcc 	andi	r7,r7,255
   8c428:	48000826 	beq	r9,zero,8c44c <__gedf2+0x94>
   8c42c:	38000926 	beq	r7,zero,8c454 <__gedf2+0x9c>
   8c430:	00800044 	movi	r2,1
   8c434:	f800283a 	ret
   8c438:	3212b03a 	or	r9,r6,r8
   8c43c:	483fec26 	beq	r9,zero,8c3f0 <__alt_data_end+0xfffcdbf0>
   8c440:	00bfff84 	movi	r2,-2
   8c444:	f800283a 	ret
   8c448:	39c03fcc 	andi	r7,r7,255
   8c44c:	29c00626 	beq	r5,r7,8c468 <__gedf2+0xb0>
   8c450:	283ff726 	beq	r5,zero,8c430 <__alt_data_end+0xfffcdc30>
   8c454:	00bfffc4 	movi	r2,-1
   8c458:	f800283a 	ret
   8c45c:	2292b03a 	or	r9,r4,r10
   8c460:	483fe126 	beq	r9,zero,8c3e8 <__alt_data_end+0xfffcdbe8>
   8c464:	003ff606 	br	8c440 <__alt_data_end+0xfffcdc40>
   8c468:	18bff916 	blt	r3,r2,8c450 <__alt_data_end+0xfffcdc50>
   8c46c:	10c00316 	blt	r2,r3,8c47c <__gedf2+0xc4>
   8c470:	42bff736 	bltu	r8,r10,8c450 <__alt_data_end+0xfffcdc50>
   8c474:	52000326 	beq	r10,r8,8c484 <__gedf2+0xcc>
   8c478:	5200042e 	bgeu	r10,r8,8c48c <__gedf2+0xd4>
   8c47c:	283fec1e 	bne	r5,zero,8c430 <__alt_data_end+0xfffcdc30>
   8c480:	003ff406 	br	8c454 <__alt_data_end+0xfffcdc54>
   8c484:	313ff236 	bltu	r6,r4,8c450 <__alt_data_end+0xfffcdc50>
   8c488:	21bffc36 	bltu	r4,r6,8c47c <__alt_data_end+0xfffcdc7c>
   8c48c:	0005883a 	mov	r2,zero
   8c490:	f800283a 	ret

0008c494 <__ledf2>:
   8c494:	2804d53a 	srli	r2,r5,20
   8c498:	3810d53a 	srli	r8,r7,20
   8c49c:	00c00434 	movhi	r3,16
   8c4a0:	18ffffc4 	addi	r3,r3,-1
   8c4a4:	1081ffcc 	andi	r2,r2,2047
   8c4a8:	0241ffc4 	movi	r9,2047
   8c4ac:	28d4703a 	and	r10,r5,r3
   8c4b0:	4201ffcc 	andi	r8,r8,2047
   8c4b4:	38c6703a 	and	r3,r7,r3
   8c4b8:	280ad7fa 	srli	r5,r5,31
   8c4bc:	380ed7fa 	srli	r7,r7,31
   8c4c0:	12401f26 	beq	r2,r9,8c540 <__ledf2+0xac>
   8c4c4:	0241ffc4 	movi	r9,2047
   8c4c8:	42401426 	beq	r8,r9,8c51c <__ledf2+0x88>
   8c4cc:	1000091e 	bne	r2,zero,8c4f4 <__ledf2+0x60>
   8c4d0:	2296b03a 	or	r11,r4,r10
   8c4d4:	5813003a 	cmpeq	r9,r11,zero
   8c4d8:	29403fcc 	andi	r5,r5,255
   8c4dc:	40000a1e 	bne	r8,zero,8c508 <__ledf2+0x74>
   8c4e0:	30d8b03a 	or	r12,r6,r3
   8c4e4:	6000081e 	bne	r12,zero,8c508 <__ledf2+0x74>
   8c4e8:	0005883a 	mov	r2,zero
   8c4ec:	5800111e 	bne	r11,zero,8c534 <__ledf2+0xa0>
   8c4f0:	f800283a 	ret
   8c4f4:	29403fcc 	andi	r5,r5,255
   8c4f8:	40000c1e 	bne	r8,zero,8c52c <__ledf2+0x98>
   8c4fc:	30d2b03a 	or	r9,r6,r3
   8c500:	48000c26 	beq	r9,zero,8c534 <__ledf2+0xa0>
   8c504:	0013883a 	mov	r9,zero
   8c508:	39c03fcc 	andi	r7,r7,255
   8c50c:	48000826 	beq	r9,zero,8c530 <__ledf2+0x9c>
   8c510:	38001126 	beq	r7,zero,8c558 <__ledf2+0xc4>
   8c514:	00800044 	movi	r2,1
   8c518:	f800283a 	ret
   8c51c:	30d2b03a 	or	r9,r6,r3
   8c520:	483fea26 	beq	r9,zero,8c4cc <__alt_data_end+0xfffcdccc>
   8c524:	00800084 	movi	r2,2
   8c528:	f800283a 	ret
   8c52c:	39c03fcc 	andi	r7,r7,255
   8c530:	39400726 	beq	r7,r5,8c550 <__ledf2+0xbc>
   8c534:	2800081e 	bne	r5,zero,8c558 <__ledf2+0xc4>
   8c538:	00800044 	movi	r2,1
   8c53c:	f800283a 	ret
   8c540:	2292b03a 	or	r9,r4,r10
   8c544:	483fdf26 	beq	r9,zero,8c4c4 <__alt_data_end+0xfffcdcc4>
   8c548:	00800084 	movi	r2,2
   8c54c:	f800283a 	ret
   8c550:	4080030e 	bge	r8,r2,8c560 <__ledf2+0xcc>
   8c554:	383fef26 	beq	r7,zero,8c514 <__alt_data_end+0xfffcdd14>
   8c558:	00bfffc4 	movi	r2,-1
   8c55c:	f800283a 	ret
   8c560:	123feb16 	blt	r2,r8,8c510 <__alt_data_end+0xfffcdd10>
   8c564:	1abff336 	bltu	r3,r10,8c534 <__alt_data_end+0xfffcdd34>
   8c568:	50c00326 	beq	r10,r3,8c578 <__ledf2+0xe4>
   8c56c:	50c0042e 	bgeu	r10,r3,8c580 <__ledf2+0xec>
   8c570:	283fe81e 	bne	r5,zero,8c514 <__alt_data_end+0xfffcdd14>
   8c574:	003ff806 	br	8c558 <__alt_data_end+0xfffcdd58>
   8c578:	313fee36 	bltu	r6,r4,8c534 <__alt_data_end+0xfffcdd34>
   8c57c:	21bffc36 	bltu	r4,r6,8c570 <__alt_data_end+0xfffcdd70>
   8c580:	0005883a 	mov	r2,zero
   8c584:	f800283a 	ret

0008c588 <__muldf3>:
   8c588:	deffee04 	addi	sp,sp,-72
   8c58c:	dd000c15 	stw	r20,48(sp)
   8c590:	2828d53a 	srli	r20,r5,20
   8c594:	ddc00f15 	stw	r23,60(sp)
   8c598:	282ed7fa 	srli	r23,r5,31
   8c59c:	dc000815 	stw	r16,32(sp)
   8c5a0:	04000434 	movhi	r16,16
   8c5a4:	dcc00b15 	stw	r19,44(sp)
   8c5a8:	843fffc4 	addi	r16,r16,-1
   8c5ac:	dfc01115 	stw	ra,68(sp)
   8c5b0:	df001015 	stw	fp,64(sp)
   8c5b4:	dd800e15 	stw	r22,56(sp)
   8c5b8:	dd400d15 	stw	r21,52(sp)
   8c5bc:	dc800a15 	stw	r18,40(sp)
   8c5c0:	dc400915 	stw	r17,36(sp)
   8c5c4:	a501ffcc 	andi	r20,r20,2047
   8c5c8:	2c20703a 	and	r16,r5,r16
   8c5cc:	b827883a 	mov	r19,r23
   8c5d0:	ba403fcc 	andi	r9,r23,255
   8c5d4:	a0006026 	beq	r20,zero,8c758 <__muldf3+0x1d0>
   8c5d8:	0081ffc4 	movi	r2,2047
   8c5dc:	202d883a 	mov	r22,r4
   8c5e0:	a0803626 	beq	r20,r2,8c6bc <__muldf3+0x134>
   8c5e4:	84000434 	orhi	r16,r16,16
   8c5e8:	200ad77a 	srli	r5,r4,29
   8c5ec:	800490fa 	slli	r2,r16,3
   8c5f0:	202c90fa 	slli	r22,r4,3
   8c5f4:	a53f0044 	addi	r20,r20,-1023
   8c5f8:	28a0b03a 	or	r16,r5,r2
   8c5fc:	002b883a 	mov	r21,zero
   8c600:	000b883a 	mov	r5,zero
   8c604:	3804d53a 	srli	r2,r7,20
   8c608:	3838d7fa 	srli	fp,r7,31
   8c60c:	04400434 	movhi	r17,16
   8c610:	8c7fffc4 	addi	r17,r17,-1
   8c614:	1081ffcc 	andi	r2,r2,2047
   8c618:	3025883a 	mov	r18,r6
   8c61c:	3c62703a 	and	r17,r7,r17
   8c620:	e2803fcc 	andi	r10,fp,255
   8c624:	10006d26 	beq	r2,zero,8c7dc <__muldf3+0x254>
   8c628:	00c1ffc4 	movi	r3,2047
   8c62c:	10c06526 	beq	r2,r3,8c7c4 <__muldf3+0x23c>
   8c630:	8c400434 	orhi	r17,r17,16
   8c634:	300ed77a 	srli	r7,r6,29
   8c638:	880690fa 	slli	r3,r17,3
   8c63c:	302490fa 	slli	r18,r6,3
   8c640:	10bf0044 	addi	r2,r2,-1023
   8c644:	38e2b03a 	or	r17,r7,r3
   8c648:	000f883a 	mov	r7,zero
   8c64c:	a087883a 	add	r3,r20,r2
   8c650:	010003c4 	movi	r4,15
   8c654:	3d44b03a 	or	r2,r7,r21
   8c658:	e5ccf03a 	xor	r6,fp,r23
   8c65c:	1a000044 	addi	r8,r3,1
   8c660:	20809b36 	bltu	r4,r2,8c8d0 <__muldf3+0x348>
   8c664:	100490ba 	slli	r2,r2,2
   8c668:	01000274 	movhi	r4,9
   8c66c:	21319f04 	addi	r4,r4,-14724
   8c670:	1105883a 	add	r2,r2,r4
   8c674:	10800017 	ldw	r2,0(r2)
   8c678:	1000683a 	jmp	r2
   8c67c:	0008c8d0 	cmplti	zero,zero,8995
   8c680:	0008c6dc 	xori	zero,zero,8987
   8c684:	0008c6dc 	xori	zero,zero,8987
   8c688:	0008c6d8 	cmpnei	zero,zero,8987
   8c68c:	0008c8ac 	andhi	zero,zero,8994
   8c690:	0008c8ac 	andhi	zero,zero,8994
   8c694:	0008c894 	movui	zero,8994
   8c698:	0008c6d8 	cmpnei	zero,zero,8987
   8c69c:	0008c8ac 	andhi	zero,zero,8994
   8c6a0:	0008c894 	movui	zero,8994
   8c6a4:	0008c8ac 	andhi	zero,zero,8994
   8c6a8:	0008c6d8 	cmpnei	zero,zero,8987
   8c6ac:	0008c8bc 	xorhi	zero,zero,8994
   8c6b0:	0008c8bc 	xorhi	zero,zero,8994
   8c6b4:	0008c8bc 	xorhi	zero,zero,8994
   8c6b8:	0008cc1c 	xori	zero,zero,9008
   8c6bc:	2404b03a 	or	r2,r4,r16
   8c6c0:	1000711e 	bne	r2,zero,8c888 <__muldf3+0x300>
   8c6c4:	05400204 	movi	r21,8
   8c6c8:	0021883a 	mov	r16,zero
   8c6cc:	002d883a 	mov	r22,zero
   8c6d0:	01400084 	movi	r5,2
   8c6d4:	003fcb06 	br	8c604 <__alt_data_end+0xfffcde04>
   8c6d8:	500d883a 	mov	r6,r10
   8c6dc:	00800084 	movi	r2,2
   8c6e0:	38805926 	beq	r7,r2,8c848 <__muldf3+0x2c0>
   8c6e4:	008000c4 	movi	r2,3
   8c6e8:	3881bb26 	beq	r7,r2,8cdd8 <__muldf3+0x850>
   8c6ec:	00800044 	movi	r2,1
   8c6f0:	3881961e 	bne	r7,r2,8cd4c <__muldf3+0x7c4>
   8c6f4:	3027883a 	mov	r19,r6
   8c6f8:	0005883a 	mov	r2,zero
   8c6fc:	0021883a 	mov	r16,zero
   8c700:	002d883a 	mov	r22,zero
   8c704:	1004953a 	slli	r2,r2,20
   8c708:	98c03fcc 	andi	r3,r19,255
   8c70c:	04400434 	movhi	r17,16
   8c710:	8c7fffc4 	addi	r17,r17,-1
   8c714:	180697fa 	slli	r3,r3,31
   8c718:	8460703a 	and	r16,r16,r17
   8c71c:	80a0b03a 	or	r16,r16,r2
   8c720:	80c6b03a 	or	r3,r16,r3
   8c724:	b005883a 	mov	r2,r22
   8c728:	dfc01117 	ldw	ra,68(sp)
   8c72c:	df001017 	ldw	fp,64(sp)
   8c730:	ddc00f17 	ldw	r23,60(sp)
   8c734:	dd800e17 	ldw	r22,56(sp)
   8c738:	dd400d17 	ldw	r21,52(sp)
   8c73c:	dd000c17 	ldw	r20,48(sp)
   8c740:	dcc00b17 	ldw	r19,44(sp)
   8c744:	dc800a17 	ldw	r18,40(sp)
   8c748:	dc400917 	ldw	r17,36(sp)
   8c74c:	dc000817 	ldw	r16,32(sp)
   8c750:	dec01204 	addi	sp,sp,72
   8c754:	f800283a 	ret
   8c758:	2404b03a 	or	r2,r4,r16
   8c75c:	202b883a 	mov	r21,r4
   8c760:	10004426 	beq	r2,zero,8c874 <__muldf3+0x2ec>
   8c764:	80015126 	beq	r16,zero,8ccac <__muldf3+0x724>
   8c768:	8009883a 	mov	r4,r16
   8c76c:	d9800715 	stw	r6,28(sp)
   8c770:	d9c00215 	stw	r7,8(sp)
   8c774:	da400415 	stw	r9,16(sp)
   8c778:	008d8f40 	call	8d8f4 <__clzsi2>
   8c77c:	d9800717 	ldw	r6,28(sp)
   8c780:	d9c00217 	ldw	r7,8(sp)
   8c784:	da400417 	ldw	r9,16(sp)
   8c788:	113ffd44 	addi	r4,r2,-11
   8c78c:	00c00704 	movi	r3,28
   8c790:	19014216 	blt	r3,r4,8cc9c <__muldf3+0x714>
   8c794:	00c00744 	movi	r3,29
   8c798:	15bffe04 	addi	r22,r2,-8
   8c79c:	1907c83a 	sub	r3,r3,r4
   8c7a0:	85a0983a 	sll	r16,r16,r22
   8c7a4:	a8c6d83a 	srl	r3,r21,r3
   8c7a8:	adac983a 	sll	r22,r21,r22
   8c7ac:	1c20b03a 	or	r16,r3,r16
   8c7b0:	1080fcc4 	addi	r2,r2,1011
   8c7b4:	00a9c83a 	sub	r20,zero,r2
   8c7b8:	002b883a 	mov	r21,zero
   8c7bc:	000b883a 	mov	r5,zero
   8c7c0:	003f9006 	br	8c604 <__alt_data_end+0xfffcde04>
   8c7c4:	3446b03a 	or	r3,r6,r17
   8c7c8:	1800281e 	bne	r3,zero,8c86c <__muldf3+0x2e4>
   8c7cc:	0023883a 	mov	r17,zero
   8c7d0:	0025883a 	mov	r18,zero
   8c7d4:	01c00084 	movi	r7,2
   8c7d8:	003f9c06 	br	8c64c <__alt_data_end+0xfffcde4c>
   8c7dc:	3446b03a 	or	r3,r6,r17
   8c7e0:	18001e26 	beq	r3,zero,8c85c <__muldf3+0x2d4>
   8c7e4:	88012126 	beq	r17,zero,8cc6c <__muldf3+0x6e4>
   8c7e8:	8809883a 	mov	r4,r17
   8c7ec:	d9400215 	stw	r5,8(sp)
   8c7f0:	d9800715 	stw	r6,28(sp)
   8c7f4:	da400415 	stw	r9,16(sp)
   8c7f8:	da800315 	stw	r10,12(sp)
   8c7fc:	008d8f40 	call	8d8f4 <__clzsi2>
   8c800:	d9400217 	ldw	r5,8(sp)
   8c804:	d9800717 	ldw	r6,28(sp)
   8c808:	da400417 	ldw	r9,16(sp)
   8c80c:	da800317 	ldw	r10,12(sp)
   8c810:	113ffd44 	addi	r4,r2,-11
   8c814:	00c00704 	movi	r3,28
   8c818:	19011016 	blt	r3,r4,8cc5c <__muldf3+0x6d4>
   8c81c:	00c00744 	movi	r3,29
   8c820:	14bffe04 	addi	r18,r2,-8
   8c824:	1907c83a 	sub	r3,r3,r4
   8c828:	8ca2983a 	sll	r17,r17,r18
   8c82c:	30c6d83a 	srl	r3,r6,r3
   8c830:	34a4983a 	sll	r18,r6,r18
   8c834:	1c62b03a 	or	r17,r3,r17
   8c838:	1080fcc4 	addi	r2,r2,1011
   8c83c:	0085c83a 	sub	r2,zero,r2
   8c840:	000f883a 	mov	r7,zero
   8c844:	003f8106 	br	8c64c <__alt_data_end+0xfffcde4c>
   8c848:	3027883a 	mov	r19,r6
   8c84c:	0081ffc4 	movi	r2,2047
   8c850:	0021883a 	mov	r16,zero
   8c854:	002d883a 	mov	r22,zero
   8c858:	003faa06 	br	8c704 <__alt_data_end+0xfffcdf04>
   8c85c:	0023883a 	mov	r17,zero
   8c860:	0025883a 	mov	r18,zero
   8c864:	01c00044 	movi	r7,1
   8c868:	003f7806 	br	8c64c <__alt_data_end+0xfffcde4c>
   8c86c:	01c000c4 	movi	r7,3
   8c870:	003f7606 	br	8c64c <__alt_data_end+0xfffcde4c>
   8c874:	05400104 	movi	r21,4
   8c878:	0021883a 	mov	r16,zero
   8c87c:	002d883a 	mov	r22,zero
   8c880:	01400044 	movi	r5,1
   8c884:	003f5f06 	br	8c604 <__alt_data_end+0xfffcde04>
   8c888:	05400304 	movi	r21,12
   8c88c:	014000c4 	movi	r5,3
   8c890:	003f5c06 	br	8c604 <__alt_data_end+0xfffcde04>
   8c894:	04000434 	movhi	r16,16
   8c898:	0027883a 	mov	r19,zero
   8c89c:	843fffc4 	addi	r16,r16,-1
   8c8a0:	05bfffc4 	movi	r22,-1
   8c8a4:	0081ffc4 	movi	r2,2047
   8c8a8:	003f9606 	br	8c704 <__alt_data_end+0xfffcdf04>
   8c8ac:	8023883a 	mov	r17,r16
   8c8b0:	b025883a 	mov	r18,r22
   8c8b4:	280f883a 	mov	r7,r5
   8c8b8:	003f8806 	br	8c6dc <__alt_data_end+0xfffcdedc>
   8c8bc:	8023883a 	mov	r17,r16
   8c8c0:	b025883a 	mov	r18,r22
   8c8c4:	480d883a 	mov	r6,r9
   8c8c8:	280f883a 	mov	r7,r5
   8c8cc:	003f8306 	br	8c6dc <__alt_data_end+0xfffcdedc>
   8c8d0:	b026d43a 	srli	r19,r22,16
   8c8d4:	902ed43a 	srli	r23,r18,16
   8c8d8:	b5bfffcc 	andi	r22,r22,65535
   8c8dc:	94bfffcc 	andi	r18,r18,65535
   8c8e0:	b00b883a 	mov	r5,r22
   8c8e4:	9009883a 	mov	r4,r18
   8c8e8:	d8c00515 	stw	r3,20(sp)
   8c8ec:	d9800715 	stw	r6,28(sp)
   8c8f0:	da000615 	stw	r8,24(sp)
   8c8f4:	008b08c0 	call	8b08c <__mulsi3>
   8c8f8:	980b883a 	mov	r5,r19
   8c8fc:	9009883a 	mov	r4,r18
   8c900:	1029883a 	mov	r20,r2
   8c904:	008b08c0 	call	8b08c <__mulsi3>
   8c908:	b80b883a 	mov	r5,r23
   8c90c:	9809883a 	mov	r4,r19
   8c910:	102b883a 	mov	r21,r2
   8c914:	008b08c0 	call	8b08c <__mulsi3>
   8c918:	b809883a 	mov	r4,r23
   8c91c:	b00b883a 	mov	r5,r22
   8c920:	1039883a 	mov	fp,r2
   8c924:	008b08c0 	call	8b08c <__mulsi3>
   8c928:	a008d43a 	srli	r4,r20,16
   8c92c:	1545883a 	add	r2,r2,r21
   8c930:	d8c00517 	ldw	r3,20(sp)
   8c934:	2085883a 	add	r2,r4,r2
   8c938:	d9800717 	ldw	r6,28(sp)
   8c93c:	da000617 	ldw	r8,24(sp)
   8c940:	1540022e 	bgeu	r2,r21,8c94c <__muldf3+0x3c4>
   8c944:	01000074 	movhi	r4,1
   8c948:	e139883a 	add	fp,fp,r4
   8c94c:	100e943a 	slli	r7,r2,16
   8c950:	1004d43a 	srli	r2,r2,16
   8c954:	882ad43a 	srli	r21,r17,16
   8c958:	a53fffcc 	andi	r20,r20,65535
   8c95c:	8c7fffcc 	andi	r17,r17,65535
   8c960:	3d29883a 	add	r20,r7,r20
   8c964:	b00b883a 	mov	r5,r22
   8c968:	8809883a 	mov	r4,r17
   8c96c:	d8c00515 	stw	r3,20(sp)
   8c970:	d9800715 	stw	r6,28(sp)
   8c974:	da000615 	stw	r8,24(sp)
   8c978:	dd000115 	stw	r20,4(sp)
   8c97c:	d8800015 	stw	r2,0(sp)
   8c980:	008b08c0 	call	8b08c <__mulsi3>
   8c984:	980b883a 	mov	r5,r19
   8c988:	8809883a 	mov	r4,r17
   8c98c:	d8800215 	stw	r2,8(sp)
   8c990:	008b08c0 	call	8b08c <__mulsi3>
   8c994:	9809883a 	mov	r4,r19
   8c998:	a80b883a 	mov	r5,r21
   8c99c:	1029883a 	mov	r20,r2
   8c9a0:	008b08c0 	call	8b08c <__mulsi3>
   8c9a4:	b00b883a 	mov	r5,r22
   8c9a8:	a809883a 	mov	r4,r21
   8c9ac:	d8800415 	stw	r2,16(sp)
   8c9b0:	008b08c0 	call	8b08c <__mulsi3>
   8c9b4:	d9c00217 	ldw	r7,8(sp)
   8c9b8:	1505883a 	add	r2,r2,r20
   8c9bc:	d8c00517 	ldw	r3,20(sp)
   8c9c0:	3826d43a 	srli	r19,r7,16
   8c9c4:	d9800717 	ldw	r6,28(sp)
   8c9c8:	da000617 	ldw	r8,24(sp)
   8c9cc:	9885883a 	add	r2,r19,r2
   8c9d0:	da400417 	ldw	r9,16(sp)
   8c9d4:	1500022e 	bgeu	r2,r20,8c9e0 <__muldf3+0x458>
   8c9d8:	01000074 	movhi	r4,1
   8c9dc:	4913883a 	add	r9,r9,r4
   8c9e0:	1028d43a 	srli	r20,r2,16
   8c9e4:	1004943a 	slli	r2,r2,16
   8c9e8:	802cd43a 	srli	r22,r16,16
   8c9ec:	843fffcc 	andi	r16,r16,65535
   8c9f0:	3cffffcc 	andi	r19,r7,65535
   8c9f4:	9009883a 	mov	r4,r18
   8c9f8:	800b883a 	mov	r5,r16
   8c9fc:	a269883a 	add	r20,r20,r9
   8ca00:	d8c00515 	stw	r3,20(sp)
   8ca04:	d9800715 	stw	r6,28(sp)
   8ca08:	da000615 	stw	r8,24(sp)
   8ca0c:	14e7883a 	add	r19,r2,r19
   8ca10:	008b08c0 	call	8b08c <__mulsi3>
   8ca14:	9009883a 	mov	r4,r18
   8ca18:	b00b883a 	mov	r5,r22
   8ca1c:	d8800315 	stw	r2,12(sp)
   8ca20:	008b08c0 	call	8b08c <__mulsi3>
   8ca24:	b809883a 	mov	r4,r23
   8ca28:	b00b883a 	mov	r5,r22
   8ca2c:	d8800215 	stw	r2,8(sp)
   8ca30:	008b08c0 	call	8b08c <__mulsi3>
   8ca34:	b80b883a 	mov	r5,r23
   8ca38:	8009883a 	mov	r4,r16
   8ca3c:	d8800415 	stw	r2,16(sp)
   8ca40:	008b08c0 	call	8b08c <__mulsi3>
   8ca44:	da800317 	ldw	r10,12(sp)
   8ca48:	d9c00217 	ldw	r7,8(sp)
   8ca4c:	d9000017 	ldw	r4,0(sp)
   8ca50:	502ed43a 	srli	r23,r10,16
   8ca54:	11c5883a 	add	r2,r2,r7
   8ca58:	24e5883a 	add	r18,r4,r19
   8ca5c:	b885883a 	add	r2,r23,r2
   8ca60:	d8c00517 	ldw	r3,20(sp)
   8ca64:	d9800717 	ldw	r6,28(sp)
   8ca68:	da000617 	ldw	r8,24(sp)
   8ca6c:	da400417 	ldw	r9,16(sp)
   8ca70:	11c0022e 	bgeu	r2,r7,8ca7c <__muldf3+0x4f4>
   8ca74:	01000074 	movhi	r4,1
   8ca78:	4913883a 	add	r9,r9,r4
   8ca7c:	100ed43a 	srli	r7,r2,16
   8ca80:	1004943a 	slli	r2,r2,16
   8ca84:	55ffffcc 	andi	r23,r10,65535
   8ca88:	3a53883a 	add	r9,r7,r9
   8ca8c:	8809883a 	mov	r4,r17
   8ca90:	800b883a 	mov	r5,r16
   8ca94:	d8c00515 	stw	r3,20(sp)
   8ca98:	d9800715 	stw	r6,28(sp)
   8ca9c:	da000615 	stw	r8,24(sp)
   8caa0:	da400415 	stw	r9,16(sp)
   8caa4:	15ef883a 	add	r23,r2,r23
   8caa8:	008b08c0 	call	8b08c <__mulsi3>
   8caac:	8809883a 	mov	r4,r17
   8cab0:	b00b883a 	mov	r5,r22
   8cab4:	d8800215 	stw	r2,8(sp)
   8cab8:	008b08c0 	call	8b08c <__mulsi3>
   8cabc:	b00b883a 	mov	r5,r22
   8cac0:	a809883a 	mov	r4,r21
   8cac4:	d8800315 	stw	r2,12(sp)
   8cac8:	008b08c0 	call	8b08c <__mulsi3>
   8cacc:	8009883a 	mov	r4,r16
   8cad0:	a80b883a 	mov	r5,r21
   8cad4:	1023883a 	mov	r17,r2
   8cad8:	008b08c0 	call	8b08c <__mulsi3>
   8cadc:	d9c00217 	ldw	r7,8(sp)
   8cae0:	da800317 	ldw	r10,12(sp)
   8cae4:	d8c00517 	ldw	r3,20(sp)
   8cae8:	3808d43a 	srli	r4,r7,16
   8caec:	1285883a 	add	r2,r2,r10
   8caf0:	d9800717 	ldw	r6,28(sp)
   8caf4:	2085883a 	add	r2,r4,r2
   8caf8:	da000617 	ldw	r8,24(sp)
   8cafc:	da400417 	ldw	r9,16(sp)
   8cb00:	1280022e 	bgeu	r2,r10,8cb0c <__muldf3+0x584>
   8cb04:	01000074 	movhi	r4,1
   8cb08:	8923883a 	add	r17,r17,r4
   8cb0c:	1008943a 	slli	r4,r2,16
   8cb10:	39ffffcc 	andi	r7,r7,65535
   8cb14:	e4b9883a 	add	fp,fp,r18
   8cb18:	21cf883a 	add	r7,r4,r7
   8cb1c:	e4e7803a 	cmpltu	r19,fp,r19
   8cb20:	3d0f883a 	add	r7,r7,r20
   8cb24:	bf39883a 	add	fp,r23,fp
   8cb28:	99c9883a 	add	r4,r19,r7
   8cb2c:	e5ef803a 	cmpltu	r23,fp,r23
   8cb30:	490b883a 	add	r5,r9,r4
   8cb34:	1004d43a 	srli	r2,r2,16
   8cb38:	b965883a 	add	r18,r23,r5
   8cb3c:	24c9803a 	cmpltu	r4,r4,r19
   8cb40:	3d29803a 	cmpltu	r20,r7,r20
   8cb44:	a128b03a 	or	r20,r20,r4
   8cb48:	95ef803a 	cmpltu	r23,r18,r23
   8cb4c:	2a53803a 	cmpltu	r9,r5,r9
   8cb50:	a0a9883a 	add	r20,r20,r2
   8cb54:	4deeb03a 	or	r23,r9,r23
   8cb58:	a5ef883a 	add	r23,r20,r23
   8cb5c:	bc63883a 	add	r17,r23,r17
   8cb60:	e004927a 	slli	r2,fp,9
   8cb64:	d9000117 	ldw	r4,4(sp)
   8cb68:	882e927a 	slli	r23,r17,9
   8cb6c:	9022d5fa 	srli	r17,r18,23
   8cb70:	e038d5fa 	srli	fp,fp,23
   8cb74:	1104b03a 	or	r2,r2,r4
   8cb78:	9024927a 	slli	r18,r18,9
   8cb7c:	1004c03a 	cmpne	r2,r2,zero
   8cb80:	bc62b03a 	or	r17,r23,r17
   8cb84:	1738b03a 	or	fp,r2,fp
   8cb88:	8880402c 	andhi	r2,r17,256
   8cb8c:	e4a4b03a 	or	r18,fp,r18
   8cb90:	10000726 	beq	r2,zero,8cbb0 <__muldf3+0x628>
   8cb94:	9006d07a 	srli	r3,r18,1
   8cb98:	880497fa 	slli	r2,r17,31
   8cb9c:	9480004c 	andi	r18,r18,1
   8cba0:	8822d07a 	srli	r17,r17,1
   8cba4:	1ca4b03a 	or	r18,r3,r18
   8cba8:	14a4b03a 	or	r18,r2,r18
   8cbac:	4007883a 	mov	r3,r8
   8cbb0:	1880ffc4 	addi	r2,r3,1023
   8cbb4:	0080460e 	bge	zero,r2,8ccd0 <__muldf3+0x748>
   8cbb8:	910001cc 	andi	r4,r18,7
   8cbbc:	20000726 	beq	r4,zero,8cbdc <__muldf3+0x654>
   8cbc0:	910003cc 	andi	r4,r18,15
   8cbc4:	01400104 	movi	r5,4
   8cbc8:	21400426 	beq	r4,r5,8cbdc <__muldf3+0x654>
   8cbcc:	9149883a 	add	r4,r18,r5
   8cbd0:	24a5803a 	cmpltu	r18,r4,r18
   8cbd4:	8ca3883a 	add	r17,r17,r18
   8cbd8:	2025883a 	mov	r18,r4
   8cbdc:	8900402c 	andhi	r4,r17,256
   8cbe0:	20000426 	beq	r4,zero,8cbf4 <__muldf3+0x66c>
   8cbe4:	18810004 	addi	r2,r3,1024
   8cbe8:	00ffc034 	movhi	r3,65280
   8cbec:	18ffffc4 	addi	r3,r3,-1
   8cbf0:	88e2703a 	and	r17,r17,r3
   8cbf4:	00c1ff84 	movi	r3,2046
   8cbf8:	18bf1316 	blt	r3,r2,8c848 <__alt_data_end+0xfffce048>
   8cbfc:	882c977a 	slli	r22,r17,29
   8cc00:	9024d0fa 	srli	r18,r18,3
   8cc04:	8822927a 	slli	r17,r17,9
   8cc08:	1081ffcc 	andi	r2,r2,2047
   8cc0c:	b4acb03a 	or	r22,r22,r18
   8cc10:	8820d33a 	srli	r16,r17,12
   8cc14:	3027883a 	mov	r19,r6
   8cc18:	003eba06 	br	8c704 <__alt_data_end+0xfffcdf04>
   8cc1c:	8080022c 	andhi	r2,r16,8
   8cc20:	10000926 	beq	r2,zero,8cc48 <__muldf3+0x6c0>
   8cc24:	8880022c 	andhi	r2,r17,8
   8cc28:	1000071e 	bne	r2,zero,8cc48 <__muldf3+0x6c0>
   8cc2c:	00800434 	movhi	r2,16
   8cc30:	8c000234 	orhi	r16,r17,8
   8cc34:	10bfffc4 	addi	r2,r2,-1
   8cc38:	e027883a 	mov	r19,fp
   8cc3c:	80a0703a 	and	r16,r16,r2
   8cc40:	902d883a 	mov	r22,r18
   8cc44:	003f1706 	br	8c8a4 <__alt_data_end+0xfffce0a4>
   8cc48:	00800434 	movhi	r2,16
   8cc4c:	84000234 	orhi	r16,r16,8
   8cc50:	10bfffc4 	addi	r2,r2,-1
   8cc54:	80a0703a 	and	r16,r16,r2
   8cc58:	003f1206 	br	8c8a4 <__alt_data_end+0xfffce0a4>
   8cc5c:	147ff604 	addi	r17,r2,-40
   8cc60:	3462983a 	sll	r17,r6,r17
   8cc64:	0025883a 	mov	r18,zero
   8cc68:	003ef306 	br	8c838 <__alt_data_end+0xfffce038>
   8cc6c:	3009883a 	mov	r4,r6
   8cc70:	d9400215 	stw	r5,8(sp)
   8cc74:	d9800715 	stw	r6,28(sp)
   8cc78:	da400415 	stw	r9,16(sp)
   8cc7c:	da800315 	stw	r10,12(sp)
   8cc80:	008d8f40 	call	8d8f4 <__clzsi2>
   8cc84:	10800804 	addi	r2,r2,32
   8cc88:	da800317 	ldw	r10,12(sp)
   8cc8c:	da400417 	ldw	r9,16(sp)
   8cc90:	d9800717 	ldw	r6,28(sp)
   8cc94:	d9400217 	ldw	r5,8(sp)
   8cc98:	003edd06 	br	8c810 <__alt_data_end+0xfffce010>
   8cc9c:	143ff604 	addi	r16,r2,-40
   8cca0:	ac20983a 	sll	r16,r21,r16
   8cca4:	002d883a 	mov	r22,zero
   8cca8:	003ec106 	br	8c7b0 <__alt_data_end+0xfffcdfb0>
   8ccac:	d9800715 	stw	r6,28(sp)
   8ccb0:	d9c00215 	stw	r7,8(sp)
   8ccb4:	da400415 	stw	r9,16(sp)
   8ccb8:	008d8f40 	call	8d8f4 <__clzsi2>
   8ccbc:	10800804 	addi	r2,r2,32
   8ccc0:	da400417 	ldw	r9,16(sp)
   8ccc4:	d9c00217 	ldw	r7,8(sp)
   8ccc8:	d9800717 	ldw	r6,28(sp)
   8cccc:	003eae06 	br	8c788 <__alt_data_end+0xfffcdf88>
   8ccd0:	00c00044 	movi	r3,1
   8ccd4:	1887c83a 	sub	r3,r3,r2
   8ccd8:	01000e04 	movi	r4,56
   8ccdc:	20fe8516 	blt	r4,r3,8c6f4 <__alt_data_end+0xfffcdef4>
   8cce0:	010007c4 	movi	r4,31
   8cce4:	20c01b16 	blt	r4,r3,8cd54 <__muldf3+0x7cc>
   8cce8:	00800804 	movi	r2,32
   8ccec:	10c5c83a 	sub	r2,r2,r3
   8ccf0:	888a983a 	sll	r5,r17,r2
   8ccf4:	90c8d83a 	srl	r4,r18,r3
   8ccf8:	9084983a 	sll	r2,r18,r2
   8ccfc:	88e2d83a 	srl	r17,r17,r3
   8cd00:	2906b03a 	or	r3,r5,r4
   8cd04:	1004c03a 	cmpne	r2,r2,zero
   8cd08:	1886b03a 	or	r3,r3,r2
   8cd0c:	188001cc 	andi	r2,r3,7
   8cd10:	10000726 	beq	r2,zero,8cd30 <__muldf3+0x7a8>
   8cd14:	188003cc 	andi	r2,r3,15
   8cd18:	01000104 	movi	r4,4
   8cd1c:	11000426 	beq	r2,r4,8cd30 <__muldf3+0x7a8>
   8cd20:	1805883a 	mov	r2,r3
   8cd24:	10c00104 	addi	r3,r2,4
   8cd28:	1885803a 	cmpltu	r2,r3,r2
   8cd2c:	88a3883a 	add	r17,r17,r2
   8cd30:	8880202c 	andhi	r2,r17,128
   8cd34:	10001c26 	beq	r2,zero,8cda8 <__muldf3+0x820>
   8cd38:	3027883a 	mov	r19,r6
   8cd3c:	00800044 	movi	r2,1
   8cd40:	0021883a 	mov	r16,zero
   8cd44:	002d883a 	mov	r22,zero
   8cd48:	003e6e06 	br	8c704 <__alt_data_end+0xfffcdf04>
   8cd4c:	4007883a 	mov	r3,r8
   8cd50:	003f9706 	br	8cbb0 <__alt_data_end+0xfffce3b0>
   8cd54:	017ff844 	movi	r5,-31
   8cd58:	2885c83a 	sub	r2,r5,r2
   8cd5c:	888ad83a 	srl	r5,r17,r2
   8cd60:	00800804 	movi	r2,32
   8cd64:	18801a26 	beq	r3,r2,8cdd0 <__muldf3+0x848>
   8cd68:	01001004 	movi	r4,64
   8cd6c:	20c7c83a 	sub	r3,r4,r3
   8cd70:	88e2983a 	sll	r17,r17,r3
   8cd74:	8ca4b03a 	or	r18,r17,r18
   8cd78:	9004c03a 	cmpne	r2,r18,zero
   8cd7c:	2884b03a 	or	r2,r5,r2
   8cd80:	144001cc 	andi	r17,r2,7
   8cd84:	88000d1e 	bne	r17,zero,8cdbc <__muldf3+0x834>
   8cd88:	0021883a 	mov	r16,zero
   8cd8c:	102cd0fa 	srli	r22,r2,3
   8cd90:	3027883a 	mov	r19,r6
   8cd94:	0005883a 	mov	r2,zero
   8cd98:	b46cb03a 	or	r22,r22,r17
   8cd9c:	003e5906 	br	8c704 <__alt_data_end+0xfffcdf04>
   8cda0:	1007883a 	mov	r3,r2
   8cda4:	0023883a 	mov	r17,zero
   8cda8:	8820927a 	slli	r16,r17,9
   8cdac:	1805883a 	mov	r2,r3
   8cdb0:	8822977a 	slli	r17,r17,29
   8cdb4:	8020d33a 	srli	r16,r16,12
   8cdb8:	003ff406 	br	8cd8c <__alt_data_end+0xfffce58c>
   8cdbc:	10c003cc 	andi	r3,r2,15
   8cdc0:	01000104 	movi	r4,4
   8cdc4:	193ff626 	beq	r3,r4,8cda0 <__alt_data_end+0xfffce5a0>
   8cdc8:	0023883a 	mov	r17,zero
   8cdcc:	003fd506 	br	8cd24 <__alt_data_end+0xfffce524>
   8cdd0:	0023883a 	mov	r17,zero
   8cdd4:	003fe706 	br	8cd74 <__alt_data_end+0xfffce574>
   8cdd8:	00800434 	movhi	r2,16
   8cddc:	8c000234 	orhi	r16,r17,8
   8cde0:	10bfffc4 	addi	r2,r2,-1
   8cde4:	3027883a 	mov	r19,r6
   8cde8:	80a0703a 	and	r16,r16,r2
   8cdec:	902d883a 	mov	r22,r18
   8cdf0:	003eac06 	br	8c8a4 <__alt_data_end+0xfffce0a4>

0008cdf4 <__subdf3>:
   8cdf4:	02000434 	movhi	r8,16
   8cdf8:	423fffc4 	addi	r8,r8,-1
   8cdfc:	defffb04 	addi	sp,sp,-20
   8ce00:	2a14703a 	and	r10,r5,r8
   8ce04:	3812d53a 	srli	r9,r7,20
   8ce08:	3a10703a 	and	r8,r7,r8
   8ce0c:	2006d77a 	srli	r3,r4,29
   8ce10:	3004d77a 	srli	r2,r6,29
   8ce14:	dc000015 	stw	r16,0(sp)
   8ce18:	501490fa 	slli	r10,r10,3
   8ce1c:	2820d53a 	srli	r16,r5,20
   8ce20:	401090fa 	slli	r8,r8,3
   8ce24:	dc800215 	stw	r18,8(sp)
   8ce28:	dc400115 	stw	r17,4(sp)
   8ce2c:	dfc00415 	stw	ra,16(sp)
   8ce30:	202290fa 	slli	r17,r4,3
   8ce34:	dcc00315 	stw	r19,12(sp)
   8ce38:	4a41ffcc 	andi	r9,r9,2047
   8ce3c:	0101ffc4 	movi	r4,2047
   8ce40:	2824d7fa 	srli	r18,r5,31
   8ce44:	8401ffcc 	andi	r16,r16,2047
   8ce48:	50c6b03a 	or	r3,r10,r3
   8ce4c:	380ed7fa 	srli	r7,r7,31
   8ce50:	408ab03a 	or	r5,r8,r2
   8ce54:	300c90fa 	slli	r6,r6,3
   8ce58:	49009626 	beq	r9,r4,8d0b4 <__subdf3+0x2c0>
   8ce5c:	39c0005c 	xori	r7,r7,1
   8ce60:	8245c83a 	sub	r2,r16,r9
   8ce64:	3c807426 	beq	r7,r18,8d038 <__subdf3+0x244>
   8ce68:	0080af0e 	bge	zero,r2,8d128 <__subdf3+0x334>
   8ce6c:	48002a1e 	bne	r9,zero,8cf18 <__subdf3+0x124>
   8ce70:	2988b03a 	or	r4,r5,r6
   8ce74:	20009a1e 	bne	r4,zero,8d0e0 <__subdf3+0x2ec>
   8ce78:	888001cc 	andi	r2,r17,7
   8ce7c:	10000726 	beq	r2,zero,8ce9c <__subdf3+0xa8>
   8ce80:	888003cc 	andi	r2,r17,15
   8ce84:	01000104 	movi	r4,4
   8ce88:	11000426 	beq	r2,r4,8ce9c <__subdf3+0xa8>
   8ce8c:	890b883a 	add	r5,r17,r4
   8ce90:	2c63803a 	cmpltu	r17,r5,r17
   8ce94:	1c47883a 	add	r3,r3,r17
   8ce98:	2823883a 	mov	r17,r5
   8ce9c:	1880202c 	andhi	r2,r3,128
   8cea0:	10005926 	beq	r2,zero,8d008 <__subdf3+0x214>
   8cea4:	84000044 	addi	r16,r16,1
   8cea8:	0081ffc4 	movi	r2,2047
   8ceac:	8080be26 	beq	r16,r2,8d1a8 <__subdf3+0x3b4>
   8ceb0:	017fe034 	movhi	r5,65408
   8ceb4:	297fffc4 	addi	r5,r5,-1
   8ceb8:	1946703a 	and	r3,r3,r5
   8cebc:	1804977a 	slli	r2,r3,29
   8cec0:	1806927a 	slli	r3,r3,9
   8cec4:	8822d0fa 	srli	r17,r17,3
   8cec8:	8401ffcc 	andi	r16,r16,2047
   8cecc:	180ad33a 	srli	r5,r3,12
   8ced0:	9100004c 	andi	r4,r18,1
   8ced4:	1444b03a 	or	r2,r2,r17
   8ced8:	80c1ffcc 	andi	r3,r16,2047
   8cedc:	1820953a 	slli	r16,r3,20
   8cee0:	20c03fcc 	andi	r3,r4,255
   8cee4:	180897fa 	slli	r4,r3,31
   8cee8:	00c00434 	movhi	r3,16
   8ceec:	18ffffc4 	addi	r3,r3,-1
   8cef0:	28c6703a 	and	r3,r5,r3
   8cef4:	1c06b03a 	or	r3,r3,r16
   8cef8:	1906b03a 	or	r3,r3,r4
   8cefc:	dfc00417 	ldw	ra,16(sp)
   8cf00:	dcc00317 	ldw	r19,12(sp)
   8cf04:	dc800217 	ldw	r18,8(sp)
   8cf08:	dc400117 	ldw	r17,4(sp)
   8cf0c:	dc000017 	ldw	r16,0(sp)
   8cf10:	dec00504 	addi	sp,sp,20
   8cf14:	f800283a 	ret
   8cf18:	0101ffc4 	movi	r4,2047
   8cf1c:	813fd626 	beq	r16,r4,8ce78 <__alt_data_end+0xfffce678>
   8cf20:	29402034 	orhi	r5,r5,128
   8cf24:	01000e04 	movi	r4,56
   8cf28:	2080a316 	blt	r4,r2,8d1b8 <__subdf3+0x3c4>
   8cf2c:	010007c4 	movi	r4,31
   8cf30:	2080c616 	blt	r4,r2,8d24c <__subdf3+0x458>
   8cf34:	01000804 	movi	r4,32
   8cf38:	2089c83a 	sub	r4,r4,r2
   8cf3c:	2910983a 	sll	r8,r5,r4
   8cf40:	308ed83a 	srl	r7,r6,r2
   8cf44:	3108983a 	sll	r4,r6,r4
   8cf48:	2884d83a 	srl	r2,r5,r2
   8cf4c:	41ccb03a 	or	r6,r8,r7
   8cf50:	2008c03a 	cmpne	r4,r4,zero
   8cf54:	310cb03a 	or	r6,r6,r4
   8cf58:	898dc83a 	sub	r6,r17,r6
   8cf5c:	89a3803a 	cmpltu	r17,r17,r6
   8cf60:	1887c83a 	sub	r3,r3,r2
   8cf64:	1c47c83a 	sub	r3,r3,r17
   8cf68:	3023883a 	mov	r17,r6
   8cf6c:	1880202c 	andhi	r2,r3,128
   8cf70:	10002326 	beq	r2,zero,8d000 <__subdf3+0x20c>
   8cf74:	04c02034 	movhi	r19,128
   8cf78:	9cffffc4 	addi	r19,r19,-1
   8cf7c:	1ce6703a 	and	r19,r3,r19
   8cf80:	98007a26 	beq	r19,zero,8d16c <__subdf3+0x378>
   8cf84:	9809883a 	mov	r4,r19
   8cf88:	008d8f40 	call	8d8f4 <__clzsi2>
   8cf8c:	113ffe04 	addi	r4,r2,-8
   8cf90:	00c007c4 	movi	r3,31
   8cf94:	19007b16 	blt	r3,r4,8d184 <__subdf3+0x390>
   8cf98:	00800804 	movi	r2,32
   8cf9c:	1105c83a 	sub	r2,r2,r4
   8cfa0:	8884d83a 	srl	r2,r17,r2
   8cfa4:	9906983a 	sll	r3,r19,r4
   8cfa8:	8922983a 	sll	r17,r17,r4
   8cfac:	10c4b03a 	or	r2,r2,r3
   8cfb0:	24007816 	blt	r4,r16,8d194 <__subdf3+0x3a0>
   8cfb4:	2421c83a 	sub	r16,r4,r16
   8cfb8:	80c00044 	addi	r3,r16,1
   8cfbc:	010007c4 	movi	r4,31
   8cfc0:	20c09516 	blt	r4,r3,8d218 <__subdf3+0x424>
   8cfc4:	01400804 	movi	r5,32
   8cfc8:	28cbc83a 	sub	r5,r5,r3
   8cfcc:	88c8d83a 	srl	r4,r17,r3
   8cfd0:	8962983a 	sll	r17,r17,r5
   8cfd4:	114a983a 	sll	r5,r2,r5
   8cfd8:	10c6d83a 	srl	r3,r2,r3
   8cfdc:	8804c03a 	cmpne	r2,r17,zero
   8cfe0:	290ab03a 	or	r5,r5,r4
   8cfe4:	28a2b03a 	or	r17,r5,r2
   8cfe8:	0021883a 	mov	r16,zero
   8cfec:	003fa206 	br	8ce78 <__alt_data_end+0xfffce678>
   8cff0:	2090b03a 	or	r8,r4,r2
   8cff4:	40018e26 	beq	r8,zero,8d630 <__subdf3+0x83c>
   8cff8:	1007883a 	mov	r3,r2
   8cffc:	2023883a 	mov	r17,r4
   8d000:	888001cc 	andi	r2,r17,7
   8d004:	103f9e1e 	bne	r2,zero,8ce80 <__alt_data_end+0xfffce680>
   8d008:	1804977a 	slli	r2,r3,29
   8d00c:	8822d0fa 	srli	r17,r17,3
   8d010:	1810d0fa 	srli	r8,r3,3
   8d014:	9100004c 	andi	r4,r18,1
   8d018:	1444b03a 	or	r2,r2,r17
   8d01c:	00c1ffc4 	movi	r3,2047
   8d020:	80c02826 	beq	r16,r3,8d0c4 <__subdf3+0x2d0>
   8d024:	01400434 	movhi	r5,16
   8d028:	297fffc4 	addi	r5,r5,-1
   8d02c:	80e0703a 	and	r16,r16,r3
   8d030:	414a703a 	and	r5,r8,r5
   8d034:	003fa806 	br	8ced8 <__alt_data_end+0xfffce6d8>
   8d038:	0080630e 	bge	zero,r2,8d1c8 <__subdf3+0x3d4>
   8d03c:	48003026 	beq	r9,zero,8d100 <__subdf3+0x30c>
   8d040:	0101ffc4 	movi	r4,2047
   8d044:	813f8c26 	beq	r16,r4,8ce78 <__alt_data_end+0xfffce678>
   8d048:	29402034 	orhi	r5,r5,128
   8d04c:	01000e04 	movi	r4,56
   8d050:	2080a90e 	bge	r4,r2,8d2f8 <__subdf3+0x504>
   8d054:	298cb03a 	or	r6,r5,r6
   8d058:	3012c03a 	cmpne	r9,r6,zero
   8d05c:	0005883a 	mov	r2,zero
   8d060:	4c53883a 	add	r9,r9,r17
   8d064:	4c63803a 	cmpltu	r17,r9,r17
   8d068:	10c7883a 	add	r3,r2,r3
   8d06c:	88c7883a 	add	r3,r17,r3
   8d070:	4823883a 	mov	r17,r9
   8d074:	1880202c 	andhi	r2,r3,128
   8d078:	1000d026 	beq	r2,zero,8d3bc <__subdf3+0x5c8>
   8d07c:	84000044 	addi	r16,r16,1
   8d080:	0081ffc4 	movi	r2,2047
   8d084:	8080fe26 	beq	r16,r2,8d480 <__subdf3+0x68c>
   8d088:	00bfe034 	movhi	r2,65408
   8d08c:	10bfffc4 	addi	r2,r2,-1
   8d090:	1886703a 	and	r3,r3,r2
   8d094:	880ad07a 	srli	r5,r17,1
   8d098:	180497fa 	slli	r2,r3,31
   8d09c:	8900004c 	andi	r4,r17,1
   8d0a0:	2922b03a 	or	r17,r5,r4
   8d0a4:	1806d07a 	srli	r3,r3,1
   8d0a8:	1462b03a 	or	r17,r2,r17
   8d0ac:	3825883a 	mov	r18,r7
   8d0b0:	003f7106 	br	8ce78 <__alt_data_end+0xfffce678>
   8d0b4:	2984b03a 	or	r2,r5,r6
   8d0b8:	103f6826 	beq	r2,zero,8ce5c <__alt_data_end+0xfffce65c>
   8d0bc:	39c03fcc 	andi	r7,r7,255
   8d0c0:	003f6706 	br	8ce60 <__alt_data_end+0xfffce660>
   8d0c4:	4086b03a 	or	r3,r8,r2
   8d0c8:	18015226 	beq	r3,zero,8d614 <__subdf3+0x820>
   8d0cc:	00c00434 	movhi	r3,16
   8d0d0:	41400234 	orhi	r5,r8,8
   8d0d4:	18ffffc4 	addi	r3,r3,-1
   8d0d8:	28ca703a 	and	r5,r5,r3
   8d0dc:	003f7e06 	br	8ced8 <__alt_data_end+0xfffce6d8>
   8d0e0:	10bfffc4 	addi	r2,r2,-1
   8d0e4:	1000491e 	bne	r2,zero,8d20c <__subdf3+0x418>
   8d0e8:	898fc83a 	sub	r7,r17,r6
   8d0ec:	89e3803a 	cmpltu	r17,r17,r7
   8d0f0:	1947c83a 	sub	r3,r3,r5
   8d0f4:	1c47c83a 	sub	r3,r3,r17
   8d0f8:	3823883a 	mov	r17,r7
   8d0fc:	003f9b06 	br	8cf6c <__alt_data_end+0xfffce76c>
   8d100:	2988b03a 	or	r4,r5,r6
   8d104:	203f5c26 	beq	r4,zero,8ce78 <__alt_data_end+0xfffce678>
   8d108:	10bfffc4 	addi	r2,r2,-1
   8d10c:	1000931e 	bne	r2,zero,8d35c <__subdf3+0x568>
   8d110:	898d883a 	add	r6,r17,r6
   8d114:	3463803a 	cmpltu	r17,r6,r17
   8d118:	1947883a 	add	r3,r3,r5
   8d11c:	88c7883a 	add	r3,r17,r3
   8d120:	3023883a 	mov	r17,r6
   8d124:	003fd306 	br	8d074 <__alt_data_end+0xfffce874>
   8d128:	1000541e 	bne	r2,zero,8d27c <__subdf3+0x488>
   8d12c:	80800044 	addi	r2,r16,1
   8d130:	1081ffcc 	andi	r2,r2,2047
   8d134:	01000044 	movi	r4,1
   8d138:	2080a20e 	bge	r4,r2,8d3c4 <__subdf3+0x5d0>
   8d13c:	8989c83a 	sub	r4,r17,r6
   8d140:	8905803a 	cmpltu	r2,r17,r4
   8d144:	1967c83a 	sub	r19,r3,r5
   8d148:	98a7c83a 	sub	r19,r19,r2
   8d14c:	9880202c 	andhi	r2,r19,128
   8d150:	10006326 	beq	r2,zero,8d2e0 <__subdf3+0x4ec>
   8d154:	3463c83a 	sub	r17,r6,r17
   8d158:	28c7c83a 	sub	r3,r5,r3
   8d15c:	344d803a 	cmpltu	r6,r6,r17
   8d160:	19a7c83a 	sub	r19,r3,r6
   8d164:	3825883a 	mov	r18,r7
   8d168:	983f861e 	bne	r19,zero,8cf84 <__alt_data_end+0xfffce784>
   8d16c:	8809883a 	mov	r4,r17
   8d170:	008d8f40 	call	8d8f4 <__clzsi2>
   8d174:	10800804 	addi	r2,r2,32
   8d178:	113ffe04 	addi	r4,r2,-8
   8d17c:	00c007c4 	movi	r3,31
   8d180:	193f850e 	bge	r3,r4,8cf98 <__alt_data_end+0xfffce798>
   8d184:	10bff604 	addi	r2,r2,-40
   8d188:	8884983a 	sll	r2,r17,r2
   8d18c:	0023883a 	mov	r17,zero
   8d190:	243f880e 	bge	r4,r16,8cfb4 <__alt_data_end+0xfffce7b4>
   8d194:	00ffe034 	movhi	r3,65408
   8d198:	18ffffc4 	addi	r3,r3,-1
   8d19c:	8121c83a 	sub	r16,r16,r4
   8d1a0:	10c6703a 	and	r3,r2,r3
   8d1a4:	003f3406 	br	8ce78 <__alt_data_end+0xfffce678>
   8d1a8:	9100004c 	andi	r4,r18,1
   8d1ac:	000b883a 	mov	r5,zero
   8d1b0:	0005883a 	mov	r2,zero
   8d1b4:	003f4806 	br	8ced8 <__alt_data_end+0xfffce6d8>
   8d1b8:	298cb03a 	or	r6,r5,r6
   8d1bc:	300cc03a 	cmpne	r6,r6,zero
   8d1c0:	0005883a 	mov	r2,zero
   8d1c4:	003f6406 	br	8cf58 <__alt_data_end+0xfffce758>
   8d1c8:	10009a1e 	bne	r2,zero,8d434 <__subdf3+0x640>
   8d1cc:	82400044 	addi	r9,r16,1
   8d1d0:	4881ffcc 	andi	r2,r9,2047
   8d1d4:	02800044 	movi	r10,1
   8d1d8:	5080670e 	bge	r10,r2,8d378 <__subdf3+0x584>
   8d1dc:	0081ffc4 	movi	r2,2047
   8d1e0:	4880af26 	beq	r9,r2,8d4a0 <__subdf3+0x6ac>
   8d1e4:	898d883a 	add	r6,r17,r6
   8d1e8:	1945883a 	add	r2,r3,r5
   8d1ec:	3447803a 	cmpltu	r3,r6,r17
   8d1f0:	1887883a 	add	r3,r3,r2
   8d1f4:	182297fa 	slli	r17,r3,31
   8d1f8:	300cd07a 	srli	r6,r6,1
   8d1fc:	1806d07a 	srli	r3,r3,1
   8d200:	4821883a 	mov	r16,r9
   8d204:	89a2b03a 	or	r17,r17,r6
   8d208:	003f1b06 	br	8ce78 <__alt_data_end+0xfffce678>
   8d20c:	0101ffc4 	movi	r4,2047
   8d210:	813f441e 	bne	r16,r4,8cf24 <__alt_data_end+0xfffce724>
   8d214:	003f1806 	br	8ce78 <__alt_data_end+0xfffce678>
   8d218:	843ff844 	addi	r16,r16,-31
   8d21c:	01400804 	movi	r5,32
   8d220:	1408d83a 	srl	r4,r2,r16
   8d224:	19405026 	beq	r3,r5,8d368 <__subdf3+0x574>
   8d228:	01401004 	movi	r5,64
   8d22c:	28c7c83a 	sub	r3,r5,r3
   8d230:	10c4983a 	sll	r2,r2,r3
   8d234:	88a2b03a 	or	r17,r17,r2
   8d238:	8822c03a 	cmpne	r17,r17,zero
   8d23c:	2462b03a 	or	r17,r4,r17
   8d240:	0007883a 	mov	r3,zero
   8d244:	0021883a 	mov	r16,zero
   8d248:	003f6d06 	br	8d000 <__alt_data_end+0xfffce800>
   8d24c:	11fff804 	addi	r7,r2,-32
   8d250:	01000804 	movi	r4,32
   8d254:	29ced83a 	srl	r7,r5,r7
   8d258:	11004526 	beq	r2,r4,8d370 <__subdf3+0x57c>
   8d25c:	01001004 	movi	r4,64
   8d260:	2089c83a 	sub	r4,r4,r2
   8d264:	2904983a 	sll	r2,r5,r4
   8d268:	118cb03a 	or	r6,r2,r6
   8d26c:	300cc03a 	cmpne	r6,r6,zero
   8d270:	398cb03a 	or	r6,r7,r6
   8d274:	0005883a 	mov	r2,zero
   8d278:	003f3706 	br	8cf58 <__alt_data_end+0xfffce758>
   8d27c:	80002a26 	beq	r16,zero,8d328 <__subdf3+0x534>
   8d280:	0101ffc4 	movi	r4,2047
   8d284:	49006626 	beq	r9,r4,8d420 <__subdf3+0x62c>
   8d288:	0085c83a 	sub	r2,zero,r2
   8d28c:	18c02034 	orhi	r3,r3,128
   8d290:	01000e04 	movi	r4,56
   8d294:	20807e16 	blt	r4,r2,8d490 <__subdf3+0x69c>
   8d298:	010007c4 	movi	r4,31
   8d29c:	2080e716 	blt	r4,r2,8d63c <__subdf3+0x848>
   8d2a0:	01000804 	movi	r4,32
   8d2a4:	2089c83a 	sub	r4,r4,r2
   8d2a8:	1914983a 	sll	r10,r3,r4
   8d2ac:	8890d83a 	srl	r8,r17,r2
   8d2b0:	8908983a 	sll	r4,r17,r4
   8d2b4:	1884d83a 	srl	r2,r3,r2
   8d2b8:	5222b03a 	or	r17,r10,r8
   8d2bc:	2006c03a 	cmpne	r3,r4,zero
   8d2c0:	88e2b03a 	or	r17,r17,r3
   8d2c4:	3463c83a 	sub	r17,r6,r17
   8d2c8:	2885c83a 	sub	r2,r5,r2
   8d2cc:	344d803a 	cmpltu	r6,r6,r17
   8d2d0:	1187c83a 	sub	r3,r2,r6
   8d2d4:	4821883a 	mov	r16,r9
   8d2d8:	3825883a 	mov	r18,r7
   8d2dc:	003f2306 	br	8cf6c <__alt_data_end+0xfffce76c>
   8d2e0:	24d0b03a 	or	r8,r4,r19
   8d2e4:	40001b1e 	bne	r8,zero,8d354 <__subdf3+0x560>
   8d2e8:	0005883a 	mov	r2,zero
   8d2ec:	0009883a 	mov	r4,zero
   8d2f0:	0021883a 	mov	r16,zero
   8d2f4:	003f4906 	br	8d01c <__alt_data_end+0xfffce81c>
   8d2f8:	010007c4 	movi	r4,31
   8d2fc:	20803a16 	blt	r4,r2,8d3e8 <__subdf3+0x5f4>
   8d300:	01000804 	movi	r4,32
   8d304:	2089c83a 	sub	r4,r4,r2
   8d308:	2912983a 	sll	r9,r5,r4
   8d30c:	3090d83a 	srl	r8,r6,r2
   8d310:	3108983a 	sll	r4,r6,r4
   8d314:	2884d83a 	srl	r2,r5,r2
   8d318:	4a12b03a 	or	r9,r9,r8
   8d31c:	2008c03a 	cmpne	r4,r4,zero
   8d320:	4912b03a 	or	r9,r9,r4
   8d324:	003f4e06 	br	8d060 <__alt_data_end+0xfffce860>
   8d328:	1c48b03a 	or	r4,r3,r17
   8d32c:	20003c26 	beq	r4,zero,8d420 <__subdf3+0x62c>
   8d330:	0084303a 	nor	r2,zero,r2
   8d334:	1000381e 	bne	r2,zero,8d418 <__subdf3+0x624>
   8d338:	3463c83a 	sub	r17,r6,r17
   8d33c:	28c5c83a 	sub	r2,r5,r3
   8d340:	344d803a 	cmpltu	r6,r6,r17
   8d344:	1187c83a 	sub	r3,r2,r6
   8d348:	4821883a 	mov	r16,r9
   8d34c:	3825883a 	mov	r18,r7
   8d350:	003f0606 	br	8cf6c <__alt_data_end+0xfffce76c>
   8d354:	2023883a 	mov	r17,r4
   8d358:	003f0906 	br	8cf80 <__alt_data_end+0xfffce780>
   8d35c:	0101ffc4 	movi	r4,2047
   8d360:	813f3a1e 	bne	r16,r4,8d04c <__alt_data_end+0xfffce84c>
   8d364:	003ec406 	br	8ce78 <__alt_data_end+0xfffce678>
   8d368:	0005883a 	mov	r2,zero
   8d36c:	003fb106 	br	8d234 <__alt_data_end+0xfffcea34>
   8d370:	0005883a 	mov	r2,zero
   8d374:	003fbc06 	br	8d268 <__alt_data_end+0xfffcea68>
   8d378:	1c44b03a 	or	r2,r3,r17
   8d37c:	80008e1e 	bne	r16,zero,8d5b8 <__subdf3+0x7c4>
   8d380:	1000c826 	beq	r2,zero,8d6a4 <__subdf3+0x8b0>
   8d384:	2984b03a 	or	r2,r5,r6
   8d388:	103ebb26 	beq	r2,zero,8ce78 <__alt_data_end+0xfffce678>
   8d38c:	8989883a 	add	r4,r17,r6
   8d390:	1945883a 	add	r2,r3,r5
   8d394:	2447803a 	cmpltu	r3,r4,r17
   8d398:	1887883a 	add	r3,r3,r2
   8d39c:	1880202c 	andhi	r2,r3,128
   8d3a0:	2023883a 	mov	r17,r4
   8d3a4:	103f1626 	beq	r2,zero,8d000 <__alt_data_end+0xfffce800>
   8d3a8:	00bfe034 	movhi	r2,65408
   8d3ac:	10bfffc4 	addi	r2,r2,-1
   8d3b0:	5021883a 	mov	r16,r10
   8d3b4:	1886703a 	and	r3,r3,r2
   8d3b8:	003eaf06 	br	8ce78 <__alt_data_end+0xfffce678>
   8d3bc:	3825883a 	mov	r18,r7
   8d3c0:	003f0f06 	br	8d000 <__alt_data_end+0xfffce800>
   8d3c4:	1c44b03a 	or	r2,r3,r17
   8d3c8:	8000251e 	bne	r16,zero,8d460 <__subdf3+0x66c>
   8d3cc:	1000661e 	bne	r2,zero,8d568 <__subdf3+0x774>
   8d3d0:	2990b03a 	or	r8,r5,r6
   8d3d4:	40009626 	beq	r8,zero,8d630 <__subdf3+0x83c>
   8d3d8:	2807883a 	mov	r3,r5
   8d3dc:	3023883a 	mov	r17,r6
   8d3e0:	3825883a 	mov	r18,r7
   8d3e4:	003ea406 	br	8ce78 <__alt_data_end+0xfffce678>
   8d3e8:	127ff804 	addi	r9,r2,-32
   8d3ec:	01000804 	movi	r4,32
   8d3f0:	2a52d83a 	srl	r9,r5,r9
   8d3f4:	11008c26 	beq	r2,r4,8d628 <__subdf3+0x834>
   8d3f8:	01001004 	movi	r4,64
   8d3fc:	2085c83a 	sub	r2,r4,r2
   8d400:	2884983a 	sll	r2,r5,r2
   8d404:	118cb03a 	or	r6,r2,r6
   8d408:	300cc03a 	cmpne	r6,r6,zero
   8d40c:	4992b03a 	or	r9,r9,r6
   8d410:	0005883a 	mov	r2,zero
   8d414:	003f1206 	br	8d060 <__alt_data_end+0xfffce860>
   8d418:	0101ffc4 	movi	r4,2047
   8d41c:	493f9c1e 	bne	r9,r4,8d290 <__alt_data_end+0xfffcea90>
   8d420:	2807883a 	mov	r3,r5
   8d424:	3023883a 	mov	r17,r6
   8d428:	4821883a 	mov	r16,r9
   8d42c:	3825883a 	mov	r18,r7
   8d430:	003e9106 	br	8ce78 <__alt_data_end+0xfffce678>
   8d434:	80001f1e 	bne	r16,zero,8d4b4 <__subdf3+0x6c0>
   8d438:	1c48b03a 	or	r4,r3,r17
   8d43c:	20005a26 	beq	r4,zero,8d5a8 <__subdf3+0x7b4>
   8d440:	0084303a 	nor	r2,zero,r2
   8d444:	1000561e 	bne	r2,zero,8d5a0 <__subdf3+0x7ac>
   8d448:	89a3883a 	add	r17,r17,r6
   8d44c:	1945883a 	add	r2,r3,r5
   8d450:	898d803a 	cmpltu	r6,r17,r6
   8d454:	3087883a 	add	r3,r6,r2
   8d458:	4821883a 	mov	r16,r9
   8d45c:	003f0506 	br	8d074 <__alt_data_end+0xfffce874>
   8d460:	10002b1e 	bne	r2,zero,8d510 <__subdf3+0x71c>
   8d464:	2984b03a 	or	r2,r5,r6
   8d468:	10008026 	beq	r2,zero,8d66c <__subdf3+0x878>
   8d46c:	2807883a 	mov	r3,r5
   8d470:	3023883a 	mov	r17,r6
   8d474:	3825883a 	mov	r18,r7
   8d478:	0401ffc4 	movi	r16,2047
   8d47c:	003e7e06 	br	8ce78 <__alt_data_end+0xfffce678>
   8d480:	3809883a 	mov	r4,r7
   8d484:	0011883a 	mov	r8,zero
   8d488:	0005883a 	mov	r2,zero
   8d48c:	003ee306 	br	8d01c <__alt_data_end+0xfffce81c>
   8d490:	1c62b03a 	or	r17,r3,r17
   8d494:	8822c03a 	cmpne	r17,r17,zero
   8d498:	0005883a 	mov	r2,zero
   8d49c:	003f8906 	br	8d2c4 <__alt_data_end+0xfffceac4>
   8d4a0:	3809883a 	mov	r4,r7
   8d4a4:	4821883a 	mov	r16,r9
   8d4a8:	0011883a 	mov	r8,zero
   8d4ac:	0005883a 	mov	r2,zero
   8d4b0:	003eda06 	br	8d01c <__alt_data_end+0xfffce81c>
   8d4b4:	0101ffc4 	movi	r4,2047
   8d4b8:	49003b26 	beq	r9,r4,8d5a8 <__subdf3+0x7b4>
   8d4bc:	0085c83a 	sub	r2,zero,r2
   8d4c0:	18c02034 	orhi	r3,r3,128
   8d4c4:	01000e04 	movi	r4,56
   8d4c8:	20806e16 	blt	r4,r2,8d684 <__subdf3+0x890>
   8d4cc:	010007c4 	movi	r4,31
   8d4d0:	20807716 	blt	r4,r2,8d6b0 <__subdf3+0x8bc>
   8d4d4:	01000804 	movi	r4,32
   8d4d8:	2089c83a 	sub	r4,r4,r2
   8d4dc:	1914983a 	sll	r10,r3,r4
   8d4e0:	8890d83a 	srl	r8,r17,r2
   8d4e4:	8908983a 	sll	r4,r17,r4
   8d4e8:	1884d83a 	srl	r2,r3,r2
   8d4ec:	5222b03a 	or	r17,r10,r8
   8d4f0:	2006c03a 	cmpne	r3,r4,zero
   8d4f4:	88e2b03a 	or	r17,r17,r3
   8d4f8:	89a3883a 	add	r17,r17,r6
   8d4fc:	1145883a 	add	r2,r2,r5
   8d500:	898d803a 	cmpltu	r6,r17,r6
   8d504:	3087883a 	add	r3,r6,r2
   8d508:	4821883a 	mov	r16,r9
   8d50c:	003ed906 	br	8d074 <__alt_data_end+0xfffce874>
   8d510:	2984b03a 	or	r2,r5,r6
   8d514:	10004226 	beq	r2,zero,8d620 <__subdf3+0x82c>
   8d518:	1808d0fa 	srli	r4,r3,3
   8d51c:	8822d0fa 	srli	r17,r17,3
   8d520:	1806977a 	slli	r3,r3,29
   8d524:	2080022c 	andhi	r2,r4,8
   8d528:	1c62b03a 	or	r17,r3,r17
   8d52c:	10000826 	beq	r2,zero,8d550 <__subdf3+0x75c>
   8d530:	2812d0fa 	srli	r9,r5,3
   8d534:	4880022c 	andhi	r2,r9,8
   8d538:	1000051e 	bne	r2,zero,8d550 <__subdf3+0x75c>
   8d53c:	300cd0fa 	srli	r6,r6,3
   8d540:	2804977a 	slli	r2,r5,29
   8d544:	4809883a 	mov	r4,r9
   8d548:	3825883a 	mov	r18,r7
   8d54c:	11a2b03a 	or	r17,r2,r6
   8d550:	8806d77a 	srli	r3,r17,29
   8d554:	200890fa 	slli	r4,r4,3
   8d558:	882290fa 	slli	r17,r17,3
   8d55c:	0401ffc4 	movi	r16,2047
   8d560:	1906b03a 	or	r3,r3,r4
   8d564:	003e4406 	br	8ce78 <__alt_data_end+0xfffce678>
   8d568:	2984b03a 	or	r2,r5,r6
   8d56c:	103e4226 	beq	r2,zero,8ce78 <__alt_data_end+0xfffce678>
   8d570:	8989c83a 	sub	r4,r17,r6
   8d574:	8911803a 	cmpltu	r8,r17,r4
   8d578:	1945c83a 	sub	r2,r3,r5
   8d57c:	1205c83a 	sub	r2,r2,r8
   8d580:	1200202c 	andhi	r8,r2,128
   8d584:	403e9a26 	beq	r8,zero,8cff0 <__alt_data_end+0xfffce7f0>
   8d588:	3463c83a 	sub	r17,r6,r17
   8d58c:	28c5c83a 	sub	r2,r5,r3
   8d590:	344d803a 	cmpltu	r6,r6,r17
   8d594:	1187c83a 	sub	r3,r2,r6
   8d598:	3825883a 	mov	r18,r7
   8d59c:	003e3606 	br	8ce78 <__alt_data_end+0xfffce678>
   8d5a0:	0101ffc4 	movi	r4,2047
   8d5a4:	493fc71e 	bne	r9,r4,8d4c4 <__alt_data_end+0xfffcecc4>
   8d5a8:	2807883a 	mov	r3,r5
   8d5ac:	3023883a 	mov	r17,r6
   8d5b0:	4821883a 	mov	r16,r9
   8d5b4:	003e3006 	br	8ce78 <__alt_data_end+0xfffce678>
   8d5b8:	10003626 	beq	r2,zero,8d694 <__subdf3+0x8a0>
   8d5bc:	2984b03a 	or	r2,r5,r6
   8d5c0:	10001726 	beq	r2,zero,8d620 <__subdf3+0x82c>
   8d5c4:	1808d0fa 	srli	r4,r3,3
   8d5c8:	8822d0fa 	srli	r17,r17,3
   8d5cc:	1806977a 	slli	r3,r3,29
   8d5d0:	2080022c 	andhi	r2,r4,8
   8d5d4:	1c62b03a 	or	r17,r3,r17
   8d5d8:	10000726 	beq	r2,zero,8d5f8 <__subdf3+0x804>
   8d5dc:	2812d0fa 	srli	r9,r5,3
   8d5e0:	4880022c 	andhi	r2,r9,8
   8d5e4:	1000041e 	bne	r2,zero,8d5f8 <__subdf3+0x804>
   8d5e8:	300cd0fa 	srli	r6,r6,3
   8d5ec:	2804977a 	slli	r2,r5,29
   8d5f0:	4809883a 	mov	r4,r9
   8d5f4:	11a2b03a 	or	r17,r2,r6
   8d5f8:	8806d77a 	srli	r3,r17,29
   8d5fc:	200890fa 	slli	r4,r4,3
   8d600:	882290fa 	slli	r17,r17,3
   8d604:	3825883a 	mov	r18,r7
   8d608:	1906b03a 	or	r3,r3,r4
   8d60c:	0401ffc4 	movi	r16,2047
   8d610:	003e1906 	br	8ce78 <__alt_data_end+0xfffce678>
   8d614:	000b883a 	mov	r5,zero
   8d618:	0005883a 	mov	r2,zero
   8d61c:	003e2e06 	br	8ced8 <__alt_data_end+0xfffce6d8>
   8d620:	0401ffc4 	movi	r16,2047
   8d624:	003e1406 	br	8ce78 <__alt_data_end+0xfffce678>
   8d628:	0005883a 	mov	r2,zero
   8d62c:	003f7506 	br	8d404 <__alt_data_end+0xfffcec04>
   8d630:	0005883a 	mov	r2,zero
   8d634:	0009883a 	mov	r4,zero
   8d638:	003e7806 	br	8d01c <__alt_data_end+0xfffce81c>
   8d63c:	123ff804 	addi	r8,r2,-32
   8d640:	01000804 	movi	r4,32
   8d644:	1a10d83a 	srl	r8,r3,r8
   8d648:	11002526 	beq	r2,r4,8d6e0 <__subdf3+0x8ec>
   8d64c:	01001004 	movi	r4,64
   8d650:	2085c83a 	sub	r2,r4,r2
   8d654:	1884983a 	sll	r2,r3,r2
   8d658:	1444b03a 	or	r2,r2,r17
   8d65c:	1004c03a 	cmpne	r2,r2,zero
   8d660:	40a2b03a 	or	r17,r8,r2
   8d664:	0005883a 	mov	r2,zero
   8d668:	003f1606 	br	8d2c4 <__alt_data_end+0xfffceac4>
   8d66c:	02000434 	movhi	r8,16
   8d670:	0009883a 	mov	r4,zero
   8d674:	423fffc4 	addi	r8,r8,-1
   8d678:	00bfffc4 	movi	r2,-1
   8d67c:	0401ffc4 	movi	r16,2047
   8d680:	003e6606 	br	8d01c <__alt_data_end+0xfffce81c>
   8d684:	1c62b03a 	or	r17,r3,r17
   8d688:	8822c03a 	cmpne	r17,r17,zero
   8d68c:	0005883a 	mov	r2,zero
   8d690:	003f9906 	br	8d4f8 <__alt_data_end+0xfffcecf8>
   8d694:	2807883a 	mov	r3,r5
   8d698:	3023883a 	mov	r17,r6
   8d69c:	0401ffc4 	movi	r16,2047
   8d6a0:	003df506 	br	8ce78 <__alt_data_end+0xfffce678>
   8d6a4:	2807883a 	mov	r3,r5
   8d6a8:	3023883a 	mov	r17,r6
   8d6ac:	003df206 	br	8ce78 <__alt_data_end+0xfffce678>
   8d6b0:	123ff804 	addi	r8,r2,-32
   8d6b4:	01000804 	movi	r4,32
   8d6b8:	1a10d83a 	srl	r8,r3,r8
   8d6bc:	11000a26 	beq	r2,r4,8d6e8 <__subdf3+0x8f4>
   8d6c0:	01001004 	movi	r4,64
   8d6c4:	2085c83a 	sub	r2,r4,r2
   8d6c8:	1884983a 	sll	r2,r3,r2
   8d6cc:	1444b03a 	or	r2,r2,r17
   8d6d0:	1004c03a 	cmpne	r2,r2,zero
   8d6d4:	40a2b03a 	or	r17,r8,r2
   8d6d8:	0005883a 	mov	r2,zero
   8d6dc:	003f8606 	br	8d4f8 <__alt_data_end+0xfffcecf8>
   8d6e0:	0005883a 	mov	r2,zero
   8d6e4:	003fdc06 	br	8d658 <__alt_data_end+0xfffcee58>
   8d6e8:	0005883a 	mov	r2,zero
   8d6ec:	003ff706 	br	8d6cc <__alt_data_end+0xfffceecc>

0008d6f0 <__fixdfsi>:
   8d6f0:	280cd53a 	srli	r6,r5,20
   8d6f4:	00c00434 	movhi	r3,16
   8d6f8:	18ffffc4 	addi	r3,r3,-1
   8d6fc:	3181ffcc 	andi	r6,r6,2047
   8d700:	01c0ff84 	movi	r7,1022
   8d704:	28c6703a 	and	r3,r5,r3
   8d708:	280ad7fa 	srli	r5,r5,31
   8d70c:	3980120e 	bge	r7,r6,8d758 <__fixdfsi+0x68>
   8d710:	00810744 	movi	r2,1053
   8d714:	11800c16 	blt	r2,r6,8d748 <__fixdfsi+0x58>
   8d718:	00810cc4 	movi	r2,1075
   8d71c:	1185c83a 	sub	r2,r2,r6
   8d720:	01c007c4 	movi	r7,31
   8d724:	18c00434 	orhi	r3,r3,16
   8d728:	38800d16 	blt	r7,r2,8d760 <__fixdfsi+0x70>
   8d72c:	31befb44 	addi	r6,r6,-1043
   8d730:	2084d83a 	srl	r2,r4,r2
   8d734:	1986983a 	sll	r3,r3,r6
   8d738:	1884b03a 	or	r2,r3,r2
   8d73c:	28000726 	beq	r5,zero,8d75c <__fixdfsi+0x6c>
   8d740:	0085c83a 	sub	r2,zero,r2
   8d744:	f800283a 	ret
   8d748:	00a00034 	movhi	r2,32768
   8d74c:	10bfffc4 	addi	r2,r2,-1
   8d750:	2885883a 	add	r2,r5,r2
   8d754:	f800283a 	ret
   8d758:	0005883a 	mov	r2,zero
   8d75c:	f800283a 	ret
   8d760:	008104c4 	movi	r2,1043
   8d764:	1185c83a 	sub	r2,r2,r6
   8d768:	1884d83a 	srl	r2,r3,r2
   8d76c:	003ff306 	br	8d73c <__alt_data_end+0xfffcef3c>

0008d770 <__floatsidf>:
   8d770:	defffd04 	addi	sp,sp,-12
   8d774:	dfc00215 	stw	ra,8(sp)
   8d778:	dc400115 	stw	r17,4(sp)
   8d77c:	dc000015 	stw	r16,0(sp)
   8d780:	20002b26 	beq	r4,zero,8d830 <__floatsidf+0xc0>
   8d784:	2023883a 	mov	r17,r4
   8d788:	2020d7fa 	srli	r16,r4,31
   8d78c:	20002d16 	blt	r4,zero,8d844 <__floatsidf+0xd4>
   8d790:	8809883a 	mov	r4,r17
   8d794:	008d8f40 	call	8d8f4 <__clzsi2>
   8d798:	01410784 	movi	r5,1054
   8d79c:	288bc83a 	sub	r5,r5,r2
   8d7a0:	01010cc4 	movi	r4,1075
   8d7a4:	2149c83a 	sub	r4,r4,r5
   8d7a8:	00c007c4 	movi	r3,31
   8d7ac:	1900160e 	bge	r3,r4,8d808 <__floatsidf+0x98>
   8d7b0:	00c104c4 	movi	r3,1043
   8d7b4:	1947c83a 	sub	r3,r3,r5
   8d7b8:	88c6983a 	sll	r3,r17,r3
   8d7bc:	00800434 	movhi	r2,16
   8d7c0:	10bfffc4 	addi	r2,r2,-1
   8d7c4:	1886703a 	and	r3,r3,r2
   8d7c8:	2941ffcc 	andi	r5,r5,2047
   8d7cc:	800d883a 	mov	r6,r16
   8d7d0:	0005883a 	mov	r2,zero
   8d7d4:	280a953a 	slli	r5,r5,20
   8d7d8:	31803fcc 	andi	r6,r6,255
   8d7dc:	01000434 	movhi	r4,16
   8d7e0:	300c97fa 	slli	r6,r6,31
   8d7e4:	213fffc4 	addi	r4,r4,-1
   8d7e8:	1906703a 	and	r3,r3,r4
   8d7ec:	1946b03a 	or	r3,r3,r5
   8d7f0:	1986b03a 	or	r3,r3,r6
   8d7f4:	dfc00217 	ldw	ra,8(sp)
   8d7f8:	dc400117 	ldw	r17,4(sp)
   8d7fc:	dc000017 	ldw	r16,0(sp)
   8d800:	dec00304 	addi	sp,sp,12
   8d804:	f800283a 	ret
   8d808:	00c002c4 	movi	r3,11
   8d80c:	1887c83a 	sub	r3,r3,r2
   8d810:	88c6d83a 	srl	r3,r17,r3
   8d814:	8904983a 	sll	r2,r17,r4
   8d818:	01000434 	movhi	r4,16
   8d81c:	213fffc4 	addi	r4,r4,-1
   8d820:	2941ffcc 	andi	r5,r5,2047
   8d824:	1906703a 	and	r3,r3,r4
   8d828:	800d883a 	mov	r6,r16
   8d82c:	003fe906 	br	8d7d4 <__alt_data_end+0xfffcefd4>
   8d830:	000d883a 	mov	r6,zero
   8d834:	000b883a 	mov	r5,zero
   8d838:	0007883a 	mov	r3,zero
   8d83c:	0005883a 	mov	r2,zero
   8d840:	003fe406 	br	8d7d4 <__alt_data_end+0xfffcefd4>
   8d844:	0123c83a 	sub	r17,zero,r4
   8d848:	003fd106 	br	8d790 <__alt_data_end+0xfffcef90>

0008d84c <__floatunsidf>:
   8d84c:	defffe04 	addi	sp,sp,-8
   8d850:	dc000015 	stw	r16,0(sp)
   8d854:	dfc00115 	stw	ra,4(sp)
   8d858:	2021883a 	mov	r16,r4
   8d85c:	20002226 	beq	r4,zero,8d8e8 <__floatunsidf+0x9c>
   8d860:	008d8f40 	call	8d8f4 <__clzsi2>
   8d864:	01010784 	movi	r4,1054
   8d868:	2089c83a 	sub	r4,r4,r2
   8d86c:	01810cc4 	movi	r6,1075
   8d870:	310dc83a 	sub	r6,r6,r4
   8d874:	00c007c4 	movi	r3,31
   8d878:	1980120e 	bge	r3,r6,8d8c4 <__floatunsidf+0x78>
   8d87c:	00c104c4 	movi	r3,1043
   8d880:	1907c83a 	sub	r3,r3,r4
   8d884:	80ca983a 	sll	r5,r16,r3
   8d888:	00800434 	movhi	r2,16
   8d88c:	10bfffc4 	addi	r2,r2,-1
   8d890:	2101ffcc 	andi	r4,r4,2047
   8d894:	0021883a 	mov	r16,zero
   8d898:	288a703a 	and	r5,r5,r2
   8d89c:	2008953a 	slli	r4,r4,20
   8d8a0:	00c00434 	movhi	r3,16
   8d8a4:	18ffffc4 	addi	r3,r3,-1
   8d8a8:	28c6703a 	and	r3,r5,r3
   8d8ac:	8005883a 	mov	r2,r16
   8d8b0:	1906b03a 	or	r3,r3,r4
   8d8b4:	dfc00117 	ldw	ra,4(sp)
   8d8b8:	dc000017 	ldw	r16,0(sp)
   8d8bc:	dec00204 	addi	sp,sp,8
   8d8c0:	f800283a 	ret
   8d8c4:	00c002c4 	movi	r3,11
   8d8c8:	188bc83a 	sub	r5,r3,r2
   8d8cc:	814ad83a 	srl	r5,r16,r5
   8d8d0:	00c00434 	movhi	r3,16
   8d8d4:	18ffffc4 	addi	r3,r3,-1
   8d8d8:	81a0983a 	sll	r16,r16,r6
   8d8dc:	2101ffcc 	andi	r4,r4,2047
   8d8e0:	28ca703a 	and	r5,r5,r3
   8d8e4:	003fed06 	br	8d89c <__alt_data_end+0xfffcf09c>
   8d8e8:	0009883a 	mov	r4,zero
   8d8ec:	000b883a 	mov	r5,zero
   8d8f0:	003fea06 	br	8d89c <__alt_data_end+0xfffcf09c>

0008d8f4 <__clzsi2>:
   8d8f4:	00bfffd4 	movui	r2,65535
   8d8f8:	11000536 	bltu	r2,r4,8d910 <__clzsi2+0x1c>
   8d8fc:	00803fc4 	movi	r2,255
   8d900:	11000f36 	bltu	r2,r4,8d940 <__clzsi2+0x4c>
   8d904:	00800804 	movi	r2,32
   8d908:	0007883a 	mov	r3,zero
   8d90c:	00000506 	br	8d924 <__clzsi2+0x30>
   8d910:	00804034 	movhi	r2,256
   8d914:	10bfffc4 	addi	r2,r2,-1
   8d918:	11000c2e 	bgeu	r2,r4,8d94c <__clzsi2+0x58>
   8d91c:	00800204 	movi	r2,8
   8d920:	00c00604 	movi	r3,24
   8d924:	20c8d83a 	srl	r4,r4,r3
   8d928:	00c002b4 	movhi	r3,10
   8d92c:	18e0f704 	addi	r3,r3,-31780
   8d930:	1909883a 	add	r4,r3,r4
   8d934:	20c00003 	ldbu	r3,0(r4)
   8d938:	10c5c83a 	sub	r2,r2,r3
   8d93c:	f800283a 	ret
   8d940:	00800604 	movi	r2,24
   8d944:	00c00204 	movi	r3,8
   8d948:	003ff606 	br	8d924 <__alt_data_end+0xfffcf124>
   8d94c:	00800404 	movi	r2,16
   8d950:	1007883a 	mov	r3,r2
   8d954:	003ff306 	br	8d924 <__alt_data_end+0xfffcf124>

0008d958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d958:	defffe04 	addi	sp,sp,-8
   8d95c:	dfc00115 	stw	ra,4(sp)
   8d960:	df000015 	stw	fp,0(sp)
   8d964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8d968:	d0a00c17 	ldw	r2,-32720(gp)
   8d96c:	10000326 	beq	r2,zero,8d97c <alt_get_errno+0x24>
   8d970:	d0a00c17 	ldw	r2,-32720(gp)
   8d974:	103ee83a 	callr	r2
   8d978:	00000106 	br	8d980 <alt_get_errno+0x28>
   8d97c:	d0a71e04 	addi	r2,gp,-25480
}
   8d980:	e037883a 	mov	sp,fp
   8d984:	dfc00117 	ldw	ra,4(sp)
   8d988:	df000017 	ldw	fp,0(sp)
   8d98c:	dec00204 	addi	sp,sp,8
   8d990:	f800283a 	ret

0008d994 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8d994:	defffb04 	addi	sp,sp,-20
   8d998:	dfc00415 	stw	ra,16(sp)
   8d99c:	df000315 	stw	fp,12(sp)
   8d9a0:	df000304 	addi	fp,sp,12
   8d9a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8d9a8:	e0bfff17 	ldw	r2,-4(fp)
   8d9ac:	10000816 	blt	r2,zero,8d9d0 <close+0x3c>
   8d9b0:	01400304 	movi	r5,12
   8d9b4:	e13fff17 	ldw	r4,-4(fp)
   8d9b8:	008b08c0 	call	8b08c <__mulsi3>
   8d9bc:	1007883a 	mov	r3,r2
   8d9c0:	008002b4 	movhi	r2,10
   8d9c4:	10a3c004 	addi	r2,r2,-28928
   8d9c8:	1885883a 	add	r2,r3,r2
   8d9cc:	00000106 	br	8d9d4 <close+0x40>
   8d9d0:	0005883a 	mov	r2,zero
   8d9d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8d9d8:	e0bffd17 	ldw	r2,-12(fp)
   8d9dc:	10001926 	beq	r2,zero,8da44 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8d9e0:	e0bffd17 	ldw	r2,-12(fp)
   8d9e4:	10800017 	ldw	r2,0(r2)
   8d9e8:	10800417 	ldw	r2,16(r2)
   8d9ec:	10000626 	beq	r2,zero,8da08 <close+0x74>
   8d9f0:	e0bffd17 	ldw	r2,-12(fp)
   8d9f4:	10800017 	ldw	r2,0(r2)
   8d9f8:	10800417 	ldw	r2,16(r2)
   8d9fc:	e13ffd17 	ldw	r4,-12(fp)
   8da00:	103ee83a 	callr	r2
   8da04:	00000106 	br	8da0c <close+0x78>
   8da08:	0005883a 	mov	r2,zero
   8da0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8da10:	e13fff17 	ldw	r4,-4(fp)
   8da14:	008e3140 	call	8e314 <alt_release_fd>
    if (rval < 0)
   8da18:	e0bffe17 	ldw	r2,-8(fp)
   8da1c:	1000070e 	bge	r2,zero,8da3c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   8da20:	008d9580 	call	8d958 <alt_get_errno>
   8da24:	1007883a 	mov	r3,r2
   8da28:	e0bffe17 	ldw	r2,-8(fp)
   8da2c:	0085c83a 	sub	r2,zero,r2
   8da30:	18800015 	stw	r2,0(r3)
      return -1;
   8da34:	00bfffc4 	movi	r2,-1
   8da38:	00000706 	br	8da58 <close+0xc4>
    }
    return 0;
   8da3c:	0005883a 	mov	r2,zero
   8da40:	00000506 	br	8da58 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8da44:	008d9580 	call	8d958 <alt_get_errno>
   8da48:	1007883a 	mov	r3,r2
   8da4c:	00801444 	movi	r2,81
   8da50:	18800015 	stw	r2,0(r3)
    return -1;
   8da54:	00bfffc4 	movi	r2,-1
  }
}
   8da58:	e037883a 	mov	sp,fp
   8da5c:	dfc00117 	ldw	ra,4(sp)
   8da60:	df000017 	ldw	fp,0(sp)
   8da64:	dec00204 	addi	sp,sp,8
   8da68:	f800283a 	ret

0008da6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8da6c:	defffc04 	addi	sp,sp,-16
   8da70:	df000315 	stw	fp,12(sp)
   8da74:	df000304 	addi	fp,sp,12
   8da78:	e13ffd15 	stw	r4,-12(fp)
   8da7c:	e17ffe15 	stw	r5,-8(fp)
   8da80:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8da84:	e0bfff17 	ldw	r2,-4(fp)
}
   8da88:	e037883a 	mov	sp,fp
   8da8c:	df000017 	ldw	fp,0(sp)
   8da90:	dec00104 	addi	sp,sp,4
   8da94:	f800283a 	ret

0008da98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8da98:	defffe04 	addi	sp,sp,-8
   8da9c:	dfc00115 	stw	ra,4(sp)
   8daa0:	df000015 	stw	fp,0(sp)
   8daa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8daa8:	d0a00c17 	ldw	r2,-32720(gp)
   8daac:	10000326 	beq	r2,zero,8dabc <alt_get_errno+0x24>
   8dab0:	d0a00c17 	ldw	r2,-32720(gp)
   8dab4:	103ee83a 	callr	r2
   8dab8:	00000106 	br	8dac0 <alt_get_errno+0x28>
   8dabc:	d0a71e04 	addi	r2,gp,-25480
}
   8dac0:	e037883a 	mov	sp,fp
   8dac4:	dfc00117 	ldw	ra,4(sp)
   8dac8:	df000017 	ldw	fp,0(sp)
   8dacc:	dec00204 	addi	sp,sp,8
   8dad0:	f800283a 	ret

0008dad4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8dad4:	defffb04 	addi	sp,sp,-20
   8dad8:	dfc00415 	stw	ra,16(sp)
   8dadc:	df000315 	stw	fp,12(sp)
   8dae0:	df000304 	addi	fp,sp,12
   8dae4:	e13ffe15 	stw	r4,-8(fp)
   8dae8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8daec:	e0bffe17 	ldw	r2,-8(fp)
   8daf0:	10000816 	blt	r2,zero,8db14 <fstat+0x40>
   8daf4:	01400304 	movi	r5,12
   8daf8:	e13ffe17 	ldw	r4,-8(fp)
   8dafc:	008b08c0 	call	8b08c <__mulsi3>
   8db00:	1007883a 	mov	r3,r2
   8db04:	008002b4 	movhi	r2,10
   8db08:	10a3c004 	addi	r2,r2,-28928
   8db0c:	1885883a 	add	r2,r3,r2
   8db10:	00000106 	br	8db18 <fstat+0x44>
   8db14:	0005883a 	mov	r2,zero
   8db18:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8db1c:	e0bffd17 	ldw	r2,-12(fp)
   8db20:	10001026 	beq	r2,zero,8db64 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8db24:	e0bffd17 	ldw	r2,-12(fp)
   8db28:	10800017 	ldw	r2,0(r2)
   8db2c:	10800817 	ldw	r2,32(r2)
   8db30:	10000726 	beq	r2,zero,8db50 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   8db34:	e0bffd17 	ldw	r2,-12(fp)
   8db38:	10800017 	ldw	r2,0(r2)
   8db3c:	10800817 	ldw	r2,32(r2)
   8db40:	e17fff17 	ldw	r5,-4(fp)
   8db44:	e13ffd17 	ldw	r4,-12(fp)
   8db48:	103ee83a 	callr	r2
   8db4c:	00000a06 	br	8db78 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8db50:	e0bfff17 	ldw	r2,-4(fp)
   8db54:	00c80004 	movi	r3,8192
   8db58:	10c00115 	stw	r3,4(r2)
      return 0;
   8db5c:	0005883a 	mov	r2,zero
   8db60:	00000506 	br	8db78 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8db64:	008da980 	call	8da98 <alt_get_errno>
   8db68:	1007883a 	mov	r3,r2
   8db6c:	00801444 	movi	r2,81
   8db70:	18800015 	stw	r2,0(r3)
    return -1;
   8db74:	00bfffc4 	movi	r2,-1
  }
}
   8db78:	e037883a 	mov	sp,fp
   8db7c:	dfc00117 	ldw	ra,4(sp)
   8db80:	df000017 	ldw	fp,0(sp)
   8db84:	dec00204 	addi	sp,sp,8
   8db88:	f800283a 	ret

0008db8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8db8c:	defff904 	addi	sp,sp,-28
   8db90:	dfc00615 	stw	ra,24(sp)
   8db94:	df000515 	stw	fp,20(sp)
   8db98:	df000504 	addi	fp,sp,20
   8db9c:	e13ffc15 	stw	r4,-16(fp)
   8dba0:	e17ffd15 	stw	r5,-12(fp)
   8dba4:	e1bffe15 	stw	r6,-8(fp)
   8dba8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8dbac:	e0800217 	ldw	r2,8(fp)
   8dbb0:	d8800015 	stw	r2,0(sp)
   8dbb4:	e1ffff17 	ldw	r7,-4(fp)
   8dbb8:	e1bffe17 	ldw	r6,-8(fp)
   8dbbc:	e17ffd17 	ldw	r5,-12(fp)
   8dbc0:	e13ffc17 	ldw	r4,-16(fp)
   8dbc4:	008dd3c0 	call	8dd3c <alt_iic_isr_register>
}  
   8dbc8:	e037883a 	mov	sp,fp
   8dbcc:	dfc00117 	ldw	ra,4(sp)
   8dbd0:	df000017 	ldw	fp,0(sp)
   8dbd4:	dec00204 	addi	sp,sp,8
   8dbd8:	f800283a 	ret

0008dbdc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8dbdc:	defff904 	addi	sp,sp,-28
   8dbe0:	df000615 	stw	fp,24(sp)
   8dbe4:	df000604 	addi	fp,sp,24
   8dbe8:	e13ffe15 	stw	r4,-8(fp)
   8dbec:	e17fff15 	stw	r5,-4(fp)
   8dbf0:	e0bfff17 	ldw	r2,-4(fp)
   8dbf4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dbf8:	0005303a 	rdctl	r2,status
   8dbfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dc00:	e0fffb17 	ldw	r3,-20(fp)
   8dc04:	00bfff84 	movi	r2,-2
   8dc08:	1884703a 	and	r2,r3,r2
   8dc0c:	1001703a 	wrctl	status,r2
  
  return context;
   8dc10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8dc14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8dc18:	00c00044 	movi	r3,1
   8dc1c:	e0bffa17 	ldw	r2,-24(fp)
   8dc20:	1884983a 	sll	r2,r3,r2
   8dc24:	1007883a 	mov	r3,r2
   8dc28:	d0a72017 	ldw	r2,-25472(gp)
   8dc2c:	1884b03a 	or	r2,r3,r2
   8dc30:	d0a72015 	stw	r2,-25472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8dc34:	d0a72017 	ldw	r2,-25472(gp)
   8dc38:	100170fa 	wrctl	ienable,r2
   8dc3c:	e0bffc17 	ldw	r2,-16(fp)
   8dc40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dc44:	e0bffd17 	ldw	r2,-12(fp)
   8dc48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8dc4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   8dc50:	0001883a 	nop
}
   8dc54:	e037883a 	mov	sp,fp
   8dc58:	df000017 	ldw	fp,0(sp)
   8dc5c:	dec00104 	addi	sp,sp,4
   8dc60:	f800283a 	ret

0008dc64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8dc64:	defff904 	addi	sp,sp,-28
   8dc68:	df000615 	stw	fp,24(sp)
   8dc6c:	df000604 	addi	fp,sp,24
   8dc70:	e13ffe15 	stw	r4,-8(fp)
   8dc74:	e17fff15 	stw	r5,-4(fp)
   8dc78:	e0bfff17 	ldw	r2,-4(fp)
   8dc7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dc80:	0005303a 	rdctl	r2,status
   8dc84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dc88:	e0fffb17 	ldw	r3,-20(fp)
   8dc8c:	00bfff84 	movi	r2,-2
   8dc90:	1884703a 	and	r2,r3,r2
   8dc94:	1001703a 	wrctl	status,r2
  
  return context;
   8dc98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8dc9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8dca0:	00c00044 	movi	r3,1
   8dca4:	e0bffa17 	ldw	r2,-24(fp)
   8dca8:	1884983a 	sll	r2,r3,r2
   8dcac:	0084303a 	nor	r2,zero,r2
   8dcb0:	1007883a 	mov	r3,r2
   8dcb4:	d0a72017 	ldw	r2,-25472(gp)
   8dcb8:	1884703a 	and	r2,r3,r2
   8dcbc:	d0a72015 	stw	r2,-25472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8dcc0:	d0a72017 	ldw	r2,-25472(gp)
   8dcc4:	100170fa 	wrctl	ienable,r2
   8dcc8:	e0bffc17 	ldw	r2,-16(fp)
   8dccc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dcd0:	e0bffd17 	ldw	r2,-12(fp)
   8dcd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8dcd8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   8dcdc:	0001883a 	nop
}
   8dce0:	e037883a 	mov	sp,fp
   8dce4:	df000017 	ldw	fp,0(sp)
   8dce8:	dec00104 	addi	sp,sp,4
   8dcec:	f800283a 	ret

0008dcf0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8dcf0:	defffc04 	addi	sp,sp,-16
   8dcf4:	df000315 	stw	fp,12(sp)
   8dcf8:	df000304 	addi	fp,sp,12
   8dcfc:	e13ffe15 	stw	r4,-8(fp)
   8dd00:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8dd04:	000530fa 	rdctl	r2,ienable
   8dd08:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8dd0c:	00c00044 	movi	r3,1
   8dd10:	e0bfff17 	ldw	r2,-4(fp)
   8dd14:	1884983a 	sll	r2,r3,r2
   8dd18:	1007883a 	mov	r3,r2
   8dd1c:	e0bffd17 	ldw	r2,-12(fp)
   8dd20:	1884703a 	and	r2,r3,r2
   8dd24:	1004c03a 	cmpne	r2,r2,zero
   8dd28:	10803fcc 	andi	r2,r2,255
}
   8dd2c:	e037883a 	mov	sp,fp
   8dd30:	df000017 	ldw	fp,0(sp)
   8dd34:	dec00104 	addi	sp,sp,4
   8dd38:	f800283a 	ret

0008dd3c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8dd3c:	defff504 	addi	sp,sp,-44
   8dd40:	dfc00a15 	stw	ra,40(sp)
   8dd44:	df000915 	stw	fp,36(sp)
   8dd48:	df000904 	addi	fp,sp,36
   8dd4c:	e13ffc15 	stw	r4,-16(fp)
   8dd50:	e17ffd15 	stw	r5,-12(fp)
   8dd54:	e1bffe15 	stw	r6,-8(fp)
   8dd58:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8dd5c:	00bffa84 	movi	r2,-22
   8dd60:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8dd64:	e0bffd17 	ldw	r2,-12(fp)
   8dd68:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8dd6c:	e0bff817 	ldw	r2,-32(fp)
   8dd70:	10800808 	cmpgei	r2,r2,32
   8dd74:	1000271e 	bne	r2,zero,8de14 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dd78:	0005303a 	rdctl	r2,status
   8dd7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dd80:	e0fffb17 	ldw	r3,-20(fp)
   8dd84:	00bfff84 	movi	r2,-2
   8dd88:	1884703a 	and	r2,r3,r2
   8dd8c:	1001703a 	wrctl	status,r2
  
  return context;
   8dd90:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8dd94:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   8dd98:	008002b4 	movhi	r2,10
   8dd9c:	10bf8304 	addi	r2,r2,-500
   8dda0:	e0fff817 	ldw	r3,-32(fp)
   8dda4:	180690fa 	slli	r3,r3,3
   8dda8:	10c5883a 	add	r2,r2,r3
   8ddac:	e0fffe17 	ldw	r3,-8(fp)
   8ddb0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8ddb4:	008002b4 	movhi	r2,10
   8ddb8:	10bf8304 	addi	r2,r2,-500
   8ddbc:	e0fff817 	ldw	r3,-32(fp)
   8ddc0:	180690fa 	slli	r3,r3,3
   8ddc4:	10c5883a 	add	r2,r2,r3
   8ddc8:	10800104 	addi	r2,r2,4
   8ddcc:	e0ffff17 	ldw	r3,-4(fp)
   8ddd0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8ddd4:	e0bffe17 	ldw	r2,-8(fp)
   8ddd8:	10000526 	beq	r2,zero,8ddf0 <alt_iic_isr_register+0xb4>
   8dddc:	e0bff817 	ldw	r2,-32(fp)
   8dde0:	100b883a 	mov	r5,r2
   8dde4:	e13ffc17 	ldw	r4,-16(fp)
   8dde8:	008dbdc0 	call	8dbdc <alt_ic_irq_enable>
   8ddec:	00000406 	br	8de00 <alt_iic_isr_register+0xc4>
   8ddf0:	e0bff817 	ldw	r2,-32(fp)
   8ddf4:	100b883a 	mov	r5,r2
   8ddf8:	e13ffc17 	ldw	r4,-16(fp)
   8ddfc:	008dc640 	call	8dc64 <alt_ic_irq_disable>
   8de00:	e0bff715 	stw	r2,-36(fp)
   8de04:	e0bffa17 	ldw	r2,-24(fp)
   8de08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8de0c:	e0bff917 	ldw	r2,-28(fp)
   8de10:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8de14:	e0bff717 	ldw	r2,-36(fp)
}
   8de18:	e037883a 	mov	sp,fp
   8de1c:	dfc00117 	ldw	ra,4(sp)
   8de20:	df000017 	ldw	fp,0(sp)
   8de24:	dec00204 	addi	sp,sp,8
   8de28:	f800283a 	ret

0008de2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8de2c:	defffe04 	addi	sp,sp,-8
   8de30:	dfc00115 	stw	ra,4(sp)
   8de34:	df000015 	stw	fp,0(sp)
   8de38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8de3c:	d0a00c17 	ldw	r2,-32720(gp)
   8de40:	10000326 	beq	r2,zero,8de50 <alt_get_errno+0x24>
   8de44:	d0a00c17 	ldw	r2,-32720(gp)
   8de48:	103ee83a 	callr	r2
   8de4c:	00000106 	br	8de54 <alt_get_errno+0x28>
   8de50:	d0a71e04 	addi	r2,gp,-25480
}
   8de54:	e037883a 	mov	sp,fp
   8de58:	dfc00117 	ldw	ra,4(sp)
   8de5c:	df000017 	ldw	fp,0(sp)
   8de60:	dec00204 	addi	sp,sp,8
   8de64:	f800283a 	ret

0008de68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8de68:	deffed04 	addi	sp,sp,-76
   8de6c:	dfc01215 	stw	ra,72(sp)
   8de70:	df001115 	stw	fp,68(sp)
   8de74:	df001104 	addi	fp,sp,68
   8de78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8de7c:	e0bfff17 	ldw	r2,-4(fp)
   8de80:	10000816 	blt	r2,zero,8dea4 <isatty+0x3c>
   8de84:	01400304 	movi	r5,12
   8de88:	e13fff17 	ldw	r4,-4(fp)
   8de8c:	008b08c0 	call	8b08c <__mulsi3>
   8de90:	1007883a 	mov	r3,r2
   8de94:	008002b4 	movhi	r2,10
   8de98:	10a3c004 	addi	r2,r2,-28928
   8de9c:	1885883a 	add	r2,r3,r2
   8dea0:	00000106 	br	8dea8 <isatty+0x40>
   8dea4:	0005883a 	mov	r2,zero
   8dea8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8deac:	e0bfef17 	ldw	r2,-68(fp)
   8deb0:	10000e26 	beq	r2,zero,8deec <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8deb4:	e0bfef17 	ldw	r2,-68(fp)
   8deb8:	10800017 	ldw	r2,0(r2)
   8debc:	10800817 	ldw	r2,32(r2)
   8dec0:	1000021e 	bne	r2,zero,8decc <isatty+0x64>
    {
      return 1;
   8dec4:	00800044 	movi	r2,1
   8dec8:	00000d06 	br	8df00 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8decc:	e0bff004 	addi	r2,fp,-64
   8ded0:	100b883a 	mov	r5,r2
   8ded4:	e13fff17 	ldw	r4,-4(fp)
   8ded8:	008dad40 	call	8dad4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8dedc:	e0bff117 	ldw	r2,-60(fp)
   8dee0:	10880020 	cmpeqi	r2,r2,8192
   8dee4:	10803fcc 	andi	r2,r2,255
   8dee8:	00000506 	br	8df00 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8deec:	008de2c0 	call	8de2c <alt_get_errno>
   8def0:	1007883a 	mov	r3,r2
   8def4:	00801444 	movi	r2,81
   8def8:	18800015 	stw	r2,0(r3)
    return 0;
   8defc:	0005883a 	mov	r2,zero
  }
}
   8df00:	e037883a 	mov	sp,fp
   8df04:	dfc00117 	ldw	ra,4(sp)
   8df08:	df000017 	ldw	fp,0(sp)
   8df0c:	dec00204 	addi	sp,sp,8
   8df10:	f800283a 	ret

0008df14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8df14:	defffc04 	addi	sp,sp,-16
   8df18:	df000315 	stw	fp,12(sp)
   8df1c:	df000304 	addi	fp,sp,12
   8df20:	e13ffd15 	stw	r4,-12(fp)
   8df24:	e17ffe15 	stw	r5,-8(fp)
   8df28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8df2c:	e0fffe17 	ldw	r3,-8(fp)
   8df30:	e0bffd17 	ldw	r2,-12(fp)
   8df34:	18800c26 	beq	r3,r2,8df68 <alt_load_section+0x54>
  {
    while( to != end )
   8df38:	00000806 	br	8df5c <alt_load_section+0x48>
    {
      *to++ = *from++;
   8df3c:	e0bffe17 	ldw	r2,-8(fp)
   8df40:	10c00104 	addi	r3,r2,4
   8df44:	e0fffe15 	stw	r3,-8(fp)
   8df48:	e0fffd17 	ldw	r3,-12(fp)
   8df4c:	19000104 	addi	r4,r3,4
   8df50:	e13ffd15 	stw	r4,-12(fp)
   8df54:	18c00017 	ldw	r3,0(r3)
   8df58:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8df5c:	e0fffe17 	ldw	r3,-8(fp)
   8df60:	e0bfff17 	ldw	r2,-4(fp)
   8df64:	18bff51e 	bne	r3,r2,8df3c <__alt_data_end+0xfffcf73c>
    {
      *to++ = *from++;
    }
  }
}
   8df68:	0001883a 	nop
   8df6c:	e037883a 	mov	sp,fp
   8df70:	df000017 	ldw	fp,0(sp)
   8df74:	dec00104 	addi	sp,sp,4
   8df78:	f800283a 	ret

0008df7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8df7c:	defffe04 	addi	sp,sp,-8
   8df80:	dfc00115 	stw	ra,4(sp)
   8df84:	df000015 	stw	fp,0(sp)
   8df88:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8df8c:	018002b4 	movhi	r6,10
   8df90:	31a86b04 	addi	r6,r6,-24148
   8df94:	014002b4 	movhi	r5,10
   8df98:	29618d04 	addi	r5,r5,-31180
   8df9c:	010002b4 	movhi	r4,10
   8dfa0:	21286b04 	addi	r4,r4,-24148
   8dfa4:	008df140 	call	8df14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8dfa8:	01800234 	movhi	r6,8
   8dfac:	31807004 	addi	r6,r6,448
   8dfb0:	01400234 	movhi	r5,8
   8dfb4:	29400804 	addi	r5,r5,32
   8dfb8:	01000234 	movhi	r4,8
   8dfbc:	21000804 	addi	r4,r4,32
   8dfc0:	008df140 	call	8df14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8dfc4:	018002b4 	movhi	r6,10
   8dfc8:	31a18d04 	addi	r6,r6,-31180
   8dfcc:	014002b4 	movhi	r5,10
   8dfd0:	29606a04 	addi	r5,r5,-32344
   8dfd4:	010002b4 	movhi	r4,10
   8dfd8:	21206a04 	addi	r4,r4,-32344
   8dfdc:	008df140 	call	8df14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8dfe0:	00970a40 	call	970a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8dfe4:	00972640 	call	97264 <alt_icache_flush_all>
}
   8dfe8:	0001883a 	nop
   8dfec:	e037883a 	mov	sp,fp
   8dff0:	dfc00117 	ldw	ra,4(sp)
   8dff4:	df000017 	ldw	fp,0(sp)
   8dff8:	dec00204 	addi	sp,sp,8
   8dffc:	f800283a 	ret

0008e000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e000:	defffe04 	addi	sp,sp,-8
   8e004:	dfc00115 	stw	ra,4(sp)
   8e008:	df000015 	stw	fp,0(sp)
   8e00c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e010:	d0a00c17 	ldw	r2,-32720(gp)
   8e014:	10000326 	beq	r2,zero,8e024 <alt_get_errno+0x24>
   8e018:	d0a00c17 	ldw	r2,-32720(gp)
   8e01c:	103ee83a 	callr	r2
   8e020:	00000106 	br	8e028 <alt_get_errno+0x28>
   8e024:	d0a71e04 	addi	r2,gp,-25480
}
   8e028:	e037883a 	mov	sp,fp
   8e02c:	dfc00117 	ldw	ra,4(sp)
   8e030:	df000017 	ldw	fp,0(sp)
   8e034:	dec00204 	addi	sp,sp,8
   8e038:	f800283a 	ret

0008e03c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8e03c:	defff904 	addi	sp,sp,-28
   8e040:	dfc00615 	stw	ra,24(sp)
   8e044:	df000515 	stw	fp,20(sp)
   8e048:	df000504 	addi	fp,sp,20
   8e04c:	e13ffd15 	stw	r4,-12(fp)
   8e050:	e17ffe15 	stw	r5,-8(fp)
   8e054:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8e058:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e05c:	e0bffd17 	ldw	r2,-12(fp)
   8e060:	10000816 	blt	r2,zero,8e084 <lseek+0x48>
   8e064:	01400304 	movi	r5,12
   8e068:	e13ffd17 	ldw	r4,-12(fp)
   8e06c:	008b08c0 	call	8b08c <__mulsi3>
   8e070:	1007883a 	mov	r3,r2
   8e074:	008002b4 	movhi	r2,10
   8e078:	10a3c004 	addi	r2,r2,-28928
   8e07c:	1885883a 	add	r2,r3,r2
   8e080:	00000106 	br	8e088 <lseek+0x4c>
   8e084:	0005883a 	mov	r2,zero
   8e088:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8e08c:	e0bffc17 	ldw	r2,-16(fp)
   8e090:	10001026 	beq	r2,zero,8e0d4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8e094:	e0bffc17 	ldw	r2,-16(fp)
   8e098:	10800017 	ldw	r2,0(r2)
   8e09c:	10800717 	ldw	r2,28(r2)
   8e0a0:	10000926 	beq	r2,zero,8e0c8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8e0a4:	e0bffc17 	ldw	r2,-16(fp)
   8e0a8:	10800017 	ldw	r2,0(r2)
   8e0ac:	10800717 	ldw	r2,28(r2)
   8e0b0:	e1bfff17 	ldw	r6,-4(fp)
   8e0b4:	e17ffe17 	ldw	r5,-8(fp)
   8e0b8:	e13ffc17 	ldw	r4,-16(fp)
   8e0bc:	103ee83a 	callr	r2
   8e0c0:	e0bffb15 	stw	r2,-20(fp)
   8e0c4:	00000506 	br	8e0dc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8e0c8:	00bfde84 	movi	r2,-134
   8e0cc:	e0bffb15 	stw	r2,-20(fp)
   8e0d0:	00000206 	br	8e0dc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   8e0d4:	00bfebc4 	movi	r2,-81
   8e0d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8e0dc:	e0bffb17 	ldw	r2,-20(fp)
   8e0e0:	1000070e 	bge	r2,zero,8e100 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   8e0e4:	008e0000 	call	8e000 <alt_get_errno>
   8e0e8:	1007883a 	mov	r3,r2
   8e0ec:	e0bffb17 	ldw	r2,-20(fp)
   8e0f0:	0085c83a 	sub	r2,zero,r2
   8e0f4:	18800015 	stw	r2,0(r3)
    rc = -1;
   8e0f8:	00bfffc4 	movi	r2,-1
   8e0fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8e100:	e0bffb17 	ldw	r2,-20(fp)
}
   8e104:	e037883a 	mov	sp,fp
   8e108:	dfc00117 	ldw	ra,4(sp)
   8e10c:	df000017 	ldw	fp,0(sp)
   8e110:	dec00204 	addi	sp,sp,8
   8e114:	f800283a 	ret

0008e118 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8e118:	defff904 	addi	sp,sp,-28
   8e11c:	dfc00615 	stw	ra,24(sp)
   8e120:	df000515 	stw	fp,20(sp)
   8e124:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8e128:	0009883a 	mov	r4,zero
   8e12c:	00960c00 	call	960c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8e130:	008f1040 	call	8f104 <OSInit>
   8e134:	01000044 	movi	r4,1
   8e138:	0093a600 	call	93a60 <OSSemCreate>
   8e13c:	d0a72515 	stw	r2,-25452(gp)
   8e140:	01000044 	movi	r4,1
   8e144:	0093a600 	call	93a60 <OSSemCreate>
   8e148:	d0a72715 	stw	r2,-25444(gp)
   8e14c:	d0a71f04 	addi	r2,gp,-25476
   8e150:	e0bffc15 	stw	r2,-16(fp)
   8e154:	00800044 	movi	r2,1
   8e158:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   8e15c:	e0bffd0b 	ldhu	r2,-12(fp)
   8e160:	1009883a 	mov	r4,r2
   8e164:	0093a600 	call	93a60 <OSSemCreate>
   8e168:	1007883a 	mov	r3,r2
   8e16c:	e0bffc17 	ldw	r2,-16(fp)
   8e170:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8e174:	00960f80 	call	960f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8e178:	018002b4 	movhi	r6,10
   8e17c:	31a13a04 	addi	r6,r6,-31512
   8e180:	014002b4 	movhi	r5,10
   8e184:	29613a04 	addi	r5,r5,-31512
   8e188:	010002b4 	movhi	r4,10
   8e18c:	21213a04 	addi	r4,r4,-31512
   8e190:	00973680 	call	97368 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8e194:	00971a40 	call	971a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8e198:	01000274 	movhi	r4,9
   8e19c:	211c8104 	addi	r4,r4,29188
   8e1a0:	0097e140 	call	97e14 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8e1a4:	d0a72117 	ldw	r2,-25468(gp)
   8e1a8:	d0e72217 	ldw	r3,-25464(gp)
   8e1ac:	d1272317 	ldw	r4,-25460(gp)
   8e1b0:	200d883a 	mov	r6,r4
   8e1b4:	180b883a 	mov	r5,r3
   8e1b8:	1009883a 	mov	r4,r2
   8e1bc:	00809800 	call	80980 <main>
   8e1c0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   8e1c4:	01000044 	movi	r4,1
   8e1c8:	008d9940 	call	8d994 <close>
  exit (result);
   8e1cc:	e13ffb17 	ldw	r4,-20(fp)
   8e1d0:	0097e280 	call	97e28 <exit>

0008e1d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e1d4:	defffe04 	addi	sp,sp,-8
   8e1d8:	dfc00115 	stw	ra,4(sp)
   8e1dc:	df000015 	stw	fp,0(sp)
   8e1e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e1e4:	d0a00c17 	ldw	r2,-32720(gp)
   8e1e8:	10000326 	beq	r2,zero,8e1f8 <alt_get_errno+0x24>
   8e1ec:	d0a00c17 	ldw	r2,-32720(gp)
   8e1f0:	103ee83a 	callr	r2
   8e1f4:	00000106 	br	8e1fc <alt_get_errno+0x28>
   8e1f8:	d0a71e04 	addi	r2,gp,-25480
}
   8e1fc:	e037883a 	mov	sp,fp
   8e200:	dfc00117 	ldw	ra,4(sp)
   8e204:	df000017 	ldw	fp,0(sp)
   8e208:	dec00204 	addi	sp,sp,8
   8e20c:	f800283a 	ret

0008e210 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8e210:	defff904 	addi	sp,sp,-28
   8e214:	dfc00615 	stw	ra,24(sp)
   8e218:	df000515 	stw	fp,20(sp)
   8e21c:	df000504 	addi	fp,sp,20
   8e220:	e13ffd15 	stw	r4,-12(fp)
   8e224:	e17ffe15 	stw	r5,-8(fp)
   8e228:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e22c:	e0bffd17 	ldw	r2,-12(fp)
   8e230:	10000816 	blt	r2,zero,8e254 <read+0x44>
   8e234:	01400304 	movi	r5,12
   8e238:	e13ffd17 	ldw	r4,-12(fp)
   8e23c:	008b08c0 	call	8b08c <__mulsi3>
   8e240:	1007883a 	mov	r3,r2
   8e244:	008002b4 	movhi	r2,10
   8e248:	10a3c004 	addi	r2,r2,-28928
   8e24c:	1885883a 	add	r2,r3,r2
   8e250:	00000106 	br	8e258 <read+0x48>
   8e254:	0005883a 	mov	r2,zero
   8e258:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8e25c:	e0bffb17 	ldw	r2,-20(fp)
   8e260:	10002226 	beq	r2,zero,8e2ec <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8e264:	e0bffb17 	ldw	r2,-20(fp)
   8e268:	10800217 	ldw	r2,8(r2)
   8e26c:	108000cc 	andi	r2,r2,3
   8e270:	10800060 	cmpeqi	r2,r2,1
   8e274:	1000181e 	bne	r2,zero,8e2d8 <read+0xc8>
        (fd->dev->read))
   8e278:	e0bffb17 	ldw	r2,-20(fp)
   8e27c:	10800017 	ldw	r2,0(r2)
   8e280:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8e284:	10001426 	beq	r2,zero,8e2d8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8e288:	e0bffb17 	ldw	r2,-20(fp)
   8e28c:	10800017 	ldw	r2,0(r2)
   8e290:	10800517 	ldw	r2,20(r2)
   8e294:	e0ffff17 	ldw	r3,-4(fp)
   8e298:	180d883a 	mov	r6,r3
   8e29c:	e17ffe17 	ldw	r5,-8(fp)
   8e2a0:	e13ffb17 	ldw	r4,-20(fp)
   8e2a4:	103ee83a 	callr	r2
   8e2a8:	e0bffc15 	stw	r2,-16(fp)
   8e2ac:	e0bffc17 	ldw	r2,-16(fp)
   8e2b0:	1000070e 	bge	r2,zero,8e2d0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   8e2b4:	008e1d40 	call	8e1d4 <alt_get_errno>
   8e2b8:	1007883a 	mov	r3,r2
   8e2bc:	e0bffc17 	ldw	r2,-16(fp)
   8e2c0:	0085c83a 	sub	r2,zero,r2
   8e2c4:	18800015 	stw	r2,0(r3)
          return -1;
   8e2c8:	00bfffc4 	movi	r2,-1
   8e2cc:	00000c06 	br	8e300 <read+0xf0>
        }
        return rval;
   8e2d0:	e0bffc17 	ldw	r2,-16(fp)
   8e2d4:	00000a06 	br	8e300 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8e2d8:	008e1d40 	call	8e1d4 <alt_get_errno>
   8e2dc:	1007883a 	mov	r3,r2
   8e2e0:	00800344 	movi	r2,13
   8e2e4:	18800015 	stw	r2,0(r3)
   8e2e8:	00000406 	br	8e2fc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8e2ec:	008e1d40 	call	8e1d4 <alt_get_errno>
   8e2f0:	1007883a 	mov	r3,r2
   8e2f4:	00801444 	movi	r2,81
   8e2f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8e2fc:	00bfffc4 	movi	r2,-1
}
   8e300:	e037883a 	mov	sp,fp
   8e304:	dfc00117 	ldw	ra,4(sp)
   8e308:	df000017 	ldw	fp,0(sp)
   8e30c:	dec00204 	addi	sp,sp,8
   8e310:	f800283a 	ret

0008e314 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8e314:	defffc04 	addi	sp,sp,-16
   8e318:	dfc00315 	stw	ra,12(sp)
   8e31c:	df000215 	stw	fp,8(sp)
   8e320:	dc000115 	stw	r16,4(sp)
   8e324:	df000204 	addi	fp,sp,8
   8e328:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   8e32c:	e0bffe17 	ldw	r2,-8(fp)
   8e330:	108000d0 	cmplti	r2,r2,3
   8e334:	1000111e 	bne	r2,zero,8e37c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   8e338:	040002b4 	movhi	r16,10
   8e33c:	8423c004 	addi	r16,r16,-28928
   8e340:	e0bffe17 	ldw	r2,-8(fp)
   8e344:	01400304 	movi	r5,12
   8e348:	1009883a 	mov	r4,r2
   8e34c:	008b08c0 	call	8b08c <__mulsi3>
   8e350:	8085883a 	add	r2,r16,r2
   8e354:	10800204 	addi	r2,r2,8
   8e358:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8e35c:	040002b4 	movhi	r16,10
   8e360:	8423c004 	addi	r16,r16,-28928
   8e364:	e0bffe17 	ldw	r2,-8(fp)
   8e368:	01400304 	movi	r5,12
   8e36c:	1009883a 	mov	r4,r2
   8e370:	008b08c0 	call	8b08c <__mulsi3>
   8e374:	8085883a 	add	r2,r16,r2
   8e378:	10000015 	stw	zero,0(r2)
  }
}
   8e37c:	0001883a 	nop
   8e380:	e6ffff04 	addi	sp,fp,-4
   8e384:	dfc00217 	ldw	ra,8(sp)
   8e388:	df000117 	ldw	fp,4(sp)
   8e38c:	dc000017 	ldw	r16,0(sp)
   8e390:	dec00304 	addi	sp,sp,12
   8e394:	f800283a 	ret

0008e398 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8e398:	defff904 	addi	sp,sp,-28
   8e39c:	df000615 	stw	fp,24(sp)
   8e3a0:	df000604 	addi	fp,sp,24
   8e3a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e3a8:	0005303a 	rdctl	r2,status
   8e3ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e3b0:	e0fffe17 	ldw	r3,-8(fp)
   8e3b4:	00bfff84 	movi	r2,-2
   8e3b8:	1884703a 	and	r2,r3,r2
   8e3bc:	1001703a 	wrctl	status,r2
  
  return context;
   8e3c0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8e3c4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8e3c8:	d0a00e17 	ldw	r2,-32712(gp)
   8e3cc:	10c000c4 	addi	r3,r2,3
   8e3d0:	00bfff04 	movi	r2,-4
   8e3d4:	1884703a 	and	r2,r3,r2
   8e3d8:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8e3dc:	d0e00e17 	ldw	r3,-32712(gp)
   8e3e0:	e0bfff17 	ldw	r2,-4(fp)
   8e3e4:	1887883a 	add	r3,r3,r2
   8e3e8:	00800334 	movhi	r2,12
   8e3ec:	10ba0004 	addi	r2,r2,-6144
   8e3f0:	10c0062e 	bgeu	r2,r3,8e40c <sbrk+0x74>
   8e3f4:	e0bffb17 	ldw	r2,-20(fp)
   8e3f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e3fc:	e0bffa17 	ldw	r2,-24(fp)
   8e400:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8e404:	00bfffc4 	movi	r2,-1
   8e408:	00000b06 	br	8e438 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8e40c:	d0a00e17 	ldw	r2,-32712(gp)
   8e410:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8e414:	d0e00e17 	ldw	r3,-32712(gp)
   8e418:	e0bfff17 	ldw	r2,-4(fp)
   8e41c:	1885883a 	add	r2,r3,r2
   8e420:	d0a00e15 	stw	r2,-32712(gp)
   8e424:	e0bffb17 	ldw	r2,-20(fp)
   8e428:	e0bffc15 	stw	r2,-16(fp)
   8e42c:	e0bffc17 	ldw	r2,-16(fp)
   8e430:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8e434:	e0bffd17 	ldw	r2,-12(fp)
} 
   8e438:	e037883a 	mov	sp,fp
   8e43c:	df000017 	ldw	fp,0(sp)
   8e440:	dec00104 	addi	sp,sp,4
   8e444:	f800283a 	ret

0008e448 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e448:	defffe04 	addi	sp,sp,-8
   8e44c:	dfc00115 	stw	ra,4(sp)
   8e450:	df000015 	stw	fp,0(sp)
   8e454:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e458:	d0a00c17 	ldw	r2,-32720(gp)
   8e45c:	10000326 	beq	r2,zero,8e46c <alt_get_errno+0x24>
   8e460:	d0a00c17 	ldw	r2,-32720(gp)
   8e464:	103ee83a 	callr	r2
   8e468:	00000106 	br	8e470 <alt_get_errno+0x28>
   8e46c:	d0a71e04 	addi	r2,gp,-25480
}
   8e470:	e037883a 	mov	sp,fp
   8e474:	dfc00117 	ldw	ra,4(sp)
   8e478:	df000017 	ldw	fp,0(sp)
   8e47c:	dec00204 	addi	sp,sp,8
   8e480:	f800283a 	ret

0008e484 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8e484:	defff904 	addi	sp,sp,-28
   8e488:	dfc00615 	stw	ra,24(sp)
   8e48c:	df000515 	stw	fp,20(sp)
   8e490:	df000504 	addi	fp,sp,20
   8e494:	e13ffd15 	stw	r4,-12(fp)
   8e498:	e17ffe15 	stw	r5,-8(fp)
   8e49c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e4a0:	e0bffd17 	ldw	r2,-12(fp)
   8e4a4:	10000816 	blt	r2,zero,8e4c8 <write+0x44>
   8e4a8:	01400304 	movi	r5,12
   8e4ac:	e13ffd17 	ldw	r4,-12(fp)
   8e4b0:	008b08c0 	call	8b08c <__mulsi3>
   8e4b4:	1007883a 	mov	r3,r2
   8e4b8:	008002b4 	movhi	r2,10
   8e4bc:	10a3c004 	addi	r2,r2,-28928
   8e4c0:	1885883a 	add	r2,r3,r2
   8e4c4:	00000106 	br	8e4cc <write+0x48>
   8e4c8:	0005883a 	mov	r2,zero
   8e4cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8e4d0:	e0bffb17 	ldw	r2,-20(fp)
   8e4d4:	10002126 	beq	r2,zero,8e55c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8e4d8:	e0bffb17 	ldw	r2,-20(fp)
   8e4dc:	10800217 	ldw	r2,8(r2)
   8e4e0:	108000cc 	andi	r2,r2,3
   8e4e4:	10001826 	beq	r2,zero,8e548 <write+0xc4>
   8e4e8:	e0bffb17 	ldw	r2,-20(fp)
   8e4ec:	10800017 	ldw	r2,0(r2)
   8e4f0:	10800617 	ldw	r2,24(r2)
   8e4f4:	10001426 	beq	r2,zero,8e548 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8e4f8:	e0bffb17 	ldw	r2,-20(fp)
   8e4fc:	10800017 	ldw	r2,0(r2)
   8e500:	10800617 	ldw	r2,24(r2)
   8e504:	e0ffff17 	ldw	r3,-4(fp)
   8e508:	180d883a 	mov	r6,r3
   8e50c:	e17ffe17 	ldw	r5,-8(fp)
   8e510:	e13ffb17 	ldw	r4,-20(fp)
   8e514:	103ee83a 	callr	r2
   8e518:	e0bffc15 	stw	r2,-16(fp)
   8e51c:	e0bffc17 	ldw	r2,-16(fp)
   8e520:	1000070e 	bge	r2,zero,8e540 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   8e524:	008e4480 	call	8e448 <alt_get_errno>
   8e528:	1007883a 	mov	r3,r2
   8e52c:	e0bffc17 	ldw	r2,-16(fp)
   8e530:	0085c83a 	sub	r2,zero,r2
   8e534:	18800015 	stw	r2,0(r3)
        return -1;
   8e538:	00bfffc4 	movi	r2,-1
   8e53c:	00000c06 	br	8e570 <write+0xec>
      }
      return rval;
   8e540:	e0bffc17 	ldw	r2,-16(fp)
   8e544:	00000a06 	br	8e570 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8e548:	008e4480 	call	8e448 <alt_get_errno>
   8e54c:	1007883a 	mov	r3,r2
   8e550:	00800344 	movi	r2,13
   8e554:	18800015 	stw	r2,0(r3)
   8e558:	00000406 	br	8e56c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8e55c:	008e4480 	call	8e448 <alt_get_errno>
   8e560:	1007883a 	mov	r3,r2
   8e564:	00801444 	movi	r2,81
   8e568:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8e56c:	00bfffc4 	movi	r2,-1
}
   8e570:	e037883a 	mov	sp,fp
   8e574:	dfc00117 	ldw	ra,4(sp)
   8e578:	df000017 	ldw	fp,0(sp)
   8e57c:	dec00204 	addi	sp,sp,8
   8e580:	f800283a 	ret

0008e584 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   8e584:	deffdf04 	addi	sp,sp,-132
   8e588:	dfc02015 	stw	ra,128(sp)
   8e58c:	df001f15 	stw	fp,124(sp)
   8e590:	df001f04 	addi	fp,sp,124
   8e594:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8e598:	e0bfe204 	addi	r2,fp,-120
   8e59c:	100b883a 	mov	r5,r2
   8e5a0:	01003fc4 	movi	r4,255
   8e5a4:	00959e80 	call	959e8 <OSTaskQuery>
   8e5a8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8e5ac:	e0bffe83 	ldbu	r2,-6(fp)
   8e5b0:	10803fcc 	andi	r2,r2,255
   8e5b4:	10001e1e 	bne	r2,zero,8e630 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   8e5b8:	e0bfee83 	ldbu	r2,-70(fp)
   8e5bc:	10803fcc 	andi	r2,r2,255
   8e5c0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   8e5c4:	d0a72517 	ldw	r2,-25452(gp)
   8e5c8:	e0fffd04 	addi	r3,fp,-12
   8e5cc:	180b883a 	mov	r5,r3
   8e5d0:	1009883a 	mov	r4,r2
   8e5d4:	00942000 	call	94200 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   8e5d8:	e0bffe43 	ldbu	r2,-7(fp)
   8e5dc:	10803fcc 	andi	r2,r2,255
   8e5e0:	10000726 	beq	r2,zero,8e600 <__env_lock+0x7c>
   8e5e4:	d0a00f17 	ldw	r2,-32708(gp)
   8e5e8:	e0ffe117 	ldw	r3,-124(fp)
   8e5ec:	1880041e 	bne	r3,r2,8e600 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   8e5f0:	d0a72417 	ldw	r2,-25456(gp)
   8e5f4:	10800044 	addi	r2,r2,1
   8e5f8:	d0a72415 	stw	r2,-25456(gp)
   8e5fc:	00000a06 	br	8e628 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   8e600:	d0a72517 	ldw	r2,-25452(gp)
   8e604:	e0fffe84 	addi	r3,fp,-6
   8e608:	180d883a 	mov	r6,r3
   8e60c:	000b883a 	mov	r5,zero
   8e610:	1009883a 	mov	r4,r2
   8e614:	0093d780 	call	93d78 <OSSemPend>
    locks  = 1;
   8e618:	00800044 	movi	r2,1
   8e61c:	d0a72415 	stw	r2,-25456(gp)
    lockid = id;
   8e620:	e0bfe117 	ldw	r2,-124(fp)
   8e624:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   8e628:	0001883a 	nop
   8e62c:	00000106 	br	8e634 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   8e630:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8e634:	e037883a 	mov	sp,fp
   8e638:	dfc00117 	ldw	ra,4(sp)
   8e63c:	df000017 	ldw	fp,0(sp)
   8e640:	dec00204 	addi	sp,sp,8
   8e644:	f800283a 	ret

0008e648 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   8e648:	defffd04 	addi	sp,sp,-12
   8e64c:	dfc00215 	stw	ra,8(sp)
   8e650:	df000115 	stw	fp,4(sp)
   8e654:	df000104 	addi	fp,sp,4
   8e658:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   8e65c:	d0a72417 	ldw	r2,-25456(gp)
   8e660:	10000b26 	beq	r2,zero,8e690 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   8e664:	d0a72417 	ldw	r2,-25456(gp)
   8e668:	10bfffc4 	addi	r2,r2,-1
   8e66c:	d0a72415 	stw	r2,-25456(gp)
   8e670:	d0a72417 	ldw	r2,-25456(gp)
   8e674:	1000071e 	bne	r2,zero,8e694 <__env_unlock+0x4c>
  {
    lockid = -1;
   8e678:	00bfffc4 	movi	r2,-1
   8e67c:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
   8e680:	d0a72517 	ldw	r2,-25452(gp)
   8e684:	1009883a 	mov	r4,r2
   8e688:	00940f00 	call	940f0 <OSSemPost>
   8e68c:	00000106 	br	8e694 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   8e690:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8e694:	e037883a 	mov	sp,fp
   8e698:	dfc00117 	ldw	ra,4(sp)
   8e69c:	df000017 	ldw	fp,0(sp)
   8e6a0:	dec00204 	addi	sp,sp,8
   8e6a4:	f800283a 	ret

0008e6a8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   8e6a8:	deffdb04 	addi	sp,sp,-148
   8e6ac:	dfc02415 	stw	ra,144(sp)
   8e6b0:	df002315 	stw	fp,140(sp)
   8e6b4:	df002304 	addi	fp,sp,140
   8e6b8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e6bc:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   8e6c0:	d0a72843 	ldbu	r2,-25439(gp)
   8e6c4:	10803fcc 	andi	r2,r2,255
   8e6c8:	10800060 	cmpeqi	r2,r2,1
   8e6cc:	10003626 	beq	r2,zero,8e7a8 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8e6d0:	e0bfe204 	addi	r2,fp,-120
   8e6d4:	100b883a 	mov	r5,r2
   8e6d8:	01003fc4 	movi	r4,255
   8e6dc:	00959e80 	call	959e8 <OSTaskQuery>
   8e6e0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8e6e4:	e0bffe83 	ldbu	r2,-6(fp)
   8e6e8:	10803fcc 	andi	r2,r2,255
   8e6ec:	1000301e 	bne	r2,zero,8e7b0 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   8e6f0:	e0bfee83 	ldbu	r2,-70(fp)
   8e6f4:	10803fcc 	andi	r2,r2,255
   8e6f8:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   8e6fc:	d0a72717 	ldw	r2,-25444(gp)
   8e700:	e0fffd04 	addi	r3,fp,-12
   8e704:	180b883a 	mov	r5,r3
   8e708:	1009883a 	mov	r4,r2
   8e70c:	00942000 	call	94200 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e710:	0005303a 	rdctl	r2,status
   8e714:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e718:	e0ffe117 	ldw	r3,-124(fp)
   8e71c:	00bfff84 	movi	r2,-2
   8e720:	1884703a 	and	r2,r3,r2
   8e724:	1001703a 	wrctl	status,r2
  
  return context;
   8e728:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   8e72c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   8e730:	e0bffd0b 	ldhu	r2,-12(fp)
   8e734:	10bfffcc 	andi	r2,r2,65535
   8e738:	10000b1e 	bne	r2,zero,8e768 <__malloc_lock+0xc0>
   8e73c:	d0a01017 	ldw	r2,-32704(gp)
   8e740:	e0ffde17 	ldw	r3,-136(fp)
   8e744:	1880081e 	bne	r3,r2,8e768 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   8e748:	d0a72617 	ldw	r2,-25448(gp)
   8e74c:	10800044 	addi	r2,r2,1
   8e750:	d0a72615 	stw	r2,-25448(gp)
   8e754:	e0bfdd17 	ldw	r2,-140(fp)
   8e758:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e75c:	e0bfdf17 	ldw	r2,-132(fp)
   8e760:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   8e764:	00000e06 	br	8e7a0 <__malloc_lock+0xf8>
   8e768:	e0bfdd17 	ldw	r2,-140(fp)
   8e76c:	e0bfe015 	stw	r2,-128(fp)
   8e770:	e0bfe017 	ldw	r2,-128(fp)
   8e774:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   8e778:	d0a72717 	ldw	r2,-25444(gp)
   8e77c:	e0fffe84 	addi	r3,fp,-6
   8e780:	180d883a 	mov	r6,r3
   8e784:	000b883a 	mov	r5,zero
   8e788:	1009883a 	mov	r4,r2
   8e78c:	0093d780 	call	93d78 <OSSemPend>
    locks  = 1;
   8e790:	00800044 	movi	r2,1
   8e794:	d0a72615 	stw	r2,-25448(gp)
    lockid = id;
   8e798:	e0bfde17 	ldw	r2,-136(fp)
   8e79c:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   8e7a0:	0001883a 	nop
   8e7a4:	00000306 	br	8e7b4 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   8e7a8:	0001883a 	nop
   8e7ac:	00000106 	br	8e7b4 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   8e7b0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8e7b4:	e037883a 	mov	sp,fp
   8e7b8:	dfc00117 	ldw	ra,4(sp)
   8e7bc:	df000017 	ldw	fp,0(sp)
   8e7c0:	dec00204 	addi	sp,sp,8
   8e7c4:	f800283a 	ret

0008e7c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8e7c8:	defff804 	addi	sp,sp,-32
   8e7cc:	dfc00715 	stw	ra,28(sp)
   8e7d0:	df000615 	stw	fp,24(sp)
   8e7d4:	df000604 	addi	fp,sp,24
   8e7d8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e7dc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   8e7e0:	d0a72843 	ldbu	r2,-25439(gp)
   8e7e4:	10803fcc 	andi	r2,r2,255
   8e7e8:	10800060 	cmpeqi	r2,r2,1
   8e7ec:	10002326 	beq	r2,zero,8e87c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e7f0:	0005303a 	rdctl	r2,status
   8e7f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e7f8:	e0fffe17 	ldw	r3,-8(fp)
   8e7fc:	00bfff84 	movi	r2,-2
   8e800:	1884703a 	and	r2,r3,r2
   8e804:	1001703a 	wrctl	status,r2
  
  return context;
   8e808:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   8e80c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   8e810:	d0a72617 	ldw	r2,-25448(gp)
   8e814:	1000051e 	bne	r2,zero,8e82c <__malloc_unlock+0x64>
   8e818:	e0bffa17 	ldw	r2,-24(fp)
   8e81c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e820:	e0bffb17 	ldw	r2,-20(fp)
   8e824:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   8e828:	00001506 	br	8e880 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   8e82c:	d0a72617 	ldw	r2,-25448(gp)
   8e830:	10bfffc4 	addi	r2,r2,-1
   8e834:	d0a72615 	stw	r2,-25448(gp)
   8e838:	d0a72617 	ldw	r2,-25448(gp)
   8e83c:	10000a1e 	bne	r2,zero,8e868 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   8e840:	00bfffc4 	movi	r2,-1
   8e844:	d0a01015 	stw	r2,-32704(gp)
   8e848:	e0bffa17 	ldw	r2,-24(fp)
   8e84c:	e0bffc15 	stw	r2,-16(fp)
   8e850:	e0bffc17 	ldw	r2,-16(fp)
   8e854:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   8e858:	d0a72717 	ldw	r2,-25444(gp)
   8e85c:	1009883a 	mov	r4,r2
   8e860:	00940f00 	call	940f0 <OSSemPost>
   8e864:	00000606 	br	8e880 <__malloc_unlock+0xb8>
   8e868:	e0bffa17 	ldw	r2,-24(fp)
   8e86c:	e0bffd15 	stw	r2,-12(fp)
   8e870:	e0bffd17 	ldw	r2,-12(fp)
   8e874:	1001703a 	wrctl	status,r2
   8e878:	00000106 	br	8e880 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   8e87c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8e880:	e037883a 	mov	sp,fp
   8e884:	dfc00117 	ldw	ra,4(sp)
   8e888:	df000017 	ldw	fp,0(sp)
   8e88c:	dec00204 	addi	sp,sp,8
   8e890:	f800283a 	ret

0008e894 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8e894:	defff704 	addi	sp,sp,-36
   8e898:	dfc00815 	stw	ra,32(sp)
   8e89c:	df000715 	stw	fp,28(sp)
   8e8a0:	df000704 	addi	fp,sp,28
   8e8a4:	e13ffd15 	stw	r4,-12(fp)
   8e8a8:	e17ffe15 	stw	r5,-8(fp)
   8e8ac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e8b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8e8b4:	e0bfff17 	ldw	r2,-4(fp)
   8e8b8:	1000021e 	bne	r2,zero,8e8c4 <OSEventNameGet+0x30>
        return (0);
   8e8bc:	0005883a 	mov	r2,zero
   8e8c0:	00003706 	br	8e9a0 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8e8c4:	e0bffd17 	ldw	r2,-12(fp)
   8e8c8:	1000051e 	bne	r2,zero,8e8e0 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   8e8cc:	e0bfff17 	ldw	r2,-4(fp)
   8e8d0:	00c00104 	movi	r3,4
   8e8d4:	10c00005 	stb	r3,0(r2)
        return (0);
   8e8d8:	0005883a 	mov	r2,zero
   8e8dc:	00003006 	br	8e9a0 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8e8e0:	e0bffe17 	ldw	r2,-8(fp)
   8e8e4:	1000051e 	bne	r2,zero,8e8fc <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   8e8e8:	e0bfff17 	ldw	r2,-4(fp)
   8e8ec:	00c00304 	movi	r3,12
   8e8f0:	10c00005 	stb	r3,0(r2)
        return (0);
   8e8f4:	0005883a 	mov	r2,zero
   8e8f8:	00002906 	br	8e9a0 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8e8fc:	d0a73603 	ldbu	r2,-25384(gp)
   8e900:	10803fcc 	andi	r2,r2,255
   8e904:	10000526 	beq	r2,zero,8e91c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   8e908:	e0bfff17 	ldw	r2,-4(fp)
   8e90c:	00c00444 	movi	r3,17
   8e910:	10c00005 	stb	r3,0(r2)
        return (0);
   8e914:	0005883a 	mov	r2,zero
   8e918:	00002106 	br	8e9a0 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   8e91c:	e0bffd17 	ldw	r2,-12(fp)
   8e920:	10800003 	ldbu	r2,0(r2)
   8e924:	10803fcc 	andi	r2,r2,255
   8e928:	10bfffc4 	addi	r2,r2,-1
   8e92c:	10800128 	cmpgeui	r2,r2,4
   8e930:	10000526 	beq	r2,zero,8e948 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8e934:	e0bfff17 	ldw	r2,-4(fp)
   8e938:	00c00044 	movi	r3,1
   8e93c:	10c00005 	stb	r3,0(r2)
             return (0);
   8e940:	0005883a 	mov	r2,zero
   8e944:	00001606 	br	8e9a0 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   8e948:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e94c:	0005303a 	rdctl	r2,status
   8e950:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e954:	e0fffb17 	ldw	r3,-20(fp)
   8e958:	00bfff84 	movi	r2,-2
   8e95c:	1884703a 	and	r2,r3,r2
   8e960:	1001703a 	wrctl	status,r2
  
  return context;
   8e964:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   8e968:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   8e96c:	e0bffd17 	ldw	r2,-12(fp)
   8e970:	10800384 	addi	r2,r2,14
   8e974:	100b883a 	mov	r5,r2
   8e978:	e13ffe17 	ldw	r4,-8(fp)
   8e97c:	00903180 	call	90318 <OS_StrCopy>
   8e980:	e0bffa05 	stb	r2,-24(fp)
   8e984:	e0bff917 	ldw	r2,-28(fp)
   8e988:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e98c:	e0bffc17 	ldw	r2,-16(fp)
   8e990:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8e994:	e0bfff17 	ldw	r2,-4(fp)
   8e998:	10000005 	stb	zero,0(r2)
    return (len);
   8e99c:	e0bffa03 	ldbu	r2,-24(fp)
}
   8e9a0:	e037883a 	mov	sp,fp
   8e9a4:	dfc00117 	ldw	ra,4(sp)
   8e9a8:	df000017 	ldw	fp,0(sp)
   8e9ac:	dec00204 	addi	sp,sp,8
   8e9b0:	f800283a 	ret

0008e9b4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8e9b4:	defff604 	addi	sp,sp,-40
   8e9b8:	dfc00915 	stw	ra,36(sp)
   8e9bc:	df000815 	stw	fp,32(sp)
   8e9c0:	df000804 	addi	fp,sp,32
   8e9c4:	e13ffd15 	stw	r4,-12(fp)
   8e9c8:	e17ffe15 	stw	r5,-8(fp)
   8e9cc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e9d0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8e9d4:	e0bfff17 	ldw	r2,-4(fp)
   8e9d8:	10004026 	beq	r2,zero,8eadc <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8e9dc:	e0bffd17 	ldw	r2,-12(fp)
   8e9e0:	1000041e 	bne	r2,zero,8e9f4 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   8e9e4:	e0bfff17 	ldw	r2,-4(fp)
   8e9e8:	00c00104 	movi	r3,4
   8e9ec:	10c00005 	stb	r3,0(r2)
        return;
   8e9f0:	00003b06 	br	8eae0 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8e9f4:	e0bffe17 	ldw	r2,-8(fp)
   8e9f8:	1000041e 	bne	r2,zero,8ea0c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   8e9fc:	e0bfff17 	ldw	r2,-4(fp)
   8ea00:	00c00304 	movi	r3,12
   8ea04:	10c00005 	stb	r3,0(r2)
        return;
   8ea08:	00003506 	br	8eae0 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8ea0c:	d0a73603 	ldbu	r2,-25384(gp)
   8ea10:	10803fcc 	andi	r2,r2,255
   8ea14:	10000426 	beq	r2,zero,8ea28 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   8ea18:	e0bfff17 	ldw	r2,-4(fp)
   8ea1c:	00c00484 	movi	r3,18
   8ea20:	10c00005 	stb	r3,0(r2)
        return;
   8ea24:	00002e06 	br	8eae0 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   8ea28:	e0bffd17 	ldw	r2,-12(fp)
   8ea2c:	10800003 	ldbu	r2,0(r2)
   8ea30:	10803fcc 	andi	r2,r2,255
   8ea34:	10bfffc4 	addi	r2,r2,-1
   8ea38:	10800128 	cmpgeui	r2,r2,4
   8ea3c:	10000426 	beq	r2,zero,8ea50 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8ea40:	e0bfff17 	ldw	r2,-4(fp)
   8ea44:	00c00044 	movi	r3,1
   8ea48:	10c00005 	stb	r3,0(r2)
             return;
   8ea4c:	00002406 	br	8eae0 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   8ea50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ea54:	0005303a 	rdctl	r2,status
   8ea58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ea5c:	e0fffc17 	ldw	r3,-16(fp)
   8ea60:	00bfff84 	movi	r2,-2
   8ea64:	1884703a 	and	r2,r3,r2
   8ea68:	1001703a 	wrctl	status,r2
  
  return context;
   8ea6c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   8ea70:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   8ea74:	e13ffe17 	ldw	r4,-8(fp)
   8ea78:	009038c0 	call	9038c <OS_StrLen>
   8ea7c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   8ea80:	e0bffa03 	ldbu	r2,-24(fp)
   8ea84:	10800830 	cmpltui	r2,r2,32
   8ea88:	1000081e 	bne	r2,zero,8eaac <OSEventNameSet+0xf8>
   8ea8c:	e0bff817 	ldw	r2,-32(fp)
   8ea90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ea94:	e0bff917 	ldw	r2,-28(fp)
   8ea98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   8ea9c:	e0bfff17 	ldw	r2,-4(fp)
   8eaa0:	00c002c4 	movi	r3,11
   8eaa4:	10c00005 	stb	r3,0(r2)
        return;
   8eaa8:	00000d06 	br	8eae0 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   8eaac:	e0bffd17 	ldw	r2,-12(fp)
   8eab0:	10800384 	addi	r2,r2,14
   8eab4:	e17ffe17 	ldw	r5,-8(fp)
   8eab8:	1009883a 	mov	r4,r2
   8eabc:	00903180 	call	90318 <OS_StrCopy>
   8eac0:	e0bff817 	ldw	r2,-32(fp)
   8eac4:	e0bffb15 	stw	r2,-20(fp)
   8eac8:	e0bffb17 	ldw	r2,-20(fp)
   8eacc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8ead0:	e0bfff17 	ldw	r2,-4(fp)
   8ead4:	10000005 	stb	zero,0(r2)
   8ead8:	00000106 	br	8eae0 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   8eadc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   8eae0:	e037883a 	mov	sp,fp
   8eae4:	dfc00117 	ldw	ra,4(sp)
   8eae8:	df000017 	ldw	fp,0(sp)
   8eaec:	dec00204 	addi	sp,sp,8
   8eaf0:	f800283a 	ret

0008eaf4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   8eaf4:	deffed04 	addi	sp,sp,-76
   8eaf8:	dfc01215 	stw	ra,72(sp)
   8eafc:	df001115 	stw	fp,68(sp)
   8eb00:	df001104 	addi	fp,sp,68
   8eb04:	e13ffc15 	stw	r4,-16(fp)
   8eb08:	e17ffd15 	stw	r5,-12(fp)
   8eb0c:	e1bffe15 	stw	r6,-8(fp)
   8eb10:	3805883a 	mov	r2,r7
   8eb14:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   8eb18:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   8eb1c:	e0800217 	ldw	r2,8(fp)
   8eb20:	1000021e 	bne	r2,zero,8eb2c <OSEventPendMulti+0x38>
        return (0);
   8eb24:	0005883a 	mov	r2,zero
   8eb28:	00017106 	br	8f0f0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   8eb2c:	e0bffc17 	ldw	r2,-16(fp)
   8eb30:	1000051e 	bne	r2,zero,8eb48 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   8eb34:	e0800217 	ldw	r2,8(fp)
   8eb38:	00c00104 	movi	r3,4
   8eb3c:	10c00005 	stb	r3,0(r2)
        return (0);
   8eb40:	0005883a 	mov	r2,zero
   8eb44:	00016a06 	br	8f0f0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   8eb48:	e0bffd17 	ldw	r2,-12(fp)
   8eb4c:	1000051e 	bne	r2,zero,8eb64 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   8eb50:	e0800217 	ldw	r2,8(fp)
   8eb54:	00c00104 	movi	r3,4
   8eb58:	10c00005 	stb	r3,0(r2)
        return (0);
   8eb5c:	0005883a 	mov	r2,zero
   8eb60:	00016306 	br	8f0f0 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   8eb64:	e0bffe17 	ldw	r2,-8(fp)
   8eb68:	1000051e 	bne	r2,zero,8eb80 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   8eb6c:	e0800217 	ldw	r2,8(fp)
   8eb70:	00c00104 	movi	r3,4
   8eb74:	10c00005 	stb	r3,0(r2)
        return (0);
   8eb78:	0005883a 	mov	r2,zero
   8eb7c:	00015c06 	br	8f0f0 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   8eb80:	e0bffd17 	ldw	r2,-12(fp)
   8eb84:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   8eb88:	e0bffc17 	ldw	r2,-16(fp)
   8eb8c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   8eb90:	e0bfef17 	ldw	r2,-68(fp)
   8eb94:	10800017 	ldw	r2,0(r2)
   8eb98:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   8eb9c:	00001906 	br	8ec04 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   8eba0:	e0bff017 	ldw	r2,-64(fp)
   8eba4:	10800003 	ldbu	r2,0(r2)
   8eba8:	10803fcc 	andi	r2,r2,255
   8ebac:	10c000a0 	cmpeqi	r3,r2,2
   8ebb0:	1800091e 	bne	r3,zero,8ebd8 <OSEventPendMulti+0xe4>
   8ebb4:	10c000e0 	cmpeqi	r3,r2,3
   8ebb8:	1800091e 	bne	r3,zero,8ebe0 <OSEventPendMulti+0xec>
   8ebbc:	10800060 	cmpeqi	r2,r2,1
   8ebc0:	1000091e 	bne	r2,zero,8ebe8 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   8ebc4:	e0800217 	ldw	r2,8(fp)
   8ebc8:	00c00044 	movi	r3,1
   8ebcc:	10c00005 	stb	r3,0(r2)
                 return (0);
   8ebd0:	0005883a 	mov	r2,zero
   8ebd4:	00014606 	br	8f0f0 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   8ebd8:	0001883a 	nop
   8ebdc:	00000306 	br	8ebec <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   8ebe0:	0001883a 	nop
   8ebe4:	00000106 	br	8ebec <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   8ebe8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   8ebec:	e0bfef17 	ldw	r2,-68(fp)
   8ebf0:	10800104 	addi	r2,r2,4
   8ebf4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   8ebf8:	e0bfef17 	ldw	r2,-68(fp)
   8ebfc:	10800017 	ldw	r2,0(r2)
   8ec00:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   8ec04:	e0bff017 	ldw	r2,-64(fp)
   8ec08:	103fe51e 	bne	r2,zero,8eba0 <__alt_data_end+0xfffd03a0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   8ec0c:	d0a73603 	ldbu	r2,-25384(gp)
   8ec10:	10803fcc 	andi	r2,r2,255
   8ec14:	10000526 	beq	r2,zero,8ec2c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   8ec18:	e0800217 	ldw	r2,8(fp)
   8ec1c:	00c00084 	movi	r3,2
   8ec20:	10c00005 	stb	r3,0(r2)
        return (0);
   8ec24:	0005883a 	mov	r2,zero
   8ec28:	00013106 	br	8f0f0 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   8ec2c:	d0a72803 	ldbu	r2,-25440(gp)
   8ec30:	10803fcc 	andi	r2,r2,255
   8ec34:	10000526 	beq	r2,zero,8ec4c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   8ec38:	e0800217 	ldw	r2,8(fp)
   8ec3c:	00c00344 	movi	r3,13
   8ec40:	10c00005 	stb	r3,0(r2)
        return (0);
   8ec44:	0005883a 	mov	r2,zero
   8ec48:	00012906 	br	8f0f0 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ec4c:	0005303a 	rdctl	r2,status
   8ec50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ec54:	e0fffb17 	ldw	r3,-20(fp)
   8ec58:	00bfff84 	movi	r2,-2
   8ec5c:	1884703a 	and	r2,r3,r2
   8ec60:	1001703a 	wrctl	status,r2
  
  return context;
   8ec64:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   8ec68:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   8ec6c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   8ec70:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   8ec74:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   8ec78:	e0bffc17 	ldw	r2,-16(fp)
   8ec7c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   8ec80:	e0bfef17 	ldw	r2,-68(fp)
   8ec84:	10800017 	ldw	r2,0(r2)
   8ec88:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8ec8c:	00008106 	br	8ee94 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   8ec90:	e0bff017 	ldw	r2,-64(fp)
   8ec94:	10800003 	ldbu	r2,0(r2)
   8ec98:	10803fcc 	andi	r2,r2,255
   8ec9c:	10c000a0 	cmpeqi	r3,r2,2
   8eca0:	18003c1e 	bne	r3,zero,8ed94 <OSEventPendMulti+0x2a0>
   8eca4:	10c000e0 	cmpeqi	r3,r2,3
   8eca8:	1800031e 	bne	r3,zero,8ecb8 <OSEventPendMulti+0x1c4>
   8ecac:	10800060 	cmpeqi	r2,r2,1
   8ecb0:	10001e1e 	bne	r2,zero,8ed2c <OSEventPendMulti+0x238>
   8ecb4:	00006606 	br	8ee50 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   8ecb8:	e0bff017 	ldw	r2,-64(fp)
   8ecbc:	1080020b 	ldhu	r2,8(r2)
   8ecc0:	10bfffcc 	andi	r2,r2,65535
   8ecc4:	10001526 	beq	r2,zero,8ed1c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   8ecc8:	e0bff017 	ldw	r2,-64(fp)
   8eccc:	1080020b 	ldhu	r2,8(r2)
   8ecd0:	10bfffc4 	addi	r2,r2,-1
   8ecd4:	1007883a 	mov	r3,r2
   8ecd8:	e0bff017 	ldw	r2,-64(fp)
   8ecdc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   8ece0:	e0bffd17 	ldw	r2,-12(fp)
   8ece4:	10c00104 	addi	r3,r2,4
   8ece8:	e0fffd15 	stw	r3,-12(fp)
   8ecec:	e0fff017 	ldw	r3,-64(fp)
   8ecf0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   8ecf4:	00800044 	movi	r2,1
   8ecf8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   8ecfc:	e0bffe17 	ldw	r2,-8(fp)
   8ed00:	10c00104 	addi	r3,r2,4
   8ed04:	e0fffe15 	stw	r3,-8(fp)
   8ed08:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   8ed0c:	e0bff18b 	ldhu	r2,-58(fp)
   8ed10:	10800044 	addi	r2,r2,1
   8ed14:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   8ed18:	00005806 	br	8ee7c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   8ed1c:	e0bff203 	ldbu	r2,-56(fp)
   8ed20:	10800054 	ori	r2,r2,1
   8ed24:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   8ed28:	00005406 	br	8ee7c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   8ed2c:	e0bff017 	ldw	r2,-64(fp)
   8ed30:	10800117 	ldw	r2,4(r2)
   8ed34:	10001326 	beq	r2,zero,8ed84 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   8ed38:	e0bffe17 	ldw	r2,-8(fp)
   8ed3c:	10c00104 	addi	r3,r2,4
   8ed40:	e0fffe15 	stw	r3,-8(fp)
   8ed44:	e0fff017 	ldw	r3,-64(fp)
   8ed48:	18c00117 	ldw	r3,4(r3)
   8ed4c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   8ed50:	e0bff017 	ldw	r2,-64(fp)
   8ed54:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   8ed58:	e0bffd17 	ldw	r2,-12(fp)
   8ed5c:	10c00104 	addi	r3,r2,4
   8ed60:	e0fffd15 	stw	r3,-12(fp)
   8ed64:	e0fff017 	ldw	r3,-64(fp)
   8ed68:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   8ed6c:	00800044 	movi	r2,1
   8ed70:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   8ed74:	e0bff18b 	ldhu	r2,-58(fp)
   8ed78:	10800044 	addi	r2,r2,1
   8ed7c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   8ed80:	00003e06 	br	8ee7c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   8ed84:	e0bff203 	ldbu	r2,-56(fp)
   8ed88:	10800094 	ori	r2,r2,2
   8ed8c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   8ed90:	00003a06 	br	8ee7c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   8ed94:	e0bff017 	ldw	r2,-64(fp)
   8ed98:	10800117 	ldw	r2,4(r2)
   8ed9c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   8eda0:	e0bff517 	ldw	r2,-44(fp)
   8eda4:	1080058b 	ldhu	r2,22(r2)
   8eda8:	10bfffcc 	andi	r2,r2,65535
   8edac:	10002426 	beq	r2,zero,8ee40 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   8edb0:	e0bffe17 	ldw	r2,-8(fp)
   8edb4:	10c00104 	addi	r3,r2,4
   8edb8:	e0fffe15 	stw	r3,-8(fp)
   8edbc:	e0fff517 	ldw	r3,-44(fp)
   8edc0:	18c00417 	ldw	r3,16(r3)
   8edc4:	19400104 	addi	r5,r3,4
   8edc8:	e13ff517 	ldw	r4,-44(fp)
   8edcc:	21400415 	stw	r5,16(r4)
   8edd0:	18c00017 	ldw	r3,0(r3)
   8edd4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   8edd8:	e0bff517 	ldw	r2,-44(fp)
   8eddc:	10c00417 	ldw	r3,16(r2)
   8ede0:	e0bff517 	ldw	r2,-44(fp)
   8ede4:	10800217 	ldw	r2,8(r2)
   8ede8:	1880041e 	bne	r3,r2,8edfc <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   8edec:	e0bff517 	ldw	r2,-44(fp)
   8edf0:	10c00117 	ldw	r3,4(r2)
   8edf4:	e0bff517 	ldw	r2,-44(fp)
   8edf8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   8edfc:	e0bff517 	ldw	r2,-44(fp)
   8ee00:	1080058b 	ldhu	r2,22(r2)
   8ee04:	10bfffc4 	addi	r2,r2,-1
   8ee08:	1007883a 	mov	r3,r2
   8ee0c:	e0bff517 	ldw	r2,-44(fp)
   8ee10:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   8ee14:	e0bffd17 	ldw	r2,-12(fp)
   8ee18:	10c00104 	addi	r3,r2,4
   8ee1c:	e0fffd15 	stw	r3,-12(fp)
   8ee20:	e0fff017 	ldw	r3,-64(fp)
   8ee24:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   8ee28:	00800044 	movi	r2,1
   8ee2c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   8ee30:	e0bff18b 	ldhu	r2,-58(fp)
   8ee34:	10800044 	addi	r2,r2,1
   8ee38:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   8ee3c:	00000f06 	br	8ee7c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   8ee40:	e0bff203 	ldbu	r2,-56(fp)
   8ee44:	10800114 	ori	r2,r2,4
   8ee48:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   8ee4c:	00000b06 	br	8ee7c <OSEventPendMulti+0x388>
   8ee50:	e0bff317 	ldw	r2,-52(fp)
   8ee54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ee58:	e0bff417 	ldw	r2,-48(fp)
   8ee5c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   8ee60:	e0bffd17 	ldw	r2,-12(fp)
   8ee64:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   8ee68:	e0800217 	ldw	r2,8(fp)
   8ee6c:	00c00044 	movi	r3,1
   8ee70:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   8ee74:	e0bff18b 	ldhu	r2,-58(fp)
   8ee78:	00009d06 	br	8f0f0 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   8ee7c:	e0bfef17 	ldw	r2,-68(fp)
   8ee80:	10800104 	addi	r2,r2,4
   8ee84:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   8ee88:	e0bfef17 	ldw	r2,-68(fp)
   8ee8c:	10800017 	ldw	r2,0(r2)
   8ee90:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8ee94:	e0bff017 	ldw	r2,-64(fp)
   8ee98:	103f7d1e 	bne	r2,zero,8ec90 <__alt_data_end+0xfffd0490>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   8ee9c:	e0bff103 	ldbu	r2,-60(fp)
   8eea0:	10800058 	cmpnei	r2,r2,1
   8eea4:	10000a1e 	bne	r2,zero,8eed0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   8eea8:	e0bffd17 	ldw	r2,-12(fp)
   8eeac:	10000015 	stw	zero,0(r2)
   8eeb0:	e0bff317 	ldw	r2,-52(fp)
   8eeb4:	e0bff615 	stw	r2,-40(fp)
   8eeb8:	e0bff617 	ldw	r2,-40(fp)
   8eebc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   8eec0:	e0800217 	ldw	r2,8(fp)
   8eec4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   8eec8:	e0bff18b 	ldhu	r2,-58(fp)
   8eecc:	00008806 	br	8f0f0 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   8eed0:	d0a73717 	ldw	r2,-25380(gp)
   8eed4:	d0e73717 	ldw	r3,-25380(gp)
   8eed8:	19000c03 	ldbu	r4,48(r3)
   8eedc:	e0fff203 	ldbu	r3,-56(fp)
   8eee0:	20c6b03a 	or	r3,r4,r3
   8eee4:	1809883a 	mov	r4,r3
   8eee8:	00ffe004 	movi	r3,-128
   8eeec:	20c6b03a 	or	r3,r4,r3
   8eef0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   8eef4:	d0a73717 	ldw	r2,-25380(gp)
   8eef8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   8eefc:	d0a73717 	ldw	r2,-25380(gp)
   8ef00:	e0ffff0b 	ldhu	r3,-4(fp)
   8ef04:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   8ef08:	e13ffc17 	ldw	r4,-16(fp)
   8ef0c:	008fa300 	call	8fa30 <OS_EventTaskWaitMulti>
   8ef10:	e0bff317 	ldw	r2,-52(fp)
   8ef14:	e0bff915 	stw	r2,-28(fp)
   8ef18:	e0bff917 	ldw	r2,-28(fp)
   8ef1c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   8ef20:	00901d40 	call	901d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ef24:	0005303a 	rdctl	r2,status
   8ef28:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ef2c:	e0fff717 	ldw	r3,-36(fp)
   8ef30:	00bfff84 	movi	r2,-2
   8ef34:	1884703a 	and	r2,r3,r2
   8ef38:	1001703a 	wrctl	status,r2
  
  return context;
   8ef3c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   8ef40:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   8ef44:	d0a73717 	ldw	r2,-25380(gp)
   8ef48:	10800c43 	ldbu	r2,49(r2)
   8ef4c:	10803fcc 	andi	r2,r2,255
   8ef50:	10000226 	beq	r2,zero,8ef5c <OSEventPendMulti+0x468>
   8ef54:	108000a0 	cmpeqi	r2,r2,2
   8ef58:	10001826 	beq	r2,zero,8efbc <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   8ef5c:	d0a73717 	ldw	r2,-25380(gp)
   8ef60:	10800717 	ldw	r2,28(r2)
   8ef64:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   8ef68:	e0bff017 	ldw	r2,-64(fp)
   8ef6c:	10000b26 	beq	r2,zero,8ef9c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   8ef70:	e0bffd17 	ldw	r2,-12(fp)
   8ef74:	10c00104 	addi	r3,r2,4
   8ef78:	e0fffd15 	stw	r3,-12(fp)
   8ef7c:	e0fff017 	ldw	r3,-64(fp)
   8ef80:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   8ef84:	e0bffd17 	ldw	r2,-12(fp)
   8ef88:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   8ef8c:	e0bff18b 	ldhu	r2,-58(fp)
   8ef90:	10800044 	addi	r2,r2,1
   8ef94:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   8ef98:	00000d06 	br	8efd0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   8ef9c:	d0a73717 	ldw	r2,-25380(gp)
   8efa0:	00c00044 	movi	r3,1
   8efa4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8efa8:	d0a73717 	ldw	r2,-25380(gp)
   8efac:	e17ffc17 	ldw	r5,-16(fp)
   8efb0:	1009883a 	mov	r4,r2
   8efb4:	008fc380 	call	8fc38 <OS_EventTaskRemoveMulti>
             }
			 break;
   8efb8:	00000506 	br	8efd0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8efbc:	d0a73717 	ldw	r2,-25380(gp)
   8efc0:	e17ffc17 	ldw	r5,-16(fp)
   8efc4:	1009883a 	mov	r4,r2
   8efc8:	008fc380 	call	8fc38 <OS_EventTaskRemoveMulti>
             break;
   8efcc:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   8efd0:	d0a73717 	ldw	r2,-25380(gp)
   8efd4:	10800c43 	ldbu	r2,49(r2)
   8efd8:	10803fcc 	andi	r2,r2,255
   8efdc:	10000326 	beq	r2,zero,8efec <OSEventPendMulti+0x4f8>
   8efe0:	108000a0 	cmpeqi	r2,r2,2
   8efe4:	1000231e 	bne	r2,zero,8f074 <OSEventPendMulti+0x580>
   8efe8:	00002a06 	br	8f094 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   8efec:	e0bff017 	ldw	r2,-64(fp)
   8eff0:	10800003 	ldbu	r2,0(r2)
   8eff4:	10803fcc 	andi	r2,r2,255
   8eff8:	0080100e 	bge	zero,r2,8f03c <OSEventPendMulti+0x548>
   8effc:	10c000d0 	cmplti	r3,r2,3
   8f000:	1800071e 	bne	r3,zero,8f020 <OSEventPendMulti+0x52c>
   8f004:	108000e0 	cmpeqi	r2,r2,3
   8f008:	10000c26 	beq	r2,zero,8f03c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   8f00c:	e0bffe17 	ldw	r2,-8(fp)
   8f010:	10c00104 	addi	r3,r2,4
   8f014:	e0fffe15 	stw	r3,-8(fp)
   8f018:	10000015 	stw	zero,0(r2)
                      break;
   8f01c:	00001206 	br	8f068 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   8f020:	e0bffe17 	ldw	r2,-8(fp)
   8f024:	10c00104 	addi	r3,r2,4
   8f028:	e0fffe15 	stw	r3,-8(fp)
   8f02c:	d0e73717 	ldw	r3,-25380(gp)
   8f030:	18c00917 	ldw	r3,36(r3)
   8f034:	10c00015 	stw	r3,0(r2)
                      break;
   8f038:	00000b06 	br	8f068 <OSEventPendMulti+0x574>
   8f03c:	e0bff317 	ldw	r2,-52(fp)
   8f040:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f044:	e0bff817 	ldw	r2,-32(fp)
   8f048:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   8f04c:	e0bffd17 	ldw	r2,-12(fp)
   8f050:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   8f054:	e0800217 	ldw	r2,8(fp)
   8f058:	00c00044 	movi	r3,1
   8f05c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   8f060:	e0bff18b 	ldhu	r2,-58(fp)
   8f064:	00002206 	br	8f0f0 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   8f068:	e0800217 	ldw	r2,8(fp)
   8f06c:	10000005 	stb	zero,0(r2)
             break;
   8f070:	00001006 	br	8f0b4 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   8f074:	e0bffe17 	ldw	r2,-8(fp)
   8f078:	10c00104 	addi	r3,r2,4
   8f07c:	e0fffe15 	stw	r3,-8(fp)
   8f080:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   8f084:	e0800217 	ldw	r2,8(fp)
   8f088:	00c00384 	movi	r3,14
   8f08c:	10c00005 	stb	r3,0(r2)
             break;
   8f090:	00000806 	br	8f0b4 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   8f094:	e0bffe17 	ldw	r2,-8(fp)
   8f098:	10c00104 	addi	r3,r2,4
   8f09c:	e0fffe15 	stw	r3,-8(fp)
   8f0a0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   8f0a4:	e0800217 	ldw	r2,8(fp)
   8f0a8:	00c00284 	movi	r3,10
   8f0ac:	10c00005 	stb	r3,0(r2)
             break;
   8f0b0:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   8f0b4:	d0a73717 	ldw	r2,-25380(gp)
   8f0b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   8f0bc:	d0a73717 	ldw	r2,-25380(gp)
   8f0c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   8f0c4:	d0a73717 	ldw	r2,-25380(gp)
   8f0c8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   8f0cc:	d0a73717 	ldw	r2,-25380(gp)
   8f0d0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   8f0d4:	d0a73717 	ldw	r2,-25380(gp)
   8f0d8:	10000915 	stw	zero,36(r2)
   8f0dc:	e0bff317 	ldw	r2,-52(fp)
   8f0e0:	e0bffa15 	stw	r2,-24(fp)
   8f0e4:	e0bffa17 	ldw	r2,-24(fp)
   8f0e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   8f0ec:	e0bff18b 	ldhu	r2,-58(fp)
}
   8f0f0:	e037883a 	mov	sp,fp
   8f0f4:	dfc00117 	ldw	ra,4(sp)
   8f0f8:	df000017 	ldw	fp,0(sp)
   8f0fc:	dec00204 	addi	sp,sp,8
   8f100:	f800283a 	ret

0008f104 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   8f104:	defffe04 	addi	sp,sp,-8
   8f108:	dfc00115 	stw	ra,4(sp)
   8f10c:	df000015 	stw	fp,0(sp)
   8f110:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   8f114:	0097b040 	call	97b04 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   8f118:	008fe800 	call	8fe80 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   8f11c:	008fec80 	call	8fec8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   8f120:	00900340 	call	90034 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   8f124:	008fda00 	call	8fda0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   8f128:	0091ed40 	call	91ed4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   8f12c:	00927d40 	call	927d4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   8f130:	00939080 	call	93908 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   8f134:	008ff340 	call	8ff34 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   8f138:	008ffb40 	call	8ffb4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   8f13c:	0097b240 	call	97b24 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   8f140:	00908a80 	call	908a8 <OSDebugInit>
#endif
}
   8f144:	0001883a 	nop
   8f148:	e037883a 	mov	sp,fp
   8f14c:	dfc00117 	ldw	ra,4(sp)
   8f150:	df000017 	ldw	fp,0(sp)
   8f154:	dec00204 	addi	sp,sp,8
   8f158:	f800283a 	ret

0008f15c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   8f15c:	deffff04 	addi	sp,sp,-4
   8f160:	df000015 	stw	fp,0(sp)
   8f164:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   8f168:	d0a72843 	ldbu	r2,-25439(gp)
   8f16c:	10803fcc 	andi	r2,r2,255
   8f170:	10800058 	cmpnei	r2,r2,1
   8f174:	1000071e 	bne	r2,zero,8f194 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   8f178:	d0a73603 	ldbu	r2,-25384(gp)
   8f17c:	10803fcc 	andi	r2,r2,255
   8f180:	10803fe0 	cmpeqi	r2,r2,255
   8f184:	1000031e 	bne	r2,zero,8f194 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   8f188:	d0a73603 	ldbu	r2,-25384(gp)
   8f18c:	10800044 	addi	r2,r2,1
   8f190:	d0a73605 	stb	r2,-25384(gp)
        }
    }
}
   8f194:	0001883a 	nop
   8f198:	e037883a 	mov	sp,fp
   8f19c:	df000017 	ldw	fp,0(sp)
   8f1a0:	dec00104 	addi	sp,sp,4
   8f1a4:	f800283a 	ret

0008f1a8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   8f1a8:	defffb04 	addi	sp,sp,-20
   8f1ac:	dfc00415 	stw	ra,16(sp)
   8f1b0:	df000315 	stw	fp,12(sp)
   8f1b4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8f1b8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   8f1bc:	d0a72843 	ldbu	r2,-25439(gp)
   8f1c0:	10803fcc 	andi	r2,r2,255
   8f1c4:	10800058 	cmpnei	r2,r2,1
   8f1c8:	10002f1e 	bne	r2,zero,8f288 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f1cc:	0005303a 	rdctl	r2,status
   8f1d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f1d4:	e0ffff17 	ldw	r3,-4(fp)
   8f1d8:	00bfff84 	movi	r2,-2
   8f1dc:	1884703a 	and	r2,r3,r2
   8f1e0:	1001703a 	wrctl	status,r2
  
  return context;
   8f1e4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   8f1e8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   8f1ec:	d0a73603 	ldbu	r2,-25384(gp)
   8f1f0:	10803fcc 	andi	r2,r2,255
   8f1f4:	10000326 	beq	r2,zero,8f204 <OSIntExit+0x5c>
            OSIntNesting--;
   8f1f8:	d0a73603 	ldbu	r2,-25384(gp)
   8f1fc:	10bfffc4 	addi	r2,r2,-1
   8f200:	d0a73605 	stb	r2,-25384(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   8f204:	d0a73603 	ldbu	r2,-25384(gp)
   8f208:	10803fcc 	andi	r2,r2,255
   8f20c:	10001a1e 	bne	r2,zero,8f278 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   8f210:	d0a72803 	ldbu	r2,-25440(gp)
   8f214:	10803fcc 	andi	r2,r2,255
   8f218:	1000171e 	bne	r2,zero,8f278 <OSIntExit+0xd0>
                OS_SchedNew();
   8f21c:	00902a40 	call	902a4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   8f220:	d0e72a03 	ldbu	r3,-25432(gp)
   8f224:	d0a72a43 	ldbu	r2,-25431(gp)
   8f228:	18c03fcc 	andi	r3,r3,255
   8f22c:	10803fcc 	andi	r2,r2,255
   8f230:	18801126 	beq	r3,r2,8f278 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   8f234:	d0a72a03 	ldbu	r2,-25432(gp)
   8f238:	10c03fcc 	andi	r3,r2,255
   8f23c:	008002b4 	movhi	r2,10
   8f240:	108c3704 	addi	r2,r2,12508
   8f244:	18c7883a 	add	r3,r3,r3
   8f248:	18c7883a 	add	r3,r3,r3
   8f24c:	10c5883a 	add	r2,r2,r3
   8f250:	10800017 	ldw	r2,0(r2)
   8f254:	d0a73215 	stw	r2,-25400(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   8f258:	d0a73217 	ldw	r2,-25400(gp)
   8f25c:	10c00e17 	ldw	r3,56(r2)
   8f260:	18c00044 	addi	r3,r3,1
   8f264:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   8f268:	d0a72d17 	ldw	r2,-25420(gp)
   8f26c:	10800044 	addi	r2,r2,1
   8f270:	d0a72d15 	stw	r2,-25420(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   8f274:	00978300 	call	97830 <OSCtxSw>
   8f278:	e0bffd17 	ldw	r2,-12(fp)
   8f27c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f280:	e0bffe17 	ldw	r2,-8(fp)
   8f284:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8f288:	0001883a 	nop
   8f28c:	e037883a 	mov	sp,fp
   8f290:	dfc00117 	ldw	ra,4(sp)
   8f294:	df000017 	ldw	fp,0(sp)
   8f298:	dec00204 	addi	sp,sp,8
   8f29c:	f800283a 	ret

0008f2a0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   8f2a0:	defffc04 	addi	sp,sp,-16
   8f2a4:	df000315 	stw	fp,12(sp)
   8f2a8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8f2ac:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   8f2b0:	d0a72843 	ldbu	r2,-25439(gp)
   8f2b4:	10803fcc 	andi	r2,r2,255
   8f2b8:	10800058 	cmpnei	r2,r2,1
   8f2bc:	1000161e 	bne	r2,zero,8f318 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f2c0:	0005303a 	rdctl	r2,status
   8f2c4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f2c8:	e0ffff17 	ldw	r3,-4(fp)
   8f2cc:	00bfff84 	movi	r2,-2
   8f2d0:	1884703a 	and	r2,r3,r2
   8f2d4:	1001703a 	wrctl	status,r2
  
  return context;
   8f2d8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   8f2dc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   8f2e0:	d0a73603 	ldbu	r2,-25384(gp)
   8f2e4:	10803fcc 	andi	r2,r2,255
   8f2e8:	1000071e 	bne	r2,zero,8f308 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   8f2ec:	d0a72803 	ldbu	r2,-25440(gp)
   8f2f0:	10803fcc 	andi	r2,r2,255
   8f2f4:	10803fe0 	cmpeqi	r2,r2,255
   8f2f8:	1000031e 	bne	r2,zero,8f308 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   8f2fc:	d0a72803 	ldbu	r2,-25440(gp)
   8f300:	10800044 	addi	r2,r2,1
   8f304:	d0a72805 	stb	r2,-25440(gp)
   8f308:	e0bffd17 	ldw	r2,-12(fp)
   8f30c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f310:	e0bffe17 	ldw	r2,-8(fp)
   8f314:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8f318:	0001883a 	nop
   8f31c:	e037883a 	mov	sp,fp
   8f320:	df000017 	ldw	fp,0(sp)
   8f324:	dec00104 	addi	sp,sp,4
   8f328:	f800283a 	ret

0008f32c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   8f32c:	defff804 	addi	sp,sp,-32
   8f330:	dfc00715 	stw	ra,28(sp)
   8f334:	df000615 	stw	fp,24(sp)
   8f338:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8f33c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   8f340:	d0a72843 	ldbu	r2,-25439(gp)
   8f344:	10803fcc 	andi	r2,r2,255
   8f348:	10800058 	cmpnei	r2,r2,1
   8f34c:	1000281e 	bne	r2,zero,8f3f0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f350:	0005303a 	rdctl	r2,status
   8f354:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f358:	e0ffff17 	ldw	r3,-4(fp)
   8f35c:	00bfff84 	movi	r2,-2
   8f360:	1884703a 	and	r2,r3,r2
   8f364:	1001703a 	wrctl	status,r2
  
  return context;
   8f368:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   8f36c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   8f370:	d0a72803 	ldbu	r2,-25440(gp)
   8f374:	10803fcc 	andi	r2,r2,255
   8f378:	10001926 	beq	r2,zero,8f3e0 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   8f37c:	d0a72803 	ldbu	r2,-25440(gp)
   8f380:	10bfffc4 	addi	r2,r2,-1
   8f384:	d0a72805 	stb	r2,-25440(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   8f388:	d0a72803 	ldbu	r2,-25440(gp)
   8f38c:	10803fcc 	andi	r2,r2,255
   8f390:	10000e1e 	bne	r2,zero,8f3cc <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   8f394:	d0a73603 	ldbu	r2,-25384(gp)
   8f398:	10803fcc 	andi	r2,r2,255
   8f39c:	1000061e 	bne	r2,zero,8f3b8 <OSSchedUnlock+0x8c>
   8f3a0:	e0bffa17 	ldw	r2,-24(fp)
   8f3a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f3a8:	e0bffb17 	ldw	r2,-20(fp)
   8f3ac:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   8f3b0:	00901d40 	call	901d4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   8f3b4:	00000e06 	br	8f3f0 <OSSchedUnlock+0xc4>
   8f3b8:	e0bffa17 	ldw	r2,-24(fp)
   8f3bc:	e0bffc15 	stw	r2,-16(fp)
   8f3c0:	e0bffc17 	ldw	r2,-16(fp)
   8f3c4:	1001703a 	wrctl	status,r2
   8f3c8:	00000906 	br	8f3f0 <OSSchedUnlock+0xc4>
   8f3cc:	e0bffa17 	ldw	r2,-24(fp)
   8f3d0:	e0bffd15 	stw	r2,-12(fp)
   8f3d4:	e0bffd17 	ldw	r2,-12(fp)
   8f3d8:	1001703a 	wrctl	status,r2
   8f3dc:	00000406 	br	8f3f0 <OSSchedUnlock+0xc4>
   8f3e0:	e0bffa17 	ldw	r2,-24(fp)
   8f3e4:	e0bffe15 	stw	r2,-8(fp)
   8f3e8:	e0bffe17 	ldw	r2,-8(fp)
   8f3ec:	1001703a 	wrctl	status,r2
   8f3f0:	0001883a 	nop
   8f3f4:	e037883a 	mov	sp,fp
   8f3f8:	dfc00117 	ldw	ra,4(sp)
   8f3fc:	df000017 	ldw	fp,0(sp)
   8f400:	dec00204 	addi	sp,sp,8
   8f404:	f800283a 	ret

0008f408 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   8f408:	defffe04 	addi	sp,sp,-8
   8f40c:	dfc00115 	stw	ra,4(sp)
   8f410:	df000015 	stw	fp,0(sp)
   8f414:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   8f418:	d0a72843 	ldbu	r2,-25439(gp)
   8f41c:	10803fcc 	andi	r2,r2,255
   8f420:	10000f1e 	bne	r2,zero,8f460 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   8f424:	00902a40 	call	902a4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   8f428:	d0a72a03 	ldbu	r2,-25432(gp)
   8f42c:	d0a72a45 	stb	r2,-25431(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   8f430:	d0a72a03 	ldbu	r2,-25432(gp)
   8f434:	10c03fcc 	andi	r3,r2,255
   8f438:	008002b4 	movhi	r2,10
   8f43c:	108c3704 	addi	r2,r2,12508
   8f440:	18c7883a 	add	r3,r3,r3
   8f444:	18c7883a 	add	r3,r3,r3
   8f448:	10c5883a 	add	r2,r2,r3
   8f44c:	10800017 	ldw	r2,0(r2)
   8f450:	d0a73215 	stw	r2,-25400(gp)
        OSTCBCur      = OSTCBHighRdy;
   8f454:	d0a73217 	ldw	r2,-25400(gp)
   8f458:	d0a73715 	stw	r2,-25380(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   8f45c:	00978bc0 	call	978bc <OSStartHighRdy>
    }
}
   8f460:	0001883a 	nop
   8f464:	e037883a 	mov	sp,fp
   8f468:	dfc00117 	ldw	ra,4(sp)
   8f46c:	df000017 	ldw	fp,0(sp)
   8f470:	dec00204 	addi	sp,sp,8
   8f474:	f800283a 	ret

0008f478 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   8f478:	defff904 	addi	sp,sp,-28
   8f47c:	dfc00615 	stw	ra,24(sp)
   8f480:	df000515 	stw	fp,20(sp)
   8f484:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8f488:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   8f48c:	01000084 	movi	r4,2
   8f490:	0095b7c0 	call	95b7c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f494:	0005303a 	rdctl	r2,status
   8f498:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f49c:	e0fffc17 	ldw	r3,-16(fp)
   8f4a0:	00bfff84 	movi	r2,-2
   8f4a4:	1884703a 	and	r2,r3,r2
   8f4a8:	1001703a 	wrctl	status,r2
  
  return context;
   8f4ac:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   8f4b0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   8f4b4:	d0272915 	stw	zero,-25436(gp)
   8f4b8:	e0bffb17 	ldw	r2,-20(fp)
   8f4bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f4c0:	e0bffd17 	ldw	r2,-12(fp)
   8f4c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   8f4c8:	01001904 	movi	r4,100
   8f4cc:	0095b7c0 	call	95b7c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f4d0:	0005303a 	rdctl	r2,status
   8f4d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f4d8:	e0fffe17 	ldw	r3,-8(fp)
   8f4dc:	00bfff84 	movi	r2,-2
   8f4e0:	1884703a 	and	r2,r3,r2
   8f4e4:	1001703a 	wrctl	status,r2
  
  return context;
   8f4e8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   8f4ec:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   8f4f0:	d0a72917 	ldw	r2,-25436(gp)
   8f4f4:	d0a72e15 	stw	r2,-25416(gp)
    OSStatRdy    = OS_TRUE;
   8f4f8:	00800044 	movi	r2,1
   8f4fc:	d0a73a05 	stb	r2,-25368(gp)
   8f500:	e0bffb17 	ldw	r2,-20(fp)
   8f504:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f508:	e0bfff17 	ldw	r2,-4(fp)
   8f50c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   8f510:	0001883a 	nop
   8f514:	e037883a 	mov	sp,fp
   8f518:	dfc00117 	ldw	ra,4(sp)
   8f51c:	df000017 	ldw	fp,0(sp)
   8f520:	dec00204 	addi	sp,sp,8
   8f524:	f800283a 	ret

0008f528 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   8f528:	defff704 	addi	sp,sp,-36
   8f52c:	dfc00815 	stw	ra,32(sp)
   8f530:	df000715 	stw	fp,28(sp)
   8f534:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8f538:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   8f53c:	0097ae40 	call	97ae4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f540:	0005303a 	rdctl	r2,status
   8f544:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f548:	e0fffd17 	ldw	r3,-12(fp)
   8f54c:	00bfff84 	movi	r2,-2
   8f550:	1884703a 	and	r2,r3,r2
   8f554:	1001703a 	wrctl	status,r2
  
  return context;
   8f558:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   8f55c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   8f560:	d0a73817 	ldw	r2,-25376(gp)
   8f564:	10800044 	addi	r2,r2,1
   8f568:	d0a73815 	stw	r2,-25376(gp)
   8f56c:	e0bffb17 	ldw	r2,-20(fp)
   8f570:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f574:	e0bfff17 	ldw	r2,-4(fp)
   8f578:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   8f57c:	d0a72843 	ldbu	r2,-25439(gp)
   8f580:	10803fcc 	andi	r2,r2,255
   8f584:	10800058 	cmpnei	r2,r2,1
   8f588:	10006a1e 	bne	r2,zero,8f734 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   8f58c:	d0a72c03 	ldbu	r2,-25424(gp)
   8f590:	10803fcc 	andi	r2,r2,255
   8f594:	10c00060 	cmpeqi	r3,r2,1
   8f598:	1800061e 	bne	r3,zero,8f5b4 <OSTimeTick+0x8c>
   8f59c:	10c000a0 	cmpeqi	r3,r2,2
   8f5a0:	1800061e 	bne	r3,zero,8f5bc <OSTimeTick+0x94>
   8f5a4:	10000a1e 	bne	r2,zero,8f5d0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   8f5a8:	00800044 	movi	r2,1
   8f5ac:	e0bffa05 	stb	r2,-24(fp)
                 break;
   8f5b0:	00000b06 	br	8f5e0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   8f5b4:	e03ffa05 	stb	zero,-24(fp)
                 break;
   8f5b8:	00000906 	br	8f5e0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   8f5bc:	00800044 	movi	r2,1
   8f5c0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   8f5c4:	00800044 	movi	r2,1
   8f5c8:	d0a72c05 	stb	r2,-25424(gp)
                 break;
   8f5cc:	00000406 	br	8f5e0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   8f5d0:	00800044 	movi	r2,1
   8f5d4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   8f5d8:	d0272c05 	stb	zero,-25424(gp)
                 break;
   8f5dc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   8f5e0:	e0bffa03 	ldbu	r2,-24(fp)
   8f5e4:	10005226 	beq	r2,zero,8f730 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   8f5e8:	d0a72b17 	ldw	r2,-25428(gp)
   8f5ec:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8f5f0:	00004906 	br	8f718 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f5f4:	0005303a 	rdctl	r2,status
   8f5f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f5fc:	e0fffc17 	ldw	r3,-16(fp)
   8f600:	00bfff84 	movi	r2,-2
   8f604:	1884703a 	and	r2,r3,r2
   8f608:	1001703a 	wrctl	status,r2
  
  return context;
   8f60c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   8f610:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   8f614:	e0bff917 	ldw	r2,-28(fp)
   8f618:	10800b8b 	ldhu	r2,46(r2)
   8f61c:	10bfffcc 	andi	r2,r2,65535
   8f620:	10003626 	beq	r2,zero,8f6fc <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   8f624:	e0bff917 	ldw	r2,-28(fp)
   8f628:	10800b8b 	ldhu	r2,46(r2)
   8f62c:	10bfffc4 	addi	r2,r2,-1
   8f630:	1007883a 	mov	r3,r2
   8f634:	e0bff917 	ldw	r2,-28(fp)
   8f638:	10c00b8d 	sth	r3,46(r2)
   8f63c:	e0bff917 	ldw	r2,-28(fp)
   8f640:	10800b8b 	ldhu	r2,46(r2)
   8f644:	10bfffcc 	andi	r2,r2,65535
   8f648:	10002c1e 	bne	r2,zero,8f6fc <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   8f64c:	e0bff917 	ldw	r2,-28(fp)
   8f650:	10800c03 	ldbu	r2,48(r2)
   8f654:	10803fcc 	andi	r2,r2,255
   8f658:	10800dcc 	andi	r2,r2,55
   8f65c:	10000b26 	beq	r2,zero,8f68c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   8f660:	e0bff917 	ldw	r2,-28(fp)
   8f664:	10c00c03 	ldbu	r3,48(r2)
   8f668:	00bff204 	movi	r2,-56
   8f66c:	1884703a 	and	r2,r3,r2
   8f670:	1007883a 	mov	r3,r2
   8f674:	e0bff917 	ldw	r2,-28(fp)
   8f678:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   8f67c:	e0bff917 	ldw	r2,-28(fp)
   8f680:	00c00044 	movi	r3,1
   8f684:	10c00c45 	stb	r3,49(r2)
   8f688:	00000206 	br	8f694 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   8f68c:	e0bff917 	ldw	r2,-28(fp)
   8f690:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   8f694:	e0bff917 	ldw	r2,-28(fp)
   8f698:	10800c03 	ldbu	r2,48(r2)
   8f69c:	10803fcc 	andi	r2,r2,255
   8f6a0:	1080020c 	andi	r2,r2,8
   8f6a4:	1000151e 	bne	r2,zero,8f6fc <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   8f6a8:	e0bff917 	ldw	r2,-28(fp)
   8f6ac:	10c00d83 	ldbu	r3,54(r2)
   8f6b0:	d0a73403 	ldbu	r2,-25392(gp)
   8f6b4:	1884b03a 	or	r2,r3,r2
   8f6b8:	d0a73405 	stb	r2,-25392(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8f6bc:	e0bff917 	ldw	r2,-28(fp)
   8f6c0:	10800d03 	ldbu	r2,52(r2)
   8f6c4:	10c03fcc 	andi	r3,r2,255
   8f6c8:	e0bff917 	ldw	r2,-28(fp)
   8f6cc:	10800d03 	ldbu	r2,52(r2)
   8f6d0:	11003fcc 	andi	r4,r2,255
   8f6d4:	d0a73444 	addi	r2,gp,-25391
   8f6d8:	2085883a 	add	r2,r4,r2
   8f6dc:	11000003 	ldbu	r4,0(r2)
   8f6e0:	e0bff917 	ldw	r2,-28(fp)
   8f6e4:	10800d43 	ldbu	r2,53(r2)
   8f6e8:	2084b03a 	or	r2,r4,r2
   8f6ec:	1009883a 	mov	r4,r2
   8f6f0:	d0a73444 	addi	r2,gp,-25391
   8f6f4:	1885883a 	add	r2,r3,r2
   8f6f8:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   8f6fc:	e0bff917 	ldw	r2,-28(fp)
   8f700:	10800517 	ldw	r2,20(r2)
   8f704:	e0bff915 	stw	r2,-28(fp)
   8f708:	e0bffb17 	ldw	r2,-20(fp)
   8f70c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f710:	e0bffe17 	ldw	r2,-8(fp)
   8f714:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8f718:	e0bff917 	ldw	r2,-28(fp)
   8f71c:	10800c83 	ldbu	r2,50(r2)
   8f720:	10803fcc 	andi	r2,r2,255
   8f724:	10800518 	cmpnei	r2,r2,20
   8f728:	103fb21e 	bne	r2,zero,8f5f4 <__alt_data_end+0xfffd0df4>
   8f72c:	00000106 	br	8f734 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   8f730:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   8f734:	e037883a 	mov	sp,fp
   8f738:	dfc00117 	ldw	ra,4(sp)
   8f73c:	df000017 	ldw	fp,0(sp)
   8f740:	dec00204 	addi	sp,sp,8
   8f744:	f800283a 	ret

0008f748 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   8f748:	deffff04 	addi	sp,sp,-4
   8f74c:	df000015 	stw	fp,0(sp)
   8f750:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   8f754:	00804784 	movi	r2,286
}
   8f758:	e037883a 	mov	sp,fp
   8f75c:	df000017 	ldw	fp,0(sp)
   8f760:	dec00104 	addi	sp,sp,4
   8f764:	f800283a 	ret

0008f768 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   8f768:	deffff04 	addi	sp,sp,-4
   8f76c:	df000015 	stw	fp,0(sp)
   8f770:	d839883a 	mov	fp,sp
}
   8f774:	0001883a 	nop
   8f778:	e037883a 	mov	sp,fp
   8f77c:	df000017 	ldw	fp,0(sp)
   8f780:	dec00104 	addi	sp,sp,4
   8f784:	f800283a 	ret

0008f788 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   8f788:	defff804 	addi	sp,sp,-32
   8f78c:	dfc00715 	stw	ra,28(sp)
   8f790:	df000615 	stw	fp,24(sp)
   8f794:	df000604 	addi	fp,sp,24
   8f798:	e13ffc15 	stw	r4,-16(fp)
   8f79c:	e17ffd15 	stw	r5,-12(fp)
   8f7a0:	3007883a 	mov	r3,r6
   8f7a4:	3805883a 	mov	r2,r7
   8f7a8:	e0fffe05 	stb	r3,-8(fp)
   8f7ac:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   8f7b0:	e0bffc17 	ldw	r2,-16(fp)
   8f7b4:	10800283 	ldbu	r2,10(r2)
   8f7b8:	10c03fcc 	andi	r3,r2,255
   8f7bc:	008002b4 	movhi	r2,10
   8f7c0:	10a13f04 	addi	r2,r2,-31492
   8f7c4:	10c5883a 	add	r2,r2,r3
   8f7c8:	10800003 	ldbu	r2,0(r2)
   8f7cc:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   8f7d0:	e0bffa03 	ldbu	r2,-24(fp)
   8f7d4:	e0fffc17 	ldw	r3,-16(fp)
   8f7d8:	1885883a 	add	r2,r3,r2
   8f7dc:	108002c4 	addi	r2,r2,11
   8f7e0:	10800003 	ldbu	r2,0(r2)
   8f7e4:	10c03fcc 	andi	r3,r2,255
   8f7e8:	008002b4 	movhi	r2,10
   8f7ec:	10a13f04 	addi	r2,r2,-31492
   8f7f0:	10c5883a 	add	r2,r2,r3
   8f7f4:	10800003 	ldbu	r2,0(r2)
   8f7f8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   8f7fc:	e0bffa03 	ldbu	r2,-24(fp)
   8f800:	100490fa 	slli	r2,r2,3
   8f804:	1007883a 	mov	r3,r2
   8f808:	e0bffa43 	ldbu	r2,-23(fp)
   8f80c:	1885883a 	add	r2,r3,r2
   8f810:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   8f814:	e0fffa83 	ldbu	r3,-22(fp)
   8f818:	008002b4 	movhi	r2,10
   8f81c:	108c3704 	addi	r2,r2,12508
   8f820:	18c7883a 	add	r3,r3,r3
   8f824:	18c7883a 	add	r3,r3,r3
   8f828:	10c5883a 	add	r2,r2,r3
   8f82c:	10800017 	ldw	r2,0(r2)
   8f830:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   8f834:	e0bffb17 	ldw	r2,-20(fp)
   8f838:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   8f83c:	e0bffb17 	ldw	r2,-20(fp)
   8f840:	e0fffd17 	ldw	r3,-12(fp)
   8f844:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   8f848:	e0bffb17 	ldw	r2,-20(fp)
   8f84c:	10800c03 	ldbu	r2,48(r2)
   8f850:	1007883a 	mov	r3,r2
   8f854:	e0bffe03 	ldbu	r2,-8(fp)
   8f858:	0084303a 	nor	r2,zero,r2
   8f85c:	1884703a 	and	r2,r3,r2
   8f860:	1007883a 	mov	r3,r2
   8f864:	e0bffb17 	ldw	r2,-20(fp)
   8f868:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   8f86c:	e0bffb17 	ldw	r2,-20(fp)
   8f870:	e0ffff03 	ldbu	r3,-4(fp)
   8f874:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   8f878:	e0bffb17 	ldw	r2,-20(fp)
   8f87c:	10800c03 	ldbu	r2,48(r2)
   8f880:	10803fcc 	andi	r2,r2,255
   8f884:	1080020c 	andi	r2,r2,8
   8f888:	1000111e 	bne	r2,zero,8f8d0 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   8f88c:	e0bffb17 	ldw	r2,-20(fp)
   8f890:	10c00d83 	ldbu	r3,54(r2)
   8f894:	d0a73403 	ldbu	r2,-25392(gp)
   8f898:	1884b03a 	or	r2,r3,r2
   8f89c:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   8f8a0:	e0fffa03 	ldbu	r3,-24(fp)
   8f8a4:	e13ffa03 	ldbu	r4,-24(fp)
   8f8a8:	d0a73444 	addi	r2,gp,-25391
   8f8ac:	2085883a 	add	r2,r4,r2
   8f8b0:	11000003 	ldbu	r4,0(r2)
   8f8b4:	e0bffb17 	ldw	r2,-20(fp)
   8f8b8:	10800d43 	ldbu	r2,53(r2)
   8f8bc:	2084b03a 	or	r2,r4,r2
   8f8c0:	1009883a 	mov	r4,r2
   8f8c4:	d0a73444 	addi	r2,gp,-25391
   8f8c8:	1885883a 	add	r2,r3,r2
   8f8cc:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   8f8d0:	e17ffc17 	ldw	r5,-16(fp)
   8f8d4:	e13ffb17 	ldw	r4,-20(fp)
   8f8d8:	008fb800 	call	8fb80 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   8f8dc:	e0bffb17 	ldw	r2,-20(fp)
   8f8e0:	10800817 	ldw	r2,32(r2)
   8f8e4:	10000826 	beq	r2,zero,8f908 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   8f8e8:	e0bffb17 	ldw	r2,-20(fp)
   8f8ec:	10800817 	ldw	r2,32(r2)
   8f8f0:	100b883a 	mov	r5,r2
   8f8f4:	e13ffb17 	ldw	r4,-20(fp)
   8f8f8:	008fc380 	call	8fc38 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   8f8fc:	e0bffb17 	ldw	r2,-20(fp)
   8f900:	e0fffc17 	ldw	r3,-16(fp)
   8f904:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   8f908:	e0bffa83 	ldbu	r2,-22(fp)
}
   8f90c:	e037883a 	mov	sp,fp
   8f910:	dfc00117 	ldw	ra,4(sp)
   8f914:	df000017 	ldw	fp,0(sp)
   8f918:	dec00204 	addi	sp,sp,8
   8f91c:	f800283a 	ret

0008f920 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   8f920:	defffd04 	addi	sp,sp,-12
   8f924:	df000215 	stw	fp,8(sp)
   8f928:	df000204 	addi	fp,sp,8
   8f92c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   8f930:	d0a73717 	ldw	r2,-25380(gp)
   8f934:	e0ffff17 	ldw	r3,-4(fp)
   8f938:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   8f93c:	d0a73717 	ldw	r2,-25380(gp)
   8f940:	10800d03 	ldbu	r2,52(r2)
   8f944:	10803fcc 	andi	r2,r2,255
   8f948:	d0e73717 	ldw	r3,-25380(gp)
   8f94c:	18c00d03 	ldbu	r3,52(r3)
   8f950:	18c03fcc 	andi	r3,r3,255
   8f954:	e13fff17 	ldw	r4,-4(fp)
   8f958:	20c7883a 	add	r3,r4,r3
   8f95c:	18c002c4 	addi	r3,r3,11
   8f960:	19000003 	ldbu	r4,0(r3)
   8f964:	d0e73717 	ldw	r3,-25380(gp)
   8f968:	18c00d43 	ldbu	r3,53(r3)
   8f96c:	20c6b03a 	or	r3,r4,r3
   8f970:	1809883a 	mov	r4,r3
   8f974:	e0ffff17 	ldw	r3,-4(fp)
   8f978:	1885883a 	add	r2,r3,r2
   8f97c:	108002c4 	addi	r2,r2,11
   8f980:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8f984:	e0bfff17 	ldw	r2,-4(fp)
   8f988:	10c00283 	ldbu	r3,10(r2)
   8f98c:	d0a73717 	ldw	r2,-25380(gp)
   8f990:	10800d83 	ldbu	r2,54(r2)
   8f994:	1884b03a 	or	r2,r3,r2
   8f998:	1007883a 	mov	r3,r2
   8f99c:	e0bfff17 	ldw	r2,-4(fp)
   8f9a0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8f9a4:	d0a73717 	ldw	r2,-25380(gp)
   8f9a8:	10800d03 	ldbu	r2,52(r2)
   8f9ac:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8f9b0:	e0fffe03 	ldbu	r3,-8(fp)
   8f9b4:	e13ffe03 	ldbu	r4,-8(fp)
   8f9b8:	d0a73444 	addi	r2,gp,-25391
   8f9bc:	2085883a 	add	r2,r4,r2
   8f9c0:	10800003 	ldbu	r2,0(r2)
   8f9c4:	1009883a 	mov	r4,r2
   8f9c8:	d0a73717 	ldw	r2,-25380(gp)
   8f9cc:	10800d43 	ldbu	r2,53(r2)
   8f9d0:	0084303a 	nor	r2,zero,r2
   8f9d4:	2084703a 	and	r2,r4,r2
   8f9d8:	1009883a 	mov	r4,r2
   8f9dc:	d0a73444 	addi	r2,gp,-25391
   8f9e0:	1885883a 	add	r2,r3,r2
   8f9e4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   8f9e8:	e0fffe03 	ldbu	r3,-8(fp)
   8f9ec:	d0a73444 	addi	r2,gp,-25391
   8f9f0:	1885883a 	add	r2,r3,r2
   8f9f4:	10800003 	ldbu	r2,0(r2)
   8f9f8:	10803fcc 	andi	r2,r2,255
   8f9fc:	1000071e 	bne	r2,zero,8fa1c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8fa00:	d0a73717 	ldw	r2,-25380(gp)
   8fa04:	10800d83 	ldbu	r2,54(r2)
   8fa08:	0084303a 	nor	r2,zero,r2
   8fa0c:	1007883a 	mov	r3,r2
   8fa10:	d0a73403 	ldbu	r2,-25392(gp)
   8fa14:	1884703a 	and	r2,r3,r2
   8fa18:	d0a73405 	stb	r2,-25392(gp)
    }
}
   8fa1c:	0001883a 	nop
   8fa20:	e037883a 	mov	sp,fp
   8fa24:	df000017 	ldw	fp,0(sp)
   8fa28:	dec00104 	addi	sp,sp,4
   8fa2c:	f800283a 	ret

0008fa30 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   8fa30:	defffb04 	addi	sp,sp,-20
   8fa34:	df000415 	stw	fp,16(sp)
   8fa38:	df000404 	addi	fp,sp,16
   8fa3c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   8fa40:	d0a73717 	ldw	r2,-25380(gp)
   8fa44:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   8fa48:	d0a73717 	ldw	r2,-25380(gp)
   8fa4c:	e0ffff17 	ldw	r3,-4(fp)
   8fa50:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   8fa54:	e0bfff17 	ldw	r2,-4(fp)
   8fa58:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   8fa5c:	e0bffc17 	ldw	r2,-16(fp)
   8fa60:	10800017 	ldw	r2,0(r2)
   8fa64:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8fa68:	00002006 	br	8faec <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   8fa6c:	d0a73717 	ldw	r2,-25380(gp)
   8fa70:	10800d03 	ldbu	r2,52(r2)
   8fa74:	10803fcc 	andi	r2,r2,255
   8fa78:	d0e73717 	ldw	r3,-25380(gp)
   8fa7c:	18c00d03 	ldbu	r3,52(r3)
   8fa80:	18c03fcc 	andi	r3,r3,255
   8fa84:	e13ffd17 	ldw	r4,-12(fp)
   8fa88:	20c7883a 	add	r3,r4,r3
   8fa8c:	18c002c4 	addi	r3,r3,11
   8fa90:	19000003 	ldbu	r4,0(r3)
   8fa94:	d0e73717 	ldw	r3,-25380(gp)
   8fa98:	18c00d43 	ldbu	r3,53(r3)
   8fa9c:	20c6b03a 	or	r3,r4,r3
   8faa0:	1809883a 	mov	r4,r3
   8faa4:	e0fffd17 	ldw	r3,-12(fp)
   8faa8:	1885883a 	add	r2,r3,r2
   8faac:	108002c4 	addi	r2,r2,11
   8fab0:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8fab4:	e0bffd17 	ldw	r2,-12(fp)
   8fab8:	10c00283 	ldbu	r3,10(r2)
   8fabc:	d0a73717 	ldw	r2,-25380(gp)
   8fac0:	10800d83 	ldbu	r2,54(r2)
   8fac4:	1884b03a 	or	r2,r3,r2
   8fac8:	1007883a 	mov	r3,r2
   8facc:	e0bffd17 	ldw	r2,-12(fp)
   8fad0:	10c00285 	stb	r3,10(r2)
        pevents++;
   8fad4:	e0bffc17 	ldw	r2,-16(fp)
   8fad8:	10800104 	addi	r2,r2,4
   8fadc:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   8fae0:	e0bffc17 	ldw	r2,-16(fp)
   8fae4:	10800017 	ldw	r2,0(r2)
   8fae8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8faec:	e0bffd17 	ldw	r2,-12(fp)
   8faf0:	103fde1e 	bne	r2,zero,8fa6c <__alt_data_end+0xfffd126c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8faf4:	d0a73717 	ldw	r2,-25380(gp)
   8faf8:	10800d03 	ldbu	r2,52(r2)
   8fafc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8fb00:	e0fffe03 	ldbu	r3,-8(fp)
   8fb04:	e13ffe03 	ldbu	r4,-8(fp)
   8fb08:	d0a73444 	addi	r2,gp,-25391
   8fb0c:	2085883a 	add	r2,r4,r2
   8fb10:	10800003 	ldbu	r2,0(r2)
   8fb14:	1009883a 	mov	r4,r2
   8fb18:	d0a73717 	ldw	r2,-25380(gp)
   8fb1c:	10800d43 	ldbu	r2,53(r2)
   8fb20:	0084303a 	nor	r2,zero,r2
   8fb24:	2084703a 	and	r2,r4,r2
   8fb28:	1009883a 	mov	r4,r2
   8fb2c:	d0a73444 	addi	r2,gp,-25391
   8fb30:	1885883a 	add	r2,r3,r2
   8fb34:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   8fb38:	e0fffe03 	ldbu	r3,-8(fp)
   8fb3c:	d0a73444 	addi	r2,gp,-25391
   8fb40:	1885883a 	add	r2,r3,r2
   8fb44:	10800003 	ldbu	r2,0(r2)
   8fb48:	10803fcc 	andi	r2,r2,255
   8fb4c:	1000071e 	bne	r2,zero,8fb6c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8fb50:	d0a73717 	ldw	r2,-25380(gp)
   8fb54:	10800d83 	ldbu	r2,54(r2)
   8fb58:	0084303a 	nor	r2,zero,r2
   8fb5c:	1007883a 	mov	r3,r2
   8fb60:	d0a73403 	ldbu	r2,-25392(gp)
   8fb64:	1884703a 	and	r2,r3,r2
   8fb68:	d0a73405 	stb	r2,-25392(gp)
    }
}
   8fb6c:	0001883a 	nop
   8fb70:	e037883a 	mov	sp,fp
   8fb74:	df000017 	ldw	fp,0(sp)
   8fb78:	dec00104 	addi	sp,sp,4
   8fb7c:	f800283a 	ret

0008fb80 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   8fb80:	defffc04 	addi	sp,sp,-16
   8fb84:	df000315 	stw	fp,12(sp)
   8fb88:	df000304 	addi	fp,sp,12
   8fb8c:	e13ffe15 	stw	r4,-8(fp)
   8fb90:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   8fb94:	e0bffe17 	ldw	r2,-8(fp)
   8fb98:	10800d03 	ldbu	r2,52(r2)
   8fb9c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   8fba0:	e0bffd03 	ldbu	r2,-12(fp)
   8fba4:	e0fffd03 	ldbu	r3,-12(fp)
   8fba8:	e13fff17 	ldw	r4,-4(fp)
   8fbac:	20c7883a 	add	r3,r4,r3
   8fbb0:	18c002c4 	addi	r3,r3,11
   8fbb4:	18c00003 	ldbu	r3,0(r3)
   8fbb8:	1809883a 	mov	r4,r3
   8fbbc:	e0fffe17 	ldw	r3,-8(fp)
   8fbc0:	18c00d43 	ldbu	r3,53(r3)
   8fbc4:	00c6303a 	nor	r3,zero,r3
   8fbc8:	20c6703a 	and	r3,r4,r3
   8fbcc:	1809883a 	mov	r4,r3
   8fbd0:	e0ffff17 	ldw	r3,-4(fp)
   8fbd4:	1885883a 	add	r2,r3,r2
   8fbd8:	108002c4 	addi	r2,r2,11
   8fbdc:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   8fbe0:	e0bffd03 	ldbu	r2,-12(fp)
   8fbe4:	e0ffff17 	ldw	r3,-4(fp)
   8fbe8:	1885883a 	add	r2,r3,r2
   8fbec:	108002c4 	addi	r2,r2,11
   8fbf0:	10800003 	ldbu	r2,0(r2)
   8fbf4:	10803fcc 	andi	r2,r2,255
   8fbf8:	10000a1e 	bne	r2,zero,8fc24 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   8fbfc:	e0bfff17 	ldw	r2,-4(fp)
   8fc00:	10800283 	ldbu	r2,10(r2)
   8fc04:	1007883a 	mov	r3,r2
   8fc08:	e0bffe17 	ldw	r2,-8(fp)
   8fc0c:	10800d83 	ldbu	r2,54(r2)
   8fc10:	0084303a 	nor	r2,zero,r2
   8fc14:	1884703a 	and	r2,r3,r2
   8fc18:	1007883a 	mov	r3,r2
   8fc1c:	e0bfff17 	ldw	r2,-4(fp)
   8fc20:	10c00285 	stb	r3,10(r2)
    }
}
   8fc24:	0001883a 	nop
   8fc28:	e037883a 	mov	sp,fp
   8fc2c:	df000017 	ldw	fp,0(sp)
   8fc30:	dec00104 	addi	sp,sp,4
   8fc34:	f800283a 	ret

0008fc38 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   8fc38:	defffa04 	addi	sp,sp,-24
   8fc3c:	df000515 	stw	fp,20(sp)
   8fc40:	df000504 	addi	fp,sp,20
   8fc44:	e13ffe15 	stw	r4,-8(fp)
   8fc48:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   8fc4c:	e0bffe17 	ldw	r2,-8(fp)
   8fc50:	10800d03 	ldbu	r2,52(r2)
   8fc54:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   8fc58:	e0bffe17 	ldw	r2,-8(fp)
   8fc5c:	10800d83 	ldbu	r2,54(r2)
   8fc60:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   8fc64:	e0bffe17 	ldw	r2,-8(fp)
   8fc68:	10800d43 	ldbu	r2,53(r2)
   8fc6c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   8fc70:	e0bfff17 	ldw	r2,-4(fp)
   8fc74:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   8fc78:	e0bffb17 	ldw	r2,-20(fp)
   8fc7c:	10800017 	ldw	r2,0(r2)
   8fc80:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8fc84:	00002506 	br	8fd1c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   8fc88:	e0bffd03 	ldbu	r2,-12(fp)
   8fc8c:	e0fffd03 	ldbu	r3,-12(fp)
   8fc90:	e13ffc17 	ldw	r4,-16(fp)
   8fc94:	20c7883a 	add	r3,r4,r3
   8fc98:	18c002c4 	addi	r3,r3,11
   8fc9c:	18c00003 	ldbu	r3,0(r3)
   8fca0:	1809883a 	mov	r4,r3
   8fca4:	e0fffd83 	ldbu	r3,-10(fp)
   8fca8:	00c6303a 	nor	r3,zero,r3
   8fcac:	20c6703a 	and	r3,r4,r3
   8fcb0:	1809883a 	mov	r4,r3
   8fcb4:	e0fffc17 	ldw	r3,-16(fp)
   8fcb8:	1885883a 	add	r2,r3,r2
   8fcbc:	108002c4 	addi	r2,r2,11
   8fcc0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   8fcc4:	e0bffd03 	ldbu	r2,-12(fp)
   8fcc8:	e0fffc17 	ldw	r3,-16(fp)
   8fccc:	1885883a 	add	r2,r3,r2
   8fcd0:	108002c4 	addi	r2,r2,11
   8fcd4:	10800003 	ldbu	r2,0(r2)
   8fcd8:	10803fcc 	andi	r2,r2,255
   8fcdc:	1000091e 	bne	r2,zero,8fd04 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   8fce0:	e0bffc17 	ldw	r2,-16(fp)
   8fce4:	10800283 	ldbu	r2,10(r2)
   8fce8:	1007883a 	mov	r3,r2
   8fcec:	e0bffd43 	ldbu	r2,-11(fp)
   8fcf0:	0084303a 	nor	r2,zero,r2
   8fcf4:	1884703a 	and	r2,r3,r2
   8fcf8:	1007883a 	mov	r3,r2
   8fcfc:	e0bffc17 	ldw	r2,-16(fp)
   8fd00:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   8fd04:	e0bffb17 	ldw	r2,-20(fp)
   8fd08:	10800104 	addi	r2,r2,4
   8fd0c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   8fd10:	e0bffb17 	ldw	r2,-20(fp)
   8fd14:	10800017 	ldw	r2,0(r2)
   8fd18:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8fd1c:	e0bffc17 	ldw	r2,-16(fp)
   8fd20:	103fd91e 	bne	r2,zero,8fc88 <__alt_data_end+0xfffd1488>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   8fd24:	0001883a 	nop
   8fd28:	e037883a 	mov	sp,fp
   8fd2c:	df000017 	ldw	fp,0(sp)
   8fd30:	dec00104 	addi	sp,sp,4
   8fd34:	f800283a 	ret

0008fd38 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   8fd38:	defffc04 	addi	sp,sp,-16
   8fd3c:	df000315 	stw	fp,12(sp)
   8fd40:	df000304 	addi	fp,sp,12
   8fd44:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   8fd48:	e0bfff17 	ldw	r2,-4(fp)
   8fd4c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   8fd50:	e0bfff17 	ldw	r2,-4(fp)
   8fd54:	108002c4 	addi	r2,r2,11
   8fd58:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8fd5c:	e03ffe05 	stb	zero,-8(fp)
   8fd60:	00000706 	br	8fd80 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   8fd64:	e0bffd17 	ldw	r2,-12(fp)
   8fd68:	10c00044 	addi	r3,r2,1
   8fd6c:	e0fffd15 	stw	r3,-12(fp)
   8fd70:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8fd74:	e0bffe03 	ldbu	r2,-8(fp)
   8fd78:	10800044 	addi	r2,r2,1
   8fd7c:	e0bffe05 	stb	r2,-8(fp)
   8fd80:	e0bffe03 	ldbu	r2,-8(fp)
   8fd84:	108000f0 	cmpltui	r2,r2,3
   8fd88:	103ff61e 	bne	r2,zero,8fd64 <__alt_data_end+0xfffd1564>
        *ptbl++ = 0;
    }
}
   8fd8c:	0001883a 	nop
   8fd90:	e037883a 	mov	sp,fp
   8fd94:	df000017 	ldw	fp,0(sp)
   8fd98:	dec00104 	addi	sp,sp,4
   8fd9c:	f800283a 	ret

0008fda0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   8fda0:	defffb04 	addi	sp,sp,-20
   8fda4:	dfc00415 	stw	ra,16(sp)
   8fda8:	df000315 	stw	fp,12(sp)
   8fdac:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   8fdb0:	0142d004 	movi	r5,2880
   8fdb4:	010002b4 	movhi	r4,10
   8fdb8:	21082304 	addi	r4,r4,8332
   8fdbc:	00901180 	call	90118 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   8fdc0:	008002b4 	movhi	r2,10
   8fdc4:	10882304 	addi	r2,r2,8332
   8fdc8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   8fdcc:	008002b4 	movhi	r2,10
   8fdd0:	10882f04 	addi	r2,r2,8380
   8fdd4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8fdd8:	e03ffd0d 	sth	zero,-12(fp)
   8fddc:	00001306 	br	8fe2c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   8fde0:	e0bffe17 	ldw	r2,-8(fp)
   8fde4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   8fde8:	e0bffe17 	ldw	r2,-8(fp)
   8fdec:	e0ffff17 	ldw	r3,-4(fp)
   8fdf0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   8fdf4:	e0bffe17 	ldw	r2,-8(fp)
   8fdf8:	00c00fc4 	movi	r3,63
   8fdfc:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   8fe00:	e0bffe17 	ldw	r2,-8(fp)
   8fe04:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   8fe08:	e0bffe17 	ldw	r2,-8(fp)
   8fe0c:	10800c04 	addi	r2,r2,48
   8fe10:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   8fe14:	e0bfff17 	ldw	r2,-4(fp)
   8fe18:	10800c04 	addi	r2,r2,48
   8fe1c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8fe20:	e0bffd0b 	ldhu	r2,-12(fp)
   8fe24:	10800044 	addi	r2,r2,1
   8fe28:	e0bffd0d 	sth	r2,-12(fp)
   8fe2c:	e0bffd0b 	ldhu	r2,-12(fp)
   8fe30:	10800ef0 	cmpltui	r2,r2,59
   8fe34:	103fea1e 	bne	r2,zero,8fde0 <__alt_data_end+0xfffd15e0>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   8fe38:	e0bffe17 	ldw	r2,-8(fp)
   8fe3c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   8fe40:	e0bffe17 	ldw	r2,-8(fp)
   8fe44:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   8fe48:	e0bffe17 	ldw	r2,-8(fp)
   8fe4c:	00c00fc4 	movi	r3,63
   8fe50:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   8fe54:	e0bffe17 	ldw	r2,-8(fp)
   8fe58:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   8fe5c:	008002b4 	movhi	r2,10
   8fe60:	10882304 	addi	r2,r2,8332
   8fe64:	d0a73515 	stw	r2,-25388(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   8fe68:	0001883a 	nop
   8fe6c:	e037883a 	mov	sp,fp
   8fe70:	dfc00117 	ldw	ra,4(sp)
   8fe74:	df000017 	ldw	fp,0(sp)
   8fe78:	dec00204 	addi	sp,sp,8
   8fe7c:	f800283a 	ret

0008fe80 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   8fe80:	deffff04 	addi	sp,sp,-4
   8fe84:	df000015 	stw	fp,0(sp)
   8fe88:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   8fe8c:	d0273815 	stw	zero,-25376(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   8fe90:	d0273605 	stb	zero,-25384(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   8fe94:	d0272805 	stb	zero,-25440(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   8fe98:	d0273045 	stb	zero,-25407(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   8fe9c:	d0272845 	stb	zero,-25439(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   8fea0:	d0272d15 	stw	zero,-25420(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   8fea4:	d0272915 	stw	zero,-25436(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   8fea8:	d0273b15 	stw	zero,-25364(gp)
    OSIdleCtrMax  = 0L;
   8feac:	d0272e15 	stw	zero,-25416(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   8feb0:	d0273a05 	stb	zero,-25368(gp)
#endif
}
   8feb4:	0001883a 	nop
   8feb8:	e037883a 	mov	sp,fp
   8febc:	df000017 	ldw	fp,0(sp)
   8fec0:	dec00104 	addi	sp,sp,4
   8fec4:	f800283a 	ret

0008fec8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   8fec8:	defffd04 	addi	sp,sp,-12
   8fecc:	df000215 	stw	fp,8(sp)
   8fed0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   8fed4:	d0273405 	stb	zero,-25392(gp)
    prdytbl       = &OSRdyTbl[0];
   8fed8:	d0a73444 	addi	r2,gp,-25391
   8fedc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8fee0:	e03ffe05 	stb	zero,-8(fp)
   8fee4:	00000706 	br	8ff04 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   8fee8:	e0bfff17 	ldw	r2,-4(fp)
   8feec:	10c00044 	addi	r3,r2,1
   8fef0:	e0ffff15 	stw	r3,-4(fp)
   8fef4:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8fef8:	e0bffe03 	ldbu	r2,-8(fp)
   8fefc:	10800044 	addi	r2,r2,1
   8ff00:	e0bffe05 	stb	r2,-8(fp)
   8ff04:	e0bffe03 	ldbu	r2,-8(fp)
   8ff08:	108000f0 	cmpltui	r2,r2,3
   8ff0c:	103ff61e 	bne	r2,zero,8fee8 <__alt_data_end+0xfffd16e8>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   8ff10:	d0272a45 	stb	zero,-25431(gp)
    OSPrioHighRdy = 0;
   8ff14:	d0272a05 	stb	zero,-25432(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   8ff18:	d0273215 	stw	zero,-25400(gp)
    OSTCBCur      = (OS_TCB *)0;
   8ff1c:	d0273715 	stw	zero,-25380(gp)
}
   8ff20:	0001883a 	nop
   8ff24:	e037883a 	mov	sp,fp
   8ff28:	df000017 	ldw	fp,0(sp)
   8ff2c:	dec00104 	addi	sp,sp,4
   8ff30:	f800283a 	ret

0008ff34 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   8ff34:	defff804 	addi	sp,sp,-32
   8ff38:	dfc00715 	stw	ra,28(sp)
   8ff3c:	df000615 	stw	fp,24(sp)
   8ff40:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   8ff44:	008000c4 	movi	r2,3
   8ff48:	d8800415 	stw	r2,16(sp)
   8ff4c:	d8000315 	stw	zero,12(sp)
   8ff50:	00808004 	movi	r2,512
   8ff54:	d8800215 	stw	r2,8(sp)
   8ff58:	008002b4 	movhi	r2,10
   8ff5c:	10862304 	addi	r2,r2,6284
   8ff60:	d8800115 	stw	r2,4(sp)
   8ff64:	00bfffd4 	movui	r2,65535
   8ff68:	d8800015 	stw	r2,0(sp)
   8ff6c:	01c00504 	movi	r7,20
   8ff70:	018002b4 	movhi	r6,10
   8ff74:	31882204 	addi	r6,r6,8328
   8ff78:	000b883a 	mov	r5,zero
   8ff7c:	01000274 	movhi	r4,9
   8ff80:	2100f804 	addi	r4,r4,992
   8ff84:	0094aac0 	call	94aac <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   8ff88:	e1bfff04 	addi	r6,fp,-4
   8ff8c:	014002b4 	movhi	r5,10
   8ff90:	29617f04 	addi	r5,r5,-31236
   8ff94:	01000504 	movi	r4,20
   8ff98:	00952bc0 	call	952bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   8ff9c:	0001883a 	nop
   8ffa0:	e037883a 	mov	sp,fp
   8ffa4:	dfc00117 	ldw	ra,4(sp)
   8ffa8:	df000017 	ldw	fp,0(sp)
   8ffac:	dec00204 	addi	sp,sp,8
   8ffb0:	f800283a 	ret

0008ffb4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   8ffb4:	defff804 	addi	sp,sp,-32
   8ffb8:	dfc00715 	stw	ra,28(sp)
   8ffbc:	df000615 	stw	fp,24(sp)
   8ffc0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   8ffc4:	008000c4 	movi	r2,3
   8ffc8:	d8800415 	stw	r2,16(sp)
   8ffcc:	d8000315 	stw	zero,12(sp)
   8ffd0:	00808004 	movi	r2,512
   8ffd4:	d8800215 	stw	r2,8(sp)
   8ffd8:	008002b4 	movhi	r2,10
   8ffdc:	1083ab04 	addi	r2,r2,3756
   8ffe0:	d8800115 	stw	r2,4(sp)
   8ffe4:	00bfff94 	movui	r2,65534
   8ffe8:	d8800015 	stw	r2,0(sp)
   8ffec:	01c004c4 	movi	r7,19
   8fff0:	018002b4 	movhi	r6,10
   8fff4:	3185aa04 	addi	r6,r6,5800
   8fff8:	000b883a 	mov	r5,zero
   8fffc:	01000274 	movhi	r4,9
   90000:	21010f04 	addi	r4,r4,1084
   90004:	0094aac0 	call	94aac <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   90008:	e1bfff04 	addi	r6,fp,-4
   9000c:	014002b4 	movhi	r5,10
   90010:	29618304 	addi	r5,r5,-31220
   90014:	010004c4 	movi	r4,19
   90018:	00952bc0 	call	952bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   9001c:	0001883a 	nop
   90020:	e037883a 	mov	sp,fp
   90024:	dfc00117 	ldw	ra,4(sp)
   90028:	df000017 	ldw	fp,0(sp)
   9002c:	dec00204 	addi	sp,sp,8
   90030:	f800283a 	ret

00090034 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   90034:	defffb04 	addi	sp,sp,-20
   90038:	dfc00415 	stw	ra,16(sp)
   9003c:	df000315 	stw	fp,12(sp)
   90040:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   90044:	01414404 	movi	r5,1296
   90048:	010002b4 	movhi	r4,10
   9004c:	210af304 	addi	r4,r4,11212
   90050:	00901180 	call	90118 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   90054:	01401504 	movi	r5,84
   90058:	010002b4 	movhi	r4,10
   9005c:	210c3704 	addi	r4,r4,12508
   90060:	00901180 	call	90118 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   90064:	008002b4 	movhi	r2,10
   90068:	108af304 	addi	r2,r2,11212
   9006c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   90070:	008002b4 	movhi	r2,10
   90074:	108b0e04 	addi	r2,r2,11320
   90078:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   9007c:	e03ffd05 	stb	zero,-12(fp)
   90080:	00001106 	br	900c8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   90084:	e0bffe17 	ldw	r2,-8(fp)
   90088:	e0ffff17 	ldw	r3,-4(fp)
   9008c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   90090:	e0bffe17 	ldw	r2,-8(fp)
   90094:	00c00fc4 	movi	r3,63
   90098:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   9009c:	e0bffe17 	ldw	r2,-8(fp)
   900a0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   900a4:	e0bffe17 	ldw	r2,-8(fp)
   900a8:	10801b04 	addi	r2,r2,108
   900ac:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   900b0:	e0bfff17 	ldw	r2,-4(fp)
   900b4:	10801b04 	addi	r2,r2,108
   900b8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   900bc:	e0bffd03 	ldbu	r2,-12(fp)
   900c0:	10800044 	addi	r2,r2,1
   900c4:	e0bffd05 	stb	r2,-12(fp)
   900c8:	e0bffd03 	ldbu	r2,-12(fp)
   900cc:	108002f0 	cmpltui	r2,r2,11
   900d0:	103fec1e 	bne	r2,zero,90084 <__alt_data_end+0xfffd1884>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   900d4:	e0bffe17 	ldw	r2,-8(fp)
   900d8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   900dc:	e0bffe17 	ldw	r2,-8(fp)
   900e0:	00c00fc4 	movi	r3,63
   900e4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   900e8:	e0bffe17 	ldw	r2,-8(fp)
   900ec:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   900f0:	d0272b15 	stw	zero,-25428(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   900f4:	008002b4 	movhi	r2,10
   900f8:	108af304 	addi	r2,r2,11212
   900fc:	d0a72f15 	stw	r2,-25412(gp)
}
   90100:	0001883a 	nop
   90104:	e037883a 	mov	sp,fp
   90108:	dfc00117 	ldw	ra,4(sp)
   9010c:	df000017 	ldw	fp,0(sp)
   90110:	dec00204 	addi	sp,sp,8
   90114:	f800283a 	ret

00090118 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   90118:	defffd04 	addi	sp,sp,-12
   9011c:	df000215 	stw	fp,8(sp)
   90120:	df000204 	addi	fp,sp,8
   90124:	e13ffe15 	stw	r4,-8(fp)
   90128:	2805883a 	mov	r2,r5
   9012c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   90130:	00000706 	br	90150 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   90134:	e0bffe17 	ldw	r2,-8(fp)
   90138:	10c00044 	addi	r3,r2,1
   9013c:	e0fffe15 	stw	r3,-8(fp)
   90140:	10000005 	stb	zero,0(r2)
        size--;
   90144:	e0bfff0b 	ldhu	r2,-4(fp)
   90148:	10bfffc4 	addi	r2,r2,-1
   9014c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   90150:	e0bfff0b 	ldhu	r2,-4(fp)
   90154:	103ff71e 	bne	r2,zero,90134 <__alt_data_end+0xfffd1934>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   90158:	0001883a 	nop
   9015c:	e037883a 	mov	sp,fp
   90160:	df000017 	ldw	fp,0(sp)
   90164:	dec00104 	addi	sp,sp,4
   90168:	f800283a 	ret

0009016c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   9016c:	defffc04 	addi	sp,sp,-16
   90170:	df000315 	stw	fp,12(sp)
   90174:	df000304 	addi	fp,sp,12
   90178:	e13ffd15 	stw	r4,-12(fp)
   9017c:	e17ffe15 	stw	r5,-8(fp)
   90180:	3005883a 	mov	r2,r6
   90184:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   90188:	00000b06 	br	901b8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   9018c:	e0bffd17 	ldw	r2,-12(fp)
   90190:	10c00044 	addi	r3,r2,1
   90194:	e0fffd15 	stw	r3,-12(fp)
   90198:	e0fffe17 	ldw	r3,-8(fp)
   9019c:	19000044 	addi	r4,r3,1
   901a0:	e13ffe15 	stw	r4,-8(fp)
   901a4:	18c00003 	ldbu	r3,0(r3)
   901a8:	10c00005 	stb	r3,0(r2)
        size--;
   901ac:	e0bfff0b 	ldhu	r2,-4(fp)
   901b0:	10bfffc4 	addi	r2,r2,-1
   901b4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   901b8:	e0bfff0b 	ldhu	r2,-4(fp)
   901bc:	103ff31e 	bne	r2,zero,9018c <__alt_data_end+0xfffd198c>
        *pdest++ = *psrc++;
        size--;
    }
}
   901c0:	0001883a 	nop
   901c4:	e037883a 	mov	sp,fp
   901c8:	df000017 	ldw	fp,0(sp)
   901cc:	dec00104 	addi	sp,sp,4
   901d0:	f800283a 	ret

000901d4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   901d4:	defffb04 	addi	sp,sp,-20
   901d8:	dfc00415 	stw	ra,16(sp)
   901dc:	df000315 	stw	fp,12(sp)
   901e0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   901e4:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   901e8:	0005303a 	rdctl	r2,status
   901ec:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   901f0:	e0ffff17 	ldw	r3,-4(fp)
   901f4:	00bfff84 	movi	r2,-2
   901f8:	1884703a 	and	r2,r3,r2
   901fc:	1001703a 	wrctl	status,r2
  
  return context;
   90200:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   90204:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   90208:	d0a73603 	ldbu	r2,-25384(gp)
   9020c:	10803fcc 	andi	r2,r2,255
   90210:	10001a1e 	bne	r2,zero,9027c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   90214:	d0a72803 	ldbu	r2,-25440(gp)
   90218:	10803fcc 	andi	r2,r2,255
   9021c:	1000171e 	bne	r2,zero,9027c <OS_Sched+0xa8>
            OS_SchedNew();
   90220:	00902a40 	call	902a4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   90224:	d0e72a03 	ldbu	r3,-25432(gp)
   90228:	d0a72a43 	ldbu	r2,-25431(gp)
   9022c:	18c03fcc 	andi	r3,r3,255
   90230:	10803fcc 	andi	r2,r2,255
   90234:	18801126 	beq	r3,r2,9027c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   90238:	d0a72a03 	ldbu	r2,-25432(gp)
   9023c:	10c03fcc 	andi	r3,r2,255
   90240:	008002b4 	movhi	r2,10
   90244:	108c3704 	addi	r2,r2,12508
   90248:	18c7883a 	add	r3,r3,r3
   9024c:	18c7883a 	add	r3,r3,r3
   90250:	10c5883a 	add	r2,r2,r3
   90254:	10800017 	ldw	r2,0(r2)
   90258:	d0a73215 	stw	r2,-25400(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   9025c:	d0a73217 	ldw	r2,-25400(gp)
   90260:	10c00e17 	ldw	r3,56(r2)
   90264:	18c00044 	addi	r3,r3,1
   90268:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   9026c:	d0a72d17 	ldw	r2,-25420(gp)
   90270:	10800044 	addi	r2,r2,1
   90274:	d0a72d15 	stw	r2,-25420(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   90278:	00978300 	call	97830 <OSCtxSw>
   9027c:	e0bffd17 	ldw	r2,-12(fp)
   90280:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90284:	e0bffe17 	ldw	r2,-8(fp)
   90288:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   9028c:	0001883a 	nop
   90290:	e037883a 	mov	sp,fp
   90294:	dfc00117 	ldw	ra,4(sp)
   90298:	df000017 	ldw	fp,0(sp)
   9029c:	dec00204 	addi	sp,sp,8
   902a0:	f800283a 	ret

000902a4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   902a4:	defffe04 	addi	sp,sp,-8
   902a8:	df000115 	stw	fp,4(sp)
   902ac:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   902b0:	d0a73403 	ldbu	r2,-25392(gp)
   902b4:	10c03fcc 	andi	r3,r2,255
   902b8:	008002b4 	movhi	r2,10
   902bc:	10a13f04 	addi	r2,r2,-31492
   902c0:	10c5883a 	add	r2,r2,r3
   902c4:	10800003 	ldbu	r2,0(r2)
   902c8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   902cc:	e0bfff03 	ldbu	r2,-4(fp)
   902d0:	100490fa 	slli	r2,r2,3
   902d4:	1009883a 	mov	r4,r2
   902d8:	e0ffff03 	ldbu	r3,-4(fp)
   902dc:	d0a73444 	addi	r2,gp,-25391
   902e0:	1885883a 	add	r2,r3,r2
   902e4:	10800003 	ldbu	r2,0(r2)
   902e8:	10c03fcc 	andi	r3,r2,255
   902ec:	008002b4 	movhi	r2,10
   902f0:	10a13f04 	addi	r2,r2,-31492
   902f4:	10c5883a 	add	r2,r2,r3
   902f8:	10800003 	ldbu	r2,0(r2)
   902fc:	2085883a 	add	r2,r4,r2
   90300:	d0a72a05 	stb	r2,-25432(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   90304:	0001883a 	nop
   90308:	e037883a 	mov	sp,fp
   9030c:	df000017 	ldw	fp,0(sp)
   90310:	dec00104 	addi	sp,sp,4
   90314:	f800283a 	ret

00090318 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   90318:	defffc04 	addi	sp,sp,-16
   9031c:	df000315 	stw	fp,12(sp)
   90320:	df000304 	addi	fp,sp,12
   90324:	e13ffe15 	stw	r4,-8(fp)
   90328:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   9032c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   90330:	00000b06 	br	90360 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   90334:	e0bffe17 	ldw	r2,-8(fp)
   90338:	10c00044 	addi	r3,r2,1
   9033c:	e0fffe15 	stw	r3,-8(fp)
   90340:	e0ffff17 	ldw	r3,-4(fp)
   90344:	19000044 	addi	r4,r3,1
   90348:	e13fff15 	stw	r4,-4(fp)
   9034c:	18c00003 	ldbu	r3,0(r3)
   90350:	10c00005 	stb	r3,0(r2)
        len++;
   90354:	e0bffd03 	ldbu	r2,-12(fp)
   90358:	10800044 	addi	r2,r2,1
   9035c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   90360:	e0bfff17 	ldw	r2,-4(fp)
   90364:	10800003 	ldbu	r2,0(r2)
   90368:	10803fcc 	andi	r2,r2,255
   9036c:	103ff11e 	bne	r2,zero,90334 <__alt_data_end+0xfffd1b34>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   90370:	e0bffe17 	ldw	r2,-8(fp)
   90374:	10000005 	stb	zero,0(r2)
    return (len);
   90378:	e0bffd03 	ldbu	r2,-12(fp)
}
   9037c:	e037883a 	mov	sp,fp
   90380:	df000017 	ldw	fp,0(sp)
   90384:	dec00104 	addi	sp,sp,4
   90388:	f800283a 	ret

0009038c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   9038c:	defffd04 	addi	sp,sp,-12
   90390:	df000215 	stw	fp,8(sp)
   90394:	df000204 	addi	fp,sp,8
   90398:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   9039c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   903a0:	00000606 	br	903bc <OS_StrLen+0x30>
        psrc++;
   903a4:	e0bfff17 	ldw	r2,-4(fp)
   903a8:	10800044 	addi	r2,r2,1
   903ac:	e0bfff15 	stw	r2,-4(fp)
        len++;
   903b0:	e0bffe03 	ldbu	r2,-8(fp)
   903b4:	10800044 	addi	r2,r2,1
   903b8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   903bc:	e0bfff17 	ldw	r2,-4(fp)
   903c0:	10800003 	ldbu	r2,0(r2)
   903c4:	10803fcc 	andi	r2,r2,255
   903c8:	103ff61e 	bne	r2,zero,903a4 <__alt_data_end+0xfffd1ba4>
        psrc++;
        len++;
    }
    return (len);
   903cc:	e0bffe03 	ldbu	r2,-8(fp)
}
   903d0:	e037883a 	mov	sp,fp
   903d4:	df000017 	ldw	fp,0(sp)
   903d8:	dec00104 	addi	sp,sp,4
   903dc:	f800283a 	ret

000903e0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   903e0:	defffa04 	addi	sp,sp,-24
   903e4:	dfc00515 	stw	ra,20(sp)
   903e8:	df000415 	stw	fp,16(sp)
   903ec:	df000404 	addi	fp,sp,16
   903f0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   903f4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   903f8:	0005303a 	rdctl	r2,status
   903fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90400:	e0fffd17 	ldw	r3,-12(fp)
   90404:	00bfff84 	movi	r2,-2
   90408:	1884703a 	and	r2,r3,r2
   9040c:	1001703a 	wrctl	status,r2
  
  return context;
   90410:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   90414:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   90418:	d0a72917 	ldw	r2,-25436(gp)
   9041c:	10800044 	addi	r2,r2,1
   90420:	d0a72915 	stw	r2,-25436(gp)
   90424:	e0bffc17 	ldw	r2,-16(fp)
   90428:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9042c:	e0bffe17 	ldw	r2,-8(fp)
   90430:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   90434:	0097b440 	call	97b44 <OSTaskIdleHook>
    }
   90438:	003fef06 	br	903f8 <__alt_data_end+0xfffd1bf8>

0009043c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   9043c:	defffa04 	addi	sp,sp,-24
   90440:	dfc00515 	stw	ra,20(sp)
   90444:	df000415 	stw	fp,16(sp)
   90448:	df000404 	addi	fp,sp,16
   9044c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   90450:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   90454:	00000206 	br	90460 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   90458:	01003204 	movi	r4,200
   9045c:	0095b7c0 	call	95b7c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   90460:	d0a73a03 	ldbu	r2,-25368(gp)
   90464:	10803fcc 	andi	r2,r2,255
   90468:	103ffb26 	beq	r2,zero,90458 <__alt_data_end+0xfffd1c58>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   9046c:	d0a72e17 	ldw	r2,-25416(gp)
   90470:	01401904 	movi	r5,100
   90474:	1009883a 	mov	r4,r2
   90478:	0080b2c0 	call	80b2c <__udivsi3>
   9047c:	d0a72e15 	stw	r2,-25416(gp)
    if (OSIdleCtrMax == 0L) {
   90480:	d0a72e17 	ldw	r2,-25416(gp)
   90484:	1000031e 	bne	r2,zero,90494 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   90488:	d0273005 	stb	zero,-25408(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   9048c:	01003fc4 	movi	r4,255
   90490:	00958040 	call	95804 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90494:	0005303a 	rdctl	r2,status
   90498:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9049c:	e0fffd17 	ldw	r3,-12(fp)
   904a0:	00bfff84 	movi	r2,-2
   904a4:	1884703a 	and	r2,r3,r2
   904a8:	1001703a 	wrctl	status,r2
  
  return context;
   904ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   904b0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   904b4:	d0a72917 	ldw	r2,-25436(gp)
   904b8:	d0a73b15 	stw	r2,-25364(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   904bc:	d0272915 	stw	zero,-25436(gp)
   904c0:	e0bffc17 	ldw	r2,-16(fp)
   904c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   904c8:	e0bffe17 	ldw	r2,-8(fp)
   904cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   904d0:	d0a73b17 	ldw	r2,-25364(gp)
   904d4:	d0e72e17 	ldw	r3,-25416(gp)
   904d8:	180b883a 	mov	r5,r3
   904dc:	1009883a 	mov	r4,r2
   904e0:	0080b2c0 	call	80b2c <__udivsi3>
   904e4:	1007883a 	mov	r3,r2
   904e8:	00801904 	movi	r2,100
   904ec:	10c5c83a 	sub	r2,r2,r3
   904f0:	d0a73005 	stb	r2,-25408(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   904f4:	0097ac40 	call	97ac4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   904f8:	00905080 	call	90508 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   904fc:	01001904 	movi	r4,100
   90500:	0095b7c0 	call	95b7c <OSTimeDly>
    }
   90504:	003fe306 	br	90494 <__alt_data_end+0xfffd1c94>

00090508 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   90508:	defffa04 	addi	sp,sp,-24
   9050c:	dfc00515 	stw	ra,20(sp)
   90510:	df000415 	stw	fp,16(sp)
   90514:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   90518:	e03ffc05 	stb	zero,-16(fp)
   9051c:	00002406 	br	905b0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   90520:	e0bffc03 	ldbu	r2,-16(fp)
   90524:	e0fffe04 	addi	r3,fp,-8
   90528:	180b883a 	mov	r5,r3
   9052c:	1009883a 	mov	r4,r2
   90530:	00956440 	call	95644 <OSTaskStkChk>
   90534:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   90538:	e0bffc43 	ldbu	r2,-15(fp)
   9053c:	1000191e 	bne	r2,zero,905a4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   90540:	e0fffc03 	ldbu	r3,-16(fp)
   90544:	008002b4 	movhi	r2,10
   90548:	108c3704 	addi	r2,r2,12508
   9054c:	18c7883a 	add	r3,r3,r3
   90550:	18c7883a 	add	r3,r3,r3
   90554:	10c5883a 	add	r2,r2,r3
   90558:	10800017 	ldw	r2,0(r2)
   9055c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   90560:	e0bffd17 	ldw	r2,-12(fp)
   90564:	10000f26 	beq	r2,zero,905a4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   90568:	e0bffd17 	ldw	r2,-12(fp)
   9056c:	10800060 	cmpeqi	r2,r2,1
   90570:	10000c1e 	bne	r2,zero,905a4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   90574:	e0bffd17 	ldw	r2,-12(fp)
   90578:	10c00217 	ldw	r3,8(r2)
   9057c:	e0bffd17 	ldw	r2,-12(fp)
   90580:	10800317 	ldw	r2,12(r2)
   90584:	1085883a 	add	r2,r2,r2
   90588:	1085883a 	add	r2,r2,r2
   9058c:	1887883a 	add	r3,r3,r2
   90590:	e0bffd17 	ldw	r2,-12(fp)
   90594:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   90598:	e0ffff17 	ldw	r3,-4(fp)
   9059c:	e0bffd17 	ldw	r2,-12(fp)
   905a0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   905a4:	e0bffc03 	ldbu	r2,-16(fp)
   905a8:	10800044 	addi	r2,r2,1
   905ac:	e0bffc05 	stb	r2,-16(fp)
   905b0:	e0bffc03 	ldbu	r2,-16(fp)
   905b4:	10800570 	cmpltui	r2,r2,21
   905b8:	103fd91e 	bne	r2,zero,90520 <__alt_data_end+0xfffd1d20>
#endif
                }
            }
        }
    }
}
   905bc:	0001883a 	nop
   905c0:	e037883a 	mov	sp,fp
   905c4:	dfc00117 	ldw	ra,4(sp)
   905c8:	df000017 	ldw	fp,0(sp)
   905cc:	dec00204 	addi	sp,sp,8
   905d0:	f800283a 	ret

000905d4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   905d4:	defff204 	addi	sp,sp,-56
   905d8:	dfc00d15 	stw	ra,52(sp)
   905dc:	df000c15 	stw	fp,48(sp)
   905e0:	df000c04 	addi	fp,sp,48
   905e4:	e17ffc15 	stw	r5,-16(fp)
   905e8:	e1bffd15 	stw	r6,-12(fp)
   905ec:	3807883a 	mov	r3,r7
   905f0:	e0800417 	ldw	r2,16(fp)
   905f4:	e13ffb05 	stb	r4,-20(fp)
   905f8:	e0fffe0d 	sth	r3,-8(fp)
   905fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   90600:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90604:	0005303a 	rdctl	r2,status
   90608:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9060c:	e0fffa17 	ldw	r3,-24(fp)
   90610:	00bfff84 	movi	r2,-2
   90614:	1884703a 	and	r2,r3,r2
   90618:	1001703a 	wrctl	status,r2
  
  return context;
   9061c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   90620:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   90624:	d0a72f17 	ldw	r2,-25412(gp)
   90628:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   9062c:	e0bff617 	ldw	r2,-40(fp)
   90630:	10009326 	beq	r2,zero,90880 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   90634:	e0bff617 	ldw	r2,-40(fp)
   90638:	10800517 	ldw	r2,20(r2)
   9063c:	d0a72f15 	stw	r2,-25412(gp)
   90640:	e0bff417 	ldw	r2,-48(fp)
   90644:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90648:	e0bff817 	ldw	r2,-32(fp)
   9064c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   90650:	e0bff617 	ldw	r2,-40(fp)
   90654:	e0fffc17 	ldw	r3,-16(fp)
   90658:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   9065c:	e0bff617 	ldw	r2,-40(fp)
   90660:	e0fffb03 	ldbu	r3,-20(fp)
   90664:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   90668:	e0bff617 	ldw	r2,-40(fp)
   9066c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   90670:	e0bff617 	ldw	r2,-40(fp)
   90674:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   90678:	e0bff617 	ldw	r2,-40(fp)
   9067c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   90680:	e0bff617 	ldw	r2,-40(fp)
   90684:	e0c00317 	ldw	r3,12(fp)
   90688:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   9068c:	e0bff617 	ldw	r2,-40(fp)
   90690:	e0c00217 	ldw	r3,8(fp)
   90694:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   90698:	e0bff617 	ldw	r2,-40(fp)
   9069c:	e0fffd17 	ldw	r3,-12(fp)
   906a0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   906a4:	e0bff617 	ldw	r2,-40(fp)
   906a8:	e0ffff0b 	ldhu	r3,-4(fp)
   906ac:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   906b0:	e0bff617 	ldw	r2,-40(fp)
   906b4:	e0fffe0b 	ldhu	r3,-8(fp)
   906b8:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   906bc:	e0bff617 	ldw	r2,-40(fp)
   906c0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   906c4:	e0bffb03 	ldbu	r2,-20(fp)
   906c8:	1004d0fa 	srli	r2,r2,3
   906cc:	1007883a 	mov	r3,r2
   906d0:	e0bff617 	ldw	r2,-40(fp)
   906d4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   906d8:	e0bffb03 	ldbu	r2,-20(fp)
   906dc:	108001cc 	andi	r2,r2,7
   906e0:	1007883a 	mov	r3,r2
   906e4:	e0bff617 	ldw	r2,-40(fp)
   906e8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   906ec:	e0bff617 	ldw	r2,-40(fp)
   906f0:	10800d03 	ldbu	r2,52(r2)
   906f4:	10803fcc 	andi	r2,r2,255
   906f8:	00c00044 	movi	r3,1
   906fc:	1884983a 	sll	r2,r3,r2
   90700:	1007883a 	mov	r3,r2
   90704:	e0bff617 	ldw	r2,-40(fp)
   90708:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   9070c:	e0bff617 	ldw	r2,-40(fp)
   90710:	10800cc3 	ldbu	r2,51(r2)
   90714:	10803fcc 	andi	r2,r2,255
   90718:	00c00044 	movi	r3,1
   9071c:	1884983a 	sll	r2,r3,r2
   90720:	1007883a 	mov	r3,r2
   90724:	e0bff617 	ldw	r2,-40(fp)
   90728:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   9072c:	e0bff617 	ldw	r2,-40(fp)
   90730:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   90734:	e0bff617 	ldw	r2,-40(fp)
   90738:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   9073c:	e0bff617 	ldw	r2,-40(fp)
   90740:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   90744:	e0bff617 	ldw	r2,-40(fp)
   90748:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   9074c:	e0bff617 	ldw	r2,-40(fp)
   90750:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   90754:	e0bff617 	ldw	r2,-40(fp)
   90758:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   9075c:	e0bff617 	ldw	r2,-40(fp)
   90760:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   90764:	e0bff617 	ldw	r2,-40(fp)
   90768:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   9076c:	e0bff617 	ldw	r2,-40(fp)
   90770:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   90774:	e0bff617 	ldw	r2,-40(fp)
   90778:	00c00fc4 	movi	r3,63
   9077c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   90780:	e0bff617 	ldw	r2,-40(fp)
   90784:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   90788:	e13ff617 	ldw	r4,-40(fp)
   9078c:	0097b640 	call	97b64 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   90790:	e13ff617 	ldw	r4,-40(fp)
   90794:	0097a5c0 	call	97a5c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90798:	0005303a 	rdctl	r2,status
   9079c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   907a0:	e0fff517 	ldw	r3,-44(fp)
   907a4:	00bfff84 	movi	r2,-2
   907a8:	1884703a 	and	r2,r3,r2
   907ac:	1001703a 	wrctl	status,r2
  
  return context;
   907b0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   907b4:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   907b8:	e0fffb03 	ldbu	r3,-20(fp)
   907bc:	008002b4 	movhi	r2,10
   907c0:	108c3704 	addi	r2,r2,12508
   907c4:	18c7883a 	add	r3,r3,r3
   907c8:	18c7883a 	add	r3,r3,r3
   907cc:	10c5883a 	add	r2,r2,r3
   907d0:	e0fff617 	ldw	r3,-40(fp)
   907d4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   907d8:	d0e72b17 	ldw	r3,-25428(gp)
   907dc:	e0bff617 	ldw	r2,-40(fp)
   907e0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   907e4:	e0bff617 	ldw	r2,-40(fp)
   907e8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   907ec:	d0a72b17 	ldw	r2,-25428(gp)
   907f0:	10000326 	beq	r2,zero,90800 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   907f4:	d0a72b17 	ldw	r2,-25428(gp)
   907f8:	e0fff617 	ldw	r3,-40(fp)
   907fc:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   90800:	e0bff617 	ldw	r2,-40(fp)
   90804:	d0a72b15 	stw	r2,-25428(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   90808:	e0bff617 	ldw	r2,-40(fp)
   9080c:	10c00d83 	ldbu	r3,54(r2)
   90810:	d0a73403 	ldbu	r2,-25392(gp)
   90814:	1884b03a 	or	r2,r3,r2
   90818:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   9081c:	e0bff617 	ldw	r2,-40(fp)
   90820:	10800d03 	ldbu	r2,52(r2)
   90824:	10c03fcc 	andi	r3,r2,255
   90828:	e0bff617 	ldw	r2,-40(fp)
   9082c:	10800d03 	ldbu	r2,52(r2)
   90830:	11003fcc 	andi	r4,r2,255
   90834:	d0a73444 	addi	r2,gp,-25391
   90838:	2085883a 	add	r2,r4,r2
   9083c:	11000003 	ldbu	r4,0(r2)
   90840:	e0bff617 	ldw	r2,-40(fp)
   90844:	10800d43 	ldbu	r2,53(r2)
   90848:	2084b03a 	or	r2,r4,r2
   9084c:	1009883a 	mov	r4,r2
   90850:	d0a73444 	addi	r2,gp,-25391
   90854:	1885883a 	add	r2,r3,r2
   90858:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   9085c:	d0a73043 	ldbu	r2,-25407(gp)
   90860:	10800044 	addi	r2,r2,1
   90864:	d0a73045 	stb	r2,-25407(gp)
   90868:	e0bff417 	ldw	r2,-48(fp)
   9086c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90870:	e0bff717 	ldw	r2,-36(fp)
   90874:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   90878:	0005883a 	mov	r2,zero
   9087c:	00000506 	br	90894 <OS_TCBInit+0x2c0>
   90880:	e0bff417 	ldw	r2,-48(fp)
   90884:	e0bff915 	stw	r2,-28(fp)
   90888:	e0bff917 	ldw	r2,-28(fp)
   9088c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   90890:	00801084 	movi	r2,66
}
   90894:	e037883a 	mov	sp,fp
   90898:	dfc00117 	ldw	ra,4(sp)
   9089c:	df000017 	ldw	fp,0(sp)
   908a0:	dec00204 	addi	sp,sp,8
   908a4:	f800283a 	ret

000908a8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   908a8:	defffe04 	addi	sp,sp,-8
   908ac:	df000115 	stw	fp,4(sp)
   908b0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   908b4:	d0a01104 	addi	r2,gp,-32700
   908b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   908bc:	d0a01204 	addi	r2,gp,-32696
   908c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   908c4:	d0a01384 	addi	r2,gp,-32690
   908c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   908cc:	d0a01404 	addi	r2,gp,-32688
   908d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   908d4:	d0a01304 	addi	r2,gp,-32692
   908d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   908dc:	d0a01484 	addi	r2,gp,-32686
   908e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   908e4:	d0a01504 	addi	r2,gp,-32684
   908e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   908ec:	d0a01584 	addi	r2,gp,-32682
   908f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   908f4:	d0a01604 	addi	r2,gp,-32680
   908f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   908fc:	d0a01684 	addi	r2,gp,-32678
   90900:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   90904:	d0a01704 	addi	r2,gp,-32676
   90908:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   9090c:	d0a01784 	addi	r2,gp,-32674
   90910:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   90914:	d0a01804 	addi	r2,gp,-32672
   90918:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   9091c:	d0a01884 	addi	r2,gp,-32670
   90920:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   90924:	d0a01904 	addi	r2,gp,-32668
   90928:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   9092c:	d0a01984 	addi	r2,gp,-32666
   90930:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   90934:	d0a01a04 	addi	r2,gp,-32664
   90938:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   9093c:	d0a01a84 	addi	r2,gp,-32662
   90940:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   90944:	d0a01b04 	addi	r2,gp,-32660
   90948:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   9094c:	d0a01b84 	addi	r2,gp,-32658
   90950:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   90954:	d0a01c04 	addi	r2,gp,-32656
   90958:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   9095c:	d0a01c84 	addi	r2,gp,-32654
   90960:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   90964:	d0a01d04 	addi	r2,gp,-32652
   90968:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   9096c:	d0a01d84 	addi	r2,gp,-32650
   90970:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   90974:	d0a01e04 	addi	r2,gp,-32648
   90978:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   9097c:	d0a01e84 	addi	r2,gp,-32646
   90980:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   90984:	d0a01f04 	addi	r2,gp,-32644
   90988:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   9098c:	d0a01f84 	addi	r2,gp,-32642
   90990:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   90994:	d0a02004 	addi	r2,gp,-32640
   90998:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   9099c:	d0a02084 	addi	r2,gp,-32638
   909a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   909a4:	d0a02104 	addi	r2,gp,-32636
   909a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   909ac:	d0a02184 	addi	r2,gp,-32634
   909b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   909b4:	d0a02204 	addi	r2,gp,-32632
   909b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   909bc:	d0a02284 	addi	r2,gp,-32630
   909c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   909c4:	d0a02304 	addi	r2,gp,-32628
   909c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   909cc:	d0a02384 	addi	r2,gp,-32626
   909d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   909d4:	d0a02404 	addi	r2,gp,-32624
   909d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   909dc:	d0a02484 	addi	r2,gp,-32622
   909e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   909e4:	d0a02504 	addi	r2,gp,-32620
   909e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   909ec:	d0a02584 	addi	r2,gp,-32618
   909f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   909f4:	d0a02604 	addi	r2,gp,-32616
   909f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   909fc:	d0a02684 	addi	r2,gp,-32614
   90a00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   90a04:	d0a02704 	addi	r2,gp,-32612
   90a08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   90a0c:	d0a02784 	addi	r2,gp,-32610
   90a10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   90a14:	d0a02804 	addi	r2,gp,-32608
   90a18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   90a1c:	d0a02d04 	addi	r2,gp,-32588
   90a20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   90a24:	0001883a 	nop
   90a28:	e037883a 	mov	sp,fp
   90a2c:	df000017 	ldw	fp,0(sp)
   90a30:	dec00104 	addi	sp,sp,4
   90a34:	f800283a 	ret

00090a38 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   90a38:	defff204 	addi	sp,sp,-56
   90a3c:	df000d15 	stw	fp,52(sp)
   90a40:	df000d04 	addi	fp,sp,52
   90a44:	e13ffc15 	stw	r4,-16(fp)
   90a48:	2807883a 	mov	r3,r5
   90a4c:	3005883a 	mov	r2,r6
   90a50:	e1ffff15 	stw	r7,-4(fp)
   90a54:	e0fffd0d 	sth	r3,-12(fp)
   90a58:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   90a5c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   90a60:	e0bfff17 	ldw	r2,-4(fp)
   90a64:	1000021e 	bne	r2,zero,90a70 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   90a68:	0005883a 	mov	r2,zero
   90a6c:	0000b006 	br	90d30 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   90a70:	e0bffc17 	ldw	r2,-16(fp)
   90a74:	1000051e 	bne	r2,zero,90a8c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   90a78:	e0bfff17 	ldw	r2,-4(fp)
   90a7c:	00c01b84 	movi	r3,110
   90a80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   90a84:	0005883a 	mov	r2,zero
   90a88:	0000a906 	br	90d30 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   90a8c:	e0bffc17 	ldw	r2,-16(fp)
   90a90:	10800003 	ldbu	r2,0(r2)
   90a94:	10803fcc 	andi	r2,r2,255
   90a98:	10800160 	cmpeqi	r2,r2,5
   90a9c:	1000051e 	bne	r2,zero,90ab4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   90aa0:	e0bfff17 	ldw	r2,-4(fp)
   90aa4:	00c00044 	movi	r3,1
   90aa8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   90aac:	0005883a 	mov	r2,zero
   90ab0:	00009f06 	br	90d30 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   90ab4:	e0fffe03 	ldbu	r3,-8(fp)
   90ab8:	00bfe004 	movi	r2,-128
   90abc:	1884703a 	and	r2,r3,r2
   90ac0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   90ac4:	e0bff503 	ldbu	r2,-44(fp)
   90ac8:	10000626 	beq	r2,zero,90ae4 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   90acc:	e0bffe03 	ldbu	r2,-8(fp)
   90ad0:	10801fcc 	andi	r2,r2,127
   90ad4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   90ad8:	00800044 	movi	r2,1
   90adc:	e0bff385 	stb	r2,-50(fp)
   90ae0:	00000106 	br	90ae8 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   90ae4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   90ae8:	e0bfff17 	ldw	r2,-4(fp)
   90aec:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90af0:	0005303a 	rdctl	r2,status
   90af4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90af8:	e0fffb17 	ldw	r3,-20(fp)
   90afc:	00bfff84 	movi	r2,-2
   90b00:	1884703a 	and	r2,r3,r2
   90b04:	1001703a 	wrctl	status,r2
  
  return context;
   90b08:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   90b0c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   90b10:	e0bffe03 	ldbu	r2,-8(fp)
   90b14:	10c00060 	cmpeqi	r3,r2,1
   90b18:	18005f1e 	bne	r3,zero,90c98 <OSFlagAccept+0x260>
   90b1c:	10c00088 	cmpgei	r3,r2,2
   90b20:	1800021e 	bne	r3,zero,90b2c <OSFlagAccept+0xf4>
   90b24:	10003f26 	beq	r2,zero,90c24 <OSFlagAccept+0x1ec>
   90b28:	00007706 	br	90d08 <OSFlagAccept+0x2d0>
   90b2c:	10c000a0 	cmpeqi	r3,r2,2
   90b30:	1800031e 	bne	r3,zero,90b40 <OSFlagAccept+0x108>
   90b34:	108000e0 	cmpeqi	r2,r2,3
   90b38:	10001e1e 	bne	r2,zero,90bb4 <OSFlagAccept+0x17c>
   90b3c:	00007206 	br	90d08 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   90b40:	e0bffc17 	ldw	r2,-16(fp)
   90b44:	10c0020b 	ldhu	r3,8(r2)
   90b48:	e0bffd0b 	ldhu	r2,-12(fp)
   90b4c:	1884703a 	and	r2,r3,r2
   90b50:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   90b54:	e0fff30b 	ldhu	r3,-52(fp)
   90b58:	e0bffd0b 	ldhu	r2,-12(fp)
   90b5c:	18800d1e 	bne	r3,r2,90b94 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   90b60:	e0bff383 	ldbu	r2,-50(fp)
   90b64:	10800058 	cmpnei	r2,r2,1
   90b68:	10000d1e 	bne	r2,zero,90ba0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   90b6c:	e0bffc17 	ldw	r2,-16(fp)
   90b70:	1080020b 	ldhu	r2,8(r2)
   90b74:	1007883a 	mov	r3,r2
   90b78:	e0bff30b 	ldhu	r2,-52(fp)
   90b7c:	0084303a 	nor	r2,zero,r2
   90b80:	1884703a 	and	r2,r3,r2
   90b84:	1007883a 	mov	r3,r2
   90b88:	e0bffc17 	ldw	r2,-16(fp)
   90b8c:	10c0020d 	sth	r3,8(r2)
   90b90:	00000306 	br	90ba0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   90b94:	e0bfff17 	ldw	r2,-4(fp)
   90b98:	00c01c04 	movi	r3,112
   90b9c:	10c00005 	stb	r3,0(r2)
   90ba0:	e0bff417 	ldw	r2,-48(fp)
   90ba4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90ba8:	e0bff617 	ldw	r2,-40(fp)
   90bac:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   90bb0:	00005e06 	br	90d2c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   90bb4:	e0bffc17 	ldw	r2,-16(fp)
   90bb8:	10c0020b 	ldhu	r3,8(r2)
   90bbc:	e0bffd0b 	ldhu	r2,-12(fp)
   90bc0:	1884703a 	and	r2,r3,r2
   90bc4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   90bc8:	e0bff30b 	ldhu	r2,-52(fp)
   90bcc:	10000d26 	beq	r2,zero,90c04 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   90bd0:	e0bff383 	ldbu	r2,-50(fp)
   90bd4:	10800058 	cmpnei	r2,r2,1
   90bd8:	10000d1e 	bne	r2,zero,90c10 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   90bdc:	e0bffc17 	ldw	r2,-16(fp)
   90be0:	1080020b 	ldhu	r2,8(r2)
   90be4:	1007883a 	mov	r3,r2
   90be8:	e0bff30b 	ldhu	r2,-52(fp)
   90bec:	0084303a 	nor	r2,zero,r2
   90bf0:	1884703a 	and	r2,r3,r2
   90bf4:	1007883a 	mov	r3,r2
   90bf8:	e0bffc17 	ldw	r2,-16(fp)
   90bfc:	10c0020d 	sth	r3,8(r2)
   90c00:	00000306 	br	90c10 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   90c04:	e0bfff17 	ldw	r2,-4(fp)
   90c08:	00c01c04 	movi	r3,112
   90c0c:	10c00005 	stb	r3,0(r2)
   90c10:	e0bff417 	ldw	r2,-48(fp)
   90c14:	e0bff715 	stw	r2,-36(fp)
   90c18:	e0bff717 	ldw	r2,-36(fp)
   90c1c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   90c20:	00004206 	br	90d2c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   90c24:	e0bffc17 	ldw	r2,-16(fp)
   90c28:	1080020b 	ldhu	r2,8(r2)
   90c2c:	0084303a 	nor	r2,zero,r2
   90c30:	1007883a 	mov	r3,r2
   90c34:	e0bffd0b 	ldhu	r2,-12(fp)
   90c38:	1884703a 	and	r2,r3,r2
   90c3c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   90c40:	e0fff30b 	ldhu	r3,-52(fp)
   90c44:	e0bffd0b 	ldhu	r2,-12(fp)
   90c48:	18800b1e 	bne	r3,r2,90c78 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   90c4c:	e0bff383 	ldbu	r2,-50(fp)
   90c50:	10800058 	cmpnei	r2,r2,1
   90c54:	10000b1e 	bne	r2,zero,90c84 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   90c58:	e0bffc17 	ldw	r2,-16(fp)
   90c5c:	10c0020b 	ldhu	r3,8(r2)
   90c60:	e0bff30b 	ldhu	r2,-52(fp)
   90c64:	1884b03a 	or	r2,r3,r2
   90c68:	1007883a 	mov	r3,r2
   90c6c:	e0bffc17 	ldw	r2,-16(fp)
   90c70:	10c0020d 	sth	r3,8(r2)
   90c74:	00000306 	br	90c84 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   90c78:	e0bfff17 	ldw	r2,-4(fp)
   90c7c:	00c01c04 	movi	r3,112
   90c80:	10c00005 	stb	r3,0(r2)
   90c84:	e0bff417 	ldw	r2,-48(fp)
   90c88:	e0bff815 	stw	r2,-32(fp)
   90c8c:	e0bff817 	ldw	r2,-32(fp)
   90c90:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   90c94:	00002506 	br	90d2c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   90c98:	e0bffc17 	ldw	r2,-16(fp)
   90c9c:	1080020b 	ldhu	r2,8(r2)
   90ca0:	0084303a 	nor	r2,zero,r2
   90ca4:	1007883a 	mov	r3,r2
   90ca8:	e0bffd0b 	ldhu	r2,-12(fp)
   90cac:	1884703a 	and	r2,r3,r2
   90cb0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   90cb4:	e0bff30b 	ldhu	r2,-52(fp)
   90cb8:	10000b26 	beq	r2,zero,90ce8 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   90cbc:	e0bff383 	ldbu	r2,-50(fp)
   90cc0:	10800058 	cmpnei	r2,r2,1
   90cc4:	10000b1e 	bne	r2,zero,90cf4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   90cc8:	e0bffc17 	ldw	r2,-16(fp)
   90ccc:	10c0020b 	ldhu	r3,8(r2)
   90cd0:	e0bff30b 	ldhu	r2,-52(fp)
   90cd4:	1884b03a 	or	r2,r3,r2
   90cd8:	1007883a 	mov	r3,r2
   90cdc:	e0bffc17 	ldw	r2,-16(fp)
   90ce0:	10c0020d 	sth	r3,8(r2)
   90ce4:	00000306 	br	90cf4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   90ce8:	e0bfff17 	ldw	r2,-4(fp)
   90cec:	00c01c04 	movi	r3,112
   90cf0:	10c00005 	stb	r3,0(r2)
   90cf4:	e0bff417 	ldw	r2,-48(fp)
   90cf8:	e0bff915 	stw	r2,-28(fp)
   90cfc:	e0bff917 	ldw	r2,-28(fp)
   90d00:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   90d04:	00000906 	br	90d2c <OSFlagAccept+0x2f4>
   90d08:	e0bff417 	ldw	r2,-48(fp)
   90d0c:	e0bffa15 	stw	r2,-24(fp)
   90d10:	e0bffa17 	ldw	r2,-24(fp)
   90d14:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   90d18:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   90d1c:	e0bfff17 	ldw	r2,-4(fp)
   90d20:	00c01bc4 	movi	r3,111
   90d24:	10c00005 	stb	r3,0(r2)
             break;
   90d28:	0001883a 	nop
    }
    return (flags_rdy);
   90d2c:	e0bff30b 	ldhu	r2,-52(fp)
}
   90d30:	e037883a 	mov	sp,fp
   90d34:	df000017 	ldw	fp,0(sp)
   90d38:	dec00104 	addi	sp,sp,4
   90d3c:	f800283a 	ret

00090d40 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   90d40:	defff804 	addi	sp,sp,-32
   90d44:	df000715 	stw	fp,28(sp)
   90d48:	df000704 	addi	fp,sp,28
   90d4c:	2005883a 	mov	r2,r4
   90d50:	e17fff15 	stw	r5,-4(fp)
   90d54:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   90d58:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   90d5c:	e0bfff17 	ldw	r2,-4(fp)
   90d60:	1000021e 	bne	r2,zero,90d6c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   90d64:	0005883a 	mov	r2,zero
   90d68:	00003306 	br	90e38 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   90d6c:	d0a73603 	ldbu	r2,-25384(gp)
   90d70:	10803fcc 	andi	r2,r2,255
   90d74:	10000526 	beq	r2,zero,90d8c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   90d78:	e0bfff17 	ldw	r2,-4(fp)
   90d7c:	00c00404 	movi	r3,16
   90d80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   90d84:	0005883a 	mov	r2,zero
   90d88:	00002b06 	br	90e38 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90d8c:	0005303a 	rdctl	r2,status
   90d90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90d94:	e0fffd17 	ldw	r3,-12(fp)
   90d98:	00bfff84 	movi	r2,-2
   90d9c:	1884703a 	and	r2,r3,r2
   90da0:	1001703a 	wrctl	status,r2
  
  return context;
   90da4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   90da8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   90dac:	d0a73917 	ldw	r2,-25372(gp)
   90db0:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   90db4:	e0bffb17 	ldw	r2,-20(fp)
   90db8:	10001726 	beq	r2,zero,90e18 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   90dbc:	d0a73917 	ldw	r2,-25372(gp)
   90dc0:	10800117 	ldw	r2,4(r2)
   90dc4:	d0a73915 	stw	r2,-25372(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   90dc8:	e0bffb17 	ldw	r2,-20(fp)
   90dcc:	00c00144 	movi	r3,5
   90dd0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   90dd4:	e0bffb17 	ldw	r2,-20(fp)
   90dd8:	e0fffe0b 	ldhu	r3,-8(fp)
   90ddc:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   90de0:	e0bffb17 	ldw	r2,-20(fp)
   90de4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   90de8:	e0bffb17 	ldw	r2,-20(fp)
   90dec:	00c00fc4 	movi	r3,63
   90df0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   90df4:	e0bffb17 	ldw	r2,-20(fp)
   90df8:	100002c5 	stb	zero,11(r2)
   90dfc:	e0bff917 	ldw	r2,-28(fp)
   90e00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90e04:	e0bffa17 	ldw	r2,-24(fp)
   90e08:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   90e0c:	e0bfff17 	ldw	r2,-4(fp)
   90e10:	10000005 	stb	zero,0(r2)
   90e14:	00000706 	br	90e34 <OSFlagCreate+0xf4>
   90e18:	e0bff917 	ldw	r2,-28(fp)
   90e1c:	e0bffc15 	stw	r2,-16(fp)
   90e20:	e0bffc17 	ldw	r2,-16(fp)
   90e24:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   90e28:	e0bfff17 	ldw	r2,-4(fp)
   90e2c:	00c01c84 	movi	r3,114
   90e30:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   90e34:	e0bffb17 	ldw	r2,-20(fp)
}
   90e38:	e037883a 	mov	sp,fp
   90e3c:	df000017 	ldw	fp,0(sp)
   90e40:	dec00104 	addi	sp,sp,4
   90e44:	f800283a 	ret

00090e48 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   90e48:	defff204 	addi	sp,sp,-56
   90e4c:	dfc00d15 	stw	ra,52(sp)
   90e50:	df000c15 	stw	fp,48(sp)
   90e54:	df000c04 	addi	fp,sp,48
   90e58:	e13ffd15 	stw	r4,-12(fp)
   90e5c:	2805883a 	mov	r2,r5
   90e60:	e1bfff15 	stw	r6,-4(fp)
   90e64:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   90e68:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   90e6c:	e0bfff17 	ldw	r2,-4(fp)
   90e70:	1000021e 	bne	r2,zero,90e7c <OSFlagDel+0x34>
        return (pgrp);
   90e74:	e0bffd17 	ldw	r2,-12(fp)
   90e78:	00008006 	br	9107c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   90e7c:	e0bffd17 	ldw	r2,-12(fp)
   90e80:	1000051e 	bne	r2,zero,90e98 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   90e84:	e0bfff17 	ldw	r2,-4(fp)
   90e88:	00c01b84 	movi	r3,110
   90e8c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   90e90:	e0bffd17 	ldw	r2,-12(fp)
   90e94:	00007906 	br	9107c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   90e98:	d0a73603 	ldbu	r2,-25384(gp)
   90e9c:	10803fcc 	andi	r2,r2,255
   90ea0:	10000526 	beq	r2,zero,90eb8 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   90ea4:	e0bfff17 	ldw	r2,-4(fp)
   90ea8:	00c003c4 	movi	r3,15
   90eac:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   90eb0:	e0bffd17 	ldw	r2,-12(fp)
   90eb4:	00007106 	br	9107c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   90eb8:	e0bffd17 	ldw	r2,-12(fp)
   90ebc:	10800003 	ldbu	r2,0(r2)
   90ec0:	10803fcc 	andi	r2,r2,255
   90ec4:	10800160 	cmpeqi	r2,r2,5
   90ec8:	1000051e 	bne	r2,zero,90ee0 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   90ecc:	e0bfff17 	ldw	r2,-4(fp)
   90ed0:	00c00044 	movi	r3,1
   90ed4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   90ed8:	e0bffd17 	ldw	r2,-12(fp)
   90edc:	00006706 	br	9107c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90ee0:	0005303a 	rdctl	r2,status
   90ee4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90ee8:	e0fffc17 	ldw	r3,-16(fp)
   90eec:	00bfff84 	movi	r2,-2
   90ef0:	1884703a 	and	r2,r3,r2
   90ef4:	1001703a 	wrctl	status,r2
  
  return context;
   90ef8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   90efc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   90f00:	e0bffd17 	ldw	r2,-12(fp)
   90f04:	10800117 	ldw	r2,4(r2)
   90f08:	10000326 	beq	r2,zero,90f18 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   90f0c:	00800044 	movi	r2,1
   90f10:	e0bff405 	stb	r2,-48(fp)
   90f14:	00000106 	br	90f1c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   90f18:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   90f1c:	e0bffe03 	ldbu	r2,-8(fp)
   90f20:	10000326 	beq	r2,zero,90f30 <OSFlagDel+0xe8>
   90f24:	10800060 	cmpeqi	r2,r2,1
   90f28:	1000231e 	bne	r2,zero,90fb8 <OSFlagDel+0x170>
   90f2c:	00004806 	br	91050 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   90f30:	e0bff403 	ldbu	r2,-48(fp)
   90f34:	1000161e 	bne	r2,zero,90f90 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   90f38:	e0bffd17 	ldw	r2,-12(fp)
   90f3c:	00c00fc4 	movi	r3,63
   90f40:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   90f44:	e0bffd17 	ldw	r2,-12(fp)
   90f48:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   90f4c:	e0bffd17 	ldw	r2,-12(fp)
   90f50:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   90f54:	d0e73917 	ldw	r3,-25372(gp)
   90f58:	e0bffd17 	ldw	r2,-12(fp)
   90f5c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   90f60:	e0bffd17 	ldw	r2,-12(fp)
   90f64:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   90f68:	e0bffd17 	ldw	r2,-12(fp)
   90f6c:	d0a73915 	stw	r2,-25372(gp)
   90f70:	e0bff717 	ldw	r2,-36(fp)
   90f74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90f78:	e0bff817 	ldw	r2,-32(fp)
   90f7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   90f80:	e0bfff17 	ldw	r2,-4(fp)
   90f84:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   90f88:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   90f8c:	00003a06 	br	91078 <OSFlagDel+0x230>
   90f90:	e0bff717 	ldw	r2,-36(fp)
   90f94:	e0bff915 	stw	r2,-28(fp)
   90f98:	e0bff917 	ldw	r2,-28(fp)
   90f9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   90fa0:	e0bfff17 	ldw	r2,-4(fp)
   90fa4:	00c01244 	movi	r3,73
   90fa8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   90fac:	e0bffd17 	ldw	r2,-12(fp)
   90fb0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   90fb4:	00003006 	br	91078 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   90fb8:	e0bffd17 	ldw	r2,-12(fp)
   90fbc:	10800117 	ldw	r2,4(r2)
   90fc0:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   90fc4:	00000606 	br	90fe0 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   90fc8:	000b883a 	mov	r5,zero
   90fcc:	e13ff517 	ldw	r4,-44(fp)
   90fd0:	0091fb40 	call	91fb4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   90fd4:	e0bff517 	ldw	r2,-44(fp)
   90fd8:	10800017 	ldw	r2,0(r2)
   90fdc:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   90fe0:	e0bff517 	ldw	r2,-44(fp)
   90fe4:	103ff81e 	bne	r2,zero,90fc8 <__alt_data_end+0xfffd27c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   90fe8:	e0bffd17 	ldw	r2,-12(fp)
   90fec:	00c00fc4 	movi	r3,63
   90ff0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   90ff4:	e0bffd17 	ldw	r2,-12(fp)
   90ff8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   90ffc:	e0bffd17 	ldw	r2,-12(fp)
   91000:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   91004:	d0e73917 	ldw	r3,-25372(gp)
   91008:	e0bffd17 	ldw	r2,-12(fp)
   9100c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   91010:	e0bffd17 	ldw	r2,-12(fp)
   91014:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   91018:	e0bffd17 	ldw	r2,-12(fp)
   9101c:	d0a73915 	stw	r2,-25372(gp)
   91020:	e0bff717 	ldw	r2,-36(fp)
   91024:	e0bffa15 	stw	r2,-24(fp)
   91028:	e0bffa17 	ldw	r2,-24(fp)
   9102c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   91030:	e0bff403 	ldbu	r2,-48(fp)
   91034:	10800058 	cmpnei	r2,r2,1
   91038:	1000011e 	bne	r2,zero,91040 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   9103c:	00901d40 	call	901d4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   91040:	e0bfff17 	ldw	r2,-4(fp)
   91044:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   91048:	e03ff615 	stw	zero,-40(fp)
             break;
   9104c:	00000a06 	br	91078 <OSFlagDel+0x230>
   91050:	e0bff717 	ldw	r2,-36(fp)
   91054:	e0bffb15 	stw	r2,-20(fp)
   91058:	e0bffb17 	ldw	r2,-20(fp)
   9105c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   91060:	e0bfff17 	ldw	r2,-4(fp)
   91064:	00c001c4 	movi	r3,7
   91068:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   9106c:	e0bffd17 	ldw	r2,-12(fp)
   91070:	e0bff615 	stw	r2,-40(fp)
             break;
   91074:	0001883a 	nop
    }
    return (pgrp_return);
   91078:	e0bff617 	ldw	r2,-40(fp)
}
   9107c:	e037883a 	mov	sp,fp
   91080:	dfc00117 	ldw	ra,4(sp)
   91084:	df000017 	ldw	fp,0(sp)
   91088:	dec00204 	addi	sp,sp,8
   9108c:	f800283a 	ret

00091090 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   91090:	defff604 	addi	sp,sp,-40
   91094:	dfc00915 	stw	ra,36(sp)
   91098:	df000815 	stw	fp,32(sp)
   9109c:	df000804 	addi	fp,sp,32
   910a0:	e13ffd15 	stw	r4,-12(fp)
   910a4:	e17ffe15 	stw	r5,-8(fp)
   910a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   910ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   910b0:	e0bfff17 	ldw	r2,-4(fp)
   910b4:	1000021e 	bne	r2,zero,910c0 <OSFlagNameGet+0x30>
        return (0);
   910b8:	0005883a 	mov	r2,zero
   910bc:	00003906 	br	911a4 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   910c0:	e0bffd17 	ldw	r2,-12(fp)
   910c4:	1000051e 	bne	r2,zero,910dc <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   910c8:	e0bfff17 	ldw	r2,-4(fp)
   910cc:	00c01b84 	movi	r3,110
   910d0:	10c00005 	stb	r3,0(r2)
        return (0);
   910d4:	0005883a 	mov	r2,zero
   910d8:	00003206 	br	911a4 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   910dc:	e0bffe17 	ldw	r2,-8(fp)
   910e0:	1000051e 	bne	r2,zero,910f8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   910e4:	e0bfff17 	ldw	r2,-4(fp)
   910e8:	00c00304 	movi	r3,12
   910ec:	10c00005 	stb	r3,0(r2)
        return (0);
   910f0:	0005883a 	mov	r2,zero
   910f4:	00002b06 	br	911a4 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   910f8:	d0a73603 	ldbu	r2,-25384(gp)
   910fc:	10803fcc 	andi	r2,r2,255
   91100:	10000526 	beq	r2,zero,91118 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   91104:	e0bfff17 	ldw	r2,-4(fp)
   91108:	00c00444 	movi	r3,17
   9110c:	10c00005 	stb	r3,0(r2)
        return (0);
   91110:	0005883a 	mov	r2,zero
   91114:	00002306 	br	911a4 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91118:	0005303a 	rdctl	r2,status
   9111c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91120:	e0fffc17 	ldw	r3,-16(fp)
   91124:	00bfff84 	movi	r2,-2
   91128:	1884703a 	and	r2,r3,r2
   9112c:	1001703a 	wrctl	status,r2
  
  return context;
   91130:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   91134:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   91138:	e0bffd17 	ldw	r2,-12(fp)
   9113c:	10800003 	ldbu	r2,0(r2)
   91140:	10803fcc 	andi	r2,r2,255
   91144:	10800160 	cmpeqi	r2,r2,5
   91148:	1000091e 	bne	r2,zero,91170 <OSFlagNameGet+0xe0>
   9114c:	e0bff817 	ldw	r2,-32(fp)
   91150:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91154:	e0bff917 	ldw	r2,-28(fp)
   91158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   9115c:	e0bfff17 	ldw	r2,-4(fp)
   91160:	00c00044 	movi	r3,1
   91164:	10c00005 	stb	r3,0(r2)
        return (0);
   91168:	0005883a 	mov	r2,zero
   9116c:	00000d06 	br	911a4 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   91170:	e0bffd17 	ldw	r2,-12(fp)
   91174:	10800284 	addi	r2,r2,10
   91178:	100b883a 	mov	r5,r2
   9117c:	e13ffe17 	ldw	r4,-8(fp)
   91180:	00903180 	call	90318 <OS_StrCopy>
   91184:	e0bffb05 	stb	r2,-20(fp)
   91188:	e0bff817 	ldw	r2,-32(fp)
   9118c:	e0bffa15 	stw	r2,-24(fp)
   91190:	e0bffa17 	ldw	r2,-24(fp)
   91194:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   91198:	e0bfff17 	ldw	r2,-4(fp)
   9119c:	10000005 	stb	zero,0(r2)
    return (len);
   911a0:	e0bffb03 	ldbu	r2,-20(fp)
}
   911a4:	e037883a 	mov	sp,fp
   911a8:	dfc00117 	ldw	ra,4(sp)
   911ac:	df000017 	ldw	fp,0(sp)
   911b0:	dec00204 	addi	sp,sp,8
   911b4:	f800283a 	ret

000911b8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   911b8:	defff504 	addi	sp,sp,-44
   911bc:	dfc00a15 	stw	ra,40(sp)
   911c0:	df000915 	stw	fp,36(sp)
   911c4:	df000904 	addi	fp,sp,36
   911c8:	e13ffd15 	stw	r4,-12(fp)
   911cc:	e17ffe15 	stw	r5,-8(fp)
   911d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   911d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   911d8:	e0bfff17 	ldw	r2,-4(fp)
   911dc:	10004326 	beq	r2,zero,912ec <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   911e0:	e0bffd17 	ldw	r2,-12(fp)
   911e4:	1000041e 	bne	r2,zero,911f8 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   911e8:	e0bfff17 	ldw	r2,-4(fp)
   911ec:	00c01b84 	movi	r3,110
   911f0:	10c00005 	stb	r3,0(r2)
        return;
   911f4:	00003e06 	br	912f0 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   911f8:	e0bffe17 	ldw	r2,-8(fp)
   911fc:	1000041e 	bne	r2,zero,91210 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   91200:	e0bfff17 	ldw	r2,-4(fp)
   91204:	00c00304 	movi	r3,12
   91208:	10c00005 	stb	r3,0(r2)
        return;
   9120c:	00003806 	br	912f0 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   91210:	d0a73603 	ldbu	r2,-25384(gp)
   91214:	10803fcc 	andi	r2,r2,255
   91218:	10000426 	beq	r2,zero,9122c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   9121c:	e0bfff17 	ldw	r2,-4(fp)
   91220:	00c00484 	movi	r3,18
   91224:	10c00005 	stb	r3,0(r2)
        return;
   91228:	00003106 	br	912f0 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9122c:	0005303a 	rdctl	r2,status
   91230:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91234:	e0fffc17 	ldw	r3,-16(fp)
   91238:	00bfff84 	movi	r2,-2
   9123c:	1884703a 	and	r2,r3,r2
   91240:	1001703a 	wrctl	status,r2
  
  return context;
   91244:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   91248:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   9124c:	e0bffd17 	ldw	r2,-12(fp)
   91250:	10800003 	ldbu	r2,0(r2)
   91254:	10803fcc 	andi	r2,r2,255
   91258:	10800160 	cmpeqi	r2,r2,5
   9125c:	1000081e 	bne	r2,zero,91280 <OSFlagNameSet+0xc8>
   91260:	e0bff717 	ldw	r2,-36(fp)
   91264:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91268:	e0bff817 	ldw	r2,-32(fp)
   9126c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   91270:	e0bfff17 	ldw	r2,-4(fp)
   91274:	00c00044 	movi	r3,1
   91278:	10c00005 	stb	r3,0(r2)
        return;
   9127c:	00001c06 	br	912f0 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   91280:	e13ffe17 	ldw	r4,-8(fp)
   91284:	009038c0 	call	9038c <OS_StrLen>
   91288:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   9128c:	e0bffa03 	ldbu	r2,-24(fp)
   91290:	10800830 	cmpltui	r2,r2,32
   91294:	1000081e 	bne	r2,zero,912b8 <OSFlagNameSet+0x100>
   91298:	e0bff717 	ldw	r2,-36(fp)
   9129c:	e0bff915 	stw	r2,-28(fp)
   912a0:	e0bff917 	ldw	r2,-28(fp)
   912a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   912a8:	e0bfff17 	ldw	r2,-4(fp)
   912ac:	00c01cc4 	movi	r3,115
   912b0:	10c00005 	stb	r3,0(r2)
        return;
   912b4:	00000e06 	br	912f0 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   912b8:	e0bffd17 	ldw	r2,-12(fp)
   912bc:	10800284 	addi	r2,r2,10
   912c0:	e17ffe17 	ldw	r5,-8(fp)
   912c4:	1009883a 	mov	r4,r2
   912c8:	00903180 	call	90318 <OS_StrCopy>
   912cc:	e0bff717 	ldw	r2,-36(fp)
   912d0:	e0bffb15 	stw	r2,-20(fp)
   912d4:	e0bffb17 	ldw	r2,-20(fp)
   912d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   912dc:	e0bfff17 	ldw	r2,-4(fp)
   912e0:	10000005 	stb	zero,0(r2)
    return;
   912e4:	0001883a 	nop
   912e8:	00000106 	br	912f0 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   912ec:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   912f0:	e037883a 	mov	sp,fp
   912f4:	dfc00117 	ldw	ra,4(sp)
   912f8:	df000017 	ldw	fp,0(sp)
   912fc:	dec00204 	addi	sp,sp,8
   91300:	f800283a 	ret

00091304 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   91304:	deffe104 	addi	sp,sp,-124
   91308:	dfc01e15 	stw	ra,120(sp)
   9130c:	df001d15 	stw	fp,116(sp)
   91310:	df001d04 	addi	fp,sp,116
   91314:	e13ffc15 	stw	r4,-16(fp)
   91318:	2809883a 	mov	r4,r5
   9131c:	3007883a 	mov	r3,r6
   91320:	3805883a 	mov	r2,r7
   91324:	e13ffd0d 	sth	r4,-12(fp)
   91328:	e0fffe05 	stb	r3,-8(fp)
   9132c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   91330:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   91334:	e0800217 	ldw	r2,8(fp)
   91338:	1000021e 	bne	r2,zero,91344 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   9133c:	0005883a 	mov	r2,zero
   91340:	00015906 	br	918a8 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   91344:	e0bffc17 	ldw	r2,-16(fp)
   91348:	1000051e 	bne	r2,zero,91360 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   9134c:	e0800217 	ldw	r2,8(fp)
   91350:	00c01b84 	movi	r3,110
   91354:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91358:	0005883a 	mov	r2,zero
   9135c:	00015206 	br	918a8 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   91360:	d0a73603 	ldbu	r2,-25384(gp)
   91364:	10803fcc 	andi	r2,r2,255
   91368:	10000526 	beq	r2,zero,91380 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   9136c:	e0800217 	ldw	r2,8(fp)
   91370:	00c00084 	movi	r3,2
   91374:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91378:	0005883a 	mov	r2,zero
   9137c:	00014a06 	br	918a8 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   91380:	d0a72803 	ldbu	r2,-25440(gp)
   91384:	10803fcc 	andi	r2,r2,255
   91388:	10000526 	beq	r2,zero,913a0 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   9138c:	e0800217 	ldw	r2,8(fp)
   91390:	00c00344 	movi	r3,13
   91394:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91398:	0005883a 	mov	r2,zero
   9139c:	00014206 	br	918a8 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   913a0:	e0bffc17 	ldw	r2,-16(fp)
   913a4:	10800003 	ldbu	r2,0(r2)
   913a8:	10803fcc 	andi	r2,r2,255
   913ac:	10800160 	cmpeqi	r2,r2,5
   913b0:	1000051e 	bne	r2,zero,913c8 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   913b4:	e0800217 	ldw	r2,8(fp)
   913b8:	00c00044 	movi	r3,1
   913bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   913c0:	0005883a 	mov	r2,zero
   913c4:	00013806 	br	918a8 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   913c8:	e0fffe03 	ldbu	r3,-8(fp)
   913cc:	00bfe004 	movi	r2,-128
   913d0:	1884703a 	and	r2,r3,r2
   913d4:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   913d8:	e0bfe603 	ldbu	r2,-104(fp)
   913dc:	10000626 	beq	r2,zero,913f8 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   913e0:	e0bffe03 	ldbu	r2,-8(fp)
   913e4:	10801fcc 	andi	r2,r2,127
   913e8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   913ec:	00800044 	movi	r2,1
   913f0:	e0bfe405 	stb	r2,-112(fp)
   913f4:	00000106 	br	913fc <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   913f8:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   913fc:	0005303a 	rdctl	r2,status
   91400:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91404:	e0fff617 	ldw	r3,-40(fp)
   91408:	00bfff84 	movi	r2,-2
   9140c:	1884703a 	and	r2,r3,r2
   91410:	1001703a 	wrctl	status,r2
  
  return context;
   91414:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   91418:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   9141c:	e0bffe03 	ldbu	r2,-8(fp)
   91420:	10c00060 	cmpeqi	r3,r2,1
   91424:	1800921e 	bne	r3,zero,91670 <OSFlagPend+0x36c>
   91428:	10c00088 	cmpgei	r3,r2,2
   9142c:	1800021e 	bne	r3,zero,91438 <OSFlagPend+0x134>
   91430:	10006126 	beq	r2,zero,915b8 <OSFlagPend+0x2b4>
   91434:	0000bb06 	br	91724 <OSFlagPend+0x420>
   91438:	10c000a0 	cmpeqi	r3,r2,2
   9143c:	1800031e 	bne	r3,zero,9144c <OSFlagPend+0x148>
   91440:	108000e0 	cmpeqi	r2,r2,3
   91444:	10002f1e 	bne	r2,zero,91504 <OSFlagPend+0x200>
   91448:	0000b606 	br	91724 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   9144c:	e0bffc17 	ldw	r2,-16(fp)
   91450:	10c0020b 	ldhu	r3,8(r2)
   91454:	e0bffd0b 	ldhu	r2,-12(fp)
   91458:	1884703a 	and	r2,r3,r2
   9145c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   91460:	e0ffe80b 	ldhu	r3,-96(fp)
   91464:	e0bffd0b 	ldhu	r2,-12(fp)
   91468:	1880171e 	bne	r3,r2,914c8 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   9146c:	e0bfe403 	ldbu	r2,-112(fp)
   91470:	10800058 	cmpnei	r2,r2,1
   91474:	1000091e 	bne	r2,zero,9149c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   91478:	e0bffc17 	ldw	r2,-16(fp)
   9147c:	1080020b 	ldhu	r2,8(r2)
   91480:	1007883a 	mov	r3,r2
   91484:	e0bfe80b 	ldhu	r2,-96(fp)
   91488:	0084303a 	nor	r2,zero,r2
   9148c:	1884703a 	and	r2,r3,r2
   91490:	1007883a 	mov	r3,r2
   91494:	e0bffc17 	ldw	r2,-16(fp)
   91498:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   9149c:	d0a73717 	ldw	r2,-25380(gp)
   914a0:	e0ffe80b 	ldhu	r3,-96(fp)
   914a4:	10c00b0d 	sth	r3,44(r2)
   914a8:	e0bfe517 	ldw	r2,-108(fp)
   914ac:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   914b0:	e0bfe717 	ldw	r2,-100(fp)
   914b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   914b8:	e0800217 	ldw	r2,8(fp)
   914bc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   914c0:	e0bfe80b 	ldhu	r2,-96(fp)
   914c4:	0000f806 	br	918a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   914c8:	e13ffd0b 	ldhu	r4,-12(fp)
   914cc:	e17ffe03 	ldbu	r5,-8(fp)
   914d0:	e0bfff0b 	ldhu	r2,-4(fp)
   914d4:	e0fff704 	addi	r3,fp,-36
   914d8:	d8800015 	stw	r2,0(sp)
   914dc:	280f883a 	mov	r7,r5
   914e0:	200d883a 	mov	r6,r4
   914e4:	180b883a 	mov	r5,r3
   914e8:	e13ffc17 	ldw	r4,-16(fp)
   914ec:	0091d740 	call	91d74 <OS_FlagBlock>
   914f0:	e0bfe517 	ldw	r2,-108(fp)
   914f4:	e0bfe915 	stw	r2,-92(fp)
   914f8:	e0bfe917 	ldw	r2,-92(fp)
   914fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   91500:	00009206 	br	9174c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   91504:	e0bffc17 	ldw	r2,-16(fp)
   91508:	10c0020b 	ldhu	r3,8(r2)
   9150c:	e0bffd0b 	ldhu	r2,-12(fp)
   91510:	1884703a 	and	r2,r3,r2
   91514:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   91518:	e0bfe80b 	ldhu	r2,-96(fp)
   9151c:	10001726 	beq	r2,zero,9157c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   91520:	e0bfe403 	ldbu	r2,-112(fp)
   91524:	10800058 	cmpnei	r2,r2,1
   91528:	1000091e 	bne	r2,zero,91550 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   9152c:	e0bffc17 	ldw	r2,-16(fp)
   91530:	1080020b 	ldhu	r2,8(r2)
   91534:	1007883a 	mov	r3,r2
   91538:	e0bfe80b 	ldhu	r2,-96(fp)
   9153c:	0084303a 	nor	r2,zero,r2
   91540:	1884703a 	and	r2,r3,r2
   91544:	1007883a 	mov	r3,r2
   91548:	e0bffc17 	ldw	r2,-16(fp)
   9154c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   91550:	d0a73717 	ldw	r2,-25380(gp)
   91554:	e0ffe80b 	ldhu	r3,-96(fp)
   91558:	10c00b0d 	sth	r3,44(r2)
   9155c:	e0bfe517 	ldw	r2,-108(fp)
   91560:	e0bfea15 	stw	r2,-88(fp)
   91564:	e0bfea17 	ldw	r2,-88(fp)
   91568:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   9156c:	e0800217 	ldw	r2,8(fp)
   91570:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   91574:	e0bfe80b 	ldhu	r2,-96(fp)
   91578:	0000cb06 	br	918a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   9157c:	e13ffd0b 	ldhu	r4,-12(fp)
   91580:	e17ffe03 	ldbu	r5,-8(fp)
   91584:	e0bfff0b 	ldhu	r2,-4(fp)
   91588:	e0fff704 	addi	r3,fp,-36
   9158c:	d8800015 	stw	r2,0(sp)
   91590:	280f883a 	mov	r7,r5
   91594:	200d883a 	mov	r6,r4
   91598:	180b883a 	mov	r5,r3
   9159c:	e13ffc17 	ldw	r4,-16(fp)
   915a0:	0091d740 	call	91d74 <OS_FlagBlock>
   915a4:	e0bfe517 	ldw	r2,-108(fp)
   915a8:	e0bfeb15 	stw	r2,-84(fp)
   915ac:	e0bfeb17 	ldw	r2,-84(fp)
   915b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   915b4:	00006506 	br	9174c <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   915b8:	e0bffc17 	ldw	r2,-16(fp)
   915bc:	1080020b 	ldhu	r2,8(r2)
   915c0:	0084303a 	nor	r2,zero,r2
   915c4:	1007883a 	mov	r3,r2
   915c8:	e0bffd0b 	ldhu	r2,-12(fp)
   915cc:	1884703a 	and	r2,r3,r2
   915d0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   915d4:	e0ffe80b 	ldhu	r3,-96(fp)
   915d8:	e0bffd0b 	ldhu	r2,-12(fp)
   915dc:	1880151e 	bne	r3,r2,91634 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   915e0:	e0bfe403 	ldbu	r2,-112(fp)
   915e4:	10800058 	cmpnei	r2,r2,1
   915e8:	1000071e 	bne	r2,zero,91608 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   915ec:	e0bffc17 	ldw	r2,-16(fp)
   915f0:	10c0020b 	ldhu	r3,8(r2)
   915f4:	e0bfe80b 	ldhu	r2,-96(fp)
   915f8:	1884b03a 	or	r2,r3,r2
   915fc:	1007883a 	mov	r3,r2
   91600:	e0bffc17 	ldw	r2,-16(fp)
   91604:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   91608:	d0a73717 	ldw	r2,-25380(gp)
   9160c:	e0ffe80b 	ldhu	r3,-96(fp)
   91610:	10c00b0d 	sth	r3,44(r2)
   91614:	e0bfe517 	ldw	r2,-108(fp)
   91618:	e0bfec15 	stw	r2,-80(fp)
   9161c:	e0bfec17 	ldw	r2,-80(fp)
   91620:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   91624:	e0800217 	ldw	r2,8(fp)
   91628:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   9162c:	e0bfe80b 	ldhu	r2,-96(fp)
   91630:	00009d06 	br	918a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   91634:	e13ffd0b 	ldhu	r4,-12(fp)
   91638:	e17ffe03 	ldbu	r5,-8(fp)
   9163c:	e0bfff0b 	ldhu	r2,-4(fp)
   91640:	e0fff704 	addi	r3,fp,-36
   91644:	d8800015 	stw	r2,0(sp)
   91648:	280f883a 	mov	r7,r5
   9164c:	200d883a 	mov	r6,r4
   91650:	180b883a 	mov	r5,r3
   91654:	e13ffc17 	ldw	r4,-16(fp)
   91658:	0091d740 	call	91d74 <OS_FlagBlock>
   9165c:	e0bfe517 	ldw	r2,-108(fp)
   91660:	e0bfed15 	stw	r2,-76(fp)
   91664:	e0bfed17 	ldw	r2,-76(fp)
   91668:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   9166c:	00003706 	br	9174c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   91670:	e0bffc17 	ldw	r2,-16(fp)
   91674:	1080020b 	ldhu	r2,8(r2)
   91678:	0084303a 	nor	r2,zero,r2
   9167c:	1007883a 	mov	r3,r2
   91680:	e0bffd0b 	ldhu	r2,-12(fp)
   91684:	1884703a 	and	r2,r3,r2
   91688:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   9168c:	e0bfe80b 	ldhu	r2,-96(fp)
   91690:	10001526 	beq	r2,zero,916e8 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   91694:	e0bfe403 	ldbu	r2,-112(fp)
   91698:	10800058 	cmpnei	r2,r2,1
   9169c:	1000071e 	bne	r2,zero,916bc <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   916a0:	e0bffc17 	ldw	r2,-16(fp)
   916a4:	10c0020b 	ldhu	r3,8(r2)
   916a8:	e0bfe80b 	ldhu	r2,-96(fp)
   916ac:	1884b03a 	or	r2,r3,r2
   916b0:	1007883a 	mov	r3,r2
   916b4:	e0bffc17 	ldw	r2,-16(fp)
   916b8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   916bc:	d0a73717 	ldw	r2,-25380(gp)
   916c0:	e0ffe80b 	ldhu	r3,-96(fp)
   916c4:	10c00b0d 	sth	r3,44(r2)
   916c8:	e0bfe517 	ldw	r2,-108(fp)
   916cc:	e0bfee15 	stw	r2,-72(fp)
   916d0:	e0bfee17 	ldw	r2,-72(fp)
   916d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   916d8:	e0800217 	ldw	r2,8(fp)
   916dc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   916e0:	e0bfe80b 	ldhu	r2,-96(fp)
   916e4:	00007006 	br	918a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   916e8:	e13ffd0b 	ldhu	r4,-12(fp)
   916ec:	e17ffe03 	ldbu	r5,-8(fp)
   916f0:	e0bfff0b 	ldhu	r2,-4(fp)
   916f4:	e0fff704 	addi	r3,fp,-36
   916f8:	d8800015 	stw	r2,0(sp)
   916fc:	280f883a 	mov	r7,r5
   91700:	200d883a 	mov	r6,r4
   91704:	180b883a 	mov	r5,r3
   91708:	e13ffc17 	ldw	r4,-16(fp)
   9170c:	0091d740 	call	91d74 <OS_FlagBlock>
   91710:	e0bfe517 	ldw	r2,-108(fp)
   91714:	e0bfef15 	stw	r2,-68(fp)
   91718:	e0bfef17 	ldw	r2,-68(fp)
   9171c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   91720:	00000a06 	br	9174c <OSFlagPend+0x448>
   91724:	e0bfe517 	ldw	r2,-108(fp)
   91728:	e0bff015 	stw	r2,-64(fp)
   9172c:	e0bff017 	ldw	r2,-64(fp)
   91730:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   91734:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   91738:	e0800217 	ldw	r2,8(fp)
   9173c:	00c01bc4 	movi	r3,111
   91740:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   91744:	e0bfe80b 	ldhu	r2,-96(fp)
   91748:	00005706 	br	918a8 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   9174c:	00901d40 	call	901d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91750:	0005303a 	rdctl	r2,status
   91754:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91758:	e0fff117 	ldw	r3,-60(fp)
   9175c:	00bfff84 	movi	r2,-2
   91760:	1884703a 	and	r2,r3,r2
   91764:	1001703a 	wrctl	status,r2
  
  return context;
   91768:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   9176c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   91770:	d0a73717 	ldw	r2,-25380(gp)
   91774:	10800c43 	ldbu	r2,49(r2)
   91778:	10803fcc 	andi	r2,r2,255
   9177c:	10001c26 	beq	r2,zero,917f0 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   91780:	d0a73717 	ldw	r2,-25380(gp)
   91784:	10800c43 	ldbu	r2,49(r2)
   91788:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   9178c:	d0a73717 	ldw	r2,-25380(gp)
   91790:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   91794:	e0bff704 	addi	r2,fp,-36
   91798:	1009883a 	mov	r4,r2
   9179c:	00920a80 	call	920a8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   917a0:	d0a73717 	ldw	r2,-25380(gp)
   917a4:	10000c05 	stb	zero,48(r2)
   917a8:	e0bfe517 	ldw	r2,-108(fp)
   917ac:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   917b0:	e0bff217 	ldw	r2,-56(fp)
   917b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   917b8:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   917bc:	e0bff303 	ldbu	r2,-52(fp)
   917c0:	108000a0 	cmpeqi	r2,r2,2
   917c4:	10000426 	beq	r2,zero,917d8 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   917c8:	e0800217 	ldw	r2,8(fp)
   917cc:	00c00384 	movi	r3,14
   917d0:	10c00005 	stb	r3,0(r2)
                 break;
   917d4:	00000406 	br	917e8 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   917d8:	e0800217 	ldw	r2,8(fp)
   917dc:	00c00284 	movi	r3,10
   917e0:	10c00005 	stb	r3,0(r2)
                 break;
   917e4:	0001883a 	nop
        }
        return (flags_rdy);
   917e8:	e0bfe80b 	ldhu	r2,-96(fp)
   917ec:	00002e06 	br	918a8 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   917f0:	d0a73717 	ldw	r2,-25380(gp)
   917f4:	10800b0b 	ldhu	r2,44(r2)
   917f8:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   917fc:	e0bfe403 	ldbu	r2,-112(fp)
   91800:	10800058 	cmpnei	r2,r2,1
   91804:	1000211e 	bne	r2,zero,9188c <OSFlagPend+0x588>
        switch (wait_type) {
   91808:	e0bffe03 	ldbu	r2,-8(fp)
   9180c:	10001616 	blt	r2,zero,91868 <OSFlagPend+0x564>
   91810:	10c00090 	cmplti	r3,r2,2
   91814:	18000c1e 	bne	r3,zero,91848 <OSFlagPend+0x544>
   91818:	10800108 	cmpgei	r2,r2,4
   9181c:	1000121e 	bne	r2,zero,91868 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   91820:	e0bffc17 	ldw	r2,-16(fp)
   91824:	1080020b 	ldhu	r2,8(r2)
   91828:	1007883a 	mov	r3,r2
   9182c:	e0bfe80b 	ldhu	r2,-96(fp)
   91830:	0084303a 	nor	r2,zero,r2
   91834:	1884703a 	and	r2,r3,r2
   91838:	1007883a 	mov	r3,r2
   9183c:	e0bffc17 	ldw	r2,-16(fp)
   91840:	10c0020d 	sth	r3,8(r2)
                 break;
   91844:	00001106 	br	9188c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   91848:	e0bffc17 	ldw	r2,-16(fp)
   9184c:	10c0020b 	ldhu	r3,8(r2)
   91850:	e0bfe80b 	ldhu	r2,-96(fp)
   91854:	1884b03a 	or	r2,r3,r2
   91858:	1007883a 	mov	r3,r2
   9185c:	e0bffc17 	ldw	r2,-16(fp)
   91860:	10c0020d 	sth	r3,8(r2)
                 break;
   91864:	00000906 	br	9188c <OSFlagPend+0x588>
   91868:	e0bfe517 	ldw	r2,-108(fp)
   9186c:	e0bff415 	stw	r2,-48(fp)
   91870:	e0bff417 	ldw	r2,-48(fp)
   91874:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   91878:	e0800217 	ldw	r2,8(fp)
   9187c:	00c01bc4 	movi	r3,111
   91880:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   91884:	0005883a 	mov	r2,zero
   91888:	00000706 	br	918a8 <OSFlagPend+0x5a4>
   9188c:	e0bfe517 	ldw	r2,-108(fp)
   91890:	e0bff515 	stw	r2,-44(fp)
   91894:	e0bff517 	ldw	r2,-44(fp)
   91898:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   9189c:	e0800217 	ldw	r2,8(fp)
   918a0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   918a4:	e0bfe80b 	ldhu	r2,-96(fp)
}
   918a8:	e037883a 	mov	sp,fp
   918ac:	dfc00117 	ldw	ra,4(sp)
   918b0:	df000017 	ldw	fp,0(sp)
   918b4:	dec00204 	addi	sp,sp,8
   918b8:	f800283a 	ret

000918bc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   918bc:	defffb04 	addi	sp,sp,-20
   918c0:	df000415 	stw	fp,16(sp)
   918c4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   918c8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   918cc:	0005303a 	rdctl	r2,status
   918d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   918d4:	e0fffe17 	ldw	r3,-8(fp)
   918d8:	00bfff84 	movi	r2,-2
   918dc:	1884703a 	and	r2,r3,r2
   918e0:	1001703a 	wrctl	status,r2
  
  return context;
   918e4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   918e8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   918ec:	d0a73717 	ldw	r2,-25380(gp)
   918f0:	10800b0b 	ldhu	r2,44(r2)
   918f4:	e0bffd0d 	sth	r2,-12(fp)
   918f8:	e0bffc17 	ldw	r2,-16(fp)
   918fc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91900:	e0bfff17 	ldw	r2,-4(fp)
   91904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   91908:	e0bffd0b 	ldhu	r2,-12(fp)
}
   9190c:	e037883a 	mov	sp,fp
   91910:	df000017 	ldw	fp,0(sp)
   91914:	dec00104 	addi	sp,sp,4
   91918:	f800283a 	ret

0009191c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   9191c:	deffef04 	addi	sp,sp,-68
   91920:	dfc01015 	stw	ra,64(sp)
   91924:	df000f15 	stw	fp,60(sp)
   91928:	df000f04 	addi	fp,sp,60
   9192c:	e13ffc15 	stw	r4,-16(fp)
   91930:	2807883a 	mov	r3,r5
   91934:	3005883a 	mov	r2,r6
   91938:	e1ffff15 	stw	r7,-4(fp)
   9193c:	e0fffd0d 	sth	r3,-12(fp)
   91940:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   91944:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   91948:	e0bfff17 	ldw	r2,-4(fp)
   9194c:	1000021e 	bne	r2,zero,91958 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   91950:	0005883a 	mov	r2,zero
   91954:	0000d106 	br	91c9c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   91958:	e0bffc17 	ldw	r2,-16(fp)
   9195c:	1000051e 	bne	r2,zero,91974 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   91960:	e0bfff17 	ldw	r2,-4(fp)
   91964:	00c01b84 	movi	r3,110
   91968:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   9196c:	0005883a 	mov	r2,zero
   91970:	0000ca06 	br	91c9c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   91974:	e0bffc17 	ldw	r2,-16(fp)
   91978:	10800003 	ldbu	r2,0(r2)
   9197c:	10803fcc 	andi	r2,r2,255
   91980:	10800160 	cmpeqi	r2,r2,5
   91984:	1000051e 	bne	r2,zero,9199c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   91988:	e0bfff17 	ldw	r2,-4(fp)
   9198c:	00c00044 	movi	r3,1
   91990:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91994:	0005883a 	mov	r2,zero
   91998:	0000c006 	br	91c9c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9199c:	0005303a 	rdctl	r2,status
   919a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   919a4:	e0fffb17 	ldw	r3,-20(fp)
   919a8:	00bfff84 	movi	r2,-2
   919ac:	1884703a 	and	r2,r3,r2
   919b0:	1001703a 	wrctl	status,r2
  
  return context;
   919b4:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   919b8:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   919bc:	e0bffe03 	ldbu	r2,-8(fp)
   919c0:	10000326 	beq	r2,zero,919d0 <OSFlagPost+0xb4>
   919c4:	10800060 	cmpeqi	r2,r2,1
   919c8:	10000b1e 	bne	r2,zero,919f8 <OSFlagPost+0xdc>
   919cc:	00001206 	br	91a18 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   919d0:	e0bffc17 	ldw	r2,-16(fp)
   919d4:	1080020b 	ldhu	r2,8(r2)
   919d8:	1007883a 	mov	r3,r2
   919dc:	e0bffd0b 	ldhu	r2,-12(fp)
   919e0:	0084303a 	nor	r2,zero,r2
   919e4:	1884703a 	and	r2,r3,r2
   919e8:	1007883a 	mov	r3,r2
   919ec:	e0bffc17 	ldw	r2,-16(fp)
   919f0:	10c0020d 	sth	r3,8(r2)
             break;
   919f4:	00001106 	br	91a3c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   919f8:	e0bffc17 	ldw	r2,-16(fp)
   919fc:	10c0020b 	ldhu	r3,8(r2)
   91a00:	e0bffd0b 	ldhu	r2,-12(fp)
   91a04:	1884b03a 	or	r2,r3,r2
   91a08:	1007883a 	mov	r3,r2
   91a0c:	e0bffc17 	ldw	r2,-16(fp)
   91a10:	10c0020d 	sth	r3,8(r2)
             break;
   91a14:	00000906 	br	91a3c <OSFlagPost+0x120>
   91a18:	e0bff317 	ldw	r2,-52(fp)
   91a1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91a20:	e0bff417 	ldw	r2,-48(fp)
   91a24:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   91a28:	e0bfff17 	ldw	r2,-4(fp)
   91a2c:	00c01c44 	movi	r3,113
   91a30:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   91a34:	0005883a 	mov	r2,zero
   91a38:	00009806 	br	91c9c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   91a3c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   91a40:	e0bffc17 	ldw	r2,-16(fp)
   91a44:	10800117 	ldw	r2,4(r2)
   91a48:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   91a4c:	00007706 	br	91c2c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   91a50:	e0bff117 	ldw	r2,-60(fp)
   91a54:	10800483 	ldbu	r2,18(r2)
   91a58:	10803fcc 	andi	r2,r2,255
   91a5c:	10c00060 	cmpeqi	r3,r2,1
   91a60:	18004a1e 	bne	r3,zero,91b8c <OSFlagPost+0x270>
   91a64:	10c00088 	cmpgei	r3,r2,2
   91a68:	1800021e 	bne	r3,zero,91a74 <OSFlagPost+0x158>
   91a6c:	10002f26 	beq	r2,zero,91b2c <OSFlagPost+0x210>
   91a70:	00005b06 	br	91be0 <OSFlagPost+0x2c4>
   91a74:	10c000a0 	cmpeqi	r3,r2,2
   91a78:	1800031e 	bne	r3,zero,91a88 <OSFlagPost+0x16c>
   91a7c:	108000e0 	cmpeqi	r2,r2,3
   91a80:	1000171e 	bne	r2,zero,91ae0 <OSFlagPost+0x1c4>
   91a84:	00005606 	br	91be0 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   91a88:	e0bffc17 	ldw	r2,-16(fp)
   91a8c:	10c0020b 	ldhu	r3,8(r2)
   91a90:	e0bff117 	ldw	r2,-60(fp)
   91a94:	1080040b 	ldhu	r2,16(r2)
   91a98:	1884703a 	and	r2,r3,r2
   91a9c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   91aa0:	e0bff117 	ldw	r2,-60(fp)
   91aa4:	1080040b 	ldhu	r2,16(r2)
   91aa8:	10ffffcc 	andi	r3,r2,65535
   91aac:	e0bff60b 	ldhu	r2,-40(fp)
   91ab0:	1880541e 	bne	r3,r2,91c04 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   91ab4:	e0bff60b 	ldhu	r2,-40(fp)
   91ab8:	100b883a 	mov	r5,r2
   91abc:	e13ff117 	ldw	r4,-60(fp)
   91ac0:	0091fb40 	call	91fb4 <OS_FlagTaskRdy>
   91ac4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   91ac8:	e0bff683 	ldbu	r2,-38(fp)
   91acc:	10800058 	cmpnei	r2,r2,1
   91ad0:	10004c1e 	bne	r2,zero,91c04 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   91ad4:	00800044 	movi	r2,1
   91ad8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   91adc:	00004906 	br	91c04 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   91ae0:	e0bffc17 	ldw	r2,-16(fp)
   91ae4:	10c0020b 	ldhu	r3,8(r2)
   91ae8:	e0bff117 	ldw	r2,-60(fp)
   91aec:	1080040b 	ldhu	r2,16(r2)
   91af0:	1884703a 	and	r2,r3,r2
   91af4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   91af8:	e0bff60b 	ldhu	r2,-40(fp)
   91afc:	10004326 	beq	r2,zero,91c0c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   91b00:	e0bff60b 	ldhu	r2,-40(fp)
   91b04:	100b883a 	mov	r5,r2
   91b08:	e13ff117 	ldw	r4,-60(fp)
   91b0c:	0091fb40 	call	91fb4 <OS_FlagTaskRdy>
   91b10:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   91b14:	e0bff683 	ldbu	r2,-38(fp)
   91b18:	10800058 	cmpnei	r2,r2,1
   91b1c:	10003b1e 	bne	r2,zero,91c0c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   91b20:	00800044 	movi	r2,1
   91b24:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   91b28:	00003806 	br	91c0c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   91b2c:	e0bffc17 	ldw	r2,-16(fp)
   91b30:	1080020b 	ldhu	r2,8(r2)
   91b34:	0084303a 	nor	r2,zero,r2
   91b38:	1007883a 	mov	r3,r2
   91b3c:	e0bff117 	ldw	r2,-60(fp)
   91b40:	1080040b 	ldhu	r2,16(r2)
   91b44:	1884703a 	and	r2,r3,r2
   91b48:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   91b4c:	e0bff117 	ldw	r2,-60(fp)
   91b50:	1080040b 	ldhu	r2,16(r2)
   91b54:	10ffffcc 	andi	r3,r2,65535
   91b58:	e0bff60b 	ldhu	r2,-40(fp)
   91b5c:	18802d1e 	bne	r3,r2,91c14 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   91b60:	e0bff60b 	ldhu	r2,-40(fp)
   91b64:	100b883a 	mov	r5,r2
   91b68:	e13ff117 	ldw	r4,-60(fp)
   91b6c:	0091fb40 	call	91fb4 <OS_FlagTaskRdy>
   91b70:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   91b74:	e0bff683 	ldbu	r2,-38(fp)
   91b78:	10800058 	cmpnei	r2,r2,1
   91b7c:	1000251e 	bne	r2,zero,91c14 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   91b80:	00800044 	movi	r2,1
   91b84:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   91b88:	00002206 	br	91c14 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   91b8c:	e0bffc17 	ldw	r2,-16(fp)
   91b90:	1080020b 	ldhu	r2,8(r2)
   91b94:	0084303a 	nor	r2,zero,r2
   91b98:	1007883a 	mov	r3,r2
   91b9c:	e0bff117 	ldw	r2,-60(fp)
   91ba0:	1080040b 	ldhu	r2,16(r2)
   91ba4:	1884703a 	and	r2,r3,r2
   91ba8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   91bac:	e0bff60b 	ldhu	r2,-40(fp)
   91bb0:	10001a26 	beq	r2,zero,91c1c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   91bb4:	e0bff60b 	ldhu	r2,-40(fp)
   91bb8:	100b883a 	mov	r5,r2
   91bbc:	e13ff117 	ldw	r4,-60(fp)
   91bc0:	0091fb40 	call	91fb4 <OS_FlagTaskRdy>
   91bc4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   91bc8:	e0bff683 	ldbu	r2,-38(fp)
   91bcc:	10800058 	cmpnei	r2,r2,1
   91bd0:	1000121e 	bne	r2,zero,91c1c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   91bd4:	00800044 	movi	r2,1
   91bd8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   91bdc:	00000f06 	br	91c1c <OSFlagPost+0x300>
   91be0:	e0bff317 	ldw	r2,-52(fp)
   91be4:	e0bff515 	stw	r2,-44(fp)
   91be8:	e0bff517 	ldw	r2,-44(fp)
   91bec:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   91bf0:	e0bfff17 	ldw	r2,-4(fp)
   91bf4:	00c01bc4 	movi	r3,111
   91bf8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   91bfc:	0005883a 	mov	r2,zero
   91c00:	00002606 	br	91c9c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   91c04:	0001883a 	nop
   91c08:	00000506 	br	91c20 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   91c0c:	0001883a 	nop
   91c10:	00000306 	br	91c20 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   91c14:	0001883a 	nop
   91c18:	00000106 	br	91c20 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   91c1c:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   91c20:	e0bff117 	ldw	r2,-60(fp)
   91c24:	10800017 	ldw	r2,0(r2)
   91c28:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   91c2c:	e0bff117 	ldw	r2,-60(fp)
   91c30:	103f871e 	bne	r2,zero,91a50 <__alt_data_end+0xfffd3250>
   91c34:	e0bff317 	ldw	r2,-52(fp)
   91c38:	e0bff715 	stw	r2,-36(fp)
   91c3c:	e0bff717 	ldw	r2,-36(fp)
   91c40:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   91c44:	e0bff203 	ldbu	r2,-56(fp)
   91c48:	10800058 	cmpnei	r2,r2,1
   91c4c:	1000011e 	bne	r2,zero,91c54 <OSFlagPost+0x338>
        OS_Sched();
   91c50:	00901d40 	call	901d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91c54:	0005303a 	rdctl	r2,status
   91c58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91c5c:	e0fffa17 	ldw	r3,-24(fp)
   91c60:	00bfff84 	movi	r2,-2
   91c64:	1884703a 	and	r2,r3,r2
   91c68:	1001703a 	wrctl	status,r2
  
  return context;
   91c6c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   91c70:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   91c74:	e0bffc17 	ldw	r2,-16(fp)
   91c78:	1080020b 	ldhu	r2,8(r2)
   91c7c:	e0bff90d 	sth	r2,-28(fp)
   91c80:	e0bff317 	ldw	r2,-52(fp)
   91c84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91c88:	e0bff817 	ldw	r2,-32(fp)
   91c8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   91c90:	e0bfff17 	ldw	r2,-4(fp)
   91c94:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   91c98:	e0bff90b 	ldhu	r2,-28(fp)
}
   91c9c:	e037883a 	mov	sp,fp
   91ca0:	dfc00117 	ldw	ra,4(sp)
   91ca4:	df000017 	ldw	fp,0(sp)
   91ca8:	dec00204 	addi	sp,sp,8
   91cac:	f800283a 	ret

00091cb0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   91cb0:	defff904 	addi	sp,sp,-28
   91cb4:	df000615 	stw	fp,24(sp)
   91cb8:	df000604 	addi	fp,sp,24
   91cbc:	e13ffe15 	stw	r4,-8(fp)
   91cc0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   91cc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   91cc8:	e0bfff17 	ldw	r2,-4(fp)
   91ccc:	1000021e 	bne	r2,zero,91cd8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   91cd0:	0005883a 	mov	r2,zero
   91cd4:	00002306 	br	91d64 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   91cd8:	e0bffe17 	ldw	r2,-8(fp)
   91cdc:	1000051e 	bne	r2,zero,91cf4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   91ce0:	e0bfff17 	ldw	r2,-4(fp)
   91ce4:	00c01b84 	movi	r3,110
   91ce8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91cec:	0005883a 	mov	r2,zero
   91cf0:	00001c06 	br	91d64 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   91cf4:	e0bffe17 	ldw	r2,-8(fp)
   91cf8:	10800003 	ldbu	r2,0(r2)
   91cfc:	10803fcc 	andi	r2,r2,255
   91d00:	10800160 	cmpeqi	r2,r2,5
   91d04:	1000051e 	bne	r2,zero,91d1c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   91d08:	e0bfff17 	ldw	r2,-4(fp)
   91d0c:	00c00044 	movi	r3,1
   91d10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91d14:	0005883a 	mov	r2,zero
   91d18:	00001206 	br	91d64 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91d1c:	0005303a 	rdctl	r2,status
   91d20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91d24:	e0fffc17 	ldw	r3,-16(fp)
   91d28:	00bfff84 	movi	r2,-2
   91d2c:	1884703a 	and	r2,r3,r2
   91d30:	1001703a 	wrctl	status,r2
  
  return context;
   91d34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   91d38:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   91d3c:	e0bffe17 	ldw	r2,-8(fp)
   91d40:	1080020b 	ldhu	r2,8(r2)
   91d44:	e0bffb0d 	sth	r2,-20(fp)
   91d48:	e0bffa17 	ldw	r2,-24(fp)
   91d4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91d50:	e0bffd17 	ldw	r2,-12(fp)
   91d54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   91d58:	e0bfff17 	ldw	r2,-4(fp)
   91d5c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   91d60:	e0bffb0b 	ldhu	r2,-20(fp)
}
   91d64:	e037883a 	mov	sp,fp
   91d68:	df000017 	ldw	fp,0(sp)
   91d6c:	dec00104 	addi	sp,sp,4
   91d70:	f800283a 	ret

00091d74 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   91d74:	defff804 	addi	sp,sp,-32
   91d78:	df000715 	stw	fp,28(sp)
   91d7c:	df000704 	addi	fp,sp,28
   91d80:	e13ffb15 	stw	r4,-20(fp)
   91d84:	e17ffc15 	stw	r5,-16(fp)
   91d88:	3009883a 	mov	r4,r6
   91d8c:	3807883a 	mov	r3,r7
   91d90:	e0800117 	ldw	r2,4(fp)
   91d94:	e13ffd0d 	sth	r4,-12(fp)
   91d98:	e0fffe05 	stb	r3,-8(fp)
   91d9c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   91da0:	d0a73717 	ldw	r2,-25380(gp)
   91da4:	d0e73717 	ldw	r3,-25380(gp)
   91da8:	18c00c03 	ldbu	r3,48(r3)
   91dac:	18c00814 	ori	r3,r3,32
   91db0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   91db4:	d0a73717 	ldw	r2,-25380(gp)
   91db8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   91dbc:	d0a73717 	ldw	r2,-25380(gp)
   91dc0:	e0ffff0b 	ldhu	r3,-4(fp)
   91dc4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   91dc8:	d0a73717 	ldw	r2,-25380(gp)
   91dcc:	e0fffc17 	ldw	r3,-16(fp)
   91dd0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   91dd4:	e0bffc17 	ldw	r2,-16(fp)
   91dd8:	e0fffd0b 	ldhu	r3,-12(fp)
   91ddc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   91de0:	e0bffc17 	ldw	r2,-16(fp)
   91de4:	e0fffe03 	ldbu	r3,-8(fp)
   91de8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   91dec:	d0e73717 	ldw	r3,-25380(gp)
   91df0:	e0bffc17 	ldw	r2,-16(fp)
   91df4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   91df8:	e0bffb17 	ldw	r2,-20(fp)
   91dfc:	10c00117 	ldw	r3,4(r2)
   91e00:	e0bffc17 	ldw	r2,-16(fp)
   91e04:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   91e08:	e0bffc17 	ldw	r2,-16(fp)
   91e0c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   91e10:	e0bffc17 	ldw	r2,-16(fp)
   91e14:	e0fffb17 	ldw	r3,-20(fp)
   91e18:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   91e1c:	e0bffb17 	ldw	r2,-20(fp)
   91e20:	10800117 	ldw	r2,4(r2)
   91e24:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   91e28:	e0bff917 	ldw	r2,-28(fp)
   91e2c:	10000326 	beq	r2,zero,91e3c <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   91e30:	e0bff917 	ldw	r2,-28(fp)
   91e34:	e0fffc17 	ldw	r3,-16(fp)
   91e38:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   91e3c:	e0bffb17 	ldw	r2,-20(fp)
   91e40:	e0fffc17 	ldw	r3,-16(fp)
   91e44:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   91e48:	d0a73717 	ldw	r2,-25380(gp)
   91e4c:	10800d03 	ldbu	r2,52(r2)
   91e50:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   91e54:	e0fffa03 	ldbu	r3,-24(fp)
   91e58:	e13ffa03 	ldbu	r4,-24(fp)
   91e5c:	d0a73444 	addi	r2,gp,-25391
   91e60:	2085883a 	add	r2,r4,r2
   91e64:	10800003 	ldbu	r2,0(r2)
   91e68:	1009883a 	mov	r4,r2
   91e6c:	d0a73717 	ldw	r2,-25380(gp)
   91e70:	10800d43 	ldbu	r2,53(r2)
   91e74:	0084303a 	nor	r2,zero,r2
   91e78:	2084703a 	and	r2,r4,r2
   91e7c:	1009883a 	mov	r4,r2
   91e80:	d0a73444 	addi	r2,gp,-25391
   91e84:	1885883a 	add	r2,r3,r2
   91e88:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   91e8c:	e0fffa03 	ldbu	r3,-24(fp)
   91e90:	d0a73444 	addi	r2,gp,-25391
   91e94:	1885883a 	add	r2,r3,r2
   91e98:	10800003 	ldbu	r2,0(r2)
   91e9c:	10803fcc 	andi	r2,r2,255
   91ea0:	1000071e 	bne	r2,zero,91ec0 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   91ea4:	d0a73717 	ldw	r2,-25380(gp)
   91ea8:	10800d83 	ldbu	r2,54(r2)
   91eac:	0084303a 	nor	r2,zero,r2
   91eb0:	1007883a 	mov	r3,r2
   91eb4:	d0a73403 	ldbu	r2,-25392(gp)
   91eb8:	1884703a 	and	r2,r3,r2
   91ebc:	d0a73405 	stb	r2,-25392(gp)
    }
}
   91ec0:	0001883a 	nop
   91ec4:	e037883a 	mov	sp,fp
   91ec8:	df000017 	ldw	fp,0(sp)
   91ecc:	dec00104 	addi	sp,sp,4
   91ed0:	f800283a 	ret

00091ed4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   91ed4:	defffb04 	addi	sp,sp,-20
   91ed8:	dfc00415 	stw	ra,16(sp)
   91edc:	df000315 	stw	fp,12(sp)
   91ee0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   91ee4:	0140dc04 	movi	r5,880
   91ee8:	010002b4 	movhi	r4,10
   91eec:	213fc304 	addi	r4,r4,-244
   91ef0:	00901180 	call	90118 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   91ef4:	008002b4 	movhi	r2,10
   91ef8:	10bfc304 	addi	r2,r2,-244
   91efc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   91f00:	008002b4 	movhi	r2,10
   91f04:	10bfce04 	addi	r2,r2,-200
   91f08:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   91f0c:	e03ffd0d 	sth	zero,-12(fp)
   91f10:	00001306 	br	91f60 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   91f14:	e0bffe17 	ldw	r2,-8(fp)
   91f18:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   91f1c:	e0bffe17 	ldw	r2,-8(fp)
   91f20:	e0ffff17 	ldw	r3,-4(fp)
   91f24:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   91f28:	e0bffe17 	ldw	r2,-8(fp)
   91f2c:	00c00fc4 	movi	r3,63
   91f30:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   91f34:	e0bffe17 	ldw	r2,-8(fp)
   91f38:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   91f3c:	e0bffe17 	ldw	r2,-8(fp)
   91f40:	10800b04 	addi	r2,r2,44
   91f44:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   91f48:	e0bfff17 	ldw	r2,-4(fp)
   91f4c:	10800b04 	addi	r2,r2,44
   91f50:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   91f54:	e0bffd0b 	ldhu	r2,-12(fp)
   91f58:	10800044 	addi	r2,r2,1
   91f5c:	e0bffd0d 	sth	r2,-12(fp)
   91f60:	e0bffd0b 	ldhu	r2,-12(fp)
   91f64:	108004f0 	cmpltui	r2,r2,19
   91f68:	103fea1e 	bne	r2,zero,91f14 <__alt_data_end+0xfffd3714>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   91f6c:	e0bffe17 	ldw	r2,-8(fp)
   91f70:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   91f74:	e0bffe17 	ldw	r2,-8(fp)
   91f78:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   91f7c:	e0bffe17 	ldw	r2,-8(fp)
   91f80:	00c00fc4 	movi	r3,63
   91f84:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   91f88:	e0bffe17 	ldw	r2,-8(fp)
   91f8c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   91f90:	008002b4 	movhi	r2,10
   91f94:	10bfc304 	addi	r2,r2,-244
   91f98:	d0a73915 	stw	r2,-25372(gp)
#endif
}
   91f9c:	0001883a 	nop
   91fa0:	e037883a 	mov	sp,fp
   91fa4:	dfc00117 	ldw	ra,4(sp)
   91fa8:	df000017 	ldw	fp,0(sp)
   91fac:	dec00204 	addi	sp,sp,8
   91fb0:	f800283a 	ret

00091fb4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   91fb4:	defffa04 	addi	sp,sp,-24
   91fb8:	dfc00515 	stw	ra,20(sp)
   91fbc:	df000415 	stw	fp,16(sp)
   91fc0:	df000404 	addi	fp,sp,16
   91fc4:	e13ffe15 	stw	r4,-8(fp)
   91fc8:	2805883a 	mov	r2,r5
   91fcc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   91fd0:	e0bffe17 	ldw	r2,-8(fp)
   91fd4:	10800217 	ldw	r2,8(r2)
   91fd8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   91fdc:	e0bffd17 	ldw	r2,-12(fp)
   91fe0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   91fe4:	e0bffd17 	ldw	r2,-12(fp)
   91fe8:	e0ffff0b 	ldhu	r3,-4(fp)
   91fec:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   91ff0:	e0bffd17 	ldw	r2,-12(fp)
   91ff4:	10c00c03 	ldbu	r3,48(r2)
   91ff8:	00bff7c4 	movi	r2,-33
   91ffc:	1884703a 	and	r2,r3,r2
   92000:	1007883a 	mov	r3,r2
   92004:	e0bffd17 	ldw	r2,-12(fp)
   92008:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   9200c:	e0bffd17 	ldw	r2,-12(fp)
   92010:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   92014:	e0bffd17 	ldw	r2,-12(fp)
   92018:	10800c03 	ldbu	r2,48(r2)
   9201c:	10803fcc 	andi	r2,r2,255
   92020:	1000181e 	bne	r2,zero,92084 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   92024:	e0bffd17 	ldw	r2,-12(fp)
   92028:	10c00d83 	ldbu	r3,54(r2)
   9202c:	d0a73403 	ldbu	r2,-25392(gp)
   92030:	1884b03a 	or	r2,r3,r2
   92034:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   92038:	e0bffd17 	ldw	r2,-12(fp)
   9203c:	10800d03 	ldbu	r2,52(r2)
   92040:	10c03fcc 	andi	r3,r2,255
   92044:	e0bffd17 	ldw	r2,-12(fp)
   92048:	10800d03 	ldbu	r2,52(r2)
   9204c:	11003fcc 	andi	r4,r2,255
   92050:	d0a73444 	addi	r2,gp,-25391
   92054:	2085883a 	add	r2,r4,r2
   92058:	11000003 	ldbu	r4,0(r2)
   9205c:	e0bffd17 	ldw	r2,-12(fp)
   92060:	10800d43 	ldbu	r2,53(r2)
   92064:	2084b03a 	or	r2,r4,r2
   92068:	1009883a 	mov	r4,r2
   9206c:	d0a73444 	addi	r2,gp,-25391
   92070:	1885883a 	add	r2,r3,r2
   92074:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   92078:	00800044 	movi	r2,1
   9207c:	e0bffc05 	stb	r2,-16(fp)
   92080:	00000106 	br	92088 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   92084:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   92088:	e13ffe17 	ldw	r4,-8(fp)
   9208c:	00920a80 	call	920a8 <OS_FlagUnlink>
    return (sched);
   92090:	e0bffc03 	ldbu	r2,-16(fp)
}
   92094:	e037883a 	mov	sp,fp
   92098:	dfc00117 	ldw	ra,4(sp)
   9209c:	df000017 	ldw	fp,0(sp)
   920a0:	dec00204 	addi	sp,sp,8
   920a4:	f800283a 	ret

000920a8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   920a8:	defffa04 	addi	sp,sp,-24
   920ac:	df000515 	stw	fp,20(sp)
   920b0:	df000504 	addi	fp,sp,20
   920b4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   920b8:	e0bfff17 	ldw	r2,-4(fp)
   920bc:	10800117 	ldw	r2,4(r2)
   920c0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   920c4:	e0bfff17 	ldw	r2,-4(fp)
   920c8:	10800017 	ldw	r2,0(r2)
   920cc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   920d0:	e0bffb17 	ldw	r2,-20(fp)
   920d4:	10000b1e 	bne	r2,zero,92104 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   920d8:	e0bfff17 	ldw	r2,-4(fp)
   920dc:	10800317 	ldw	r2,12(r2)
   920e0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   920e4:	e0bffd17 	ldw	r2,-12(fp)
   920e8:	e0fffc17 	ldw	r3,-16(fp)
   920ec:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   920f0:	e0bffc17 	ldw	r2,-16(fp)
   920f4:	10000b26 	beq	r2,zero,92124 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   920f8:	e0bffc17 	ldw	r2,-16(fp)
   920fc:	10000115 	stw	zero,4(r2)
   92100:	00000806 	br	92124 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   92104:	e0bffb17 	ldw	r2,-20(fp)
   92108:	e0fffc17 	ldw	r3,-16(fp)
   9210c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   92110:	e0bffc17 	ldw	r2,-16(fp)
   92114:	10000326 	beq	r2,zero,92124 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   92118:	e0bffc17 	ldw	r2,-16(fp)
   9211c:	e0fffb17 	ldw	r3,-20(fp)
   92120:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   92124:	e0bfff17 	ldw	r2,-4(fp)
   92128:	10800217 	ldw	r2,8(r2)
   9212c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   92130:	e0bffe17 	ldw	r2,-8(fp)
   92134:	10000a15 	stw	zero,40(r2)
#endif
}
   92138:	0001883a 	nop
   9213c:	e037883a 	mov	sp,fp
   92140:	df000017 	ldw	fp,0(sp)
   92144:	dec00104 	addi	sp,sp,4
   92148:	f800283a 	ret

0009214c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   9214c:	defff404 	addi	sp,sp,-48
   92150:	df000b15 	stw	fp,44(sp)
   92154:	df000b04 	addi	fp,sp,44
   92158:	e13ffc15 	stw	r4,-16(fp)
   9215c:	e17ffd15 	stw	r5,-12(fp)
   92160:	e1bffe15 	stw	r6,-8(fp)
   92164:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92168:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   9216c:	e0bfff17 	ldw	r2,-4(fp)
   92170:	1000021e 	bne	r2,zero,9217c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   92174:	0005883a 	mov	r2,zero
   92178:	00006506 	br	92310 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   9217c:	e0bffc17 	ldw	r2,-16(fp)
   92180:	1000051e 	bne	r2,zero,92198 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   92184:	e0bfff17 	ldw	r2,-4(fp)
   92188:	00c01884 	movi	r3,98
   9218c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   92190:	0005883a 	mov	r2,zero
   92194:	00005e06 	br	92310 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   92198:	e0bffc17 	ldw	r2,-16(fp)
   9219c:	108000cc 	andi	r2,r2,3
   921a0:	10000526 	beq	r2,zero,921b8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   921a4:	e0bfff17 	ldw	r2,-4(fp)
   921a8:	00c01884 	movi	r3,98
   921ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   921b0:	0005883a 	mov	r2,zero
   921b4:	00005606 	br	92310 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   921b8:	e0bffd17 	ldw	r2,-12(fp)
   921bc:	108000a8 	cmpgeui	r2,r2,2
   921c0:	1000051e 	bne	r2,zero,921d8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   921c4:	e0bfff17 	ldw	r2,-4(fp)
   921c8:	00c016c4 	movi	r3,91
   921cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   921d0:	0005883a 	mov	r2,zero
   921d4:	00004e06 	br	92310 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   921d8:	e0bffe17 	ldw	r2,-8(fp)
   921dc:	10800128 	cmpgeui	r2,r2,4
   921e0:	1000051e 	bne	r2,zero,921f8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   921e4:	e0bfff17 	ldw	r2,-4(fp)
   921e8:	00c01704 	movi	r3,92
   921ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   921f0:	0005883a 	mov	r2,zero
   921f4:	00004606 	br	92310 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   921f8:	0005303a 	rdctl	r2,status
   921fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92200:	e0fffb17 	ldw	r3,-20(fp)
   92204:	00bfff84 	movi	r2,-2
   92208:	1884703a 	and	r2,r3,r2
   9220c:	1001703a 	wrctl	status,r2
  
  return context;
   92210:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92214:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   92218:	d0a73117 	ldw	r2,-25404(gp)
   9221c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   92220:	d0a73117 	ldw	r2,-25404(gp)
   92224:	10000326 	beq	r2,zero,92234 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   92228:	d0a73117 	ldw	r2,-25404(gp)
   9222c:	10800117 	ldw	r2,4(r2)
   92230:	d0a73115 	stw	r2,-25404(gp)
   92234:	e0bff817 	ldw	r2,-32(fp)
   92238:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9223c:	e0bff917 	ldw	r2,-28(fp)
   92240:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   92244:	e0bffa17 	ldw	r2,-24(fp)
   92248:	1000051e 	bne	r2,zero,92260 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   9224c:	e0bfff17 	ldw	r2,-4(fp)
   92250:	00c01684 	movi	r3,90
   92254:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   92258:	0005883a 	mov	r2,zero
   9225c:	00002c06 	br	92310 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   92260:	e0bffc17 	ldw	r2,-16(fp)
   92264:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   92268:	e0fffc17 	ldw	r3,-16(fp)
   9226c:	e0bffe17 	ldw	r2,-8(fp)
   92270:	1885883a 	add	r2,r3,r2
   92274:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   92278:	e03ff715 	stw	zero,-36(fp)
   9227c:	00000c06 	br	922b0 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   92280:	e0bff617 	ldw	r2,-40(fp)
   92284:	e0fff517 	ldw	r3,-44(fp)
   92288:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   9228c:	e0bff517 	ldw	r2,-44(fp)
   92290:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   92294:	e0fff517 	ldw	r3,-44(fp)
   92298:	e0bffe17 	ldw	r2,-8(fp)
   9229c:	1885883a 	add	r2,r3,r2
   922a0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   922a4:	e0bff717 	ldw	r2,-36(fp)
   922a8:	10800044 	addi	r2,r2,1
   922ac:	e0bff715 	stw	r2,-36(fp)
   922b0:	e0bffd17 	ldw	r2,-12(fp)
   922b4:	10bfffc4 	addi	r2,r2,-1
   922b8:	e0fff717 	ldw	r3,-36(fp)
   922bc:	18bff036 	bltu	r3,r2,92280 <__alt_data_end+0xfffd3a80>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   922c0:	e0bff617 	ldw	r2,-40(fp)
   922c4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   922c8:	e0bffa17 	ldw	r2,-24(fp)
   922cc:	e0fffc17 	ldw	r3,-16(fp)
   922d0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   922d4:	e0bffa17 	ldw	r2,-24(fp)
   922d8:	e0fffc17 	ldw	r3,-16(fp)
   922dc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   922e0:	e0bffa17 	ldw	r2,-24(fp)
   922e4:	e0fffd17 	ldw	r3,-12(fp)
   922e8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   922ec:	e0bffa17 	ldw	r2,-24(fp)
   922f0:	e0fffd17 	ldw	r3,-12(fp)
   922f4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   922f8:	e0bffa17 	ldw	r2,-24(fp)
   922fc:	e0fffe17 	ldw	r3,-8(fp)
   92300:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   92304:	e0bfff17 	ldw	r2,-4(fp)
   92308:	10000005 	stb	zero,0(r2)
    return (pmem);
   9230c:	e0bffa17 	ldw	r2,-24(fp)
}
   92310:	e037883a 	mov	sp,fp
   92314:	df000017 	ldw	fp,0(sp)
   92318:	dec00104 	addi	sp,sp,4
   9231c:	f800283a 	ret

00092320 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   92320:	defff804 	addi	sp,sp,-32
   92324:	df000715 	stw	fp,28(sp)
   92328:	df000704 	addi	fp,sp,28
   9232c:	e13ffe15 	stw	r4,-8(fp)
   92330:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92334:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   92338:	e0bfff17 	ldw	r2,-4(fp)
   9233c:	1000021e 	bne	r2,zero,92348 <OSMemGet+0x28>
        return ((void *)0);
   92340:	0005883a 	mov	r2,zero
   92344:	00002e06 	br	92400 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   92348:	e0bffe17 	ldw	r2,-8(fp)
   9234c:	1000051e 	bne	r2,zero,92364 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   92350:	e0bfff17 	ldw	r2,-4(fp)
   92354:	00c01804 	movi	r3,96
   92358:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   9235c:	0005883a 	mov	r2,zero
   92360:	00002706 	br	92400 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92364:	0005303a 	rdctl	r2,status
   92368:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9236c:	e0fffd17 	ldw	r3,-12(fp)
   92370:	00bfff84 	movi	r2,-2
   92374:	1884703a 	and	r2,r3,r2
   92378:	1001703a 	wrctl	status,r2
  
  return context;
   9237c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92380:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   92384:	e0bffe17 	ldw	r2,-8(fp)
   92388:	10800417 	ldw	r2,16(r2)
   9238c:	10001426 	beq	r2,zero,923e0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   92390:	e0bffe17 	ldw	r2,-8(fp)
   92394:	10800117 	ldw	r2,4(r2)
   92398:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   9239c:	e0bffb17 	ldw	r2,-20(fp)
   923a0:	10c00017 	ldw	r3,0(r2)
   923a4:	e0bffe17 	ldw	r2,-8(fp)
   923a8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   923ac:	e0bffe17 	ldw	r2,-8(fp)
   923b0:	10800417 	ldw	r2,16(r2)
   923b4:	10ffffc4 	addi	r3,r2,-1
   923b8:	e0bffe17 	ldw	r2,-8(fp)
   923bc:	10c00415 	stw	r3,16(r2)
   923c0:	e0bff917 	ldw	r2,-28(fp)
   923c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   923c8:	e0bffa17 	ldw	r2,-24(fp)
   923cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   923d0:	e0bfff17 	ldw	r2,-4(fp)
   923d4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   923d8:	e0bffb17 	ldw	r2,-20(fp)
   923dc:	00000806 	br	92400 <OSMemGet+0xe0>
   923e0:	e0bff917 	ldw	r2,-28(fp)
   923e4:	e0bffc15 	stw	r2,-16(fp)
   923e8:	e0bffc17 	ldw	r2,-16(fp)
   923ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   923f0:	e0bfff17 	ldw	r2,-4(fp)
   923f4:	00c01744 	movi	r3,93
   923f8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   923fc:	0005883a 	mov	r2,zero
}
   92400:	e037883a 	mov	sp,fp
   92404:	df000017 	ldw	fp,0(sp)
   92408:	dec00104 	addi	sp,sp,4
   9240c:	f800283a 	ret

00092410 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   92410:	defff704 	addi	sp,sp,-36
   92414:	dfc00815 	stw	ra,32(sp)
   92418:	df000715 	stw	fp,28(sp)
   9241c:	df000704 	addi	fp,sp,28
   92420:	e13ffd15 	stw	r4,-12(fp)
   92424:	e17ffe15 	stw	r5,-8(fp)
   92428:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9242c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   92430:	e0bfff17 	ldw	r2,-4(fp)
   92434:	1000021e 	bne	r2,zero,92440 <OSMemNameGet+0x30>
        return (0);
   92438:	0005883a 	mov	r2,zero
   9243c:	00002b06 	br	924ec <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   92440:	e0bffd17 	ldw	r2,-12(fp)
   92444:	1000051e 	bne	r2,zero,9245c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   92448:	e0bfff17 	ldw	r2,-4(fp)
   9244c:	00c01804 	movi	r3,96
   92450:	10c00005 	stb	r3,0(r2)
        return (0);
   92454:	0005883a 	mov	r2,zero
   92458:	00002406 	br	924ec <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   9245c:	e0bffe17 	ldw	r2,-8(fp)
   92460:	1000051e 	bne	r2,zero,92478 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   92464:	e0bfff17 	ldw	r2,-4(fp)
   92468:	00c00304 	movi	r3,12
   9246c:	10c00005 	stb	r3,0(r2)
        return (0);
   92470:	0005883a 	mov	r2,zero
   92474:	00001d06 	br	924ec <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   92478:	d0a73603 	ldbu	r2,-25384(gp)
   9247c:	10803fcc 	andi	r2,r2,255
   92480:	10000526 	beq	r2,zero,92498 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   92484:	e0bfff17 	ldw	r2,-4(fp)
   92488:	00c00444 	movi	r3,17
   9248c:	10c00005 	stb	r3,0(r2)
        return (0);
   92490:	0005883a 	mov	r2,zero
   92494:	00001506 	br	924ec <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92498:	0005303a 	rdctl	r2,status
   9249c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   924a0:	e0fffb17 	ldw	r3,-20(fp)
   924a4:	00bfff84 	movi	r2,-2
   924a8:	1884703a 	and	r2,r3,r2
   924ac:	1001703a 	wrctl	status,r2
  
  return context;
   924b0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   924b4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   924b8:	e0bffd17 	ldw	r2,-12(fp)
   924bc:	10800504 	addi	r2,r2,20
   924c0:	100b883a 	mov	r5,r2
   924c4:	e13ffe17 	ldw	r4,-8(fp)
   924c8:	00903180 	call	90318 <OS_StrCopy>
   924cc:	e0bffa05 	stb	r2,-24(fp)
   924d0:	e0bff917 	ldw	r2,-28(fp)
   924d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   924d8:	e0bffc17 	ldw	r2,-16(fp)
   924dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   924e0:	e0bfff17 	ldw	r2,-4(fp)
   924e4:	10000005 	stb	zero,0(r2)
    return (len);
   924e8:	e0bffa03 	ldbu	r2,-24(fp)
}
   924ec:	e037883a 	mov	sp,fp
   924f0:	dfc00117 	ldw	ra,4(sp)
   924f4:	df000017 	ldw	fp,0(sp)
   924f8:	dec00204 	addi	sp,sp,8
   924fc:	f800283a 	ret

00092500 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   92500:	defff604 	addi	sp,sp,-40
   92504:	dfc00915 	stw	ra,36(sp)
   92508:	df000815 	stw	fp,32(sp)
   9250c:	df000804 	addi	fp,sp,32
   92510:	e13ffd15 	stw	r4,-12(fp)
   92514:	e17ffe15 	stw	r5,-8(fp)
   92518:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9251c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   92520:	e0bfff17 	ldw	r2,-4(fp)
   92524:	10003526 	beq	r2,zero,925fc <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   92528:	e0bffd17 	ldw	r2,-12(fp)
   9252c:	1000041e 	bne	r2,zero,92540 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   92530:	e0bfff17 	ldw	r2,-4(fp)
   92534:	00c01804 	movi	r3,96
   92538:	10c00005 	stb	r3,0(r2)
        return;
   9253c:	00003006 	br	92600 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   92540:	e0bffe17 	ldw	r2,-8(fp)
   92544:	1000041e 	bne	r2,zero,92558 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   92548:	e0bfff17 	ldw	r2,-4(fp)
   9254c:	00c00304 	movi	r3,12
   92550:	10c00005 	stb	r3,0(r2)
        return;
   92554:	00002a06 	br	92600 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   92558:	d0a73603 	ldbu	r2,-25384(gp)
   9255c:	10803fcc 	andi	r2,r2,255
   92560:	10000426 	beq	r2,zero,92574 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   92564:	e0bfff17 	ldw	r2,-4(fp)
   92568:	00c00484 	movi	r3,18
   9256c:	10c00005 	stb	r3,0(r2)
        return;
   92570:	00002306 	br	92600 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92574:	0005303a 	rdctl	r2,status
   92578:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9257c:	e0fffc17 	ldw	r3,-16(fp)
   92580:	00bfff84 	movi	r2,-2
   92584:	1884703a 	and	r2,r3,r2
   92588:	1001703a 	wrctl	status,r2
  
  return context;
   9258c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   92590:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   92594:	e13ffe17 	ldw	r4,-8(fp)
   92598:	009038c0 	call	9038c <OS_StrLen>
   9259c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   925a0:	e0bffa03 	ldbu	r2,-24(fp)
   925a4:	10800830 	cmpltui	r2,r2,32
   925a8:	1000081e 	bne	r2,zero,925cc <OSMemNameSet+0xcc>
   925ac:	e0bff817 	ldw	r2,-32(fp)
   925b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   925b4:	e0bff917 	ldw	r2,-28(fp)
   925b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   925bc:	e0bfff17 	ldw	r2,-4(fp)
   925c0:	00c018c4 	movi	r3,99
   925c4:	10c00005 	stb	r3,0(r2)
        return;
   925c8:	00000d06 	br	92600 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   925cc:	e0bffd17 	ldw	r2,-12(fp)
   925d0:	10800504 	addi	r2,r2,20
   925d4:	e17ffe17 	ldw	r5,-8(fp)
   925d8:	1009883a 	mov	r4,r2
   925dc:	00903180 	call	90318 <OS_StrCopy>
   925e0:	e0bff817 	ldw	r2,-32(fp)
   925e4:	e0bffb15 	stw	r2,-20(fp)
   925e8:	e0bffb17 	ldw	r2,-20(fp)
   925ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   925f0:	e0bfff17 	ldw	r2,-4(fp)
   925f4:	10000005 	stb	zero,0(r2)
   925f8:	00000106 	br	92600 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   925fc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   92600:	e037883a 	mov	sp,fp
   92604:	dfc00117 	ldw	ra,4(sp)
   92608:	df000017 	ldw	fp,0(sp)
   9260c:	dec00204 	addi	sp,sp,8
   92610:	f800283a 	ret

00092614 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   92614:	defff904 	addi	sp,sp,-28
   92618:	df000615 	stw	fp,24(sp)
   9261c:	df000604 	addi	fp,sp,24
   92620:	e13ffe15 	stw	r4,-8(fp)
   92624:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92628:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   9262c:	e0bffe17 	ldw	r2,-8(fp)
   92630:	1000021e 	bne	r2,zero,9263c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   92634:	00801804 	movi	r2,96
   92638:	00002806 	br	926dc <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   9263c:	e0bfff17 	ldw	r2,-4(fp)
   92640:	1000021e 	bne	r2,zero,9264c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   92644:	008017c4 	movi	r2,95
   92648:	00002406 	br	926dc <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9264c:	0005303a 	rdctl	r2,status
   92650:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92654:	e0fffd17 	ldw	r3,-12(fp)
   92658:	00bfff84 	movi	r2,-2
   9265c:	1884703a 	and	r2,r3,r2
   92660:	1001703a 	wrctl	status,r2
  
  return context;
   92664:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92668:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   9266c:	e0bffe17 	ldw	r2,-8(fp)
   92670:	10c00417 	ldw	r3,16(r2)
   92674:	e0bffe17 	ldw	r2,-8(fp)
   92678:	10800317 	ldw	r2,12(r2)
   9267c:	18800636 	bltu	r3,r2,92698 <OSMemPut+0x84>
   92680:	e0bffa17 	ldw	r2,-24(fp)
   92684:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92688:	e0bffb17 	ldw	r2,-20(fp)
   9268c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   92690:	00801784 	movi	r2,94
   92694:	00001106 	br	926dc <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   92698:	e0bffe17 	ldw	r2,-8(fp)
   9269c:	10c00117 	ldw	r3,4(r2)
   926a0:	e0bfff17 	ldw	r2,-4(fp)
   926a4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   926a8:	e0bffe17 	ldw	r2,-8(fp)
   926ac:	e0ffff17 	ldw	r3,-4(fp)
   926b0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   926b4:	e0bffe17 	ldw	r2,-8(fp)
   926b8:	10800417 	ldw	r2,16(r2)
   926bc:	10c00044 	addi	r3,r2,1
   926c0:	e0bffe17 	ldw	r2,-8(fp)
   926c4:	10c00415 	stw	r3,16(r2)
   926c8:	e0bffa17 	ldw	r2,-24(fp)
   926cc:	e0bffc15 	stw	r2,-16(fp)
   926d0:	e0bffc17 	ldw	r2,-16(fp)
   926d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   926d8:	0005883a 	mov	r2,zero
}
   926dc:	e037883a 	mov	sp,fp
   926e0:	df000017 	ldw	fp,0(sp)
   926e4:	dec00104 	addi	sp,sp,4
   926e8:	f800283a 	ret

000926ec <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   926ec:	defffa04 	addi	sp,sp,-24
   926f0:	df000515 	stw	fp,20(sp)
   926f4:	df000504 	addi	fp,sp,20
   926f8:	e13ffe15 	stw	r4,-8(fp)
   926fc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92700:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   92704:	e0bffe17 	ldw	r2,-8(fp)
   92708:	1000021e 	bne	r2,zero,92714 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   9270c:	00801804 	movi	r2,96
   92710:	00002c06 	br	927c4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   92714:	e0bfff17 	ldw	r2,-4(fp)
   92718:	1000021e 	bne	r2,zero,92724 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   9271c:	00801844 	movi	r2,97
   92720:	00002806 	br	927c4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92724:	0005303a 	rdctl	r2,status
   92728:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9272c:	e0fffc17 	ldw	r3,-16(fp)
   92730:	00bfff84 	movi	r2,-2
   92734:	1884703a 	and	r2,r3,r2
   92738:	1001703a 	wrctl	status,r2
  
  return context;
   9273c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92740:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   92744:	e0bffe17 	ldw	r2,-8(fp)
   92748:	10c00017 	ldw	r3,0(r2)
   9274c:	e0bfff17 	ldw	r2,-4(fp)
   92750:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   92754:	e0bffe17 	ldw	r2,-8(fp)
   92758:	10c00117 	ldw	r3,4(r2)
   9275c:	e0bfff17 	ldw	r2,-4(fp)
   92760:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   92764:	e0bffe17 	ldw	r2,-8(fp)
   92768:	10c00217 	ldw	r3,8(r2)
   9276c:	e0bfff17 	ldw	r2,-4(fp)
   92770:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   92774:	e0bffe17 	ldw	r2,-8(fp)
   92778:	10c00317 	ldw	r3,12(r2)
   9277c:	e0bfff17 	ldw	r2,-4(fp)
   92780:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   92784:	e0bffe17 	ldw	r2,-8(fp)
   92788:	10c00417 	ldw	r3,16(r2)
   9278c:	e0bfff17 	ldw	r2,-4(fp)
   92790:	10c00415 	stw	r3,16(r2)
   92794:	e0bffb17 	ldw	r2,-20(fp)
   92798:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9279c:	e0bffd17 	ldw	r2,-12(fp)
   927a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   927a4:	e0bfff17 	ldw	r2,-4(fp)
   927a8:	10c00317 	ldw	r3,12(r2)
   927ac:	e0bfff17 	ldw	r2,-4(fp)
   927b0:	10800417 	ldw	r2,16(r2)
   927b4:	1887c83a 	sub	r3,r3,r2
   927b8:	e0bfff17 	ldw	r2,-4(fp)
   927bc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   927c0:	0005883a 	mov	r2,zero
}
   927c4:	e037883a 	mov	sp,fp
   927c8:	df000017 	ldw	fp,0(sp)
   927cc:	dec00104 	addi	sp,sp,4
   927d0:	f800283a 	ret

000927d4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   927d4:	defffc04 	addi	sp,sp,-16
   927d8:	dfc00315 	stw	ra,12(sp)
   927dc:	df000215 	stw	fp,8(sp)
   927e0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   927e4:	01430c04 	movi	r5,3120
   927e8:	010002b4 	movhi	r4,10
   927ec:	21009f04 	addi	r4,r4,636
   927f0:	00901180 	call	90118 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   927f4:	008002b4 	movhi	r2,10
   927f8:	10809f04 	addi	r2,r2,636
   927fc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   92800:	e03fff0d 	sth	zero,-4(fp)
   92804:	00001606 	br	92860 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   92808:	e0bfff0b 	ldhu	r2,-4(fp)
   9280c:	10800044 	addi	r2,r2,1
   92810:	01400d04 	movi	r5,52
   92814:	1009883a 	mov	r4,r2
   92818:	008b08c0 	call	8b08c <__mulsi3>
   9281c:	1007883a 	mov	r3,r2
   92820:	008002b4 	movhi	r2,10
   92824:	10809f04 	addi	r2,r2,636
   92828:	1887883a 	add	r3,r3,r2
   9282c:	e0bffe17 	ldw	r2,-8(fp)
   92830:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   92834:	e0bffe17 	ldw	r2,-8(fp)
   92838:	00c00fc4 	movi	r3,63
   9283c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   92840:	e0bffe17 	ldw	r2,-8(fp)
   92844:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   92848:	e0bffe17 	ldw	r2,-8(fp)
   9284c:	10800d04 	addi	r2,r2,52
   92850:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   92854:	e0bfff0b 	ldhu	r2,-4(fp)
   92858:	10800044 	addi	r2,r2,1
   9285c:	e0bfff0d 	sth	r2,-4(fp)
   92860:	e0bfff0b 	ldhu	r2,-4(fp)
   92864:	10800ef0 	cmpltui	r2,r2,59
   92868:	103fe71e 	bne	r2,zero,92808 <__alt_data_end+0xfffd4008>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   9286c:	e0bffe17 	ldw	r2,-8(fp)
   92870:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   92874:	e0bffe17 	ldw	r2,-8(fp)
   92878:	00c00fc4 	movi	r3,63
   9287c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   92880:	e0bffe17 	ldw	r2,-8(fp)
   92884:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   92888:	008002b4 	movhi	r2,10
   9288c:	10809f04 	addi	r2,r2,636
   92890:	d0a73115 	stw	r2,-25404(gp)
#endif
}
   92894:	0001883a 	nop
   92898:	e037883a 	mov	sp,fp
   9289c:	dfc00117 	ldw	ra,4(sp)
   928a0:	df000017 	ldw	fp,0(sp)
   928a4:	dec00204 	addi	sp,sp,8
   928a8:	f800283a 	ret

000928ac <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   928ac:	defff804 	addi	sp,sp,-32
   928b0:	df000715 	stw	fp,28(sp)
   928b4:	df000704 	addi	fp,sp,28
   928b8:	e13ffe15 	stw	r4,-8(fp)
   928bc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   928c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   928c4:	e0bfff17 	ldw	r2,-4(fp)
   928c8:	1000021e 	bne	r2,zero,928d4 <OSQAccept+0x28>
        return ((void *)0);
   928cc:	0005883a 	mov	r2,zero
   928d0:	00004206 	br	929dc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   928d4:	e0bffe17 	ldw	r2,-8(fp)
   928d8:	1000051e 	bne	r2,zero,928f0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   928dc:	e0bfff17 	ldw	r2,-4(fp)
   928e0:	00c00104 	movi	r3,4
   928e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   928e8:	0005883a 	mov	r2,zero
   928ec:	00003b06 	br	929dc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   928f0:	e0bffe17 	ldw	r2,-8(fp)
   928f4:	10800003 	ldbu	r2,0(r2)
   928f8:	10803fcc 	andi	r2,r2,255
   928fc:	108000a0 	cmpeqi	r2,r2,2
   92900:	1000051e 	bne	r2,zero,92918 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   92904:	e0bfff17 	ldw	r2,-4(fp)
   92908:	00c00044 	movi	r3,1
   9290c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   92910:	0005883a 	mov	r2,zero
   92914:	00003106 	br	929dc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92918:	0005303a 	rdctl	r2,status
   9291c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92920:	e0fffd17 	ldw	r3,-12(fp)
   92924:	00bfff84 	movi	r2,-2
   92928:	1884703a 	and	r2,r3,r2
   9292c:	1001703a 	wrctl	status,r2
  
  return context;
   92930:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   92934:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   92938:	e0bffe17 	ldw	r2,-8(fp)
   9293c:	10800117 	ldw	r2,4(r2)
   92940:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   92944:	e0bffc17 	ldw	r2,-16(fp)
   92948:	1080058b 	ldhu	r2,22(r2)
   9294c:	10bfffcc 	andi	r2,r2,65535
   92950:	10001926 	beq	r2,zero,929b8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   92954:	e0bffc17 	ldw	r2,-16(fp)
   92958:	10800417 	ldw	r2,16(r2)
   9295c:	11000104 	addi	r4,r2,4
   92960:	e0fffc17 	ldw	r3,-16(fp)
   92964:	19000415 	stw	r4,16(r3)
   92968:	10800017 	ldw	r2,0(r2)
   9296c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   92970:	e0bffc17 	ldw	r2,-16(fp)
   92974:	1080058b 	ldhu	r2,22(r2)
   92978:	10bfffc4 	addi	r2,r2,-1
   9297c:	1007883a 	mov	r3,r2
   92980:	e0bffc17 	ldw	r2,-16(fp)
   92984:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   92988:	e0bffc17 	ldw	r2,-16(fp)
   9298c:	10c00417 	ldw	r3,16(r2)
   92990:	e0bffc17 	ldw	r2,-16(fp)
   92994:	10800217 	ldw	r2,8(r2)
   92998:	1880041e 	bne	r3,r2,929ac <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   9299c:	e0bffc17 	ldw	r2,-16(fp)
   929a0:	10c00117 	ldw	r3,4(r2)
   929a4:	e0bffc17 	ldw	r2,-16(fp)
   929a8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   929ac:	e0bfff17 	ldw	r2,-4(fp)
   929b0:	10000005 	stb	zero,0(r2)
   929b4:	00000406 	br	929c8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   929b8:	e0bfff17 	ldw	r2,-4(fp)
   929bc:	00c007c4 	movi	r3,31
   929c0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   929c4:	e03ff915 	stw	zero,-28(fp)
   929c8:	e0bffa17 	ldw	r2,-24(fp)
   929cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   929d0:	e0bffb17 	ldw	r2,-20(fp)
   929d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   929d8:	e0bff917 	ldw	r2,-28(fp)
}
   929dc:	e037883a 	mov	sp,fp
   929e0:	df000017 	ldw	fp,0(sp)
   929e4:	dec00104 	addi	sp,sp,4
   929e8:	f800283a 	ret

000929ec <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   929ec:	defff404 	addi	sp,sp,-48
   929f0:	dfc00b15 	stw	ra,44(sp)
   929f4:	df000a15 	stw	fp,40(sp)
   929f8:	df000a04 	addi	fp,sp,40
   929fc:	e13ffe15 	stw	r4,-8(fp)
   92a00:	2805883a 	mov	r2,r5
   92a04:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92a08:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   92a0c:	d0a73603 	ldbu	r2,-25384(gp)
   92a10:	10803fcc 	andi	r2,r2,255
   92a14:	10000226 	beq	r2,zero,92a20 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   92a18:	0005883a 	mov	r2,zero
   92a1c:	00005906 	br	92b84 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92a20:	0005303a 	rdctl	r2,status
   92a24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92a28:	e0fffd17 	ldw	r3,-12(fp)
   92a2c:	00bfff84 	movi	r2,-2
   92a30:	1884703a 	and	r2,r3,r2
   92a34:	1001703a 	wrctl	status,r2
  
  return context;
   92a38:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   92a3c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   92a40:	d0a73517 	ldw	r2,-25388(gp)
   92a44:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   92a48:	d0a73517 	ldw	r2,-25388(gp)
   92a4c:	10000326 	beq	r2,zero,92a5c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   92a50:	d0a73517 	ldw	r2,-25388(gp)
   92a54:	10800117 	ldw	r2,4(r2)
   92a58:	d0a73515 	stw	r2,-25388(gp)
   92a5c:	e0bff717 	ldw	r2,-36(fp)
   92a60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92a64:	e0bff817 	ldw	r2,-32(fp)
   92a68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   92a6c:	e0bff617 	ldw	r2,-40(fp)
   92a70:	10004326 	beq	r2,zero,92b80 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92a74:	0005303a 	rdctl	r2,status
   92a78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92a7c:	e0fff917 	ldw	r3,-28(fp)
   92a80:	00bfff84 	movi	r2,-2
   92a84:	1884703a 	and	r2,r3,r2
   92a88:	1001703a 	wrctl	status,r2
  
  return context;
   92a8c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   92a90:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   92a94:	d0a73317 	ldw	r2,-25396(gp)
   92a98:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   92a9c:	e0bffb17 	ldw	r2,-20(fp)
   92aa0:	10002d26 	beq	r2,zero,92b58 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   92aa4:	d0a73317 	ldw	r2,-25396(gp)
   92aa8:	10800017 	ldw	r2,0(r2)
   92aac:	d0a73315 	stw	r2,-25396(gp)
   92ab0:	e0bff717 	ldw	r2,-36(fp)
   92ab4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92ab8:	e0bffa17 	ldw	r2,-24(fp)
   92abc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   92ac0:	e0bffb17 	ldw	r2,-20(fp)
   92ac4:	e0fffe17 	ldw	r3,-8(fp)
   92ac8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   92acc:	e0bfff0b 	ldhu	r2,-4(fp)
   92ad0:	1085883a 	add	r2,r2,r2
   92ad4:	1085883a 	add	r2,r2,r2
   92ad8:	1007883a 	mov	r3,r2
   92adc:	e0bffe17 	ldw	r2,-8(fp)
   92ae0:	10c7883a 	add	r3,r2,r3
   92ae4:	e0bffb17 	ldw	r2,-20(fp)
   92ae8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   92aec:	e0bffb17 	ldw	r2,-20(fp)
   92af0:	e0fffe17 	ldw	r3,-8(fp)
   92af4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   92af8:	e0bffb17 	ldw	r2,-20(fp)
   92afc:	e0fffe17 	ldw	r3,-8(fp)
   92b00:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   92b04:	e0bffb17 	ldw	r2,-20(fp)
   92b08:	e0ffff0b 	ldhu	r3,-4(fp)
   92b0c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   92b10:	e0bffb17 	ldw	r2,-20(fp)
   92b14:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   92b18:	e0bff617 	ldw	r2,-40(fp)
   92b1c:	00c00084 	movi	r3,2
   92b20:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   92b24:	e0bff617 	ldw	r2,-40(fp)
   92b28:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   92b2c:	e0bff617 	ldw	r2,-40(fp)
   92b30:	e0fffb17 	ldw	r3,-20(fp)
   92b34:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   92b38:	e0bff617 	ldw	r2,-40(fp)
   92b3c:	00c00fc4 	movi	r3,63
   92b40:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   92b44:	e0bff617 	ldw	r2,-40(fp)
   92b48:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   92b4c:	e13ff617 	ldw	r4,-40(fp)
   92b50:	008fd380 	call	8fd38 <OS_EventWaitListInit>
   92b54:	00000a06 	br	92b80 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   92b58:	d0e73517 	ldw	r3,-25388(gp)
   92b5c:	e0bff617 	ldw	r2,-40(fp)
   92b60:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   92b64:	e0bff617 	ldw	r2,-40(fp)
   92b68:	d0a73515 	stw	r2,-25388(gp)
   92b6c:	e0bff717 	ldw	r2,-36(fp)
   92b70:	e0bffc15 	stw	r2,-16(fp)
   92b74:	e0bffc17 	ldw	r2,-16(fp)
   92b78:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   92b7c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   92b80:	e0bff617 	ldw	r2,-40(fp)
}
   92b84:	e037883a 	mov	sp,fp
   92b88:	dfc00117 	ldw	ra,4(sp)
   92b8c:	df000017 	ldw	fp,0(sp)
   92b90:	dec00204 	addi	sp,sp,8
   92b94:	f800283a 	ret

00092b98 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   92b98:	defff204 	addi	sp,sp,-56
   92b9c:	dfc00d15 	stw	ra,52(sp)
   92ba0:	df000c15 	stw	fp,48(sp)
   92ba4:	df000c04 	addi	fp,sp,48
   92ba8:	e13ffd15 	stw	r4,-12(fp)
   92bac:	2805883a 	mov	r2,r5
   92bb0:	e1bfff15 	stw	r6,-4(fp)
   92bb4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   92bb8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   92bbc:	e0bfff17 	ldw	r2,-4(fp)
   92bc0:	1000021e 	bne	r2,zero,92bcc <OSQDel+0x34>
        return (pevent);
   92bc4:	e0bffd17 	ldw	r2,-12(fp)
   92bc8:	00008e06 	br	92e04 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   92bcc:	e0bffd17 	ldw	r2,-12(fp)
   92bd0:	1000051e 	bne	r2,zero,92be8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   92bd4:	e0bfff17 	ldw	r2,-4(fp)
   92bd8:	00c00104 	movi	r3,4
   92bdc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   92be0:	e0bffd17 	ldw	r2,-12(fp)
   92be4:	00008706 	br	92e04 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   92be8:	e0bffd17 	ldw	r2,-12(fp)
   92bec:	10800003 	ldbu	r2,0(r2)
   92bf0:	10803fcc 	andi	r2,r2,255
   92bf4:	108000a0 	cmpeqi	r2,r2,2
   92bf8:	1000051e 	bne	r2,zero,92c10 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   92bfc:	e0bfff17 	ldw	r2,-4(fp)
   92c00:	00c00044 	movi	r3,1
   92c04:	10c00005 	stb	r3,0(r2)
        return (pevent);
   92c08:	e0bffd17 	ldw	r2,-12(fp)
   92c0c:	00007d06 	br	92e04 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   92c10:	d0a73603 	ldbu	r2,-25384(gp)
   92c14:	10803fcc 	andi	r2,r2,255
   92c18:	10000526 	beq	r2,zero,92c30 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   92c1c:	e0bfff17 	ldw	r2,-4(fp)
   92c20:	00c003c4 	movi	r3,15
   92c24:	10c00005 	stb	r3,0(r2)
        return (pevent);
   92c28:	e0bffd17 	ldw	r2,-12(fp)
   92c2c:	00007506 	br	92e04 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92c30:	0005303a 	rdctl	r2,status
   92c34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92c38:	e0fffc17 	ldw	r3,-16(fp)
   92c3c:	00bfff84 	movi	r2,-2
   92c40:	1884703a 	and	r2,r3,r2
   92c44:	1001703a 	wrctl	status,r2
  
  return context;
   92c48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   92c4c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   92c50:	e0bffd17 	ldw	r2,-12(fp)
   92c54:	10800283 	ldbu	r2,10(r2)
   92c58:	10803fcc 	andi	r2,r2,255
   92c5c:	10000326 	beq	r2,zero,92c6c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   92c60:	00800044 	movi	r2,1
   92c64:	e0bff405 	stb	r2,-48(fp)
   92c68:	00000106 	br	92c70 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   92c6c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   92c70:	e0bffe03 	ldbu	r2,-8(fp)
   92c74:	10000326 	beq	r2,zero,92c84 <OSQDel+0xec>
   92c78:	10800060 	cmpeqi	r2,r2,1
   92c7c:	1000301e 	bne	r2,zero,92d40 <OSQDel+0x1a8>
   92c80:	00005506 	br	92dd8 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   92c84:	e0bff403 	ldbu	r2,-48(fp)
   92c88:	10001e1e 	bne	r2,zero,92d04 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   92c8c:	e0bffd17 	ldw	r2,-12(fp)
   92c90:	00c00fc4 	movi	r3,63
   92c94:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   92c98:	e0bffd17 	ldw	r2,-12(fp)
   92c9c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   92ca0:	e0bffd17 	ldw	r2,-12(fp)
   92ca4:	10800117 	ldw	r2,4(r2)
   92ca8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   92cac:	d0e73317 	ldw	r3,-25396(gp)
   92cb0:	e0bff817 	ldw	r2,-32(fp)
   92cb4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   92cb8:	e0bff817 	ldw	r2,-32(fp)
   92cbc:	d0a73315 	stw	r2,-25396(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   92cc0:	e0bffd17 	ldw	r2,-12(fp)
   92cc4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   92cc8:	d0e73517 	ldw	r3,-25388(gp)
   92ccc:	e0bffd17 	ldw	r2,-12(fp)
   92cd0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   92cd4:	e0bffd17 	ldw	r2,-12(fp)
   92cd8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   92cdc:	e0bffd17 	ldw	r2,-12(fp)
   92ce0:	d0a73515 	stw	r2,-25388(gp)
   92ce4:	e0bff617 	ldw	r2,-40(fp)
   92ce8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92cec:	e0bff717 	ldw	r2,-36(fp)
   92cf0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   92cf4:	e0bfff17 	ldw	r2,-4(fp)
   92cf8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   92cfc:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   92d00:	00003f06 	br	92e00 <OSQDel+0x268>
   92d04:	e0bff617 	ldw	r2,-40(fp)
   92d08:	e0bff915 	stw	r2,-28(fp)
   92d0c:	e0bff917 	ldw	r2,-28(fp)
   92d10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   92d14:	e0bfff17 	ldw	r2,-4(fp)
   92d18:	00c01244 	movi	r3,73
   92d1c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   92d20:	e0bffd17 	ldw	r2,-12(fp)
   92d24:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   92d28:	00003506 	br	92e00 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   92d2c:	000f883a 	mov	r7,zero
   92d30:	01800104 	movi	r6,4
   92d34:	000b883a 	mov	r5,zero
   92d38:	e13ffd17 	ldw	r4,-12(fp)
   92d3c:	008f7880 	call	8f788 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   92d40:	e0bffd17 	ldw	r2,-12(fp)
   92d44:	10800283 	ldbu	r2,10(r2)
   92d48:	10803fcc 	andi	r2,r2,255
   92d4c:	103ff71e 	bne	r2,zero,92d2c <__alt_data_end+0xfffd452c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   92d50:	e0bffd17 	ldw	r2,-12(fp)
   92d54:	00c00fc4 	movi	r3,63
   92d58:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   92d5c:	e0bffd17 	ldw	r2,-12(fp)
   92d60:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   92d64:	e0bffd17 	ldw	r2,-12(fp)
   92d68:	10800117 	ldw	r2,4(r2)
   92d6c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   92d70:	d0e73317 	ldw	r3,-25396(gp)
   92d74:	e0bff817 	ldw	r2,-32(fp)
   92d78:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   92d7c:	e0bff817 	ldw	r2,-32(fp)
   92d80:	d0a73315 	stw	r2,-25396(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   92d84:	e0bffd17 	ldw	r2,-12(fp)
   92d88:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   92d8c:	d0e73517 	ldw	r3,-25388(gp)
   92d90:	e0bffd17 	ldw	r2,-12(fp)
   92d94:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   92d98:	e0bffd17 	ldw	r2,-12(fp)
   92d9c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   92da0:	e0bffd17 	ldw	r2,-12(fp)
   92da4:	d0a73515 	stw	r2,-25388(gp)
   92da8:	e0bff617 	ldw	r2,-40(fp)
   92dac:	e0bffa15 	stw	r2,-24(fp)
   92db0:	e0bffa17 	ldw	r2,-24(fp)
   92db4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   92db8:	e0bff403 	ldbu	r2,-48(fp)
   92dbc:	10800058 	cmpnei	r2,r2,1
   92dc0:	1000011e 	bne	r2,zero,92dc8 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   92dc4:	00901d40 	call	901d4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   92dc8:	e0bfff17 	ldw	r2,-4(fp)
   92dcc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   92dd0:	e03ff515 	stw	zero,-44(fp)
             break;
   92dd4:	00000a06 	br	92e00 <OSQDel+0x268>
   92dd8:	e0bff617 	ldw	r2,-40(fp)
   92ddc:	e0bffb15 	stw	r2,-20(fp)
   92de0:	e0bffb17 	ldw	r2,-20(fp)
   92de4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   92de8:	e0bfff17 	ldw	r2,-4(fp)
   92dec:	00c001c4 	movi	r3,7
   92df0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   92df4:	e0bffd17 	ldw	r2,-12(fp)
   92df8:	e0bff515 	stw	r2,-44(fp)
             break;
   92dfc:	0001883a 	nop
    }
    return (pevent_return);
   92e00:	e0bff517 	ldw	r2,-44(fp)
}
   92e04:	e037883a 	mov	sp,fp
   92e08:	dfc00117 	ldw	ra,4(sp)
   92e0c:	df000017 	ldw	fp,0(sp)
   92e10:	dec00204 	addi	sp,sp,8
   92e14:	f800283a 	ret

00092e18 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   92e18:	defffa04 	addi	sp,sp,-24
   92e1c:	df000515 	stw	fp,20(sp)
   92e20:	df000504 	addi	fp,sp,20
   92e24:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92e28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   92e2c:	e0bfff17 	ldw	r2,-4(fp)
   92e30:	1000021e 	bne	r2,zero,92e3c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   92e34:	00800104 	movi	r2,4
   92e38:	00002106 	br	92ec0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   92e3c:	e0bfff17 	ldw	r2,-4(fp)
   92e40:	10800003 	ldbu	r2,0(r2)
   92e44:	10803fcc 	andi	r2,r2,255
   92e48:	108000a0 	cmpeqi	r2,r2,2
   92e4c:	1000021e 	bne	r2,zero,92e58 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   92e50:	00800044 	movi	r2,1
   92e54:	00001a06 	br	92ec0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92e58:	0005303a 	rdctl	r2,status
   92e5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92e60:	e0fffd17 	ldw	r3,-12(fp)
   92e64:	00bfff84 	movi	r2,-2
   92e68:	1884703a 	and	r2,r3,r2
   92e6c:	1001703a 	wrctl	status,r2
  
  return context;
   92e70:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92e74:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   92e78:	e0bfff17 	ldw	r2,-4(fp)
   92e7c:	10800117 	ldw	r2,4(r2)
   92e80:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   92e84:	e0bffc17 	ldw	r2,-16(fp)
   92e88:	10c00117 	ldw	r3,4(r2)
   92e8c:	e0bffc17 	ldw	r2,-16(fp)
   92e90:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   92e94:	e0bffc17 	ldw	r2,-16(fp)
   92e98:	10c00117 	ldw	r3,4(r2)
   92e9c:	e0bffc17 	ldw	r2,-16(fp)
   92ea0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   92ea4:	e0bffc17 	ldw	r2,-16(fp)
   92ea8:	1000058d 	sth	zero,22(r2)
   92eac:	e0bffb17 	ldw	r2,-20(fp)
   92eb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92eb4:	e0bffe17 	ldw	r2,-8(fp)
   92eb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   92ebc:	0005883a 	mov	r2,zero
}
   92ec0:	e037883a 	mov	sp,fp
   92ec4:	df000017 	ldw	fp,0(sp)
   92ec8:	dec00104 	addi	sp,sp,4
   92ecc:	f800283a 	ret

00092ed0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   92ed0:	defff304 	addi	sp,sp,-52
   92ed4:	dfc00c15 	stw	ra,48(sp)
   92ed8:	df000b15 	stw	fp,44(sp)
   92edc:	df000b04 	addi	fp,sp,44
   92ee0:	e13ffd15 	stw	r4,-12(fp)
   92ee4:	2805883a 	mov	r2,r5
   92ee8:	e1bfff15 	stw	r6,-4(fp)
   92eec:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92ef0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   92ef4:	e0bfff17 	ldw	r2,-4(fp)
   92ef8:	1000021e 	bne	r2,zero,92f04 <OSQPend+0x34>
        return ((void *)0);
   92efc:	0005883a 	mov	r2,zero
   92f00:	00009106 	br	93148 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   92f04:	e0bffd17 	ldw	r2,-12(fp)
   92f08:	1000051e 	bne	r2,zero,92f20 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   92f0c:	e0bfff17 	ldw	r2,-4(fp)
   92f10:	00c00104 	movi	r3,4
   92f14:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   92f18:	0005883a 	mov	r2,zero
   92f1c:	00008a06 	br	93148 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   92f20:	e0bffd17 	ldw	r2,-12(fp)
   92f24:	10800003 	ldbu	r2,0(r2)
   92f28:	10803fcc 	andi	r2,r2,255
   92f2c:	108000a0 	cmpeqi	r2,r2,2
   92f30:	1000051e 	bne	r2,zero,92f48 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   92f34:	e0bfff17 	ldw	r2,-4(fp)
   92f38:	00c00044 	movi	r3,1
   92f3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   92f40:	0005883a 	mov	r2,zero
   92f44:	00008006 	br	93148 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   92f48:	d0a73603 	ldbu	r2,-25384(gp)
   92f4c:	10803fcc 	andi	r2,r2,255
   92f50:	10000526 	beq	r2,zero,92f68 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   92f54:	e0bfff17 	ldw	r2,-4(fp)
   92f58:	00c00084 	movi	r3,2
   92f5c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   92f60:	0005883a 	mov	r2,zero
   92f64:	00007806 	br	93148 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   92f68:	d0a72803 	ldbu	r2,-25440(gp)
   92f6c:	10803fcc 	andi	r2,r2,255
   92f70:	10000526 	beq	r2,zero,92f88 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   92f74:	e0bfff17 	ldw	r2,-4(fp)
   92f78:	00c00344 	movi	r3,13
   92f7c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   92f80:	0005883a 	mov	r2,zero
   92f84:	00007006 	br	93148 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92f88:	0005303a 	rdctl	r2,status
   92f8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92f90:	e0fffc17 	ldw	r3,-16(fp)
   92f94:	00bfff84 	movi	r2,-2
   92f98:	1884703a 	and	r2,r3,r2
   92f9c:	1001703a 	wrctl	status,r2
  
  return context;
   92fa0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   92fa4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   92fa8:	e0bffd17 	ldw	r2,-12(fp)
   92fac:	10800117 	ldw	r2,4(r2)
   92fb0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   92fb4:	e0bff817 	ldw	r2,-32(fp)
   92fb8:	1080058b 	ldhu	r2,22(r2)
   92fbc:	10bfffcc 	andi	r2,r2,65535
   92fc0:	10001e26 	beq	r2,zero,9303c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   92fc4:	e0bff817 	ldw	r2,-32(fp)
   92fc8:	10800417 	ldw	r2,16(r2)
   92fcc:	11000104 	addi	r4,r2,4
   92fd0:	e0fff817 	ldw	r3,-32(fp)
   92fd4:	19000415 	stw	r4,16(r3)
   92fd8:	10800017 	ldw	r2,0(r2)
   92fdc:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   92fe0:	e0bff817 	ldw	r2,-32(fp)
   92fe4:	1080058b 	ldhu	r2,22(r2)
   92fe8:	10bfffc4 	addi	r2,r2,-1
   92fec:	1007883a 	mov	r3,r2
   92ff0:	e0bff817 	ldw	r2,-32(fp)
   92ff4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   92ff8:	e0bff817 	ldw	r2,-32(fp)
   92ffc:	10c00417 	ldw	r3,16(r2)
   93000:	e0bff817 	ldw	r2,-32(fp)
   93004:	10800217 	ldw	r2,8(r2)
   93008:	1880041e 	bne	r3,r2,9301c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   9300c:	e0bff817 	ldw	r2,-32(fp)
   93010:	10c00117 	ldw	r3,4(r2)
   93014:	e0bff817 	ldw	r2,-32(fp)
   93018:	10c00415 	stw	r3,16(r2)
   9301c:	e0bff617 	ldw	r2,-40(fp)
   93020:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93024:	e0bff717 	ldw	r2,-36(fp)
   93028:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   9302c:	e0bfff17 	ldw	r2,-4(fp)
   93030:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   93034:	e0bff517 	ldw	r2,-44(fp)
   93038:	00004306 	br	93148 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   9303c:	d0a73717 	ldw	r2,-25380(gp)
   93040:	d0e73717 	ldw	r3,-25380(gp)
   93044:	18c00c03 	ldbu	r3,48(r3)
   93048:	18c00114 	ori	r3,r3,4
   9304c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   93050:	d0a73717 	ldw	r2,-25380(gp)
   93054:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   93058:	d0a73717 	ldw	r2,-25380(gp)
   9305c:	e0fffe0b 	ldhu	r3,-8(fp)
   93060:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   93064:	e13ffd17 	ldw	r4,-12(fp)
   93068:	008f9200 	call	8f920 <OS_EventTaskWait>
   9306c:	e0bff617 	ldw	r2,-40(fp)
   93070:	e0bffb15 	stw	r2,-20(fp)
   93074:	e0bffb17 	ldw	r2,-20(fp)
   93078:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   9307c:	00901d40 	call	901d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93080:	0005303a 	rdctl	r2,status
   93084:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93088:	e0fff917 	ldw	r3,-28(fp)
   9308c:	00bfff84 	movi	r2,-2
   93090:	1884703a 	and	r2,r3,r2
   93094:	1001703a 	wrctl	status,r2
  
  return context;
   93098:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   9309c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   930a0:	d0a73717 	ldw	r2,-25380(gp)
   930a4:	10800c43 	ldbu	r2,49(r2)
   930a8:	10803fcc 	andi	r2,r2,255
   930ac:	10000326 	beq	r2,zero,930bc <OSQPend+0x1ec>
   930b0:	108000a0 	cmpeqi	r2,r2,2
   930b4:	1000071e 	bne	r2,zero,930d4 <OSQPend+0x204>
   930b8:	00000b06 	br	930e8 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   930bc:	d0a73717 	ldw	r2,-25380(gp)
   930c0:	10800917 	ldw	r2,36(r2)
   930c4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   930c8:	e0bfff17 	ldw	r2,-4(fp)
   930cc:	10000005 	stb	zero,0(r2)
             break;
   930d0:	00000e06 	br	9310c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   930d4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   930d8:	e0bfff17 	ldw	r2,-4(fp)
   930dc:	00c00384 	movi	r3,14
   930e0:	10c00005 	stb	r3,0(r2)
             break;
   930e4:	00000906 	br	9310c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   930e8:	d0a73717 	ldw	r2,-25380(gp)
   930ec:	e17ffd17 	ldw	r5,-12(fp)
   930f0:	1009883a 	mov	r4,r2
   930f4:	008fb800 	call	8fb80 <OS_EventTaskRemove>
             pmsg = (void *)0;
   930f8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   930fc:	e0bfff17 	ldw	r2,-4(fp)
   93100:	00c00284 	movi	r3,10
   93104:	10c00005 	stb	r3,0(r2)
             break;
   93108:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   9310c:	d0a73717 	ldw	r2,-25380(gp)
   93110:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   93114:	d0a73717 	ldw	r2,-25380(gp)
   93118:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   9311c:	d0a73717 	ldw	r2,-25380(gp)
   93120:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   93124:	d0a73717 	ldw	r2,-25380(gp)
   93128:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   9312c:	d0a73717 	ldw	r2,-25380(gp)
   93130:	10000915 	stw	zero,36(r2)
   93134:	e0bff617 	ldw	r2,-40(fp)
   93138:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9313c:	e0bffa17 	ldw	r2,-24(fp)
   93140:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   93144:	e0bff517 	ldw	r2,-44(fp)
}
   93148:	e037883a 	mov	sp,fp
   9314c:	dfc00117 	ldw	ra,4(sp)
   93150:	df000017 	ldw	fp,0(sp)
   93154:	dec00204 	addi	sp,sp,8
   93158:	f800283a 	ret

0009315c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   9315c:	defff604 	addi	sp,sp,-40
   93160:	dfc00915 	stw	ra,36(sp)
   93164:	df000815 	stw	fp,32(sp)
   93168:	df000804 	addi	fp,sp,32
   9316c:	e13ffd15 	stw	r4,-12(fp)
   93170:	2805883a 	mov	r2,r5
   93174:	e1bfff15 	stw	r6,-4(fp)
   93178:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   9317c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   93180:	e0bfff17 	ldw	r2,-4(fp)
   93184:	1000021e 	bne	r2,zero,93190 <OSQPendAbort+0x34>
        return (0);
   93188:	0005883a 	mov	r2,zero
   9318c:	00004906 	br	932b4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   93190:	e0bffd17 	ldw	r2,-12(fp)
   93194:	1000051e 	bne	r2,zero,931ac <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   93198:	e0bfff17 	ldw	r2,-4(fp)
   9319c:	00c00104 	movi	r3,4
   931a0:	10c00005 	stb	r3,0(r2)
        return (0);
   931a4:	0005883a 	mov	r2,zero
   931a8:	00004206 	br	932b4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   931ac:	e0bffd17 	ldw	r2,-12(fp)
   931b0:	10800003 	ldbu	r2,0(r2)
   931b4:	10803fcc 	andi	r2,r2,255
   931b8:	108000a0 	cmpeqi	r2,r2,2
   931bc:	1000051e 	bne	r2,zero,931d4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   931c0:	e0bfff17 	ldw	r2,-4(fp)
   931c4:	00c00044 	movi	r3,1
   931c8:	10c00005 	stb	r3,0(r2)
        return (0);
   931cc:	0005883a 	mov	r2,zero
   931d0:	00003806 	br	932b4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   931d4:	0005303a 	rdctl	r2,status
   931d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   931dc:	e0fffc17 	ldw	r3,-16(fp)
   931e0:	00bfff84 	movi	r2,-2
   931e4:	1884703a 	and	r2,r3,r2
   931e8:	1001703a 	wrctl	status,r2
  
  return context;
   931ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   931f0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   931f4:	e0bffd17 	ldw	r2,-12(fp)
   931f8:	10800283 	ldbu	r2,10(r2)
   931fc:	10803fcc 	andi	r2,r2,255
   93200:	10002526 	beq	r2,zero,93298 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   93204:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   93208:	e0bffe03 	ldbu	r2,-8(fp)
   9320c:	10800060 	cmpeqi	r2,r2,1
   93210:	10000e26 	beq	r2,zero,9324c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   93214:	00000806 	br	93238 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   93218:	01c00084 	movi	r7,2
   9321c:	01800104 	movi	r6,4
   93220:	000b883a 	mov	r5,zero
   93224:	e13ffd17 	ldw	r4,-12(fp)
   93228:	008f7880 	call	8f788 <OS_EventTaskRdy>
                     nbr_tasks++;
   9322c:	e0bff803 	ldbu	r2,-32(fp)
   93230:	10800044 	addi	r2,r2,1
   93234:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   93238:	e0bffd17 	ldw	r2,-12(fp)
   9323c:	10800283 	ldbu	r2,10(r2)
   93240:	10803fcc 	andi	r2,r2,255
   93244:	103ff41e 	bne	r2,zero,93218 <__alt_data_end+0xfffd4a18>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   93248:	00000906 	br	93270 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   9324c:	01c00084 	movi	r7,2
   93250:	01800104 	movi	r6,4
   93254:	000b883a 	mov	r5,zero
   93258:	e13ffd17 	ldw	r4,-12(fp)
   9325c:	008f7880 	call	8f788 <OS_EventTaskRdy>
                 nbr_tasks++;
   93260:	e0bff803 	ldbu	r2,-32(fp)
   93264:	10800044 	addi	r2,r2,1
   93268:	e0bff805 	stb	r2,-32(fp)
                 break;
   9326c:	0001883a 	nop
   93270:	e0bff917 	ldw	r2,-28(fp)
   93274:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93278:	e0bffa17 	ldw	r2,-24(fp)
   9327c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   93280:	00901d40 	call	901d4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   93284:	e0bfff17 	ldw	r2,-4(fp)
   93288:	00c00384 	movi	r3,14
   9328c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   93290:	e0bff803 	ldbu	r2,-32(fp)
   93294:	00000706 	br	932b4 <OSQPendAbort+0x158>
   93298:	e0bff917 	ldw	r2,-28(fp)
   9329c:	e0bffb15 	stw	r2,-20(fp)
   932a0:	e0bffb17 	ldw	r2,-20(fp)
   932a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   932a8:	e0bfff17 	ldw	r2,-4(fp)
   932ac:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   932b0:	0005883a 	mov	r2,zero
}
   932b4:	e037883a 	mov	sp,fp
   932b8:	dfc00117 	ldw	ra,4(sp)
   932bc:	df000017 	ldw	fp,0(sp)
   932c0:	dec00204 	addi	sp,sp,8
   932c4:	f800283a 	ret

000932c8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   932c8:	defff604 	addi	sp,sp,-40
   932cc:	dfc00915 	stw	ra,36(sp)
   932d0:	df000815 	stw	fp,32(sp)
   932d4:	df000804 	addi	fp,sp,32
   932d8:	e13ffe15 	stw	r4,-8(fp)
   932dc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   932e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   932e4:	e0bffe17 	ldw	r2,-8(fp)
   932e8:	1000021e 	bne	r2,zero,932f4 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   932ec:	00800104 	movi	r2,4
   932f0:	00004a06 	br	9341c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   932f4:	e0bffe17 	ldw	r2,-8(fp)
   932f8:	10800003 	ldbu	r2,0(r2)
   932fc:	10803fcc 	andi	r2,r2,255
   93300:	108000a0 	cmpeqi	r2,r2,2
   93304:	1000021e 	bne	r2,zero,93310 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   93308:	00800044 	movi	r2,1
   9330c:	00004306 	br	9341c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93310:	0005303a 	rdctl	r2,status
   93314:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93318:	e0fffd17 	ldw	r3,-12(fp)
   9331c:	00bfff84 	movi	r2,-2
   93320:	1884703a 	and	r2,r3,r2
   93324:	1001703a 	wrctl	status,r2
  
  return context;
   93328:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   9332c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   93330:	e0bffe17 	ldw	r2,-8(fp)
   93334:	10800283 	ldbu	r2,10(r2)
   93338:	10803fcc 	andi	r2,r2,255
   9333c:	10000c26 	beq	r2,zero,93370 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   93340:	000f883a 	mov	r7,zero
   93344:	01800104 	movi	r6,4
   93348:	e17fff17 	ldw	r5,-4(fp)
   9334c:	e13ffe17 	ldw	r4,-8(fp)
   93350:	008f7880 	call	8f788 <OS_EventTaskRdy>
   93354:	e0bff817 	ldw	r2,-32(fp)
   93358:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9335c:	e0bff917 	ldw	r2,-28(fp)
   93360:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   93364:	00901d40 	call	901d4 <OS_Sched>
        return (OS_ERR_NONE);
   93368:	0005883a 	mov	r2,zero
   9336c:	00002b06 	br	9341c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   93370:	e0bffe17 	ldw	r2,-8(fp)
   93374:	10800117 	ldw	r2,4(r2)
   93378:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   9337c:	e0bffb17 	ldw	r2,-20(fp)
   93380:	10c0058b 	ldhu	r3,22(r2)
   93384:	e0bffb17 	ldw	r2,-20(fp)
   93388:	1080050b 	ldhu	r2,20(r2)
   9338c:	18ffffcc 	andi	r3,r3,65535
   93390:	10bfffcc 	andi	r2,r2,65535
   93394:	18800636 	bltu	r3,r2,933b0 <OSQPost+0xe8>
   93398:	e0bff817 	ldw	r2,-32(fp)
   9339c:	e0bffa15 	stw	r2,-24(fp)
   933a0:	e0bffa17 	ldw	r2,-24(fp)
   933a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   933a8:	00800784 	movi	r2,30
   933ac:	00001b06 	br	9341c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   933b0:	e0bffb17 	ldw	r2,-20(fp)
   933b4:	10800317 	ldw	r2,12(r2)
   933b8:	11000104 	addi	r4,r2,4
   933bc:	e0fffb17 	ldw	r3,-20(fp)
   933c0:	19000315 	stw	r4,12(r3)
   933c4:	e0ffff17 	ldw	r3,-4(fp)
   933c8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   933cc:	e0bffb17 	ldw	r2,-20(fp)
   933d0:	1080058b 	ldhu	r2,22(r2)
   933d4:	10800044 	addi	r2,r2,1
   933d8:	1007883a 	mov	r3,r2
   933dc:	e0bffb17 	ldw	r2,-20(fp)
   933e0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   933e4:	e0bffb17 	ldw	r2,-20(fp)
   933e8:	10c00317 	ldw	r3,12(r2)
   933ec:	e0bffb17 	ldw	r2,-20(fp)
   933f0:	10800217 	ldw	r2,8(r2)
   933f4:	1880041e 	bne	r3,r2,93408 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   933f8:	e0bffb17 	ldw	r2,-20(fp)
   933fc:	10c00117 	ldw	r3,4(r2)
   93400:	e0bffb17 	ldw	r2,-20(fp)
   93404:	10c00315 	stw	r3,12(r2)
   93408:	e0bff817 	ldw	r2,-32(fp)
   9340c:	e0bffc15 	stw	r2,-16(fp)
   93410:	e0bffc17 	ldw	r2,-16(fp)
   93414:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   93418:	0005883a 	mov	r2,zero
}
   9341c:	e037883a 	mov	sp,fp
   93420:	dfc00117 	ldw	ra,4(sp)
   93424:	df000017 	ldw	fp,0(sp)
   93428:	dec00204 	addi	sp,sp,8
   9342c:	f800283a 	ret

00093430 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   93430:	defff604 	addi	sp,sp,-40
   93434:	dfc00915 	stw	ra,36(sp)
   93438:	df000815 	stw	fp,32(sp)
   9343c:	df000804 	addi	fp,sp,32
   93440:	e13ffe15 	stw	r4,-8(fp)
   93444:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93448:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9344c:	e0bffe17 	ldw	r2,-8(fp)
   93450:	1000021e 	bne	r2,zero,9345c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   93454:	00800104 	movi	r2,4
   93458:	00004c06 	br	9358c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   9345c:	e0bffe17 	ldw	r2,-8(fp)
   93460:	10800003 	ldbu	r2,0(r2)
   93464:	10803fcc 	andi	r2,r2,255
   93468:	108000a0 	cmpeqi	r2,r2,2
   9346c:	1000021e 	bne	r2,zero,93478 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   93470:	00800044 	movi	r2,1
   93474:	00004506 	br	9358c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93478:	0005303a 	rdctl	r2,status
   9347c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93480:	e0fffd17 	ldw	r3,-12(fp)
   93484:	00bfff84 	movi	r2,-2
   93488:	1884703a 	and	r2,r3,r2
   9348c:	1001703a 	wrctl	status,r2
  
  return context;
   93490:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   93494:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   93498:	e0bffe17 	ldw	r2,-8(fp)
   9349c:	10800283 	ldbu	r2,10(r2)
   934a0:	10803fcc 	andi	r2,r2,255
   934a4:	10000c26 	beq	r2,zero,934d8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   934a8:	000f883a 	mov	r7,zero
   934ac:	01800104 	movi	r6,4
   934b0:	e17fff17 	ldw	r5,-4(fp)
   934b4:	e13ffe17 	ldw	r4,-8(fp)
   934b8:	008f7880 	call	8f788 <OS_EventTaskRdy>
   934bc:	e0bff817 	ldw	r2,-32(fp)
   934c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   934c4:	e0bff917 	ldw	r2,-28(fp)
   934c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   934cc:	00901d40 	call	901d4 <OS_Sched>
        return (OS_ERR_NONE);
   934d0:	0005883a 	mov	r2,zero
   934d4:	00002d06 	br	9358c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   934d8:	e0bffe17 	ldw	r2,-8(fp)
   934dc:	10800117 	ldw	r2,4(r2)
   934e0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   934e4:	e0bffb17 	ldw	r2,-20(fp)
   934e8:	10c0058b 	ldhu	r3,22(r2)
   934ec:	e0bffb17 	ldw	r2,-20(fp)
   934f0:	1080050b 	ldhu	r2,20(r2)
   934f4:	18ffffcc 	andi	r3,r3,65535
   934f8:	10bfffcc 	andi	r2,r2,65535
   934fc:	18800636 	bltu	r3,r2,93518 <OSQPostFront+0xe8>
   93500:	e0bff817 	ldw	r2,-32(fp)
   93504:	e0bffa15 	stw	r2,-24(fp)
   93508:	e0bffa17 	ldw	r2,-24(fp)
   9350c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   93510:	00800784 	movi	r2,30
   93514:	00001d06 	br	9358c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   93518:	e0bffb17 	ldw	r2,-20(fp)
   9351c:	10c00417 	ldw	r3,16(r2)
   93520:	e0bffb17 	ldw	r2,-20(fp)
   93524:	10800117 	ldw	r2,4(r2)
   93528:	1880041e 	bne	r3,r2,9353c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   9352c:	e0bffb17 	ldw	r2,-20(fp)
   93530:	10c00217 	ldw	r3,8(r2)
   93534:	e0bffb17 	ldw	r2,-20(fp)
   93538:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   9353c:	e0bffb17 	ldw	r2,-20(fp)
   93540:	10800417 	ldw	r2,16(r2)
   93544:	10ffff04 	addi	r3,r2,-4
   93548:	e0bffb17 	ldw	r2,-20(fp)
   9354c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   93550:	e0bffb17 	ldw	r2,-20(fp)
   93554:	10800417 	ldw	r2,16(r2)
   93558:	e0ffff17 	ldw	r3,-4(fp)
   9355c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   93560:	e0bffb17 	ldw	r2,-20(fp)
   93564:	1080058b 	ldhu	r2,22(r2)
   93568:	10800044 	addi	r2,r2,1
   9356c:	1007883a 	mov	r3,r2
   93570:	e0bffb17 	ldw	r2,-20(fp)
   93574:	10c0058d 	sth	r3,22(r2)
   93578:	e0bff817 	ldw	r2,-32(fp)
   9357c:	e0bffc15 	stw	r2,-16(fp)
   93580:	e0bffc17 	ldw	r2,-16(fp)
   93584:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   93588:	0005883a 	mov	r2,zero
}
   9358c:	e037883a 	mov	sp,fp
   93590:	dfc00117 	ldw	ra,4(sp)
   93594:	df000017 	ldw	fp,0(sp)
   93598:	dec00204 	addi	sp,sp,8
   9359c:	f800283a 	ret

000935a0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   935a0:	defff504 	addi	sp,sp,-44
   935a4:	dfc00a15 	stw	ra,40(sp)
   935a8:	df000915 	stw	fp,36(sp)
   935ac:	df000904 	addi	fp,sp,36
   935b0:	e13ffd15 	stw	r4,-12(fp)
   935b4:	e17ffe15 	stw	r5,-8(fp)
   935b8:	3005883a 	mov	r2,r6
   935bc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   935c0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   935c4:	e0bffd17 	ldw	r2,-12(fp)
   935c8:	1000021e 	bne	r2,zero,935d4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   935cc:	00800104 	movi	r2,4
   935d0:	00007106 	br	93798 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   935d4:	e0bffd17 	ldw	r2,-12(fp)
   935d8:	10800003 	ldbu	r2,0(r2)
   935dc:	10803fcc 	andi	r2,r2,255
   935e0:	108000a0 	cmpeqi	r2,r2,2
   935e4:	1000021e 	bne	r2,zero,935f0 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   935e8:	00800044 	movi	r2,1
   935ec:	00006a06 	br	93798 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   935f0:	0005303a 	rdctl	r2,status
   935f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   935f8:	e0fffc17 	ldw	r3,-16(fp)
   935fc:	00bfff84 	movi	r2,-2
   93600:	1884703a 	and	r2,r3,r2
   93604:	1001703a 	wrctl	status,r2
  
  return context;
   93608:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   9360c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   93610:	e0bffd17 	ldw	r2,-12(fp)
   93614:	10800283 	ldbu	r2,10(r2)
   93618:	10803fcc 	andi	r2,r2,255
   9361c:	10001d26 	beq	r2,zero,93694 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   93620:	e0bfff03 	ldbu	r2,-4(fp)
   93624:	1080004c 	andi	r2,r2,1
   93628:	10000b26 	beq	r2,zero,93658 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   9362c:	00000506 	br	93644 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   93630:	000f883a 	mov	r7,zero
   93634:	01800104 	movi	r6,4
   93638:	e17ffe17 	ldw	r5,-8(fp)
   9363c:	e13ffd17 	ldw	r4,-12(fp)
   93640:	008f7880 	call	8f788 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   93644:	e0bffd17 	ldw	r2,-12(fp)
   93648:	10800283 	ldbu	r2,10(r2)
   9364c:	10803fcc 	andi	r2,r2,255
   93650:	103ff71e 	bne	r2,zero,93630 <__alt_data_end+0xfffd4e30>
   93654:	00000506 	br	9366c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   93658:	000f883a 	mov	r7,zero
   9365c:	01800104 	movi	r6,4
   93660:	e17ffe17 	ldw	r5,-8(fp)
   93664:	e13ffd17 	ldw	r4,-12(fp)
   93668:	008f7880 	call	8f788 <OS_EventTaskRdy>
   9366c:	e0bff717 	ldw	r2,-36(fp)
   93670:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93674:	e0bff817 	ldw	r2,-32(fp)
   93678:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   9367c:	e0bfff03 	ldbu	r2,-4(fp)
   93680:	1080010c 	andi	r2,r2,4
   93684:	1000011e 	bne	r2,zero,9368c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   93688:	00901d40 	call	901d4 <OS_Sched>
        }
        return (OS_ERR_NONE);
   9368c:	0005883a 	mov	r2,zero
   93690:	00004106 	br	93798 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   93694:	e0bffd17 	ldw	r2,-12(fp)
   93698:	10800117 	ldw	r2,4(r2)
   9369c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   936a0:	e0bffa17 	ldw	r2,-24(fp)
   936a4:	10c0058b 	ldhu	r3,22(r2)
   936a8:	e0bffa17 	ldw	r2,-24(fp)
   936ac:	1080050b 	ldhu	r2,20(r2)
   936b0:	18ffffcc 	andi	r3,r3,65535
   936b4:	10bfffcc 	andi	r2,r2,65535
   936b8:	18800636 	bltu	r3,r2,936d4 <OSQPostOpt+0x134>
   936bc:	e0bff717 	ldw	r2,-36(fp)
   936c0:	e0bff915 	stw	r2,-28(fp)
   936c4:	e0bff917 	ldw	r2,-28(fp)
   936c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   936cc:	00800784 	movi	r2,30
   936d0:	00003106 	br	93798 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   936d4:	e0bfff03 	ldbu	r2,-4(fp)
   936d8:	1080008c 	andi	r2,r2,2
   936dc:	10001326 	beq	r2,zero,9372c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   936e0:	e0bffa17 	ldw	r2,-24(fp)
   936e4:	10c00417 	ldw	r3,16(r2)
   936e8:	e0bffa17 	ldw	r2,-24(fp)
   936ec:	10800117 	ldw	r2,4(r2)
   936f0:	1880041e 	bne	r3,r2,93704 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   936f4:	e0bffa17 	ldw	r2,-24(fp)
   936f8:	10c00217 	ldw	r3,8(r2)
   936fc:	e0bffa17 	ldw	r2,-24(fp)
   93700:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   93704:	e0bffa17 	ldw	r2,-24(fp)
   93708:	10800417 	ldw	r2,16(r2)
   9370c:	10ffff04 	addi	r3,r2,-4
   93710:	e0bffa17 	ldw	r2,-24(fp)
   93714:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   93718:	e0bffa17 	ldw	r2,-24(fp)
   9371c:	10800417 	ldw	r2,16(r2)
   93720:	e0fffe17 	ldw	r3,-8(fp)
   93724:	10c00015 	stw	r3,0(r2)
   93728:	00001006 	br	9376c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   9372c:	e0bffa17 	ldw	r2,-24(fp)
   93730:	10800317 	ldw	r2,12(r2)
   93734:	11000104 	addi	r4,r2,4
   93738:	e0fffa17 	ldw	r3,-24(fp)
   9373c:	19000315 	stw	r4,12(r3)
   93740:	e0fffe17 	ldw	r3,-8(fp)
   93744:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   93748:	e0bffa17 	ldw	r2,-24(fp)
   9374c:	10c00317 	ldw	r3,12(r2)
   93750:	e0bffa17 	ldw	r2,-24(fp)
   93754:	10800217 	ldw	r2,8(r2)
   93758:	1880041e 	bne	r3,r2,9376c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   9375c:	e0bffa17 	ldw	r2,-24(fp)
   93760:	10c00117 	ldw	r3,4(r2)
   93764:	e0bffa17 	ldw	r2,-24(fp)
   93768:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   9376c:	e0bffa17 	ldw	r2,-24(fp)
   93770:	1080058b 	ldhu	r2,22(r2)
   93774:	10800044 	addi	r2,r2,1
   93778:	1007883a 	mov	r3,r2
   9377c:	e0bffa17 	ldw	r2,-24(fp)
   93780:	10c0058d 	sth	r3,22(r2)
   93784:	e0bff717 	ldw	r2,-36(fp)
   93788:	e0bffb15 	stw	r2,-20(fp)
   9378c:	e0bffb17 	ldw	r2,-20(fp)
   93790:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   93794:	0005883a 	mov	r2,zero
}
   93798:	e037883a 	mov	sp,fp
   9379c:	dfc00117 	ldw	ra,4(sp)
   937a0:	df000017 	ldw	fp,0(sp)
   937a4:	dec00204 	addi	sp,sp,8
   937a8:	f800283a 	ret

000937ac <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   937ac:	defff604 	addi	sp,sp,-40
   937b0:	df000915 	stw	fp,36(sp)
   937b4:	df000904 	addi	fp,sp,36
   937b8:	e13ffe15 	stw	r4,-8(fp)
   937bc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   937c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   937c4:	e0bffe17 	ldw	r2,-8(fp)
   937c8:	1000021e 	bne	r2,zero,937d4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   937cc:	00800104 	movi	r2,4
   937d0:	00004906 	br	938f8 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   937d4:	e0bfff17 	ldw	r2,-4(fp)
   937d8:	1000021e 	bne	r2,zero,937e4 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   937dc:	00800244 	movi	r2,9
   937e0:	00004506 	br	938f8 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   937e4:	e0bffe17 	ldw	r2,-8(fp)
   937e8:	10800003 	ldbu	r2,0(r2)
   937ec:	10803fcc 	andi	r2,r2,255
   937f0:	108000a0 	cmpeqi	r2,r2,2
   937f4:	1000021e 	bne	r2,zero,93800 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   937f8:	00800044 	movi	r2,1
   937fc:	00003e06 	br	938f8 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93800:	0005303a 	rdctl	r2,status
   93804:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93808:	e0fffd17 	ldw	r3,-12(fp)
   9380c:	00bfff84 	movi	r2,-2
   93810:	1884703a 	and	r2,r3,r2
   93814:	1001703a 	wrctl	status,r2
  
  return context;
   93818:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   9381c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   93820:	e0bffe17 	ldw	r2,-8(fp)
   93824:	10c00283 	ldbu	r3,10(r2)
   93828:	e0bfff17 	ldw	r2,-4(fp)
   9382c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   93830:	e0bffe17 	ldw	r2,-8(fp)
   93834:	108002c4 	addi	r2,r2,11
   93838:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   9383c:	e0bfff17 	ldw	r2,-4(fp)
   93840:	10800204 	addi	r2,r2,8
   93844:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   93848:	e03ff705 	stb	zero,-36(fp)
   9384c:	00000b06 	br	9387c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   93850:	e0bff917 	ldw	r2,-28(fp)
   93854:	10c00044 	addi	r3,r2,1
   93858:	e0fff915 	stw	r3,-28(fp)
   9385c:	e0fff817 	ldw	r3,-32(fp)
   93860:	19000044 	addi	r4,r3,1
   93864:	e13ff815 	stw	r4,-32(fp)
   93868:	18c00003 	ldbu	r3,0(r3)
   9386c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   93870:	e0bff703 	ldbu	r2,-36(fp)
   93874:	10800044 	addi	r2,r2,1
   93878:	e0bff705 	stb	r2,-36(fp)
   9387c:	e0bff703 	ldbu	r2,-36(fp)
   93880:	108000f0 	cmpltui	r2,r2,3
   93884:	103ff21e 	bne	r2,zero,93850 <__alt_data_end+0xfffd5050>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   93888:	e0bffe17 	ldw	r2,-8(fp)
   9388c:	10800117 	ldw	r2,4(r2)
   93890:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   93894:	e0bffc17 	ldw	r2,-16(fp)
   93898:	1080058b 	ldhu	r2,22(r2)
   9389c:	10bfffcc 	andi	r2,r2,65535
   938a0:	10000626 	beq	r2,zero,938bc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   938a4:	e0bffc17 	ldw	r2,-16(fp)
   938a8:	10800417 	ldw	r2,16(r2)
   938ac:	10c00017 	ldw	r3,0(r2)
   938b0:	e0bfff17 	ldw	r2,-4(fp)
   938b4:	10c00015 	stw	r3,0(r2)
   938b8:	00000206 	br	938c4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   938bc:	e0bfff17 	ldw	r2,-4(fp)
   938c0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   938c4:	e0bffc17 	ldw	r2,-16(fp)
   938c8:	10c0058b 	ldhu	r3,22(r2)
   938cc:	e0bfff17 	ldw	r2,-4(fp)
   938d0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   938d4:	e0bffc17 	ldw	r2,-16(fp)
   938d8:	10c0050b 	ldhu	r3,20(r2)
   938dc:	e0bfff17 	ldw	r2,-4(fp)
   938e0:	10c0018d 	sth	r3,6(r2)
   938e4:	e0bffa17 	ldw	r2,-24(fp)
   938e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   938ec:	e0bffb17 	ldw	r2,-20(fp)
   938f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   938f4:	0005883a 	mov	r2,zero
}
   938f8:	e037883a 	mov	sp,fp
   938fc:	df000017 	ldw	fp,0(sp)
   93900:	dec00104 	addi	sp,sp,4
   93904:	f800283a 	ret

00093908 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   93908:	defffb04 	addi	sp,sp,-20
   9390c:	dfc00415 	stw	ra,16(sp)
   93910:	df000315 	stw	fp,12(sp)
   93914:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   93918:	01407804 	movi	r5,480
   9391c:	010002b4 	movhi	r4,10
   93920:	2105ab04 	addi	r4,r4,5804
   93924:	00901180 	call	90118 <OS_MemClr>
    pq1 = &OSQTbl[0];
   93928:	008002b4 	movhi	r2,10
   9392c:	1085ab04 	addi	r2,r2,5804
   93930:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   93934:	008002b4 	movhi	r2,10
   93938:	1085b104 	addi	r2,r2,5828
   9393c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   93940:	e03ffd0d 	sth	zero,-12(fp)
   93944:	00000c06 	br	93978 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   93948:	e0bffe17 	ldw	r2,-8(fp)
   9394c:	e0ffff17 	ldw	r3,-4(fp)
   93950:	10c00015 	stw	r3,0(r2)
        pq1++;
   93954:	e0bffe17 	ldw	r2,-8(fp)
   93958:	10800604 	addi	r2,r2,24
   9395c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   93960:	e0bfff17 	ldw	r2,-4(fp)
   93964:	10800604 	addi	r2,r2,24
   93968:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   9396c:	e0bffd0b 	ldhu	r2,-12(fp)
   93970:	10800044 	addi	r2,r2,1
   93974:	e0bffd0d 	sth	r2,-12(fp)
   93978:	e0bffd0b 	ldhu	r2,-12(fp)
   9397c:	108004f0 	cmpltui	r2,r2,19
   93980:	103ff11e 	bne	r2,zero,93948 <__alt_data_end+0xfffd5148>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   93984:	e0bffe17 	ldw	r2,-8(fp)
   93988:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   9398c:	008002b4 	movhi	r2,10
   93990:	1085ab04 	addi	r2,r2,5804
   93994:	d0a73315 	stw	r2,-25396(gp)
#endif
}
   93998:	0001883a 	nop
   9399c:	e037883a 	mov	sp,fp
   939a0:	dfc00117 	ldw	ra,4(sp)
   939a4:	df000017 	ldw	fp,0(sp)
   939a8:	dec00204 	addi	sp,sp,8
   939ac:	f800283a 	ret

000939b0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   939b0:	defffa04 	addi	sp,sp,-24
   939b4:	df000515 	stw	fp,20(sp)
   939b8:	df000504 	addi	fp,sp,20
   939bc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   939c0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   939c4:	e0bfff17 	ldw	r2,-4(fp)
   939c8:	1000021e 	bne	r2,zero,939d4 <OSSemAccept+0x24>
        return (0);
   939cc:	0005883a 	mov	r2,zero
   939d0:	00001f06 	br	93a50 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   939d4:	e0bfff17 	ldw	r2,-4(fp)
   939d8:	10800003 	ldbu	r2,0(r2)
   939dc:	10803fcc 	andi	r2,r2,255
   939e0:	108000e0 	cmpeqi	r2,r2,3
   939e4:	1000021e 	bne	r2,zero,939f0 <OSSemAccept+0x40>
        return (0);
   939e8:	0005883a 	mov	r2,zero
   939ec:	00001806 	br	93a50 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   939f0:	0005303a 	rdctl	r2,status
   939f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   939f8:	e0fffe17 	ldw	r3,-8(fp)
   939fc:	00bfff84 	movi	r2,-2
   93a00:	1884703a 	and	r2,r3,r2
   93a04:	1001703a 	wrctl	status,r2
  
  return context;
   93a08:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   93a0c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   93a10:	e0bfff17 	ldw	r2,-4(fp)
   93a14:	1080020b 	ldhu	r2,8(r2)
   93a18:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   93a1c:	e0bffd0b 	ldhu	r2,-12(fp)
   93a20:	10000626 	beq	r2,zero,93a3c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   93a24:	e0bfff17 	ldw	r2,-4(fp)
   93a28:	1080020b 	ldhu	r2,8(r2)
   93a2c:	10bfffc4 	addi	r2,r2,-1
   93a30:	1007883a 	mov	r3,r2
   93a34:	e0bfff17 	ldw	r2,-4(fp)
   93a38:	10c0020d 	sth	r3,8(r2)
   93a3c:	e0bffb17 	ldw	r2,-20(fp)
   93a40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93a44:	e0bffc17 	ldw	r2,-16(fp)
   93a48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   93a4c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   93a50:	e037883a 	mov	sp,fp
   93a54:	df000017 	ldw	fp,0(sp)
   93a58:	dec00104 	addi	sp,sp,4
   93a5c:	f800283a 	ret

00093a60 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   93a60:	defff904 	addi	sp,sp,-28
   93a64:	dfc00615 	stw	ra,24(sp)
   93a68:	df000515 	stw	fp,20(sp)
   93a6c:	df000504 	addi	fp,sp,20
   93a70:	2005883a 	mov	r2,r4
   93a74:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   93a78:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   93a7c:	d0a73603 	ldbu	r2,-25384(gp)
   93a80:	10803fcc 	andi	r2,r2,255
   93a84:	10000226 	beq	r2,zero,93a90 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   93a88:	0005883a 	mov	r2,zero
   93a8c:	00002506 	br	93b24 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93a90:	0005303a 	rdctl	r2,status
   93a94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93a98:	e0fffe17 	ldw	r3,-8(fp)
   93a9c:	00bfff84 	movi	r2,-2
   93aa0:	1884703a 	and	r2,r3,r2
   93aa4:	1001703a 	wrctl	status,r2
  
  return context;
   93aa8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   93aac:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   93ab0:	d0a73517 	ldw	r2,-25388(gp)
   93ab4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   93ab8:	d0a73517 	ldw	r2,-25388(gp)
   93abc:	10000326 	beq	r2,zero,93acc <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   93ac0:	d0a73517 	ldw	r2,-25388(gp)
   93ac4:	10800117 	ldw	r2,4(r2)
   93ac8:	d0a73515 	stw	r2,-25388(gp)
   93acc:	e0bffb17 	ldw	r2,-20(fp)
   93ad0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93ad4:	e0bffc17 	ldw	r2,-16(fp)
   93ad8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   93adc:	e0bffd17 	ldw	r2,-12(fp)
   93ae0:	10000f26 	beq	r2,zero,93b20 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   93ae4:	e0bffd17 	ldw	r2,-12(fp)
   93ae8:	00c000c4 	movi	r3,3
   93aec:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   93af0:	e0bffd17 	ldw	r2,-12(fp)
   93af4:	e0ffff0b 	ldhu	r3,-4(fp)
   93af8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   93afc:	e0bffd17 	ldw	r2,-12(fp)
   93b00:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   93b04:	e0bffd17 	ldw	r2,-12(fp)
   93b08:	00c00fc4 	movi	r3,63
   93b0c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   93b10:	e0bffd17 	ldw	r2,-12(fp)
   93b14:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   93b18:	e13ffd17 	ldw	r4,-12(fp)
   93b1c:	008fd380 	call	8fd38 <OS_EventWaitListInit>
    }
    return (pevent);
   93b20:	e0bffd17 	ldw	r2,-12(fp)
}
   93b24:	e037883a 	mov	sp,fp
   93b28:	dfc00117 	ldw	ra,4(sp)
   93b2c:	df000017 	ldw	fp,0(sp)
   93b30:	dec00204 	addi	sp,sp,8
   93b34:	f800283a 	ret

00093b38 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   93b38:	defff304 	addi	sp,sp,-52
   93b3c:	dfc00c15 	stw	ra,48(sp)
   93b40:	df000b15 	stw	fp,44(sp)
   93b44:	df000b04 	addi	fp,sp,44
   93b48:	e13ffd15 	stw	r4,-12(fp)
   93b4c:	2805883a 	mov	r2,r5
   93b50:	e1bfff15 	stw	r6,-4(fp)
   93b54:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   93b58:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   93b5c:	e0bfff17 	ldw	r2,-4(fp)
   93b60:	1000021e 	bne	r2,zero,93b6c <OSSemDel+0x34>
        return (pevent);
   93b64:	e0bffd17 	ldw	r2,-12(fp)
   93b68:	00007e06 	br	93d64 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   93b6c:	e0bffd17 	ldw	r2,-12(fp)
   93b70:	1000051e 	bne	r2,zero,93b88 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   93b74:	e0bfff17 	ldw	r2,-4(fp)
   93b78:	00c00104 	movi	r3,4
   93b7c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   93b80:	e0bffd17 	ldw	r2,-12(fp)
   93b84:	00007706 	br	93d64 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   93b88:	e0bffd17 	ldw	r2,-12(fp)
   93b8c:	10800003 	ldbu	r2,0(r2)
   93b90:	10803fcc 	andi	r2,r2,255
   93b94:	108000e0 	cmpeqi	r2,r2,3
   93b98:	1000051e 	bne	r2,zero,93bb0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   93b9c:	e0bfff17 	ldw	r2,-4(fp)
   93ba0:	00c00044 	movi	r3,1
   93ba4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   93ba8:	e0bffd17 	ldw	r2,-12(fp)
   93bac:	00006d06 	br	93d64 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   93bb0:	d0a73603 	ldbu	r2,-25384(gp)
   93bb4:	10803fcc 	andi	r2,r2,255
   93bb8:	10000526 	beq	r2,zero,93bd0 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   93bbc:	e0bfff17 	ldw	r2,-4(fp)
   93bc0:	00c003c4 	movi	r3,15
   93bc4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   93bc8:	e0bffd17 	ldw	r2,-12(fp)
   93bcc:	00006506 	br	93d64 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93bd0:	0005303a 	rdctl	r2,status
   93bd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93bd8:	e0fffc17 	ldw	r3,-16(fp)
   93bdc:	00bfff84 	movi	r2,-2
   93be0:	1884703a 	and	r2,r3,r2
   93be4:	1001703a 	wrctl	status,r2
  
  return context;
   93be8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   93bec:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   93bf0:	e0bffd17 	ldw	r2,-12(fp)
   93bf4:	10800283 	ldbu	r2,10(r2)
   93bf8:	10803fcc 	andi	r2,r2,255
   93bfc:	10000326 	beq	r2,zero,93c0c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   93c00:	00800044 	movi	r2,1
   93c04:	e0bff505 	stb	r2,-44(fp)
   93c08:	00000106 	br	93c10 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   93c0c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   93c10:	e0bffe03 	ldbu	r2,-8(fp)
   93c14:	10000326 	beq	r2,zero,93c24 <OSSemDel+0xec>
   93c18:	10800060 	cmpeqi	r2,r2,1
   93c1c:	1000281e 	bne	r2,zero,93cc0 <OSSemDel+0x188>
   93c20:	00004506 	br	93d38 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   93c24:	e0bff503 	ldbu	r2,-44(fp)
   93c28:	1000161e 	bne	r2,zero,93c84 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   93c2c:	e0bffd17 	ldw	r2,-12(fp)
   93c30:	00c00fc4 	movi	r3,63
   93c34:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   93c38:	e0bffd17 	ldw	r2,-12(fp)
   93c3c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   93c40:	e0bffd17 	ldw	r2,-12(fp)
   93c44:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   93c48:	d0e73517 	ldw	r3,-25388(gp)
   93c4c:	e0bffd17 	ldw	r2,-12(fp)
   93c50:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   93c54:	e0bffd17 	ldw	r2,-12(fp)
   93c58:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   93c5c:	e0bffd17 	ldw	r2,-12(fp)
   93c60:	d0a73515 	stw	r2,-25388(gp)
   93c64:	e0bff717 	ldw	r2,-36(fp)
   93c68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93c6c:	e0bff817 	ldw	r2,-32(fp)
   93c70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   93c74:	e0bfff17 	ldw	r2,-4(fp)
   93c78:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   93c7c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   93c80:	00003706 	br	93d60 <OSSemDel+0x228>
   93c84:	e0bff717 	ldw	r2,-36(fp)
   93c88:	e0bff915 	stw	r2,-28(fp)
   93c8c:	e0bff917 	ldw	r2,-28(fp)
   93c90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   93c94:	e0bfff17 	ldw	r2,-4(fp)
   93c98:	00c01244 	movi	r3,73
   93c9c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   93ca0:	e0bffd17 	ldw	r2,-12(fp)
   93ca4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   93ca8:	00002d06 	br	93d60 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   93cac:	000f883a 	mov	r7,zero
   93cb0:	01800044 	movi	r6,1
   93cb4:	000b883a 	mov	r5,zero
   93cb8:	e13ffd17 	ldw	r4,-12(fp)
   93cbc:	008f7880 	call	8f788 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   93cc0:	e0bffd17 	ldw	r2,-12(fp)
   93cc4:	10800283 	ldbu	r2,10(r2)
   93cc8:	10803fcc 	andi	r2,r2,255
   93ccc:	103ff71e 	bne	r2,zero,93cac <__alt_data_end+0xfffd54ac>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   93cd0:	e0bffd17 	ldw	r2,-12(fp)
   93cd4:	00c00fc4 	movi	r3,63
   93cd8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   93cdc:	e0bffd17 	ldw	r2,-12(fp)
   93ce0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   93ce4:	e0bffd17 	ldw	r2,-12(fp)
   93ce8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   93cec:	d0e73517 	ldw	r3,-25388(gp)
   93cf0:	e0bffd17 	ldw	r2,-12(fp)
   93cf4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   93cf8:	e0bffd17 	ldw	r2,-12(fp)
   93cfc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   93d00:	e0bffd17 	ldw	r2,-12(fp)
   93d04:	d0a73515 	stw	r2,-25388(gp)
   93d08:	e0bff717 	ldw	r2,-36(fp)
   93d0c:	e0bffa15 	stw	r2,-24(fp)
   93d10:	e0bffa17 	ldw	r2,-24(fp)
   93d14:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   93d18:	e0bff503 	ldbu	r2,-44(fp)
   93d1c:	10800058 	cmpnei	r2,r2,1
   93d20:	1000011e 	bne	r2,zero,93d28 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   93d24:	00901d40 	call	901d4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   93d28:	e0bfff17 	ldw	r2,-4(fp)
   93d2c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   93d30:	e03ff615 	stw	zero,-40(fp)
             break;
   93d34:	00000a06 	br	93d60 <OSSemDel+0x228>
   93d38:	e0bff717 	ldw	r2,-36(fp)
   93d3c:	e0bffb15 	stw	r2,-20(fp)
   93d40:	e0bffb17 	ldw	r2,-20(fp)
   93d44:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   93d48:	e0bfff17 	ldw	r2,-4(fp)
   93d4c:	00c001c4 	movi	r3,7
   93d50:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   93d54:	e0bffd17 	ldw	r2,-12(fp)
   93d58:	e0bff615 	stw	r2,-40(fp)
             break;
   93d5c:	0001883a 	nop
    }
    return (pevent_return);
   93d60:	e0bff617 	ldw	r2,-40(fp)
}
   93d64:	e037883a 	mov	sp,fp
   93d68:	dfc00117 	ldw	ra,4(sp)
   93d6c:	df000017 	ldw	fp,0(sp)
   93d70:	dec00204 	addi	sp,sp,8
   93d74:	f800283a 	ret

00093d78 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   93d78:	defff504 	addi	sp,sp,-44
   93d7c:	dfc00a15 	stw	ra,40(sp)
   93d80:	df000915 	stw	fp,36(sp)
   93d84:	df000904 	addi	fp,sp,36
   93d88:	e13ffd15 	stw	r4,-12(fp)
   93d8c:	2805883a 	mov	r2,r5
   93d90:	e1bfff15 	stw	r6,-4(fp)
   93d94:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93d98:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   93d9c:	e0bfff17 	ldw	r2,-4(fp)
   93da0:	10007226 	beq	r2,zero,93f6c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   93da4:	e0bffd17 	ldw	r2,-12(fp)
   93da8:	1000041e 	bne	r2,zero,93dbc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   93dac:	e0bfff17 	ldw	r2,-4(fp)
   93db0:	00c00104 	movi	r3,4
   93db4:	10c00005 	stb	r3,0(r2)
        return;
   93db8:	00006d06 	br	93f70 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   93dbc:	e0bffd17 	ldw	r2,-12(fp)
   93dc0:	10800003 	ldbu	r2,0(r2)
   93dc4:	10803fcc 	andi	r2,r2,255
   93dc8:	108000e0 	cmpeqi	r2,r2,3
   93dcc:	1000041e 	bne	r2,zero,93de0 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   93dd0:	e0bfff17 	ldw	r2,-4(fp)
   93dd4:	00c00044 	movi	r3,1
   93dd8:	10c00005 	stb	r3,0(r2)
        return;
   93ddc:	00006406 	br	93f70 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   93de0:	d0a73603 	ldbu	r2,-25384(gp)
   93de4:	10803fcc 	andi	r2,r2,255
   93de8:	10000426 	beq	r2,zero,93dfc <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   93dec:	e0bfff17 	ldw	r2,-4(fp)
   93df0:	00c00084 	movi	r3,2
   93df4:	10c00005 	stb	r3,0(r2)
        return;
   93df8:	00005d06 	br	93f70 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   93dfc:	d0a72803 	ldbu	r2,-25440(gp)
   93e00:	10803fcc 	andi	r2,r2,255
   93e04:	10000426 	beq	r2,zero,93e18 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   93e08:	e0bfff17 	ldw	r2,-4(fp)
   93e0c:	00c00344 	movi	r3,13
   93e10:	10c00005 	stb	r3,0(r2)
        return;
   93e14:	00005606 	br	93f70 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93e18:	0005303a 	rdctl	r2,status
   93e1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93e20:	e0fffc17 	ldw	r3,-16(fp)
   93e24:	00bfff84 	movi	r2,-2
   93e28:	1884703a 	and	r2,r3,r2
   93e2c:	1001703a 	wrctl	status,r2
  
  return context;
   93e30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   93e34:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   93e38:	e0bffd17 	ldw	r2,-12(fp)
   93e3c:	1080020b 	ldhu	r2,8(r2)
   93e40:	10bfffcc 	andi	r2,r2,65535
   93e44:	10000d26 	beq	r2,zero,93e7c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   93e48:	e0bffd17 	ldw	r2,-12(fp)
   93e4c:	1080020b 	ldhu	r2,8(r2)
   93e50:	10bfffc4 	addi	r2,r2,-1
   93e54:	1007883a 	mov	r3,r2
   93e58:	e0bffd17 	ldw	r2,-12(fp)
   93e5c:	10c0020d 	sth	r3,8(r2)
   93e60:	e0bff717 	ldw	r2,-36(fp)
   93e64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93e68:	e0bff817 	ldw	r2,-32(fp)
   93e6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   93e70:	e0bfff17 	ldw	r2,-4(fp)
   93e74:	10000005 	stb	zero,0(r2)
        return;
   93e78:	00003d06 	br	93f70 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   93e7c:	d0a73717 	ldw	r2,-25380(gp)
   93e80:	d0e73717 	ldw	r3,-25380(gp)
   93e84:	18c00c03 	ldbu	r3,48(r3)
   93e88:	18c00054 	ori	r3,r3,1
   93e8c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   93e90:	d0a73717 	ldw	r2,-25380(gp)
   93e94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   93e98:	d0a73717 	ldw	r2,-25380(gp)
   93e9c:	e0fffe0b 	ldhu	r3,-8(fp)
   93ea0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   93ea4:	e13ffd17 	ldw	r4,-12(fp)
   93ea8:	008f9200 	call	8f920 <OS_EventTaskWait>
   93eac:	e0bff717 	ldw	r2,-36(fp)
   93eb0:	e0bffb15 	stw	r2,-20(fp)
   93eb4:	e0bffb17 	ldw	r2,-20(fp)
   93eb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   93ebc:	00901d40 	call	901d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93ec0:	0005303a 	rdctl	r2,status
   93ec4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93ec8:	e0fff917 	ldw	r3,-28(fp)
   93ecc:	00bfff84 	movi	r2,-2
   93ed0:	1884703a 	and	r2,r3,r2
   93ed4:	1001703a 	wrctl	status,r2
  
  return context;
   93ed8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   93edc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   93ee0:	d0a73717 	ldw	r2,-25380(gp)
   93ee4:	10800c43 	ldbu	r2,49(r2)
   93ee8:	10803fcc 	andi	r2,r2,255
   93eec:	10000326 	beq	r2,zero,93efc <OSSemPend+0x184>
   93ef0:	108000a0 	cmpeqi	r2,r2,2
   93ef4:	1000041e 	bne	r2,zero,93f08 <OSSemPend+0x190>
   93ef8:	00000706 	br	93f18 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   93efc:	e0bfff17 	ldw	r2,-4(fp)
   93f00:	10000005 	stb	zero,0(r2)
             break;
   93f04:	00000c06 	br	93f38 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   93f08:	e0bfff17 	ldw	r2,-4(fp)
   93f0c:	00c00384 	movi	r3,14
   93f10:	10c00005 	stb	r3,0(r2)
             break;
   93f14:	00000806 	br	93f38 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   93f18:	d0a73717 	ldw	r2,-25380(gp)
   93f1c:	e17ffd17 	ldw	r5,-12(fp)
   93f20:	1009883a 	mov	r4,r2
   93f24:	008fb800 	call	8fb80 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   93f28:	e0bfff17 	ldw	r2,-4(fp)
   93f2c:	00c00284 	movi	r3,10
   93f30:	10c00005 	stb	r3,0(r2)
             break;
   93f34:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   93f38:	d0a73717 	ldw	r2,-25380(gp)
   93f3c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   93f40:	d0a73717 	ldw	r2,-25380(gp)
   93f44:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   93f48:	d0a73717 	ldw	r2,-25380(gp)
   93f4c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   93f50:	d0a73717 	ldw	r2,-25380(gp)
   93f54:	10000815 	stw	zero,32(r2)
   93f58:	e0bff717 	ldw	r2,-36(fp)
   93f5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93f60:	e0bffa17 	ldw	r2,-24(fp)
   93f64:	1001703a 	wrctl	status,r2
   93f68:	00000106 	br	93f70 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   93f6c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   93f70:	e037883a 	mov	sp,fp
   93f74:	dfc00117 	ldw	ra,4(sp)
   93f78:	df000017 	ldw	fp,0(sp)
   93f7c:	dec00204 	addi	sp,sp,8
   93f80:	f800283a 	ret

00093f84 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   93f84:	defff604 	addi	sp,sp,-40
   93f88:	dfc00915 	stw	ra,36(sp)
   93f8c:	df000815 	stw	fp,32(sp)
   93f90:	df000804 	addi	fp,sp,32
   93f94:	e13ffd15 	stw	r4,-12(fp)
   93f98:	2805883a 	mov	r2,r5
   93f9c:	e1bfff15 	stw	r6,-4(fp)
   93fa0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93fa4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   93fa8:	e0bfff17 	ldw	r2,-4(fp)
   93fac:	1000021e 	bne	r2,zero,93fb8 <OSSemPendAbort+0x34>
        return (0);
   93fb0:	0005883a 	mov	r2,zero
   93fb4:	00004906 	br	940dc <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   93fb8:	e0bffd17 	ldw	r2,-12(fp)
   93fbc:	1000051e 	bne	r2,zero,93fd4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   93fc0:	e0bfff17 	ldw	r2,-4(fp)
   93fc4:	00c00104 	movi	r3,4
   93fc8:	10c00005 	stb	r3,0(r2)
        return (0);
   93fcc:	0005883a 	mov	r2,zero
   93fd0:	00004206 	br	940dc <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   93fd4:	e0bffd17 	ldw	r2,-12(fp)
   93fd8:	10800003 	ldbu	r2,0(r2)
   93fdc:	10803fcc 	andi	r2,r2,255
   93fe0:	108000e0 	cmpeqi	r2,r2,3
   93fe4:	1000051e 	bne	r2,zero,93ffc <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   93fe8:	e0bfff17 	ldw	r2,-4(fp)
   93fec:	00c00044 	movi	r3,1
   93ff0:	10c00005 	stb	r3,0(r2)
        return (0);
   93ff4:	0005883a 	mov	r2,zero
   93ff8:	00003806 	br	940dc <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93ffc:	0005303a 	rdctl	r2,status
   94000:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94004:	e0fffc17 	ldw	r3,-16(fp)
   94008:	00bfff84 	movi	r2,-2
   9400c:	1884703a 	and	r2,r3,r2
   94010:	1001703a 	wrctl	status,r2
  
  return context;
   94014:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   94018:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   9401c:	e0bffd17 	ldw	r2,-12(fp)
   94020:	10800283 	ldbu	r2,10(r2)
   94024:	10803fcc 	andi	r2,r2,255
   94028:	10002526 	beq	r2,zero,940c0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   9402c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   94030:	e0bffe03 	ldbu	r2,-8(fp)
   94034:	10800060 	cmpeqi	r2,r2,1
   94038:	10000e26 	beq	r2,zero,94074 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   9403c:	00000806 	br	94060 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   94040:	01c00084 	movi	r7,2
   94044:	01800044 	movi	r6,1
   94048:	000b883a 	mov	r5,zero
   9404c:	e13ffd17 	ldw	r4,-12(fp)
   94050:	008f7880 	call	8f788 <OS_EventTaskRdy>
                     nbr_tasks++;
   94054:	e0bff803 	ldbu	r2,-32(fp)
   94058:	10800044 	addi	r2,r2,1
   9405c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   94060:	e0bffd17 	ldw	r2,-12(fp)
   94064:	10800283 	ldbu	r2,10(r2)
   94068:	10803fcc 	andi	r2,r2,255
   9406c:	103ff41e 	bne	r2,zero,94040 <__alt_data_end+0xfffd5840>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   94070:	00000906 	br	94098 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   94074:	01c00084 	movi	r7,2
   94078:	01800044 	movi	r6,1
   9407c:	000b883a 	mov	r5,zero
   94080:	e13ffd17 	ldw	r4,-12(fp)
   94084:	008f7880 	call	8f788 <OS_EventTaskRdy>
                 nbr_tasks++;
   94088:	e0bff803 	ldbu	r2,-32(fp)
   9408c:	10800044 	addi	r2,r2,1
   94090:	e0bff805 	stb	r2,-32(fp)
                 break;
   94094:	0001883a 	nop
   94098:	e0bff917 	ldw	r2,-28(fp)
   9409c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   940a0:	e0bffa17 	ldw	r2,-24(fp)
   940a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   940a8:	00901d40 	call	901d4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   940ac:	e0bfff17 	ldw	r2,-4(fp)
   940b0:	00c00384 	movi	r3,14
   940b4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   940b8:	e0bff803 	ldbu	r2,-32(fp)
   940bc:	00000706 	br	940dc <OSSemPendAbort+0x158>
   940c0:	e0bff917 	ldw	r2,-28(fp)
   940c4:	e0bffb15 	stw	r2,-20(fp)
   940c8:	e0bffb17 	ldw	r2,-20(fp)
   940cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   940d0:	e0bfff17 	ldw	r2,-4(fp)
   940d4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   940d8:	0005883a 	mov	r2,zero
}
   940dc:	e037883a 	mov	sp,fp
   940e0:	dfc00117 	ldw	ra,4(sp)
   940e4:	df000017 	ldw	fp,0(sp)
   940e8:	dec00204 	addi	sp,sp,8
   940ec:	f800283a 	ret

000940f0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   940f0:	defff804 	addi	sp,sp,-32
   940f4:	dfc00715 	stw	ra,28(sp)
   940f8:	df000615 	stw	fp,24(sp)
   940fc:	df000604 	addi	fp,sp,24
   94100:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   94104:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   94108:	e0bfff17 	ldw	r2,-4(fp)
   9410c:	1000021e 	bne	r2,zero,94118 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   94110:	00800104 	movi	r2,4
   94114:	00003506 	br	941ec <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   94118:	e0bfff17 	ldw	r2,-4(fp)
   9411c:	10800003 	ldbu	r2,0(r2)
   94120:	10803fcc 	andi	r2,r2,255
   94124:	108000e0 	cmpeqi	r2,r2,3
   94128:	1000021e 	bne	r2,zero,94134 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   9412c:	00800044 	movi	r2,1
   94130:	00002e06 	br	941ec <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94134:	0005303a 	rdctl	r2,status
   94138:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9413c:	e0fffe17 	ldw	r3,-8(fp)
   94140:	00bfff84 	movi	r2,-2
   94144:	1884703a 	and	r2,r3,r2
   94148:	1001703a 	wrctl	status,r2
  
  return context;
   9414c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   94150:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   94154:	e0bfff17 	ldw	r2,-4(fp)
   94158:	10800283 	ldbu	r2,10(r2)
   9415c:	10803fcc 	andi	r2,r2,255
   94160:	10000c26 	beq	r2,zero,94194 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   94164:	000f883a 	mov	r7,zero
   94168:	01800044 	movi	r6,1
   9416c:	000b883a 	mov	r5,zero
   94170:	e13fff17 	ldw	r4,-4(fp)
   94174:	008f7880 	call	8f788 <OS_EventTaskRdy>
   94178:	e0bffa17 	ldw	r2,-24(fp)
   9417c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94180:	e0bffb17 	ldw	r2,-20(fp)
   94184:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   94188:	00901d40 	call	901d4 <OS_Sched>
        return (OS_ERR_NONE);
   9418c:	0005883a 	mov	r2,zero
   94190:	00001606 	br	941ec <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   94194:	e0bfff17 	ldw	r2,-4(fp)
   94198:	1080020b 	ldhu	r2,8(r2)
   9419c:	10ffffcc 	andi	r3,r2,65535
   941a0:	00bfffd4 	movui	r2,65535
   941a4:	18800c26 	beq	r3,r2,941d8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   941a8:	e0bfff17 	ldw	r2,-4(fp)
   941ac:	1080020b 	ldhu	r2,8(r2)
   941b0:	10800044 	addi	r2,r2,1
   941b4:	1007883a 	mov	r3,r2
   941b8:	e0bfff17 	ldw	r2,-4(fp)
   941bc:	10c0020d 	sth	r3,8(r2)
   941c0:	e0bffa17 	ldw	r2,-24(fp)
   941c4:	e0bffc15 	stw	r2,-16(fp)
   941c8:	e0bffc17 	ldw	r2,-16(fp)
   941cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   941d0:	0005883a 	mov	r2,zero
   941d4:	00000506 	br	941ec <OSSemPost+0xfc>
   941d8:	e0bffa17 	ldw	r2,-24(fp)
   941dc:	e0bffd15 	stw	r2,-12(fp)
   941e0:	e0bffd17 	ldw	r2,-12(fp)
   941e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   941e8:	00800c84 	movi	r2,50
}
   941ec:	e037883a 	mov	sp,fp
   941f0:	dfc00117 	ldw	ra,4(sp)
   941f4:	df000017 	ldw	fp,0(sp)
   941f8:	dec00204 	addi	sp,sp,8
   941fc:	f800283a 	ret

00094200 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   94200:	defff704 	addi	sp,sp,-36
   94204:	df000815 	stw	fp,32(sp)
   94208:	df000804 	addi	fp,sp,32
   9420c:	e13ffe15 	stw	r4,-8(fp)
   94210:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   94214:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   94218:	e0bffe17 	ldw	r2,-8(fp)
   9421c:	1000021e 	bne	r2,zero,94228 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   94220:	00800104 	movi	r2,4
   94224:	00003606 	br	94300 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   94228:	e0bfff17 	ldw	r2,-4(fp)
   9422c:	1000021e 	bne	r2,zero,94238 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   94230:	00800244 	movi	r2,9
   94234:	00003206 	br	94300 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   94238:	e0bffe17 	ldw	r2,-8(fp)
   9423c:	10800003 	ldbu	r2,0(r2)
   94240:	10803fcc 	andi	r2,r2,255
   94244:	108000e0 	cmpeqi	r2,r2,3
   94248:	1000021e 	bne	r2,zero,94254 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   9424c:	00800044 	movi	r2,1
   94250:	00002b06 	br	94300 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94254:	0005303a 	rdctl	r2,status
   94258:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9425c:	e0fffd17 	ldw	r3,-12(fp)
   94260:	00bfff84 	movi	r2,-2
   94264:	1884703a 	and	r2,r3,r2
   94268:	1001703a 	wrctl	status,r2
  
  return context;
   9426c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   94270:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   94274:	e0bffe17 	ldw	r2,-8(fp)
   94278:	10c00283 	ldbu	r3,10(r2)
   9427c:	e0bfff17 	ldw	r2,-4(fp)
   94280:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   94284:	e0bffe17 	ldw	r2,-8(fp)
   94288:	108002c4 	addi	r2,r2,11
   9428c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   94290:	e0bfff17 	ldw	r2,-4(fp)
   94294:	10800084 	addi	r2,r2,2
   94298:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   9429c:	e03ffa05 	stb	zero,-24(fp)
   942a0:	00000b06 	br	942d0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   942a4:	e0bff917 	ldw	r2,-28(fp)
   942a8:	10c00044 	addi	r3,r2,1
   942ac:	e0fff915 	stw	r3,-28(fp)
   942b0:	e0fff817 	ldw	r3,-32(fp)
   942b4:	19000044 	addi	r4,r3,1
   942b8:	e13ff815 	stw	r4,-32(fp)
   942bc:	18c00003 	ldbu	r3,0(r3)
   942c0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   942c4:	e0bffa03 	ldbu	r2,-24(fp)
   942c8:	10800044 	addi	r2,r2,1
   942cc:	e0bffa05 	stb	r2,-24(fp)
   942d0:	e0bffa03 	ldbu	r2,-24(fp)
   942d4:	108000f0 	cmpltui	r2,r2,3
   942d8:	103ff21e 	bne	r2,zero,942a4 <__alt_data_end+0xfffd5aa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   942dc:	e0bffe17 	ldw	r2,-8(fp)
   942e0:	10c0020b 	ldhu	r3,8(r2)
   942e4:	e0bfff17 	ldw	r2,-4(fp)
   942e8:	10c0000d 	sth	r3,0(r2)
   942ec:	e0bffb17 	ldw	r2,-20(fp)
   942f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   942f4:	e0bffc17 	ldw	r2,-16(fp)
   942f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   942fc:	0005883a 	mov	r2,zero
}
   94300:	e037883a 	mov	sp,fp
   94304:	df000017 	ldw	fp,0(sp)
   94308:	dec00104 	addi	sp,sp,4
   9430c:	f800283a 	ret

00094310 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   94310:	defff904 	addi	sp,sp,-28
   94314:	df000615 	stw	fp,24(sp)
   94318:	df000604 	addi	fp,sp,24
   9431c:	e13ffd15 	stw	r4,-12(fp)
   94320:	2805883a 	mov	r2,r5
   94324:	e1bfff15 	stw	r6,-4(fp)
   94328:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   9432c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   94330:	e0bfff17 	ldw	r2,-4(fp)
   94334:	10003126 	beq	r2,zero,943fc <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   94338:	e0bffd17 	ldw	r2,-12(fp)
   9433c:	1000041e 	bne	r2,zero,94350 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   94340:	e0bfff17 	ldw	r2,-4(fp)
   94344:	00c00104 	movi	r3,4
   94348:	10c00005 	stb	r3,0(r2)
        return;
   9434c:	00002c06 	br	94400 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   94350:	e0bffd17 	ldw	r2,-12(fp)
   94354:	10800003 	ldbu	r2,0(r2)
   94358:	10803fcc 	andi	r2,r2,255
   9435c:	108000e0 	cmpeqi	r2,r2,3
   94360:	1000041e 	bne	r2,zero,94374 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   94364:	e0bfff17 	ldw	r2,-4(fp)
   94368:	00c00044 	movi	r3,1
   9436c:	10c00005 	stb	r3,0(r2)
        return;
   94370:	00002306 	br	94400 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94374:	0005303a 	rdctl	r2,status
   94378:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9437c:	e0fffc17 	ldw	r3,-16(fp)
   94380:	00bfff84 	movi	r2,-2
   94384:	1884703a 	and	r2,r3,r2
   94388:	1001703a 	wrctl	status,r2
  
  return context;
   9438c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   94390:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   94394:	e0bfff17 	ldw	r2,-4(fp)
   94398:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   9439c:	e0bffd17 	ldw	r2,-12(fp)
   943a0:	1080020b 	ldhu	r2,8(r2)
   943a4:	10bfffcc 	andi	r2,r2,65535
   943a8:	10000426 	beq	r2,zero,943bc <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   943ac:	e0bffd17 	ldw	r2,-12(fp)
   943b0:	e0fffe0b 	ldhu	r3,-8(fp)
   943b4:	10c0020d 	sth	r3,8(r2)
   943b8:	00000b06 	br	943e8 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   943bc:	e0bffd17 	ldw	r2,-12(fp)
   943c0:	10800283 	ldbu	r2,10(r2)
   943c4:	10803fcc 	andi	r2,r2,255
   943c8:	1000041e 	bne	r2,zero,943dc <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   943cc:	e0bffd17 	ldw	r2,-12(fp)
   943d0:	e0fffe0b 	ldhu	r3,-8(fp)
   943d4:	10c0020d 	sth	r3,8(r2)
   943d8:	00000306 	br	943e8 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   943dc:	e0bfff17 	ldw	r2,-4(fp)
   943e0:	00c01244 	movi	r3,73
   943e4:	10c00005 	stb	r3,0(r2)
   943e8:	e0bffa17 	ldw	r2,-24(fp)
   943ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   943f0:	e0bffb17 	ldw	r2,-20(fp)
   943f4:	1001703a 	wrctl	status,r2
   943f8:	00000106 	br	94400 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   943fc:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   94400:	e037883a 	mov	sp,fp
   94404:	df000017 	ldw	fp,0(sp)
   94408:	dec00104 	addi	sp,sp,4
   9440c:	f800283a 	ret

00094410 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   94410:	defff104 	addi	sp,sp,-60
   94414:	dfc00e15 	stw	ra,56(sp)
   94418:	df000d15 	stw	fp,52(sp)
   9441c:	df000d04 	addi	fp,sp,52
   94420:	2007883a 	mov	r3,r4
   94424:	2805883a 	mov	r2,r5
   94428:	e0fffe05 	stb	r3,-8(fp)
   9442c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   94430:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   94434:	e0bffe03 	ldbu	r2,-8(fp)
   94438:	10800530 	cmpltui	r2,r2,20
   9443c:	1000051e 	bne	r2,zero,94454 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   94440:	e0bffe03 	ldbu	r2,-8(fp)
   94444:	10803fe0 	cmpeqi	r2,r2,255
   94448:	1000021e 	bne	r2,zero,94454 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   9444c:	00800a84 	movi	r2,42
   94450:	00012606 	br	948ec <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   94454:	e0bfff03 	ldbu	r2,-4(fp)
   94458:	10800530 	cmpltui	r2,r2,20
   9445c:	1000021e 	bne	r2,zero,94468 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   94460:	00800a84 	movi	r2,42
   94464:	00012106 	br	948ec <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94468:	0005303a 	rdctl	r2,status
   9446c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94470:	e0fffd17 	ldw	r3,-12(fp)
   94474:	00bfff84 	movi	r2,-2
   94478:	1884703a 	and	r2,r3,r2
   9447c:	1001703a 	wrctl	status,r2
  
  return context;
   94480:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   94484:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   94488:	e0ffff03 	ldbu	r3,-4(fp)
   9448c:	008002b4 	movhi	r2,10
   94490:	108c3704 	addi	r2,r2,12508
   94494:	18c7883a 	add	r3,r3,r3
   94498:	18c7883a 	add	r3,r3,r3
   9449c:	10c5883a 	add	r2,r2,r3
   944a0:	10800017 	ldw	r2,0(r2)
   944a4:	10000626 	beq	r2,zero,944c0 <OSTaskChangePrio+0xb0>
   944a8:	e0bff517 	ldw	r2,-44(fp)
   944ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   944b0:	e0bff617 	ldw	r2,-40(fp)
   944b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   944b8:	00800a04 	movi	r2,40
   944bc:	00010b06 	br	948ec <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   944c0:	e0bffe03 	ldbu	r2,-8(fp)
   944c4:	10803fd8 	cmpnei	r2,r2,255
   944c8:	1000031e 	bne	r2,zero,944d8 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   944cc:	d0a73717 	ldw	r2,-25380(gp)
   944d0:	10800c83 	ldbu	r2,50(r2)
   944d4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   944d8:	e0fffe03 	ldbu	r3,-8(fp)
   944dc:	008002b4 	movhi	r2,10
   944e0:	108c3704 	addi	r2,r2,12508
   944e4:	18c7883a 	add	r3,r3,r3
   944e8:	18c7883a 	add	r3,r3,r3
   944ec:	10c5883a 	add	r2,r2,r3
   944f0:	10800017 	ldw	r2,0(r2)
   944f4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   944f8:	e0bff817 	ldw	r2,-32(fp)
   944fc:	1000061e 	bne	r2,zero,94518 <OSTaskChangePrio+0x108>
   94500:	e0bff517 	ldw	r2,-44(fp)
   94504:	e0bff715 	stw	r2,-36(fp)
   94508:	e0bff717 	ldw	r2,-36(fp)
   9450c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   94510:	00800a44 	movi	r2,41
   94514:	0000f506 	br	948ec <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   94518:	e0bff817 	ldw	r2,-32(fp)
   9451c:	10800058 	cmpnei	r2,r2,1
   94520:	1000061e 	bne	r2,zero,9453c <OSTaskChangePrio+0x12c>
   94524:	e0bff517 	ldw	r2,-44(fp)
   94528:	e0bff915 	stw	r2,-28(fp)
   9452c:	e0bff917 	ldw	r2,-28(fp)
   94530:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   94534:	008010c4 	movi	r2,67
   94538:	0000ec06 	br	948ec <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   9453c:	e0bfff03 	ldbu	r2,-4(fp)
   94540:	1004d0fa 	srli	r2,r2,3
   94544:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   94548:	e0bfff03 	ldbu	r2,-4(fp)
   9454c:	108001cc 	andi	r2,r2,7
   94550:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   94554:	e0bffb03 	ldbu	r2,-20(fp)
   94558:	00c00044 	movi	r3,1
   9455c:	1884983a 	sll	r2,r3,r2
   94560:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   94564:	e0bffb43 	ldbu	r2,-19(fp)
   94568:	00c00044 	movi	r3,1
   9456c:	1884983a 	sll	r2,r3,r2
   94570:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   94574:	e0fffe03 	ldbu	r3,-8(fp)
   94578:	008002b4 	movhi	r2,10
   9457c:	108c3704 	addi	r2,r2,12508
   94580:	18c7883a 	add	r3,r3,r3
   94584:	18c7883a 	add	r3,r3,r3
   94588:	10c5883a 	add	r2,r2,r3
   9458c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   94590:	e0ffff03 	ldbu	r3,-4(fp)
   94594:	008002b4 	movhi	r2,10
   94598:	108c3704 	addi	r2,r2,12508
   9459c:	18c7883a 	add	r3,r3,r3
   945a0:	18c7883a 	add	r3,r3,r3
   945a4:	10c5883a 	add	r2,r2,r3
   945a8:	e0fff817 	ldw	r3,-32(fp)
   945ac:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   945b0:	e0bff817 	ldw	r2,-32(fp)
   945b4:	10800d03 	ldbu	r2,52(r2)
   945b8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   945bc:	e0bff817 	ldw	r2,-32(fp)
   945c0:	10800d83 	ldbu	r2,54(r2)
   945c4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   945c8:	e0bff817 	ldw	r2,-32(fp)
   945cc:	10800d43 	ldbu	r2,53(r2)
   945d0:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   945d4:	e0fffc03 	ldbu	r3,-16(fp)
   945d8:	d0a73444 	addi	r2,gp,-25391
   945dc:	1885883a 	add	r2,r3,r2
   945e0:	10c00003 	ldbu	r3,0(r2)
   945e4:	e0bffc83 	ldbu	r2,-14(fp)
   945e8:	1884703a 	and	r2,r3,r2
   945ec:	10803fcc 	andi	r2,r2,255
   945f0:	10002826 	beq	r2,zero,94694 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   945f4:	e0fffc03 	ldbu	r3,-16(fp)
   945f8:	e13ffc03 	ldbu	r4,-16(fp)
   945fc:	d0a73444 	addi	r2,gp,-25391
   94600:	2085883a 	add	r2,r4,r2
   94604:	10800003 	ldbu	r2,0(r2)
   94608:	1009883a 	mov	r4,r2
   9460c:	e0bffc83 	ldbu	r2,-14(fp)
   94610:	0084303a 	nor	r2,zero,r2
   94614:	2084703a 	and	r2,r4,r2
   94618:	1009883a 	mov	r4,r2
   9461c:	d0a73444 	addi	r2,gp,-25391
   94620:	1885883a 	add	r2,r3,r2
   94624:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   94628:	e0fffc03 	ldbu	r3,-16(fp)
   9462c:	d0a73444 	addi	r2,gp,-25391
   94630:	1885883a 	add	r2,r3,r2
   94634:	10800003 	ldbu	r2,0(r2)
   94638:	10803fcc 	andi	r2,r2,255
   9463c:	1000061e 	bne	r2,zero,94658 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   94640:	e0bffc43 	ldbu	r2,-15(fp)
   94644:	0084303a 	nor	r2,zero,r2
   94648:	1007883a 	mov	r3,r2
   9464c:	d0a73403 	ldbu	r2,-25392(gp)
   94650:	1884703a 	and	r2,r3,r2
   94654:	d0a73405 	stb	r2,-25392(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   94658:	d0e73403 	ldbu	r3,-25392(gp)
   9465c:	e0bffb83 	ldbu	r2,-18(fp)
   94660:	1884b03a 	or	r2,r3,r2
   94664:	d0a73405 	stb	r2,-25392(gp)
         OSRdyTbl[y_new] |= bitx_new;
   94668:	e0fffb03 	ldbu	r3,-20(fp)
   9466c:	e13ffb03 	ldbu	r4,-20(fp)
   94670:	d0a73444 	addi	r2,gp,-25391
   94674:	2085883a 	add	r2,r4,r2
   94678:	11000003 	ldbu	r4,0(r2)
   9467c:	e0bffbc3 	ldbu	r2,-17(fp)
   94680:	2084b03a 	or	r2,r4,r2
   94684:	1009883a 	mov	r4,r2
   94688:	d0a73444 	addi	r2,gp,-25391
   9468c:	1885883a 	add	r2,r3,r2
   94690:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   94694:	e0bff817 	ldw	r2,-32(fp)
   94698:	10800717 	ldw	r2,28(r2)
   9469c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   946a0:	e0bff317 	ldw	r2,-52(fp)
   946a4:	10003326 	beq	r2,zero,94774 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   946a8:	e0bffc03 	ldbu	r2,-16(fp)
   946ac:	e0fffc03 	ldbu	r3,-16(fp)
   946b0:	e13ff317 	ldw	r4,-52(fp)
   946b4:	20c7883a 	add	r3,r4,r3
   946b8:	18c002c4 	addi	r3,r3,11
   946bc:	18c00003 	ldbu	r3,0(r3)
   946c0:	1809883a 	mov	r4,r3
   946c4:	e0fffc83 	ldbu	r3,-14(fp)
   946c8:	00c6303a 	nor	r3,zero,r3
   946cc:	20c6703a 	and	r3,r4,r3
   946d0:	1809883a 	mov	r4,r3
   946d4:	e0fff317 	ldw	r3,-52(fp)
   946d8:	1885883a 	add	r2,r3,r2
   946dc:	108002c4 	addi	r2,r2,11
   946e0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   946e4:	e0bffc03 	ldbu	r2,-16(fp)
   946e8:	e0fff317 	ldw	r3,-52(fp)
   946ec:	1885883a 	add	r2,r3,r2
   946f0:	108002c4 	addi	r2,r2,11
   946f4:	10800003 	ldbu	r2,0(r2)
   946f8:	10803fcc 	andi	r2,r2,255
   946fc:	1000091e 	bne	r2,zero,94724 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   94700:	e0bff317 	ldw	r2,-52(fp)
   94704:	10800283 	ldbu	r2,10(r2)
   94708:	1007883a 	mov	r3,r2
   9470c:	e0bffc43 	ldbu	r2,-15(fp)
   94710:	0084303a 	nor	r2,zero,r2
   94714:	1884703a 	and	r2,r3,r2
   94718:	1007883a 	mov	r3,r2
   9471c:	e0bff317 	ldw	r2,-52(fp)
   94720:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   94724:	e0bff317 	ldw	r2,-52(fp)
   94728:	10c00283 	ldbu	r3,10(r2)
   9472c:	e0bffb83 	ldbu	r2,-18(fp)
   94730:	1884b03a 	or	r2,r3,r2
   94734:	1007883a 	mov	r3,r2
   94738:	e0bff317 	ldw	r2,-52(fp)
   9473c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   94740:	e0bffb03 	ldbu	r2,-20(fp)
   94744:	e0fffb03 	ldbu	r3,-20(fp)
   94748:	e13ff317 	ldw	r4,-52(fp)
   9474c:	20c7883a 	add	r3,r4,r3
   94750:	18c002c4 	addi	r3,r3,11
   94754:	19000003 	ldbu	r4,0(r3)
   94758:	e0fffbc3 	ldbu	r3,-17(fp)
   9475c:	20c6b03a 	or	r3,r4,r3
   94760:	1809883a 	mov	r4,r3
   94764:	e0fff317 	ldw	r3,-52(fp)
   94768:	1885883a 	add	r2,r3,r2
   9476c:	108002c4 	addi	r2,r2,11
   94770:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   94774:	e0bff817 	ldw	r2,-32(fp)
   94778:	10800817 	ldw	r2,32(r2)
   9477c:	10004226 	beq	r2,zero,94888 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   94780:	e0bff817 	ldw	r2,-32(fp)
   94784:	10800817 	ldw	r2,32(r2)
   94788:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   9478c:	e0bff417 	ldw	r2,-48(fp)
   94790:	10800017 	ldw	r2,0(r2)
   94794:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   94798:	00003906 	br	94880 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   9479c:	e0bffc03 	ldbu	r2,-16(fp)
   947a0:	e0fffc03 	ldbu	r3,-16(fp)
   947a4:	e13ff317 	ldw	r4,-52(fp)
   947a8:	20c7883a 	add	r3,r4,r3
   947ac:	18c002c4 	addi	r3,r3,11
   947b0:	18c00003 	ldbu	r3,0(r3)
   947b4:	1809883a 	mov	r4,r3
   947b8:	e0fffc83 	ldbu	r3,-14(fp)
   947bc:	00c6303a 	nor	r3,zero,r3
   947c0:	20c6703a 	and	r3,r4,r3
   947c4:	1809883a 	mov	r4,r3
   947c8:	e0fff317 	ldw	r3,-52(fp)
   947cc:	1885883a 	add	r2,r3,r2
   947d0:	108002c4 	addi	r2,r2,11
   947d4:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   947d8:	e0bffc03 	ldbu	r2,-16(fp)
   947dc:	e0fff317 	ldw	r3,-52(fp)
   947e0:	1885883a 	add	r2,r3,r2
   947e4:	108002c4 	addi	r2,r2,11
   947e8:	10800003 	ldbu	r2,0(r2)
   947ec:	10803fcc 	andi	r2,r2,255
   947f0:	1000091e 	bne	r2,zero,94818 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   947f4:	e0bff317 	ldw	r2,-52(fp)
   947f8:	10800283 	ldbu	r2,10(r2)
   947fc:	1007883a 	mov	r3,r2
   94800:	e0bffc43 	ldbu	r2,-15(fp)
   94804:	0084303a 	nor	r2,zero,r2
   94808:	1884703a 	and	r2,r3,r2
   9480c:	1007883a 	mov	r3,r2
   94810:	e0bff317 	ldw	r2,-52(fp)
   94814:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   94818:	e0bff317 	ldw	r2,-52(fp)
   9481c:	10c00283 	ldbu	r3,10(r2)
   94820:	e0bffb83 	ldbu	r2,-18(fp)
   94824:	1884b03a 	or	r2,r3,r2
   94828:	1007883a 	mov	r3,r2
   9482c:	e0bff317 	ldw	r2,-52(fp)
   94830:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   94834:	e0bffb03 	ldbu	r2,-20(fp)
   94838:	e0fffb03 	ldbu	r3,-20(fp)
   9483c:	e13ff317 	ldw	r4,-52(fp)
   94840:	20c7883a 	add	r3,r4,r3
   94844:	18c002c4 	addi	r3,r3,11
   94848:	19000003 	ldbu	r4,0(r3)
   9484c:	e0fffbc3 	ldbu	r3,-17(fp)
   94850:	20c6b03a 	or	r3,r4,r3
   94854:	1809883a 	mov	r4,r3
   94858:	e0fff317 	ldw	r3,-52(fp)
   9485c:	1885883a 	add	r2,r3,r2
   94860:	108002c4 	addi	r2,r2,11
   94864:	11000005 	stb	r4,0(r2)
            pevents++;
   94868:	e0bff417 	ldw	r2,-48(fp)
   9486c:	10800104 	addi	r2,r2,4
   94870:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   94874:	e0bff417 	ldw	r2,-48(fp)
   94878:	10800017 	ldw	r2,0(r2)
   9487c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   94880:	e0bff317 	ldw	r2,-52(fp)
   94884:	103fc51e 	bne	r2,zero,9479c <__alt_data_end+0xfffd5f9c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   94888:	e0bff817 	ldw	r2,-32(fp)
   9488c:	e0ffff03 	ldbu	r3,-4(fp)
   94890:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   94894:	e0bff817 	ldw	r2,-32(fp)
   94898:	e0fffb03 	ldbu	r3,-20(fp)
   9489c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   948a0:	e0bff817 	ldw	r2,-32(fp)
   948a4:	e0fffb43 	ldbu	r3,-19(fp)
   948a8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   948ac:	e0bff817 	ldw	r2,-32(fp)
   948b0:	e0fffb83 	ldbu	r3,-18(fp)
   948b4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   948b8:	e0bff817 	ldw	r2,-32(fp)
   948bc:	e0fffbc3 	ldbu	r3,-17(fp)
   948c0:	10c00d45 	stb	r3,53(r2)
   948c4:	e0bff517 	ldw	r2,-44(fp)
   948c8:	e0bffa15 	stw	r2,-24(fp)
   948cc:	e0bffa17 	ldw	r2,-24(fp)
   948d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   948d4:	d0a72843 	ldbu	r2,-25439(gp)
   948d8:	10803fcc 	andi	r2,r2,255
   948dc:	10800058 	cmpnei	r2,r2,1
   948e0:	1000011e 	bne	r2,zero,948e8 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   948e4:	00901d40 	call	901d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   948e8:	0005883a 	mov	r2,zero
}
   948ec:	e037883a 	mov	sp,fp
   948f0:	dfc00117 	ldw	ra,4(sp)
   948f4:	df000017 	ldw	fp,0(sp)
   948f8:	dec00204 	addi	sp,sp,8
   948fc:	f800283a 	ret

00094900 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   94900:	deffee04 	addi	sp,sp,-72
   94904:	dfc01115 	stw	ra,68(sp)
   94908:	df001015 	stw	fp,64(sp)
   9490c:	df001004 	addi	fp,sp,64
   94910:	e13ffc15 	stw	r4,-16(fp)
   94914:	e17ffd15 	stw	r5,-12(fp)
   94918:	e1bffe15 	stw	r6,-8(fp)
   9491c:	3805883a 	mov	r2,r7
   94920:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   94924:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   94928:	e0bfff03 	ldbu	r2,-4(fp)
   9492c:	10800570 	cmpltui	r2,r2,21
   94930:	1000021e 	bne	r2,zero,9493c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   94934:	00800a84 	movi	r2,42
   94938:	00005706 	br	94a98 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9493c:	0005303a 	rdctl	r2,status
   94940:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94944:	e0fffb17 	ldw	r3,-20(fp)
   94948:	00bfff84 	movi	r2,-2
   9494c:	1884703a 	and	r2,r3,r2
   94950:	1001703a 	wrctl	status,r2
  
  return context;
   94954:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   94958:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   9495c:	d0a73603 	ldbu	r2,-25384(gp)
   94960:	10803fcc 	andi	r2,r2,255
   94964:	10000626 	beq	r2,zero,94980 <OSTaskCreate+0x80>
   94968:	e0bff317 	ldw	r2,-52(fp)
   9496c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94970:	e0bff417 	ldw	r2,-48(fp)
   94974:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   94978:	00800f04 	movi	r2,60
   9497c:	00004606 	br	94a98 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   94980:	e0ffff03 	ldbu	r3,-4(fp)
   94984:	008002b4 	movhi	r2,10
   94988:	108c3704 	addi	r2,r2,12508
   9498c:	18c7883a 	add	r3,r3,r3
   94990:	18c7883a 	add	r3,r3,r3
   94994:	10c5883a 	add	r2,r2,r3
   94998:	10800017 	ldw	r2,0(r2)
   9499c:	1000391e 	bne	r2,zero,94a84 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   949a0:	e0ffff03 	ldbu	r3,-4(fp)
   949a4:	008002b4 	movhi	r2,10
   949a8:	108c3704 	addi	r2,r2,12508
   949ac:	18c7883a 	add	r3,r3,r3
   949b0:	18c7883a 	add	r3,r3,r3
   949b4:	10c5883a 	add	r2,r2,r3
   949b8:	00c00044 	movi	r3,1
   949bc:	10c00015 	stw	r3,0(r2)
   949c0:	e0bff317 	ldw	r2,-52(fp)
   949c4:	e0bff515 	stw	r2,-44(fp)
   949c8:	e0bff517 	ldw	r2,-44(fp)
   949cc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   949d0:	000f883a 	mov	r7,zero
   949d4:	e1bffe17 	ldw	r6,-8(fp)
   949d8:	e17ffd17 	ldw	r5,-12(fp)
   949dc:	e13ffc17 	ldw	r4,-16(fp)
   949e0:	00979000 	call	97900 <OSTaskStkInit>
   949e4:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   949e8:	e0bfff03 	ldbu	r2,-4(fp)
   949ec:	d8000215 	stw	zero,8(sp)
   949f0:	d8000115 	stw	zero,4(sp)
   949f4:	d8000015 	stw	zero,0(sp)
   949f8:	000f883a 	mov	r7,zero
   949fc:	000d883a 	mov	r6,zero
   94a00:	e17ff717 	ldw	r5,-36(fp)
   94a04:	1009883a 	mov	r4,r2
   94a08:	00905d40 	call	905d4 <OS_TCBInit>
   94a0c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   94a10:	e0bff803 	ldbu	r2,-32(fp)
   94a14:	1000061e 	bne	r2,zero,94a30 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   94a18:	d0a72843 	ldbu	r2,-25439(gp)
   94a1c:	10803fcc 	andi	r2,r2,255
   94a20:	10800058 	cmpnei	r2,r2,1
   94a24:	1000151e 	bne	r2,zero,94a7c <OSTaskCreate+0x17c>
                OS_Sched();
   94a28:	00901d40 	call	901d4 <OS_Sched>
   94a2c:	00001306 	br	94a7c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94a30:	0005303a 	rdctl	r2,status
   94a34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94a38:	e0fffa17 	ldw	r3,-24(fp)
   94a3c:	00bfff84 	movi	r2,-2
   94a40:	1884703a 	and	r2,r3,r2
   94a44:	1001703a 	wrctl	status,r2
  
  return context;
   94a48:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   94a4c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   94a50:	e0ffff03 	ldbu	r3,-4(fp)
   94a54:	008002b4 	movhi	r2,10
   94a58:	108c3704 	addi	r2,r2,12508
   94a5c:	18c7883a 	add	r3,r3,r3
   94a60:	18c7883a 	add	r3,r3,r3
   94a64:	10c5883a 	add	r2,r2,r3
   94a68:	10000015 	stw	zero,0(r2)
   94a6c:	e0bff317 	ldw	r2,-52(fp)
   94a70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94a74:	e0bff617 	ldw	r2,-40(fp)
   94a78:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   94a7c:	e0bff803 	ldbu	r2,-32(fp)
   94a80:	00000506 	br	94a98 <OSTaskCreate+0x198>
   94a84:	e0bff317 	ldw	r2,-52(fp)
   94a88:	e0bff915 	stw	r2,-28(fp)
   94a8c:	e0bff917 	ldw	r2,-28(fp)
   94a90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   94a94:	00800a04 	movi	r2,40
}
   94a98:	e037883a 	mov	sp,fp
   94a9c:	dfc00117 	ldw	ra,4(sp)
   94aa0:	df000017 	ldw	fp,0(sp)
   94aa4:	dec00204 	addi	sp,sp,8
   94aa8:	f800283a 	ret

00094aac <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   94aac:	deffec04 	addi	sp,sp,-80
   94ab0:	dfc01315 	stw	ra,76(sp)
   94ab4:	df001215 	stw	fp,72(sp)
   94ab8:	df001204 	addi	fp,sp,72
   94abc:	e13ffa15 	stw	r4,-24(fp)
   94ac0:	e17ffb15 	stw	r5,-20(fp)
   94ac4:	e1bffc15 	stw	r6,-16(fp)
   94ac8:	3809883a 	mov	r4,r7
   94acc:	e0c00217 	ldw	r3,8(fp)
   94ad0:	e0800617 	ldw	r2,24(fp)
   94ad4:	e13ffd05 	stb	r4,-12(fp)
   94ad8:	e0fffe0d 	sth	r3,-8(fp)
   94adc:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   94ae0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   94ae4:	e0bffd03 	ldbu	r2,-12(fp)
   94ae8:	10800570 	cmpltui	r2,r2,21
   94aec:	1000021e 	bne	r2,zero,94af8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   94af0:	00800a84 	movi	r2,42
   94af4:	00006106 	br	94c7c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94af8:	0005303a 	rdctl	r2,status
   94afc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94b00:	e0fff917 	ldw	r3,-28(fp)
   94b04:	00bfff84 	movi	r2,-2
   94b08:	1884703a 	and	r2,r3,r2
   94b0c:	1001703a 	wrctl	status,r2
  
  return context;
   94b10:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   94b14:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   94b18:	d0a73603 	ldbu	r2,-25384(gp)
   94b1c:	10803fcc 	andi	r2,r2,255
   94b20:	10000626 	beq	r2,zero,94b3c <OSTaskCreateExt+0x90>
   94b24:	e0bff117 	ldw	r2,-60(fp)
   94b28:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94b2c:	e0bff217 	ldw	r2,-56(fp)
   94b30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   94b34:	00800f04 	movi	r2,60
   94b38:	00005006 	br	94c7c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   94b3c:	e0fffd03 	ldbu	r3,-12(fp)
   94b40:	008002b4 	movhi	r2,10
   94b44:	108c3704 	addi	r2,r2,12508
   94b48:	18c7883a 	add	r3,r3,r3
   94b4c:	18c7883a 	add	r3,r3,r3
   94b50:	10c5883a 	add	r2,r2,r3
   94b54:	10800017 	ldw	r2,0(r2)
   94b58:	1000431e 	bne	r2,zero,94c68 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   94b5c:	e0fffd03 	ldbu	r3,-12(fp)
   94b60:	008002b4 	movhi	r2,10
   94b64:	108c3704 	addi	r2,r2,12508
   94b68:	18c7883a 	add	r3,r3,r3
   94b6c:	18c7883a 	add	r3,r3,r3
   94b70:	10c5883a 	add	r2,r2,r3
   94b74:	00c00044 	movi	r3,1
   94b78:	10c00015 	stw	r3,0(r2)
   94b7c:	e0bff117 	ldw	r2,-60(fp)
   94b80:	e0bff315 	stw	r2,-52(fp)
   94b84:	e0bff317 	ldw	r2,-52(fp)
   94b88:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   94b8c:	e0bfff0b 	ldhu	r2,-4(fp)
   94b90:	100d883a 	mov	r6,r2
   94b94:	e1400417 	ldw	r5,16(fp)
   94b98:	e1000317 	ldw	r4,12(fp)
   94b9c:	0095b0c0 	call	95b0c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   94ba0:	e0bfff0b 	ldhu	r2,-4(fp)
   94ba4:	100f883a 	mov	r7,r2
   94ba8:	e1bffc17 	ldw	r6,-16(fp)
   94bac:	e17ffb17 	ldw	r5,-20(fp)
   94bb0:	e13ffa17 	ldw	r4,-24(fp)
   94bb4:	00979000 	call	97900 <OSTaskStkInit>
   94bb8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   94bbc:	e0fffd03 	ldbu	r3,-12(fp)
   94bc0:	e13ffe0b 	ldhu	r4,-8(fp)
   94bc4:	e0bfff0b 	ldhu	r2,-4(fp)
   94bc8:	d8800215 	stw	r2,8(sp)
   94bcc:	e0800517 	ldw	r2,20(fp)
   94bd0:	d8800115 	stw	r2,4(sp)
   94bd4:	e0800417 	ldw	r2,16(fp)
   94bd8:	d8800015 	stw	r2,0(sp)
   94bdc:	200f883a 	mov	r7,r4
   94be0:	e1800317 	ldw	r6,12(fp)
   94be4:	e17ff517 	ldw	r5,-44(fp)
   94be8:	1809883a 	mov	r4,r3
   94bec:	00905d40 	call	905d4 <OS_TCBInit>
   94bf0:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   94bf4:	e0bff603 	ldbu	r2,-40(fp)
   94bf8:	1000061e 	bne	r2,zero,94c14 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   94bfc:	d0a72843 	ldbu	r2,-25439(gp)
   94c00:	10803fcc 	andi	r2,r2,255
   94c04:	10800058 	cmpnei	r2,r2,1
   94c08:	1000151e 	bne	r2,zero,94c60 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   94c0c:	00901d40 	call	901d4 <OS_Sched>
   94c10:	00001306 	br	94c60 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94c14:	0005303a 	rdctl	r2,status
   94c18:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94c1c:	e0fff817 	ldw	r3,-32(fp)
   94c20:	00bfff84 	movi	r2,-2
   94c24:	1884703a 	and	r2,r3,r2
   94c28:	1001703a 	wrctl	status,r2
  
  return context;
   94c2c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   94c30:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   94c34:	e0fffd03 	ldbu	r3,-12(fp)
   94c38:	008002b4 	movhi	r2,10
   94c3c:	108c3704 	addi	r2,r2,12508
   94c40:	18c7883a 	add	r3,r3,r3
   94c44:	18c7883a 	add	r3,r3,r3
   94c48:	10c5883a 	add	r2,r2,r3
   94c4c:	10000015 	stw	zero,0(r2)
   94c50:	e0bff117 	ldw	r2,-60(fp)
   94c54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94c58:	e0bff417 	ldw	r2,-48(fp)
   94c5c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   94c60:	e0bff603 	ldbu	r2,-40(fp)
   94c64:	00000506 	br	94c7c <OSTaskCreateExt+0x1d0>
   94c68:	e0bff117 	ldw	r2,-60(fp)
   94c6c:	e0bff715 	stw	r2,-36(fp)
   94c70:	e0bff717 	ldw	r2,-36(fp)
   94c74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   94c78:	00800a04 	movi	r2,40
}
   94c7c:	e037883a 	mov	sp,fp
   94c80:	dfc00117 	ldw	ra,4(sp)
   94c84:	df000017 	ldw	fp,0(sp)
   94c88:	dec00204 	addi	sp,sp,8
   94c8c:	f800283a 	ret

00094c90 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   94c90:	defff404 	addi	sp,sp,-48
   94c94:	dfc00b15 	stw	ra,44(sp)
   94c98:	df000a15 	stw	fp,40(sp)
   94c9c:	df000a04 	addi	fp,sp,40
   94ca0:	2005883a 	mov	r2,r4
   94ca4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   94ca8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   94cac:	d0a73603 	ldbu	r2,-25384(gp)
   94cb0:	10803fcc 	andi	r2,r2,255
   94cb4:	10000226 	beq	r2,zero,94cc0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   94cb8:	00801004 	movi	r2,64
   94cbc:	0000c006 	br	94fc0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   94cc0:	e0bfff03 	ldbu	r2,-4(fp)
   94cc4:	10800518 	cmpnei	r2,r2,20
   94cc8:	1000021e 	bne	r2,zero,94cd4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   94ccc:	00800f84 	movi	r2,62
   94cd0:	0000bb06 	br	94fc0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   94cd4:	e0bfff03 	ldbu	r2,-4(fp)
   94cd8:	10800530 	cmpltui	r2,r2,20
   94cdc:	1000051e 	bne	r2,zero,94cf4 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   94ce0:	e0bfff03 	ldbu	r2,-4(fp)
   94ce4:	10803fe0 	cmpeqi	r2,r2,255
   94ce8:	1000021e 	bne	r2,zero,94cf4 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   94cec:	00800a84 	movi	r2,42
   94cf0:	0000b306 	br	94fc0 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94cf4:	0005303a 	rdctl	r2,status
   94cf8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94cfc:	e0fffe17 	ldw	r3,-8(fp)
   94d00:	00bfff84 	movi	r2,-2
   94d04:	1884703a 	and	r2,r3,r2
   94d08:	1001703a 	wrctl	status,r2
  
  return context;
   94d0c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   94d10:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   94d14:	e0bfff03 	ldbu	r2,-4(fp)
   94d18:	10803fd8 	cmpnei	r2,r2,255
   94d1c:	1000031e 	bne	r2,zero,94d2c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   94d20:	d0a73717 	ldw	r2,-25380(gp)
   94d24:	10800c83 	ldbu	r2,50(r2)
   94d28:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   94d2c:	e0ffff03 	ldbu	r3,-4(fp)
   94d30:	008002b4 	movhi	r2,10
   94d34:	108c3704 	addi	r2,r2,12508
   94d38:	18c7883a 	add	r3,r3,r3
   94d3c:	18c7883a 	add	r3,r3,r3
   94d40:	10c5883a 	add	r2,r2,r3
   94d44:	10800017 	ldw	r2,0(r2)
   94d48:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   94d4c:	e0bff817 	ldw	r2,-32(fp)
   94d50:	1000061e 	bne	r2,zero,94d6c <OSTaskDel+0xdc>
   94d54:	e0bff617 	ldw	r2,-40(fp)
   94d58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94d5c:	e0bff717 	ldw	r2,-36(fp)
   94d60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   94d64:	008010c4 	movi	r2,67
   94d68:	00009506 	br	94fc0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   94d6c:	e0bff817 	ldw	r2,-32(fp)
   94d70:	10800058 	cmpnei	r2,r2,1
   94d74:	1000061e 	bne	r2,zero,94d90 <OSTaskDel+0x100>
   94d78:	e0bff617 	ldw	r2,-40(fp)
   94d7c:	e0bff915 	stw	r2,-28(fp)
   94d80:	e0bff917 	ldw	r2,-28(fp)
   94d84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   94d88:	00800f44 	movi	r2,61
   94d8c:	00008c06 	br	94fc0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   94d90:	e0bff817 	ldw	r2,-32(fp)
   94d94:	10800d03 	ldbu	r2,52(r2)
   94d98:	10c03fcc 	andi	r3,r2,255
   94d9c:	e0bff817 	ldw	r2,-32(fp)
   94da0:	10800d03 	ldbu	r2,52(r2)
   94da4:	11003fcc 	andi	r4,r2,255
   94da8:	d0a73444 	addi	r2,gp,-25391
   94dac:	2085883a 	add	r2,r4,r2
   94db0:	10800003 	ldbu	r2,0(r2)
   94db4:	1009883a 	mov	r4,r2
   94db8:	e0bff817 	ldw	r2,-32(fp)
   94dbc:	10800d43 	ldbu	r2,53(r2)
   94dc0:	0084303a 	nor	r2,zero,r2
   94dc4:	2084703a 	and	r2,r4,r2
   94dc8:	1009883a 	mov	r4,r2
   94dcc:	d0a73444 	addi	r2,gp,-25391
   94dd0:	1885883a 	add	r2,r3,r2
   94dd4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   94dd8:	e0bff817 	ldw	r2,-32(fp)
   94ddc:	10800d03 	ldbu	r2,52(r2)
   94de0:	10c03fcc 	andi	r3,r2,255
   94de4:	d0a73444 	addi	r2,gp,-25391
   94de8:	1885883a 	add	r2,r3,r2
   94dec:	10800003 	ldbu	r2,0(r2)
   94df0:	10803fcc 	andi	r2,r2,255
   94df4:	1000071e 	bne	r2,zero,94e14 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   94df8:	e0bff817 	ldw	r2,-32(fp)
   94dfc:	10800d83 	ldbu	r2,54(r2)
   94e00:	0084303a 	nor	r2,zero,r2
   94e04:	1007883a 	mov	r3,r2
   94e08:	d0a73403 	ldbu	r2,-25392(gp)
   94e0c:	1884703a 	and	r2,r3,r2
   94e10:	d0a73405 	stb	r2,-25392(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   94e14:	e0bff817 	ldw	r2,-32(fp)
   94e18:	10800717 	ldw	r2,28(r2)
   94e1c:	10000526 	beq	r2,zero,94e34 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   94e20:	e0bff817 	ldw	r2,-32(fp)
   94e24:	10800717 	ldw	r2,28(r2)
   94e28:	100b883a 	mov	r5,r2
   94e2c:	e13ff817 	ldw	r4,-32(fp)
   94e30:	008fb800 	call	8fb80 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   94e34:	e0bff817 	ldw	r2,-32(fp)
   94e38:	10800817 	ldw	r2,32(r2)
   94e3c:	10000526 	beq	r2,zero,94e54 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   94e40:	e0bff817 	ldw	r2,-32(fp)
   94e44:	10800817 	ldw	r2,32(r2)
   94e48:	100b883a 	mov	r5,r2
   94e4c:	e13ff817 	ldw	r4,-32(fp)
   94e50:	008fc380 	call	8fc38 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   94e54:	e0bff817 	ldw	r2,-32(fp)
   94e58:	10800a17 	ldw	r2,40(r2)
   94e5c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   94e60:	e0bffb17 	ldw	r2,-20(fp)
   94e64:	10000226 	beq	r2,zero,94e70 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   94e68:	e13ffb17 	ldw	r4,-20(fp)
   94e6c:	00920a80 	call	920a8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   94e70:	e0bff817 	ldw	r2,-32(fp)
   94e74:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   94e78:	e0bff817 	ldw	r2,-32(fp)
   94e7c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   94e80:	e0bff817 	ldw	r2,-32(fp)
   94e84:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   94e88:	d0a72803 	ldbu	r2,-25440(gp)
   94e8c:	10803fcc 	andi	r2,r2,255
   94e90:	10803fe0 	cmpeqi	r2,r2,255
   94e94:	1000031e 	bne	r2,zero,94ea4 <OSTaskDel+0x214>
        OSLockNesting++;
   94e98:	d0a72803 	ldbu	r2,-25440(gp)
   94e9c:	10800044 	addi	r2,r2,1
   94ea0:	d0a72805 	stb	r2,-25440(gp)
   94ea4:	e0bff617 	ldw	r2,-40(fp)
   94ea8:	e0bffd15 	stw	r2,-12(fp)
   94eac:	e0bffd17 	ldw	r2,-12(fp)
   94eb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   94eb4:	008f7680 	call	8f768 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94eb8:	0005303a 	rdctl	r2,status
   94ebc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94ec0:	e0fffa17 	ldw	r3,-24(fp)
   94ec4:	00bfff84 	movi	r2,-2
   94ec8:	1884703a 	and	r2,r3,r2
   94ecc:	1001703a 	wrctl	status,r2
  
  return context;
   94ed0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   94ed4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   94ed8:	d0a72803 	ldbu	r2,-25440(gp)
   94edc:	10803fcc 	andi	r2,r2,255
   94ee0:	10000326 	beq	r2,zero,94ef0 <OSTaskDel+0x260>
        OSLockNesting--;
   94ee4:	d0a72803 	ldbu	r2,-25440(gp)
   94ee8:	10bfffc4 	addi	r2,r2,-1
   94eec:	d0a72805 	stb	r2,-25440(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   94ef0:	e13ff817 	ldw	r4,-32(fp)
   94ef4:	0097a800 	call	97a80 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   94ef8:	d0a73043 	ldbu	r2,-25407(gp)
   94efc:	10bfffc4 	addi	r2,r2,-1
   94f00:	d0a73045 	stb	r2,-25407(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   94f04:	e0ffff03 	ldbu	r3,-4(fp)
   94f08:	008002b4 	movhi	r2,10
   94f0c:	108c3704 	addi	r2,r2,12508
   94f10:	18c7883a 	add	r3,r3,r3
   94f14:	18c7883a 	add	r3,r3,r3
   94f18:	10c5883a 	add	r2,r2,r3
   94f1c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   94f20:	e0bff817 	ldw	r2,-32(fp)
   94f24:	10800617 	ldw	r2,24(r2)
   94f28:	1000071e 	bne	r2,zero,94f48 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   94f2c:	e0bff817 	ldw	r2,-32(fp)
   94f30:	10800517 	ldw	r2,20(r2)
   94f34:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   94f38:	e0bff817 	ldw	r2,-32(fp)
   94f3c:	10800517 	ldw	r2,20(r2)
   94f40:	d0a72b15 	stw	r2,-25428(gp)
   94f44:	00000a06 	br	94f70 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   94f48:	e0bff817 	ldw	r2,-32(fp)
   94f4c:	10800617 	ldw	r2,24(r2)
   94f50:	e0fff817 	ldw	r3,-32(fp)
   94f54:	18c00517 	ldw	r3,20(r3)
   94f58:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   94f5c:	e0bff817 	ldw	r2,-32(fp)
   94f60:	10800517 	ldw	r2,20(r2)
   94f64:	e0fff817 	ldw	r3,-32(fp)
   94f68:	18c00617 	ldw	r3,24(r3)
   94f6c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   94f70:	d0e72f17 	ldw	r3,-25412(gp)
   94f74:	e0bff817 	ldw	r2,-32(fp)
   94f78:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   94f7c:	e0bff817 	ldw	r2,-32(fp)
   94f80:	d0a72f15 	stw	r2,-25412(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   94f84:	e0bff817 	ldw	r2,-32(fp)
   94f88:	00c00fc4 	movi	r3,63
   94f8c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   94f90:	e0bff817 	ldw	r2,-32(fp)
   94f94:	10001345 	stb	zero,77(r2)
   94f98:	e0bff617 	ldw	r2,-40(fp)
   94f9c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94fa0:	e0bffc17 	ldw	r2,-16(fp)
   94fa4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   94fa8:	d0a72843 	ldbu	r2,-25439(gp)
   94fac:	10803fcc 	andi	r2,r2,255
   94fb0:	10800058 	cmpnei	r2,r2,1
   94fb4:	1000011e 	bne	r2,zero,94fbc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   94fb8:	00901d40 	call	901d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   94fbc:	0005883a 	mov	r2,zero
}
   94fc0:	e037883a 	mov	sp,fp
   94fc4:	dfc00117 	ldw	ra,4(sp)
   94fc8:	df000017 	ldw	fp,0(sp)
   94fcc:	dec00204 	addi	sp,sp,8
   94fd0:	f800283a 	ret

00094fd4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   94fd4:	defff504 	addi	sp,sp,-44
   94fd8:	df000a15 	stw	fp,40(sp)
   94fdc:	df000a04 	addi	fp,sp,40
   94fe0:	2005883a 	mov	r2,r4
   94fe4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   94fe8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   94fec:	e0bfff03 	ldbu	r2,-4(fp)
   94ff0:	10800518 	cmpnei	r2,r2,20
   94ff4:	1000021e 	bne	r2,zero,95000 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   94ff8:	00800f84 	movi	r2,62
   94ffc:	00004506 	br	95114 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   95000:	e0bfff03 	ldbu	r2,-4(fp)
   95004:	10800530 	cmpltui	r2,r2,20
   95008:	1000051e 	bne	r2,zero,95020 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   9500c:	e0bfff03 	ldbu	r2,-4(fp)
   95010:	10803fe0 	cmpeqi	r2,r2,255
   95014:	1000021e 	bne	r2,zero,95020 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   95018:	00800a84 	movi	r2,42
   9501c:	00003d06 	br	95114 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   95020:	e0bfff03 	ldbu	r2,-4(fp)
   95024:	10803fd8 	cmpnei	r2,r2,255
   95028:	1000111e 	bne	r2,zero,95070 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9502c:	0005303a 	rdctl	r2,status
   95030:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95034:	e0fff917 	ldw	r3,-28(fp)
   95038:	00bfff84 	movi	r2,-2
   9503c:	1884703a 	and	r2,r3,r2
   95040:	1001703a 	wrctl	status,r2
  
  return context;
   95044:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   95048:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   9504c:	d0a73717 	ldw	r2,-25380(gp)
   95050:	10800dc3 	ldbu	r2,55(r2)
   95054:	e0bff805 	stb	r2,-32(fp)
   95058:	e0bff617 	ldw	r2,-40(fp)
   9505c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95060:	e0bffe17 	ldw	r2,-8(fp)
   95064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   95068:	e0bff803 	ldbu	r2,-32(fp)
   9506c:	00002906 	br	95114 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95070:	0005303a 	rdctl	r2,status
   95074:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95078:	e0fff717 	ldw	r3,-36(fp)
   9507c:	00bfff84 	movi	r2,-2
   95080:	1884703a 	and	r2,r3,r2
   95084:	1001703a 	wrctl	status,r2
  
  return context;
   95088:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   9508c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   95090:	e0ffff03 	ldbu	r3,-4(fp)
   95094:	008002b4 	movhi	r2,10
   95098:	108c3704 	addi	r2,r2,12508
   9509c:	18c7883a 	add	r3,r3,r3
   950a0:	18c7883a 	add	r3,r3,r3
   950a4:	10c5883a 	add	r2,r2,r3
   950a8:	10800017 	ldw	r2,0(r2)
   950ac:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   950b0:	e0bffb17 	ldw	r2,-20(fp)
   950b4:	1000061e 	bne	r2,zero,950d0 <OSTaskDelReq+0xfc>
   950b8:	e0bff617 	ldw	r2,-40(fp)
   950bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   950c0:	e0bffa17 	ldw	r2,-24(fp)
   950c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   950c8:	008010c4 	movi	r2,67
   950cc:	00001106 	br	95114 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   950d0:	e0bffb17 	ldw	r2,-20(fp)
   950d4:	10800058 	cmpnei	r2,r2,1
   950d8:	1000061e 	bne	r2,zero,950f4 <OSTaskDelReq+0x120>
   950dc:	e0bff617 	ldw	r2,-40(fp)
   950e0:	e0bffc15 	stw	r2,-16(fp)
   950e4:	e0bffc17 	ldw	r2,-16(fp)
   950e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   950ec:	00800f44 	movi	r2,61
   950f0:	00000806 	br	95114 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   950f4:	e0bffb17 	ldw	r2,-20(fp)
   950f8:	00c00fc4 	movi	r3,63
   950fc:	10c00dc5 	stb	r3,55(r2)
   95100:	e0bff617 	ldw	r2,-40(fp)
   95104:	e0bffd15 	stw	r2,-12(fp)
   95108:	e0bffd17 	ldw	r2,-12(fp)
   9510c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   95110:	0005883a 	mov	r2,zero
}
   95114:	e037883a 	mov	sp,fp
   95118:	df000017 	ldw	fp,0(sp)
   9511c:	dec00104 	addi	sp,sp,4
   95120:	f800283a 	ret

00095124 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   95124:	defff404 	addi	sp,sp,-48
   95128:	dfc00b15 	stw	ra,44(sp)
   9512c:	df000a15 	stw	fp,40(sp)
   95130:	df000a04 	addi	fp,sp,40
   95134:	2005883a 	mov	r2,r4
   95138:	e17ffe15 	stw	r5,-8(fp)
   9513c:	e1bfff15 	stw	r6,-4(fp)
   95140:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   95144:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   95148:	e0bfff17 	ldw	r2,-4(fp)
   9514c:	1000021e 	bne	r2,zero,95158 <OSTaskNameGet+0x34>
        return (0);
   95150:	0005883a 	mov	r2,zero
   95154:	00005406 	br	952a8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   95158:	e0bffd03 	ldbu	r2,-12(fp)
   9515c:	10800570 	cmpltui	r2,r2,21
   95160:	1000081e 	bne	r2,zero,95184 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   95164:	e0bffd03 	ldbu	r2,-12(fp)
   95168:	10803fe0 	cmpeqi	r2,r2,255
   9516c:	1000051e 	bne	r2,zero,95184 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   95170:	e0bfff17 	ldw	r2,-4(fp)
   95174:	00c00a84 	movi	r3,42
   95178:	10c00005 	stb	r3,0(r2)
            return (0);
   9517c:	0005883a 	mov	r2,zero
   95180:	00004906 	br	952a8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   95184:	e0bffe17 	ldw	r2,-8(fp)
   95188:	1000051e 	bne	r2,zero,951a0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   9518c:	e0bfff17 	ldw	r2,-4(fp)
   95190:	00c00304 	movi	r3,12
   95194:	10c00005 	stb	r3,0(r2)
        return (0);
   95198:	0005883a 	mov	r2,zero
   9519c:	00004206 	br	952a8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   951a0:	d0a73603 	ldbu	r2,-25384(gp)
   951a4:	10803fcc 	andi	r2,r2,255
   951a8:	10000526 	beq	r2,zero,951c0 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   951ac:	e0bfff17 	ldw	r2,-4(fp)
   951b0:	00c00444 	movi	r3,17
   951b4:	10c00005 	stb	r3,0(r2)
        return (0);
   951b8:	0005883a 	mov	r2,zero
   951bc:	00003a06 	br	952a8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   951c0:	0005303a 	rdctl	r2,status
   951c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   951c8:	e0fffc17 	ldw	r3,-16(fp)
   951cc:	00bfff84 	movi	r2,-2
   951d0:	1884703a 	and	r2,r3,r2
   951d4:	1001703a 	wrctl	status,r2
  
  return context;
   951d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   951dc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   951e0:	e0bffd03 	ldbu	r2,-12(fp)
   951e4:	10803fd8 	cmpnei	r2,r2,255
   951e8:	1000031e 	bne	r2,zero,951f8 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   951ec:	d0a73717 	ldw	r2,-25380(gp)
   951f0:	10800c83 	ldbu	r2,50(r2)
   951f4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   951f8:	e0fffd03 	ldbu	r3,-12(fp)
   951fc:	008002b4 	movhi	r2,10
   95200:	108c3704 	addi	r2,r2,12508
   95204:	18c7883a 	add	r3,r3,r3
   95208:	18c7883a 	add	r3,r3,r3
   9520c:	10c5883a 	add	r2,r2,r3
   95210:	10800017 	ldw	r2,0(r2)
   95214:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   95218:	e0bff817 	ldw	r2,-32(fp)
   9521c:	1000091e 	bne	r2,zero,95244 <OSTaskNameGet+0x120>
   95220:	e0bff617 	ldw	r2,-40(fp)
   95224:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95228:	e0bff717 	ldw	r2,-36(fp)
   9522c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   95230:	e0bfff17 	ldw	r2,-4(fp)
   95234:	00c010c4 	movi	r3,67
   95238:	10c00005 	stb	r3,0(r2)
        return (0);
   9523c:	0005883a 	mov	r2,zero
   95240:	00001906 	br	952a8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   95244:	e0bff817 	ldw	r2,-32(fp)
   95248:	10800058 	cmpnei	r2,r2,1
   9524c:	1000091e 	bne	r2,zero,95274 <OSTaskNameGet+0x150>
   95250:	e0bff617 	ldw	r2,-40(fp)
   95254:	e0bff915 	stw	r2,-28(fp)
   95258:	e0bff917 	ldw	r2,-28(fp)
   9525c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   95260:	e0bfff17 	ldw	r2,-4(fp)
   95264:	00c010c4 	movi	r3,67
   95268:	10c00005 	stb	r3,0(r2)
        return (0);
   9526c:	0005883a 	mov	r2,zero
   95270:	00000d06 	br	952a8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   95274:	e0bff817 	ldw	r2,-32(fp)
   95278:	10801304 	addi	r2,r2,76
   9527c:	100b883a 	mov	r5,r2
   95280:	e13ffe17 	ldw	r4,-8(fp)
   95284:	00903180 	call	90318 <OS_StrCopy>
   95288:	e0bffb05 	stb	r2,-20(fp)
   9528c:	e0bff617 	ldw	r2,-40(fp)
   95290:	e0bffa15 	stw	r2,-24(fp)
   95294:	e0bffa17 	ldw	r2,-24(fp)
   95298:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9529c:	e0bfff17 	ldw	r2,-4(fp)
   952a0:	10000005 	stb	zero,0(r2)
    return (len);
   952a4:	e0bffb03 	ldbu	r2,-20(fp)
}
   952a8:	e037883a 	mov	sp,fp
   952ac:	dfc00117 	ldw	ra,4(sp)
   952b0:	df000017 	ldw	fp,0(sp)
   952b4:	dec00204 	addi	sp,sp,8
   952b8:	f800283a 	ret

000952bc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   952bc:	defff304 	addi	sp,sp,-52
   952c0:	dfc00c15 	stw	ra,48(sp)
   952c4:	df000b15 	stw	fp,44(sp)
   952c8:	df000b04 	addi	fp,sp,44
   952cc:	2005883a 	mov	r2,r4
   952d0:	e17ffe15 	stw	r5,-8(fp)
   952d4:	e1bfff15 	stw	r6,-4(fp)
   952d8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   952dc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   952e0:	e0bfff17 	ldw	r2,-4(fp)
   952e4:	10005c26 	beq	r2,zero,95458 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   952e8:	e0bffd03 	ldbu	r2,-12(fp)
   952ec:	10800570 	cmpltui	r2,r2,21
   952f0:	1000071e 	bne	r2,zero,95310 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   952f4:	e0bffd03 	ldbu	r2,-12(fp)
   952f8:	10803fe0 	cmpeqi	r2,r2,255
   952fc:	1000041e 	bne	r2,zero,95310 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   95300:	e0bfff17 	ldw	r2,-4(fp)
   95304:	00c00a84 	movi	r3,42
   95308:	10c00005 	stb	r3,0(r2)
            return;
   9530c:	00005306 	br	9545c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   95310:	e0bffe17 	ldw	r2,-8(fp)
   95314:	1000041e 	bne	r2,zero,95328 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   95318:	e0bfff17 	ldw	r2,-4(fp)
   9531c:	00c00304 	movi	r3,12
   95320:	10c00005 	stb	r3,0(r2)
        return;
   95324:	00004d06 	br	9545c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   95328:	d0a73603 	ldbu	r2,-25384(gp)
   9532c:	10803fcc 	andi	r2,r2,255
   95330:	10000426 	beq	r2,zero,95344 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   95334:	e0bfff17 	ldw	r2,-4(fp)
   95338:	00c00484 	movi	r3,18
   9533c:	10c00005 	stb	r3,0(r2)
        return;
   95340:	00004606 	br	9545c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95344:	0005303a 	rdctl	r2,status
   95348:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9534c:	e0fffc17 	ldw	r3,-16(fp)
   95350:	00bfff84 	movi	r2,-2
   95354:	1884703a 	and	r2,r3,r2
   95358:	1001703a 	wrctl	status,r2
  
  return context;
   9535c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   95360:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   95364:	e0bffd03 	ldbu	r2,-12(fp)
   95368:	10803fd8 	cmpnei	r2,r2,255
   9536c:	1000031e 	bne	r2,zero,9537c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   95370:	d0a73717 	ldw	r2,-25380(gp)
   95374:	10800c83 	ldbu	r2,50(r2)
   95378:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9537c:	e0fffd03 	ldbu	r3,-12(fp)
   95380:	008002b4 	movhi	r2,10
   95384:	108c3704 	addi	r2,r2,12508
   95388:	18c7883a 	add	r3,r3,r3
   9538c:	18c7883a 	add	r3,r3,r3
   95390:	10c5883a 	add	r2,r2,r3
   95394:	10800017 	ldw	r2,0(r2)
   95398:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   9539c:	e0bff717 	ldw	r2,-36(fp)
   953a0:	1000081e 	bne	r2,zero,953c4 <OSTaskNameSet+0x108>
   953a4:	e0bff517 	ldw	r2,-44(fp)
   953a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   953ac:	e0bff617 	ldw	r2,-40(fp)
   953b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   953b4:	e0bfff17 	ldw	r2,-4(fp)
   953b8:	00c010c4 	movi	r3,67
   953bc:	10c00005 	stb	r3,0(r2)
        return;
   953c0:	00002606 	br	9545c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   953c4:	e0bff717 	ldw	r2,-36(fp)
   953c8:	10800058 	cmpnei	r2,r2,1
   953cc:	1000081e 	bne	r2,zero,953f0 <OSTaskNameSet+0x134>
   953d0:	e0bff517 	ldw	r2,-44(fp)
   953d4:	e0bff815 	stw	r2,-32(fp)
   953d8:	e0bff817 	ldw	r2,-32(fp)
   953dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   953e0:	e0bfff17 	ldw	r2,-4(fp)
   953e4:	00c010c4 	movi	r3,67
   953e8:	10c00005 	stb	r3,0(r2)
        return;
   953ec:	00001b06 	br	9545c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   953f0:	e13ffe17 	ldw	r4,-8(fp)
   953f4:	009038c0 	call	9038c <OS_StrLen>
   953f8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   953fc:	e0bffa03 	ldbu	r2,-24(fp)
   95400:	10800830 	cmpltui	r2,r2,32
   95404:	1000081e 	bne	r2,zero,95428 <OSTaskNameSet+0x16c>
   95408:	e0bff517 	ldw	r2,-44(fp)
   9540c:	e0bff915 	stw	r2,-28(fp)
   95410:	e0bff917 	ldw	r2,-28(fp)
   95414:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   95418:	e0bfff17 	ldw	r2,-4(fp)
   9541c:	00c01044 	movi	r3,65
   95420:	10c00005 	stb	r3,0(r2)
        return;
   95424:	00000d06 	br	9545c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   95428:	e0bff717 	ldw	r2,-36(fp)
   9542c:	10801304 	addi	r2,r2,76
   95430:	e17ffe17 	ldw	r5,-8(fp)
   95434:	1009883a 	mov	r4,r2
   95438:	00903180 	call	90318 <OS_StrCopy>
   9543c:	e0bff517 	ldw	r2,-44(fp)
   95440:	e0bffb15 	stw	r2,-20(fp)
   95444:	e0bffb17 	ldw	r2,-20(fp)
   95448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9544c:	e0bfff17 	ldw	r2,-4(fp)
   95450:	10000005 	stb	zero,0(r2)
   95454:	00000106 	br	9545c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   95458:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   9545c:	e037883a 	mov	sp,fp
   95460:	dfc00117 	ldw	ra,4(sp)
   95464:	df000017 	ldw	fp,0(sp)
   95468:	dec00204 	addi	sp,sp,8
   9546c:	f800283a 	ret

00095470 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   95470:	defff404 	addi	sp,sp,-48
   95474:	dfc00b15 	stw	ra,44(sp)
   95478:	df000a15 	stw	fp,40(sp)
   9547c:	df000a04 	addi	fp,sp,40
   95480:	2005883a 	mov	r2,r4
   95484:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   95488:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   9548c:	e0bfff03 	ldbu	r2,-4(fp)
   95490:	10800530 	cmpltui	r2,r2,20
   95494:	1000021e 	bne	r2,zero,954a0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   95498:	00800a84 	movi	r2,42
   9549c:	00006406 	br	95630 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   954a0:	0005303a 	rdctl	r2,status
   954a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   954a8:	e0fffe17 	ldw	r3,-8(fp)
   954ac:	00bfff84 	movi	r2,-2
   954b0:	1884703a 	and	r2,r3,r2
   954b4:	1001703a 	wrctl	status,r2
  
  return context;
   954b8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   954bc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   954c0:	e0ffff03 	ldbu	r3,-4(fp)
   954c4:	008002b4 	movhi	r2,10
   954c8:	108c3704 	addi	r2,r2,12508
   954cc:	18c7883a 	add	r3,r3,r3
   954d0:	18c7883a 	add	r3,r3,r3
   954d4:	10c5883a 	add	r2,r2,r3
   954d8:	10800017 	ldw	r2,0(r2)
   954dc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   954e0:	e0bff817 	ldw	r2,-32(fp)
   954e4:	1000061e 	bne	r2,zero,95500 <OSTaskResume+0x90>
   954e8:	e0bff617 	ldw	r2,-40(fp)
   954ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   954f0:	e0bff717 	ldw	r2,-36(fp)
   954f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   954f8:	00801184 	movi	r2,70
   954fc:	00004c06 	br	95630 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   95500:	e0bff817 	ldw	r2,-32(fp)
   95504:	10800058 	cmpnei	r2,r2,1
   95508:	1000061e 	bne	r2,zero,95524 <OSTaskResume+0xb4>
   9550c:	e0bff617 	ldw	r2,-40(fp)
   95510:	e0bff915 	stw	r2,-28(fp)
   95514:	e0bff917 	ldw	r2,-28(fp)
   95518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9551c:	008010c4 	movi	r2,67
   95520:	00004306 	br	95630 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   95524:	e0bff817 	ldw	r2,-32(fp)
   95528:	10800c03 	ldbu	r2,48(r2)
   9552c:	10803fcc 	andi	r2,r2,255
   95530:	1080020c 	andi	r2,r2,8
   95534:	10003926 	beq	r2,zero,9561c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   95538:	e0bff817 	ldw	r2,-32(fp)
   9553c:	10c00c03 	ldbu	r3,48(r2)
   95540:	00bffdc4 	movi	r2,-9
   95544:	1884703a 	and	r2,r3,r2
   95548:	1007883a 	mov	r3,r2
   9554c:	e0bff817 	ldw	r2,-32(fp)
   95550:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   95554:	e0bff817 	ldw	r2,-32(fp)
   95558:	10800c03 	ldbu	r2,48(r2)
   9555c:	10803fcc 	andi	r2,r2,255
   95560:	1000281e 	bne	r2,zero,95604 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   95564:	e0bff817 	ldw	r2,-32(fp)
   95568:	10800b8b 	ldhu	r2,46(r2)
   9556c:	10bfffcc 	andi	r2,r2,65535
   95570:	10001f1e 	bne	r2,zero,955f0 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   95574:	e0bff817 	ldw	r2,-32(fp)
   95578:	10c00d83 	ldbu	r3,54(r2)
   9557c:	d0a73403 	ldbu	r2,-25392(gp)
   95580:	1884b03a 	or	r2,r3,r2
   95584:	d0a73405 	stb	r2,-25392(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   95588:	e0bff817 	ldw	r2,-32(fp)
   9558c:	10800d03 	ldbu	r2,52(r2)
   95590:	10c03fcc 	andi	r3,r2,255
   95594:	e0bff817 	ldw	r2,-32(fp)
   95598:	10800d03 	ldbu	r2,52(r2)
   9559c:	11003fcc 	andi	r4,r2,255
   955a0:	d0a73444 	addi	r2,gp,-25391
   955a4:	2085883a 	add	r2,r4,r2
   955a8:	11000003 	ldbu	r4,0(r2)
   955ac:	e0bff817 	ldw	r2,-32(fp)
   955b0:	10800d43 	ldbu	r2,53(r2)
   955b4:	2084b03a 	or	r2,r4,r2
   955b8:	1009883a 	mov	r4,r2
   955bc:	d0a73444 	addi	r2,gp,-25391
   955c0:	1885883a 	add	r2,r3,r2
   955c4:	11000005 	stb	r4,0(r2)
   955c8:	e0bff617 	ldw	r2,-40(fp)
   955cc:	e0bffa15 	stw	r2,-24(fp)
   955d0:	e0bffa17 	ldw	r2,-24(fp)
   955d4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   955d8:	d0a72843 	ldbu	r2,-25439(gp)
   955dc:	10803fcc 	andi	r2,r2,255
   955e0:	10800058 	cmpnei	r2,r2,1
   955e4:	10000b1e 	bne	r2,zero,95614 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   955e8:	00901d40 	call	901d4 <OS_Sched>
   955ec:	00000906 	br	95614 <OSTaskResume+0x1a4>
   955f0:	e0bff617 	ldw	r2,-40(fp)
   955f4:	e0bffb15 	stw	r2,-20(fp)
   955f8:	e0bffb17 	ldw	r2,-20(fp)
   955fc:	1001703a 	wrctl	status,r2
   95600:	00000406 	br	95614 <OSTaskResume+0x1a4>
   95604:	e0bff617 	ldw	r2,-40(fp)
   95608:	e0bffc15 	stw	r2,-16(fp)
   9560c:	e0bffc17 	ldw	r2,-16(fp)
   95610:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   95614:	0005883a 	mov	r2,zero
   95618:	00000506 	br	95630 <OSTaskResume+0x1c0>
   9561c:	e0bff617 	ldw	r2,-40(fp)
   95620:	e0bffd15 	stw	r2,-12(fp)
   95624:	e0bffd17 	ldw	r2,-12(fp)
   95628:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   9562c:	00801104 	movi	r2,68
}
   95630:	e037883a 	mov	sp,fp
   95634:	dfc00117 	ldw	ra,4(sp)
   95638:	df000017 	ldw	fp,0(sp)
   9563c:	dec00204 	addi	sp,sp,8
   95640:	f800283a 	ret

00095644 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   95644:	defff304 	addi	sp,sp,-52
   95648:	df000c15 	stw	fp,48(sp)
   9564c:	df000c04 	addi	fp,sp,48
   95650:	2005883a 	mov	r2,r4
   95654:	e17fff15 	stw	r5,-4(fp)
   95658:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   9565c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   95660:	e0bffe03 	ldbu	r2,-8(fp)
   95664:	10800570 	cmpltui	r2,r2,21
   95668:	1000051e 	bne	r2,zero,95680 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   9566c:	e0bffe03 	ldbu	r2,-8(fp)
   95670:	10803fe0 	cmpeqi	r2,r2,255
   95674:	1000021e 	bne	r2,zero,95680 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   95678:	00800a84 	movi	r2,42
   9567c:	00005d06 	br	957f4 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   95680:	e0bfff17 	ldw	r2,-4(fp)
   95684:	1000021e 	bne	r2,zero,95690 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   95688:	00800244 	movi	r2,9
   9568c:	00005906 	br	957f4 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   95690:	e0bfff17 	ldw	r2,-4(fp)
   95694:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   95698:	e0bfff17 	ldw	r2,-4(fp)
   9569c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   956a0:	0005303a 	rdctl	r2,status
   956a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   956a8:	e0fffd17 	ldw	r3,-12(fp)
   956ac:	00bfff84 	movi	r2,-2
   956b0:	1884703a 	and	r2,r3,r2
   956b4:	1001703a 	wrctl	status,r2
  
  return context;
   956b8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   956bc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   956c0:	e0bffe03 	ldbu	r2,-8(fp)
   956c4:	10803fd8 	cmpnei	r2,r2,255
   956c8:	1000031e 	bne	r2,zero,956d8 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   956cc:	d0a73717 	ldw	r2,-25380(gp)
   956d0:	10800c83 	ldbu	r2,50(r2)
   956d4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   956d8:	e0fffe03 	ldbu	r3,-8(fp)
   956dc:	008002b4 	movhi	r2,10
   956e0:	108c3704 	addi	r2,r2,12508
   956e4:	18c7883a 	add	r3,r3,r3
   956e8:	18c7883a 	add	r3,r3,r3
   956ec:	10c5883a 	add	r2,r2,r3
   956f0:	10800017 	ldw	r2,0(r2)
   956f4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   956f8:	e0bff817 	ldw	r2,-32(fp)
   956fc:	1000061e 	bne	r2,zero,95718 <OSTaskStkChk+0xd4>
   95700:	e0bff617 	ldw	r2,-40(fp)
   95704:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95708:	e0bff717 	ldw	r2,-36(fp)
   9570c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   95710:	008010c4 	movi	r2,67
   95714:	00003706 	br	957f4 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   95718:	e0bff817 	ldw	r2,-32(fp)
   9571c:	10800058 	cmpnei	r2,r2,1
   95720:	1000061e 	bne	r2,zero,9573c <OSTaskStkChk+0xf8>
   95724:	e0bff617 	ldw	r2,-40(fp)
   95728:	e0bff915 	stw	r2,-28(fp)
   9572c:	e0bff917 	ldw	r2,-28(fp)
   95730:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   95734:	008010c4 	movi	r2,67
   95738:	00002e06 	br	957f4 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   9573c:	e0bff817 	ldw	r2,-32(fp)
   95740:	1080040b 	ldhu	r2,16(r2)
   95744:	10bfffcc 	andi	r2,r2,65535
   95748:	1080004c 	andi	r2,r2,1
   9574c:	1000061e 	bne	r2,zero,95768 <OSTaskStkChk+0x124>
   95750:	e0bff617 	ldw	r2,-40(fp)
   95754:	e0bffa15 	stw	r2,-24(fp)
   95758:	e0bffa17 	ldw	r2,-24(fp)
   9575c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   95760:	00801144 	movi	r2,69
   95764:	00002306 	br	957f4 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   95768:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   9576c:	e0bff817 	ldw	r2,-32(fp)
   95770:	10800317 	ldw	r2,12(r2)
   95774:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   95778:	e0bff817 	ldw	r2,-32(fp)
   9577c:	10800217 	ldw	r2,8(r2)
   95780:	e0bff415 	stw	r2,-48(fp)
   95784:	e0bff617 	ldw	r2,-40(fp)
   95788:	e0bffb15 	stw	r2,-20(fp)
   9578c:	e0bffb17 	ldw	r2,-20(fp)
   95790:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   95794:	00000306 	br	957a4 <OSTaskStkChk+0x160>
        nfree++;
   95798:	e0bff517 	ldw	r2,-44(fp)
   9579c:	10800044 	addi	r2,r2,1
   957a0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   957a4:	e0bff417 	ldw	r2,-48(fp)
   957a8:	10c00104 	addi	r3,r2,4
   957ac:	e0fff415 	stw	r3,-48(fp)
   957b0:	10800017 	ldw	r2,0(r2)
   957b4:	103ff826 	beq	r2,zero,95798 <__alt_data_end+0xfffd6f98>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   957b8:	e0bff517 	ldw	r2,-44(fp)
   957bc:	1085883a 	add	r2,r2,r2
   957c0:	1085883a 	add	r2,r2,r2
   957c4:	1007883a 	mov	r3,r2
   957c8:	e0bfff17 	ldw	r2,-4(fp)
   957cc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   957d0:	e0fffc17 	ldw	r3,-16(fp)
   957d4:	e0bff517 	ldw	r2,-44(fp)
   957d8:	1885c83a 	sub	r2,r3,r2
   957dc:	1085883a 	add	r2,r2,r2
   957e0:	1085883a 	add	r2,r2,r2
   957e4:	1007883a 	mov	r3,r2
   957e8:	e0bfff17 	ldw	r2,-4(fp)
   957ec:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   957f0:	0005883a 	mov	r2,zero
}
   957f4:	e037883a 	mov	sp,fp
   957f8:	df000017 	ldw	fp,0(sp)
   957fc:	dec00104 	addi	sp,sp,4
   95800:	f800283a 	ret

00095804 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   95804:	defff504 	addi	sp,sp,-44
   95808:	dfc00a15 	stw	ra,40(sp)
   9580c:	df000915 	stw	fp,36(sp)
   95810:	df000904 	addi	fp,sp,36
   95814:	2005883a 	mov	r2,r4
   95818:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9581c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   95820:	e0bfff03 	ldbu	r2,-4(fp)
   95824:	10800518 	cmpnei	r2,r2,20
   95828:	1000021e 	bne	r2,zero,95834 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   9582c:	008011c4 	movi	r2,71
   95830:	00006806 	br	959d4 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   95834:	e0bfff03 	ldbu	r2,-4(fp)
   95838:	10800530 	cmpltui	r2,r2,20
   9583c:	1000051e 	bne	r2,zero,95854 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   95840:	e0bfff03 	ldbu	r2,-4(fp)
   95844:	10803fe0 	cmpeqi	r2,r2,255
   95848:	1000021e 	bne	r2,zero,95854 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   9584c:	00800a84 	movi	r2,42
   95850:	00006006 	br	959d4 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95854:	0005303a 	rdctl	r2,status
   95858:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9585c:	e0fffe17 	ldw	r3,-8(fp)
   95860:	00bfff84 	movi	r2,-2
   95864:	1884703a 	and	r2,r3,r2
   95868:	1001703a 	wrctl	status,r2
  
  return context;
   9586c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   95870:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   95874:	e0bfff03 	ldbu	r2,-4(fp)
   95878:	10803fd8 	cmpnei	r2,r2,255
   9587c:	1000061e 	bne	r2,zero,95898 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   95880:	d0a73717 	ldw	r2,-25380(gp)
   95884:	10800c83 	ldbu	r2,50(r2)
   95888:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   9588c:	00800044 	movi	r2,1
   95890:	e0bff705 	stb	r2,-36(fp)
   95894:	00000906 	br	958bc <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   95898:	d0a73717 	ldw	r2,-25380(gp)
   9589c:	10800c83 	ldbu	r2,50(r2)
   958a0:	10c03fcc 	andi	r3,r2,255
   958a4:	e0bfff03 	ldbu	r2,-4(fp)
   958a8:	1880031e 	bne	r3,r2,958b8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   958ac:	00800044 	movi	r2,1
   958b0:	e0bff705 	stb	r2,-36(fp)
   958b4:	00000106 	br	958bc <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   958b8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   958bc:	e0ffff03 	ldbu	r3,-4(fp)
   958c0:	008002b4 	movhi	r2,10
   958c4:	108c3704 	addi	r2,r2,12508
   958c8:	18c7883a 	add	r3,r3,r3
   958cc:	18c7883a 	add	r3,r3,r3
   958d0:	10c5883a 	add	r2,r2,r3
   958d4:	10800017 	ldw	r2,0(r2)
   958d8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   958dc:	e0bffa17 	ldw	r2,-24(fp)
   958e0:	1000061e 	bne	r2,zero,958fc <OSTaskSuspend+0xf8>
   958e4:	e0bff817 	ldw	r2,-32(fp)
   958e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   958ec:	e0bff917 	ldw	r2,-28(fp)
   958f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   958f4:	00801204 	movi	r2,72
   958f8:	00003606 	br	959d4 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   958fc:	e0bffa17 	ldw	r2,-24(fp)
   95900:	10800058 	cmpnei	r2,r2,1
   95904:	1000061e 	bne	r2,zero,95920 <OSTaskSuspend+0x11c>
   95908:	e0bff817 	ldw	r2,-32(fp)
   9590c:	e0bffb15 	stw	r2,-20(fp)
   95910:	e0bffb17 	ldw	r2,-20(fp)
   95914:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   95918:	008010c4 	movi	r2,67
   9591c:	00002d06 	br	959d4 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   95920:	e0bffa17 	ldw	r2,-24(fp)
   95924:	10800d03 	ldbu	r2,52(r2)
   95928:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   9592c:	e0fffd03 	ldbu	r3,-12(fp)
   95930:	e13ffd03 	ldbu	r4,-12(fp)
   95934:	d0a73444 	addi	r2,gp,-25391
   95938:	2085883a 	add	r2,r4,r2
   9593c:	10800003 	ldbu	r2,0(r2)
   95940:	1009883a 	mov	r4,r2
   95944:	e0bffa17 	ldw	r2,-24(fp)
   95948:	10800d43 	ldbu	r2,53(r2)
   9594c:	0084303a 	nor	r2,zero,r2
   95950:	2084703a 	and	r2,r4,r2
   95954:	1009883a 	mov	r4,r2
   95958:	d0a73444 	addi	r2,gp,-25391
   9595c:	1885883a 	add	r2,r3,r2
   95960:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   95964:	e0fffd03 	ldbu	r3,-12(fp)
   95968:	d0a73444 	addi	r2,gp,-25391
   9596c:	1885883a 	add	r2,r3,r2
   95970:	10800003 	ldbu	r2,0(r2)
   95974:	10803fcc 	andi	r2,r2,255
   95978:	1000071e 	bne	r2,zero,95998 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   9597c:	e0bffa17 	ldw	r2,-24(fp)
   95980:	10800d83 	ldbu	r2,54(r2)
   95984:	0084303a 	nor	r2,zero,r2
   95988:	1007883a 	mov	r3,r2
   9598c:	d0a73403 	ldbu	r2,-25392(gp)
   95990:	1884703a 	and	r2,r3,r2
   95994:	d0a73405 	stb	r2,-25392(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   95998:	e0bffa17 	ldw	r2,-24(fp)
   9599c:	10800c03 	ldbu	r2,48(r2)
   959a0:	10800214 	ori	r2,r2,8
   959a4:	1007883a 	mov	r3,r2
   959a8:	e0bffa17 	ldw	r2,-24(fp)
   959ac:	10c00c05 	stb	r3,48(r2)
   959b0:	e0bff817 	ldw	r2,-32(fp)
   959b4:	e0bffc15 	stw	r2,-16(fp)
   959b8:	e0bffc17 	ldw	r2,-16(fp)
   959bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   959c0:	e0bff703 	ldbu	r2,-36(fp)
   959c4:	10800058 	cmpnei	r2,r2,1
   959c8:	1000011e 	bne	r2,zero,959d0 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   959cc:	00901d40 	call	901d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   959d0:	0005883a 	mov	r2,zero
}
   959d4:	e037883a 	mov	sp,fp
   959d8:	dfc00117 	ldw	ra,4(sp)
   959dc:	df000017 	ldw	fp,0(sp)
   959e0:	dec00204 	addi	sp,sp,8
   959e4:	f800283a 	ret

000959e8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   959e8:	defff604 	addi	sp,sp,-40
   959ec:	dfc00915 	stw	ra,36(sp)
   959f0:	df000815 	stw	fp,32(sp)
   959f4:	df000804 	addi	fp,sp,32
   959f8:	2005883a 	mov	r2,r4
   959fc:	e17fff15 	stw	r5,-4(fp)
   95a00:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   95a04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   95a08:	e0bffe03 	ldbu	r2,-8(fp)
   95a0c:	10800570 	cmpltui	r2,r2,21
   95a10:	1000051e 	bne	r2,zero,95a28 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   95a14:	e0bffe03 	ldbu	r2,-8(fp)
   95a18:	10803fe0 	cmpeqi	r2,r2,255
   95a1c:	1000021e 	bne	r2,zero,95a28 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   95a20:	00800a84 	movi	r2,42
   95a24:	00003406 	br	95af8 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   95a28:	e0bfff17 	ldw	r2,-4(fp)
   95a2c:	1000021e 	bne	r2,zero,95a38 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   95a30:	00800244 	movi	r2,9
   95a34:	00003006 	br	95af8 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95a38:	0005303a 	rdctl	r2,status
   95a3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95a40:	e0fffd17 	ldw	r3,-12(fp)
   95a44:	00bfff84 	movi	r2,-2
   95a48:	1884703a 	and	r2,r3,r2
   95a4c:	1001703a 	wrctl	status,r2
  
  return context;
   95a50:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   95a54:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   95a58:	e0bffe03 	ldbu	r2,-8(fp)
   95a5c:	10803fd8 	cmpnei	r2,r2,255
   95a60:	1000031e 	bne	r2,zero,95a70 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   95a64:	d0a73717 	ldw	r2,-25380(gp)
   95a68:	10800c83 	ldbu	r2,50(r2)
   95a6c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   95a70:	e0fffe03 	ldbu	r3,-8(fp)
   95a74:	008002b4 	movhi	r2,10
   95a78:	108c3704 	addi	r2,r2,12508
   95a7c:	18c7883a 	add	r3,r3,r3
   95a80:	18c7883a 	add	r3,r3,r3
   95a84:	10c5883a 	add	r2,r2,r3
   95a88:	10800017 	ldw	r2,0(r2)
   95a8c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   95a90:	e0bffa17 	ldw	r2,-24(fp)
   95a94:	1000061e 	bne	r2,zero,95ab0 <OSTaskQuery+0xc8>
   95a98:	e0bff817 	ldw	r2,-32(fp)
   95a9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95aa0:	e0bff917 	ldw	r2,-28(fp)
   95aa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   95aa8:	00800a44 	movi	r2,41
   95aac:	00001206 	br	95af8 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   95ab0:	e0bffa17 	ldw	r2,-24(fp)
   95ab4:	10800058 	cmpnei	r2,r2,1
   95ab8:	1000061e 	bne	r2,zero,95ad4 <OSTaskQuery+0xec>
   95abc:	e0bff817 	ldw	r2,-32(fp)
   95ac0:	e0bffb15 	stw	r2,-20(fp)
   95ac4:	e0bffb17 	ldw	r2,-20(fp)
   95ac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   95acc:	008010c4 	movi	r2,67
   95ad0:	00000906 	br	95af8 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   95ad4:	01801b04 	movi	r6,108
   95ad8:	e17ffa17 	ldw	r5,-24(fp)
   95adc:	e13fff17 	ldw	r4,-4(fp)
   95ae0:	009016c0 	call	9016c <OS_MemCopy>
   95ae4:	e0bff817 	ldw	r2,-32(fp)
   95ae8:	e0bffc15 	stw	r2,-16(fp)
   95aec:	e0bffc17 	ldw	r2,-16(fp)
   95af0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   95af4:	0005883a 	mov	r2,zero
}
   95af8:	e037883a 	mov	sp,fp
   95afc:	dfc00117 	ldw	ra,4(sp)
   95b00:	df000017 	ldw	fp,0(sp)
   95b04:	dec00204 	addi	sp,sp,8
   95b08:	f800283a 	ret

00095b0c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   95b0c:	defffc04 	addi	sp,sp,-16
   95b10:	df000315 	stw	fp,12(sp)
   95b14:	df000304 	addi	fp,sp,12
   95b18:	e13ffd15 	stw	r4,-12(fp)
   95b1c:	e17ffe15 	stw	r5,-8(fp)
   95b20:	3005883a 	mov	r2,r6
   95b24:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   95b28:	e0bfff0b 	ldhu	r2,-4(fp)
   95b2c:	1080004c 	andi	r2,r2,1
   95b30:	10000d26 	beq	r2,zero,95b68 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   95b34:	e0bfff0b 	ldhu	r2,-4(fp)
   95b38:	1080008c 	andi	r2,r2,2
   95b3c:	10000a26 	beq	r2,zero,95b68 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   95b40:	00000706 	br	95b60 <OS_TaskStkClr+0x54>
                size--;
   95b44:	e0bffe17 	ldw	r2,-8(fp)
   95b48:	10bfffc4 	addi	r2,r2,-1
   95b4c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   95b50:	e0bffd17 	ldw	r2,-12(fp)
   95b54:	10c00104 	addi	r3,r2,4
   95b58:	e0fffd15 	stw	r3,-12(fp)
   95b5c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   95b60:	e0bffe17 	ldw	r2,-8(fp)
   95b64:	103ff71e 	bne	r2,zero,95b44 <__alt_data_end+0xfffd7344>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   95b68:	0001883a 	nop
   95b6c:	e037883a 	mov	sp,fp
   95b70:	df000017 	ldw	fp,0(sp)
   95b74:	dec00104 	addi	sp,sp,4
   95b78:	f800283a 	ret

00095b7c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   95b7c:	defff904 	addi	sp,sp,-28
   95b80:	dfc00615 	stw	ra,24(sp)
   95b84:	df000515 	stw	fp,20(sp)
   95b88:	df000504 	addi	fp,sp,20
   95b8c:	2005883a 	mov	r2,r4
   95b90:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   95b94:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   95b98:	d0a73603 	ldbu	r2,-25384(gp)
   95b9c:	10803fcc 	andi	r2,r2,255
   95ba0:	1000311e 	bne	r2,zero,95c68 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   95ba4:	e0bfff0b 	ldhu	r2,-4(fp)
   95ba8:	10003026 	beq	r2,zero,95c6c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95bac:	0005303a 	rdctl	r2,status
   95bb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95bb4:	e0fffe17 	ldw	r3,-8(fp)
   95bb8:	00bfff84 	movi	r2,-2
   95bbc:	1884703a 	and	r2,r3,r2
   95bc0:	1001703a 	wrctl	status,r2
  
  return context;
   95bc4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   95bc8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   95bcc:	d0a73717 	ldw	r2,-25380(gp)
   95bd0:	10800d03 	ldbu	r2,52(r2)
   95bd4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   95bd8:	e0fffd03 	ldbu	r3,-12(fp)
   95bdc:	e13ffd03 	ldbu	r4,-12(fp)
   95be0:	d0a73444 	addi	r2,gp,-25391
   95be4:	2085883a 	add	r2,r4,r2
   95be8:	10800003 	ldbu	r2,0(r2)
   95bec:	1009883a 	mov	r4,r2
   95bf0:	d0a73717 	ldw	r2,-25380(gp)
   95bf4:	10800d43 	ldbu	r2,53(r2)
   95bf8:	0084303a 	nor	r2,zero,r2
   95bfc:	2084703a 	and	r2,r4,r2
   95c00:	1009883a 	mov	r4,r2
   95c04:	d0a73444 	addi	r2,gp,-25391
   95c08:	1885883a 	add	r2,r3,r2
   95c0c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   95c10:	e0fffd03 	ldbu	r3,-12(fp)
   95c14:	d0a73444 	addi	r2,gp,-25391
   95c18:	1885883a 	add	r2,r3,r2
   95c1c:	10800003 	ldbu	r2,0(r2)
   95c20:	10803fcc 	andi	r2,r2,255
   95c24:	1000071e 	bne	r2,zero,95c44 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   95c28:	d0a73717 	ldw	r2,-25380(gp)
   95c2c:	10800d83 	ldbu	r2,54(r2)
   95c30:	0084303a 	nor	r2,zero,r2
   95c34:	1007883a 	mov	r3,r2
   95c38:	d0a73403 	ldbu	r2,-25392(gp)
   95c3c:	1884703a 	and	r2,r3,r2
   95c40:	d0a73405 	stb	r2,-25392(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   95c44:	d0a73717 	ldw	r2,-25380(gp)
   95c48:	e0ffff0b 	ldhu	r3,-4(fp)
   95c4c:	10c00b8d 	sth	r3,46(r2)
   95c50:	e0bffb17 	ldw	r2,-20(fp)
   95c54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95c58:	e0bffc17 	ldw	r2,-16(fp)
   95c5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   95c60:	00901d40 	call	901d4 <OS_Sched>
   95c64:	00000106 	br	95c6c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   95c68:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   95c6c:	e037883a 	mov	sp,fp
   95c70:	dfc00117 	ldw	ra,4(sp)
   95c74:	df000017 	ldw	fp,0(sp)
   95c78:	dec00204 	addi	sp,sp,8
   95c7c:	f800283a 	ret

00095c80 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   95c80:	defff704 	addi	sp,sp,-36
   95c84:	dfc00815 	stw	ra,32(sp)
   95c88:	df000715 	stw	fp,28(sp)
   95c8c:	dc000615 	stw	r16,24(sp)
   95c90:	df000704 	addi	fp,sp,28
   95c94:	2011883a 	mov	r8,r4
   95c98:	2809883a 	mov	r4,r5
   95c9c:	3007883a 	mov	r3,r6
   95ca0:	3805883a 	mov	r2,r7
   95ca4:	e23ffb05 	stb	r8,-20(fp)
   95ca8:	e13ffc05 	stb	r4,-16(fp)
   95cac:	e0fffd05 	stb	r3,-12(fp)
   95cb0:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   95cb4:	d0a73603 	ldbu	r2,-25384(gp)
   95cb8:	10803fcc 	andi	r2,r2,255
   95cbc:	10000226 	beq	r2,zero,95cc8 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   95cc0:	00801544 	movi	r2,85
   95cc4:	00004706 	br	95de4 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   95cc8:	e0bffb03 	ldbu	r2,-20(fp)
   95ccc:	1000081e 	bne	r2,zero,95cf0 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   95cd0:	e0bffc03 	ldbu	r2,-16(fp)
   95cd4:	1000061e 	bne	r2,zero,95cf0 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   95cd8:	e0bffd03 	ldbu	r2,-12(fp)
   95cdc:	1000041e 	bne	r2,zero,95cf0 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   95ce0:	e0bffe0b 	ldhu	r2,-8(fp)
   95ce4:	1000021e 	bne	r2,zero,95cf0 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   95ce8:	00801504 	movi	r2,84
   95cec:	00003d06 	br	95de4 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   95cf0:	e0bffc03 	ldbu	r2,-16(fp)
   95cf4:	10800f30 	cmpltui	r2,r2,60
   95cf8:	1000021e 	bne	r2,zero,95d04 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   95cfc:	00801444 	movi	r2,81
   95d00:	00003806 	br	95de4 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   95d04:	e0bffd03 	ldbu	r2,-12(fp)
   95d08:	10800f30 	cmpltui	r2,r2,60
   95d0c:	1000021e 	bne	r2,zero,95d18 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   95d10:	00801484 	movi	r2,82
   95d14:	00003306 	br	95de4 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   95d18:	e0bffe0b 	ldhu	r2,-8(fp)
   95d1c:	1080fa30 	cmpltui	r2,r2,1000
   95d20:	1000021e 	bne	r2,zero,95d2c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   95d24:	008014c4 	movi	r2,83
   95d28:	00002e06 	br	95de4 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   95d2c:	e0bffb03 	ldbu	r2,-20(fp)
   95d30:	01438404 	movi	r5,3600
   95d34:	1009883a 	mov	r4,r2
   95d38:	008b08c0 	call	8b08c <__mulsi3>
   95d3c:	1021883a 	mov	r16,r2
   95d40:	e0bffc03 	ldbu	r2,-16(fp)
   95d44:	01400f04 	movi	r5,60
   95d48:	1009883a 	mov	r4,r2
   95d4c:	008b08c0 	call	8b08c <__mulsi3>
   95d50:	8087883a 	add	r3,r16,r2
   95d54:	e0bffd03 	ldbu	r2,-12(fp)
   95d58:	1885883a 	add	r2,r3,r2
   95d5c:	0140fa04 	movi	r5,1000
   95d60:	1009883a 	mov	r4,r2
   95d64:	008b08c0 	call	8b08c <__mulsi3>
   95d68:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   95d6c:	e0bffe0b 	ldhu	r2,-8(fp)
   95d70:	0140fa04 	movi	r5,1000
   95d74:	1009883a 	mov	r4,r2
   95d78:	008b08c0 	call	8b08c <__mulsi3>
   95d7c:	0140fa04 	movi	r5,1000
   95d80:	1009883a 	mov	r4,r2
   95d84:	0080b2c0 	call	80b2c <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   95d88:	8085883a 	add	r2,r16,r2
   95d8c:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   95d90:	e0bffa17 	ldw	r2,-24(fp)
   95d94:	1004d43a 	srli	r2,r2,16
   95d98:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   95d9c:	e0bffa17 	ldw	r2,-24(fp)
   95da0:	10bfffcc 	andi	r2,r2,65535
   95da4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   95da8:	e0bffa17 	ldw	r2,-24(fp)
   95dac:	10bfffcc 	andi	r2,r2,65535
   95db0:	1009883a 	mov	r4,r2
   95db4:	0095b7c0 	call	95b7c <OSTimeDly>
    while (loops > 0) {
   95db8:	00000706 	br	95dd8 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   95dbc:	01200014 	movui	r4,32768
   95dc0:	0095b7c0 	call	95b7c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   95dc4:	01200014 	movui	r4,32768
   95dc8:	0095b7c0 	call	95b7c <OSTimeDly>
        loops--;
   95dcc:	e0bff90b 	ldhu	r2,-28(fp)
   95dd0:	10bfffc4 	addi	r2,r2,-1
   95dd4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   95dd8:	e0bff90b 	ldhu	r2,-28(fp)
   95ddc:	103ff71e 	bne	r2,zero,95dbc <__alt_data_end+0xfffd75bc>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   95de0:	0005883a 	mov	r2,zero
}
   95de4:	e6ffff04 	addi	sp,fp,-4
   95de8:	dfc00217 	ldw	ra,8(sp)
   95dec:	df000117 	ldw	fp,4(sp)
   95df0:	dc000017 	ldw	r16,0(sp)
   95df4:	dec00304 	addi	sp,sp,12
   95df8:	f800283a 	ret

00095dfc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   95dfc:	defff504 	addi	sp,sp,-44
   95e00:	dfc00a15 	stw	ra,40(sp)
   95e04:	df000915 	stw	fp,36(sp)
   95e08:	df000904 	addi	fp,sp,36
   95e0c:	2005883a 	mov	r2,r4
   95e10:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   95e14:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   95e18:	e0bfff03 	ldbu	r2,-4(fp)
   95e1c:	10800530 	cmpltui	r2,r2,20
   95e20:	1000021e 	bne	r2,zero,95e2c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   95e24:	00800a84 	movi	r2,42
   95e28:	00006406 	br	95fbc <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95e2c:	0005303a 	rdctl	r2,status
   95e30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95e34:	e0fffe17 	ldw	r3,-8(fp)
   95e38:	00bfff84 	movi	r2,-2
   95e3c:	1884703a 	and	r2,r3,r2
   95e40:	1001703a 	wrctl	status,r2
  
  return context;
   95e44:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   95e48:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   95e4c:	e0ffff03 	ldbu	r3,-4(fp)
   95e50:	008002b4 	movhi	r2,10
   95e54:	108c3704 	addi	r2,r2,12508
   95e58:	18c7883a 	add	r3,r3,r3
   95e5c:	18c7883a 	add	r3,r3,r3
   95e60:	10c5883a 	add	r2,r2,r3
   95e64:	10800017 	ldw	r2,0(r2)
   95e68:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   95e6c:	e0bff917 	ldw	r2,-28(fp)
   95e70:	1000061e 	bne	r2,zero,95e8c <OSTimeDlyResume+0x90>
   95e74:	e0bff717 	ldw	r2,-36(fp)
   95e78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95e7c:	e0bff817 	ldw	r2,-32(fp)
   95e80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   95e84:	008010c4 	movi	r2,67
   95e88:	00004c06 	br	95fbc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   95e8c:	e0bff917 	ldw	r2,-28(fp)
   95e90:	10800058 	cmpnei	r2,r2,1
   95e94:	1000061e 	bne	r2,zero,95eb0 <OSTimeDlyResume+0xb4>
   95e98:	e0bff717 	ldw	r2,-36(fp)
   95e9c:	e0bffa15 	stw	r2,-24(fp)
   95ea0:	e0bffa17 	ldw	r2,-24(fp)
   95ea4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   95ea8:	008010c4 	movi	r2,67
   95eac:	00004306 	br	95fbc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   95eb0:	e0bff917 	ldw	r2,-28(fp)
   95eb4:	10800b8b 	ldhu	r2,46(r2)
   95eb8:	10bfffcc 	andi	r2,r2,65535
   95ebc:	1000061e 	bne	r2,zero,95ed8 <OSTimeDlyResume+0xdc>
   95ec0:	e0bff717 	ldw	r2,-36(fp)
   95ec4:	e0bffb15 	stw	r2,-20(fp)
   95ec8:	e0bffb17 	ldw	r2,-20(fp)
   95ecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   95ed0:	00801404 	movi	r2,80
   95ed4:	00003906 	br	95fbc <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   95ed8:	e0bff917 	ldw	r2,-28(fp)
   95edc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   95ee0:	e0bff917 	ldw	r2,-28(fp)
   95ee4:	10800c03 	ldbu	r2,48(r2)
   95ee8:	10803fcc 	andi	r2,r2,255
   95eec:	10800dcc 	andi	r2,r2,55
   95ef0:	10000b26 	beq	r2,zero,95f20 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   95ef4:	e0bff917 	ldw	r2,-28(fp)
   95ef8:	10c00c03 	ldbu	r3,48(r2)
   95efc:	00bff204 	movi	r2,-56
   95f00:	1884703a 	and	r2,r3,r2
   95f04:	1007883a 	mov	r3,r2
   95f08:	e0bff917 	ldw	r2,-28(fp)
   95f0c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   95f10:	e0bff917 	ldw	r2,-28(fp)
   95f14:	00c00044 	movi	r3,1
   95f18:	10c00c45 	stb	r3,49(r2)
   95f1c:	00000206 	br	95f28 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   95f20:	e0bff917 	ldw	r2,-28(fp)
   95f24:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   95f28:	e0bff917 	ldw	r2,-28(fp)
   95f2c:	10800c03 	ldbu	r2,48(r2)
   95f30:	10803fcc 	andi	r2,r2,255
   95f34:	1080020c 	andi	r2,r2,8
   95f38:	10001b1e 	bne	r2,zero,95fa8 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   95f3c:	e0bff917 	ldw	r2,-28(fp)
   95f40:	10c00d83 	ldbu	r3,54(r2)
   95f44:	d0a73403 	ldbu	r2,-25392(gp)
   95f48:	1884b03a 	or	r2,r3,r2
   95f4c:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   95f50:	e0bff917 	ldw	r2,-28(fp)
   95f54:	10800d03 	ldbu	r2,52(r2)
   95f58:	10c03fcc 	andi	r3,r2,255
   95f5c:	e0bff917 	ldw	r2,-28(fp)
   95f60:	10800d03 	ldbu	r2,52(r2)
   95f64:	11003fcc 	andi	r4,r2,255
   95f68:	d0a73444 	addi	r2,gp,-25391
   95f6c:	2085883a 	add	r2,r4,r2
   95f70:	11000003 	ldbu	r4,0(r2)
   95f74:	e0bff917 	ldw	r2,-28(fp)
   95f78:	10800d43 	ldbu	r2,53(r2)
   95f7c:	2084b03a 	or	r2,r4,r2
   95f80:	1009883a 	mov	r4,r2
   95f84:	d0a73444 	addi	r2,gp,-25391
   95f88:	1885883a 	add	r2,r3,r2
   95f8c:	11000005 	stb	r4,0(r2)
   95f90:	e0bff717 	ldw	r2,-36(fp)
   95f94:	e0bffc15 	stw	r2,-16(fp)
   95f98:	e0bffc17 	ldw	r2,-16(fp)
   95f9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   95fa0:	00901d40 	call	901d4 <OS_Sched>
   95fa4:	00000406 	br	95fb8 <OSTimeDlyResume+0x1bc>
   95fa8:	e0bff717 	ldw	r2,-36(fp)
   95fac:	e0bffd15 	stw	r2,-12(fp)
   95fb0:	e0bffd17 	ldw	r2,-12(fp)
   95fb4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   95fb8:	0005883a 	mov	r2,zero
}
   95fbc:	e037883a 	mov	sp,fp
   95fc0:	dfc00117 	ldw	ra,4(sp)
   95fc4:	df000017 	ldw	fp,0(sp)
   95fc8:	dec00204 	addi	sp,sp,8
   95fcc:	f800283a 	ret

00095fd0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   95fd0:	defffb04 	addi	sp,sp,-20
   95fd4:	df000415 	stw	fp,16(sp)
   95fd8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   95fdc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95fe0:	0005303a 	rdctl	r2,status
   95fe4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95fe8:	e0fffe17 	ldw	r3,-8(fp)
   95fec:	00bfff84 	movi	r2,-2
   95ff0:	1884703a 	and	r2,r3,r2
   95ff4:	1001703a 	wrctl	status,r2
  
  return context;
   95ff8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   95ffc:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   96000:	d0a73817 	ldw	r2,-25376(gp)
   96004:	e0bffd15 	stw	r2,-12(fp)
   96008:	e0bffc17 	ldw	r2,-16(fp)
   9600c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96010:	e0bfff17 	ldw	r2,-4(fp)
   96014:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   96018:	e0bffd17 	ldw	r2,-12(fp)
}
   9601c:	e037883a 	mov	sp,fp
   96020:	df000017 	ldw	fp,0(sp)
   96024:	dec00104 	addi	sp,sp,4
   96028:	f800283a 	ret

0009602c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   9602c:	defffb04 	addi	sp,sp,-20
   96030:	df000415 	stw	fp,16(sp)
   96034:	df000404 	addi	fp,sp,16
   96038:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9603c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96040:	0005303a 	rdctl	r2,status
   96044:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96048:	e0fffd17 	ldw	r3,-12(fp)
   9604c:	00bfff84 	movi	r2,-2
   96050:	1884703a 	and	r2,r3,r2
   96054:	1001703a 	wrctl	status,r2
  
  return context;
   96058:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   9605c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   96060:	e0bfff17 	ldw	r2,-4(fp)
   96064:	d0a73815 	stw	r2,-25376(gp)
   96068:	e0bffc17 	ldw	r2,-16(fp)
   9606c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96070:	e0bffe17 	ldw	r2,-8(fp)
   96074:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   96078:	0001883a 	nop
   9607c:	e037883a 	mov	sp,fp
   96080:	df000017 	ldw	fp,0(sp)
   96084:	dec00104 	addi	sp,sp,4
   96088:	f800283a 	ret

0009608c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   9608c:	defffd04 	addi	sp,sp,-12
   96090:	dfc00215 	stw	ra,8(sp)
   96094:	df000115 	stw	fp,4(sp)
   96098:	df000104 	addi	fp,sp,4
   9609c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   960a0:	d1600904 	addi	r5,gp,-32732
   960a4:	e13fff17 	ldw	r4,-4(fp)
   960a8:	00971000 	call	97100 <alt_dev_llist_insert>
}
   960ac:	e037883a 	mov	sp,fp
   960b0:	dfc00117 	ldw	ra,4(sp)
   960b4:	df000017 	ldw	fp,0(sp)
   960b8:	dec00204 	addi	sp,sp,8
   960bc:	f800283a 	ret

000960c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   960c0:	defffd04 	addi	sp,sp,-12
   960c4:	dfc00215 	stw	ra,8(sp)
   960c8:	df000115 	stw	fp,4(sp)
   960cc:	df000104 	addi	fp,sp,4
   960d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   960d4:	009780c0 	call	9780c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   960d8:	00800044 	movi	r2,1
   960dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   960e0:	0001883a 	nop
   960e4:	e037883a 	mov	sp,fp
   960e8:	dfc00117 	ldw	ra,4(sp)
   960ec:	df000017 	ldw	fp,0(sp)
   960f0:	dec00204 	addi	sp,sp,8
   960f4:	f800283a 	ret

000960f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   960f8:	defffe04 	addi	sp,sp,-8
   960fc:	dfc00115 	stw	ra,4(sp)
   96100:	df000015 	stw	fp,0(sp)
   96104:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   96108:	01c0fa04 	movi	r7,1000
   9610c:	01800144 	movi	r6,5
   96110:	000b883a 	mov	r5,zero
   96114:	01000134 	movhi	r4,4
   96118:	21000804 	addi	r4,r4,32
   9611c:	0096efc0 	call	96efc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   96120:	01800184 	movi	r6,6
   96124:	000b883a 	mov	r5,zero
   96128:	010002b4 	movhi	r4,10
   9612c:	21242a04 	addi	r4,r4,-28504
   96130:	00962bc0 	call	962bc <altera_avalon_jtag_uart_init>
   96134:	010002b4 	movhi	r4,10
   96138:	21242004 	addi	r4,r4,-28544
   9613c:	009608c0 	call	9608c <alt_dev_reg>
}
   96140:	0001883a 	nop
   96144:	e037883a 	mov	sp,fp
   96148:	dfc00117 	ldw	ra,4(sp)
   9614c:	df000017 	ldw	fp,0(sp)
   96150:	dec00204 	addi	sp,sp,8
   96154:	f800283a 	ret

00096158 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   96158:	defffa04 	addi	sp,sp,-24
   9615c:	dfc00515 	stw	ra,20(sp)
   96160:	df000415 	stw	fp,16(sp)
   96164:	df000404 	addi	fp,sp,16
   96168:	e13ffd15 	stw	r4,-12(fp)
   9616c:	e17ffe15 	stw	r5,-8(fp)
   96170:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   96174:	e0bffd17 	ldw	r2,-12(fp)
   96178:	10800017 	ldw	r2,0(r2)
   9617c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   96180:	e0bffc17 	ldw	r2,-16(fp)
   96184:	10c00a04 	addi	r3,r2,40
   96188:	e0bffd17 	ldw	r2,-12(fp)
   9618c:	10800217 	ldw	r2,8(r2)
   96190:	100f883a 	mov	r7,r2
   96194:	e1bfff17 	ldw	r6,-4(fp)
   96198:	e17ffe17 	ldw	r5,-8(fp)
   9619c:	1809883a 	mov	r4,r3
   961a0:	00969040 	call	96904 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   961a4:	e037883a 	mov	sp,fp
   961a8:	dfc00117 	ldw	ra,4(sp)
   961ac:	df000017 	ldw	fp,0(sp)
   961b0:	dec00204 	addi	sp,sp,8
   961b4:	f800283a 	ret

000961b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   961b8:	defffa04 	addi	sp,sp,-24
   961bc:	dfc00515 	stw	ra,20(sp)
   961c0:	df000415 	stw	fp,16(sp)
   961c4:	df000404 	addi	fp,sp,16
   961c8:	e13ffd15 	stw	r4,-12(fp)
   961cc:	e17ffe15 	stw	r5,-8(fp)
   961d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   961d4:	e0bffd17 	ldw	r2,-12(fp)
   961d8:	10800017 	ldw	r2,0(r2)
   961dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   961e0:	e0bffc17 	ldw	r2,-16(fp)
   961e4:	10c00a04 	addi	r3,r2,40
   961e8:	e0bffd17 	ldw	r2,-12(fp)
   961ec:	10800217 	ldw	r2,8(r2)
   961f0:	100f883a 	mov	r7,r2
   961f4:	e1bfff17 	ldw	r6,-4(fp)
   961f8:	e17ffe17 	ldw	r5,-8(fp)
   961fc:	1809883a 	mov	r4,r3
   96200:	0096bc00 	call	96bc0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   96204:	e037883a 	mov	sp,fp
   96208:	dfc00117 	ldw	ra,4(sp)
   9620c:	df000017 	ldw	fp,0(sp)
   96210:	dec00204 	addi	sp,sp,8
   96214:	f800283a 	ret

00096218 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   96218:	defffc04 	addi	sp,sp,-16
   9621c:	dfc00315 	stw	ra,12(sp)
   96220:	df000215 	stw	fp,8(sp)
   96224:	df000204 	addi	fp,sp,8
   96228:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9622c:	e0bfff17 	ldw	r2,-4(fp)
   96230:	10800017 	ldw	r2,0(r2)
   96234:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   96238:	e0bffe17 	ldw	r2,-8(fp)
   9623c:	10c00a04 	addi	r3,r2,40
   96240:	e0bfff17 	ldw	r2,-4(fp)
   96244:	10800217 	ldw	r2,8(r2)
   96248:	100b883a 	mov	r5,r2
   9624c:	1809883a 	mov	r4,r3
   96250:	00967ac0 	call	967ac <altera_avalon_jtag_uart_close>
}
   96254:	e037883a 	mov	sp,fp
   96258:	dfc00117 	ldw	ra,4(sp)
   9625c:	df000017 	ldw	fp,0(sp)
   96260:	dec00204 	addi	sp,sp,8
   96264:	f800283a 	ret

00096268 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   96268:	defffa04 	addi	sp,sp,-24
   9626c:	dfc00515 	stw	ra,20(sp)
   96270:	df000415 	stw	fp,16(sp)
   96274:	df000404 	addi	fp,sp,16
   96278:	e13ffd15 	stw	r4,-12(fp)
   9627c:	e17ffe15 	stw	r5,-8(fp)
   96280:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   96284:	e0bffd17 	ldw	r2,-12(fp)
   96288:	10800017 	ldw	r2,0(r2)
   9628c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   96290:	e0bffc17 	ldw	r2,-16(fp)
   96294:	10800a04 	addi	r2,r2,40
   96298:	e1bfff17 	ldw	r6,-4(fp)
   9629c:	e17ffe17 	ldw	r5,-8(fp)
   962a0:	1009883a 	mov	r4,r2
   962a4:	00968140 	call	96814 <altera_avalon_jtag_uart_ioctl>
}
   962a8:	e037883a 	mov	sp,fp
   962ac:	dfc00117 	ldw	ra,4(sp)
   962b0:	df000017 	ldw	fp,0(sp)
   962b4:	dec00204 	addi	sp,sp,8
   962b8:	f800283a 	ret

000962bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   962bc:	defff104 	addi	sp,sp,-60
   962c0:	dfc00e15 	stw	ra,56(sp)
   962c4:	df000d15 	stw	fp,52(sp)
   962c8:	df000d04 	addi	fp,sp,52
   962cc:	e13ff915 	stw	r4,-28(fp)
   962d0:	e17ffa15 	stw	r5,-24(fp)
   962d4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   962d8:	e0bff917 	ldw	r2,-28(fp)
   962dc:	10800c04 	addi	r2,r2,48
   962e0:	e0bff415 	stw	r2,-48(fp)
   962e4:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   962e8:	e0bff80b 	ldhu	r2,-32(fp)
   962ec:	e0fff884 	addi	r3,fp,-30
   962f0:	180b883a 	mov	r5,r3
   962f4:	1009883a 	mov	r4,r2
   962f8:	0090d400 	call	90d40 <OSFlagCreate>
   962fc:	1007883a 	mov	r3,r2
   96300:	e0bff417 	ldw	r2,-48(fp)
   96304:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   96308:	e0bff917 	ldw	r2,-28(fp)
   9630c:	10800a04 	addi	r2,r2,40
   96310:	e0bff515 	stw	r2,-44(fp)
   96314:	00800044 	movi	r2,1
   96318:	e0bff78d 	sth	r2,-34(fp)
   9631c:	e0bff78b 	ldhu	r2,-34(fp)
   96320:	1009883a 	mov	r4,r2
   96324:	0093a600 	call	93a60 <OSSemCreate>
   96328:	1007883a 	mov	r3,r2
   9632c:	e0bff517 	ldw	r2,-44(fp)
   96330:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   96334:	e0bff917 	ldw	r2,-28(fp)
   96338:	10800b04 	addi	r2,r2,44
   9633c:	e0bff615 	stw	r2,-40(fp)
   96340:	00800044 	movi	r2,1
   96344:	e0bff70d 	sth	r2,-36(fp)
   96348:	e0bff70b 	ldhu	r2,-36(fp)
   9634c:	1009883a 	mov	r4,r2
   96350:	0093a600 	call	93a60 <OSSemCreate>
   96354:	1007883a 	mov	r3,r2
   96358:	e0bff617 	ldw	r2,-40(fp)
   9635c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   96360:	e0bff917 	ldw	r2,-28(fp)
   96364:	00c00044 	movi	r3,1
   96368:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   9636c:	e0bff917 	ldw	r2,-28(fp)
   96370:	10800017 	ldw	r2,0(r2)
   96374:	10800104 	addi	r2,r2,4
   96378:	1007883a 	mov	r3,r2
   9637c:	e0bff917 	ldw	r2,-28(fp)
   96380:	10800817 	ldw	r2,32(r2)
   96384:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   96388:	e0bffa17 	ldw	r2,-24(fp)
   9638c:	e0fffb17 	ldw	r3,-20(fp)
   96390:	d8000015 	stw	zero,0(sp)
   96394:	e1fff917 	ldw	r7,-28(fp)
   96398:	01800274 	movhi	r6,9
   9639c:	31990104 	addi	r6,r6,25604
   963a0:	180b883a 	mov	r5,r3
   963a4:	1009883a 	mov	r4,r2
   963a8:	008db8c0 	call	8db8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   963ac:	e0bff917 	ldw	r2,-28(fp)
   963b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   963b4:	e0bff917 	ldw	r2,-28(fp)
   963b8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   963bc:	d0e73c17 	ldw	r3,-25360(gp)
   963c0:	e1fff917 	ldw	r7,-28(fp)
   963c4:	01800274 	movhi	r6,9
   963c8:	3199aa04 	addi	r6,r6,26280
   963cc:	180b883a 	mov	r5,r3
   963d0:	1009883a 	mov	r4,r2
   963d4:	0096f780 	call	96f78 <alt_alarm_start>
   963d8:	1000040e 	bge	r2,zero,963ec <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   963dc:	e0fff917 	ldw	r3,-28(fp)
   963e0:	00a00034 	movhi	r2,32768
   963e4:	10bfffc4 	addi	r2,r2,-1
   963e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   963ec:	0001883a 	nop
   963f0:	e037883a 	mov	sp,fp
   963f4:	dfc00117 	ldw	ra,4(sp)
   963f8:	df000017 	ldw	fp,0(sp)
   963fc:	dec00204 	addi	sp,sp,8
   96400:	f800283a 	ret

00096404 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   96404:	defff204 	addi	sp,sp,-56
   96408:	dfc00d15 	stw	ra,52(sp)
   9640c:	df000c15 	stw	fp,48(sp)
   96410:	df000c04 	addi	fp,sp,48
   96414:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   96418:	e0bfff17 	ldw	r2,-4(fp)
   9641c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   96420:	e0bff617 	ldw	r2,-40(fp)
   96424:	10800017 	ldw	r2,0(r2)
   96428:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9642c:	e0bff717 	ldw	r2,-36(fp)
   96430:	10800104 	addi	r2,r2,4
   96434:	10800037 	ldwio	r2,0(r2)
   96438:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   9643c:	e0bff817 	ldw	r2,-32(fp)
   96440:	1080c00c 	andi	r2,r2,768
   96444:	10009126 	beq	r2,zero,9668c <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   96448:	e0bff817 	ldw	r2,-32(fp)
   9644c:	1080400c 	andi	r2,r2,256
   96450:	10004726 	beq	r2,zero,96570 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   96454:	00800074 	movhi	r2,1
   96458:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9645c:	e0bff617 	ldw	r2,-40(fp)
   96460:	10800d17 	ldw	r2,52(r2)
   96464:	10800044 	addi	r2,r2,1
   96468:	1081ffcc 	andi	r2,r2,2047
   9646c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   96470:	e0bff617 	ldw	r2,-40(fp)
   96474:	10c00e17 	ldw	r3,56(r2)
   96478:	e0bff917 	ldw	r2,-28(fp)
   9647c:	18802726 	beq	r3,r2,9651c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   96480:	e0bff717 	ldw	r2,-36(fp)
   96484:	10800037 	ldwio	r2,0(r2)
   96488:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   9648c:	e0bff417 	ldw	r2,-48(fp)
   96490:	10a0000c 	andi	r2,r2,32768
   96494:	10002326 	beq	r2,zero,96524 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   96498:	e0bff617 	ldw	r2,-40(fp)
   9649c:	10800d17 	ldw	r2,52(r2)
   964a0:	e0fff417 	ldw	r3,-48(fp)
   964a4:	1809883a 	mov	r4,r3
   964a8:	e0fff617 	ldw	r3,-40(fp)
   964ac:	1885883a 	add	r2,r3,r2
   964b0:	10801104 	addi	r2,r2,68
   964b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   964b8:	e0bff617 	ldw	r2,-40(fp)
   964bc:	10800d17 	ldw	r2,52(r2)
   964c0:	10800044 	addi	r2,r2,1
   964c4:	10c1ffcc 	andi	r3,r2,2047
   964c8:	e0bff617 	ldw	r2,-40(fp)
   964cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   964d0:	e0bff617 	ldw	r2,-40(fp)
   964d4:	10800c17 	ldw	r2,48(r2)
   964d8:	e0bffb15 	stw	r2,-20(fp)
   964dc:	00800044 	movi	r2,1
   964e0:	e0bffc0d 	sth	r2,-16(fp)
   964e4:	00800044 	movi	r2,1
   964e8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   964ec:	d0a72843 	ldbu	r2,-25439(gp)
   964f0:	10803fcc 	andi	r2,r2,255
   964f4:	103fd926 	beq	r2,zero,9645c <__alt_data_end+0xfffd7c5c>
  {
    OSFlagPost (group, flags, opt, &err);
   964f8:	e0bffc0b 	ldhu	r2,-16(fp)
   964fc:	e0fffc83 	ldbu	r3,-14(fp)
   96500:	e13ffdc4 	addi	r4,fp,-9
   96504:	200f883a 	mov	r7,r4
   96508:	180d883a 	mov	r6,r3
   9650c:	100b883a 	mov	r5,r2
   96510:	e13ffb17 	ldw	r4,-20(fp)
   96514:	009191c0 	call	9191c <OSFlagPost>
      }
   96518:	003fd006 	br	9645c <__alt_data_end+0xfffd7c5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   9651c:	0001883a 	nop
   96520:	00000106 	br	96528 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   96524:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   96528:	e0bff417 	ldw	r2,-48(fp)
   9652c:	10bfffec 	andhi	r2,r2,65535
   96530:	10000f26 	beq	r2,zero,96570 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   96534:	e0bff617 	ldw	r2,-40(fp)
   96538:	10c00817 	ldw	r3,32(r2)
   9653c:	00bfff84 	movi	r2,-2
   96540:	1886703a 	and	r3,r3,r2
   96544:	e0bff617 	ldw	r2,-40(fp)
   96548:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   9654c:	e0bff717 	ldw	r2,-36(fp)
   96550:	10800104 	addi	r2,r2,4
   96554:	1007883a 	mov	r3,r2
   96558:	e0bff617 	ldw	r2,-40(fp)
   9655c:	10800817 	ldw	r2,32(r2)
   96560:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   96564:	e0bff717 	ldw	r2,-36(fp)
   96568:	10800104 	addi	r2,r2,4
   9656c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   96570:	e0bff817 	ldw	r2,-32(fp)
   96574:	1080800c 	andi	r2,r2,512
   96578:	103fac26 	beq	r2,zero,9642c <__alt_data_end+0xfffd7c2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   9657c:	e0bff817 	ldw	r2,-32(fp)
   96580:	1004d43a 	srli	r2,r2,16
   96584:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   96588:	00002606 	br	96624 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   9658c:	e0bff717 	ldw	r2,-36(fp)
   96590:	e0fff617 	ldw	r3,-40(fp)
   96594:	18c01017 	ldw	r3,64(r3)
   96598:	e13ff617 	ldw	r4,-40(fp)
   9659c:	20c7883a 	add	r3,r4,r3
   965a0:	18c21104 	addi	r3,r3,2116
   965a4:	18c00003 	ldbu	r3,0(r3)
   965a8:	18c03fcc 	andi	r3,r3,255
   965ac:	18c0201c 	xori	r3,r3,128
   965b0:	18ffe004 	addi	r3,r3,-128
   965b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   965b8:	e0bff617 	ldw	r2,-40(fp)
   965bc:	10801017 	ldw	r2,64(r2)
   965c0:	10800044 	addi	r2,r2,1
   965c4:	10c1ffcc 	andi	r3,r2,2047
   965c8:	e0bff617 	ldw	r2,-40(fp)
   965cc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   965d0:	e0bff617 	ldw	r2,-40(fp)
   965d4:	10800c17 	ldw	r2,48(r2)
   965d8:	e0bffa15 	stw	r2,-24(fp)
   965dc:	00800084 	movi	r2,2
   965e0:	e0bffd0d 	sth	r2,-12(fp)
   965e4:	00800044 	movi	r2,1
   965e8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   965ec:	d0a72843 	ldbu	r2,-25439(gp)
   965f0:	10803fcc 	andi	r2,r2,255
   965f4:	10000826 	beq	r2,zero,96618 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   965f8:	e0bffd0b 	ldhu	r2,-12(fp)
   965fc:	e0fffd83 	ldbu	r3,-10(fp)
   96600:	e13ffe04 	addi	r4,fp,-8
   96604:	200f883a 	mov	r7,r4
   96608:	180d883a 	mov	r6,r3
   9660c:	100b883a 	mov	r5,r2
   96610:	e13ffa17 	ldw	r4,-24(fp)
   96614:	009191c0 	call	9191c <OSFlagPost>

        space--;
   96618:	e0bff517 	ldw	r2,-44(fp)
   9661c:	10bfffc4 	addi	r2,r2,-1
   96620:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   96624:	e0bff517 	ldw	r2,-44(fp)
   96628:	10000526 	beq	r2,zero,96640 <altera_avalon_jtag_uart_irq+0x23c>
   9662c:	e0bff617 	ldw	r2,-40(fp)
   96630:	10c01017 	ldw	r3,64(r2)
   96634:	e0bff617 	ldw	r2,-40(fp)
   96638:	10800f17 	ldw	r2,60(r2)
   9663c:	18bfd31e 	bne	r3,r2,9658c <__alt_data_end+0xfffd7d8c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   96640:	e0bff517 	ldw	r2,-44(fp)
   96644:	103f7926 	beq	r2,zero,9642c <__alt_data_end+0xfffd7c2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   96648:	e0bff617 	ldw	r2,-40(fp)
   9664c:	10c00817 	ldw	r3,32(r2)
   96650:	00bfff44 	movi	r2,-3
   96654:	1886703a 	and	r3,r3,r2
   96658:	e0bff617 	ldw	r2,-40(fp)
   9665c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   96660:	e0bff617 	ldw	r2,-40(fp)
   96664:	10800017 	ldw	r2,0(r2)
   96668:	10800104 	addi	r2,r2,4
   9666c:	1007883a 	mov	r3,r2
   96670:	e0bff617 	ldw	r2,-40(fp)
   96674:	10800817 	ldw	r2,32(r2)
   96678:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9667c:	e0bff717 	ldw	r2,-36(fp)
   96680:	10800104 	addi	r2,r2,4
   96684:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   96688:	003f6806 	br	9642c <__alt_data_end+0xfffd7c2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   9668c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   96690:	0001883a 	nop
   96694:	e037883a 	mov	sp,fp
   96698:	dfc00117 	ldw	ra,4(sp)
   9669c:	df000017 	ldw	fp,0(sp)
   966a0:	dec00204 	addi	sp,sp,8
   966a4:	f800283a 	ret

000966a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   966a8:	defff904 	addi	sp,sp,-28
   966ac:	dfc00615 	stw	ra,24(sp)
   966b0:	df000515 	stw	fp,20(sp)
   966b4:	df000504 	addi	fp,sp,20
   966b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   966bc:	e0bfff17 	ldw	r2,-4(fp)
   966c0:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   966c4:	e0bffb17 	ldw	r2,-20(fp)
   966c8:	10800017 	ldw	r2,0(r2)
   966cc:	10800104 	addi	r2,r2,4
   966d0:	10800037 	ldwio	r2,0(r2)
   966d4:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   966d8:	e0bffc17 	ldw	r2,-16(fp)
   966dc:	1081000c 	andi	r2,r2,1024
   966e0:	10000b26 	beq	r2,zero,96710 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   966e4:	e0bffb17 	ldw	r2,-20(fp)
   966e8:	10800017 	ldw	r2,0(r2)
   966ec:	10800104 	addi	r2,r2,4
   966f0:	1007883a 	mov	r3,r2
   966f4:	e0bffb17 	ldw	r2,-20(fp)
   966f8:	10800817 	ldw	r2,32(r2)
   966fc:	10810014 	ori	r2,r2,1024
   96700:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   96704:	e0bffb17 	ldw	r2,-20(fp)
   96708:	10000915 	stw	zero,36(r2)
   9670c:	00002106 	br	96794 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   96710:	e0bffb17 	ldw	r2,-20(fp)
   96714:	10c00917 	ldw	r3,36(r2)
   96718:	00a00034 	movhi	r2,32768
   9671c:	10bfff04 	addi	r2,r2,-4
   96720:	10c01c36 	bltu	r2,r3,96794 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   96724:	e0bffb17 	ldw	r2,-20(fp)
   96728:	10800917 	ldw	r2,36(r2)
   9672c:	10c00044 	addi	r3,r2,1
   96730:	e0bffb17 	ldw	r2,-20(fp)
   96734:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   96738:	e0bffb17 	ldw	r2,-20(fp)
   9673c:	10c00917 	ldw	r3,36(r2)
   96740:	e0bffb17 	ldw	r2,-20(fp)
   96744:	10800117 	ldw	r2,4(r2)
   96748:	18801236 	bltu	r3,r2,96794 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   9674c:	e0bffb17 	ldw	r2,-20(fp)
   96750:	10800c17 	ldw	r2,48(r2)
   96754:	e0bffd15 	stw	r2,-12(fp)
   96758:	00800104 	movi	r2,4
   9675c:	e0bffe0d 	sth	r2,-8(fp)
   96760:	00800044 	movi	r2,1
   96764:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   96768:	d0a72843 	ldbu	r2,-25439(gp)
   9676c:	10803fcc 	andi	r2,r2,255
   96770:	10000826 	beq	r2,zero,96794 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   96774:	e0bffe0b 	ldhu	r2,-8(fp)
   96778:	e0fffe83 	ldbu	r3,-6(fp)
   9677c:	e13ffec4 	addi	r4,fp,-5
   96780:	200f883a 	mov	r7,r4
   96784:	180d883a 	mov	r6,r3
   96788:	100b883a 	mov	r5,r2
   9678c:	e13ffd17 	ldw	r4,-12(fp)
   96790:	009191c0 	call	9191c <OSFlagPost>
   96794:	d0a73c17 	ldw	r2,-25360(gp)
    }
  }

  return alt_ticks_per_second();
}
   96798:	e037883a 	mov	sp,fp
   9679c:	dfc00117 	ldw	ra,4(sp)
   967a0:	df000017 	ldw	fp,0(sp)
   967a4:	dec00204 	addi	sp,sp,8
   967a8:	f800283a 	ret

000967ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   967ac:	defffd04 	addi	sp,sp,-12
   967b0:	df000215 	stw	fp,8(sp)
   967b4:	df000204 	addi	fp,sp,8
   967b8:	e13ffe15 	stw	r4,-8(fp)
   967bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   967c0:	00000506 	br	967d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   967c4:	e0bfff17 	ldw	r2,-4(fp)
   967c8:	1090000c 	andi	r2,r2,16384
   967cc:	10000226 	beq	r2,zero,967d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   967d0:	00bffd44 	movi	r2,-11
   967d4:	00000b06 	br	96804 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   967d8:	e0bffe17 	ldw	r2,-8(fp)
   967dc:	10c01017 	ldw	r3,64(r2)
   967e0:	e0bffe17 	ldw	r2,-8(fp)
   967e4:	10800f17 	ldw	r2,60(r2)
   967e8:	18800526 	beq	r3,r2,96800 <altera_avalon_jtag_uart_close+0x54>
   967ec:	e0bffe17 	ldw	r2,-8(fp)
   967f0:	10c00917 	ldw	r3,36(r2)
   967f4:	e0bffe17 	ldw	r2,-8(fp)
   967f8:	10800117 	ldw	r2,4(r2)
   967fc:	18bff136 	bltu	r3,r2,967c4 <__alt_data_end+0xfffd7fc4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   96800:	0005883a 	mov	r2,zero
}
   96804:	e037883a 	mov	sp,fp
   96808:	df000017 	ldw	fp,0(sp)
   9680c:	dec00104 	addi	sp,sp,4
   96810:	f800283a 	ret

00096814 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   96814:	defffa04 	addi	sp,sp,-24
   96818:	df000515 	stw	fp,20(sp)
   9681c:	df000504 	addi	fp,sp,20
   96820:	e13ffd15 	stw	r4,-12(fp)
   96824:	e17ffe15 	stw	r5,-8(fp)
   96828:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   9682c:	00bff9c4 	movi	r2,-25
   96830:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   96834:	e0bffe17 	ldw	r2,-8(fp)
   96838:	10da8060 	cmpeqi	r3,r2,27137
   9683c:	1800031e 	bne	r3,zero,9684c <altera_avalon_jtag_uart_ioctl+0x38>
   96840:	109a80a0 	cmpeqi	r2,r2,27138
   96844:	1000181e 	bne	r2,zero,968a8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   96848:	00002906 	br	968f0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   9684c:	e0bffd17 	ldw	r2,-12(fp)
   96850:	10c00117 	ldw	r3,4(r2)
   96854:	00a00034 	movhi	r2,32768
   96858:	10bfffc4 	addi	r2,r2,-1
   9685c:	18802126 	beq	r3,r2,968e4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   96860:	e0bfff17 	ldw	r2,-4(fp)
   96864:	10800017 	ldw	r2,0(r2)
   96868:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   9686c:	e0bffc17 	ldw	r2,-16(fp)
   96870:	10800090 	cmplti	r2,r2,2
   96874:	1000061e 	bne	r2,zero,96890 <altera_avalon_jtag_uart_ioctl+0x7c>
   96878:	e0fffc17 	ldw	r3,-16(fp)
   9687c:	00a00034 	movhi	r2,32768
   96880:	10bfffc4 	addi	r2,r2,-1
   96884:	18800226 	beq	r3,r2,96890 <altera_avalon_jtag_uart_ioctl+0x7c>
   96888:	e0bffc17 	ldw	r2,-16(fp)
   9688c:	00000206 	br	96898 <altera_avalon_jtag_uart_ioctl+0x84>
   96890:	00a00034 	movhi	r2,32768
   96894:	10bfff84 	addi	r2,r2,-2
   96898:	e0fffd17 	ldw	r3,-12(fp)
   9689c:	18800115 	stw	r2,4(r3)
      rc = 0;
   968a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   968a4:	00000f06 	br	968e4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   968a8:	e0bffd17 	ldw	r2,-12(fp)
   968ac:	10c00117 	ldw	r3,4(r2)
   968b0:	00a00034 	movhi	r2,32768
   968b4:	10bfffc4 	addi	r2,r2,-1
   968b8:	18800c26 	beq	r3,r2,968ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   968bc:	e0bffd17 	ldw	r2,-12(fp)
   968c0:	10c00917 	ldw	r3,36(r2)
   968c4:	e0bffd17 	ldw	r2,-12(fp)
   968c8:	10800117 	ldw	r2,4(r2)
   968cc:	1885803a 	cmpltu	r2,r3,r2
   968d0:	10c03fcc 	andi	r3,r2,255
   968d4:	e0bfff17 	ldw	r2,-4(fp)
   968d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   968dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   968e0:	00000206 	br	968ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   968e4:	0001883a 	nop
   968e8:	00000106 	br	968f0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   968ec:	0001883a 	nop

  default:
    break;
  }

  return rc;
   968f0:	e0bffb17 	ldw	r2,-20(fp)
}
   968f4:	e037883a 	mov	sp,fp
   968f8:	df000017 	ldw	fp,0(sp)
   968fc:	dec00104 	addi	sp,sp,4
   96900:	f800283a 	ret

00096904 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   96904:	deffed04 	addi	sp,sp,-76
   96908:	dfc01215 	stw	ra,72(sp)
   9690c:	df001115 	stw	fp,68(sp)
   96910:	df001104 	addi	fp,sp,68
   96914:	e13ffc15 	stw	r4,-16(fp)
   96918:	e17ffd15 	stw	r5,-12(fp)
   9691c:	e1bffe15 	stw	r6,-8(fp)
   96920:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   96924:	e0bffd17 	ldw	r2,-12(fp)
   96928:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   9692c:	e0bffc17 	ldw	r2,-16(fp)
   96930:	10800a17 	ldw	r2,40(r2)
   96934:	e0bff815 	stw	r2,-32(fp)
   96938:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   9693c:	e0bff90b 	ldhu	r2,-28(fp)
   96940:	e0fffb04 	addi	r3,fp,-20
   96944:	180d883a 	mov	r6,r3
   96948:	100b883a 	mov	r5,r2
   9694c:	e13ff817 	ldw	r4,-32(fp)
   96950:	0093d780 	call	93d78 <OSSemPend>

  while (space > 0)
   96954:	00006106 	br	96adc <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   96958:	e0bffc17 	ldw	r2,-16(fp)
   9695c:	10800d17 	ldw	r2,52(r2)
   96960:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   96964:	e0bffc17 	ldw	r2,-16(fp)
   96968:	10800e17 	ldw	r2,56(r2)
   9696c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   96970:	e0fff317 	ldw	r3,-52(fp)
   96974:	e0bff417 	ldw	r2,-48(fp)
   96978:	18800536 	bltu	r3,r2,96990 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   9697c:	e0fff317 	ldw	r3,-52(fp)
   96980:	e0bff417 	ldw	r2,-48(fp)
   96984:	1885c83a 	sub	r2,r3,r2
   96988:	e0bff115 	stw	r2,-60(fp)
   9698c:	00000406 	br	969a0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   96990:	00c20004 	movi	r3,2048
   96994:	e0bff417 	ldw	r2,-48(fp)
   96998:	1885c83a 	sub	r2,r3,r2
   9699c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   969a0:	e0bff117 	ldw	r2,-60(fp)
   969a4:	10001e26 	beq	r2,zero,96a20 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   969a8:	e0fffe17 	ldw	r3,-8(fp)
   969ac:	e0bff117 	ldw	r2,-60(fp)
   969b0:	1880022e 	bgeu	r3,r2,969bc <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   969b4:	e0bffe17 	ldw	r2,-8(fp)
   969b8:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   969bc:	e0bffc17 	ldw	r2,-16(fp)
   969c0:	10c01104 	addi	r3,r2,68
   969c4:	e0bff417 	ldw	r2,-48(fp)
   969c8:	1885883a 	add	r2,r3,r2
   969cc:	e1bff117 	ldw	r6,-60(fp)
   969d0:	100b883a 	mov	r5,r2
   969d4:	e13ff017 	ldw	r4,-64(fp)
   969d8:	008633c0 	call	8633c <memcpy>
      ptr   += n;
   969dc:	e0fff017 	ldw	r3,-64(fp)
   969e0:	e0bff117 	ldw	r2,-60(fp)
   969e4:	1885883a 	add	r2,r3,r2
   969e8:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   969ec:	e0fffe17 	ldw	r3,-8(fp)
   969f0:	e0bff117 	ldw	r2,-60(fp)
   969f4:	1885c83a 	sub	r2,r3,r2
   969f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   969fc:	e0fff417 	ldw	r3,-48(fp)
   96a00:	e0bff117 	ldw	r2,-60(fp)
   96a04:	1885883a 	add	r2,r3,r2
   96a08:	10c1ffcc 	andi	r3,r2,2047
   96a0c:	e0bffc17 	ldw	r2,-16(fp)
   96a10:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   96a14:	e0bffe17 	ldw	r2,-8(fp)
   96a18:	00bfcf16 	blt	zero,r2,96958 <__alt_data_end+0xfffd8158>
   96a1c:	00000106 	br	96a24 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   96a20:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   96a24:	e0fff017 	ldw	r3,-64(fp)
   96a28:	e0bffd17 	ldw	r2,-12(fp)
   96a2c:	18802e1e 	bne	r3,r2,96ae8 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   96a30:	e0bfff17 	ldw	r2,-4(fp)
   96a34:	1090000c 	andi	r2,r2,16384
   96a38:	10002d1e 	bne	r2,zero,96af0 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   96a3c:	d0a72843 	ldbu	r2,-25439(gp)
   96a40:	10803fcc 	andi	r2,r2,255
   96a44:	10800058 	cmpnei	r2,r2,1
   96a48:	1000161e 	bne	r2,zero,96aa4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   96a4c:	e0bffc17 	ldw	r2,-16(fp)
   96a50:	10800c17 	ldw	r2,48(r2)
   96a54:	e0bff215 	stw	r2,-56(fp)
   96a58:	00800144 	movi	r2,5
   96a5c:	e0bff98d 	sth	r2,-26(fp)
   96a60:	00bfe0c4 	movi	r2,-125
   96a64:	e0bffa05 	stb	r2,-24(fp)
   96a68:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   96a6c:	d0a72843 	ldbu	r2,-25439(gp)
   96a70:	10803fcc 	andi	r2,r2,255
   96a74:	10001526 	beq	r2,zero,96acc <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   96a78:	e0fff98b 	ldhu	r3,-26(fp)
   96a7c:	e13ffa03 	ldbu	r4,-24(fp)
   96a80:	e17ffa8b 	ldhu	r5,-22(fp)
   96a84:	e0bffb44 	addi	r2,fp,-19
   96a88:	d8800015 	stw	r2,0(sp)
   96a8c:	280f883a 	mov	r7,r5
   96a90:	200d883a 	mov	r6,r4
   96a94:	180b883a 	mov	r5,r3
   96a98:	e13ff217 	ldw	r4,-56(fp)
   96a9c:	00913040 	call	91304 <OSFlagPend>
   96aa0:	00000a06 	br	96acc <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   96aa4:	0001883a 	nop
   96aa8:	e0bffc17 	ldw	r2,-16(fp)
   96aac:	10c00d17 	ldw	r3,52(r2)
   96ab0:	e0bff317 	ldw	r2,-52(fp)
   96ab4:	1880051e 	bne	r3,r2,96acc <altera_avalon_jtag_uart_read+0x1c8>
   96ab8:	e0bffc17 	ldw	r2,-16(fp)
   96abc:	10c00917 	ldw	r3,36(r2)
   96ac0:	e0bffc17 	ldw	r2,-16(fp)
   96ac4:	10800117 	ldw	r2,4(r2)
   96ac8:	18bff736 	bltu	r3,r2,96aa8 <__alt_data_end+0xfffd82a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   96acc:	e0bffc17 	ldw	r2,-16(fp)
   96ad0:	10c00d17 	ldw	r3,52(r2)
   96ad4:	e0bff317 	ldw	r2,-52(fp)
   96ad8:	18800726 	beq	r3,r2,96af8 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   96adc:	e0bffe17 	ldw	r2,-8(fp)
   96ae0:	00bf9d16 	blt	zero,r2,96958 <__alt_data_end+0xfffd8158>
   96ae4:	00000506 	br	96afc <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   96ae8:	0001883a 	nop
   96aec:	00000306 	br	96afc <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   96af0:	0001883a 	nop
   96af4:	00000106 	br	96afc <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   96af8:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   96afc:	e0bffc17 	ldw	r2,-16(fp)
   96b00:	10800a17 	ldw	r2,40(r2)
   96b04:	1009883a 	mov	r4,r2
   96b08:	00940f00 	call	940f0 <OSSemPost>

  if (ptr != buffer)
   96b0c:	e0fff017 	ldw	r3,-64(fp)
   96b10:	e0bffd17 	ldw	r2,-12(fp)
   96b14:	18801826 	beq	r3,r2,96b78 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96b18:	0005303a 	rdctl	r2,status
   96b1c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96b20:	e0fff717 	ldw	r3,-36(fp)
   96b24:	00bfff84 	movi	r2,-2
   96b28:	1884703a 	and	r2,r3,r2
   96b2c:	1001703a 	wrctl	status,r2
  
  return context;
   96b30:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   96b34:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   96b38:	e0bffc17 	ldw	r2,-16(fp)
   96b3c:	10800817 	ldw	r2,32(r2)
   96b40:	10c00054 	ori	r3,r2,1
   96b44:	e0bffc17 	ldw	r2,-16(fp)
   96b48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   96b4c:	e0bffc17 	ldw	r2,-16(fp)
   96b50:	10800017 	ldw	r2,0(r2)
   96b54:	10800104 	addi	r2,r2,4
   96b58:	1007883a 	mov	r3,r2
   96b5c:	e0bffc17 	ldw	r2,-16(fp)
   96b60:	10800817 	ldw	r2,32(r2)
   96b64:	18800035 	stwio	r2,0(r3)
   96b68:	e0bff617 	ldw	r2,-40(fp)
   96b6c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96b70:	e0bff517 	ldw	r2,-44(fp)
   96b74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   96b78:	e0fff017 	ldw	r3,-64(fp)
   96b7c:	e0bffd17 	ldw	r2,-12(fp)
   96b80:	18800426 	beq	r3,r2,96b94 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   96b84:	e0fff017 	ldw	r3,-64(fp)
   96b88:	e0bffd17 	ldw	r2,-12(fp)
   96b8c:	1885c83a 	sub	r2,r3,r2
   96b90:	00000606 	br	96bac <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   96b94:	e0bfff17 	ldw	r2,-4(fp)
   96b98:	1090000c 	andi	r2,r2,16384
   96b9c:	10000226 	beq	r2,zero,96ba8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   96ba0:	00bffd44 	movi	r2,-11
   96ba4:	00000106 	br	96bac <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   96ba8:	00bffec4 	movi	r2,-5
}
   96bac:	e037883a 	mov	sp,fp
   96bb0:	dfc00117 	ldw	ra,4(sp)
   96bb4:	df000017 	ldw	fp,0(sp)
   96bb8:	dec00204 	addi	sp,sp,8
   96bbc:	f800283a 	ret

00096bc0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   96bc0:	deffed04 	addi	sp,sp,-76
   96bc4:	dfc01215 	stw	ra,72(sp)
   96bc8:	df001115 	stw	fp,68(sp)
   96bcc:	df001104 	addi	fp,sp,68
   96bd0:	e13ffc15 	stw	r4,-16(fp)
   96bd4:	e17ffd15 	stw	r5,-12(fp)
   96bd8:	e1bffe15 	stw	r6,-8(fp)
   96bdc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   96be0:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   96be4:	e0bffd17 	ldw	r2,-12(fp)
   96be8:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   96bec:	e0bffc17 	ldw	r2,-16(fp)
   96bf0:	10800b17 	ldw	r2,44(r2)
   96bf4:	e0bff815 	stw	r2,-32(fp)
   96bf8:	e03ff90d 	sth	zero,-28(fp)
   96bfc:	e0bff90b 	ldhu	r2,-28(fp)
   96c00:	e0fffb44 	addi	r3,fp,-19
   96c04:	180d883a 	mov	r6,r3
   96c08:	100b883a 	mov	r5,r2
   96c0c:	e13ff817 	ldw	r4,-32(fp)
   96c10:	0093d780 	call	93d78 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   96c14:	00003706 	br	96cf4 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   96c18:	e0bffc17 	ldw	r2,-16(fp)
   96c1c:	10800f17 	ldw	r2,60(r2)
   96c20:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   96c24:	e0bffc17 	ldw	r2,-16(fp)
   96c28:	10801017 	ldw	r2,64(r2)
   96c2c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   96c30:	e0fff417 	ldw	r3,-48(fp)
   96c34:	e0bff017 	ldw	r2,-64(fp)
   96c38:	1880062e 	bgeu	r3,r2,96c54 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   96c3c:	e0fff017 	ldw	r3,-64(fp)
   96c40:	e0bff417 	ldw	r2,-48(fp)
   96c44:	1885c83a 	sub	r2,r3,r2
   96c48:	10bfffc4 	addi	r2,r2,-1
   96c4c:	e0bff115 	stw	r2,-60(fp)
   96c50:	00000b06 	br	96c80 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   96c54:	e0bff017 	ldw	r2,-64(fp)
   96c58:	10000526 	beq	r2,zero,96c70 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   96c5c:	00c20004 	movi	r3,2048
   96c60:	e0bff417 	ldw	r2,-48(fp)
   96c64:	1885c83a 	sub	r2,r3,r2
   96c68:	e0bff115 	stw	r2,-60(fp)
   96c6c:	00000406 	br	96c80 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   96c70:	00c1ffc4 	movi	r3,2047
   96c74:	e0bff417 	ldw	r2,-48(fp)
   96c78:	1885c83a 	sub	r2,r3,r2
   96c7c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   96c80:	e0bff117 	ldw	r2,-60(fp)
   96c84:	10001e26 	beq	r2,zero,96d00 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   96c88:	e0fffe17 	ldw	r3,-8(fp)
   96c8c:	e0bff117 	ldw	r2,-60(fp)
   96c90:	1880022e 	bgeu	r3,r2,96c9c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   96c94:	e0bffe17 	ldw	r2,-8(fp)
   96c98:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   96c9c:	e0bffc17 	ldw	r2,-16(fp)
   96ca0:	10c21104 	addi	r3,r2,2116
   96ca4:	e0bff417 	ldw	r2,-48(fp)
   96ca8:	1885883a 	add	r2,r3,r2
   96cac:	e1bff117 	ldw	r6,-60(fp)
   96cb0:	e17ffd17 	ldw	r5,-12(fp)
   96cb4:	1009883a 	mov	r4,r2
   96cb8:	008633c0 	call	8633c <memcpy>
      ptr   += n;
   96cbc:	e0fffd17 	ldw	r3,-12(fp)
   96cc0:	e0bff117 	ldw	r2,-60(fp)
   96cc4:	1885883a 	add	r2,r3,r2
   96cc8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   96ccc:	e0fffe17 	ldw	r3,-8(fp)
   96cd0:	e0bff117 	ldw	r2,-60(fp)
   96cd4:	1885c83a 	sub	r2,r3,r2
   96cd8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   96cdc:	e0fff417 	ldw	r3,-48(fp)
   96ce0:	e0bff117 	ldw	r2,-60(fp)
   96ce4:	1885883a 	add	r2,r3,r2
   96ce8:	10c1ffcc 	andi	r3,r2,2047
   96cec:	e0bffc17 	ldw	r2,-16(fp)
   96cf0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   96cf4:	e0bffe17 	ldw	r2,-8(fp)
   96cf8:	00bfc716 	blt	zero,r2,96c18 <__alt_data_end+0xfffd8418>
   96cfc:	00000106 	br	96d04 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   96d00:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96d04:	0005303a 	rdctl	r2,status
   96d08:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96d0c:	e0fff717 	ldw	r3,-36(fp)
   96d10:	00bfff84 	movi	r2,-2
   96d14:	1884703a 	and	r2,r3,r2
   96d18:	1001703a 	wrctl	status,r2
  
  return context;
   96d1c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   96d20:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   96d24:	e0bffc17 	ldw	r2,-16(fp)
   96d28:	10800817 	ldw	r2,32(r2)
   96d2c:	10c00094 	ori	r3,r2,2
   96d30:	e0bffc17 	ldw	r2,-16(fp)
   96d34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   96d38:	e0bffc17 	ldw	r2,-16(fp)
   96d3c:	10800017 	ldw	r2,0(r2)
   96d40:	10800104 	addi	r2,r2,4
   96d44:	1007883a 	mov	r3,r2
   96d48:	e0bffc17 	ldw	r2,-16(fp)
   96d4c:	10800817 	ldw	r2,32(r2)
   96d50:	18800035 	stwio	r2,0(r3)
   96d54:	e0bff617 	ldw	r2,-40(fp)
   96d58:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96d5c:	e0bff317 	ldw	r2,-52(fp)
   96d60:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   96d64:	e0bffe17 	ldw	r2,-8(fp)
   96d68:	00802a0e 	bge	zero,r2,96e14 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   96d6c:	e0bfff17 	ldw	r2,-4(fp)
   96d70:	1090000c 	andi	r2,r2,16384
   96d74:	10002a1e 	bne	r2,zero,96e20 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   96d78:	d0a72843 	ldbu	r2,-25439(gp)
   96d7c:	10803fcc 	andi	r2,r2,255
   96d80:	10800058 	cmpnei	r2,r2,1
   96d84:	1000161e 	bne	r2,zero,96de0 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   96d88:	e0bffc17 	ldw	r2,-16(fp)
   96d8c:	10800c17 	ldw	r2,48(r2)
   96d90:	e0bff515 	stw	r2,-44(fp)
   96d94:	00800184 	movi	r2,6
   96d98:	e0bff98d 	sth	r2,-26(fp)
   96d9c:	00bfe0c4 	movi	r2,-125
   96da0:	e0bffa05 	stb	r2,-24(fp)
   96da4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   96da8:	d0a72843 	ldbu	r2,-25439(gp)
   96dac:	10803fcc 	andi	r2,r2,255
   96db0:	10001526 	beq	r2,zero,96e08 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   96db4:	e0fff98b 	ldhu	r3,-26(fp)
   96db8:	e13ffa03 	ldbu	r4,-24(fp)
   96dbc:	e17ffa8b 	ldhu	r5,-22(fp)
   96dc0:	e0bffb04 	addi	r2,fp,-20
   96dc4:	d8800015 	stw	r2,0(sp)
   96dc8:	280f883a 	mov	r7,r5
   96dcc:	200d883a 	mov	r6,r4
   96dd0:	180b883a 	mov	r5,r3
   96dd4:	e13ff517 	ldw	r4,-44(fp)
   96dd8:	00913040 	call	91304 <OSFlagPend>
   96ddc:	00000a06 	br	96e08 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   96de0:	0001883a 	nop
   96de4:	e0bffc17 	ldw	r2,-16(fp)
   96de8:	10c01017 	ldw	r3,64(r2)
   96dec:	e0bff017 	ldw	r2,-64(fp)
   96df0:	1880051e 	bne	r3,r2,96e08 <altera_avalon_jtag_uart_write+0x248>
   96df4:	e0bffc17 	ldw	r2,-16(fp)
   96df8:	10c00917 	ldw	r3,36(r2)
   96dfc:	e0bffc17 	ldw	r2,-16(fp)
   96e00:	10800117 	ldw	r2,4(r2)
   96e04:	18bff736 	bltu	r3,r2,96de4 <__alt_data_end+0xfffd85e4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   96e08:	e0bffc17 	ldw	r2,-16(fp)
   96e0c:	10800917 	ldw	r2,36(r2)
   96e10:	1000051e 	bne	r2,zero,96e28 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   96e14:	e0bffe17 	ldw	r2,-8(fp)
   96e18:	00bfb616 	blt	zero,r2,96cf4 <__alt_data_end+0xfffd84f4>
   96e1c:	00000306 	br	96e2c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   96e20:	0001883a 	nop
   96e24:	00000106 	br	96e2c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   96e28:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   96e2c:	e0bffc17 	ldw	r2,-16(fp)
   96e30:	10800b17 	ldw	r2,44(r2)
   96e34:	1009883a 	mov	r4,r2
   96e38:	00940f00 	call	940f0 <OSSemPost>

  if (ptr != start)
   96e3c:	e0fffd17 	ldw	r3,-12(fp)
   96e40:	e0bff217 	ldw	r2,-56(fp)
   96e44:	18800426 	beq	r3,r2,96e58 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   96e48:	e0fffd17 	ldw	r3,-12(fp)
   96e4c:	e0bff217 	ldw	r2,-56(fp)
   96e50:	1885c83a 	sub	r2,r3,r2
   96e54:	00000606 	br	96e70 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   96e58:	e0bfff17 	ldw	r2,-4(fp)
   96e5c:	1090000c 	andi	r2,r2,16384
   96e60:	10000226 	beq	r2,zero,96e6c <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   96e64:	00bffd44 	movi	r2,-11
   96e68:	00000106 	br	96e70 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   96e6c:	00bffec4 	movi	r2,-5
}
   96e70:	e037883a 	mov	sp,fp
   96e74:	dfc00117 	ldw	ra,4(sp)
   96e78:	df000017 	ldw	fp,0(sp)
   96e7c:	dec00204 	addi	sp,sp,8
   96e80:	f800283a 	ret

00096e84 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   96e84:	defffa04 	addi	sp,sp,-24
   96e88:	dfc00515 	stw	ra,20(sp)
   96e8c:	df000415 	stw	fp,16(sp)
   96e90:	df000404 	addi	fp,sp,16
   96e94:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   96e98:	0007883a 	mov	r3,zero
   96e9c:	e0bfff17 	ldw	r2,-4(fp)
   96ea0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   96ea4:	e0bfff17 	ldw	r2,-4(fp)
   96ea8:	10800104 	addi	r2,r2,4
   96eac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96eb0:	0005303a 	rdctl	r2,status
   96eb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96eb8:	e0fffd17 	ldw	r3,-12(fp)
   96ebc:	00bfff84 	movi	r2,-2
   96ec0:	1884703a 	and	r2,r3,r2
   96ec4:	1001703a 	wrctl	status,r2
  
  return context;
   96ec8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   96ecc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   96ed0:	00977040 	call	97704 <alt_tick>
   96ed4:	e0bffc17 	ldw	r2,-16(fp)
   96ed8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96edc:	e0bffe17 	ldw	r2,-8(fp)
   96ee0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   96ee4:	0001883a 	nop
   96ee8:	e037883a 	mov	sp,fp
   96eec:	dfc00117 	ldw	ra,4(sp)
   96ef0:	df000017 	ldw	fp,0(sp)
   96ef4:	dec00204 	addi	sp,sp,8
   96ef8:	f800283a 	ret

00096efc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   96efc:	defff804 	addi	sp,sp,-32
   96f00:	dfc00715 	stw	ra,28(sp)
   96f04:	df000615 	stw	fp,24(sp)
   96f08:	df000604 	addi	fp,sp,24
   96f0c:	e13ffc15 	stw	r4,-16(fp)
   96f10:	e17ffd15 	stw	r5,-12(fp)
   96f14:	e1bffe15 	stw	r6,-8(fp)
   96f18:	e1ffff15 	stw	r7,-4(fp)
   96f1c:	e0bfff17 	ldw	r2,-4(fp)
   96f20:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   96f24:	d0a73c17 	ldw	r2,-25360(gp)
   96f28:	1000021e 	bne	r2,zero,96f34 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   96f2c:	e0bffb17 	ldw	r2,-20(fp)
   96f30:	d0a73c15 	stw	r2,-25360(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   96f34:	e0bffc17 	ldw	r2,-16(fp)
   96f38:	10800104 	addi	r2,r2,4
   96f3c:	00c001c4 	movi	r3,7
   96f40:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   96f44:	d8000015 	stw	zero,0(sp)
   96f48:	e1fffc17 	ldw	r7,-16(fp)
   96f4c:	01800274 	movhi	r6,9
   96f50:	319ba104 	addi	r6,r6,28292
   96f54:	e17ffe17 	ldw	r5,-8(fp)
   96f58:	e13ffd17 	ldw	r4,-12(fp)
   96f5c:	008db8c0 	call	8db8c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   96f60:	0001883a 	nop
   96f64:	e037883a 	mov	sp,fp
   96f68:	dfc00117 	ldw	ra,4(sp)
   96f6c:	df000017 	ldw	fp,0(sp)
   96f70:	dec00204 	addi	sp,sp,8
   96f74:	f800283a 	ret

00096f78 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   96f78:	defff504 	addi	sp,sp,-44
   96f7c:	df000a15 	stw	fp,40(sp)
   96f80:	df000a04 	addi	fp,sp,40
   96f84:	e13ffc15 	stw	r4,-16(fp)
   96f88:	e17ffd15 	stw	r5,-12(fp)
   96f8c:	e1bffe15 	stw	r6,-8(fp)
   96f90:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   96f94:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   96f98:	d0a73c17 	ldw	r2,-25360(gp)
  
  if (alt_ticks_per_second ())
   96f9c:	10003c26 	beq	r2,zero,97090 <alt_alarm_start+0x118>
  {
    if (alarm)
   96fa0:	e0bffc17 	ldw	r2,-16(fp)
   96fa4:	10003826 	beq	r2,zero,97088 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   96fa8:	e0bffc17 	ldw	r2,-16(fp)
   96fac:	e0fffe17 	ldw	r3,-8(fp)
   96fb0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   96fb4:	e0bffc17 	ldw	r2,-16(fp)
   96fb8:	e0ffff17 	ldw	r3,-4(fp)
   96fbc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96fc0:	0005303a 	rdctl	r2,status
   96fc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96fc8:	e0fff917 	ldw	r3,-28(fp)
   96fcc:	00bfff84 	movi	r2,-2
   96fd0:	1884703a 	and	r2,r3,r2
   96fd4:	1001703a 	wrctl	status,r2
  
  return context;
   96fd8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   96fdc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   96fe0:	d0a73d17 	ldw	r2,-25356(gp)
      
      current_nticks = alt_nticks();
   96fe4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   96fe8:	e0fffd17 	ldw	r3,-12(fp)
   96fec:	e0bff617 	ldw	r2,-40(fp)
   96ff0:	1885883a 	add	r2,r3,r2
   96ff4:	10c00044 	addi	r3,r2,1
   96ff8:	e0bffc17 	ldw	r2,-16(fp)
   96ffc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   97000:	e0bffc17 	ldw	r2,-16(fp)
   97004:	10c00217 	ldw	r3,8(r2)
   97008:	e0bff617 	ldw	r2,-40(fp)
   9700c:	1880042e 	bgeu	r3,r2,97020 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   97010:	e0bffc17 	ldw	r2,-16(fp)
   97014:	00c00044 	movi	r3,1
   97018:	10c00405 	stb	r3,16(r2)
   9701c:	00000206 	br	97028 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   97020:	e0bffc17 	ldw	r2,-16(fp)
   97024:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   97028:	e0bffc17 	ldw	r2,-16(fp)
   9702c:	d0e02e04 	addi	r3,gp,-32584
   97030:	e0fffa15 	stw	r3,-24(fp)
   97034:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   97038:	e0bffb17 	ldw	r2,-20(fp)
   9703c:	e0fffa17 	ldw	r3,-24(fp)
   97040:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   97044:	e0bffa17 	ldw	r2,-24(fp)
   97048:	10c00017 	ldw	r3,0(r2)
   9704c:	e0bffb17 	ldw	r2,-20(fp)
   97050:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   97054:	e0bffa17 	ldw	r2,-24(fp)
   97058:	10800017 	ldw	r2,0(r2)
   9705c:	e0fffb17 	ldw	r3,-20(fp)
   97060:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   97064:	e0bffa17 	ldw	r2,-24(fp)
   97068:	e0fffb17 	ldw	r3,-20(fp)
   9706c:	10c00015 	stw	r3,0(r2)
   97070:	e0bff817 	ldw	r2,-32(fp)
   97074:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97078:	e0bff717 	ldw	r2,-36(fp)
   9707c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   97080:	0005883a 	mov	r2,zero
   97084:	00000306 	br	97094 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   97088:	00bffa84 	movi	r2,-22
   9708c:	00000106 	br	97094 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   97090:	00bfde84 	movi	r2,-134
  }
}
   97094:	e037883a 	mov	sp,fp
   97098:	df000017 	ldw	fp,0(sp)
   9709c:	dec00104 	addi	sp,sp,4
   970a0:	f800283a 	ret

000970a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   970a4:	deffff04 	addi	sp,sp,-4
   970a8:	df000015 	stw	fp,0(sp)
   970ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   970b0:	0001883a 	nop
   970b4:	e037883a 	mov	sp,fp
   970b8:	df000017 	ldw	fp,0(sp)
   970bc:	dec00104 	addi	sp,sp,4
   970c0:	f800283a 	ret

000970c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   970c4:	defffe04 	addi	sp,sp,-8
   970c8:	dfc00115 	stw	ra,4(sp)
   970cc:	df000015 	stw	fp,0(sp)
   970d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   970d4:	d0a00c17 	ldw	r2,-32720(gp)
   970d8:	10000326 	beq	r2,zero,970e8 <alt_get_errno+0x24>
   970dc:	d0a00c17 	ldw	r2,-32720(gp)
   970e0:	103ee83a 	callr	r2
   970e4:	00000106 	br	970ec <alt_get_errno+0x28>
   970e8:	d0a71e04 	addi	r2,gp,-25480
}
   970ec:	e037883a 	mov	sp,fp
   970f0:	dfc00117 	ldw	ra,4(sp)
   970f4:	df000017 	ldw	fp,0(sp)
   970f8:	dec00204 	addi	sp,sp,8
   970fc:	f800283a 	ret

00097100 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   97100:	defffa04 	addi	sp,sp,-24
   97104:	dfc00515 	stw	ra,20(sp)
   97108:	df000415 	stw	fp,16(sp)
   9710c:	df000404 	addi	fp,sp,16
   97110:	e13ffe15 	stw	r4,-8(fp)
   97114:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   97118:	e0bffe17 	ldw	r2,-8(fp)
   9711c:	10000326 	beq	r2,zero,9712c <alt_dev_llist_insert+0x2c>
   97120:	e0bffe17 	ldw	r2,-8(fp)
   97124:	10800217 	ldw	r2,8(r2)
   97128:	1000061e 	bne	r2,zero,97144 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   9712c:	00970c40 	call	970c4 <alt_get_errno>
   97130:	1007883a 	mov	r3,r2
   97134:	00800584 	movi	r2,22
   97138:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   9713c:	00bffa84 	movi	r2,-22
   97140:	00001306 	br	97190 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   97144:	e0bffe17 	ldw	r2,-8(fp)
   97148:	e0ffff17 	ldw	r3,-4(fp)
   9714c:	e0fffc15 	stw	r3,-16(fp)
   97150:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   97154:	e0bffd17 	ldw	r2,-12(fp)
   97158:	e0fffc17 	ldw	r3,-16(fp)
   9715c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   97160:	e0bffc17 	ldw	r2,-16(fp)
   97164:	10c00017 	ldw	r3,0(r2)
   97168:	e0bffd17 	ldw	r2,-12(fp)
   9716c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   97170:	e0bffc17 	ldw	r2,-16(fp)
   97174:	10800017 	ldw	r2,0(r2)
   97178:	e0fffd17 	ldw	r3,-12(fp)
   9717c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   97180:	e0bffc17 	ldw	r2,-16(fp)
   97184:	e0fffd17 	ldw	r3,-12(fp)
   97188:	10c00015 	stw	r3,0(r2)

  return 0;  
   9718c:	0005883a 	mov	r2,zero
}
   97190:	e037883a 	mov	sp,fp
   97194:	dfc00117 	ldw	ra,4(sp)
   97198:	df000017 	ldw	fp,0(sp)
   9719c:	dec00204 	addi	sp,sp,8
   971a0:	f800283a 	ret

000971a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   971a4:	defffd04 	addi	sp,sp,-12
   971a8:	dfc00215 	stw	ra,8(sp)
   971ac:	df000115 	stw	fp,4(sp)
   971b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   971b4:	008002b4 	movhi	r2,10
   971b8:	10a06904 	addi	r2,r2,-32348
   971bc:	e0bfff15 	stw	r2,-4(fp)
   971c0:	00000606 	br	971dc <_do_ctors+0x38>
        (*ctor) (); 
   971c4:	e0bfff17 	ldw	r2,-4(fp)
   971c8:	10800017 	ldw	r2,0(r2)
   971cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   971d0:	e0bfff17 	ldw	r2,-4(fp)
   971d4:	10bfff04 	addi	r2,r2,-4
   971d8:	e0bfff15 	stw	r2,-4(fp)
   971dc:	e0ffff17 	ldw	r3,-4(fp)
   971e0:	008002b4 	movhi	r2,10
   971e4:	10a06a04 	addi	r2,r2,-32344
   971e8:	18bff62e 	bgeu	r3,r2,971c4 <__alt_data_end+0xfffd89c4>
        (*ctor) (); 
}
   971ec:	0001883a 	nop
   971f0:	e037883a 	mov	sp,fp
   971f4:	dfc00117 	ldw	ra,4(sp)
   971f8:	df000017 	ldw	fp,0(sp)
   971fc:	dec00204 	addi	sp,sp,8
   97200:	f800283a 	ret

00097204 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   97204:	defffd04 	addi	sp,sp,-12
   97208:	dfc00215 	stw	ra,8(sp)
   9720c:	df000115 	stw	fp,4(sp)
   97210:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   97214:	008002b4 	movhi	r2,10
   97218:	10a06904 	addi	r2,r2,-32348
   9721c:	e0bfff15 	stw	r2,-4(fp)
   97220:	00000606 	br	9723c <_do_dtors+0x38>
        (*dtor) (); 
   97224:	e0bfff17 	ldw	r2,-4(fp)
   97228:	10800017 	ldw	r2,0(r2)
   9722c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   97230:	e0bfff17 	ldw	r2,-4(fp)
   97234:	10bfff04 	addi	r2,r2,-4
   97238:	e0bfff15 	stw	r2,-4(fp)
   9723c:	e0ffff17 	ldw	r3,-4(fp)
   97240:	008002b4 	movhi	r2,10
   97244:	10a06a04 	addi	r2,r2,-32344
   97248:	18bff62e 	bgeu	r3,r2,97224 <__alt_data_end+0xfffd8a24>
        (*dtor) (); 
}
   9724c:	0001883a 	nop
   97250:	e037883a 	mov	sp,fp
   97254:	dfc00117 	ldw	ra,4(sp)
   97258:	df000017 	ldw	fp,0(sp)
   9725c:	dec00204 	addi	sp,sp,8
   97260:	f800283a 	ret

00097264 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   97264:	deffff04 	addi	sp,sp,-4
   97268:	df000015 	stw	fp,0(sp)
   9726c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   97270:	0001883a 	nop
   97274:	e037883a 	mov	sp,fp
   97278:	df000017 	ldw	fp,0(sp)
   9727c:	dec00104 	addi	sp,sp,4
   97280:	f800283a 	ret

00097284 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   97284:	defff804 	addi	sp,sp,-32
   97288:	dfc00715 	stw	ra,28(sp)
   9728c:	df000615 	stw	fp,24(sp)
   97290:	dc000515 	stw	r16,20(sp)
   97294:	df000604 	addi	fp,sp,24
   97298:	e13ffb15 	stw	r4,-20(fp)
   9729c:	e17ffc15 	stw	r5,-16(fp)
   972a0:	e1bffd15 	stw	r6,-12(fp)
   972a4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   972a8:	e1bffe17 	ldw	r6,-8(fp)
   972ac:	e17ffd17 	ldw	r5,-12(fp)
   972b0:	e13ffc17 	ldw	r4,-16(fp)
   972b4:	009750c0 	call	9750c <open>
   972b8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   972bc:	e0bffa17 	ldw	r2,-24(fp)
   972c0:	10002216 	blt	r2,zero,9734c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   972c4:	040002b4 	movhi	r16,10
   972c8:	8423c004 	addi	r16,r16,-28928
   972cc:	e0bffa17 	ldw	r2,-24(fp)
   972d0:	01400304 	movi	r5,12
   972d4:	1009883a 	mov	r4,r2
   972d8:	008b08c0 	call	8b08c <__mulsi3>
   972dc:	8085883a 	add	r2,r16,r2
   972e0:	10c00017 	ldw	r3,0(r2)
   972e4:	e0bffb17 	ldw	r2,-20(fp)
   972e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   972ec:	040002b4 	movhi	r16,10
   972f0:	8423c004 	addi	r16,r16,-28928
   972f4:	e0bffa17 	ldw	r2,-24(fp)
   972f8:	01400304 	movi	r5,12
   972fc:	1009883a 	mov	r4,r2
   97300:	008b08c0 	call	8b08c <__mulsi3>
   97304:	8085883a 	add	r2,r16,r2
   97308:	10800104 	addi	r2,r2,4
   9730c:	10c00017 	ldw	r3,0(r2)
   97310:	e0bffb17 	ldw	r2,-20(fp)
   97314:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   97318:	040002b4 	movhi	r16,10
   9731c:	8423c004 	addi	r16,r16,-28928
   97320:	e0bffa17 	ldw	r2,-24(fp)
   97324:	01400304 	movi	r5,12
   97328:	1009883a 	mov	r4,r2
   9732c:	008b08c0 	call	8b08c <__mulsi3>
   97330:	8085883a 	add	r2,r16,r2
   97334:	10800204 	addi	r2,r2,8
   97338:	10c00017 	ldw	r3,0(r2)
   9733c:	e0bffb17 	ldw	r2,-20(fp)
   97340:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   97344:	e13ffa17 	ldw	r4,-24(fp)
   97348:	008e3140 	call	8e314 <alt_release_fd>
  }
} 
   9734c:	0001883a 	nop
   97350:	e6ffff04 	addi	sp,fp,-4
   97354:	dfc00217 	ldw	ra,8(sp)
   97358:	df000117 	ldw	fp,4(sp)
   9735c:	dc000017 	ldw	r16,0(sp)
   97360:	dec00304 	addi	sp,sp,12
   97364:	f800283a 	ret

00097368 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   97368:	defffb04 	addi	sp,sp,-20
   9736c:	dfc00415 	stw	ra,16(sp)
   97370:	df000315 	stw	fp,12(sp)
   97374:	df000304 	addi	fp,sp,12
   97378:	e13ffd15 	stw	r4,-12(fp)
   9737c:	e17ffe15 	stw	r5,-8(fp)
   97380:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   97384:	01c07fc4 	movi	r7,511
   97388:	01800044 	movi	r6,1
   9738c:	e17ffd17 	ldw	r5,-12(fp)
   97390:	010002b4 	movhi	r4,10
   97394:	2123c304 	addi	r4,r4,-28916
   97398:	00972840 	call	97284 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   9739c:	01c07fc4 	movi	r7,511
   973a0:	000d883a 	mov	r6,zero
   973a4:	e17ffe17 	ldw	r5,-8(fp)
   973a8:	010002b4 	movhi	r4,10
   973ac:	2123c004 	addi	r4,r4,-28928
   973b0:	00972840 	call	97284 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   973b4:	01c07fc4 	movi	r7,511
   973b8:	01800044 	movi	r6,1
   973bc:	e17fff17 	ldw	r5,-4(fp)
   973c0:	010002b4 	movhi	r4,10
   973c4:	2123c604 	addi	r4,r4,-28904
   973c8:	00972840 	call	97284 <alt_open_fd>
}  
   973cc:	0001883a 	nop
   973d0:	e037883a 	mov	sp,fp
   973d4:	dfc00117 	ldw	ra,4(sp)
   973d8:	df000017 	ldw	fp,0(sp)
   973dc:	dec00204 	addi	sp,sp,8
   973e0:	f800283a 	ret

000973e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   973e4:	defffe04 	addi	sp,sp,-8
   973e8:	dfc00115 	stw	ra,4(sp)
   973ec:	df000015 	stw	fp,0(sp)
   973f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   973f4:	d0a00c17 	ldw	r2,-32720(gp)
   973f8:	10000326 	beq	r2,zero,97408 <alt_get_errno+0x24>
   973fc:	d0a00c17 	ldw	r2,-32720(gp)
   97400:	103ee83a 	callr	r2
   97404:	00000106 	br	9740c <alt_get_errno+0x28>
   97408:	d0a71e04 	addi	r2,gp,-25480
}
   9740c:	e037883a 	mov	sp,fp
   97410:	dfc00117 	ldw	ra,4(sp)
   97414:	df000017 	ldw	fp,0(sp)
   97418:	dec00204 	addi	sp,sp,8
   9741c:	f800283a 	ret

00097420 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   97420:	defffb04 	addi	sp,sp,-20
   97424:	dfc00415 	stw	ra,16(sp)
   97428:	df000315 	stw	fp,12(sp)
   9742c:	dc000215 	stw	r16,8(sp)
   97430:	df000304 	addi	fp,sp,12
   97434:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   97438:	e0bffe17 	ldw	r2,-8(fp)
   9743c:	10800217 	ldw	r2,8(r2)
   97440:	10d00034 	orhi	r3,r2,16384
   97444:	e0bffe17 	ldw	r2,-8(fp)
   97448:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9744c:	e03ffd15 	stw	zero,-12(fp)
   97450:	00002306 	br	974e0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   97454:	040002b4 	movhi	r16,10
   97458:	8423c004 	addi	r16,r16,-28928
   9745c:	e0bffd17 	ldw	r2,-12(fp)
   97460:	01400304 	movi	r5,12
   97464:	1009883a 	mov	r4,r2
   97468:	008b08c0 	call	8b08c <__mulsi3>
   9746c:	8085883a 	add	r2,r16,r2
   97470:	10c00017 	ldw	r3,0(r2)
   97474:	e0bffe17 	ldw	r2,-8(fp)
   97478:	10800017 	ldw	r2,0(r2)
   9747c:	1880151e 	bne	r3,r2,974d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   97480:	040002b4 	movhi	r16,10
   97484:	8423c004 	addi	r16,r16,-28928
   97488:	e0bffd17 	ldw	r2,-12(fp)
   9748c:	01400304 	movi	r5,12
   97490:	1009883a 	mov	r4,r2
   97494:	008b08c0 	call	8b08c <__mulsi3>
   97498:	8085883a 	add	r2,r16,r2
   9749c:	10800204 	addi	r2,r2,8
   974a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   974a4:	10000b0e 	bge	r2,zero,974d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   974a8:	01400304 	movi	r5,12
   974ac:	e13ffd17 	ldw	r4,-12(fp)
   974b0:	008b08c0 	call	8b08c <__mulsi3>
   974b4:	1007883a 	mov	r3,r2
   974b8:	008002b4 	movhi	r2,10
   974bc:	10a3c004 	addi	r2,r2,-28928
   974c0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   974c4:	e0bffe17 	ldw	r2,-8(fp)
   974c8:	18800226 	beq	r3,r2,974d4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   974cc:	00bffcc4 	movi	r2,-13
   974d0:	00000806 	br	974f4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   974d4:	e0bffd17 	ldw	r2,-12(fp)
   974d8:	10800044 	addi	r2,r2,1
   974dc:	e0bffd15 	stw	r2,-12(fp)
   974e0:	d0a00b17 	ldw	r2,-32724(gp)
   974e4:	1007883a 	mov	r3,r2
   974e8:	e0bffd17 	ldw	r2,-12(fp)
   974ec:	18bfd92e 	bgeu	r3,r2,97454 <__alt_data_end+0xfffd8c54>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   974f0:	0005883a 	mov	r2,zero
}
   974f4:	e6ffff04 	addi	sp,fp,-4
   974f8:	dfc00217 	ldw	ra,8(sp)
   974fc:	df000117 	ldw	fp,4(sp)
   97500:	dc000017 	ldw	r16,0(sp)
   97504:	dec00304 	addi	sp,sp,12
   97508:	f800283a 	ret

0009750c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   9750c:	defff604 	addi	sp,sp,-40
   97510:	dfc00915 	stw	ra,36(sp)
   97514:	df000815 	stw	fp,32(sp)
   97518:	df000804 	addi	fp,sp,32
   9751c:	e13ffd15 	stw	r4,-12(fp)
   97520:	e17ffe15 	stw	r5,-8(fp)
   97524:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   97528:	00bfffc4 	movi	r2,-1
   9752c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   97530:	00bffb44 	movi	r2,-19
   97534:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   97538:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9753c:	d1600904 	addi	r5,gp,-32732
   97540:	e13ffd17 	ldw	r4,-12(fp)
   97544:	0097b880 	call	97b88 <alt_find_dev>
   97548:	e0bff815 	stw	r2,-32(fp)
   9754c:	e0bff817 	ldw	r2,-32(fp)
   97550:	1000051e 	bne	r2,zero,97568 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   97554:	e13ffd17 	ldw	r4,-12(fp)
   97558:	0097c180 	call	97c18 <alt_find_file>
   9755c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   97560:	00800044 	movi	r2,1
   97564:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   97568:	e0bff817 	ldw	r2,-32(fp)
   9756c:	10002b26 	beq	r2,zero,9761c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   97570:	e13ff817 	ldw	r4,-32(fp)
   97574:	0097d200 	call	97d20 <alt_get_fd>
   97578:	e0bff915 	stw	r2,-28(fp)
   9757c:	e0bff917 	ldw	r2,-28(fp)
   97580:	1000030e 	bge	r2,zero,97590 <open+0x84>
    {
      status = index;
   97584:	e0bff917 	ldw	r2,-28(fp)
   97588:	e0bffa15 	stw	r2,-24(fp)
   9758c:	00002506 	br	97624 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   97590:	01400304 	movi	r5,12
   97594:	e13ff917 	ldw	r4,-28(fp)
   97598:	008b08c0 	call	8b08c <__mulsi3>
   9759c:	1007883a 	mov	r3,r2
   975a0:	008002b4 	movhi	r2,10
   975a4:	10a3c004 	addi	r2,r2,-28928
   975a8:	1885883a 	add	r2,r3,r2
   975ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   975b0:	e0fffe17 	ldw	r3,-8(fp)
   975b4:	00900034 	movhi	r2,16384
   975b8:	10bfffc4 	addi	r2,r2,-1
   975bc:	1886703a 	and	r3,r3,r2
   975c0:	e0bffc17 	ldw	r2,-16(fp)
   975c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   975c8:	e0bffb17 	ldw	r2,-20(fp)
   975cc:	1000051e 	bne	r2,zero,975e4 <open+0xd8>
   975d0:	e13ffc17 	ldw	r4,-16(fp)
   975d4:	00974200 	call	97420 <alt_file_locked>
   975d8:	e0bffa15 	stw	r2,-24(fp)
   975dc:	e0bffa17 	ldw	r2,-24(fp)
   975e0:	10001016 	blt	r2,zero,97624 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   975e4:	e0bff817 	ldw	r2,-32(fp)
   975e8:	10800317 	ldw	r2,12(r2)
   975ec:	10000826 	beq	r2,zero,97610 <open+0x104>
   975f0:	e0bff817 	ldw	r2,-32(fp)
   975f4:	10800317 	ldw	r2,12(r2)
   975f8:	e1ffff17 	ldw	r7,-4(fp)
   975fc:	e1bffe17 	ldw	r6,-8(fp)
   97600:	e17ffd17 	ldw	r5,-12(fp)
   97604:	e13ffc17 	ldw	r4,-16(fp)
   97608:	103ee83a 	callr	r2
   9760c:	00000106 	br	97614 <open+0x108>
   97610:	0005883a 	mov	r2,zero
   97614:	e0bffa15 	stw	r2,-24(fp)
   97618:	00000206 	br	97624 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   9761c:	00bffb44 	movi	r2,-19
   97620:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   97624:	e0bffa17 	ldw	r2,-24(fp)
   97628:	1000090e 	bge	r2,zero,97650 <open+0x144>
  {
    alt_release_fd (index);  
   9762c:	e13ff917 	ldw	r4,-28(fp)
   97630:	008e3140 	call	8e314 <alt_release_fd>
    ALT_ERRNO = -status;
   97634:	00973e40 	call	973e4 <alt_get_errno>
   97638:	1007883a 	mov	r3,r2
   9763c:	e0bffa17 	ldw	r2,-24(fp)
   97640:	0085c83a 	sub	r2,zero,r2
   97644:	18800015 	stw	r2,0(r3)
    return -1;
   97648:	00bfffc4 	movi	r2,-1
   9764c:	00000106 	br	97654 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   97650:	e0bff917 	ldw	r2,-28(fp)
}
   97654:	e037883a 	mov	sp,fp
   97658:	dfc00117 	ldw	ra,4(sp)
   9765c:	df000017 	ldw	fp,0(sp)
   97660:	dec00204 	addi	sp,sp,8
   97664:	f800283a 	ret

00097668 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   97668:	defffa04 	addi	sp,sp,-24
   9766c:	df000515 	stw	fp,20(sp)
   97670:	df000504 	addi	fp,sp,20
   97674:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97678:	0005303a 	rdctl	r2,status
   9767c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97680:	e0fffc17 	ldw	r3,-16(fp)
   97684:	00bfff84 	movi	r2,-2
   97688:	1884703a 	and	r2,r3,r2
   9768c:	1001703a 	wrctl	status,r2
  
  return context;
   97690:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   97694:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   97698:	e0bfff17 	ldw	r2,-4(fp)
   9769c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   976a0:	e0bffd17 	ldw	r2,-12(fp)
   976a4:	10800017 	ldw	r2,0(r2)
   976a8:	e0fffd17 	ldw	r3,-12(fp)
   976ac:	18c00117 	ldw	r3,4(r3)
   976b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   976b4:	e0bffd17 	ldw	r2,-12(fp)
   976b8:	10800117 	ldw	r2,4(r2)
   976bc:	e0fffd17 	ldw	r3,-12(fp)
   976c0:	18c00017 	ldw	r3,0(r3)
   976c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   976c8:	e0bffd17 	ldw	r2,-12(fp)
   976cc:	e0fffd17 	ldw	r3,-12(fp)
   976d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   976d4:	e0bffd17 	ldw	r2,-12(fp)
   976d8:	e0fffd17 	ldw	r3,-12(fp)
   976dc:	10c00015 	stw	r3,0(r2)
   976e0:	e0bffb17 	ldw	r2,-20(fp)
   976e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   976e8:	e0bffe17 	ldw	r2,-8(fp)
   976ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   976f0:	0001883a 	nop
   976f4:	e037883a 	mov	sp,fp
   976f8:	df000017 	ldw	fp,0(sp)
   976fc:	dec00104 	addi	sp,sp,4
   97700:	f800283a 	ret

00097704 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   97704:	defffb04 	addi	sp,sp,-20
   97708:	dfc00415 	stw	ra,16(sp)
   9770c:	df000315 	stw	fp,12(sp)
   97710:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   97714:	d0a02e17 	ldw	r2,-32584(gp)
   97718:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   9771c:	d0a73d17 	ldw	r2,-25356(gp)
   97720:	10800044 	addi	r2,r2,1
   97724:	d0a73d15 	stw	r2,-25356(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   97728:	00002e06 	br	977e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   9772c:	e0bffd17 	ldw	r2,-12(fp)
   97730:	10800017 	ldw	r2,0(r2)
   97734:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   97738:	e0bffd17 	ldw	r2,-12(fp)
   9773c:	10800403 	ldbu	r2,16(r2)
   97740:	10803fcc 	andi	r2,r2,255
   97744:	10000426 	beq	r2,zero,97758 <alt_tick+0x54>
   97748:	d0a73d17 	ldw	r2,-25356(gp)
   9774c:	1000021e 	bne	r2,zero,97758 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   97750:	e0bffd17 	ldw	r2,-12(fp)
   97754:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   97758:	e0bffd17 	ldw	r2,-12(fp)
   9775c:	10800217 	ldw	r2,8(r2)
   97760:	d0e73d17 	ldw	r3,-25356(gp)
   97764:	18801d36 	bltu	r3,r2,977dc <alt_tick+0xd8>
   97768:	e0bffd17 	ldw	r2,-12(fp)
   9776c:	10800403 	ldbu	r2,16(r2)
   97770:	10803fcc 	andi	r2,r2,255
   97774:	1000191e 	bne	r2,zero,977dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   97778:	e0bffd17 	ldw	r2,-12(fp)
   9777c:	10800317 	ldw	r2,12(r2)
   97780:	e0fffd17 	ldw	r3,-12(fp)
   97784:	18c00517 	ldw	r3,20(r3)
   97788:	1809883a 	mov	r4,r3
   9778c:	103ee83a 	callr	r2
   97790:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   97794:	e0bfff17 	ldw	r2,-4(fp)
   97798:	1000031e 	bne	r2,zero,977a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   9779c:	e13ffd17 	ldw	r4,-12(fp)
   977a0:	00976680 	call	97668 <alt_alarm_stop>
   977a4:	00000d06 	br	977dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   977a8:	e0bffd17 	ldw	r2,-12(fp)
   977ac:	10c00217 	ldw	r3,8(r2)
   977b0:	e0bfff17 	ldw	r2,-4(fp)
   977b4:	1887883a 	add	r3,r3,r2
   977b8:	e0bffd17 	ldw	r2,-12(fp)
   977bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   977c0:	e0bffd17 	ldw	r2,-12(fp)
   977c4:	10c00217 	ldw	r3,8(r2)
   977c8:	d0a73d17 	ldw	r2,-25356(gp)
   977cc:	1880032e 	bgeu	r3,r2,977dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   977d0:	e0bffd17 	ldw	r2,-12(fp)
   977d4:	00c00044 	movi	r3,1
   977d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   977dc:	e0bffe17 	ldw	r2,-8(fp)
   977e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   977e4:	e0fffd17 	ldw	r3,-12(fp)
   977e8:	d0a02e04 	addi	r2,gp,-32584
   977ec:	18bfcf1e 	bne	r3,r2,9772c <__alt_data_end+0xfffd8f2c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   977f0:	008f5280 	call	8f528 <OSTimeTick>
}
   977f4:	0001883a 	nop
   977f8:	e037883a 	mov	sp,fp
   977fc:	dfc00117 	ldw	ra,4(sp)
   97800:	df000017 	ldw	fp,0(sp)
   97804:	dec00204 	addi	sp,sp,8
   97808:	f800283a 	ret

0009780c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   9780c:	deffff04 	addi	sp,sp,-4
   97810:	df000015 	stw	fp,0(sp)
   97814:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   97818:	000170fa 	wrctl	ienable,zero
}
   9781c:	0001883a 	nop
   97820:	e037883a 	mov	sp,fp
   97824:	df000017 	ldw	fp,0(sp)
   97828:	dec00104 	addi	sp,sp,4
   9782c:	f800283a 	ret

00097830 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   97830:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   97834:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   97838:	d1273717 	ldw	r4,-25380(gp)

      stw ra,  0(sp)
   9783c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   97840:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   97844:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   97848:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   9784c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   97850:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   97854:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   97858:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   9785c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   97860:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   97864:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   97868:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   9786c:	0097aa40 	call	97aa4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   97870:	d1273217 	ldw	r4,-25400(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   97874:	d1672a07 	ldb	r5,-25432(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   97878:	d1273715 	stw	r4,-25380(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   9787c:	d1672a45 	stb	r5,-25431(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   97880:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   97884:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   97888:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   9788c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   97890:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   97894:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   97898:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   9789c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   978a0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   978a4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   978a8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   978ac:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   978b0:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   978b4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   978b8:	f800283a 	ret

000978bc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   978bc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   978c0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   978c4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   978c8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   978cc:	0097aa40 	call	97aa4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   978d0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   978d4:	d4a72845 	stb	r18,-25439(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   978d8:	003fe506 	br	97870 <__alt_data_end+0xfffd9070>

000978dc <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   978dc:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   978e0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   978e4:	10800054 	ori	r2,r2,1
      wrctl status, r2
   978e8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   978ec:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   978f0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   978f4:	dec00204 	addi	sp,sp,8

      callr r2
   978f8:	103ee83a 	callr	r2

      nop
   978fc:	0001883a 	nop

00097900 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   97900:	defff704 	addi	sp,sp,-36
   97904:	dfc00815 	stw	ra,32(sp)
   97908:	df000715 	stw	fp,28(sp)
   9790c:	df000704 	addi	fp,sp,28
   97910:	e13ffc15 	stw	r4,-16(fp)
   97914:	e17ffd15 	stw	r5,-12(fp)
   97918:	e1bffe15 	stw	r6,-8(fp)
   9791c:	3805883a 	mov	r2,r7
   97920:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   97924:	e0fffe17 	ldw	r3,-8(fp)
   97928:	00bfff04 	movi	r2,-4
   9792c:	1884703a 	and	r2,r3,r2
   97930:	10bef704 	addi	r2,r2,-1060
   97934:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   97938:	01810904 	movi	r6,1060
   9793c:	000b883a 	mov	r5,zero
   97940:	e13ff917 	ldw	r4,-28(fp)
   97944:	00864840 	call	86484 <memset>
   97948:	e0bff917 	ldw	r2,-28(fp)
   9794c:	10c0bb04 	addi	r3,r2,748
   97950:	e0bff917 	ldw	r2,-28(fp)
   97954:	10c00115 	stw	r3,4(r2)
   97958:	e0bff917 	ldw	r2,-28(fp)
   9795c:	10c0d504 	addi	r3,r2,852
   97960:	e0bff917 	ldw	r2,-28(fp)
   97964:	10c00215 	stw	r3,8(r2)
   97968:	e0bff917 	ldw	r2,-28(fp)
   9796c:	10c0ef04 	addi	r3,r2,956
   97970:	e0bff917 	ldw	r2,-28(fp)
   97974:	10c00315 	stw	r3,12(r2)
   97978:	e0fff917 	ldw	r3,-28(fp)
   9797c:	008002b4 	movhi	r2,10
   97980:	10a18c04 	addi	r2,r2,-31184
   97984:	18800d15 	stw	r2,52(r3)
   97988:	e0bff917 	ldw	r2,-28(fp)
   9798c:	00c00044 	movi	r3,1
   97990:	10c02915 	stw	r3,164(r2)
   97994:	10002a15 	stw	zero,168(r2)
   97998:	e0bff917 	ldw	r2,-28(fp)
   9799c:	00ccc384 	movi	r3,13070
   979a0:	10c02b0d 	sth	r3,172(r2)
   979a4:	e0bff917 	ldw	r2,-28(fp)
   979a8:	00eaf344 	movi	r3,-21555
   979ac:	10c02b8d 	sth	r3,174(r2)
   979b0:	e0bff917 	ldw	r2,-28(fp)
   979b4:	00c48d04 	movi	r3,4660
   979b8:	10c02c0d 	sth	r3,176(r2)
   979bc:	e0bff917 	ldw	r2,-28(fp)
   979c0:	00f99b44 	movi	r3,-6547
   979c4:	10c02c8d 	sth	r3,178(r2)
   979c8:	e0bff917 	ldw	r2,-28(fp)
   979cc:	00f7bb04 	movi	r3,-8468
   979d0:	10c02d0d 	sth	r3,180(r2)
   979d4:	e0bff917 	ldw	r2,-28(fp)
   979d8:	00c00144 	movi	r3,5
   979dc:	10c02d8d 	sth	r3,182(r2)
   979e0:	e0bff917 	ldw	r2,-28(fp)
   979e4:	00c002c4 	movi	r3,11
   979e8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   979ec:	e0bff917 	ldw	r2,-28(fp)
   979f0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   979f4:	e0bffa17 	ldw	r2,-24(fp)
   979f8:	10bff304 	addi	r2,r2,-52
   979fc:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   97a00:	e0bffb17 	ldw	r2,-20(fp)
   97a04:	10800c04 	addi	r2,r2,48
   97a08:	e0fffc17 	ldw	r3,-16(fp)
   97a0c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   97a10:	e0bffb17 	ldw	r2,-20(fp)
   97a14:	10800b04 	addi	r2,r2,44
   97a18:	e0fffd17 	ldw	r3,-12(fp)
   97a1c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   97a20:	e0bffb17 	ldw	r2,-20(fp)
   97a24:	10800a04 	addi	r2,r2,40
   97a28:	e0fff917 	ldw	r3,-28(fp)
   97a2c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   97a30:	00800274 	movhi	r2,9
   97a34:	109e3704 	addi	r2,r2,30940
   97a38:	10c00104 	addi	r3,r2,4
   97a3c:	e0bffb17 	ldw	r2,-20(fp)
   97a40:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   97a44:	e0bffb17 	ldw	r2,-20(fp)
}
   97a48:	e037883a 	mov	sp,fp
   97a4c:	dfc00117 	ldw	ra,4(sp)
   97a50:	df000017 	ldw	fp,0(sp)
   97a54:	dec00204 	addi	sp,sp,8
   97a58:	f800283a 	ret

00097a5c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   97a5c:	defffe04 	addi	sp,sp,-8
   97a60:	df000115 	stw	fp,4(sp)
   97a64:	df000104 	addi	fp,sp,4
   97a68:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   97a6c:	0001883a 	nop
   97a70:	e037883a 	mov	sp,fp
   97a74:	df000017 	ldw	fp,0(sp)
   97a78:	dec00104 	addi	sp,sp,4
   97a7c:	f800283a 	ret

00097a80 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   97a80:	defffe04 	addi	sp,sp,-8
   97a84:	df000115 	stw	fp,4(sp)
   97a88:	df000104 	addi	fp,sp,4
   97a8c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   97a90:	0001883a 	nop
   97a94:	e037883a 	mov	sp,fp
   97a98:	df000017 	ldw	fp,0(sp)
   97a9c:	dec00104 	addi	sp,sp,4
   97aa0:	f800283a 	ret

00097aa4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   97aa4:	deffff04 	addi	sp,sp,-4
   97aa8:	df000015 	stw	fp,0(sp)
   97aac:	d839883a 	mov	fp,sp
}
   97ab0:	0001883a 	nop
   97ab4:	e037883a 	mov	sp,fp
   97ab8:	df000017 	ldw	fp,0(sp)
   97abc:	dec00104 	addi	sp,sp,4
   97ac0:	f800283a 	ret

00097ac4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   97ac4:	deffff04 	addi	sp,sp,-4
   97ac8:	df000015 	stw	fp,0(sp)
   97acc:	d839883a 	mov	fp,sp
}
   97ad0:	0001883a 	nop
   97ad4:	e037883a 	mov	sp,fp
   97ad8:	df000017 	ldw	fp,0(sp)
   97adc:	dec00104 	addi	sp,sp,4
   97ae0:	f800283a 	ret

00097ae4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   97ae4:	deffff04 	addi	sp,sp,-4
   97ae8:	df000015 	stw	fp,0(sp)
   97aec:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   97af0:	0001883a 	nop
   97af4:	e037883a 	mov	sp,fp
   97af8:	df000017 	ldw	fp,0(sp)
   97afc:	dec00104 	addi	sp,sp,4
   97b00:	f800283a 	ret

00097b04 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   97b04:	deffff04 	addi	sp,sp,-4
   97b08:	df000015 	stw	fp,0(sp)
   97b0c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   97b10:	0001883a 	nop
   97b14:	e037883a 	mov	sp,fp
   97b18:	df000017 	ldw	fp,0(sp)
   97b1c:	dec00104 	addi	sp,sp,4
   97b20:	f800283a 	ret

00097b24 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   97b24:	deffff04 	addi	sp,sp,-4
   97b28:	df000015 	stw	fp,0(sp)
   97b2c:	d839883a 	mov	fp,sp
}
   97b30:	0001883a 	nop
   97b34:	e037883a 	mov	sp,fp
   97b38:	df000017 	ldw	fp,0(sp)
   97b3c:	dec00104 	addi	sp,sp,4
   97b40:	f800283a 	ret

00097b44 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   97b44:	deffff04 	addi	sp,sp,-4
   97b48:	df000015 	stw	fp,0(sp)
   97b4c:	d839883a 	mov	fp,sp
}
   97b50:	0001883a 	nop
   97b54:	e037883a 	mov	sp,fp
   97b58:	df000017 	ldw	fp,0(sp)
   97b5c:	dec00104 	addi	sp,sp,4
   97b60:	f800283a 	ret

00097b64 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   97b64:	defffe04 	addi	sp,sp,-8
   97b68:	df000115 	stw	fp,4(sp)
   97b6c:	df000104 	addi	fp,sp,4
   97b70:	e13fff15 	stw	r4,-4(fp)
}
   97b74:	0001883a 	nop
   97b78:	e037883a 	mov	sp,fp
   97b7c:	df000017 	ldw	fp,0(sp)
   97b80:	dec00104 	addi	sp,sp,4
   97b84:	f800283a 	ret

00097b88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   97b88:	defffa04 	addi	sp,sp,-24
   97b8c:	dfc00515 	stw	ra,20(sp)
   97b90:	df000415 	stw	fp,16(sp)
   97b94:	df000404 	addi	fp,sp,16
   97b98:	e13ffe15 	stw	r4,-8(fp)
   97b9c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   97ba0:	e0bfff17 	ldw	r2,-4(fp)
   97ba4:	10800017 	ldw	r2,0(r2)
   97ba8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   97bac:	e13ffe17 	ldw	r4,-8(fp)
   97bb0:	00878680 	call	87868 <strlen>
   97bb4:	10800044 	addi	r2,r2,1
   97bb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   97bbc:	00000d06 	br	97bf4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   97bc0:	e0bffc17 	ldw	r2,-16(fp)
   97bc4:	10800217 	ldw	r2,8(r2)
   97bc8:	e0fffd17 	ldw	r3,-12(fp)
   97bcc:	180d883a 	mov	r6,r3
   97bd0:	e17ffe17 	ldw	r5,-8(fp)
   97bd4:	1009883a 	mov	r4,r2
   97bd8:	0097e600 	call	97e60 <memcmp>
   97bdc:	1000021e 	bne	r2,zero,97be8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   97be0:	e0bffc17 	ldw	r2,-16(fp)
   97be4:	00000706 	br	97c04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   97be8:	e0bffc17 	ldw	r2,-16(fp)
   97bec:	10800017 	ldw	r2,0(r2)
   97bf0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   97bf4:	e0fffc17 	ldw	r3,-16(fp)
   97bf8:	e0bfff17 	ldw	r2,-4(fp)
   97bfc:	18bff01e 	bne	r3,r2,97bc0 <__alt_data_end+0xfffd93c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   97c00:	0005883a 	mov	r2,zero
}
   97c04:	e037883a 	mov	sp,fp
   97c08:	dfc00117 	ldw	ra,4(sp)
   97c0c:	df000017 	ldw	fp,0(sp)
   97c10:	dec00204 	addi	sp,sp,8
   97c14:	f800283a 	ret

00097c18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   97c18:	defffb04 	addi	sp,sp,-20
   97c1c:	dfc00415 	stw	ra,16(sp)
   97c20:	df000315 	stw	fp,12(sp)
   97c24:	df000304 	addi	fp,sp,12
   97c28:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   97c2c:	d0a00717 	ldw	r2,-32740(gp)
   97c30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   97c34:	00003106 	br	97cfc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   97c38:	e0bffd17 	ldw	r2,-12(fp)
   97c3c:	10800217 	ldw	r2,8(r2)
   97c40:	1009883a 	mov	r4,r2
   97c44:	00878680 	call	87868 <strlen>
   97c48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   97c4c:	e0bffd17 	ldw	r2,-12(fp)
   97c50:	10c00217 	ldw	r3,8(r2)
   97c54:	e0bffe17 	ldw	r2,-8(fp)
   97c58:	10bfffc4 	addi	r2,r2,-1
   97c5c:	1885883a 	add	r2,r3,r2
   97c60:	10800003 	ldbu	r2,0(r2)
   97c64:	10803fcc 	andi	r2,r2,255
   97c68:	1080201c 	xori	r2,r2,128
   97c6c:	10bfe004 	addi	r2,r2,-128
   97c70:	10800bd8 	cmpnei	r2,r2,47
   97c74:	1000031e 	bne	r2,zero,97c84 <alt_find_file+0x6c>
    {
      len -= 1;
   97c78:	e0bffe17 	ldw	r2,-8(fp)
   97c7c:	10bfffc4 	addi	r2,r2,-1
   97c80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   97c84:	e0bffe17 	ldw	r2,-8(fp)
   97c88:	e0ffff17 	ldw	r3,-4(fp)
   97c8c:	1885883a 	add	r2,r3,r2
   97c90:	10800003 	ldbu	r2,0(r2)
   97c94:	10803fcc 	andi	r2,r2,255
   97c98:	1080201c 	xori	r2,r2,128
   97c9c:	10bfe004 	addi	r2,r2,-128
   97ca0:	10800be0 	cmpeqi	r2,r2,47
   97ca4:	1000081e 	bne	r2,zero,97cc8 <alt_find_file+0xb0>
   97ca8:	e0bffe17 	ldw	r2,-8(fp)
   97cac:	e0ffff17 	ldw	r3,-4(fp)
   97cb0:	1885883a 	add	r2,r3,r2
   97cb4:	10800003 	ldbu	r2,0(r2)
   97cb8:	10803fcc 	andi	r2,r2,255
   97cbc:	1080201c 	xori	r2,r2,128
   97cc0:	10bfe004 	addi	r2,r2,-128
   97cc4:	10000a1e 	bne	r2,zero,97cf0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   97cc8:	e0bffd17 	ldw	r2,-12(fp)
   97ccc:	10800217 	ldw	r2,8(r2)
   97cd0:	e0fffe17 	ldw	r3,-8(fp)
   97cd4:	180d883a 	mov	r6,r3
   97cd8:	e17fff17 	ldw	r5,-4(fp)
   97cdc:	1009883a 	mov	r4,r2
   97ce0:	0097e600 	call	97e60 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   97ce4:	1000021e 	bne	r2,zero,97cf0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   97ce8:	e0bffd17 	ldw	r2,-12(fp)
   97cec:	00000706 	br	97d0c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   97cf0:	e0bffd17 	ldw	r2,-12(fp)
   97cf4:	10800017 	ldw	r2,0(r2)
   97cf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   97cfc:	e0fffd17 	ldw	r3,-12(fp)
   97d00:	d0a00704 	addi	r2,gp,-32740
   97d04:	18bfcc1e 	bne	r3,r2,97c38 <__alt_data_end+0xfffd9438>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   97d08:	0005883a 	mov	r2,zero
}
   97d0c:	e037883a 	mov	sp,fp
   97d10:	dfc00117 	ldw	ra,4(sp)
   97d14:	df000017 	ldw	fp,0(sp)
   97d18:	dec00204 	addi	sp,sp,8
   97d1c:	f800283a 	ret

00097d20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   97d20:	defff804 	addi	sp,sp,-32
   97d24:	dfc00715 	stw	ra,28(sp)
   97d28:	df000615 	stw	fp,24(sp)
   97d2c:	dc000515 	stw	r16,20(sp)
   97d30:	df000604 	addi	fp,sp,24
   97d34:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   97d38:	00bffa04 	movi	r2,-24
   97d3c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   97d40:	d0a71f17 	ldw	r2,-25476(gp)
   97d44:	e0bffc15 	stw	r2,-16(fp)
   97d48:	e03ffd0d 	sth	zero,-12(fp)
   97d4c:	e0bffd0b 	ldhu	r2,-12(fp)
   97d50:	e0fffd84 	addi	r3,fp,-10
   97d54:	180d883a 	mov	r6,r3
   97d58:	100b883a 	mov	r5,r2
   97d5c:	e13ffc17 	ldw	r4,-16(fp)
   97d60:	0093d780 	call	93d78 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   97d64:	e03ffa15 	stw	zero,-24(fp)
   97d68:	00001d06 	br	97de0 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   97d6c:	040002b4 	movhi	r16,10
   97d70:	8423c004 	addi	r16,r16,-28928
   97d74:	e0bffa17 	ldw	r2,-24(fp)
   97d78:	01400304 	movi	r5,12
   97d7c:	1009883a 	mov	r4,r2
   97d80:	008b08c0 	call	8b08c <__mulsi3>
   97d84:	8085883a 	add	r2,r16,r2
   97d88:	10800017 	ldw	r2,0(r2)
   97d8c:	1000111e 	bne	r2,zero,97dd4 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   97d90:	040002b4 	movhi	r16,10
   97d94:	8423c004 	addi	r16,r16,-28928
   97d98:	e0bffa17 	ldw	r2,-24(fp)
   97d9c:	01400304 	movi	r5,12
   97da0:	1009883a 	mov	r4,r2
   97da4:	008b08c0 	call	8b08c <__mulsi3>
   97da8:	8085883a 	add	r2,r16,r2
   97dac:	e0fffe17 	ldw	r3,-8(fp)
   97db0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   97db4:	d0e00b17 	ldw	r3,-32724(gp)
   97db8:	e0bffa17 	ldw	r2,-24(fp)
   97dbc:	1880020e 	bge	r3,r2,97dc8 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   97dc0:	e0bffa17 	ldw	r2,-24(fp)
   97dc4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   97dc8:	e0bffa17 	ldw	r2,-24(fp)
   97dcc:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   97dd0:	00000606 	br	97dec <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   97dd4:	e0bffa17 	ldw	r2,-24(fp)
   97dd8:	10800044 	addi	r2,r2,1
   97ddc:	e0bffa15 	stw	r2,-24(fp)
   97de0:	e0bffa17 	ldw	r2,-24(fp)
   97de4:	10800810 	cmplti	r2,r2,32
   97de8:	103fe01e 	bne	r2,zero,97d6c <__alt_data_end+0xfffd956c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   97dec:	d0a71f17 	ldw	r2,-25476(gp)
   97df0:	1009883a 	mov	r4,r2
   97df4:	00940f00 	call	940f0 <OSSemPost>

  return rc;
   97df8:	e0bffb17 	ldw	r2,-20(fp)
}
   97dfc:	e6ffff04 	addi	sp,fp,-4
   97e00:	dfc00217 	ldw	ra,8(sp)
   97e04:	df000117 	ldw	fp,4(sp)
   97e08:	dc000017 	ldw	r16,0(sp)
   97e0c:	dec00304 	addi	sp,sp,12
   97e10:	f800283a 	ret

00097e14 <atexit>:
   97e14:	200b883a 	mov	r5,r4
   97e18:	000f883a 	mov	r7,zero
   97e1c:	000d883a 	mov	r6,zero
   97e20:	0009883a 	mov	r4,zero
   97e24:	0097edc1 	jmpi	97edc <__register_exitproc>

00097e28 <exit>:
   97e28:	defffe04 	addi	sp,sp,-8
   97e2c:	000b883a 	mov	r5,zero
   97e30:	dc000015 	stw	r16,0(sp)
   97e34:	dfc00115 	stw	ra,4(sp)
   97e38:	2021883a 	mov	r16,r4
   97e3c:	0097ff40 	call	97ff4 <__call_exitprocs>
   97e40:	008002b4 	movhi	r2,10
   97e44:	10a83c04 	addi	r2,r2,-24336
   97e48:	11000017 	ldw	r4,0(r2)
   97e4c:	20800f17 	ldw	r2,60(r4)
   97e50:	10000126 	beq	r2,zero,97e58 <exit+0x30>
   97e54:	103ee83a 	callr	r2
   97e58:	8009883a 	mov	r4,r16
   97e5c:	00981740 	call	98174 <_exit>

00097e60 <memcmp>:
   97e60:	01c000c4 	movi	r7,3
   97e64:	3980192e 	bgeu	r7,r6,97ecc <memcmp+0x6c>
   97e68:	2144b03a 	or	r2,r4,r5
   97e6c:	11c4703a 	and	r2,r2,r7
   97e70:	10000f26 	beq	r2,zero,97eb0 <memcmp+0x50>
   97e74:	20800003 	ldbu	r2,0(r4)
   97e78:	28c00003 	ldbu	r3,0(r5)
   97e7c:	10c0151e 	bne	r2,r3,97ed4 <memcmp+0x74>
   97e80:	31bfff84 	addi	r6,r6,-2
   97e84:	01ffffc4 	movi	r7,-1
   97e88:	00000406 	br	97e9c <memcmp+0x3c>
   97e8c:	20800003 	ldbu	r2,0(r4)
   97e90:	28c00003 	ldbu	r3,0(r5)
   97e94:	31bfffc4 	addi	r6,r6,-1
   97e98:	10c00e1e 	bne	r2,r3,97ed4 <memcmp+0x74>
   97e9c:	21000044 	addi	r4,r4,1
   97ea0:	29400044 	addi	r5,r5,1
   97ea4:	31fff91e 	bne	r6,r7,97e8c <__alt_data_end+0xfffd968c>
   97ea8:	0005883a 	mov	r2,zero
   97eac:	f800283a 	ret
   97eb0:	20c00017 	ldw	r3,0(r4)
   97eb4:	28800017 	ldw	r2,0(r5)
   97eb8:	18bfee1e 	bne	r3,r2,97e74 <__alt_data_end+0xfffd9674>
   97ebc:	31bfff04 	addi	r6,r6,-4
   97ec0:	21000104 	addi	r4,r4,4
   97ec4:	29400104 	addi	r5,r5,4
   97ec8:	39bff936 	bltu	r7,r6,97eb0 <__alt_data_end+0xfffd96b0>
   97ecc:	303fe91e 	bne	r6,zero,97e74 <__alt_data_end+0xfffd9674>
   97ed0:	003ff506 	br	97ea8 <__alt_data_end+0xfffd96a8>
   97ed4:	10c5c83a 	sub	r2,r2,r3
   97ed8:	f800283a 	ret

00097edc <__register_exitproc>:
   97edc:	defffa04 	addi	sp,sp,-24
   97ee0:	dc000315 	stw	r16,12(sp)
   97ee4:	040002b4 	movhi	r16,10
   97ee8:	84283c04 	addi	r16,r16,-24336
   97eec:	80c00017 	ldw	r3,0(r16)
   97ef0:	dc400415 	stw	r17,16(sp)
   97ef4:	dfc00515 	stw	ra,20(sp)
   97ef8:	18805217 	ldw	r2,328(r3)
   97efc:	2023883a 	mov	r17,r4
   97f00:	10003726 	beq	r2,zero,97fe0 <__register_exitproc+0x104>
   97f04:	10c00117 	ldw	r3,4(r2)
   97f08:	010007c4 	movi	r4,31
   97f0c:	20c00e16 	blt	r4,r3,97f48 <__register_exitproc+0x6c>
   97f10:	1a000044 	addi	r8,r3,1
   97f14:	8800221e 	bne	r17,zero,97fa0 <__register_exitproc+0xc4>
   97f18:	18c00084 	addi	r3,r3,2
   97f1c:	18c7883a 	add	r3,r3,r3
   97f20:	18c7883a 	add	r3,r3,r3
   97f24:	12000115 	stw	r8,4(r2)
   97f28:	10c7883a 	add	r3,r2,r3
   97f2c:	19400015 	stw	r5,0(r3)
   97f30:	0005883a 	mov	r2,zero
   97f34:	dfc00517 	ldw	ra,20(sp)
   97f38:	dc400417 	ldw	r17,16(sp)
   97f3c:	dc000317 	ldw	r16,12(sp)
   97f40:	dec00604 	addi	sp,sp,24
   97f44:	f800283a 	ret
   97f48:	00800034 	movhi	r2,0
   97f4c:	10800004 	addi	r2,r2,0
   97f50:	10002626 	beq	r2,zero,97fec <__register_exitproc+0x110>
   97f54:	01006404 	movi	r4,400
   97f58:	d9400015 	stw	r5,0(sp)
   97f5c:	d9800115 	stw	r6,4(sp)
   97f60:	d9c00215 	stw	r7,8(sp)
   97f64:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   97f68:	d9400017 	ldw	r5,0(sp)
   97f6c:	d9800117 	ldw	r6,4(sp)
   97f70:	d9c00217 	ldw	r7,8(sp)
   97f74:	10001d26 	beq	r2,zero,97fec <__register_exitproc+0x110>
   97f78:	81000017 	ldw	r4,0(r16)
   97f7c:	10000115 	stw	zero,4(r2)
   97f80:	02000044 	movi	r8,1
   97f84:	22405217 	ldw	r9,328(r4)
   97f88:	0007883a 	mov	r3,zero
   97f8c:	12400015 	stw	r9,0(r2)
   97f90:	20805215 	stw	r2,328(r4)
   97f94:	10006215 	stw	zero,392(r2)
   97f98:	10006315 	stw	zero,396(r2)
   97f9c:	883fde26 	beq	r17,zero,97f18 <__alt_data_end+0xfffd9718>
   97fa0:	18c9883a 	add	r4,r3,r3
   97fa4:	2109883a 	add	r4,r4,r4
   97fa8:	1109883a 	add	r4,r2,r4
   97fac:	21802215 	stw	r6,136(r4)
   97fb0:	01800044 	movi	r6,1
   97fb4:	12406217 	ldw	r9,392(r2)
   97fb8:	30cc983a 	sll	r6,r6,r3
   97fbc:	4992b03a 	or	r9,r9,r6
   97fc0:	12406215 	stw	r9,392(r2)
   97fc4:	21c04215 	stw	r7,264(r4)
   97fc8:	01000084 	movi	r4,2
   97fcc:	893fd21e 	bne	r17,r4,97f18 <__alt_data_end+0xfffd9718>
   97fd0:	11006317 	ldw	r4,396(r2)
   97fd4:	218cb03a 	or	r6,r4,r6
   97fd8:	11806315 	stw	r6,396(r2)
   97fdc:	003fce06 	br	97f18 <__alt_data_end+0xfffd9718>
   97fe0:	18805304 	addi	r2,r3,332
   97fe4:	18805215 	stw	r2,328(r3)
   97fe8:	003fc606 	br	97f04 <__alt_data_end+0xfffd9704>
   97fec:	00bfffc4 	movi	r2,-1
   97ff0:	003fd006 	br	97f34 <__alt_data_end+0xfffd9734>

00097ff4 <__call_exitprocs>:
   97ff4:	defff504 	addi	sp,sp,-44
   97ff8:	df000915 	stw	fp,36(sp)
   97ffc:	dd400615 	stw	r21,24(sp)
   98000:	dc800315 	stw	r18,12(sp)
   98004:	dfc00a15 	stw	ra,40(sp)
   98008:	ddc00815 	stw	r23,32(sp)
   9800c:	dd800715 	stw	r22,28(sp)
   98010:	dd000515 	stw	r20,20(sp)
   98014:	dcc00415 	stw	r19,16(sp)
   98018:	dc400215 	stw	r17,8(sp)
   9801c:	dc000115 	stw	r16,4(sp)
   98020:	d9000015 	stw	r4,0(sp)
   98024:	2839883a 	mov	fp,r5
   98028:	04800044 	movi	r18,1
   9802c:	057fffc4 	movi	r21,-1
   98030:	008002b4 	movhi	r2,10
   98034:	10a83c04 	addi	r2,r2,-24336
   98038:	12000017 	ldw	r8,0(r2)
   9803c:	45005217 	ldw	r20,328(r8)
   98040:	44c05204 	addi	r19,r8,328
   98044:	a0001c26 	beq	r20,zero,980b8 <__call_exitprocs+0xc4>
   98048:	a0800117 	ldw	r2,4(r20)
   9804c:	15ffffc4 	addi	r23,r2,-1
   98050:	b8000d16 	blt	r23,zero,98088 <__call_exitprocs+0x94>
   98054:	14000044 	addi	r16,r2,1
   98058:	8421883a 	add	r16,r16,r16
   9805c:	8421883a 	add	r16,r16,r16
   98060:	84402004 	addi	r17,r16,128
   98064:	a463883a 	add	r17,r20,r17
   98068:	a421883a 	add	r16,r20,r16
   9806c:	e0001e26 	beq	fp,zero,980e8 <__call_exitprocs+0xf4>
   98070:	80804017 	ldw	r2,256(r16)
   98074:	e0801c26 	beq	fp,r2,980e8 <__call_exitprocs+0xf4>
   98078:	bdffffc4 	addi	r23,r23,-1
   9807c:	843fff04 	addi	r16,r16,-4
   98080:	8c7fff04 	addi	r17,r17,-4
   98084:	bd7ff91e 	bne	r23,r21,9806c <__alt_data_end+0xfffd986c>
   98088:	00800034 	movhi	r2,0
   9808c:	10800004 	addi	r2,r2,0
   98090:	10000926 	beq	r2,zero,980b8 <__call_exitprocs+0xc4>
   98094:	a0800117 	ldw	r2,4(r20)
   98098:	1000301e 	bne	r2,zero,9815c <__call_exitprocs+0x168>
   9809c:	a0800017 	ldw	r2,0(r20)
   980a0:	10003226 	beq	r2,zero,9816c <__call_exitprocs+0x178>
   980a4:	a009883a 	mov	r4,r20
   980a8:	98800015 	stw	r2,0(r19)
   980ac:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   980b0:	9d000017 	ldw	r20,0(r19)
   980b4:	a03fe41e 	bne	r20,zero,98048 <__alt_data_end+0xfffd9848>
   980b8:	dfc00a17 	ldw	ra,40(sp)
   980bc:	df000917 	ldw	fp,36(sp)
   980c0:	ddc00817 	ldw	r23,32(sp)
   980c4:	dd800717 	ldw	r22,28(sp)
   980c8:	dd400617 	ldw	r21,24(sp)
   980cc:	dd000517 	ldw	r20,20(sp)
   980d0:	dcc00417 	ldw	r19,16(sp)
   980d4:	dc800317 	ldw	r18,12(sp)
   980d8:	dc400217 	ldw	r17,8(sp)
   980dc:	dc000117 	ldw	r16,4(sp)
   980e0:	dec00b04 	addi	sp,sp,44
   980e4:	f800283a 	ret
   980e8:	a0800117 	ldw	r2,4(r20)
   980ec:	80c00017 	ldw	r3,0(r16)
   980f0:	10bfffc4 	addi	r2,r2,-1
   980f4:	15c01426 	beq	r2,r23,98148 <__call_exitprocs+0x154>
   980f8:	80000015 	stw	zero,0(r16)
   980fc:	183fde26 	beq	r3,zero,98078 <__alt_data_end+0xfffd9878>
   98100:	95c8983a 	sll	r4,r18,r23
   98104:	a0806217 	ldw	r2,392(r20)
   98108:	a5800117 	ldw	r22,4(r20)
   9810c:	2084703a 	and	r2,r4,r2
   98110:	10000b26 	beq	r2,zero,98140 <__call_exitprocs+0x14c>
   98114:	a0806317 	ldw	r2,396(r20)
   98118:	2088703a 	and	r4,r4,r2
   9811c:	20000c1e 	bne	r4,zero,98150 <__call_exitprocs+0x15c>
   98120:	89400017 	ldw	r5,0(r17)
   98124:	d9000017 	ldw	r4,0(sp)
   98128:	183ee83a 	callr	r3
   9812c:	a0800117 	ldw	r2,4(r20)
   98130:	15bfbf1e 	bne	r2,r22,98030 <__alt_data_end+0xfffd9830>
   98134:	98800017 	ldw	r2,0(r19)
   98138:	153fcf26 	beq	r2,r20,98078 <__alt_data_end+0xfffd9878>
   9813c:	003fbc06 	br	98030 <__alt_data_end+0xfffd9830>
   98140:	183ee83a 	callr	r3
   98144:	003ff906 	br	9812c <__alt_data_end+0xfffd992c>
   98148:	a5c00115 	stw	r23,4(r20)
   9814c:	003feb06 	br	980fc <__alt_data_end+0xfffd98fc>
   98150:	89000017 	ldw	r4,0(r17)
   98154:	183ee83a 	callr	r3
   98158:	003ff406 	br	9812c <__alt_data_end+0xfffd992c>
   9815c:	a0800017 	ldw	r2,0(r20)
   98160:	a027883a 	mov	r19,r20
   98164:	1029883a 	mov	r20,r2
   98168:	003fb606 	br	98044 <__alt_data_end+0xfffd9844>
   9816c:	0005883a 	mov	r2,zero
   98170:	003ffb06 	br	98160 <__alt_data_end+0xfffd9960>

00098174 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   98174:	defffd04 	addi	sp,sp,-12
   98178:	df000215 	stw	fp,8(sp)
   9817c:	df000204 	addi	fp,sp,8
   98180:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   98184:	d0272845 	stb	zero,-25439(gp)
   98188:	e0bfff17 	ldw	r2,-4(fp)
   9818c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   98190:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   98194:	10000226 	beq	r2,zero,981a0 <_exit+0x2c>
    ALT_SIM_FAIL();
   98198:	002af070 	cmpltui	zero,zero,43969
   9819c:	00000106 	br	981a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   981a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   981a4:	003fff06 	br	981a4 <__alt_data_end+0xfffd99a4>
