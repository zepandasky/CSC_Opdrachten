
week1_practicum2.elf:     file format elf32-littlenios2
week1_practicum2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010348 memsz 0x00010348 flags r-x
    LOAD off    0x00011368 vaddr 0x00010368 paddr 0x00011e54 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013940 vaddr 0x00013940 paddr 0x00013940 align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fe38  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000370  0000fff8  0000fff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00010368  00011e54  00011368  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  00013940  00013940  00013940  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00013ab8  00013ab8  00012e54  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012e54  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e88  00000000  00000000  00012e78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022c37  00000000  00000000  00013d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008dfb  00000000  00000000  00036937  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b43f  00000000  00000000  0003f732  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002118  00000000  00000000  0004ab74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000035d9  00000000  00000000  0004cc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017833  00000000  00000000  00050265  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00067a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001898  00000000  00000000  00067aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006c44a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006c44d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006c459  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006c45a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006c45b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006c466  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006c471  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006c47c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004c  00000000  00000000  0006c487  2**0
                  CONTENTS, READONLY
 26 .jdi          00005227  00000000  00000000  0006c4d3  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000480a0  00000000  00000000  000716fa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
0000fff8 l    d  .rodata	00000000 .rodata
00010368 l    d  .rwdata	00000000 .rwdata
00013940 l    d  .bss	00000000 .bss
00013ab8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../week1_practicum2_bsp//obj/HAL/src/crt0.o
000001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00013944 l     O .bss	00000006 hexadecimalnum.2822
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 vfprintf.c
000100ae l     O .rodata	00000010 zeroes.4404
00002dec l     F .text	000000bc __sbprintf
000100be l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002ffc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004b54 l     F .text	00000008 __fp_unlock
00004b68 l     F .text	0000019c __sinit.part.1
00004d04 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010368 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000107ac l     O .rwdata	00000020 lc_ctype_charset
0001078c l     O .rwdata	00000020 lc_message_charset
000107cc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000100f0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000076e8 l     F .text	000000fc __sprint_r.part.0
00010214 l     O .rodata	00000010 zeroes.4349
00008d24 l     F .text	000000bc __sbprintf
00010224 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d8f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000da08 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000da34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ddc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000deb0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000df9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e178 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011e48 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e3ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e528 l     F .text	00000034 alt_dev_reg
00010db4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e818 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000ea24 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f05c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f29c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f45c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000f5bc l     F .text	0000003c alt_get_errno
0000f5f8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000071f8 g     F .text	00000074 _mprec_log10
000072e4 g     F .text	0000008c __any_on
000097a0 g     F .text	00000054 _isatty_r
000100fc g     O .rodata	00000028 __mprec_tinytens
0000e0b4 g     F .text	0000007c alt_main
000139b8 g     O .bss	00000100 alt_irq
000097f4 g     F .text	00000060 _lseek_r
00011e54 g       *ABS*	00000000 __flash_rwdata_start
0000c2cc g     F .text	00000088 .hidden __eqdf2
00013ab8 g       *ABS*	00000000 __alt_heap_start
00000a00 g     F .text	0000003c printf
0000a0cc g     F .text	0000009c _wcrtomb_r
00007510 g     F .text	0000005c __sseek
00004eb4 g     F .text	00000010 __sinit
00009f74 g     F .text	00000140 __swbuf_r
000054c0 g     F .text	0000007c _setlocale_r
00004d0c g     F .text	00000078 __sfmoreglue
0000e154 g     F .text	00000024 __malloc_unlock
00009854 g     F .text	0000015c memmove
00004e9c g     F .text	00000018 _cleanup
000062b8 g     F .text	000000a8 _Balloc
0000c354 g     F .text	000000dc .hidden __gtdf2
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000927c g     F .text	0000005c _fstat_r
00013974 g     O .bss	00000004 errno
0000748c g     F .text	00000008 __seofread
00013980 g     O .bss	00000004 alt_argv
00019e14 g       *ABS*	00000000 _gp
00010c34 g     O .rwdata	00000180 alt_fd_list
0000fa08 g     F .text	00000090 alt_find_dev
00006048 g     F .text	00000148 memcpy
00004b5c g     F .text	0000000c _cleanup_r
0000d70c g     F .text	000000dc .hidden __floatsidf
0000f540 g     F .text	0000007c alt_io_redirect
0000c430 g     F .text	000000f4 .hidden __ltdf2
0000fff8 g       *ABS*	00000000 __DTOR_END__
00007370 g     F .text	00000074 __fpclassifyd
00007154 g     F .text	000000a4 __ratio
00008d08 g     F .text	0000001c __vfiprintf_internal
0000ec1c g     F .text	0000021c altera_avalon_jtag_uart_read
000009d0 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000af6c g     F .text	00000064 .hidden __udivsi3
0000de04 g     F .text	000000ac isatty
0001014c g     O .rodata	000000c8 __mprec_tens
0000553c g     F .text	0000000c __locale_charset
00013970 g     O .bss	00000004 __malloc_top_pad
00011e1c g     O .rwdata	00000004 __mb_cur_max
0000556c g     F .text	0000000c _localeconv_r
000092d8 g     F .text	000004c8 __sfvwrite_r
000066ec g     F .text	0000003c __i2b
000073e4 g     F .text	00000054 _sbrk_r
000099b0 g     F .text	00000060 _read_r
00011e3c g     O .rwdata	00000004 alt_max_fd
00008f70 g     F .text	000000f0 _fclose_r
00004b24 g     F .text	00000030 fflush
0001396c g     O .bss	00000004 __malloc_max_sbrked_mem
0000b050 g     F .text	000008ac .hidden __adddf3
0001394c g     O .bss	00000004 noPara1
00006efc g     F .text	0000010c __b2d
0000a8b0 g     F .text	000005c4 .hidden __umoddi3
0000dfd8 g     F .text	000000dc lseek
00011e14 g     O .rwdata	00000004 _global_impure_ptr
00013950 g     O .bss	00000004 flags1
00009a10 g     F .text	00000564 _realloc_r
00013ab8 g       *ABS*	00000000 __bss_end
0000dcd8 g     F .text	000000f0 alt_iic_isr_register
0000f8dc g     F .text	00000108 alt_tick
0000a2b4 g     F .text	000005fc .hidden __udivdi3
000091d8 g     F .text	00000024 _fputwc_r
00010124 g     O .rodata	00000028 __mprec_bigtens
000064d0 g     F .text	00000104 __s2b
0000d7e8 g     F .text	000000a8 .hidden __floatunsidf
00006c3c g     F .text	00000060 __mcmp
00004ed4 g     F .text	00000018 __fp_lock_all
0000dc8c g     F .text	0000004c alt_ic_irq_enabled
0000f840 g     F .text	0000009c alt_alarm_stop
00013978 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d4 alt_irq_handler
00010c0c g     O .rwdata	00000028 alt_dev_null
000001fc g     F .text	0000012c charToInt
0000f27c g     F .text	00000020 alt_dcache_flush_all
000065d4 g     F .text	00000068 __hi0bits
0000d68c g     F .text	00000080 .hidden __fixdfsi
00011e54 g       *ABS*	00000000 __ram_rwdata_end
00011e34 g     O .rwdata	00000008 alt_dev_list
0000e428 g     F .text	00000100 write
00010368 g       *ABS*	00000000 __ram_rodata_end
0000da70 g     F .text	000000b8 fstat
0000c430 g     F .text	000000f4 .hidden __ledf2
000069b4 g     F .text	00000140 __pow5mult
000077fc g     F .text	0000150c ___vfiprintf_internal_r
00013964 g     O .bss	00000004 __nlocale_changed
0000afd0 g     F .text	00000058 .hidden __umodsi3
00000488 g     F .text	0000012c init_interrupt
00013ab8 g       *ABS*	00000000 end
000005b4 g     F .text	000000b8 counterInterrupt
0000e758 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000fff8 g       *ABS*	00000000 __CTOR_LIST__
0001f400 g       *ABS*	00000000 __alt_stack_pointer
0000f0d4 g     F .text	0000007c alt_avalon_timer_sc_init
0000d890 g     F .text	00000064 .hidden __clzsi2
0000ee38 g     F .text	00000224 altera_avalon_jtag_uart_write
00004ec4 g     F .text	00000004 __sfp_lock_acquire
00005f64 g     F .text	000000e4 memchr
00000af4 g     F .text	000022dc ___vfprintf_internal_r
00005028 g     F .text	00000310 _free_r
00005548 g     F .text	00000010 __locale_mb_cur_max
0000fe44 g     F .text	00000180 __call_exitprocs
00013960 g     O .bss	00000004 __mlocale_changed
00011e20 g     O .rwdata	00000004 __malloc_sbrk_base
000001c0 g     F .text	0000003c _start
00013988 g     O .bss	00000004 _alt_tick_rate
0000066c g     F .text	000000e4 jtagInterrupt
00006af4 g     F .text	00000148 __lshift
0001398c g     O .bss	00000004 _alt_nticks
0000e1b4 g     F .text	00000104 read
0000e594 g     F .text	00000060 alt_sys_init
0000fd2c g     F .text	00000118 __register_exitproc
00006728 g     F .text	0000028c __multiply
0000eac4 g     F .text	00000068 altera_avalon_jtag_uart_close
00000894 g     F .text	00000104 dec2ToHex
0000b028 g     F .text	00000028 .hidden __mulsi3
00010368 g       *ABS*	00000000 __ram_rwdata_start
0000fff8 g       *ABS*	00000000 __ram_rodata_start
00013990 g     O .bss	00000028 __malloc_current_mallinfo
00007008 g     F .text	0000014c __d2b
00013940 g     O .bss	00000004 intCounter
0000e5f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000fba0 g     F .text	000000c4 alt_get_fd
00008e40 g     F .text	00000054 _close_r
0000fcb0 g     F .text	0000007c memcmp
0000e6b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00013ab8 g       *ABS*	00000000 __alt_stack_base
0000e704 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002ea8 g     F .text	00000154 __swsetup_r
0000b8fc g     F .text	000009d0 .hidden __divdf3
00004d84 g     F .text	00000118 __sfp
00000a3c g     F .text	000000b8 strncat
0000726c g     F .text	00000078 __copybits
00010804 g     O .rwdata	00000408 __malloc_av_
00004ed0 g     F .text	00000004 __sinit_lock_release
0000c524 g     F .text	0000086c .hidden __muldf3
00007438 g     F .text	00000054 __sread
0000fa98 g     F .text	00000108 alt_find_file
0000f2d8 g     F .text	000000a4 alt_dev_llist_insert
0000e130 g     F .text	00000024 __malloc_lock
0000e33c g     F .text	000000b0 sbrk
00004ac8 g     F .text	0000005c _fflush_r
00008e94 g     F .text	000000dc _calloc_r
00013940 g       *ABS*	00000000 __bss_start
00006190 g     F .text	00000128 memset
00000998 g     F .text	00000038 main
00013984 g     O .bss	00000004 alt_envp
00013968 g     O .bss	00000004 __malloc_max_total_mem
0000e654 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a0b4 g     F .text	00000018 __swbuf
0000756c g     F .text	00000008 __sclose
0001f400 g       *ABS*	00000000 __alt_heap_limit
00009060 g     F .text	00000014 fclose
00003224 g     F .text	00001688 _dtoa_r
00005758 g     F .text	0000080c _malloc_r
0000a228 g     F .text	00000030 __ascii_wctomb
00011e40 g     O .rwdata	00000004 alt_errno
00005338 g     F .text	000000c4 _fwalk
0000ae74 g     F .text	00000084 .hidden __divsi3
00000328 g     F .text	00000160 hex_to_7_seg
00004f04 g     F .text	00000124 _malloc_trim_r
0000fff8 g       *ABS*	00000000 __CTOR_END__
00007574 g     F .text	000000dc strcmp
0000fff8 g       *ABS*	00000000 __flash_rodata_start
0000fff8 g       *ABS*	00000000 __DTOR_LIST__
0000c2cc g     F .text	00000088 .hidden __nedf2
0000e55c g     F .text	00000038 alt_irq_init
0000e2b8 g     F .text	00000084 alt_release_fd
00010234 g     O .rodata	00000100 .hidden __clz_tab
0001395c g     O .bss	00000004 _PathLocale
0000fc64 g     F .text	00000014 atexit
00008de0 g     F .text	00000060 _write_r
00005578 g     F .text	00000018 setlocale
00011e18 g     O .rwdata	00000004 _impure_ptr
0001397c g     O .bss	00000004 alt_argc
000048ac g     F .text	0000021c __sflush_r
0000f3dc g     F .text	00000060 _do_dtors
00005564 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006e98 g     F .text	00000064 __ulp
00004eec g     F .text	00000018 __fp_unlock_all
00011e2c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005590 g     F .text	0000000c localeconv
0000db28 g     F .text	00000050 alt_ic_isr_register
00011e54 g       *ABS*	00000000 _edata
00013ab8 g       *ABS*	00000000 _end
00013954 g     O .bss	00000004 noPara
00009074 g     F .text	00000164 __fputwc
000001c0 g       *ABS*	00000000 __ram_exceptions_end
0000eb2c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000dc00 g     F .text	0000008c alt_ic_irq_disable
00007494 g     F .text	0000007c __swrite
00011e24 g     O .rwdata	00000004 __malloc_trim_threshold
0000f9e4 g     F .text	00000024 altera_nios2_qsys_irq_init
00005558 g     F .text	0000000c __locale_msgcharset
0000fc78 g     F .text	00000038 exit
00013958 g     O .bss	00000004 flags
000053fc g     F .text	000000c4 _fwalk_reent
00006c9c g     F .text	000001fc __mdiff
0000aef8 g     F .text	00000074 .hidden __modsi3
0001f400 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004ec8 g     F .text	00000004 __sfp_lock_release
0000ffc4 g     F .text	00000034 _exit
0000f150 g     F .text	0000012c alt_alarm_start
0000559c g     F .text	000001bc __smakebuf_r
00007650 g     F .text	00000098 strlen
0000f6e4 g     F .text	0000015c open
0000c354 g     F .text	000000dc .hidden __gedf2
00011e28 g     O .rwdata	00000004 __wctomb
000077e4 g     F .text	00000018 __sprint_r
0000f43c g     F .text	00000020 alt_icache_flush_all
00011e44 g     O .rwdata	00000004 alt_priority_mask
0000db78 g     F .text	00000088 alt_ic_irq_enable
00002dd0 g     F .text	0000001c __vfprintf_internal
0000a258 g     F .text	0000005c _wctomb_r
0000cd90 g     F .text	000008fc .hidden __subdf3
0000663c g     F .text	000000b0 __lo0bits
00011e4c g     O .rwdata	00000008 alt_alarm_list
0000f37c g     F .text	00000060 _do_ctors
0000a168 g     F .text	000000c0 wcrtomb
0000d930 g     F .text	000000d8 close
00000750 g     F .text	00000144 write7SegDisplay
0000df18 g     F .text	00000084 alt_load
000091fc g     F .text	00000080 fputwc
00004ecc g     F .text	00000004 __sinit_lock_acquire
00006388 g     F .text	00000148 __multadd
00006360 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407014 	ori	at,at,448
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	108e6e04 	addi	r2,r2,14776
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	108e6e04 	addi	r2,r2,14776
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xfffe0d1c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xfffe0d10>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c0:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     1c4:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
     1c8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1cc:	d6a78514 	ori	gp,gp,40468
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d4:	108e5014 	ori	r2,r2,14656

    movhi r3, %hi(__bss_end)
     1d8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1dc:	18ceae14 	ori	r3,r3,15032

    beq r2, r3, 1f
     1e0:	10c00326 	beq	r2,r3,1f0 <_start+0x30>

0:
    stw zero, (r2)
     1e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ec:	10fffd36 	bltu	r2,r3,1e4 <__alt_data_end+0xfffe0de4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f0:	000df180 	call	df18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f4:	000e0b40 	call	e0b4 <alt_main>

000001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f8:	003fff06 	br	1f8 <__alt_data_end+0xfffe0df8>

000001fc <charToInt>:
volatile int noPara1;
volatile int flags1;

//Convert a char hexadecimal character to its corresponding int value
int charToInt(char convert)
{
     1fc:	defffe04 	addi	sp,sp,-8
     200:	df000115 	stw	fp,4(sp)
     204:	df000104 	addi	fp,sp,4
     208:	2005883a 	mov	r2,r4
     20c:	e0bfff05 	stb	r2,-4(fp)
	switch(convert){
     210:	e0bfff07 	ldb	r2,-4(fp)
     214:	10bff404 	addi	r2,r2,-48
     218:	10c005e8 	cmpgeui	r3,r2,23
     21c:	18003d1e 	bne	r3,zero,314 <charToInt+0x118>
     220:	100690ba 	slli	r3,r2,2
     224:	00800034 	movhi	r2,0
     228:	10808e04 	addi	r2,r2,568
     22c:	1885883a 	add	r2,r3,r2
     230:	10800017 	ldw	r2,0(r2)
     234:	1000683a 	jmp	r2
     238:	00000294 	movui	zero,10
     23c:	0000029c 	xori	zero,zero,10
     240:	000002a4 	muli	zero,zero,10
     244:	000002ac 	andhi	zero,zero,10
     248:	000002b4 	movhi	zero,10
     24c:	000002bc 	xorhi	zero,zero,10
     250:	000002c4 	movi	zero,11
     254:	000002cc 	andi	zero,zero,11
     258:	000002d4 	movui	zero,11
     25c:	000002dc 	xori	zero,zero,11
     260:	00000314 	movui	zero,12
     264:	00000314 	movui	zero,12
     268:	00000314 	movui	zero,12
     26c:	00000314 	movui	zero,12
     270:	00000314 	movui	zero,12
     274:	00000314 	movui	zero,12
     278:	00000314 	movui	zero,12
     27c:	000002e4 	muli	zero,zero,11
     280:	000002ec 	andhi	zero,zero,11
     284:	000002f4 	movhi	zero,11
     288:	000002fc 	xorhi	zero,zero,11
     28c:	00000304 	movi	zero,12
     290:	0000030c 	andi	zero,zero,12
        case '0' : return 0; break;
     294:	0005883a 	mov	r2,zero
     298:	00001f06 	br	318 <charToInt+0x11c>
        case '1' : return 1; break;
     29c:	00800044 	movi	r2,1
     2a0:	00001d06 	br	318 <charToInt+0x11c>
        case '2' : return 2; break;
     2a4:	00800084 	movi	r2,2
     2a8:	00001b06 	br	318 <charToInt+0x11c>
        case '3' : return 3; break;
     2ac:	008000c4 	movi	r2,3
     2b0:	00001906 	br	318 <charToInt+0x11c>
        case '4' : return 4; break;
     2b4:	00800104 	movi	r2,4
     2b8:	00001706 	br	318 <charToInt+0x11c>
        case '5' : return 5; break;
     2bc:	00800144 	movi	r2,5
     2c0:	00001506 	br	318 <charToInt+0x11c>
        case '6' : return 6; break;
     2c4:	00800184 	movi	r2,6
     2c8:	00001306 	br	318 <charToInt+0x11c>
        case '7' : return 7; break;
     2cc:	008001c4 	movi	r2,7
     2d0:	00001106 	br	318 <charToInt+0x11c>
        case '8' : return 8; break;
     2d4:	00800204 	movi	r2,8
     2d8:	00000f06 	br	318 <charToInt+0x11c>
        case '9' : return 9; break;
     2dc:	00800244 	movi	r2,9
     2e0:	00000d06 	br	318 <charToInt+0x11c>
        case 'A' : return 10; break;
     2e4:	00800284 	movi	r2,10
     2e8:	00000b06 	br	318 <charToInt+0x11c>
        case 'B' : return 11; break;
     2ec:	008002c4 	movi	r2,11
     2f0:	00000906 	br	318 <charToInt+0x11c>
        case 'C' : return 12; break;
     2f4:	00800304 	movi	r2,12
     2f8:	00000706 	br	318 <charToInt+0x11c>
        case 'D' : return 13; break;
     2fc:	00800344 	movi	r2,13
     300:	00000506 	br	318 <charToInt+0x11c>
        case 'E' : return 14; break;
     304:	00800384 	movi	r2,14
     308:	00000306 	br	318 <charToInt+0x11c>
        case 'F' : return 15; break;
     30c:	008003c4 	movi	r2,15
     310:	00000106 	br	318 <charToInt+0x11c>
        default  : return 0;
     314:	0005883a 	mov	r2,zero
    }
}
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <hex_to_7_seg>:
//Return the hex display input bits to set a certain number on the display
int hex_to_7_seg (int hex_digit ) {
     328:	defffe04 	addi	sp,sp,-8
     32c:	df000115 	stw	fp,4(sp)
     330:	df000104 	addi	fp,sp,4
     334:	e13fff15 	stw	r4,-4(fp)
    if ( hex_digit == 0x0 ) return 0x40 ;
     338:	e0bfff17 	ldw	r2,-4(fp)
     33c:	1000021e 	bne	r2,zero,348 <hex_to_7_seg+0x20>
     340:	00801004 	movi	r2,64
     344:	00004c06 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0x1 ) return 0x79 ;
     348:	e0bfff17 	ldw	r2,-4(fp)
     34c:	10800058 	cmpnei	r2,r2,1
     350:	1000021e 	bne	r2,zero,35c <hex_to_7_seg+0x34>
     354:	00801e44 	movi	r2,121
     358:	00004706 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0x2 ) return 0x24 ;
     35c:	e0bfff17 	ldw	r2,-4(fp)
     360:	10800098 	cmpnei	r2,r2,2
     364:	1000021e 	bne	r2,zero,370 <hex_to_7_seg+0x48>
     368:	00800904 	movi	r2,36
     36c:	00004206 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0x3 ) return 0x30 ;
     370:	e0bfff17 	ldw	r2,-4(fp)
     374:	108000d8 	cmpnei	r2,r2,3
     378:	1000021e 	bne	r2,zero,384 <hex_to_7_seg+0x5c>
     37c:	00800c04 	movi	r2,48
     380:	00003d06 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0x4 ) return 0x19 ;
     384:	e0bfff17 	ldw	r2,-4(fp)
     388:	10800118 	cmpnei	r2,r2,4
     38c:	1000021e 	bne	r2,zero,398 <hex_to_7_seg+0x70>
     390:	00800644 	movi	r2,25
     394:	00003806 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0x5 ) return 0x12 ;
     398:	e0bfff17 	ldw	r2,-4(fp)
     39c:	10800158 	cmpnei	r2,r2,5
     3a0:	1000021e 	bne	r2,zero,3ac <hex_to_7_seg+0x84>
     3a4:	00800484 	movi	r2,18
     3a8:	00003306 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0x6 ) return 0x02 ;
     3ac:	e0bfff17 	ldw	r2,-4(fp)
     3b0:	10800198 	cmpnei	r2,r2,6
     3b4:	1000021e 	bne	r2,zero,3c0 <hex_to_7_seg+0x98>
     3b8:	00800084 	movi	r2,2
     3bc:	00002e06 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0x7 ) return 0x78 ;
     3c0:	e0bfff17 	ldw	r2,-4(fp)
     3c4:	108001d8 	cmpnei	r2,r2,7
     3c8:	1000021e 	bne	r2,zero,3d4 <hex_to_7_seg+0xac>
     3cc:	00801e04 	movi	r2,120
     3d0:	00002906 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0x8 ) return 0x00 ;
     3d4:	e0bfff17 	ldw	r2,-4(fp)
     3d8:	10800218 	cmpnei	r2,r2,8
     3dc:	1000021e 	bne	r2,zero,3e8 <hex_to_7_seg+0xc0>
     3e0:	0005883a 	mov	r2,zero
     3e4:	00002406 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0x9 ) return 0x18 ;
     3e8:	e0bfff17 	ldw	r2,-4(fp)
     3ec:	10800258 	cmpnei	r2,r2,9
     3f0:	1000021e 	bne	r2,zero,3fc <hex_to_7_seg+0xd4>
     3f4:	00800604 	movi	r2,24
     3f8:	00001f06 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0xA ) return 0x08 ;
     3fc:	e0bfff17 	ldw	r2,-4(fp)
     400:	10800298 	cmpnei	r2,r2,10
     404:	1000021e 	bne	r2,zero,410 <hex_to_7_seg+0xe8>
     408:	00800204 	movi	r2,8
     40c:	00001a06 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0xB ) return 0x03 ;
     410:	e0bfff17 	ldw	r2,-4(fp)
     414:	108002d8 	cmpnei	r2,r2,11
     418:	1000021e 	bne	r2,zero,424 <hex_to_7_seg+0xfc>
     41c:	008000c4 	movi	r2,3
     420:	00001506 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0xC ) return 0x46 ;
     424:	e0bfff17 	ldw	r2,-4(fp)
     428:	10800318 	cmpnei	r2,r2,12
     42c:	1000021e 	bne	r2,zero,438 <hex_to_7_seg+0x110>
     430:	00801184 	movi	r2,70
     434:	00001006 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0xD ) return 0x21 ;
     438:	e0bfff17 	ldw	r2,-4(fp)
     43c:	10800358 	cmpnei	r2,r2,13
     440:	1000021e 	bne	r2,zero,44c <hex_to_7_seg+0x124>
     444:	00800844 	movi	r2,33
     448:	00000b06 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0xE ) return 0x06 ;
     44c:	e0bfff17 	ldw	r2,-4(fp)
     450:	10800398 	cmpnei	r2,r2,14
     454:	1000021e 	bne	r2,zero,460 <hex_to_7_seg+0x138>
     458:	00800184 	movi	r2,6
     45c:	00000606 	br	478 <hex_to_7_seg+0x150>
    if ( hex_digit == 0xF ) return 0x0E ;
     460:	e0bfff17 	ldw	r2,-4(fp)
     464:	108003d8 	cmpnei	r2,r2,15
     468:	1000021e 	bne	r2,zero,474 <hex_to_7_seg+0x14c>
     46c:	00800384 	movi	r2,14
     470:	00000106 	br	478 <hex_to_7_seg+0x150>
return 0x7F ;
     474:	00801fc4 	movi	r2,127
}
     478:	e037883a 	mov	sp,fp
     47c:	df000017 	ldw	fp,0(sp)
     480:	dec00104 	addi	sp,sp,4
     484:	f800283a 	ret

00000488 <init_interrupt>:

void init_interrupt(){
     488:	defff804 	addi	sp,sp,-32
     48c:	dfc00715 	stw	ra,28(sp)
     490:	df000615 	stw	fp,24(sp)
     494:	df000604 	addi	fp,sp,24
		/*Set interrupt for interval timer*/
		int counter	= 50000;	// 1/(50MHz) x (50000) = 1msec
     498:	00b0d414 	movui	r2,50000
     49c:	e0bffb15 	stw	r2,-20(fp)
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, counter & 0xFFFF);
     4a0:	e0bffb17 	ldw	r2,-20(fp)
     4a4:	10ffffcc 	andi	r3,r2,65535
     4a8:	008000b4 	movhi	r2,2
     4ac:	10840204 	addi	r2,r2,4104
     4b0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (counter >> 16) & 0xFFFF);
     4b4:	e0bffb17 	ldw	r2,-20(fp)
     4b8:	1004d43a 	srli	r2,r2,16
     4bc:	1007883a 	mov	r3,r2
     4c0:	008000b4 	movhi	r2,2
     4c4:	10840304 	addi	r2,r2,4108
     4c8:	10c00035 	stwio	r3,0(r2)

		//Set control register bits
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x7);
     4cc:	00c001c4 	movi	r3,7
     4d0:	008000b4 	movhi	r2,2
     4d4:	10840104 	addi	r2,r2,4100
     4d8:	10c00035 	stwio	r3,0(r2)
		//Set control register bits, enable Write interrupts
		IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_0_BASE, 0x2);
     4dc:	00c00084 	movi	r3,2
     4e0:	008000b4 	movhi	r2,2
     4e4:	10841904 	addi	r2,r2,4196
     4e8:	10c00035 	stwio	r3,0(r2)

		void* isrPara = (void *) &noPara;
     4ec:	d0a6d004 	addi	r2,gp,-25792
     4f0:	e0bffc15 	stw	r2,-16(fp)
		void* noFlags = (void *) &flags;
     4f4:	d0a6d104 	addi	r2,gp,-25788
     4f8:	e0bffd15 	stw	r2,-12(fp)
		void* isrPara1 = (void *) &noPara1;
     4fc:	d0a6ce04 	addi	r2,gp,-25800
     500:	e0bffe15 	stw	r2,-8(fp)
		void* noFlags1 = (void *) &flags1;
     504:	d0a6cf04 	addi	r2,gp,-25796
     508:	e0bfff15 	stw	r2,-4(fp)
		//uitzoeken wat void isr_context moet zijn en de flags
		if(alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ, counterInterrupt, isrPara, noFlags) != 0){
     50c:	e0bffd17 	ldw	r2,-12(fp)
     510:	d8800015 	stw	r2,0(sp)
     514:	e1fffc17 	ldw	r7,-16(fp)
     518:	01800034 	movhi	r6,0
     51c:	31816d04 	addi	r6,r6,1460
     520:	01400104 	movi	r5,4
     524:	0009883a 	mov	r4,zero
     528:	000db280 	call	db28 <alt_ic_isr_register>
     52c:	10000326 	beq	r2,zero,53c <init_interrupt+0xb4>
		  printf("Error in initializing interval timer interrupt");
     530:	01000074 	movhi	r4,1
     534:	213ffe04 	addi	r4,r4,-8
     538:	0000a000 	call	a00 <printf>
		}
		/*Set jtag_uart interrupt */
		if(alt_ic_isr_register(JTAG_UART_0_IRQ_INTERRUPT_CONTROLLER_ID,JTAG_UART_0_IRQ, jtagInterrupt, isrPara1, noFlags1) != 0){
     53c:	e0bfff17 	ldw	r2,-4(fp)
     540:	d8800015 	stw	r2,0(sp)
     544:	e1fffe17 	ldw	r7,-8(fp)
     548:	01800034 	movhi	r6,0
     54c:	31819b04 	addi	r6,r6,1644
     550:	01400144 	movi	r5,5
     554:	0009883a 	mov	r4,zero
     558:	000db280 	call	db28 <alt_ic_isr_register>
     55c:	10000326 	beq	r2,zero,56c <init_interrupt+0xe4>
				  printf("Error in initializing jtag_uart interrupt");
     560:	01000074 	movhi	r4,1
     564:	21000a04 	addi	r4,r4,40
     568:	0000a000 	call	a00 <printf>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     56c:	00800044 	movi	r2,1
     570:	1001703a 	wrctl	status,r2
		}

		alt_irq_cpu_enable_interrupts();
		alt_ic_irq_enable(JTAG_UART_0_IRQ_INTERRUPT_CONTROLLER_ID,jtagInterrupt);
     574:	00800034 	movhi	r2,0
     578:	10819b04 	addi	r2,r2,1644
     57c:	100b883a 	mov	r5,r2
     580:	0009883a 	mov	r4,zero
     584:	000db780 	call	db78 <alt_ic_irq_enable>
		alt_ic_irq_enable(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, counterInterrupt);
     588:	00800034 	movhi	r2,0
     58c:	10816d04 	addi	r2,r2,1460
     590:	100b883a 	mov	r5,r2
     594:	0009883a 	mov	r4,zero
     598:	000db780 	call	db78 <alt_ic_irq_enable>

}
     59c:	0001883a 	nop
     5a0:	e037883a 	mov	sp,fp
     5a4:	dfc00117 	ldw	ra,4(sp)
     5a8:	df000017 	ldw	fp,0(sp)
     5ac:	dec00204 	addi	sp,sp,8
     5b0:	f800283a 	ret

000005b4 <counterInterrupt>:

/*Interrupt function */
void counterInterrupt(void* isr_context)
{
     5b4:	defffa04 	addi	sp,sp,-24
     5b8:	dfc00515 	stw	ra,20(sp)
     5bc:	df000415 	stw	fp,16(sp)
     5c0:	df000404 	addi	fp,sp,16
     5c4:	e13fff15 	stw	r4,-4(fp)
	volatile int * interval_timer_ptr = (int *)TIMER_0_BASE;
     5c8:	008000b4 	movhi	r2,2
     5cc:	10840004 	addi	r2,r2,4096
     5d0:	e0bffd15 	stw	r2,-12(fp)
	*(interval_timer_ptr) = 0;
     5d4:	e0bffd17 	ldw	r2,-12(fp)
     5d8:	10000015 	stw	zero,0(r2)
    intCounter++;
     5dc:	d0a6cb17 	ldw	r2,-25812(gp)
     5e0:	10800044 	addi	r2,r2,1
     5e4:	d0a6cb15 	stw	r2,-25812(gp)
    if(intCounter > 999999) intCounter = 0; //6 seven segments displays
     5e8:	d0e6cb17 	ldw	r3,-25812(gp)
     5ec:	008003f4 	movhi	r2,15
     5f0:	10908fc4 	addi	r2,r2,16959
     5f4:	10c0010e 	bge	r2,r3,5fc <counterInterrupt+0x48>
     5f8:	d026cb15 	stw	zero,-25812(gp)
    char *intCounterHex;
    intCounterHex = dec2ToHex(intCounter);
     5fc:	d0a6cb17 	ldw	r2,-25812(gp)
     600:	1009883a 	mov	r4,r2
     604:	00008940 	call	894 <dec2ToHex>
     608:	e0bffe15 	stw	r2,-8(fp)

    //elke charachter uit intCounterHex staat gelijk aan een getal op de hex display
    int i = 0;
     60c:	e03ffc15 	stw	zero,-16(fp)
    while(i < 6){
     610:	00000d06 	br	648 <counterInterrupt+0x94>
        write7SegDisplay(intCounterHex[i], i);
     614:	e0bffc17 	ldw	r2,-16(fp)
     618:	e0fffe17 	ldw	r3,-8(fp)
     61c:	1885883a 	add	r2,r3,r2
     620:	10800003 	ldbu	r2,0(r2)
     624:	10803fcc 	andi	r2,r2,255
     628:	1080201c 	xori	r2,r2,128
     62c:	10bfe004 	addi	r2,r2,-128
     630:	e17ffc17 	ldw	r5,-16(fp)
     634:	1009883a 	mov	r4,r2
     638:	00007500 	call	750 <write7SegDisplay>
        i++;
     63c:	e0bffc17 	ldw	r2,-16(fp)
     640:	10800044 	addi	r2,r2,1
     644:	e0bffc15 	stw	r2,-16(fp)
    char *intCounterHex;
    intCounterHex = dec2ToHex(intCounter);

    //elke charachter uit intCounterHex staat gelijk aan een getal op de hex display
    int i = 0;
    while(i < 6){
     648:	e0bffc17 	ldw	r2,-16(fp)
     64c:	10800190 	cmplti	r2,r2,6
     650:	103ff01e 	bne	r2,zero,614 <__alt_data_end+0xfffe1214>
        write7SegDisplay(intCounterHex[i], i);
        i++;
    }
}
     654:	0001883a 	nop
     658:	e037883a 	mov	sp,fp
     65c:	dfc00117 	ldw	ra,4(sp)
     660:	df000017 	ldw	fp,0(sp)
     664:	dec00204 	addi	sp,sp,8
     668:	f800283a 	ret

0000066c <jtagInterrupt>:

void jtagInterrupt(void* isr_context){
     66c:	defffb04 	addi	sp,sp,-20
     670:	dfc00415 	stw	ra,16(sp)
     674:	df000315 	stw	fp,12(sp)
     678:	df000304 	addi	fp,sp,12
     67c:	e13fff15 	stw	r4,-4(fp)
	volatile int * jtagInterrupt = (int *)JTAG_UART_0_BASE;
     680:	008000b4 	movhi	r2,2
     684:	10841804 	addi	r2,r2,4192
     688:	e0bffd15 	stw	r2,-12(fp)
	*(jtagInterrupt) = 0;
     68c:	e0bffd17 	ldw	r2,-12(fp)
     690:	10000015 	stw	zero,0(r2)
	int dataInt;
	char data;
	char completeData[] = "";
     694:	e03ffe45 	stb	zero,-7(fp)
	printf("test1");
     698:	01000074 	movhi	r4,1
     69c:	21001504 	addi	r4,r4,84
     6a0:	0000a000 	call	a00 <printf>
	do{
		data = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE);
     6a4:	008000b4 	movhi	r2,2
     6a8:	10841804 	addi	r2,r2,4192
     6ac:	10800037 	ldwio	r2,0(r2)
     6b0:	e0bffe05 	stb	r2,-8(fp)
		if(data == '\n')
     6b4:	e0bffe03 	ldbu	r2,-8(fp)
     6b8:	10803fcc 	andi	r2,r2,255
     6bc:	1080201c 	xori	r2,r2,128
     6c0:	10bfe004 	addi	r2,r2,-128
     6c4:	10800298 	cmpnei	r2,r2,10
     6c8:	10001326 	beq	r2,zero,718 <jtagInterrupt+0xac>
			break;
		if (data & 0x00008000){   // check RVALID to see if there is new data
     6cc:	e0bffe03 	ldbu	r2,-8(fp)
     6d0:	10803fcc 	andi	r2,r2,255
     6d4:	1080201c 	xori	r2,r2,128
     6d8:	10bfe004 	addi	r2,r2,-128
     6dc:	10a0000c 	andi	r2,r2,32768
     6e0:	10000626 	beq	r2,zero,6fc <jtagInterrupt+0x90>
			strncat(completeData,&data,1);
     6e4:	e0fffe04 	addi	r3,fp,-8
     6e8:	e0bffe44 	addi	r2,fp,-7
     6ec:	01800044 	movi	r6,1
     6f0:	180b883a 	mov	r5,r3
     6f4:	1009883a 	mov	r4,r2
     6f8:	0000a3c0 	call	a3c <strncat>
		}
	}while(data != '\n');
     6fc:	e0bffe03 	ldbu	r2,-8(fp)
     700:	10803fcc 	andi	r2,r2,255
     704:	1080201c 	xori	r2,r2,128
     708:	10bfe004 	addi	r2,r2,-128
     70c:	10800298 	cmpnei	r2,r2,10
     710:	103fe41e 	bne	r2,zero,6a4 <__alt_data_end+0xfffe12a4>
     714:	00000106 	br	71c <jtagInterrupt+0xb0>
	char completeData[] = "";
	printf("test1");
	do{
		data = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE);
		if(data == '\n')
			break;
     718:	0001883a 	nop
		if (data & 0x00008000){   // check RVALID to see if there is new data
			strncat(completeData,&data,1);
		}
	}while(data != '\n');

	if(completeData == "start"){
     71c:	e0fffe44 	addi	r3,fp,-7
     720:	00800074 	movhi	r2,1
     724:	10801704 	addi	r2,r2,92
     728:	1880031e 	bne	r3,r2,738 <jtagInterrupt+0xcc>
		printf("test");
     72c:	01000074 	movhi	r4,1
     730:	21001904 	addi	r4,r4,100
     734:	0000a000 	call	a00 <printf>
	}
}
     738:	0001883a 	nop
     73c:	e037883a 	mov	sp,fp
     740:	dfc00117 	ldw	ra,4(sp)
     744:	df000017 	ldw	fp,0(sp)
     748:	dec00204 	addi	sp,sp,8
     74c:	f800283a 	ret

00000750 <write7SegDisplay>:

void write7SegDisplay(char displayValue, int displayNumber)
{
     750:	defffa04 	addi	sp,sp,-24
     754:	dfc00515 	stw	ra,20(sp)
     758:	df000415 	stw	fp,16(sp)
     75c:	df000404 	addi	fp,sp,16
     760:	2005883a 	mov	r2,r4
     764:	e17fff15 	stw	r5,-4(fp)
     768:	e0bffe05 	stb	r2,-8(fp)
    int decNumber = charToInt(displayValue);
     76c:	e0bffe07 	ldb	r2,-8(fp)
     770:	1009883a 	mov	r4,r2
     774:	00001fc0 	call	1fc <charToInt>
     778:	e0bffc15 	stw	r2,-16(fp)
    int segInput = hex_to_7_seg(decNumber);
     77c:	e13ffc17 	ldw	r4,-16(fp)
     780:	00003280 	call	328 <hex_to_7_seg>
     784:	e0bffd15 	stw	r2,-12(fp)
    /* Uitleg
     * Het adres van hexY_X bevat een X aantal bits als voorbeeld hex0_3 = 28 bits
     * De hexto7Seg returned het getal wat nodig is om de goede bits van het hex display aan te sturen
     * Maar je wilt dit naar een specifiek gedeelte van de 28 bits schrijven, de 1e 7 = hex0 daarna hex1 etc. dit kan doormiddel van een mask(0x7F)
     */
    if(displayNumber == 0)
     788:	e0bfff17 	ldw	r2,-4(fp)
     78c:	1000041e 	bne	r2,zero,7a0 <write7SegDisplay+0x50>
    	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_3_BASE, (segInput));
     790:	008000b4 	movhi	r2,2
     794:	10840c04 	addi	r2,r2,4144
     798:	e0fffd17 	ldw	r3,-12(fp)
     79c:	10c00035 	stwio	r3,0(r2)
    if(displayNumber == 1)
     7a0:	e0bfff17 	ldw	r2,-4(fp)
     7a4:	10800058 	cmpnei	r2,r2,1
     7a8:	1000091e 	bne	r2,zero,7d0 <write7SegDisplay+0x80>
    	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_3_BASE, ((segInput << 7) | IORD_ALTERA_AVALON_PIO_DATA(HEX0_3_BASE)));
     7ac:	e0bffd17 	ldw	r2,-12(fp)
     7b0:	100691fa 	slli	r3,r2,7
     7b4:	008000b4 	movhi	r2,2
     7b8:	10840c04 	addi	r2,r2,4144
     7bc:	10800037 	ldwio	r2,0(r2)
     7c0:	1886b03a 	or	r3,r3,r2
     7c4:	008000b4 	movhi	r2,2
     7c8:	10840c04 	addi	r2,r2,4144
     7cc:	10c00035 	stwio	r3,0(r2)
    if(displayNumber == 2)
     7d0:	e0bfff17 	ldw	r2,-4(fp)
     7d4:	10800098 	cmpnei	r2,r2,2
     7d8:	1000091e 	bne	r2,zero,800 <write7SegDisplay+0xb0>
    	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_3_BASE, ((segInput << 14) | IORD_ALTERA_AVALON_PIO_DATA(HEX0_3_BASE)));
     7dc:	e0bffd17 	ldw	r2,-12(fp)
     7e0:	100693ba 	slli	r3,r2,14
     7e4:	008000b4 	movhi	r2,2
     7e8:	10840c04 	addi	r2,r2,4144
     7ec:	10800037 	ldwio	r2,0(r2)
     7f0:	1886b03a 	or	r3,r3,r2
     7f4:	008000b4 	movhi	r2,2
     7f8:	10840c04 	addi	r2,r2,4144
     7fc:	10c00035 	stwio	r3,0(r2)
    if(displayNumber == 3)
     800:	e0bfff17 	ldw	r2,-4(fp)
     804:	108000d8 	cmpnei	r2,r2,3
     808:	1000091e 	bne	r2,zero,830 <write7SegDisplay+0xe0>
    	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_3_BASE, ((segInput << 21) | IORD_ALTERA_AVALON_PIO_DATA(HEX0_3_BASE)));
     80c:	e0bffd17 	ldw	r2,-12(fp)
     810:	1006957a 	slli	r3,r2,21
     814:	008000b4 	movhi	r2,2
     818:	10840c04 	addi	r2,r2,4144
     81c:	10800037 	ldwio	r2,0(r2)
     820:	1886b03a 	or	r3,r3,r2
     824:	008000b4 	movhi	r2,2
     828:	10840c04 	addi	r2,r2,4144
     82c:	10c00035 	stwio	r3,0(r2)
    if(displayNumber == 4)
     830:	e0bfff17 	ldw	r2,-4(fp)
     834:	10800118 	cmpnei	r2,r2,4
     838:	1000041e 	bne	r2,zero,84c <write7SegDisplay+0xfc>
    	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_5_BASE, (segInput));
     83c:	008000b4 	movhi	r2,2
     840:	10840804 	addi	r2,r2,4128
     844:	e0fffd17 	ldw	r3,-12(fp)
     848:	10c00035 	stwio	r3,0(r2)
    if(displayNumber == 5)
     84c:	e0bfff17 	ldw	r2,-4(fp)
     850:	10800158 	cmpnei	r2,r2,5
     854:	1000091e 	bne	r2,zero,87c <write7SegDisplay+0x12c>
    	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_5_BASE, ((segInput << 7) | IORD_ALTERA_AVALON_PIO_DATA(HEX4_5_BASE)));
     858:	e0bffd17 	ldw	r2,-12(fp)
     85c:	100691fa 	slli	r3,r2,7
     860:	008000b4 	movhi	r2,2
     864:	10840804 	addi	r2,r2,4128
     868:	10800037 	ldwio	r2,0(r2)
     86c:	1886b03a 	or	r3,r3,r2
     870:	008000b4 	movhi	r2,2
     874:	10840804 	addi	r2,r2,4128
     878:	10c00035 	stwio	r3,0(r2)
}
     87c:	0001883a 	nop
     880:	e037883a 	mov	sp,fp
     884:	dfc00117 	ldw	ra,4(sp)
     888:	df000017 	ldw	fp,0(sp)
     88c:	dec00204 	addi	sp,sp,8
     890:	f800283a 	ret

00000894 <dec2ToHex>:

char* dec2ToHex(int decimalnum)
{
     894:	defffa04 	addi	sp,sp,-24
     898:	df000515 	stw	fp,20(sp)
     89c:	df000504 	addi	fp,sp,20
     8a0:	e13fff15 	stw	r4,-4(fp)
    int quotient, remainder;
    int i, j = 0;
     8a4:	e03ffc15 	stw	zero,-16(fp)
    static char hexadecimalnum[MAX_HEX_SIZE];

    for(int i = 0; i < MAX_HEX_SIZE; i++)
     8a8:	e03ffd15 	stw	zero,-12(fp)
     8ac:	00000806 	br	8d0 <dec2ToHex+0x3c>
        hexadecimalnum[i] = '0';
     8b0:	e0fffd17 	ldw	r3,-12(fp)
     8b4:	d0a6cc04 	addi	r2,gp,-25808
     8b8:	1885883a 	add	r2,r3,r2
     8bc:	00c00c04 	movi	r3,48
     8c0:	10c00005 	stb	r3,0(r2)
{
    int quotient, remainder;
    int i, j = 0;
    static char hexadecimalnum[MAX_HEX_SIZE];

    for(int i = 0; i < MAX_HEX_SIZE; i++)
     8c4:	e0bffd17 	ldw	r2,-12(fp)
     8c8:	10800044 	addi	r2,r2,1
     8cc:	e0bffd15 	stw	r2,-12(fp)
     8d0:	e0bffd17 	ldw	r2,-12(fp)
     8d4:	10800190 	cmplti	r2,r2,6
     8d8:	103ff51e 	bne	r2,zero,8b0 <__alt_data_end+0xfffe14b0>
        hexadecimalnum[i] = '0';

    quotient = decimalnum;
     8dc:	e0bfff17 	ldw	r2,-4(fp)
     8e0:	e0bffb15 	stw	r2,-20(fp)

    while (quotient != 0)
     8e4:	00002506 	br	97c <dec2ToHex+0xe8>
    {
        remainder = quotient % 16;
     8e8:	e0fffb17 	ldw	r3,-20(fp)
     8ec:	00a00034 	movhi	r2,32768
     8f0:	108003c4 	addi	r2,r2,15
     8f4:	1884703a 	and	r2,r3,r2
     8f8:	1000040e 	bge	r2,zero,90c <dec2ToHex+0x78>
     8fc:	10bfffc4 	addi	r2,r2,-1
     900:	00fffc04 	movi	r3,-16
     904:	10c4b03a 	or	r2,r2,r3
     908:	10800044 	addi	r2,r2,1
     90c:	e0bffe15 	stw	r2,-8(fp)
        if (remainder < 10)
     910:	e0bffe17 	ldw	r2,-8(fp)
     914:	10800288 	cmpgei	r2,r2,10
     918:	10000a1e 	bne	r2,zero,944 <dec2ToHex+0xb0>
            hexadecimalnum[j++] = 48 + remainder;
     91c:	e0bffc17 	ldw	r2,-16(fp)
     920:	10c00044 	addi	r3,r2,1
     924:	e0fffc15 	stw	r3,-16(fp)
     928:	e0fffe17 	ldw	r3,-8(fp)
     92c:	18c00c04 	addi	r3,r3,48
     930:	1809883a 	mov	r4,r3
     934:	d0e6cc04 	addi	r3,gp,-25808
     938:	10c5883a 	add	r2,r2,r3
     93c:	11000005 	stb	r4,0(r2)
     940:	00000906 	br	968 <dec2ToHex+0xd4>
        else
            hexadecimalnum[j++] = 55 + remainder;
     944:	e0bffc17 	ldw	r2,-16(fp)
     948:	10c00044 	addi	r3,r2,1
     94c:	e0fffc15 	stw	r3,-16(fp)
     950:	e0fffe17 	ldw	r3,-8(fp)
     954:	18c00dc4 	addi	r3,r3,55
     958:	1809883a 	mov	r4,r3
     95c:	d0e6cc04 	addi	r3,gp,-25808
     960:	10c5883a 	add	r2,r2,r3
     964:	11000005 	stb	r4,0(r2)
        quotient = quotient / 16;
     968:	e0bffb17 	ldw	r2,-20(fp)
     96c:	1000010e 	bge	r2,zero,974 <dec2ToHex+0xe0>
     970:	108003c4 	addi	r2,r2,15
     974:	1005d13a 	srai	r2,r2,4
     978:	e0bffb15 	stw	r2,-20(fp)
    for(int i = 0; i < MAX_HEX_SIZE; i++)
        hexadecimalnum[i] = '0';

    quotient = decimalnum;

    while (quotient != 0)
     97c:	e0bffb17 	ldw	r2,-20(fp)
     980:	103fd91e 	bne	r2,zero,8e8 <__alt_data_end+0xfffe14e8>
            hexadecimalnum[j++] = 48 + remainder;
        else
            hexadecimalnum[j++] = 55 + remainder;
        quotient = quotient / 16;
    }
    return hexadecimalnum;
     984:	d0a6cc04 	addi	r2,gp,-25808
}
     988:	e037883a 	mov	sp,fp
     98c:	df000017 	ldw	fp,0(sp)
     990:	dec00104 	addi	sp,sp,4
     994:	f800283a 	ret

00000998 <main>:


int main()
{
     998:	defffe04 	addi	sp,sp,-8
     99c:	dfc00115 	stw	ra,4(sp)
     9a0:	df000015 	stw	fp,0(sp)
     9a4:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(HEX0_3_BASE,0);
     9a8:	0007883a 	mov	r3,zero
     9ac:	008000b4 	movhi	r2,2
     9b0:	10840c04 	addi	r2,r2,4144
     9b4:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HEX4_5_BASE,0);
     9b8:	0007883a 	mov	r3,zero
     9bc:	008000b4 	movhi	r2,2
     9c0:	10840804 	addi	r2,r2,4128
     9c4:	10c00035 	stwio	r3,0(r2)
  init_interrupt();
     9c8:	00004880 	call	488 <init_interrupt>

  while(1);
     9cc:	003fff06 	br	9cc <__alt_data_end+0xfffe15cc>

000009d0 <_printf_r>:
     9d0:	defffd04 	addi	sp,sp,-12
     9d4:	2805883a 	mov	r2,r5
     9d8:	dfc00015 	stw	ra,0(sp)
     9dc:	d9800115 	stw	r6,4(sp)
     9e0:	d9c00215 	stw	r7,8(sp)
     9e4:	21400217 	ldw	r5,8(r4)
     9e8:	d9c00104 	addi	r7,sp,4
     9ec:	100d883a 	mov	r6,r2
     9f0:	0000af40 	call	af4 <___vfprintf_internal_r>
     9f4:	dfc00017 	ldw	ra,0(sp)
     9f8:	dec00304 	addi	sp,sp,12
     9fc:	f800283a 	ret

00000a00 <printf>:
     a00:	defffc04 	addi	sp,sp,-16
     a04:	dfc00015 	stw	ra,0(sp)
     a08:	d9400115 	stw	r5,4(sp)
     a0c:	d9800215 	stw	r6,8(sp)
     a10:	d9c00315 	stw	r7,12(sp)
     a14:	00800074 	movhi	r2,1
     a18:	10878604 	addi	r2,r2,7704
     a1c:	10800017 	ldw	r2,0(r2)
     a20:	200b883a 	mov	r5,r4
     a24:	d9800104 	addi	r6,sp,4
     a28:	11000217 	ldw	r4,8(r2)
     a2c:	0002dd00 	call	2dd0 <__vfprintf_internal>
     a30:	dfc00017 	ldw	ra,0(sp)
     a34:	dec00404 	addi	sp,sp,16
     a38:	f800283a 	ret

00000a3c <strncat>:
     a3c:	20c000cc 	andi	r3,r4,3
     a40:	2005883a 	mov	r2,r4
     a44:	1800271e 	bne	r3,zero,ae4 <strncat+0xa8>
     a48:	21000017 	ldw	r4,0(r4)
     a4c:	02bfbff4 	movhi	r10,65279
     a50:	52bfbfc4 	addi	r10,r10,-257
     a54:	0106303a 	nor	r3,zero,r4
     a58:	02602074 	movhi	r9,32897
     a5c:	2289883a 	add	r4,r4,r10
     a60:	20c8703a 	and	r4,r4,r3
     a64:	4a602004 	addi	r9,r9,-32640
     a68:	2248703a 	and	r4,r4,r9
     a6c:	1007883a 	mov	r3,r2
     a70:	2000071e 	bne	r4,zero,a90 <strncat+0x54>
     a74:	18c00104 	addi	r3,r3,4
     a78:	19c00017 	ldw	r7,0(r3)
     a7c:	3a91883a 	add	r8,r7,r10
     a80:	01ce303a 	nor	r7,zero,r7
     a84:	41ce703a 	and	r7,r8,r7
     a88:	3a4e703a 	and	r7,r7,r9
     a8c:	383ff926 	beq	r7,zero,a74 <__alt_data_end+0xfffe1674>
     a90:	19000007 	ldb	r4,0(r3)
     a94:	20000326 	beq	r4,zero,aa4 <strncat+0x68>
     a98:	18c00044 	addi	r3,r3,1
     a9c:	19c00007 	ldb	r7,0(r3)
     aa0:	383ffd1e 	bne	r7,zero,a98 <__alt_data_end+0xfffe1698>
     aa4:	1811883a 	mov	r8,r3
     aa8:	1993883a 	add	r9,r3,r6
     aac:	00000a06 	br	ad8 <strncat+0x9c>
     ab0:	29c00003 	ldbu	r7,0(r5)
     ab4:	18c00044 	addi	r3,r3,1
     ab8:	29400044 	addi	r5,r5,1
     abc:	41c00005 	stb	r7,0(r8)
     ac0:	39c03fcc 	andi	r7,r7,255
     ac4:	39c0201c 	xori	r7,r7,128
     ac8:	39ffe004 	addi	r7,r7,-128
     acc:	38000426 	beq	r7,zero,ae0 <strncat+0xa4>
     ad0:	30000626 	beq	r6,zero,aec <strncat+0xb0>
     ad4:	42000044 	addi	r8,r8,1
     ad8:	31bfffc4 	addi	r6,r6,-1
     adc:	1a7ff41e 	bne	r3,r9,ab0 <__alt_data_end+0xfffe16b0>
     ae0:	f800283a 	ret
     ae4:	2007883a 	mov	r3,r4
     ae8:	003fe906 	br	a90 <__alt_data_end+0xfffe1690>
     aec:	18000005 	stb	zero,0(r3)
     af0:	003ff806 	br	ad4 <__alt_data_end+0xfffe16d4>

00000af4 <___vfprintf_internal_r>:
     af4:	deffb804 	addi	sp,sp,-288
     af8:	dfc04715 	stw	ra,284(sp)
     afc:	ddc04515 	stw	r23,276(sp)
     b00:	dd404315 	stw	r21,268(sp)
     b04:	d9002d15 	stw	r4,180(sp)
     b08:	282f883a 	mov	r23,r5
     b0c:	302b883a 	mov	r21,r6
     b10:	d9c02e15 	stw	r7,184(sp)
     b14:	df004615 	stw	fp,280(sp)
     b18:	dd804415 	stw	r22,272(sp)
     b1c:	dd004215 	stw	r20,264(sp)
     b20:	dcc04115 	stw	r19,260(sp)
     b24:	dc804015 	stw	r18,256(sp)
     b28:	dc403f15 	stw	r17,252(sp)
     b2c:	dc003e15 	stw	r16,248(sp)
     b30:	000556c0 	call	556c <_localeconv_r>
     b34:	10800017 	ldw	r2,0(r2)
     b38:	1009883a 	mov	r4,r2
     b3c:	d8803415 	stw	r2,208(sp)
     b40:	00076500 	call	7650 <strlen>
     b44:	d8803715 	stw	r2,220(sp)
     b48:	d8802d17 	ldw	r2,180(sp)
     b4c:	10000226 	beq	r2,zero,b58 <___vfprintf_internal_r+0x64>
     b50:	10800e17 	ldw	r2,56(r2)
     b54:	1000fb26 	beq	r2,zero,f44 <___vfprintf_internal_r+0x450>
     b58:	b880030b 	ldhu	r2,12(r23)
     b5c:	10c8000c 	andi	r3,r2,8192
     b60:	1800061e 	bne	r3,zero,b7c <___vfprintf_internal_r+0x88>
     b64:	b9001917 	ldw	r4,100(r23)
     b68:	00f7ffc4 	movi	r3,-8193
     b6c:	10880014 	ori	r2,r2,8192
     b70:	20c6703a 	and	r3,r4,r3
     b74:	b880030d 	sth	r2,12(r23)
     b78:	b8c01915 	stw	r3,100(r23)
     b7c:	10c0020c 	andi	r3,r2,8
     b80:	1800c326 	beq	r3,zero,e90 <___vfprintf_internal_r+0x39c>
     b84:	b8c00417 	ldw	r3,16(r23)
     b88:	1800c126 	beq	r3,zero,e90 <___vfprintf_internal_r+0x39c>
     b8c:	1080068c 	andi	r2,r2,26
     b90:	00c00284 	movi	r3,10
     b94:	10c0c626 	beq	r2,r3,eb0 <___vfprintf_internal_r+0x3bc>
     b98:	d8c00404 	addi	r3,sp,16
     b9c:	05000074 	movhi	r20,1
     ba0:	d9001e04 	addi	r4,sp,120
     ba4:	a5002b84 	addi	r20,r20,174
     ba8:	d8c01e15 	stw	r3,120(sp)
     bac:	d8002015 	stw	zero,128(sp)
     bb0:	d8001f15 	stw	zero,124(sp)
     bb4:	d8003315 	stw	zero,204(sp)
     bb8:	d8003615 	stw	zero,216(sp)
     bbc:	d8003815 	stw	zero,224(sp)
     bc0:	1811883a 	mov	r8,r3
     bc4:	d8003915 	stw	zero,228(sp)
     bc8:	d8003a15 	stw	zero,232(sp)
     bcc:	d8002f15 	stw	zero,188(sp)
     bd0:	d9002815 	stw	r4,160(sp)
     bd4:	a8800007 	ldb	r2,0(r21)
     bd8:	10028b26 	beq	r2,zero,1608 <___vfprintf_internal_r+0xb14>
     bdc:	00c00944 	movi	r3,37
     be0:	a823883a 	mov	r17,r21
     be4:	10c0021e 	bne	r2,r3,bf0 <___vfprintf_internal_r+0xfc>
     be8:	00001406 	br	c3c <___vfprintf_internal_r+0x148>
     bec:	10c00326 	beq	r2,r3,bfc <___vfprintf_internal_r+0x108>
     bf0:	8c400044 	addi	r17,r17,1
     bf4:	88800007 	ldb	r2,0(r17)
     bf8:	103ffc1e 	bne	r2,zero,bec <__alt_data_end+0xfffe17ec>
     bfc:	8d61c83a 	sub	r16,r17,r21
     c00:	80000e26 	beq	r16,zero,c3c <___vfprintf_internal_r+0x148>
     c04:	d8c02017 	ldw	r3,128(sp)
     c08:	d8801f17 	ldw	r2,124(sp)
     c0c:	45400015 	stw	r21,0(r8)
     c10:	1c07883a 	add	r3,r3,r16
     c14:	10800044 	addi	r2,r2,1
     c18:	d8c02015 	stw	r3,128(sp)
     c1c:	44000115 	stw	r16,4(r8)
     c20:	d8801f15 	stw	r2,124(sp)
     c24:	00c001c4 	movi	r3,7
     c28:	1880a916 	blt	r3,r2,ed0 <___vfprintf_internal_r+0x3dc>
     c2c:	42000204 	addi	r8,r8,8
     c30:	d9402f17 	ldw	r5,188(sp)
     c34:	2c0b883a 	add	r5,r5,r16
     c38:	d9402f15 	stw	r5,188(sp)
     c3c:	88800007 	ldb	r2,0(r17)
     c40:	1000aa26 	beq	r2,zero,eec <___vfprintf_internal_r+0x3f8>
     c44:	8d400044 	addi	r21,r17,1
     c48:	8c400047 	ldb	r17,1(r17)
     c4c:	0021883a 	mov	r16,zero
     c50:	00bfffc4 	movi	r2,-1
     c54:	0025883a 	mov	r18,zero
     c58:	dc002905 	stb	r16,164(sp)
     c5c:	d8002785 	stb	zero,158(sp)
     c60:	d8002b05 	stb	zero,172(sp)
     c64:	d8802a15 	stw	r2,168(sp)
     c68:	d8003115 	stw	zero,196(sp)
     c6c:	04c01604 	movi	r19,88
     c70:	05800244 	movi	r22,9
     c74:	9021883a 	mov	r16,r18
     c78:	4039883a 	mov	fp,r8
     c7c:	ad400044 	addi	r21,r21,1
     c80:	88bff804 	addi	r2,r17,-32
     c84:	98833236 	bltu	r19,r2,1950 <___vfprintf_internal_r+0xe5c>
     c88:	100490ba 	slli	r2,r2,2
     c8c:	00c00034 	movhi	r3,0
     c90:	18c32804 	addi	r3,r3,3232
     c94:	10c5883a 	add	r2,r2,r3
     c98:	10800017 	ldw	r2,0(r2)
     c9c:	1000683a 	jmp	r2
     ca0:	00001848 	cmpgei	zero,zero,97
     ca4:	00001950 	cmplti	zero,zero,101
     ca8:	00001950 	cmplti	zero,zero,101
     cac:	00001868 	cmpgeui	zero,zero,97
     cb0:	00001950 	cmplti	zero,zero,101
     cb4:	00001950 	cmplti	zero,zero,101
     cb8:	00001950 	cmplti	zero,zero,101
     cbc:	00001950 	cmplti	zero,zero,101
     cc0:	00001950 	cmplti	zero,zero,101
     cc4:	00001950 	cmplti	zero,zero,101
     cc8:	00000f50 	cmplti	zero,zero,61
     ccc:	00001758 	cmpnei	zero,zero,93
     cd0:	00001950 	cmplti	zero,zero,101
     cd4:	00000e14 	movui	zero,56
     cd8:	00000f74 	movhi	zero,61
     cdc:	00001950 	cmplti	zero,zero,101
     ce0:	00000fc4 	movi	zero,63
     ce4:	00000fd0 	cmplti	zero,zero,63
     ce8:	00000fd0 	cmplti	zero,zero,63
     cec:	00000fd0 	cmplti	zero,zero,63
     cf0:	00000fd0 	cmplti	zero,zero,63
     cf4:	00000fd0 	cmplti	zero,zero,63
     cf8:	00000fd0 	cmplti	zero,zero,63
     cfc:	00000fd0 	cmplti	zero,zero,63
     d00:	00000fd0 	cmplti	zero,zero,63
     d04:	00000fd0 	cmplti	zero,zero,63
     d08:	00001950 	cmplti	zero,zero,101
     d0c:	00001950 	cmplti	zero,zero,101
     d10:	00001950 	cmplti	zero,zero,101
     d14:	00001950 	cmplti	zero,zero,101
     d18:	00001950 	cmplti	zero,zero,101
     d1c:	00001950 	cmplti	zero,zero,101
     d20:	00001950 	cmplti	zero,zero,101
     d24:	00001950 	cmplti	zero,zero,101
     d28:	00001950 	cmplti	zero,zero,101
     d2c:	00001950 	cmplti	zero,zero,101
     d30:	0000100c 	andi	zero,zero,64
     d34:	000010d4 	movui	zero,67
     d38:	00001950 	cmplti	zero,zero,101
     d3c:	000010d4 	movui	zero,67
     d40:	00001950 	cmplti	zero,zero,101
     d44:	00001950 	cmplti	zero,zero,101
     d48:	00001950 	cmplti	zero,zero,101
     d4c:	00001950 	cmplti	zero,zero,101
     d50:	00001180 	call	118 <alt_irq_handler+0x2c>
     d54:	00001950 	cmplti	zero,zero,101
     d58:	00001950 	cmplti	zero,zero,101
     d5c:	0000118c 	andi	zero,zero,70
     d60:	00001950 	cmplti	zero,zero,101
     d64:	00001950 	cmplti	zero,zero,101
     d68:	00001950 	cmplti	zero,zero,101
     d6c:	00001950 	cmplti	zero,zero,101
     d70:	00001950 	cmplti	zero,zero,101
     d74:	00001610 	cmplti	zero,zero,88
     d78:	00001950 	cmplti	zero,zero,101
     d7c:	00001950 	cmplti	zero,zero,101
     d80:	0000167c 	xorhi	zero,zero,89
     d84:	00001950 	cmplti	zero,zero,101
     d88:	00001950 	cmplti	zero,zero,101
     d8c:	00001950 	cmplti	zero,zero,101
     d90:	00001950 	cmplti	zero,zero,101
     d94:	00001950 	cmplti	zero,zero,101
     d98:	00001950 	cmplti	zero,zero,101
     d9c:	00001950 	cmplti	zero,zero,101
     da0:	00001950 	cmplti	zero,zero,101
     da4:	00001950 	cmplti	zero,zero,101
     da8:	00001950 	cmplti	zero,zero,101
     dac:	000018f4 	movhi	zero,99
     db0:	00001874 	movhi	zero,97
     db4:	000010d4 	movui	zero,67
     db8:	000010d4 	movui	zero,67
     dbc:	000010d4 	movui	zero,67
     dc0:	00001894 	movui	zero,98
     dc4:	00001874 	movhi	zero,97
     dc8:	00001950 	cmplti	zero,zero,101
     dcc:	00001950 	cmplti	zero,zero,101
     dd0:	000018a0 	cmpeqi	zero,zero,98
     dd4:	00001950 	cmplti	zero,zero,101
     dd8:	000018b4 	movhi	zero,98
     ddc:	00001738 	rdprs	zero,zero,92
     de0:	00000e20 	cmpeqi	zero,zero,56
     de4:	00001770 	cmpltui	zero,zero,93
     de8:	00001950 	cmplti	zero,zero,101
     dec:	0000177c 	xorhi	zero,zero,93
     df0:	00001950 	cmplti	zero,zero,101
     df4:	000017e0 	cmpeqi	zero,zero,95
     df8:	00001950 	cmplti	zero,zero,101
     dfc:	00001950 	cmplti	zero,zero,101
     e00:	00001800 	call	180 <alt_irq_handler+0x94>
     e04:	d8c03117 	ldw	r3,196(sp)
     e08:	d8802e15 	stw	r2,184(sp)
     e0c:	00c7c83a 	sub	r3,zero,r3
     e10:	d8c03115 	stw	r3,196(sp)
     e14:	84000114 	ori	r16,r16,4
     e18:	ac400007 	ldb	r17,0(r21)
     e1c:	003f9706 	br	c7c <__alt_data_end+0xfffe187c>
     e20:	00800c04 	movi	r2,48
     e24:	d8802705 	stb	r2,156(sp)
     e28:	00801e04 	movi	r2,120
     e2c:	d8802745 	stb	r2,157(sp)
     e30:	d9002a17 	ldw	r4,168(sp)
     e34:	d8802e17 	ldw	r2,184(sp)
     e38:	d8002785 	stb	zero,158(sp)
     e3c:	e011883a 	mov	r8,fp
     e40:	10c00104 	addi	r3,r2,4
     e44:	14c00017 	ldw	r19,0(r2)
     e48:	002d883a 	mov	r22,zero
     e4c:	80800094 	ori	r2,r16,2
     e50:	2002ca16 	blt	r4,zero,197c <___vfprintf_internal_r+0xe88>
     e54:	00bfdfc4 	movi	r2,-129
     e58:	80a4703a 	and	r18,r16,r2
     e5c:	d8c02e15 	stw	r3,184(sp)
     e60:	94800094 	ori	r18,r18,2
     e64:	9802b41e 	bne	r19,zero,1938 <___vfprintf_internal_r+0xe44>
     e68:	01400074 	movhi	r5,1
     e6c:	29402404 	addi	r5,r5,144
     e70:	d9403915 	stw	r5,228(sp)
     e74:	04401e04 	movi	r17,120
     e78:	d8802a17 	ldw	r2,168(sp)
     e7c:	0039883a 	mov	fp,zero
     e80:	1001fa26 	beq	r2,zero,166c <___vfprintf_internal_r+0xb78>
     e84:	0027883a 	mov	r19,zero
     e88:	002d883a 	mov	r22,zero
     e8c:	00021906 	br	16f4 <___vfprintf_internal_r+0xc00>
     e90:	d9002d17 	ldw	r4,180(sp)
     e94:	b80b883a 	mov	r5,r23
     e98:	0002ea80 	call	2ea8 <__swsetup_r>
     e9c:	1005dc1e 	bne	r2,zero,2610 <___vfprintf_internal_r+0x1b1c>
     ea0:	b880030b 	ldhu	r2,12(r23)
     ea4:	00c00284 	movi	r3,10
     ea8:	1080068c 	andi	r2,r2,26
     eac:	10ff3a1e 	bne	r2,r3,b98 <__alt_data_end+0xfffe1798>
     eb0:	b880038f 	ldh	r2,14(r23)
     eb4:	103f3816 	blt	r2,zero,b98 <__alt_data_end+0xfffe1798>
     eb8:	d9c02e17 	ldw	r7,184(sp)
     ebc:	d9002d17 	ldw	r4,180(sp)
     ec0:	a80d883a 	mov	r6,r21
     ec4:	b80b883a 	mov	r5,r23
     ec8:	0002dec0 	call	2dec <__sbprintf>
     ecc:	00001106 	br	f14 <___vfprintf_internal_r+0x420>
     ed0:	d9002d17 	ldw	r4,180(sp)
     ed4:	d9801e04 	addi	r6,sp,120
     ed8:	b80b883a 	mov	r5,r23
     edc:	00077e40 	call	77e4 <__sprint_r>
     ee0:	1000081e 	bne	r2,zero,f04 <___vfprintf_internal_r+0x410>
     ee4:	da000404 	addi	r8,sp,16
     ee8:	003f5106 	br	c30 <__alt_data_end+0xfffe1830>
     eec:	d8802017 	ldw	r2,128(sp)
     ef0:	10000426 	beq	r2,zero,f04 <___vfprintf_internal_r+0x410>
     ef4:	d9002d17 	ldw	r4,180(sp)
     ef8:	d9801e04 	addi	r6,sp,120
     efc:	b80b883a 	mov	r5,r23
     f00:	00077e40 	call	77e4 <__sprint_r>
     f04:	b880030b 	ldhu	r2,12(r23)
     f08:	1080100c 	andi	r2,r2,64
     f0c:	1005c01e 	bne	r2,zero,2610 <___vfprintf_internal_r+0x1b1c>
     f10:	d8802f17 	ldw	r2,188(sp)
     f14:	dfc04717 	ldw	ra,284(sp)
     f18:	df004617 	ldw	fp,280(sp)
     f1c:	ddc04517 	ldw	r23,276(sp)
     f20:	dd804417 	ldw	r22,272(sp)
     f24:	dd404317 	ldw	r21,268(sp)
     f28:	dd004217 	ldw	r20,264(sp)
     f2c:	dcc04117 	ldw	r19,260(sp)
     f30:	dc804017 	ldw	r18,256(sp)
     f34:	dc403f17 	ldw	r17,252(sp)
     f38:	dc003e17 	ldw	r16,248(sp)
     f3c:	dec04804 	addi	sp,sp,288
     f40:	f800283a 	ret
     f44:	d9002d17 	ldw	r4,180(sp)
     f48:	0004eb40 	call	4eb4 <__sinit>
     f4c:	003f0206 	br	b58 <__alt_data_end+0xfffe1758>
     f50:	d9002e17 	ldw	r4,184(sp)
     f54:	d9402e17 	ldw	r5,184(sp)
     f58:	21000017 	ldw	r4,0(r4)
     f5c:	28800104 	addi	r2,r5,4
     f60:	d9003115 	stw	r4,196(sp)
     f64:	203fa716 	blt	r4,zero,e04 <__alt_data_end+0xfffe1a04>
     f68:	d8802e15 	stw	r2,184(sp)
     f6c:	ac400007 	ldb	r17,0(r21)
     f70:	003f4206 	br	c7c <__alt_data_end+0xfffe187c>
     f74:	ac400007 	ldb	r17,0(r21)
     f78:	01000a84 	movi	r4,42
     f7c:	a8c00044 	addi	r3,r21,1
     f80:	89075826 	beq	r17,r4,2ce4 <___vfprintf_internal_r+0x21f0>
     f84:	8cbff404 	addi	r18,r17,-48
     f88:	b486ae36 	bltu	r22,r18,2a44 <___vfprintf_internal_r+0x1f50>
     f8c:	0009883a 	mov	r4,zero
     f90:	1823883a 	mov	r17,r3
     f94:	01400284 	movi	r5,10
     f98:	000b0280 	call	b028 <__mulsi3>
     f9c:	88c00007 	ldb	r3,0(r17)
     fa0:	1489883a 	add	r4,r2,r18
     fa4:	8d400044 	addi	r21,r17,1
     fa8:	1cbff404 	addi	r18,r3,-48
     fac:	a823883a 	mov	r17,r21
     fb0:	b4bff82e 	bgeu	r22,r18,f94 <__alt_data_end+0xfffe1b94>
     fb4:	1823883a 	mov	r17,r3
     fb8:	2005f616 	blt	r4,zero,2794 <___vfprintf_internal_r+0x1ca0>
     fbc:	d9002a15 	stw	r4,168(sp)
     fc0:	003f2f06 	br	c80 <__alt_data_end+0xfffe1880>
     fc4:	84002014 	ori	r16,r16,128
     fc8:	ac400007 	ldb	r17,0(r21)
     fcc:	003f2b06 	br	c7c <__alt_data_end+0xfffe187c>
     fd0:	8cbff404 	addi	r18,r17,-48
     fd4:	d8003115 	stw	zero,196(sp)
     fd8:	0009883a 	mov	r4,zero
     fdc:	a823883a 	mov	r17,r21
     fe0:	01400284 	movi	r5,10
     fe4:	000b0280 	call	b028 <__mulsi3>
     fe8:	88c00007 	ldb	r3,0(r17)
     fec:	9089883a 	add	r4,r18,r2
     ff0:	ad400044 	addi	r21,r21,1
     ff4:	1cbff404 	addi	r18,r3,-48
     ff8:	a823883a 	mov	r17,r21
     ffc:	b4bff82e 	bgeu	r22,r18,fe0 <__alt_data_end+0xfffe1be0>
    1000:	1823883a 	mov	r17,r3
    1004:	d9003115 	stw	r4,196(sp)
    1008:	003f1d06 	br	c80 <__alt_data_end+0xfffe1880>
    100c:	8025883a 	mov	r18,r16
    1010:	dc002903 	ldbu	r16,164(sp)
    1014:	e011883a 	mov	r8,fp
    1018:	84003fcc 	andi	r16,r16,255
    101c:	8007531e 	bne	r16,zero,2d6c <___vfprintf_internal_r+0x2278>
    1020:	94800414 	ori	r18,r18,16
    1024:	9080080c 	andi	r2,r18,32
    1028:	1003a326 	beq	r2,zero,1eb8 <___vfprintf_internal_r+0x13c4>
    102c:	d9002e17 	ldw	r4,184(sp)
    1030:	20800117 	ldw	r2,4(r4)
    1034:	24c00017 	ldw	r19,0(r4)
    1038:	21000204 	addi	r4,r4,8
    103c:	d9002e15 	stw	r4,184(sp)
    1040:	102d883a 	mov	r22,r2
    1044:	10047316 	blt	r2,zero,2214 <___vfprintf_internal_r+0x1720>
    1048:	d9002a17 	ldw	r4,168(sp)
    104c:	df002783 	ldbu	fp,158(sp)
    1050:	2003e416 	blt	r4,zero,1fe4 <___vfprintf_internal_r+0x14f0>
    1054:	00ffdfc4 	movi	r3,-129
    1058:	9d84b03a 	or	r2,r19,r22
    105c:	90e4703a 	and	r18,r18,r3
    1060:	10018026 	beq	r2,zero,1664 <___vfprintf_internal_r+0xb70>
    1064:	b003ab26 	beq	r22,zero,1f14 <___vfprintf_internal_r+0x1420>
    1068:	dc402915 	stw	r17,164(sp)
    106c:	dc001e04 	addi	r16,sp,120
    1070:	b023883a 	mov	r17,r22
    1074:	402d883a 	mov	r22,r8
    1078:	9809883a 	mov	r4,r19
    107c:	880b883a 	mov	r5,r17
    1080:	01800284 	movi	r6,10
    1084:	000f883a 	mov	r7,zero
    1088:	000a8b00 	call	a8b0 <__umoddi3>
    108c:	10800c04 	addi	r2,r2,48
    1090:	843fffc4 	addi	r16,r16,-1
    1094:	9809883a 	mov	r4,r19
    1098:	880b883a 	mov	r5,r17
    109c:	80800005 	stb	r2,0(r16)
    10a0:	01800284 	movi	r6,10
    10a4:	000f883a 	mov	r7,zero
    10a8:	000a2b40 	call	a2b4 <__udivdi3>
    10ac:	1027883a 	mov	r19,r2
    10b0:	10c4b03a 	or	r2,r2,r3
    10b4:	1823883a 	mov	r17,r3
    10b8:	103fef1e 	bne	r2,zero,1078 <__alt_data_end+0xfffe1c78>
    10bc:	d8c02817 	ldw	r3,160(sp)
    10c0:	dc402917 	ldw	r17,164(sp)
    10c4:	b011883a 	mov	r8,r22
    10c8:	1c07c83a 	sub	r3,r3,r16
    10cc:	d8c02b15 	stw	r3,172(sp)
    10d0:	00005f06 	br	1250 <___vfprintf_internal_r+0x75c>
    10d4:	8025883a 	mov	r18,r16
    10d8:	dc002903 	ldbu	r16,164(sp)
    10dc:	e011883a 	mov	r8,fp
    10e0:	84003fcc 	andi	r16,r16,255
    10e4:	80071e1e 	bne	r16,zero,2d60 <___vfprintf_internal_r+0x226c>
    10e8:	9080020c 	andi	r2,r18,8
    10ec:	1004af26 	beq	r2,zero,23ac <___vfprintf_internal_r+0x18b8>
    10f0:	d9002e17 	ldw	r4,184(sp)
    10f4:	d9402e17 	ldw	r5,184(sp)
    10f8:	d8802e17 	ldw	r2,184(sp)
    10fc:	21000017 	ldw	r4,0(r4)
    1100:	29400117 	ldw	r5,4(r5)
    1104:	10800204 	addi	r2,r2,8
    1108:	d9003615 	stw	r4,216(sp)
    110c:	d9403815 	stw	r5,224(sp)
    1110:	d8802e15 	stw	r2,184(sp)
    1114:	d9003617 	ldw	r4,216(sp)
    1118:	d9403817 	ldw	r5,224(sp)
    111c:	da003d15 	stw	r8,244(sp)
    1120:	04000044 	movi	r16,1
    1124:	00073700 	call	7370 <__fpclassifyd>
    1128:	da003d17 	ldw	r8,244(sp)
    112c:	1404441e 	bne	r2,r16,2240 <___vfprintf_internal_r+0x174c>
    1130:	d9003617 	ldw	r4,216(sp)
    1134:	d9403817 	ldw	r5,224(sp)
    1138:	000d883a 	mov	r6,zero
    113c:	000f883a 	mov	r7,zero
    1140:	000c4300 	call	c430 <__ledf2>
    1144:	da003d17 	ldw	r8,244(sp)
    1148:	1005e316 	blt	r2,zero,28d8 <___vfprintf_internal_r+0x1de4>
    114c:	df002783 	ldbu	fp,158(sp)
    1150:	008011c4 	movi	r2,71
    1154:	1445580e 	bge	r2,r17,26b8 <___vfprintf_internal_r+0x1bc4>
    1158:	04000074 	movhi	r16,1
    115c:	84001c04 	addi	r16,r16,112
    1160:	00c000c4 	movi	r3,3
    1164:	00bfdfc4 	movi	r2,-129
    1168:	d8c02915 	stw	r3,164(sp)
    116c:	90a4703a 	and	r18,r18,r2
    1170:	d8c02b15 	stw	r3,172(sp)
    1174:	d8002a15 	stw	zero,168(sp)
    1178:	d8003215 	stw	zero,200(sp)
    117c:	00003a06 	br	1268 <___vfprintf_internal_r+0x774>
    1180:	84000214 	ori	r16,r16,8
    1184:	ac400007 	ldb	r17,0(r21)
    1188:	003ebc06 	br	c7c <__alt_data_end+0xfffe187c>
    118c:	8025883a 	mov	r18,r16
    1190:	dc002903 	ldbu	r16,164(sp)
    1194:	e011883a 	mov	r8,fp
    1198:	84003fcc 	andi	r16,r16,255
    119c:	8007001e 	bne	r16,zero,2da0 <___vfprintf_internal_r+0x22ac>
    11a0:	94800414 	ori	r18,r18,16
    11a4:	9080080c 	andi	r2,r18,32
    11a8:	1002fa26 	beq	r2,zero,1d94 <___vfprintf_internal_r+0x12a0>
    11ac:	d9002e17 	ldw	r4,184(sp)
    11b0:	d9402a17 	ldw	r5,168(sp)
    11b4:	d8002785 	stb	zero,158(sp)
    11b8:	20800204 	addi	r2,r4,8
    11bc:	24c00017 	ldw	r19,0(r4)
    11c0:	25800117 	ldw	r22,4(r4)
    11c4:	2804b116 	blt	r5,zero,248c <___vfprintf_internal_r+0x1998>
    11c8:	013fdfc4 	movi	r4,-129
    11cc:	9d86b03a 	or	r3,r19,r22
    11d0:	d8802e15 	stw	r2,184(sp)
    11d4:	9124703a 	and	r18,r18,r4
    11d8:	1802fb1e 	bne	r3,zero,1dc8 <___vfprintf_internal_r+0x12d4>
    11dc:	d8c02a17 	ldw	r3,168(sp)
    11e0:	0039883a 	mov	fp,zero
    11e4:	1805e526 	beq	r3,zero,297c <___vfprintf_internal_r+0x1e88>
    11e8:	0027883a 	mov	r19,zero
    11ec:	002d883a 	mov	r22,zero
    11f0:	dc001e04 	addi	r16,sp,120
    11f4:	9806d0fa 	srli	r3,r19,3
    11f8:	b008977a 	slli	r4,r22,29
    11fc:	b02cd0fa 	srli	r22,r22,3
    1200:	9cc001cc 	andi	r19,r19,7
    1204:	98800c04 	addi	r2,r19,48
    1208:	843fffc4 	addi	r16,r16,-1
    120c:	20e6b03a 	or	r19,r4,r3
    1210:	80800005 	stb	r2,0(r16)
    1214:	9d86b03a 	or	r3,r19,r22
    1218:	183ff61e 	bne	r3,zero,11f4 <__alt_data_end+0xfffe1df4>
    121c:	90c0004c 	andi	r3,r18,1
    1220:	18014126 	beq	r3,zero,1728 <___vfprintf_internal_r+0xc34>
    1224:	10803fcc 	andi	r2,r2,255
    1228:	1080201c 	xori	r2,r2,128
    122c:	10bfe004 	addi	r2,r2,-128
    1230:	00c00c04 	movi	r3,48
    1234:	10c13c26 	beq	r2,r3,1728 <___vfprintf_internal_r+0xc34>
    1238:	80ffffc5 	stb	r3,-1(r16)
    123c:	d8c02817 	ldw	r3,160(sp)
    1240:	80bfffc4 	addi	r2,r16,-1
    1244:	1021883a 	mov	r16,r2
    1248:	1887c83a 	sub	r3,r3,r2
    124c:	d8c02b15 	stw	r3,172(sp)
    1250:	d8802b17 	ldw	r2,172(sp)
    1254:	d9002a17 	ldw	r4,168(sp)
    1258:	1100010e 	bge	r2,r4,1260 <___vfprintf_internal_r+0x76c>
    125c:	2005883a 	mov	r2,r4
    1260:	d8802915 	stw	r2,164(sp)
    1264:	d8003215 	stw	zero,200(sp)
    1268:	e7003fcc 	andi	fp,fp,255
    126c:	e700201c 	xori	fp,fp,128
    1270:	e73fe004 	addi	fp,fp,-128
    1274:	e0000326 	beq	fp,zero,1284 <___vfprintf_internal_r+0x790>
    1278:	d8c02917 	ldw	r3,164(sp)
    127c:	18c00044 	addi	r3,r3,1
    1280:	d8c02915 	stw	r3,164(sp)
    1284:	90c0008c 	andi	r3,r18,2
    1288:	d8c02c15 	stw	r3,176(sp)
    128c:	18000326 	beq	r3,zero,129c <___vfprintf_internal_r+0x7a8>
    1290:	d8c02917 	ldw	r3,164(sp)
    1294:	18c00084 	addi	r3,r3,2
    1298:	d8c02915 	stw	r3,164(sp)
    129c:	90c0210c 	andi	r3,r18,132
    12a0:	d8c03015 	stw	r3,192(sp)
    12a4:	1801c51e 	bne	r3,zero,19bc <___vfprintf_internal_r+0xec8>
    12a8:	d9003117 	ldw	r4,196(sp)
    12ac:	d8c02917 	ldw	r3,164(sp)
    12b0:	20e7c83a 	sub	r19,r4,r3
    12b4:	04c1c10e 	bge	zero,r19,19bc <___vfprintf_internal_r+0xec8>
    12b8:	02400404 	movi	r9,16
    12bc:	d8c02017 	ldw	r3,128(sp)
    12c0:	d8801f17 	ldw	r2,124(sp)
    12c4:	4cc52f0e 	bge	r9,r19,2784 <___vfprintf_internal_r+0x1c90>
    12c8:	01400074 	movhi	r5,1
    12cc:	29402f84 	addi	r5,r5,190
    12d0:	dc403b15 	stw	r17,236(sp)
    12d4:	d9403515 	stw	r5,212(sp)
    12d8:	9823883a 	mov	r17,r19
    12dc:	482d883a 	mov	r22,r9
    12e0:	9027883a 	mov	r19,r18
    12e4:	070001c4 	movi	fp,7
    12e8:	8025883a 	mov	r18,r16
    12ec:	dc002d17 	ldw	r16,180(sp)
    12f0:	00000306 	br	1300 <___vfprintf_internal_r+0x80c>
    12f4:	8c7ffc04 	addi	r17,r17,-16
    12f8:	42000204 	addi	r8,r8,8
    12fc:	b440130e 	bge	r22,r17,134c <___vfprintf_internal_r+0x858>
    1300:	01000074 	movhi	r4,1
    1304:	18c00404 	addi	r3,r3,16
    1308:	10800044 	addi	r2,r2,1
    130c:	21002f84 	addi	r4,r4,190
    1310:	41000015 	stw	r4,0(r8)
    1314:	45800115 	stw	r22,4(r8)
    1318:	d8c02015 	stw	r3,128(sp)
    131c:	d8801f15 	stw	r2,124(sp)
    1320:	e0bff40e 	bge	fp,r2,12f4 <__alt_data_end+0xfffe1ef4>
    1324:	d9801e04 	addi	r6,sp,120
    1328:	b80b883a 	mov	r5,r23
    132c:	8009883a 	mov	r4,r16
    1330:	00077e40 	call	77e4 <__sprint_r>
    1334:	103ef31e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1338:	8c7ffc04 	addi	r17,r17,-16
    133c:	d8c02017 	ldw	r3,128(sp)
    1340:	d8801f17 	ldw	r2,124(sp)
    1344:	da000404 	addi	r8,sp,16
    1348:	b47fed16 	blt	r22,r17,1300 <__alt_data_end+0xfffe1f00>
    134c:	9021883a 	mov	r16,r18
    1350:	9825883a 	mov	r18,r19
    1354:	8827883a 	mov	r19,r17
    1358:	dc403b17 	ldw	r17,236(sp)
    135c:	d9403517 	ldw	r5,212(sp)
    1360:	98c7883a 	add	r3,r19,r3
    1364:	10800044 	addi	r2,r2,1
    1368:	41400015 	stw	r5,0(r8)
    136c:	44c00115 	stw	r19,4(r8)
    1370:	d8c02015 	stw	r3,128(sp)
    1374:	d8801f15 	stw	r2,124(sp)
    1378:	010001c4 	movi	r4,7
    137c:	2082c516 	blt	r4,r2,1e94 <___vfprintf_internal_r+0x13a0>
    1380:	df002787 	ldb	fp,158(sp)
    1384:	42000204 	addi	r8,r8,8
    1388:	e0000c26 	beq	fp,zero,13bc <___vfprintf_internal_r+0x8c8>
    138c:	d8801f17 	ldw	r2,124(sp)
    1390:	d9002784 	addi	r4,sp,158
    1394:	18c00044 	addi	r3,r3,1
    1398:	10800044 	addi	r2,r2,1
    139c:	41000015 	stw	r4,0(r8)
    13a0:	01000044 	movi	r4,1
    13a4:	41000115 	stw	r4,4(r8)
    13a8:	d8c02015 	stw	r3,128(sp)
    13ac:	d8801f15 	stw	r2,124(sp)
    13b0:	010001c4 	movi	r4,7
    13b4:	20825e16 	blt	r4,r2,1d30 <___vfprintf_internal_r+0x123c>
    13b8:	42000204 	addi	r8,r8,8
    13bc:	d8802c17 	ldw	r2,176(sp)
    13c0:	10000c26 	beq	r2,zero,13f4 <___vfprintf_internal_r+0x900>
    13c4:	d8801f17 	ldw	r2,124(sp)
    13c8:	d9002704 	addi	r4,sp,156
    13cc:	18c00084 	addi	r3,r3,2
    13d0:	10800044 	addi	r2,r2,1
    13d4:	41000015 	stw	r4,0(r8)
    13d8:	01000084 	movi	r4,2
    13dc:	41000115 	stw	r4,4(r8)
    13e0:	d8c02015 	stw	r3,128(sp)
    13e4:	d8801f15 	stw	r2,124(sp)
    13e8:	010001c4 	movi	r4,7
    13ec:	20825816 	blt	r4,r2,1d50 <___vfprintf_internal_r+0x125c>
    13f0:	42000204 	addi	r8,r8,8
    13f4:	d9003017 	ldw	r4,192(sp)
    13f8:	00802004 	movi	r2,128
    13fc:	2081bb26 	beq	r4,r2,1aec <___vfprintf_internal_r+0xff8>
    1400:	d9402a17 	ldw	r5,168(sp)
    1404:	d8802b17 	ldw	r2,172(sp)
    1408:	28adc83a 	sub	r22,r5,r2
    140c:	0580310e 	bge	zero,r22,14d4 <___vfprintf_internal_r+0x9e0>
    1410:	07000404 	movi	fp,16
    1414:	d8801f17 	ldw	r2,124(sp)
    1418:	e584360e 	bge	fp,r22,24f4 <___vfprintf_internal_r+0x1a00>
    141c:	01400074 	movhi	r5,1
    1420:	29402b84 	addi	r5,r5,174
    1424:	dc402a15 	stw	r17,168(sp)
    1428:	d9402c15 	stw	r5,176(sp)
    142c:	b023883a 	mov	r17,r22
    1430:	04c001c4 	movi	r19,7
    1434:	a82d883a 	mov	r22,r21
    1438:	902b883a 	mov	r21,r18
    143c:	8025883a 	mov	r18,r16
    1440:	dc002d17 	ldw	r16,180(sp)
    1444:	00000306 	br	1454 <___vfprintf_internal_r+0x960>
    1448:	8c7ffc04 	addi	r17,r17,-16
    144c:	42000204 	addi	r8,r8,8
    1450:	e440110e 	bge	fp,r17,1498 <___vfprintf_internal_r+0x9a4>
    1454:	18c00404 	addi	r3,r3,16
    1458:	10800044 	addi	r2,r2,1
    145c:	45000015 	stw	r20,0(r8)
    1460:	47000115 	stw	fp,4(r8)
    1464:	d8c02015 	stw	r3,128(sp)
    1468:	d8801f15 	stw	r2,124(sp)
    146c:	98bff60e 	bge	r19,r2,1448 <__alt_data_end+0xfffe2048>
    1470:	d9801e04 	addi	r6,sp,120
    1474:	b80b883a 	mov	r5,r23
    1478:	8009883a 	mov	r4,r16
    147c:	00077e40 	call	77e4 <__sprint_r>
    1480:	103ea01e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1484:	8c7ffc04 	addi	r17,r17,-16
    1488:	d8c02017 	ldw	r3,128(sp)
    148c:	d8801f17 	ldw	r2,124(sp)
    1490:	da000404 	addi	r8,sp,16
    1494:	e47fef16 	blt	fp,r17,1454 <__alt_data_end+0xfffe2054>
    1498:	9021883a 	mov	r16,r18
    149c:	a825883a 	mov	r18,r21
    14a0:	b02b883a 	mov	r21,r22
    14a4:	882d883a 	mov	r22,r17
    14a8:	dc402a17 	ldw	r17,168(sp)
    14ac:	d9002c17 	ldw	r4,176(sp)
    14b0:	1d87883a 	add	r3,r3,r22
    14b4:	10800044 	addi	r2,r2,1
    14b8:	41000015 	stw	r4,0(r8)
    14bc:	45800115 	stw	r22,4(r8)
    14c0:	d8c02015 	stw	r3,128(sp)
    14c4:	d8801f15 	stw	r2,124(sp)
    14c8:	010001c4 	movi	r4,7
    14cc:	20821016 	blt	r4,r2,1d10 <___vfprintf_internal_r+0x121c>
    14d0:	42000204 	addi	r8,r8,8
    14d4:	9080400c 	andi	r2,r18,256
    14d8:	10013a1e 	bne	r2,zero,19c4 <___vfprintf_internal_r+0xed0>
    14dc:	d9402b17 	ldw	r5,172(sp)
    14e0:	d8801f17 	ldw	r2,124(sp)
    14e4:	44000015 	stw	r16,0(r8)
    14e8:	1947883a 	add	r3,r3,r5
    14ec:	10800044 	addi	r2,r2,1
    14f0:	41400115 	stw	r5,4(r8)
    14f4:	d8c02015 	stw	r3,128(sp)
    14f8:	d8801f15 	stw	r2,124(sp)
    14fc:	010001c4 	movi	r4,7
    1500:	2081f516 	blt	r4,r2,1cd8 <___vfprintf_internal_r+0x11e4>
    1504:	42000204 	addi	r8,r8,8
    1508:	9480010c 	andi	r18,r18,4
    150c:	90003226 	beq	r18,zero,15d8 <___vfprintf_internal_r+0xae4>
    1510:	d9403117 	ldw	r5,196(sp)
    1514:	d8802917 	ldw	r2,164(sp)
    1518:	28a1c83a 	sub	r16,r5,r2
    151c:	04002e0e 	bge	zero,r16,15d8 <___vfprintf_internal_r+0xae4>
    1520:	04400404 	movi	r17,16
    1524:	d8801f17 	ldw	r2,124(sp)
    1528:	8c04c40e 	bge	r17,r16,283c <___vfprintf_internal_r+0x1d48>
    152c:	01400074 	movhi	r5,1
    1530:	29402f84 	addi	r5,r5,190
    1534:	d9403515 	stw	r5,212(sp)
    1538:	048001c4 	movi	r18,7
    153c:	dcc02d17 	ldw	r19,180(sp)
    1540:	00000306 	br	1550 <___vfprintf_internal_r+0xa5c>
    1544:	843ffc04 	addi	r16,r16,-16
    1548:	42000204 	addi	r8,r8,8
    154c:	8c00130e 	bge	r17,r16,159c <___vfprintf_internal_r+0xaa8>
    1550:	01000074 	movhi	r4,1
    1554:	18c00404 	addi	r3,r3,16
    1558:	10800044 	addi	r2,r2,1
    155c:	21002f84 	addi	r4,r4,190
    1560:	41000015 	stw	r4,0(r8)
    1564:	44400115 	stw	r17,4(r8)
    1568:	d8c02015 	stw	r3,128(sp)
    156c:	d8801f15 	stw	r2,124(sp)
    1570:	90bff40e 	bge	r18,r2,1544 <__alt_data_end+0xfffe2144>
    1574:	d9801e04 	addi	r6,sp,120
    1578:	b80b883a 	mov	r5,r23
    157c:	9809883a 	mov	r4,r19
    1580:	00077e40 	call	77e4 <__sprint_r>
    1584:	103e5f1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1588:	843ffc04 	addi	r16,r16,-16
    158c:	d8c02017 	ldw	r3,128(sp)
    1590:	d8801f17 	ldw	r2,124(sp)
    1594:	da000404 	addi	r8,sp,16
    1598:	8c3fed16 	blt	r17,r16,1550 <__alt_data_end+0xfffe2150>
    159c:	d9403517 	ldw	r5,212(sp)
    15a0:	1c07883a 	add	r3,r3,r16
    15a4:	10800044 	addi	r2,r2,1
    15a8:	41400015 	stw	r5,0(r8)
    15ac:	44000115 	stw	r16,4(r8)
    15b0:	d8c02015 	stw	r3,128(sp)
    15b4:	d8801f15 	stw	r2,124(sp)
    15b8:	010001c4 	movi	r4,7
    15bc:	2080060e 	bge	r4,r2,15d8 <___vfprintf_internal_r+0xae4>
    15c0:	d9002d17 	ldw	r4,180(sp)
    15c4:	d9801e04 	addi	r6,sp,120
    15c8:	b80b883a 	mov	r5,r23
    15cc:	00077e40 	call	77e4 <__sprint_r>
    15d0:	103e4c1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    15d4:	d8c02017 	ldw	r3,128(sp)
    15d8:	d8803117 	ldw	r2,196(sp)
    15dc:	d9002917 	ldw	r4,164(sp)
    15e0:	1100010e 	bge	r2,r4,15e8 <___vfprintf_internal_r+0xaf4>
    15e4:	2005883a 	mov	r2,r4
    15e8:	d9402f17 	ldw	r5,188(sp)
    15ec:	288b883a 	add	r5,r5,r2
    15f0:	d9402f15 	stw	r5,188(sp)
    15f4:	1801c01e 	bne	r3,zero,1cf8 <___vfprintf_internal_r+0x1204>
    15f8:	a8800007 	ldb	r2,0(r21)
    15fc:	d8001f15 	stw	zero,124(sp)
    1600:	da000404 	addi	r8,sp,16
    1604:	103d751e 	bne	r2,zero,bdc <__alt_data_end+0xfffe17dc>
    1608:	a823883a 	mov	r17,r21
    160c:	003d8b06 	br	c3c <__alt_data_end+0xfffe183c>
    1610:	8025883a 	mov	r18,r16
    1614:	dc002903 	ldbu	r16,164(sp)
    1618:	e011883a 	mov	r8,fp
    161c:	84003fcc 	andi	r16,r16,255
    1620:	8005e51e 	bne	r16,zero,2db8 <___vfprintf_internal_r+0x22c4>
    1624:	94800414 	ori	r18,r18,16
    1628:	9080080c 	andi	r2,r18,32
    162c:	10022b26 	beq	r2,zero,1edc <___vfprintf_internal_r+0x13e8>
    1630:	d9002e17 	ldw	r4,184(sp)
    1634:	d9402a17 	ldw	r5,168(sp)
    1638:	d8002785 	stb	zero,158(sp)
    163c:	20c00204 	addi	r3,r4,8
    1640:	24c00017 	ldw	r19,0(r4)
    1644:	25800117 	ldw	r22,4(r4)
    1648:	28042e16 	blt	r5,zero,2704 <___vfprintf_internal_r+0x1c10>
    164c:	013fdfc4 	movi	r4,-129
    1650:	9d84b03a 	or	r2,r19,r22
    1654:	d8c02e15 	stw	r3,184(sp)
    1658:	9124703a 	and	r18,r18,r4
    165c:	0039883a 	mov	fp,zero
    1660:	103e801e 	bne	r2,zero,1064 <__alt_data_end+0xfffe1c64>
    1664:	d9002a17 	ldw	r4,168(sp)
    1668:	2002e01e 	bne	r4,zero,21ec <___vfprintf_internal_r+0x16f8>
    166c:	d8002a15 	stw	zero,168(sp)
    1670:	d8002b15 	stw	zero,172(sp)
    1674:	dc001e04 	addi	r16,sp,120
    1678:	003ef506 	br	1250 <__alt_data_end+0xfffe1e50>
    167c:	8025883a 	mov	r18,r16
    1680:	dc002903 	ldbu	r16,164(sp)
    1684:	e011883a 	mov	r8,fp
    1688:	84003fcc 	andi	r16,r16,255
    168c:	8005ba1e 	bne	r16,zero,2d78 <___vfprintf_internal_r+0x2284>
    1690:	01000074 	movhi	r4,1
    1694:	21001f04 	addi	r4,r4,124
    1698:	d9003915 	stw	r4,228(sp)
    169c:	9080080c 	andi	r2,r18,32
    16a0:	10006126 	beq	r2,zero,1828 <___vfprintf_internal_r+0xd34>
    16a4:	d9402e17 	ldw	r5,184(sp)
    16a8:	2cc00017 	ldw	r19,0(r5)
    16ac:	2d800117 	ldw	r22,4(r5)
    16b0:	29400204 	addi	r5,r5,8
    16b4:	d9402e15 	stw	r5,184(sp)
    16b8:	9080004c 	andi	r2,r18,1
    16bc:	1001ac26 	beq	r2,zero,1d70 <___vfprintf_internal_r+0x127c>
    16c0:	9d84b03a 	or	r2,r19,r22
    16c4:	10038526 	beq	r2,zero,24dc <___vfprintf_internal_r+0x19e8>
    16c8:	d8c02a17 	ldw	r3,168(sp)
    16cc:	00800c04 	movi	r2,48
    16d0:	d8802705 	stb	r2,156(sp)
    16d4:	dc402745 	stb	r17,157(sp)
    16d8:	d8002785 	stb	zero,158(sp)
    16dc:	90800094 	ori	r2,r18,2
    16e0:	18047916 	blt	r3,zero,28c8 <___vfprintf_internal_r+0x1dd4>
    16e4:	00bfdfc4 	movi	r2,-129
    16e8:	90a4703a 	and	r18,r18,r2
    16ec:	94800094 	ori	r18,r18,2
    16f0:	0039883a 	mov	fp,zero
    16f4:	d9003917 	ldw	r4,228(sp)
    16f8:	dc001e04 	addi	r16,sp,120
    16fc:	988003cc 	andi	r2,r19,15
    1700:	b006973a 	slli	r3,r22,28
    1704:	2085883a 	add	r2,r4,r2
    1708:	9826d13a 	srli	r19,r19,4
    170c:	10800003 	ldbu	r2,0(r2)
    1710:	b02cd13a 	srli	r22,r22,4
    1714:	843fffc4 	addi	r16,r16,-1
    1718:	1ce6b03a 	or	r19,r3,r19
    171c:	80800005 	stb	r2,0(r16)
    1720:	9d84b03a 	or	r2,r19,r22
    1724:	103ff51e 	bne	r2,zero,16fc <__alt_data_end+0xfffe22fc>
    1728:	d8c02817 	ldw	r3,160(sp)
    172c:	1c07c83a 	sub	r3,r3,r16
    1730:	d8c02b15 	stw	r3,172(sp)
    1734:	003ec606 	br	1250 <__alt_data_end+0xfffe1e50>
    1738:	8025883a 	mov	r18,r16
    173c:	dc002903 	ldbu	r16,164(sp)
    1740:	e011883a 	mov	r8,fp
    1744:	84003fcc 	andi	r16,r16,255
    1748:	803e9626 	beq	r16,zero,11a4 <__alt_data_end+0xfffe1da4>
    174c:	d8c02b03 	ldbu	r3,172(sp)
    1750:	d8c02785 	stb	r3,158(sp)
    1754:	003e9306 	br	11a4 <__alt_data_end+0xfffe1da4>
    1758:	00c00044 	movi	r3,1
    175c:	d8c02905 	stb	r3,164(sp)
    1760:	00c00ac4 	movi	r3,43
    1764:	d8c02b05 	stb	r3,172(sp)
    1768:	ac400007 	ldb	r17,0(r21)
    176c:	003d4306 	br	c7c <__alt_data_end+0xfffe187c>
    1770:	84000814 	ori	r16,r16,32
    1774:	ac400007 	ldb	r17,0(r21)
    1778:	003d4006 	br	c7c <__alt_data_end+0xfffe187c>
    177c:	d8802e17 	ldw	r2,184(sp)
    1780:	8025883a 	mov	r18,r16
    1784:	d8002785 	stb	zero,158(sp)
    1788:	14000017 	ldw	r16,0(r2)
    178c:	e011883a 	mov	r8,fp
    1790:	14c00104 	addi	r19,r2,4
    1794:	80042d26 	beq	r16,zero,284c <___vfprintf_internal_r+0x1d58>
    1798:	d8c02a17 	ldw	r3,168(sp)
    179c:	1803e416 	blt	r3,zero,2730 <___vfprintf_internal_r+0x1c3c>
    17a0:	180d883a 	mov	r6,r3
    17a4:	000b883a 	mov	r5,zero
    17a8:	8009883a 	mov	r4,r16
    17ac:	df003d15 	stw	fp,244(sp)
    17b0:	0005f640 	call	5f64 <memchr>
    17b4:	da003d17 	ldw	r8,244(sp)
    17b8:	10046826 	beq	r2,zero,295c <___vfprintf_internal_r+0x1e68>
    17bc:	1405c83a 	sub	r2,r2,r16
    17c0:	d8802b15 	stw	r2,172(sp)
    17c4:	1003e016 	blt	r2,zero,2748 <___vfprintf_internal_r+0x1c54>
    17c8:	df002783 	ldbu	fp,158(sp)
    17cc:	d8802915 	stw	r2,164(sp)
    17d0:	dcc02e15 	stw	r19,184(sp)
    17d4:	d8002a15 	stw	zero,168(sp)
    17d8:	d8003215 	stw	zero,200(sp)
    17dc:	003ea206 	br	1268 <__alt_data_end+0xfffe1e68>
    17e0:	8025883a 	mov	r18,r16
    17e4:	dc002903 	ldbu	r16,164(sp)
    17e8:	e011883a 	mov	r8,fp
    17ec:	84003fcc 	andi	r16,r16,255
    17f0:	803f8d26 	beq	r16,zero,1628 <__alt_data_end+0xfffe2228>
    17f4:	d8c02b03 	ldbu	r3,172(sp)
    17f8:	d8c02785 	stb	r3,158(sp)
    17fc:	003f8a06 	br	1628 <__alt_data_end+0xfffe2228>
    1800:	8025883a 	mov	r18,r16
    1804:	dc002903 	ldbu	r16,164(sp)
    1808:	e011883a 	mov	r8,fp
    180c:	84003fcc 	andi	r16,r16,255
    1810:	8005661e 	bne	r16,zero,2dac <___vfprintf_internal_r+0x22b8>
    1814:	01000074 	movhi	r4,1
    1818:	21002404 	addi	r4,r4,144
    181c:	d9003915 	stw	r4,228(sp)
    1820:	9080080c 	andi	r2,r18,32
    1824:	103f9f1e 	bne	r2,zero,16a4 <__alt_data_end+0xfffe22a4>
    1828:	9080040c 	andi	r2,r18,16
    182c:	1002eb26 	beq	r2,zero,23dc <___vfprintf_internal_r+0x18e8>
    1830:	d8802e17 	ldw	r2,184(sp)
    1834:	002d883a 	mov	r22,zero
    1838:	14c00017 	ldw	r19,0(r2)
    183c:	10800104 	addi	r2,r2,4
    1840:	d8802e15 	stw	r2,184(sp)
    1844:	003f9c06 	br	16b8 <__alt_data_end+0xfffe22b8>
    1848:	d8802b07 	ldb	r2,172(sp)
    184c:	1002e11e 	bne	r2,zero,23d4 <___vfprintf_internal_r+0x18e0>
    1850:	00c00044 	movi	r3,1
    1854:	d8c02905 	stb	r3,164(sp)
    1858:	00c00804 	movi	r3,32
    185c:	d8c02b05 	stb	r3,172(sp)
    1860:	ac400007 	ldb	r17,0(r21)
    1864:	003d0506 	br	c7c <__alt_data_end+0xfffe187c>
    1868:	84000054 	ori	r16,r16,1
    186c:	ac400007 	ldb	r17,0(r21)
    1870:	003d0206 	br	c7c <__alt_data_end+0xfffe187c>
    1874:	8025883a 	mov	r18,r16
    1878:	dc002903 	ldbu	r16,164(sp)
    187c:	e011883a 	mov	r8,fp
    1880:	84003fcc 	andi	r16,r16,255
    1884:	803de726 	beq	r16,zero,1024 <__alt_data_end+0xfffe1c24>
    1888:	d8c02b03 	ldbu	r3,172(sp)
    188c:	d8c02785 	stb	r3,158(sp)
    1890:	003de406 	br	1024 <__alt_data_end+0xfffe1c24>
    1894:	84001014 	ori	r16,r16,64
    1898:	ac400007 	ldb	r17,0(r21)
    189c:	003cf706 	br	c7c <__alt_data_end+0xfffe187c>
    18a0:	ac400007 	ldb	r17,0(r21)
    18a4:	00801b04 	movi	r2,108
    18a8:	88838f26 	beq	r17,r2,26e8 <___vfprintf_internal_r+0x1bf4>
    18ac:	84000414 	ori	r16,r16,16
    18b0:	003cf206 	br	c7c <__alt_data_end+0xfffe187c>
    18b4:	8025883a 	mov	r18,r16
    18b8:	dc002903 	ldbu	r16,164(sp)
    18bc:	e011883a 	mov	r8,fp
    18c0:	84003fcc 	andi	r16,r16,255
    18c4:	80053f1e 	bne	r16,zero,2dc4 <___vfprintf_internal_r+0x22d0>
    18c8:	9080080c 	andi	r2,r18,32
    18cc:	1002d226 	beq	r2,zero,2418 <___vfprintf_internal_r+0x1924>
    18d0:	d9002e17 	ldw	r4,184(sp)
    18d4:	d9402f17 	ldw	r5,188(sp)
    18d8:	20800017 	ldw	r2,0(r4)
    18dc:	2807d7fa 	srai	r3,r5,31
    18e0:	21000104 	addi	r4,r4,4
    18e4:	d9002e15 	stw	r4,184(sp)
    18e8:	11400015 	stw	r5,0(r2)
    18ec:	10c00115 	stw	r3,4(r2)
    18f0:	003cb806 	br	bd4 <__alt_data_end+0xfffe17d4>
    18f4:	d8c02e17 	ldw	r3,184(sp)
    18f8:	d9002e17 	ldw	r4,184(sp)
    18fc:	8025883a 	mov	r18,r16
    1900:	18800017 	ldw	r2,0(r3)
    1904:	21000104 	addi	r4,r4,4
    1908:	00c00044 	movi	r3,1
    190c:	e011883a 	mov	r8,fp
    1910:	d8c02915 	stw	r3,164(sp)
    1914:	d8002785 	stb	zero,158(sp)
    1918:	d8801405 	stb	r2,80(sp)
    191c:	d9002e15 	stw	r4,184(sp)
    1920:	d8c02b15 	stw	r3,172(sp)
    1924:	d8002a15 	stw	zero,168(sp)
    1928:	d8003215 	stw	zero,200(sp)
    192c:	dc001404 	addi	r16,sp,80
    1930:	0039883a 	mov	fp,zero
    1934:	003e5306 	br	1284 <__alt_data_end+0xfffe1e84>
    1938:	01000074 	movhi	r4,1
    193c:	21002404 	addi	r4,r4,144
    1940:	0039883a 	mov	fp,zero
    1944:	d9003915 	stw	r4,228(sp)
    1948:	04401e04 	movi	r17,120
    194c:	003f6906 	br	16f4 <__alt_data_end+0xfffe22f4>
    1950:	8025883a 	mov	r18,r16
    1954:	dc002903 	ldbu	r16,164(sp)
    1958:	e011883a 	mov	r8,fp
    195c:	84003fcc 	andi	r16,r16,255
    1960:	8005081e 	bne	r16,zero,2d84 <___vfprintf_internal_r+0x2290>
    1964:	883d6126 	beq	r17,zero,eec <__alt_data_end+0xfffe1aec>
    1968:	00c00044 	movi	r3,1
    196c:	d8c02915 	stw	r3,164(sp)
    1970:	dc401405 	stb	r17,80(sp)
    1974:	d8002785 	stb	zero,158(sp)
    1978:	003fe906 	br	1920 <__alt_data_end+0xfffe2520>
    197c:	01400074 	movhi	r5,1
    1980:	29402404 	addi	r5,r5,144
    1984:	d9403915 	stw	r5,228(sp)
    1988:	d8c02e15 	stw	r3,184(sp)
    198c:	1025883a 	mov	r18,r2
    1990:	04401e04 	movi	r17,120
    1994:	9d84b03a 	or	r2,r19,r22
    1998:	1000fc1e 	bne	r2,zero,1d8c <___vfprintf_internal_r+0x1298>
    199c:	0039883a 	mov	fp,zero
    19a0:	00800084 	movi	r2,2
    19a4:	10803fcc 	andi	r2,r2,255
    19a8:	00c00044 	movi	r3,1
    19ac:	10c20f26 	beq	r2,r3,21ec <___vfprintf_internal_r+0x16f8>
    19b0:	00c00084 	movi	r3,2
    19b4:	10fd3326 	beq	r2,r3,e84 <__alt_data_end+0xfffe1a84>
    19b8:	003e0b06 	br	11e8 <__alt_data_end+0xfffe1de8>
    19bc:	d8c02017 	ldw	r3,128(sp)
    19c0:	003e7106 	br	1388 <__alt_data_end+0xfffe1f88>
    19c4:	00801944 	movi	r2,101
    19c8:	14407e0e 	bge	r2,r17,1bc4 <___vfprintf_internal_r+0x10d0>
    19cc:	d9003617 	ldw	r4,216(sp)
    19d0:	d9403817 	ldw	r5,224(sp)
    19d4:	000d883a 	mov	r6,zero
    19d8:	000f883a 	mov	r7,zero
    19dc:	d8c03c15 	stw	r3,240(sp)
    19e0:	da003d15 	stw	r8,244(sp)
    19e4:	000c2cc0 	call	c2cc <__eqdf2>
    19e8:	d8c03c17 	ldw	r3,240(sp)
    19ec:	da003d17 	ldw	r8,244(sp)
    19f0:	1000f71e 	bne	r2,zero,1dd0 <___vfprintf_internal_r+0x12dc>
    19f4:	d8801f17 	ldw	r2,124(sp)
    19f8:	01000074 	movhi	r4,1
    19fc:	21002b04 	addi	r4,r4,172
    1a00:	18c00044 	addi	r3,r3,1
    1a04:	10800044 	addi	r2,r2,1
    1a08:	41000015 	stw	r4,0(r8)
    1a0c:	01000044 	movi	r4,1
    1a10:	41000115 	stw	r4,4(r8)
    1a14:	d8c02015 	stw	r3,128(sp)
    1a18:	d8801f15 	stw	r2,124(sp)
    1a1c:	010001c4 	movi	r4,7
    1a20:	2082b816 	blt	r4,r2,2504 <___vfprintf_internal_r+0x1a10>
    1a24:	42000204 	addi	r8,r8,8
    1a28:	d8802617 	ldw	r2,152(sp)
    1a2c:	d9403317 	ldw	r5,204(sp)
    1a30:	11400216 	blt	r2,r5,1a3c <___vfprintf_internal_r+0xf48>
    1a34:	9080004c 	andi	r2,r18,1
    1a38:	103eb326 	beq	r2,zero,1508 <__alt_data_end+0xfffe2108>
    1a3c:	d8803717 	ldw	r2,220(sp)
    1a40:	d9003417 	ldw	r4,208(sp)
    1a44:	d9403717 	ldw	r5,220(sp)
    1a48:	1887883a 	add	r3,r3,r2
    1a4c:	d8801f17 	ldw	r2,124(sp)
    1a50:	41000015 	stw	r4,0(r8)
    1a54:	41400115 	stw	r5,4(r8)
    1a58:	10800044 	addi	r2,r2,1
    1a5c:	d8c02015 	stw	r3,128(sp)
    1a60:	d8801f15 	stw	r2,124(sp)
    1a64:	010001c4 	movi	r4,7
    1a68:	20832916 	blt	r4,r2,2710 <___vfprintf_internal_r+0x1c1c>
    1a6c:	42000204 	addi	r8,r8,8
    1a70:	d8803317 	ldw	r2,204(sp)
    1a74:	143fffc4 	addi	r16,r2,-1
    1a78:	043ea30e 	bge	zero,r16,1508 <__alt_data_end+0xfffe2108>
    1a7c:	04400404 	movi	r17,16
    1a80:	d8801f17 	ldw	r2,124(sp)
    1a84:	8c00880e 	bge	r17,r16,1ca8 <___vfprintf_internal_r+0x11b4>
    1a88:	01400074 	movhi	r5,1
    1a8c:	29402b84 	addi	r5,r5,174
    1a90:	d9402c15 	stw	r5,176(sp)
    1a94:	058001c4 	movi	r22,7
    1a98:	dcc02d17 	ldw	r19,180(sp)
    1a9c:	00000306 	br	1aac <___vfprintf_internal_r+0xfb8>
    1aa0:	42000204 	addi	r8,r8,8
    1aa4:	843ffc04 	addi	r16,r16,-16
    1aa8:	8c00820e 	bge	r17,r16,1cb4 <___vfprintf_internal_r+0x11c0>
    1aac:	18c00404 	addi	r3,r3,16
    1ab0:	10800044 	addi	r2,r2,1
    1ab4:	45000015 	stw	r20,0(r8)
    1ab8:	44400115 	stw	r17,4(r8)
    1abc:	d8c02015 	stw	r3,128(sp)
    1ac0:	d8801f15 	stw	r2,124(sp)
    1ac4:	b0bff60e 	bge	r22,r2,1aa0 <__alt_data_end+0xfffe26a0>
    1ac8:	d9801e04 	addi	r6,sp,120
    1acc:	b80b883a 	mov	r5,r23
    1ad0:	9809883a 	mov	r4,r19
    1ad4:	00077e40 	call	77e4 <__sprint_r>
    1ad8:	103d0a1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1adc:	d8c02017 	ldw	r3,128(sp)
    1ae0:	d8801f17 	ldw	r2,124(sp)
    1ae4:	da000404 	addi	r8,sp,16
    1ae8:	003fee06 	br	1aa4 <__alt_data_end+0xfffe26a4>
    1aec:	d9403117 	ldw	r5,196(sp)
    1af0:	d8802917 	ldw	r2,164(sp)
    1af4:	28adc83a 	sub	r22,r5,r2
    1af8:	05be410e 	bge	zero,r22,1400 <__alt_data_end+0xfffe2000>
    1afc:	07000404 	movi	fp,16
    1b00:	d8801f17 	ldw	r2,124(sp)
    1b04:	e5838f0e 	bge	fp,r22,2944 <___vfprintf_internal_r+0x1e50>
    1b08:	01400074 	movhi	r5,1
    1b0c:	29402b84 	addi	r5,r5,174
    1b10:	dc403015 	stw	r17,192(sp)
    1b14:	d9402c15 	stw	r5,176(sp)
    1b18:	b023883a 	mov	r17,r22
    1b1c:	04c001c4 	movi	r19,7
    1b20:	a82d883a 	mov	r22,r21
    1b24:	902b883a 	mov	r21,r18
    1b28:	8025883a 	mov	r18,r16
    1b2c:	dc002d17 	ldw	r16,180(sp)
    1b30:	00000306 	br	1b40 <___vfprintf_internal_r+0x104c>
    1b34:	8c7ffc04 	addi	r17,r17,-16
    1b38:	42000204 	addi	r8,r8,8
    1b3c:	e440110e 	bge	fp,r17,1b84 <___vfprintf_internal_r+0x1090>
    1b40:	18c00404 	addi	r3,r3,16
    1b44:	10800044 	addi	r2,r2,1
    1b48:	45000015 	stw	r20,0(r8)
    1b4c:	47000115 	stw	fp,4(r8)
    1b50:	d8c02015 	stw	r3,128(sp)
    1b54:	d8801f15 	stw	r2,124(sp)
    1b58:	98bff60e 	bge	r19,r2,1b34 <__alt_data_end+0xfffe2734>
    1b5c:	d9801e04 	addi	r6,sp,120
    1b60:	b80b883a 	mov	r5,r23
    1b64:	8009883a 	mov	r4,r16
    1b68:	00077e40 	call	77e4 <__sprint_r>
    1b6c:	103ce51e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1b70:	8c7ffc04 	addi	r17,r17,-16
    1b74:	d8c02017 	ldw	r3,128(sp)
    1b78:	d8801f17 	ldw	r2,124(sp)
    1b7c:	da000404 	addi	r8,sp,16
    1b80:	e47fef16 	blt	fp,r17,1b40 <__alt_data_end+0xfffe2740>
    1b84:	9021883a 	mov	r16,r18
    1b88:	a825883a 	mov	r18,r21
    1b8c:	b02b883a 	mov	r21,r22
    1b90:	882d883a 	mov	r22,r17
    1b94:	dc403017 	ldw	r17,192(sp)
    1b98:	d9002c17 	ldw	r4,176(sp)
    1b9c:	1d87883a 	add	r3,r3,r22
    1ba0:	10800044 	addi	r2,r2,1
    1ba4:	41000015 	stw	r4,0(r8)
    1ba8:	45800115 	stw	r22,4(r8)
    1bac:	d8c02015 	stw	r3,128(sp)
    1bb0:	d8801f15 	stw	r2,124(sp)
    1bb4:	010001c4 	movi	r4,7
    1bb8:	20818e16 	blt	r4,r2,21f4 <___vfprintf_internal_r+0x1700>
    1bbc:	42000204 	addi	r8,r8,8
    1bc0:	003e0f06 	br	1400 <__alt_data_end+0xfffe2000>
    1bc4:	d9403317 	ldw	r5,204(sp)
    1bc8:	00800044 	movi	r2,1
    1bcc:	18c00044 	addi	r3,r3,1
    1bd0:	1141530e 	bge	r2,r5,2120 <___vfprintf_internal_r+0x162c>
    1bd4:	dc401f17 	ldw	r17,124(sp)
    1bd8:	00800044 	movi	r2,1
    1bdc:	40800115 	stw	r2,4(r8)
    1be0:	8c400044 	addi	r17,r17,1
    1be4:	44000015 	stw	r16,0(r8)
    1be8:	d8c02015 	stw	r3,128(sp)
    1bec:	dc401f15 	stw	r17,124(sp)
    1bf0:	008001c4 	movi	r2,7
    1bf4:	14416b16 	blt	r2,r17,21a4 <___vfprintf_internal_r+0x16b0>
    1bf8:	42000204 	addi	r8,r8,8
    1bfc:	d8803717 	ldw	r2,220(sp)
    1c00:	d9003417 	ldw	r4,208(sp)
    1c04:	8c400044 	addi	r17,r17,1
    1c08:	10c7883a 	add	r3,r2,r3
    1c0c:	40800115 	stw	r2,4(r8)
    1c10:	41000015 	stw	r4,0(r8)
    1c14:	d8c02015 	stw	r3,128(sp)
    1c18:	dc401f15 	stw	r17,124(sp)
    1c1c:	008001c4 	movi	r2,7
    1c20:	14416916 	blt	r2,r17,21c8 <___vfprintf_internal_r+0x16d4>
    1c24:	45800204 	addi	r22,r8,8
    1c28:	d9003617 	ldw	r4,216(sp)
    1c2c:	d9403817 	ldw	r5,224(sp)
    1c30:	000d883a 	mov	r6,zero
    1c34:	000f883a 	mov	r7,zero
    1c38:	d8c03c15 	stw	r3,240(sp)
    1c3c:	000c2cc0 	call	c2cc <__eqdf2>
    1c40:	d8c03c17 	ldw	r3,240(sp)
    1c44:	1000bc26 	beq	r2,zero,1f38 <___vfprintf_internal_r+0x1444>
    1c48:	d9403317 	ldw	r5,204(sp)
    1c4c:	84000044 	addi	r16,r16,1
    1c50:	8c400044 	addi	r17,r17,1
    1c54:	28bfffc4 	addi	r2,r5,-1
    1c58:	1887883a 	add	r3,r3,r2
    1c5c:	b0800115 	stw	r2,4(r22)
    1c60:	b4000015 	stw	r16,0(r22)
    1c64:	d8c02015 	stw	r3,128(sp)
    1c68:	dc401f15 	stw	r17,124(sp)
    1c6c:	008001c4 	movi	r2,7
    1c70:	14414316 	blt	r2,r17,2180 <___vfprintf_internal_r+0x168c>
    1c74:	b5800204 	addi	r22,r22,8
    1c78:	d9003a17 	ldw	r4,232(sp)
    1c7c:	df0022c4 	addi	fp,sp,139
    1c80:	8c400044 	addi	r17,r17,1
    1c84:	20c7883a 	add	r3,r4,r3
    1c88:	b7000015 	stw	fp,0(r22)
    1c8c:	b1000115 	stw	r4,4(r22)
    1c90:	d8c02015 	stw	r3,128(sp)
    1c94:	dc401f15 	stw	r17,124(sp)
    1c98:	008001c4 	movi	r2,7
    1c9c:	14400e16 	blt	r2,r17,1cd8 <___vfprintf_internal_r+0x11e4>
    1ca0:	b2000204 	addi	r8,r22,8
    1ca4:	003e1806 	br	1508 <__alt_data_end+0xfffe2108>
    1ca8:	01000074 	movhi	r4,1
    1cac:	21002b84 	addi	r4,r4,174
    1cb0:	d9002c15 	stw	r4,176(sp)
    1cb4:	d9002c17 	ldw	r4,176(sp)
    1cb8:	1c07883a 	add	r3,r3,r16
    1cbc:	44000115 	stw	r16,4(r8)
    1cc0:	41000015 	stw	r4,0(r8)
    1cc4:	10800044 	addi	r2,r2,1
    1cc8:	d8c02015 	stw	r3,128(sp)
    1ccc:	d8801f15 	stw	r2,124(sp)
    1cd0:	010001c4 	movi	r4,7
    1cd4:	20be0b0e 	bge	r4,r2,1504 <__alt_data_end+0xfffe2104>
    1cd8:	d9002d17 	ldw	r4,180(sp)
    1cdc:	d9801e04 	addi	r6,sp,120
    1ce0:	b80b883a 	mov	r5,r23
    1ce4:	00077e40 	call	77e4 <__sprint_r>
    1ce8:	103c861e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1cec:	d8c02017 	ldw	r3,128(sp)
    1cf0:	da000404 	addi	r8,sp,16
    1cf4:	003e0406 	br	1508 <__alt_data_end+0xfffe2108>
    1cf8:	d9002d17 	ldw	r4,180(sp)
    1cfc:	d9801e04 	addi	r6,sp,120
    1d00:	b80b883a 	mov	r5,r23
    1d04:	00077e40 	call	77e4 <__sprint_r>
    1d08:	103e3b26 	beq	r2,zero,15f8 <__alt_data_end+0xfffe21f8>
    1d0c:	003c7d06 	br	f04 <__alt_data_end+0xfffe1b04>
    1d10:	d9002d17 	ldw	r4,180(sp)
    1d14:	d9801e04 	addi	r6,sp,120
    1d18:	b80b883a 	mov	r5,r23
    1d1c:	00077e40 	call	77e4 <__sprint_r>
    1d20:	103c781e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1d24:	d8c02017 	ldw	r3,128(sp)
    1d28:	da000404 	addi	r8,sp,16
    1d2c:	003de906 	br	14d4 <__alt_data_end+0xfffe20d4>
    1d30:	d9002d17 	ldw	r4,180(sp)
    1d34:	d9801e04 	addi	r6,sp,120
    1d38:	b80b883a 	mov	r5,r23
    1d3c:	00077e40 	call	77e4 <__sprint_r>
    1d40:	103c701e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1d44:	d8c02017 	ldw	r3,128(sp)
    1d48:	da000404 	addi	r8,sp,16
    1d4c:	003d9b06 	br	13bc <__alt_data_end+0xfffe1fbc>
    1d50:	d9002d17 	ldw	r4,180(sp)
    1d54:	d9801e04 	addi	r6,sp,120
    1d58:	b80b883a 	mov	r5,r23
    1d5c:	00077e40 	call	77e4 <__sprint_r>
    1d60:	103c681e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1d64:	d8c02017 	ldw	r3,128(sp)
    1d68:	da000404 	addi	r8,sp,16
    1d6c:	003da106 	br	13f4 <__alt_data_end+0xfffe1ff4>
    1d70:	d9402a17 	ldw	r5,168(sp)
    1d74:	d8002785 	stb	zero,158(sp)
    1d78:	283f0616 	blt	r5,zero,1994 <__alt_data_end+0xfffe2594>
    1d7c:	00ffdfc4 	movi	r3,-129
    1d80:	9d84b03a 	or	r2,r19,r22
    1d84:	90e4703a 	and	r18,r18,r3
    1d88:	103c3b26 	beq	r2,zero,e78 <__alt_data_end+0xfffe1a78>
    1d8c:	0039883a 	mov	fp,zero
    1d90:	003e5806 	br	16f4 <__alt_data_end+0xfffe22f4>
    1d94:	9080040c 	andi	r2,r18,16
    1d98:	1001b326 	beq	r2,zero,2468 <___vfprintf_internal_r+0x1974>
    1d9c:	d8c02e17 	ldw	r3,184(sp)
    1da0:	d9002a17 	ldw	r4,168(sp)
    1da4:	d8002785 	stb	zero,158(sp)
    1da8:	18800104 	addi	r2,r3,4
    1dac:	1cc00017 	ldw	r19,0(r3)
    1db0:	002d883a 	mov	r22,zero
    1db4:	2001b516 	blt	r4,zero,248c <___vfprintf_internal_r+0x1998>
    1db8:	00ffdfc4 	movi	r3,-129
    1dbc:	d8802e15 	stw	r2,184(sp)
    1dc0:	90e4703a 	and	r18,r18,r3
    1dc4:	983d0526 	beq	r19,zero,11dc <__alt_data_end+0xfffe1ddc>
    1dc8:	0039883a 	mov	fp,zero
    1dcc:	003d0806 	br	11f0 <__alt_data_end+0xfffe1df0>
    1dd0:	dc402617 	ldw	r17,152(sp)
    1dd4:	0441d30e 	bge	zero,r17,2524 <___vfprintf_internal_r+0x1a30>
    1dd8:	dc403217 	ldw	r17,200(sp)
    1ddc:	d8803317 	ldw	r2,204(sp)
    1de0:	1440010e 	bge	r2,r17,1de8 <___vfprintf_internal_r+0x12f4>
    1de4:	1023883a 	mov	r17,r2
    1de8:	04400a0e 	bge	zero,r17,1e14 <___vfprintf_internal_r+0x1320>
    1dec:	d8801f17 	ldw	r2,124(sp)
    1df0:	1c47883a 	add	r3,r3,r17
    1df4:	44000015 	stw	r16,0(r8)
    1df8:	10800044 	addi	r2,r2,1
    1dfc:	44400115 	stw	r17,4(r8)
    1e00:	d8c02015 	stw	r3,128(sp)
    1e04:	d8801f15 	stw	r2,124(sp)
    1e08:	010001c4 	movi	r4,7
    1e0c:	20826516 	blt	r4,r2,27a4 <___vfprintf_internal_r+0x1cb0>
    1e10:	42000204 	addi	r8,r8,8
    1e14:	88026116 	blt	r17,zero,279c <___vfprintf_internal_r+0x1ca8>
    1e18:	d9003217 	ldw	r4,200(sp)
    1e1c:	2463c83a 	sub	r17,r4,r17
    1e20:	04407b0e 	bge	zero,r17,2010 <___vfprintf_internal_r+0x151c>
    1e24:	05800404 	movi	r22,16
    1e28:	d8801f17 	ldw	r2,124(sp)
    1e2c:	b4419d0e 	bge	r22,r17,24a4 <___vfprintf_internal_r+0x19b0>
    1e30:	01000074 	movhi	r4,1
    1e34:	21002b84 	addi	r4,r4,174
    1e38:	d9002c15 	stw	r4,176(sp)
    1e3c:	070001c4 	movi	fp,7
    1e40:	dcc02d17 	ldw	r19,180(sp)
    1e44:	00000306 	br	1e54 <___vfprintf_internal_r+0x1360>
    1e48:	42000204 	addi	r8,r8,8
    1e4c:	8c7ffc04 	addi	r17,r17,-16
    1e50:	b441970e 	bge	r22,r17,24b0 <___vfprintf_internal_r+0x19bc>
    1e54:	18c00404 	addi	r3,r3,16
    1e58:	10800044 	addi	r2,r2,1
    1e5c:	45000015 	stw	r20,0(r8)
    1e60:	45800115 	stw	r22,4(r8)
    1e64:	d8c02015 	stw	r3,128(sp)
    1e68:	d8801f15 	stw	r2,124(sp)
    1e6c:	e0bff60e 	bge	fp,r2,1e48 <__alt_data_end+0xfffe2a48>
    1e70:	d9801e04 	addi	r6,sp,120
    1e74:	b80b883a 	mov	r5,r23
    1e78:	9809883a 	mov	r4,r19
    1e7c:	00077e40 	call	77e4 <__sprint_r>
    1e80:	103c201e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1e84:	d8c02017 	ldw	r3,128(sp)
    1e88:	d8801f17 	ldw	r2,124(sp)
    1e8c:	da000404 	addi	r8,sp,16
    1e90:	003fee06 	br	1e4c <__alt_data_end+0xfffe2a4c>
    1e94:	d9002d17 	ldw	r4,180(sp)
    1e98:	d9801e04 	addi	r6,sp,120
    1e9c:	b80b883a 	mov	r5,r23
    1ea0:	00077e40 	call	77e4 <__sprint_r>
    1ea4:	103c171e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1ea8:	d8c02017 	ldw	r3,128(sp)
    1eac:	df002787 	ldb	fp,158(sp)
    1eb0:	da000404 	addi	r8,sp,16
    1eb4:	003d3406 	br	1388 <__alt_data_end+0xfffe1f88>
    1eb8:	9080040c 	andi	r2,r18,16
    1ebc:	10016126 	beq	r2,zero,2444 <___vfprintf_internal_r+0x1950>
    1ec0:	d9402e17 	ldw	r5,184(sp)
    1ec4:	2cc00017 	ldw	r19,0(r5)
    1ec8:	29400104 	addi	r5,r5,4
    1ecc:	d9402e15 	stw	r5,184(sp)
    1ed0:	982dd7fa 	srai	r22,r19,31
    1ed4:	b005883a 	mov	r2,r22
    1ed8:	003c5a06 	br	1044 <__alt_data_end+0xfffe1c44>
    1edc:	9080040c 	andi	r2,r18,16
    1ee0:	10003526 	beq	r2,zero,1fb8 <___vfprintf_internal_r+0x14c4>
    1ee4:	d8c02e17 	ldw	r3,184(sp)
    1ee8:	d9002a17 	ldw	r4,168(sp)
    1eec:	d8002785 	stb	zero,158(sp)
    1ef0:	18800104 	addi	r2,r3,4
    1ef4:	1cc00017 	ldw	r19,0(r3)
    1ef8:	002d883a 	mov	r22,zero
    1efc:	20003716 	blt	r4,zero,1fdc <___vfprintf_internal_r+0x14e8>
    1f00:	00ffdfc4 	movi	r3,-129
    1f04:	d8802e15 	stw	r2,184(sp)
    1f08:	90e4703a 	and	r18,r18,r3
    1f0c:	0039883a 	mov	fp,zero
    1f10:	983dd426 	beq	r19,zero,1664 <__alt_data_end+0xfffe2264>
    1f14:	00800244 	movi	r2,9
    1f18:	14fc5336 	bltu	r2,r19,1068 <__alt_data_end+0xfffe1c68>
    1f1c:	d8c02817 	ldw	r3,160(sp)
    1f20:	dc001dc4 	addi	r16,sp,119
    1f24:	9cc00c04 	addi	r19,r19,48
    1f28:	1c07c83a 	sub	r3,r3,r16
    1f2c:	dcc01dc5 	stb	r19,119(sp)
    1f30:	d8c02b15 	stw	r3,172(sp)
    1f34:	003cc606 	br	1250 <__alt_data_end+0xfffe1e50>
    1f38:	d8803317 	ldw	r2,204(sp)
    1f3c:	143fffc4 	addi	r16,r2,-1
    1f40:	043f4d0e 	bge	zero,r16,1c78 <__alt_data_end+0xfffe2878>
    1f44:	07000404 	movi	fp,16
    1f48:	e400810e 	bge	fp,r16,2150 <___vfprintf_internal_r+0x165c>
    1f4c:	01400074 	movhi	r5,1
    1f50:	29402b84 	addi	r5,r5,174
    1f54:	d9402c15 	stw	r5,176(sp)
    1f58:	01c001c4 	movi	r7,7
    1f5c:	dcc02d17 	ldw	r19,180(sp)
    1f60:	00000306 	br	1f70 <___vfprintf_internal_r+0x147c>
    1f64:	b5800204 	addi	r22,r22,8
    1f68:	843ffc04 	addi	r16,r16,-16
    1f6c:	e4007b0e 	bge	fp,r16,215c <___vfprintf_internal_r+0x1668>
    1f70:	18c00404 	addi	r3,r3,16
    1f74:	8c400044 	addi	r17,r17,1
    1f78:	b5000015 	stw	r20,0(r22)
    1f7c:	b7000115 	stw	fp,4(r22)
    1f80:	d8c02015 	stw	r3,128(sp)
    1f84:	dc401f15 	stw	r17,124(sp)
    1f88:	3c7ff60e 	bge	r7,r17,1f64 <__alt_data_end+0xfffe2b64>
    1f8c:	d9801e04 	addi	r6,sp,120
    1f90:	b80b883a 	mov	r5,r23
    1f94:	9809883a 	mov	r4,r19
    1f98:	d9c03c15 	stw	r7,240(sp)
    1f9c:	00077e40 	call	77e4 <__sprint_r>
    1fa0:	d9c03c17 	ldw	r7,240(sp)
    1fa4:	103bd71e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    1fa8:	d8c02017 	ldw	r3,128(sp)
    1fac:	dc401f17 	ldw	r17,124(sp)
    1fb0:	dd800404 	addi	r22,sp,16
    1fb4:	003fec06 	br	1f68 <__alt_data_end+0xfffe2b68>
    1fb8:	9080100c 	andi	r2,r18,64
    1fbc:	d8002785 	stb	zero,158(sp)
    1fc0:	10010e26 	beq	r2,zero,23fc <___vfprintf_internal_r+0x1908>
    1fc4:	d9402e17 	ldw	r5,184(sp)
    1fc8:	d8c02a17 	ldw	r3,168(sp)
    1fcc:	002d883a 	mov	r22,zero
    1fd0:	28800104 	addi	r2,r5,4
    1fd4:	2cc0000b 	ldhu	r19,0(r5)
    1fd8:	183fc90e 	bge	r3,zero,1f00 <__alt_data_end+0xfffe2b00>
    1fdc:	d8802e15 	stw	r2,184(sp)
    1fe0:	0039883a 	mov	fp,zero
    1fe4:	9d84b03a 	or	r2,r19,r22
    1fe8:	103c1e1e 	bne	r2,zero,1064 <__alt_data_end+0xfffe1c64>
    1fec:	00800044 	movi	r2,1
    1ff0:	003e6c06 	br	19a4 <__alt_data_end+0xfffe25a4>
    1ff4:	d9002d17 	ldw	r4,180(sp)
    1ff8:	d9801e04 	addi	r6,sp,120
    1ffc:	b80b883a 	mov	r5,r23
    2000:	00077e40 	call	77e4 <__sprint_r>
    2004:	103bbf1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2008:	d8c02017 	ldw	r3,128(sp)
    200c:	da000404 	addi	r8,sp,16
    2010:	d9003217 	ldw	r4,200(sp)
    2014:	d8802617 	ldw	r2,152(sp)
    2018:	d9403317 	ldw	r5,204(sp)
    201c:	8123883a 	add	r17,r16,r4
    2020:	11400216 	blt	r2,r5,202c <___vfprintf_internal_r+0x1538>
    2024:	9100004c 	andi	r4,r18,1
    2028:	20000d26 	beq	r4,zero,2060 <___vfprintf_internal_r+0x156c>
    202c:	d9003717 	ldw	r4,220(sp)
    2030:	d9403417 	ldw	r5,208(sp)
    2034:	1907883a 	add	r3,r3,r4
    2038:	d9001f17 	ldw	r4,124(sp)
    203c:	41400015 	stw	r5,0(r8)
    2040:	d9403717 	ldw	r5,220(sp)
    2044:	21000044 	addi	r4,r4,1
    2048:	d8c02015 	stw	r3,128(sp)
    204c:	41400115 	stw	r5,4(r8)
    2050:	d9001f15 	stw	r4,124(sp)
    2054:	014001c4 	movi	r5,7
    2058:	2901e816 	blt	r5,r4,27fc <___vfprintf_internal_r+0x1d08>
    205c:	42000204 	addi	r8,r8,8
    2060:	d9003317 	ldw	r4,204(sp)
    2064:	8121883a 	add	r16,r16,r4
    2068:	2085c83a 	sub	r2,r4,r2
    206c:	8461c83a 	sub	r16,r16,r17
    2070:	1400010e 	bge	r2,r16,2078 <___vfprintf_internal_r+0x1584>
    2074:	1021883a 	mov	r16,r2
    2078:	04000a0e 	bge	zero,r16,20a4 <___vfprintf_internal_r+0x15b0>
    207c:	d9001f17 	ldw	r4,124(sp)
    2080:	1c07883a 	add	r3,r3,r16
    2084:	44400015 	stw	r17,0(r8)
    2088:	21000044 	addi	r4,r4,1
    208c:	44000115 	stw	r16,4(r8)
    2090:	d8c02015 	stw	r3,128(sp)
    2094:	d9001f15 	stw	r4,124(sp)
    2098:	014001c4 	movi	r5,7
    209c:	2901fb16 	blt	r5,r4,288c <___vfprintf_internal_r+0x1d98>
    20a0:	42000204 	addi	r8,r8,8
    20a4:	8001f716 	blt	r16,zero,2884 <___vfprintf_internal_r+0x1d90>
    20a8:	1421c83a 	sub	r16,r2,r16
    20ac:	043d160e 	bge	zero,r16,1508 <__alt_data_end+0xfffe2108>
    20b0:	04400404 	movi	r17,16
    20b4:	d8801f17 	ldw	r2,124(sp)
    20b8:	8c3efb0e 	bge	r17,r16,1ca8 <__alt_data_end+0xfffe28a8>
    20bc:	01400074 	movhi	r5,1
    20c0:	29402b84 	addi	r5,r5,174
    20c4:	d9402c15 	stw	r5,176(sp)
    20c8:	058001c4 	movi	r22,7
    20cc:	dcc02d17 	ldw	r19,180(sp)
    20d0:	00000306 	br	20e0 <___vfprintf_internal_r+0x15ec>
    20d4:	42000204 	addi	r8,r8,8
    20d8:	843ffc04 	addi	r16,r16,-16
    20dc:	8c3ef50e 	bge	r17,r16,1cb4 <__alt_data_end+0xfffe28b4>
    20e0:	18c00404 	addi	r3,r3,16
    20e4:	10800044 	addi	r2,r2,1
    20e8:	45000015 	stw	r20,0(r8)
    20ec:	44400115 	stw	r17,4(r8)
    20f0:	d8c02015 	stw	r3,128(sp)
    20f4:	d8801f15 	stw	r2,124(sp)
    20f8:	b0bff60e 	bge	r22,r2,20d4 <__alt_data_end+0xfffe2cd4>
    20fc:	d9801e04 	addi	r6,sp,120
    2100:	b80b883a 	mov	r5,r23
    2104:	9809883a 	mov	r4,r19
    2108:	00077e40 	call	77e4 <__sprint_r>
    210c:	103b7d1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2110:	d8c02017 	ldw	r3,128(sp)
    2114:	d8801f17 	ldw	r2,124(sp)
    2118:	da000404 	addi	r8,sp,16
    211c:	003fee06 	br	20d8 <__alt_data_end+0xfffe2cd8>
    2120:	9088703a 	and	r4,r18,r2
    2124:	203eab1e 	bne	r4,zero,1bd4 <__alt_data_end+0xfffe27d4>
    2128:	dc401f17 	ldw	r17,124(sp)
    212c:	40800115 	stw	r2,4(r8)
    2130:	44000015 	stw	r16,0(r8)
    2134:	8c400044 	addi	r17,r17,1
    2138:	d8c02015 	stw	r3,128(sp)
    213c:	dc401f15 	stw	r17,124(sp)
    2140:	008001c4 	movi	r2,7
    2144:	14400e16 	blt	r2,r17,2180 <___vfprintf_internal_r+0x168c>
    2148:	45800204 	addi	r22,r8,8
    214c:	003eca06 	br	1c78 <__alt_data_end+0xfffe2878>
    2150:	01000074 	movhi	r4,1
    2154:	21002b84 	addi	r4,r4,174
    2158:	d9002c15 	stw	r4,176(sp)
    215c:	d8802c17 	ldw	r2,176(sp)
    2160:	1c07883a 	add	r3,r3,r16
    2164:	8c400044 	addi	r17,r17,1
    2168:	b0800015 	stw	r2,0(r22)
    216c:	b4000115 	stw	r16,4(r22)
    2170:	d8c02015 	stw	r3,128(sp)
    2174:	dc401f15 	stw	r17,124(sp)
    2178:	008001c4 	movi	r2,7
    217c:	147ebd0e 	bge	r2,r17,1c74 <__alt_data_end+0xfffe2874>
    2180:	d9002d17 	ldw	r4,180(sp)
    2184:	d9801e04 	addi	r6,sp,120
    2188:	b80b883a 	mov	r5,r23
    218c:	00077e40 	call	77e4 <__sprint_r>
    2190:	103b5c1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2194:	d8c02017 	ldw	r3,128(sp)
    2198:	dc401f17 	ldw	r17,124(sp)
    219c:	dd800404 	addi	r22,sp,16
    21a0:	003eb506 	br	1c78 <__alt_data_end+0xfffe2878>
    21a4:	d9002d17 	ldw	r4,180(sp)
    21a8:	d9801e04 	addi	r6,sp,120
    21ac:	b80b883a 	mov	r5,r23
    21b0:	00077e40 	call	77e4 <__sprint_r>
    21b4:	103b531e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    21b8:	d8c02017 	ldw	r3,128(sp)
    21bc:	dc401f17 	ldw	r17,124(sp)
    21c0:	da000404 	addi	r8,sp,16
    21c4:	003e8d06 	br	1bfc <__alt_data_end+0xfffe27fc>
    21c8:	d9002d17 	ldw	r4,180(sp)
    21cc:	d9801e04 	addi	r6,sp,120
    21d0:	b80b883a 	mov	r5,r23
    21d4:	00077e40 	call	77e4 <__sprint_r>
    21d8:	103b4a1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    21dc:	d8c02017 	ldw	r3,128(sp)
    21e0:	dc401f17 	ldw	r17,124(sp)
    21e4:	dd800404 	addi	r22,sp,16
    21e8:	003e8f06 	br	1c28 <__alt_data_end+0xfffe2828>
    21ec:	0027883a 	mov	r19,zero
    21f0:	003f4a06 	br	1f1c <__alt_data_end+0xfffe2b1c>
    21f4:	d9002d17 	ldw	r4,180(sp)
    21f8:	d9801e04 	addi	r6,sp,120
    21fc:	b80b883a 	mov	r5,r23
    2200:	00077e40 	call	77e4 <__sprint_r>
    2204:	103b3f1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2208:	d8c02017 	ldw	r3,128(sp)
    220c:	da000404 	addi	r8,sp,16
    2210:	003c7b06 	br	1400 <__alt_data_end+0xfffe2000>
    2214:	d9402a17 	ldw	r5,168(sp)
    2218:	04e7c83a 	sub	r19,zero,r19
    221c:	07000b44 	movi	fp,45
    2220:	9804c03a 	cmpne	r2,r19,zero
    2224:	05adc83a 	sub	r22,zero,r22
    2228:	df002785 	stb	fp,158(sp)
    222c:	b0adc83a 	sub	r22,r22,r2
    2230:	28017b16 	blt	r5,zero,2820 <___vfprintf_internal_r+0x1d2c>
    2234:	00bfdfc4 	movi	r2,-129
    2238:	90a4703a 	and	r18,r18,r2
    223c:	003b8906 	br	1064 <__alt_data_end+0xfffe1c64>
    2240:	d9003617 	ldw	r4,216(sp)
    2244:	d9403817 	ldw	r5,224(sp)
    2248:	da003d15 	stw	r8,244(sp)
    224c:	00073700 	call	7370 <__fpclassifyd>
    2250:	da003d17 	ldw	r8,244(sp)
    2254:	1000f026 	beq	r2,zero,2618 <___vfprintf_internal_r+0x1b24>
    2258:	d9002a17 	ldw	r4,168(sp)
    225c:	05bff7c4 	movi	r22,-33
    2260:	00bfffc4 	movi	r2,-1
    2264:	8dac703a 	and	r22,r17,r22
    2268:	20820026 	beq	r4,r2,2a6c <___vfprintf_internal_r+0x1f78>
    226c:	008011c4 	movi	r2,71
    2270:	b081f726 	beq	r22,r2,2a50 <___vfprintf_internal_r+0x1f5c>
    2274:	d9003817 	ldw	r4,224(sp)
    2278:	90c04014 	ori	r3,r18,256
    227c:	d8c02c15 	stw	r3,176(sp)
    2280:	20021516 	blt	r4,zero,2ad8 <___vfprintf_internal_r+0x1fe4>
    2284:	dcc03817 	ldw	r19,224(sp)
    2288:	d8002905 	stb	zero,164(sp)
    228c:	00801984 	movi	r2,102
    2290:	8881f926 	beq	r17,r2,2a78 <___vfprintf_internal_r+0x1f84>
    2294:	00801184 	movi	r2,70
    2298:	88821c26 	beq	r17,r2,2b0c <___vfprintf_internal_r+0x2018>
    229c:	00801144 	movi	r2,69
    22a0:	b081ef26 	beq	r22,r2,2a60 <___vfprintf_internal_r+0x1f6c>
    22a4:	d8c02a17 	ldw	r3,168(sp)
    22a8:	d8802104 	addi	r2,sp,132
    22ac:	d8800315 	stw	r2,12(sp)
    22b0:	d9403617 	ldw	r5,216(sp)
    22b4:	d8802504 	addi	r2,sp,148
    22b8:	d9002d17 	ldw	r4,180(sp)
    22bc:	d8800215 	stw	r2,8(sp)
    22c0:	d8802604 	addi	r2,sp,152
    22c4:	d8c00015 	stw	r3,0(sp)
    22c8:	d8800115 	stw	r2,4(sp)
    22cc:	01c00084 	movi	r7,2
    22d0:	980d883a 	mov	r6,r19
    22d4:	d8c03c15 	stw	r3,240(sp)
    22d8:	da003d15 	stw	r8,244(sp)
    22dc:	00032240 	call	3224 <_dtoa_r>
    22e0:	1021883a 	mov	r16,r2
    22e4:	008019c4 	movi	r2,103
    22e8:	d8c03c17 	ldw	r3,240(sp)
    22ec:	da003d17 	ldw	r8,244(sp)
    22f0:	88817126 	beq	r17,r2,28b8 <___vfprintf_internal_r+0x1dc4>
    22f4:	008011c4 	movi	r2,71
    22f8:	88829126 	beq	r17,r2,2d40 <___vfprintf_internal_r+0x224c>
    22fc:	80f9883a 	add	fp,r16,r3
    2300:	d9003617 	ldw	r4,216(sp)
    2304:	000d883a 	mov	r6,zero
    2308:	000f883a 	mov	r7,zero
    230c:	980b883a 	mov	r5,r19
    2310:	da003d15 	stw	r8,244(sp)
    2314:	000c2cc0 	call	c2cc <__eqdf2>
    2318:	da003d17 	ldw	r8,244(sp)
    231c:	10018d26 	beq	r2,zero,2954 <___vfprintf_internal_r+0x1e60>
    2320:	d8802117 	ldw	r2,132(sp)
    2324:	1700062e 	bgeu	r2,fp,2340 <___vfprintf_internal_r+0x184c>
    2328:	01000c04 	movi	r4,48
    232c:	10c00044 	addi	r3,r2,1
    2330:	d8c02115 	stw	r3,132(sp)
    2334:	11000005 	stb	r4,0(r2)
    2338:	d8802117 	ldw	r2,132(sp)
    233c:	173ffb36 	bltu	r2,fp,232c <__alt_data_end+0xfffe2f2c>
    2340:	1405c83a 	sub	r2,r2,r16
    2344:	d8803315 	stw	r2,204(sp)
    2348:	008011c4 	movi	r2,71
    234c:	b0817626 	beq	r22,r2,2928 <___vfprintf_internal_r+0x1e34>
    2350:	00801944 	movi	r2,101
    2354:	1442800e 	bge	r2,r17,2d58 <___vfprintf_internal_r+0x2264>
    2358:	d8c02617 	ldw	r3,152(sp)
    235c:	00801984 	movi	r2,102
    2360:	d8c03215 	stw	r3,200(sp)
    2364:	8881fe26 	beq	r17,r2,2b60 <___vfprintf_internal_r+0x206c>
    2368:	d8c03217 	ldw	r3,200(sp)
    236c:	d9003317 	ldw	r4,204(sp)
    2370:	1901dd16 	blt	r3,r4,2ae8 <___vfprintf_internal_r+0x1ff4>
    2374:	9480004c 	andi	r18,r18,1
    2378:	90022b1e 	bne	r18,zero,2c28 <___vfprintf_internal_r+0x2134>
    237c:	1805883a 	mov	r2,r3
    2380:	18028316 	blt	r3,zero,2d90 <___vfprintf_internal_r+0x229c>
    2384:	d8c03217 	ldw	r3,200(sp)
    2388:	044019c4 	movi	r17,103
    238c:	d8c02b15 	stw	r3,172(sp)
    2390:	df002907 	ldb	fp,164(sp)
    2394:	e001531e 	bne	fp,zero,28e4 <___vfprintf_internal_r+0x1df0>
    2398:	df002783 	ldbu	fp,158(sp)
    239c:	d8802915 	stw	r2,164(sp)
    23a0:	dc802c17 	ldw	r18,176(sp)
    23a4:	d8002a15 	stw	zero,168(sp)
    23a8:	003baf06 	br	1268 <__alt_data_end+0xfffe1e68>
    23ac:	d8c02e17 	ldw	r3,184(sp)
    23b0:	d9002e17 	ldw	r4,184(sp)
    23b4:	d9402e17 	ldw	r5,184(sp)
    23b8:	18c00017 	ldw	r3,0(r3)
    23bc:	21000117 	ldw	r4,4(r4)
    23c0:	29400204 	addi	r5,r5,8
    23c4:	d8c03615 	stw	r3,216(sp)
    23c8:	d9003815 	stw	r4,224(sp)
    23cc:	d9402e15 	stw	r5,184(sp)
    23d0:	003b5006 	br	1114 <__alt_data_end+0xfffe1d14>
    23d4:	ac400007 	ldb	r17,0(r21)
    23d8:	003a2806 	br	c7c <__alt_data_end+0xfffe187c>
    23dc:	9080100c 	andi	r2,r18,64
    23e0:	1000a826 	beq	r2,zero,2684 <___vfprintf_internal_r+0x1b90>
    23e4:	d8c02e17 	ldw	r3,184(sp)
    23e8:	002d883a 	mov	r22,zero
    23ec:	1cc0000b 	ldhu	r19,0(r3)
    23f0:	18c00104 	addi	r3,r3,4
    23f4:	d8c02e15 	stw	r3,184(sp)
    23f8:	003caf06 	br	16b8 <__alt_data_end+0xfffe22b8>
    23fc:	d9002e17 	ldw	r4,184(sp)
    2400:	d9402a17 	ldw	r5,168(sp)
    2404:	002d883a 	mov	r22,zero
    2408:	20800104 	addi	r2,r4,4
    240c:	24c00017 	ldw	r19,0(r4)
    2410:	283ebb0e 	bge	r5,zero,1f00 <__alt_data_end+0xfffe2b00>
    2414:	003ef106 	br	1fdc <__alt_data_end+0xfffe2bdc>
    2418:	9080040c 	andi	r2,r18,16
    241c:	1000921e 	bne	r2,zero,2668 <___vfprintf_internal_r+0x1b74>
    2420:	9480100c 	andi	r18,r18,64
    2424:	90013926 	beq	r18,zero,290c <___vfprintf_internal_r+0x1e18>
    2428:	d9402e17 	ldw	r5,184(sp)
    242c:	d8c02f17 	ldw	r3,188(sp)
    2430:	28800017 	ldw	r2,0(r5)
    2434:	29400104 	addi	r5,r5,4
    2438:	d9402e15 	stw	r5,184(sp)
    243c:	10c0000d 	sth	r3,0(r2)
    2440:	0039e406 	br	bd4 <__alt_data_end+0xfffe17d4>
    2444:	9080100c 	andi	r2,r18,64
    2448:	10008026 	beq	r2,zero,264c <___vfprintf_internal_r+0x1b58>
    244c:	d8802e17 	ldw	r2,184(sp)
    2450:	14c0000f 	ldh	r19,0(r2)
    2454:	10800104 	addi	r2,r2,4
    2458:	d8802e15 	stw	r2,184(sp)
    245c:	982dd7fa 	srai	r22,r19,31
    2460:	b005883a 	mov	r2,r22
    2464:	003af706 	br	1044 <__alt_data_end+0xfffe1c44>
    2468:	9080100c 	andi	r2,r18,64
    246c:	d8002785 	stb	zero,158(sp)
    2470:	10008a1e 	bne	r2,zero,269c <___vfprintf_internal_r+0x1ba8>
    2474:	d9002e17 	ldw	r4,184(sp)
    2478:	d9402a17 	ldw	r5,168(sp)
    247c:	002d883a 	mov	r22,zero
    2480:	20800104 	addi	r2,r4,4
    2484:	24c00017 	ldw	r19,0(r4)
    2488:	283e4b0e 	bge	r5,zero,1db8 <__alt_data_end+0xfffe29b8>
    248c:	9d86b03a 	or	r3,r19,r22
    2490:	d8802e15 	stw	r2,184(sp)
    2494:	183e4c1e 	bne	r3,zero,1dc8 <__alt_data_end+0xfffe29c8>
    2498:	0039883a 	mov	fp,zero
    249c:	0005883a 	mov	r2,zero
    24a0:	003d4006 	br	19a4 <__alt_data_end+0xfffe25a4>
    24a4:	01400074 	movhi	r5,1
    24a8:	29402b84 	addi	r5,r5,174
    24ac:	d9402c15 	stw	r5,176(sp)
    24b0:	d9402c17 	ldw	r5,176(sp)
    24b4:	1c47883a 	add	r3,r3,r17
    24b8:	10800044 	addi	r2,r2,1
    24bc:	41400015 	stw	r5,0(r8)
    24c0:	44400115 	stw	r17,4(r8)
    24c4:	d8c02015 	stw	r3,128(sp)
    24c8:	d8801f15 	stw	r2,124(sp)
    24cc:	010001c4 	movi	r4,7
    24d0:	20bec816 	blt	r4,r2,1ff4 <__alt_data_end+0xfffe2bf4>
    24d4:	42000204 	addi	r8,r8,8
    24d8:	003ecd06 	br	2010 <__alt_data_end+0xfffe2c10>
    24dc:	d9002a17 	ldw	r4,168(sp)
    24e0:	d8002785 	stb	zero,158(sp)
    24e4:	203d2d16 	blt	r4,zero,199c <__alt_data_end+0xfffe259c>
    24e8:	00bfdfc4 	movi	r2,-129
    24ec:	90a4703a 	and	r18,r18,r2
    24f0:	003a6106 	br	e78 <__alt_data_end+0xfffe1a78>
    24f4:	01000074 	movhi	r4,1
    24f8:	21002b84 	addi	r4,r4,174
    24fc:	d9002c15 	stw	r4,176(sp)
    2500:	003bea06 	br	14ac <__alt_data_end+0xfffe20ac>
    2504:	d9002d17 	ldw	r4,180(sp)
    2508:	d9801e04 	addi	r6,sp,120
    250c:	b80b883a 	mov	r5,r23
    2510:	00077e40 	call	77e4 <__sprint_r>
    2514:	103a7b1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2518:	d8c02017 	ldw	r3,128(sp)
    251c:	da000404 	addi	r8,sp,16
    2520:	003d4106 	br	1a28 <__alt_data_end+0xfffe2628>
    2524:	d8801f17 	ldw	r2,124(sp)
    2528:	01400074 	movhi	r5,1
    252c:	01000044 	movi	r4,1
    2530:	18c00044 	addi	r3,r3,1
    2534:	10800044 	addi	r2,r2,1
    2538:	29402b04 	addi	r5,r5,172
    253c:	41000115 	stw	r4,4(r8)
    2540:	41400015 	stw	r5,0(r8)
    2544:	d8c02015 	stw	r3,128(sp)
    2548:	d8801f15 	stw	r2,124(sp)
    254c:	010001c4 	movi	r4,7
    2550:	20805c16 	blt	r4,r2,26c4 <___vfprintf_internal_r+0x1bd0>
    2554:	42000204 	addi	r8,r8,8
    2558:	8800041e 	bne	r17,zero,256c <___vfprintf_internal_r+0x1a78>
    255c:	d8803317 	ldw	r2,204(sp)
    2560:	1000021e 	bne	r2,zero,256c <___vfprintf_internal_r+0x1a78>
    2564:	9080004c 	andi	r2,r18,1
    2568:	103be726 	beq	r2,zero,1508 <__alt_data_end+0xfffe2108>
    256c:	d9003717 	ldw	r4,220(sp)
    2570:	d8801f17 	ldw	r2,124(sp)
    2574:	d9403417 	ldw	r5,208(sp)
    2578:	20c7883a 	add	r3,r4,r3
    257c:	10800044 	addi	r2,r2,1
    2580:	41000115 	stw	r4,4(r8)
    2584:	41400015 	stw	r5,0(r8)
    2588:	d8c02015 	stw	r3,128(sp)
    258c:	d8801f15 	stw	r2,124(sp)
    2590:	010001c4 	movi	r4,7
    2594:	20812116 	blt	r4,r2,2a1c <___vfprintf_internal_r+0x1f28>
    2598:	42000204 	addi	r8,r8,8
    259c:	0463c83a 	sub	r17,zero,r17
    25a0:	0440730e 	bge	zero,r17,2770 <___vfprintf_internal_r+0x1c7c>
    25a4:	05800404 	movi	r22,16
    25a8:	b440860e 	bge	r22,r17,27c4 <___vfprintf_internal_r+0x1cd0>
    25ac:	01400074 	movhi	r5,1
    25b0:	29402b84 	addi	r5,r5,174
    25b4:	d9402c15 	stw	r5,176(sp)
    25b8:	070001c4 	movi	fp,7
    25bc:	dcc02d17 	ldw	r19,180(sp)
    25c0:	00000306 	br	25d0 <___vfprintf_internal_r+0x1adc>
    25c4:	42000204 	addi	r8,r8,8
    25c8:	8c7ffc04 	addi	r17,r17,-16
    25cc:	b440800e 	bge	r22,r17,27d0 <___vfprintf_internal_r+0x1cdc>
    25d0:	18c00404 	addi	r3,r3,16
    25d4:	10800044 	addi	r2,r2,1
    25d8:	45000015 	stw	r20,0(r8)
    25dc:	45800115 	stw	r22,4(r8)
    25e0:	d8c02015 	stw	r3,128(sp)
    25e4:	d8801f15 	stw	r2,124(sp)
    25e8:	e0bff60e 	bge	fp,r2,25c4 <__alt_data_end+0xfffe31c4>
    25ec:	d9801e04 	addi	r6,sp,120
    25f0:	b80b883a 	mov	r5,r23
    25f4:	9809883a 	mov	r4,r19
    25f8:	00077e40 	call	77e4 <__sprint_r>
    25fc:	103a411e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2600:	d8c02017 	ldw	r3,128(sp)
    2604:	d8801f17 	ldw	r2,124(sp)
    2608:	da000404 	addi	r8,sp,16
    260c:	003fee06 	br	25c8 <__alt_data_end+0xfffe31c8>
    2610:	00bfffc4 	movi	r2,-1
    2614:	003a3f06 	br	f14 <__alt_data_end+0xfffe1b14>
    2618:	008011c4 	movi	r2,71
    261c:	1440b816 	blt	r2,r17,2900 <___vfprintf_internal_r+0x1e0c>
    2620:	04000074 	movhi	r16,1
    2624:	84001d04 	addi	r16,r16,116
    2628:	00c000c4 	movi	r3,3
    262c:	00bfdfc4 	movi	r2,-129
    2630:	d8c02915 	stw	r3,164(sp)
    2634:	90a4703a 	and	r18,r18,r2
    2638:	df002783 	ldbu	fp,158(sp)
    263c:	d8c02b15 	stw	r3,172(sp)
    2640:	d8002a15 	stw	zero,168(sp)
    2644:	d8003215 	stw	zero,200(sp)
    2648:	003b0706 	br	1268 <__alt_data_end+0xfffe1e68>
    264c:	d8c02e17 	ldw	r3,184(sp)
    2650:	1cc00017 	ldw	r19,0(r3)
    2654:	18c00104 	addi	r3,r3,4
    2658:	d8c02e15 	stw	r3,184(sp)
    265c:	982dd7fa 	srai	r22,r19,31
    2660:	b005883a 	mov	r2,r22
    2664:	003a7706 	br	1044 <__alt_data_end+0xfffe1c44>
    2668:	d8c02e17 	ldw	r3,184(sp)
    266c:	d9002f17 	ldw	r4,188(sp)
    2670:	18800017 	ldw	r2,0(r3)
    2674:	18c00104 	addi	r3,r3,4
    2678:	d8c02e15 	stw	r3,184(sp)
    267c:	11000015 	stw	r4,0(r2)
    2680:	00395406 	br	bd4 <__alt_data_end+0xfffe17d4>
    2684:	d9002e17 	ldw	r4,184(sp)
    2688:	002d883a 	mov	r22,zero
    268c:	24c00017 	ldw	r19,0(r4)
    2690:	21000104 	addi	r4,r4,4
    2694:	d9002e15 	stw	r4,184(sp)
    2698:	003c0706 	br	16b8 <__alt_data_end+0xfffe22b8>
    269c:	d9402e17 	ldw	r5,184(sp)
    26a0:	d8c02a17 	ldw	r3,168(sp)
    26a4:	002d883a 	mov	r22,zero
    26a8:	28800104 	addi	r2,r5,4
    26ac:	2cc0000b 	ldhu	r19,0(r5)
    26b0:	183dc10e 	bge	r3,zero,1db8 <__alt_data_end+0xfffe29b8>
    26b4:	003f7506 	br	248c <__alt_data_end+0xfffe308c>
    26b8:	04000074 	movhi	r16,1
    26bc:	84001b04 	addi	r16,r16,108
    26c0:	003aa706 	br	1160 <__alt_data_end+0xfffe1d60>
    26c4:	d9002d17 	ldw	r4,180(sp)
    26c8:	d9801e04 	addi	r6,sp,120
    26cc:	b80b883a 	mov	r5,r23
    26d0:	00077e40 	call	77e4 <__sprint_r>
    26d4:	103a0b1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    26d8:	dc402617 	ldw	r17,152(sp)
    26dc:	d8c02017 	ldw	r3,128(sp)
    26e0:	da000404 	addi	r8,sp,16
    26e4:	003f9c06 	br	2558 <__alt_data_end+0xfffe3158>
    26e8:	ac400043 	ldbu	r17,1(r21)
    26ec:	84000814 	ori	r16,r16,32
    26f0:	ad400044 	addi	r21,r21,1
    26f4:	8c403fcc 	andi	r17,r17,255
    26f8:	8c40201c 	xori	r17,r17,128
    26fc:	8c7fe004 	addi	r17,r17,-128
    2700:	00395e06 	br	c7c <__alt_data_end+0xfffe187c>
    2704:	d8c02e15 	stw	r3,184(sp)
    2708:	0039883a 	mov	fp,zero
    270c:	003e3506 	br	1fe4 <__alt_data_end+0xfffe2be4>
    2710:	d9002d17 	ldw	r4,180(sp)
    2714:	d9801e04 	addi	r6,sp,120
    2718:	b80b883a 	mov	r5,r23
    271c:	00077e40 	call	77e4 <__sprint_r>
    2720:	1039f81e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2724:	d8c02017 	ldw	r3,128(sp)
    2728:	da000404 	addi	r8,sp,16
    272c:	003cd006 	br	1a70 <__alt_data_end+0xfffe2670>
    2730:	8009883a 	mov	r4,r16
    2734:	df003d15 	stw	fp,244(sp)
    2738:	00076500 	call	7650 <strlen>
    273c:	d8802b15 	stw	r2,172(sp)
    2740:	da003d17 	ldw	r8,244(sp)
    2744:	103c200e 	bge	r2,zero,17c8 <__alt_data_end+0xfffe23c8>
    2748:	0005883a 	mov	r2,zero
    274c:	003c1e06 	br	17c8 <__alt_data_end+0xfffe23c8>
    2750:	d9002d17 	ldw	r4,180(sp)
    2754:	d9801e04 	addi	r6,sp,120
    2758:	b80b883a 	mov	r5,r23
    275c:	00077e40 	call	77e4 <__sprint_r>
    2760:	1039e81e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2764:	d8c02017 	ldw	r3,128(sp)
    2768:	d8801f17 	ldw	r2,124(sp)
    276c:	da000404 	addi	r8,sp,16
    2770:	d9403317 	ldw	r5,204(sp)
    2774:	10800044 	addi	r2,r2,1
    2778:	44000015 	stw	r16,0(r8)
    277c:	28c7883a 	add	r3,r5,r3
    2780:	003b5b06 	br	14f0 <__alt_data_end+0xfffe20f0>
    2784:	01000074 	movhi	r4,1
    2788:	21002f84 	addi	r4,r4,190
    278c:	d9003515 	stw	r4,212(sp)
    2790:	003af206 	br	135c <__alt_data_end+0xfffe1f5c>
    2794:	013fffc4 	movi	r4,-1
    2798:	003a0806 	br	fbc <__alt_data_end+0xfffe1bbc>
    279c:	0023883a 	mov	r17,zero
    27a0:	003d9d06 	br	1e18 <__alt_data_end+0xfffe2a18>
    27a4:	d9002d17 	ldw	r4,180(sp)
    27a8:	d9801e04 	addi	r6,sp,120
    27ac:	b80b883a 	mov	r5,r23
    27b0:	00077e40 	call	77e4 <__sprint_r>
    27b4:	1039d31e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    27b8:	d8c02017 	ldw	r3,128(sp)
    27bc:	da000404 	addi	r8,sp,16
    27c0:	003d9406 	br	1e14 <__alt_data_end+0xfffe2a14>
    27c4:	01000074 	movhi	r4,1
    27c8:	21002b84 	addi	r4,r4,174
    27cc:	d9002c15 	stw	r4,176(sp)
    27d0:	d9002c17 	ldw	r4,176(sp)
    27d4:	1c47883a 	add	r3,r3,r17
    27d8:	10800044 	addi	r2,r2,1
    27dc:	41000015 	stw	r4,0(r8)
    27e0:	44400115 	stw	r17,4(r8)
    27e4:	d8c02015 	stw	r3,128(sp)
    27e8:	d8801f15 	stw	r2,124(sp)
    27ec:	010001c4 	movi	r4,7
    27f0:	20bfd716 	blt	r4,r2,2750 <__alt_data_end+0xfffe3350>
    27f4:	42000204 	addi	r8,r8,8
    27f8:	003fdd06 	br	2770 <__alt_data_end+0xfffe3370>
    27fc:	d9002d17 	ldw	r4,180(sp)
    2800:	d9801e04 	addi	r6,sp,120
    2804:	b80b883a 	mov	r5,r23
    2808:	00077e40 	call	77e4 <__sprint_r>
    280c:	1039bd1e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2810:	d8802617 	ldw	r2,152(sp)
    2814:	d8c02017 	ldw	r3,128(sp)
    2818:	da000404 	addi	r8,sp,16
    281c:	003e1006 	br	2060 <__alt_data_end+0xfffe2c60>
    2820:	00800044 	movi	r2,1
    2824:	10803fcc 	andi	r2,r2,255
    2828:	00c00044 	movi	r3,1
    282c:	10fa0d26 	beq	r2,r3,1064 <__alt_data_end+0xfffe1c64>
    2830:	00c00084 	movi	r3,2
    2834:	10fbaf26 	beq	r2,r3,16f4 <__alt_data_end+0xfffe22f4>
    2838:	003a6d06 	br	11f0 <__alt_data_end+0xfffe1df0>
    283c:	01000074 	movhi	r4,1
    2840:	21002f84 	addi	r4,r4,190
    2844:	d9003515 	stw	r4,212(sp)
    2848:	003b5406 	br	159c <__alt_data_end+0xfffe219c>
    284c:	d8802a17 	ldw	r2,168(sp)
    2850:	00c00184 	movi	r3,6
    2854:	1880012e 	bgeu	r3,r2,285c <___vfprintf_internal_r+0x1d68>
    2858:	1805883a 	mov	r2,r3
    285c:	d8802b15 	stw	r2,172(sp)
    2860:	1000ef16 	blt	r2,zero,2c20 <___vfprintf_internal_r+0x212c>
    2864:	04000074 	movhi	r16,1
    2868:	d8802915 	stw	r2,164(sp)
    286c:	dcc02e15 	stw	r19,184(sp)
    2870:	d8002a15 	stw	zero,168(sp)
    2874:	d8003215 	stw	zero,200(sp)
    2878:	84002904 	addi	r16,r16,164
    287c:	0039883a 	mov	fp,zero
    2880:	003a8006 	br	1284 <__alt_data_end+0xfffe1e84>
    2884:	0021883a 	mov	r16,zero
    2888:	003e0706 	br	20a8 <__alt_data_end+0xfffe2ca8>
    288c:	d9002d17 	ldw	r4,180(sp)
    2890:	d9801e04 	addi	r6,sp,120
    2894:	b80b883a 	mov	r5,r23
    2898:	00077e40 	call	77e4 <__sprint_r>
    289c:	1039991e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    28a0:	d8802617 	ldw	r2,152(sp)
    28a4:	d9403317 	ldw	r5,204(sp)
    28a8:	d8c02017 	ldw	r3,128(sp)
    28ac:	da000404 	addi	r8,sp,16
    28b0:	2885c83a 	sub	r2,r5,r2
    28b4:	003dfb06 	br	20a4 <__alt_data_end+0xfffe2ca4>
    28b8:	9080004c 	andi	r2,r18,1
    28bc:	103e8f1e 	bne	r2,zero,22fc <__alt_data_end+0xfffe2efc>
    28c0:	d8802117 	ldw	r2,132(sp)
    28c4:	003e9e06 	br	2340 <__alt_data_end+0xfffe2f40>
    28c8:	1025883a 	mov	r18,r2
    28cc:	0039883a 	mov	fp,zero
    28d0:	00800084 	movi	r2,2
    28d4:	003fd306 	br	2824 <__alt_data_end+0xfffe3424>
    28d8:	07000b44 	movi	fp,45
    28dc:	df002785 	stb	fp,158(sp)
    28e0:	003a1b06 	br	1150 <__alt_data_end+0xfffe1d50>
    28e4:	00c00b44 	movi	r3,45
    28e8:	d8c02785 	stb	r3,158(sp)
    28ec:	d8802915 	stw	r2,164(sp)
    28f0:	dc802c17 	ldw	r18,176(sp)
    28f4:	d8002a15 	stw	zero,168(sp)
    28f8:	07000b44 	movi	fp,45
    28fc:	003a5e06 	br	1278 <__alt_data_end+0xfffe1e78>
    2900:	04000074 	movhi	r16,1
    2904:	84001e04 	addi	r16,r16,120
    2908:	003f4706 	br	2628 <__alt_data_end+0xfffe3228>
    290c:	d9002e17 	ldw	r4,184(sp)
    2910:	d9402f17 	ldw	r5,188(sp)
    2914:	20800017 	ldw	r2,0(r4)
    2918:	21000104 	addi	r4,r4,4
    291c:	d9002e15 	stw	r4,184(sp)
    2920:	11400015 	stw	r5,0(r2)
    2924:	0038ab06 	br	bd4 <__alt_data_end+0xfffe17d4>
    2928:	dd802617 	ldw	r22,152(sp)
    292c:	00bfff44 	movi	r2,-3
    2930:	b0801c16 	blt	r22,r2,29a4 <___vfprintf_internal_r+0x1eb0>
    2934:	d9402a17 	ldw	r5,168(sp)
    2938:	2d801a16 	blt	r5,r22,29a4 <___vfprintf_internal_r+0x1eb0>
    293c:	dd803215 	stw	r22,200(sp)
    2940:	003e8906 	br	2368 <__alt_data_end+0xfffe2f68>
    2944:	01000074 	movhi	r4,1
    2948:	21002b84 	addi	r4,r4,174
    294c:	d9002c15 	stw	r4,176(sp)
    2950:	003c9106 	br	1b98 <__alt_data_end+0xfffe2798>
    2954:	e005883a 	mov	r2,fp
    2958:	003e7906 	br	2340 <__alt_data_end+0xfffe2f40>
    295c:	d9002a17 	ldw	r4,168(sp)
    2960:	df002783 	ldbu	fp,158(sp)
    2964:	dcc02e15 	stw	r19,184(sp)
    2968:	d9002915 	stw	r4,164(sp)
    296c:	d9002b15 	stw	r4,172(sp)
    2970:	d8002a15 	stw	zero,168(sp)
    2974:	d8003215 	stw	zero,200(sp)
    2978:	003a3b06 	br	1268 <__alt_data_end+0xfffe1e68>
    297c:	9080004c 	andi	r2,r18,1
    2980:	0039883a 	mov	fp,zero
    2984:	10000426 	beq	r2,zero,2998 <___vfprintf_internal_r+0x1ea4>
    2988:	00800c04 	movi	r2,48
    298c:	dc001dc4 	addi	r16,sp,119
    2990:	d8801dc5 	stb	r2,119(sp)
    2994:	003b6406 	br	1728 <__alt_data_end+0xfffe2328>
    2998:	d8002b15 	stw	zero,172(sp)
    299c:	dc001e04 	addi	r16,sp,120
    29a0:	003a2b06 	br	1250 <__alt_data_end+0xfffe1e50>
    29a4:	8c7fff84 	addi	r17,r17,-2
    29a8:	b5bfffc4 	addi	r22,r22,-1
    29ac:	dd802615 	stw	r22,152(sp)
    29b0:	dc4022c5 	stb	r17,139(sp)
    29b4:	b000bf16 	blt	r22,zero,2cb4 <___vfprintf_internal_r+0x21c0>
    29b8:	00800ac4 	movi	r2,43
    29bc:	d8802305 	stb	r2,140(sp)
    29c0:	00800244 	movi	r2,9
    29c4:	15807016 	blt	r2,r22,2b88 <___vfprintf_internal_r+0x2094>
    29c8:	00800c04 	movi	r2,48
    29cc:	b5800c04 	addi	r22,r22,48
    29d0:	d8802345 	stb	r2,141(sp)
    29d4:	dd802385 	stb	r22,142(sp)
    29d8:	d88023c4 	addi	r2,sp,143
    29dc:	df0022c4 	addi	fp,sp,139
    29e0:	d8c03317 	ldw	r3,204(sp)
    29e4:	1739c83a 	sub	fp,r2,fp
    29e8:	d9003317 	ldw	r4,204(sp)
    29ec:	e0c7883a 	add	r3,fp,r3
    29f0:	df003a15 	stw	fp,232(sp)
    29f4:	d8c02b15 	stw	r3,172(sp)
    29f8:	00800044 	movi	r2,1
    29fc:	1100b30e 	bge	r2,r4,2ccc <___vfprintf_internal_r+0x21d8>
    2a00:	d8c02b17 	ldw	r3,172(sp)
    2a04:	18c00044 	addi	r3,r3,1
    2a08:	d8c02b15 	stw	r3,172(sp)
    2a0c:	1805883a 	mov	r2,r3
    2a10:	1800ac16 	blt	r3,zero,2cc4 <___vfprintf_internal_r+0x21d0>
    2a14:	d8003215 	stw	zero,200(sp)
    2a18:	003e5d06 	br	2390 <__alt_data_end+0xfffe2f90>
    2a1c:	d9002d17 	ldw	r4,180(sp)
    2a20:	d9801e04 	addi	r6,sp,120
    2a24:	b80b883a 	mov	r5,r23
    2a28:	00077e40 	call	77e4 <__sprint_r>
    2a2c:	1039351e 	bne	r2,zero,f04 <__alt_data_end+0xfffe1b04>
    2a30:	dc402617 	ldw	r17,152(sp)
    2a34:	d8c02017 	ldw	r3,128(sp)
    2a38:	d8801f17 	ldw	r2,124(sp)
    2a3c:	da000404 	addi	r8,sp,16
    2a40:	003ed606 	br	259c <__alt_data_end+0xfffe319c>
    2a44:	182b883a 	mov	r21,r3
    2a48:	d8002a15 	stw	zero,168(sp)
    2a4c:	00388c06 	br	c80 <__alt_data_end+0xfffe1880>
    2a50:	d8802a17 	ldw	r2,168(sp)
    2a54:	103e071e 	bne	r2,zero,2274 <__alt_data_end+0xfffe2e74>
    2a58:	dc002a15 	stw	r16,168(sp)
    2a5c:	003e0506 	br	2274 <__alt_data_end+0xfffe2e74>
    2a60:	d9002a17 	ldw	r4,168(sp)
    2a64:	20c00044 	addi	r3,r4,1
    2a68:	003e0f06 	br	22a8 <__alt_data_end+0xfffe2ea8>
    2a6c:	01400184 	movi	r5,6
    2a70:	d9402a15 	stw	r5,168(sp)
    2a74:	003dff06 	br	2274 <__alt_data_end+0xfffe2e74>
    2a78:	d8802104 	addi	r2,sp,132
    2a7c:	d8800315 	stw	r2,12(sp)
    2a80:	d8802504 	addi	r2,sp,148
    2a84:	d8800215 	stw	r2,8(sp)
    2a88:	d8802604 	addi	r2,sp,152
    2a8c:	d8800115 	stw	r2,4(sp)
    2a90:	d8802a17 	ldw	r2,168(sp)
    2a94:	d9403617 	ldw	r5,216(sp)
    2a98:	d9002d17 	ldw	r4,180(sp)
    2a9c:	d8800015 	stw	r2,0(sp)
    2aa0:	01c000c4 	movi	r7,3
    2aa4:	980d883a 	mov	r6,r19
    2aa8:	da003d15 	stw	r8,244(sp)
    2aac:	00032240 	call	3224 <_dtoa_r>
    2ab0:	d8c02a17 	ldw	r3,168(sp)
    2ab4:	da003d17 	ldw	r8,244(sp)
    2ab8:	1021883a 	mov	r16,r2
    2abc:	10f9883a 	add	fp,r2,r3
    2ac0:	81000007 	ldb	r4,0(r16)
    2ac4:	00800c04 	movi	r2,48
    2ac8:	20805e26 	beq	r4,r2,2c44 <___vfprintf_internal_r+0x2150>
    2acc:	d8c02617 	ldw	r3,152(sp)
    2ad0:	e0f9883a 	add	fp,fp,r3
    2ad4:	003e0a06 	br	2300 <__alt_data_end+0xfffe2f00>
    2ad8:	00c00b44 	movi	r3,45
    2adc:	24e0003c 	xorhi	r19,r4,32768
    2ae0:	d8c02905 	stb	r3,164(sp)
    2ae4:	003de906 	br	228c <__alt_data_end+0xfffe2e8c>
    2ae8:	d8c03217 	ldw	r3,200(sp)
    2aec:	00c07a0e 	bge	zero,r3,2cd8 <___vfprintf_internal_r+0x21e4>
    2af0:	00800044 	movi	r2,1
    2af4:	d9003317 	ldw	r4,204(sp)
    2af8:	1105883a 	add	r2,r2,r4
    2afc:	d8802b15 	stw	r2,172(sp)
    2b00:	10004e16 	blt	r2,zero,2c3c <___vfprintf_internal_r+0x2148>
    2b04:	044019c4 	movi	r17,103
    2b08:	003e2106 	br	2390 <__alt_data_end+0xfffe2f90>
    2b0c:	d9002a17 	ldw	r4,168(sp)
    2b10:	d8802104 	addi	r2,sp,132
    2b14:	d8800315 	stw	r2,12(sp)
    2b18:	d9000015 	stw	r4,0(sp)
    2b1c:	d8802504 	addi	r2,sp,148
    2b20:	d9403617 	ldw	r5,216(sp)
    2b24:	d9002d17 	ldw	r4,180(sp)
    2b28:	d8800215 	stw	r2,8(sp)
    2b2c:	d8802604 	addi	r2,sp,152
    2b30:	d8800115 	stw	r2,4(sp)
    2b34:	01c000c4 	movi	r7,3
    2b38:	980d883a 	mov	r6,r19
    2b3c:	da003d15 	stw	r8,244(sp)
    2b40:	00032240 	call	3224 <_dtoa_r>
    2b44:	d8c02a17 	ldw	r3,168(sp)
    2b48:	da003d17 	ldw	r8,244(sp)
    2b4c:	1021883a 	mov	r16,r2
    2b50:	00801184 	movi	r2,70
    2b54:	80f9883a 	add	fp,r16,r3
    2b58:	88bfd926 	beq	r17,r2,2ac0 <__alt_data_end+0xfffe36c0>
    2b5c:	003de806 	br	2300 <__alt_data_end+0xfffe2f00>
    2b60:	d9002a17 	ldw	r4,168(sp)
    2b64:	00c04d0e 	bge	zero,r3,2c9c <___vfprintf_internal_r+0x21a8>
    2b68:	2000441e 	bne	r4,zero,2c7c <___vfprintf_internal_r+0x2188>
    2b6c:	9480004c 	andi	r18,r18,1
    2b70:	9000421e 	bne	r18,zero,2c7c <___vfprintf_internal_r+0x2188>
    2b74:	1805883a 	mov	r2,r3
    2b78:	18006f16 	blt	r3,zero,2d38 <___vfprintf_internal_r+0x2244>
    2b7c:	d8c03217 	ldw	r3,200(sp)
    2b80:	d8c02b15 	stw	r3,172(sp)
    2b84:	003e0206 	br	2390 <__alt_data_end+0xfffe2f90>
    2b88:	df0022c4 	addi	fp,sp,139
    2b8c:	dc002a15 	stw	r16,168(sp)
    2b90:	4027883a 	mov	r19,r8
    2b94:	e021883a 	mov	r16,fp
    2b98:	b009883a 	mov	r4,r22
    2b9c:	01400284 	movi	r5,10
    2ba0:	000aef80 	call	aef8 <__modsi3>
    2ba4:	10800c04 	addi	r2,r2,48
    2ba8:	843fffc4 	addi	r16,r16,-1
    2bac:	b009883a 	mov	r4,r22
    2bb0:	01400284 	movi	r5,10
    2bb4:	80800005 	stb	r2,0(r16)
    2bb8:	000ae740 	call	ae74 <__divsi3>
    2bbc:	102d883a 	mov	r22,r2
    2bc0:	00800244 	movi	r2,9
    2bc4:	15bff416 	blt	r2,r22,2b98 <__alt_data_end+0xfffe3798>
    2bc8:	9811883a 	mov	r8,r19
    2bcc:	b0800c04 	addi	r2,r22,48
    2bd0:	8027883a 	mov	r19,r16
    2bd4:	997fffc4 	addi	r5,r19,-1
    2bd8:	98bfffc5 	stb	r2,-1(r19)
    2bdc:	dc002a17 	ldw	r16,168(sp)
    2be0:	2f006d2e 	bgeu	r5,fp,2d98 <___vfprintf_internal_r+0x22a4>
    2be4:	d9c02384 	addi	r7,sp,142
    2be8:	3ccfc83a 	sub	r7,r7,r19
    2bec:	d9002344 	addi	r4,sp,141
    2bf0:	e1cf883a 	add	r7,fp,r7
    2bf4:	00000106 	br	2bfc <___vfprintf_internal_r+0x2108>
    2bf8:	28800003 	ldbu	r2,0(r5)
    2bfc:	20800005 	stb	r2,0(r4)
    2c00:	21000044 	addi	r4,r4,1
    2c04:	29400044 	addi	r5,r5,1
    2c08:	393ffb1e 	bne	r7,r4,2bf8 <__alt_data_end+0xfffe37f8>
    2c0c:	d8802304 	addi	r2,sp,140
    2c10:	14c5c83a 	sub	r2,r2,r19
    2c14:	d8c02344 	addi	r3,sp,141
    2c18:	1885883a 	add	r2,r3,r2
    2c1c:	003f7006 	br	29e0 <__alt_data_end+0xfffe35e0>
    2c20:	0005883a 	mov	r2,zero
    2c24:	003f0f06 	br	2864 <__alt_data_end+0xfffe3464>
    2c28:	d8c03217 	ldw	r3,200(sp)
    2c2c:	18c00044 	addi	r3,r3,1
    2c30:	d8c02b15 	stw	r3,172(sp)
    2c34:	1805883a 	mov	r2,r3
    2c38:	183fb20e 	bge	r3,zero,2b04 <__alt_data_end+0xfffe3704>
    2c3c:	0005883a 	mov	r2,zero
    2c40:	003fb006 	br	2b04 <__alt_data_end+0xfffe3704>
    2c44:	d9003617 	ldw	r4,216(sp)
    2c48:	000d883a 	mov	r6,zero
    2c4c:	000f883a 	mov	r7,zero
    2c50:	980b883a 	mov	r5,r19
    2c54:	d8c03c15 	stw	r3,240(sp)
    2c58:	da003d15 	stw	r8,244(sp)
    2c5c:	000c2cc0 	call	c2cc <__eqdf2>
    2c60:	d8c03c17 	ldw	r3,240(sp)
    2c64:	da003d17 	ldw	r8,244(sp)
    2c68:	103f9826 	beq	r2,zero,2acc <__alt_data_end+0xfffe36cc>
    2c6c:	00800044 	movi	r2,1
    2c70:	10c7c83a 	sub	r3,r2,r3
    2c74:	d8c02615 	stw	r3,152(sp)
    2c78:	003f9506 	br	2ad0 <__alt_data_end+0xfffe36d0>
    2c7c:	d9002a17 	ldw	r4,168(sp)
    2c80:	d8c03217 	ldw	r3,200(sp)
    2c84:	20800044 	addi	r2,r4,1
    2c88:	1885883a 	add	r2,r3,r2
    2c8c:	d8802b15 	stw	r2,172(sp)
    2c90:	103dbf0e 	bge	r2,zero,2390 <__alt_data_end+0xfffe2f90>
    2c94:	0005883a 	mov	r2,zero
    2c98:	003dbd06 	br	2390 <__alt_data_end+0xfffe2f90>
    2c9c:	2000201e 	bne	r4,zero,2d20 <___vfprintf_internal_r+0x222c>
    2ca0:	9480004c 	andi	r18,r18,1
    2ca4:	90001e1e 	bne	r18,zero,2d20 <___vfprintf_internal_r+0x222c>
    2ca8:	00800044 	movi	r2,1
    2cac:	d8802b15 	stw	r2,172(sp)
    2cb0:	003db706 	br	2390 <__alt_data_end+0xfffe2f90>
    2cb4:	00800b44 	movi	r2,45
    2cb8:	05adc83a 	sub	r22,zero,r22
    2cbc:	d8802305 	stb	r2,140(sp)
    2cc0:	003f3f06 	br	29c0 <__alt_data_end+0xfffe35c0>
    2cc4:	0005883a 	mov	r2,zero
    2cc8:	003f5206 	br	2a14 <__alt_data_end+0xfffe3614>
    2ccc:	90a4703a 	and	r18,r18,r2
    2cd0:	903f4e26 	beq	r18,zero,2a0c <__alt_data_end+0xfffe360c>
    2cd4:	003f4a06 	br	2a00 <__alt_data_end+0xfffe3600>
    2cd8:	00800084 	movi	r2,2
    2cdc:	10c5c83a 	sub	r2,r2,r3
    2ce0:	003f8406 	br	2af4 <__alt_data_end+0xfffe36f4>
    2ce4:	d9402e17 	ldw	r5,184(sp)
    2ce8:	d9002e17 	ldw	r4,184(sp)
    2cec:	ac400043 	ldbu	r17,1(r21)
    2cf0:	29400017 	ldw	r5,0(r5)
    2cf4:	20800104 	addi	r2,r4,4
    2cf8:	d8802e15 	stw	r2,184(sp)
    2cfc:	d9402a15 	stw	r5,168(sp)
    2d00:	182b883a 	mov	r21,r3
    2d04:	283e7b0e 	bge	r5,zero,26f4 <__alt_data_end+0xfffe32f4>
    2d08:	8c403fcc 	andi	r17,r17,255
    2d0c:	017fffc4 	movi	r5,-1
    2d10:	8c40201c 	xori	r17,r17,128
    2d14:	d9402a15 	stw	r5,168(sp)
    2d18:	8c7fe004 	addi	r17,r17,-128
    2d1c:	0037d706 	br	c7c <__alt_data_end+0xfffe187c>
    2d20:	d8c02a17 	ldw	r3,168(sp)
    2d24:	18c00084 	addi	r3,r3,2
    2d28:	d8c02b15 	stw	r3,172(sp)
    2d2c:	1805883a 	mov	r2,r3
    2d30:	183d970e 	bge	r3,zero,2390 <__alt_data_end+0xfffe2f90>
    2d34:	003fd706 	br	2c94 <__alt_data_end+0xfffe3894>
    2d38:	0005883a 	mov	r2,zero
    2d3c:	003f8f06 	br	2b7c <__alt_data_end+0xfffe377c>
    2d40:	9080004c 	andi	r2,r18,1
    2d44:	103f821e 	bne	r2,zero,2b50 <__alt_data_end+0xfffe3750>
    2d48:	d8802117 	ldw	r2,132(sp)
    2d4c:	1405c83a 	sub	r2,r2,r16
    2d50:	d8803315 	stw	r2,204(sp)
    2d54:	b47ef426 	beq	r22,r17,2928 <__alt_data_end+0xfffe3528>
    2d58:	dd802617 	ldw	r22,152(sp)
    2d5c:	003f1206 	br	29a8 <__alt_data_end+0xfffe35a8>
    2d60:	d8c02b03 	ldbu	r3,172(sp)
    2d64:	d8c02785 	stb	r3,158(sp)
    2d68:	0038df06 	br	10e8 <__alt_data_end+0xfffe1ce8>
    2d6c:	d8c02b03 	ldbu	r3,172(sp)
    2d70:	d8c02785 	stb	r3,158(sp)
    2d74:	0038aa06 	br	1020 <__alt_data_end+0xfffe1c20>
    2d78:	d8c02b03 	ldbu	r3,172(sp)
    2d7c:	d8c02785 	stb	r3,158(sp)
    2d80:	003a4306 	br	1690 <__alt_data_end+0xfffe2290>
    2d84:	d8c02b03 	ldbu	r3,172(sp)
    2d88:	d8c02785 	stb	r3,158(sp)
    2d8c:	003af506 	br	1964 <__alt_data_end+0xfffe2564>
    2d90:	0005883a 	mov	r2,zero
    2d94:	003d7b06 	br	2384 <__alt_data_end+0xfffe2f84>
    2d98:	d8802344 	addi	r2,sp,141
    2d9c:	003f1006 	br	29e0 <__alt_data_end+0xfffe35e0>
    2da0:	d8c02b03 	ldbu	r3,172(sp)
    2da4:	d8c02785 	stb	r3,158(sp)
    2da8:	0038fd06 	br	11a0 <__alt_data_end+0xfffe1da0>
    2dac:	d8c02b03 	ldbu	r3,172(sp)
    2db0:	d8c02785 	stb	r3,158(sp)
    2db4:	003a9706 	br	1814 <__alt_data_end+0xfffe2414>
    2db8:	d8c02b03 	ldbu	r3,172(sp)
    2dbc:	d8c02785 	stb	r3,158(sp)
    2dc0:	003a1806 	br	1624 <__alt_data_end+0xfffe2224>
    2dc4:	d8c02b03 	ldbu	r3,172(sp)
    2dc8:	d8c02785 	stb	r3,158(sp)
    2dcc:	003abe06 	br	18c8 <__alt_data_end+0xfffe24c8>

00002dd0 <__vfprintf_internal>:
    2dd0:	00800074 	movhi	r2,1
    2dd4:	10878604 	addi	r2,r2,7704
    2dd8:	300f883a 	mov	r7,r6
    2ddc:	280d883a 	mov	r6,r5
    2de0:	200b883a 	mov	r5,r4
    2de4:	11000017 	ldw	r4,0(r2)
    2de8:	0000af41 	jmpi	af4 <___vfprintf_internal_r>

00002dec <__sbprintf>:
    2dec:	2880030b 	ldhu	r2,12(r5)
    2df0:	2ac01917 	ldw	r11,100(r5)
    2df4:	2a80038b 	ldhu	r10,14(r5)
    2df8:	2a400717 	ldw	r9,28(r5)
    2dfc:	2a000917 	ldw	r8,36(r5)
    2e00:	defee204 	addi	sp,sp,-1144
    2e04:	00c10004 	movi	r3,1024
    2e08:	dc011a15 	stw	r16,1128(sp)
    2e0c:	10bfff4c 	andi	r2,r2,65533
    2e10:	2821883a 	mov	r16,r5
    2e14:	d8cb883a 	add	r5,sp,r3
    2e18:	dc811c15 	stw	r18,1136(sp)
    2e1c:	dc411b15 	stw	r17,1132(sp)
    2e20:	dfc11d15 	stw	ra,1140(sp)
    2e24:	2025883a 	mov	r18,r4
    2e28:	d881030d 	sth	r2,1036(sp)
    2e2c:	dac11915 	stw	r11,1124(sp)
    2e30:	da81038d 	sth	r10,1038(sp)
    2e34:	da410715 	stw	r9,1052(sp)
    2e38:	da010915 	stw	r8,1060(sp)
    2e3c:	dec10015 	stw	sp,1024(sp)
    2e40:	dec10415 	stw	sp,1040(sp)
    2e44:	d8c10215 	stw	r3,1032(sp)
    2e48:	d8c10515 	stw	r3,1044(sp)
    2e4c:	d8010615 	stw	zero,1048(sp)
    2e50:	0000af40 	call	af4 <___vfprintf_internal_r>
    2e54:	1023883a 	mov	r17,r2
    2e58:	10000416 	blt	r2,zero,2e6c <__sbprintf+0x80>
    2e5c:	d9410004 	addi	r5,sp,1024
    2e60:	9009883a 	mov	r4,r18
    2e64:	0004ac80 	call	4ac8 <_fflush_r>
    2e68:	10000d1e 	bne	r2,zero,2ea0 <__sbprintf+0xb4>
    2e6c:	d881030b 	ldhu	r2,1036(sp)
    2e70:	1080100c 	andi	r2,r2,64
    2e74:	10000326 	beq	r2,zero,2e84 <__sbprintf+0x98>
    2e78:	8080030b 	ldhu	r2,12(r16)
    2e7c:	10801014 	ori	r2,r2,64
    2e80:	8080030d 	sth	r2,12(r16)
    2e84:	8805883a 	mov	r2,r17
    2e88:	dfc11d17 	ldw	ra,1140(sp)
    2e8c:	dc811c17 	ldw	r18,1136(sp)
    2e90:	dc411b17 	ldw	r17,1132(sp)
    2e94:	dc011a17 	ldw	r16,1128(sp)
    2e98:	dec11e04 	addi	sp,sp,1144
    2e9c:	f800283a 	ret
    2ea0:	047fffc4 	movi	r17,-1
    2ea4:	003ff106 	br	2e6c <__alt_data_end+0xfffe3a6c>

00002ea8 <__swsetup_r>:
    2ea8:	00800074 	movhi	r2,1
    2eac:	defffd04 	addi	sp,sp,-12
    2eb0:	10878604 	addi	r2,r2,7704
    2eb4:	dc400115 	stw	r17,4(sp)
    2eb8:	2023883a 	mov	r17,r4
    2ebc:	11000017 	ldw	r4,0(r2)
    2ec0:	dc000015 	stw	r16,0(sp)
    2ec4:	dfc00215 	stw	ra,8(sp)
    2ec8:	2821883a 	mov	r16,r5
    2ecc:	20000226 	beq	r4,zero,2ed8 <__swsetup_r+0x30>
    2ed0:	20800e17 	ldw	r2,56(r4)
    2ed4:	10003126 	beq	r2,zero,2f9c <__swsetup_r+0xf4>
    2ed8:	8080030b 	ldhu	r2,12(r16)
    2edc:	10c0020c 	andi	r3,r2,8
    2ee0:	1009883a 	mov	r4,r2
    2ee4:	18000f26 	beq	r3,zero,2f24 <__swsetup_r+0x7c>
    2ee8:	80c00417 	ldw	r3,16(r16)
    2eec:	18001526 	beq	r3,zero,2f44 <__swsetup_r+0x9c>
    2ef0:	1100004c 	andi	r4,r2,1
    2ef4:	20001c1e 	bne	r4,zero,2f68 <__swsetup_r+0xc0>
    2ef8:	1080008c 	andi	r2,r2,2
    2efc:	1000291e 	bne	r2,zero,2fa4 <__swsetup_r+0xfc>
    2f00:	80800517 	ldw	r2,20(r16)
    2f04:	80800215 	stw	r2,8(r16)
    2f08:	18001c26 	beq	r3,zero,2f7c <__swsetup_r+0xd4>
    2f0c:	0005883a 	mov	r2,zero
    2f10:	dfc00217 	ldw	ra,8(sp)
    2f14:	dc400117 	ldw	r17,4(sp)
    2f18:	dc000017 	ldw	r16,0(sp)
    2f1c:	dec00304 	addi	sp,sp,12
    2f20:	f800283a 	ret
    2f24:	2080040c 	andi	r2,r4,16
    2f28:	10002e26 	beq	r2,zero,2fe4 <__swsetup_r+0x13c>
    2f2c:	2080010c 	andi	r2,r4,4
    2f30:	10001e1e 	bne	r2,zero,2fac <__swsetup_r+0x104>
    2f34:	80c00417 	ldw	r3,16(r16)
    2f38:	20800214 	ori	r2,r4,8
    2f3c:	8080030d 	sth	r2,12(r16)
    2f40:	183feb1e 	bne	r3,zero,2ef0 <__alt_data_end+0xfffe3af0>
    2f44:	1100a00c 	andi	r4,r2,640
    2f48:	01408004 	movi	r5,512
    2f4c:	217fe826 	beq	r4,r5,2ef0 <__alt_data_end+0xfffe3af0>
    2f50:	800b883a 	mov	r5,r16
    2f54:	8809883a 	mov	r4,r17
    2f58:	000559c0 	call	559c <__smakebuf_r>
    2f5c:	8080030b 	ldhu	r2,12(r16)
    2f60:	80c00417 	ldw	r3,16(r16)
    2f64:	003fe206 	br	2ef0 <__alt_data_end+0xfffe3af0>
    2f68:	80800517 	ldw	r2,20(r16)
    2f6c:	80000215 	stw	zero,8(r16)
    2f70:	0085c83a 	sub	r2,zero,r2
    2f74:	80800615 	stw	r2,24(r16)
    2f78:	183fe41e 	bne	r3,zero,2f0c <__alt_data_end+0xfffe3b0c>
    2f7c:	80c0030b 	ldhu	r3,12(r16)
    2f80:	0005883a 	mov	r2,zero
    2f84:	1900200c 	andi	r4,r3,128
    2f88:	203fe126 	beq	r4,zero,2f10 <__alt_data_end+0xfffe3b10>
    2f8c:	18c01014 	ori	r3,r3,64
    2f90:	80c0030d 	sth	r3,12(r16)
    2f94:	00bfffc4 	movi	r2,-1
    2f98:	003fdd06 	br	2f10 <__alt_data_end+0xfffe3b10>
    2f9c:	0004eb40 	call	4eb4 <__sinit>
    2fa0:	003fcd06 	br	2ed8 <__alt_data_end+0xfffe3ad8>
    2fa4:	0005883a 	mov	r2,zero
    2fa8:	003fd606 	br	2f04 <__alt_data_end+0xfffe3b04>
    2fac:	81400c17 	ldw	r5,48(r16)
    2fb0:	28000626 	beq	r5,zero,2fcc <__swsetup_r+0x124>
    2fb4:	80801004 	addi	r2,r16,64
    2fb8:	28800326 	beq	r5,r2,2fc8 <__swsetup_r+0x120>
    2fbc:	8809883a 	mov	r4,r17
    2fc0:	00050280 	call	5028 <_free_r>
    2fc4:	8100030b 	ldhu	r4,12(r16)
    2fc8:	80000c15 	stw	zero,48(r16)
    2fcc:	80c00417 	ldw	r3,16(r16)
    2fd0:	00bff6c4 	movi	r2,-37
    2fd4:	1108703a 	and	r4,r2,r4
    2fd8:	80000115 	stw	zero,4(r16)
    2fdc:	80c00015 	stw	r3,0(r16)
    2fe0:	003fd506 	br	2f38 <__alt_data_end+0xfffe3b38>
    2fe4:	00800244 	movi	r2,9
    2fe8:	88800015 	stw	r2,0(r17)
    2fec:	20801014 	ori	r2,r4,64
    2ff0:	8080030d 	sth	r2,12(r16)
    2ff4:	00bfffc4 	movi	r2,-1
    2ff8:	003fc506 	br	2f10 <__alt_data_end+0xfffe3b10>

00002ffc <quorem>:
    2ffc:	defff204 	addi	sp,sp,-56
    3000:	ddc00b15 	stw	r23,44(sp)
    3004:	20800417 	ldw	r2,16(r4)
    3008:	2dc00417 	ldw	r23,16(r5)
    300c:	dfc00d15 	stw	ra,52(sp)
    3010:	df000c15 	stw	fp,48(sp)
    3014:	dd800a15 	stw	r22,40(sp)
    3018:	dd400915 	stw	r21,36(sp)
    301c:	dd000815 	stw	r20,32(sp)
    3020:	dcc00715 	stw	r19,28(sp)
    3024:	dc800615 	stw	r18,24(sp)
    3028:	dc400515 	stw	r17,20(sp)
    302c:	dc000415 	stw	r16,16(sp)
    3030:	15c07a16 	blt	r2,r23,321c <quorem+0x220>
    3034:	bdffffc4 	addi	r23,r23,-1
    3038:	bde9883a 	add	r20,r23,r23
    303c:	28c00504 	addi	r3,r5,20
    3040:	a529883a 	add	r20,r20,r20
    3044:	1d39883a 	add	fp,r3,r20
    3048:	24c00504 	addi	r19,r4,20
    304c:	d9400215 	stw	r5,8(sp)
    3050:	9d29883a 	add	r20,r19,r20
    3054:	e1400017 	ldw	r5,0(fp)
    3058:	d9000015 	stw	r4,0(sp)
    305c:	a1000017 	ldw	r4,0(r20)
    3060:	29400044 	addi	r5,r5,1
    3064:	d8c00115 	stw	r3,4(sp)
    3068:	dd000315 	stw	r20,12(sp)
    306c:	000af6c0 	call	af6c <__udivsi3>
    3070:	1025883a 	mov	r18,r2
    3074:	10003026 	beq	r2,zero,3138 <quorem+0x13c>
    3078:	dc400117 	ldw	r17,4(sp)
    307c:	9829883a 	mov	r20,r19
    3080:	002d883a 	mov	r22,zero
    3084:	0021883a 	mov	r16,zero
    3088:	8d400017 	ldw	r21,0(r17)
    308c:	900b883a 	mov	r5,r18
    3090:	8c400104 	addi	r17,r17,4
    3094:	a93fffcc 	andi	r4,r21,65535
    3098:	000b0280 	call	b028 <__mulsi3>
    309c:	a808d43a 	srli	r4,r21,16
    30a0:	900b883a 	mov	r5,r18
    30a4:	15ad883a 	add	r22,r2,r22
    30a8:	000b0280 	call	b028 <__mulsi3>
    30ac:	a1000017 	ldw	r4,0(r20)
    30b0:	b00cd43a 	srli	r6,r22,16
    30b4:	b0ffffcc 	andi	r3,r22,65535
    30b8:	217fffcc 	andi	r5,r4,65535
    30bc:	2c21883a 	add	r16,r5,r16
    30c0:	80c7c83a 	sub	r3,r16,r3
    30c4:	2008d43a 	srli	r4,r4,16
    30c8:	1185883a 	add	r2,r2,r6
    30cc:	1821d43a 	srai	r16,r3,16
    30d0:	117fffcc 	andi	r5,r2,65535
    30d4:	2149c83a 	sub	r4,r4,r5
    30d8:	2421883a 	add	r16,r4,r16
    30dc:	8008943a 	slli	r4,r16,16
    30e0:	18ffffcc 	andi	r3,r3,65535
    30e4:	102cd43a 	srli	r22,r2,16
    30e8:	20c8b03a 	or	r4,r4,r3
    30ec:	a1000015 	stw	r4,0(r20)
    30f0:	8021d43a 	srai	r16,r16,16
    30f4:	a5000104 	addi	r20,r20,4
    30f8:	e47fe32e 	bgeu	fp,r17,3088 <__alt_data_end+0xfffe3c88>
    30fc:	d8c00317 	ldw	r3,12(sp)
    3100:	18800017 	ldw	r2,0(r3)
    3104:	10000c1e 	bne	r2,zero,3138 <quorem+0x13c>
    3108:	18bfff04 	addi	r2,r3,-4
    310c:	9880082e 	bgeu	r19,r2,3130 <quorem+0x134>
    3110:	18ffff17 	ldw	r3,-4(r3)
    3114:	18000326 	beq	r3,zero,3124 <quorem+0x128>
    3118:	00000506 	br	3130 <quorem+0x134>
    311c:	10c00017 	ldw	r3,0(r2)
    3120:	1800031e 	bne	r3,zero,3130 <quorem+0x134>
    3124:	10bfff04 	addi	r2,r2,-4
    3128:	bdffffc4 	addi	r23,r23,-1
    312c:	98bffb36 	bltu	r19,r2,311c <__alt_data_end+0xfffe3d1c>
    3130:	d8c00017 	ldw	r3,0(sp)
    3134:	1dc00415 	stw	r23,16(r3)
    3138:	d9400217 	ldw	r5,8(sp)
    313c:	d9000017 	ldw	r4,0(sp)
    3140:	0006c3c0 	call	6c3c <__mcmp>
    3144:	10002816 	blt	r2,zero,31e8 <quorem+0x1ec>
    3148:	dc400117 	ldw	r17,4(sp)
    314c:	94800044 	addi	r18,r18,1
    3150:	980d883a 	mov	r6,r19
    3154:	0007883a 	mov	r3,zero
    3158:	31000017 	ldw	r4,0(r6)
    315c:	89400017 	ldw	r5,0(r17)
    3160:	31800104 	addi	r6,r6,4
    3164:	20bfffcc 	andi	r2,r4,65535
    3168:	10c7883a 	add	r3,r2,r3
    316c:	28bfffcc 	andi	r2,r5,65535
    3170:	1885c83a 	sub	r2,r3,r2
    3174:	280ad43a 	srli	r5,r5,16
    3178:	2008d43a 	srli	r4,r4,16
    317c:	1007d43a 	srai	r3,r2,16
    3180:	10bfffcc 	andi	r2,r2,65535
    3184:	2149c83a 	sub	r4,r4,r5
    3188:	20c9883a 	add	r4,r4,r3
    318c:	200a943a 	slli	r5,r4,16
    3190:	8c400104 	addi	r17,r17,4
    3194:	2007d43a 	srai	r3,r4,16
    3198:	2884b03a 	or	r2,r5,r2
    319c:	30bfff15 	stw	r2,-4(r6)
    31a0:	e47fed2e 	bgeu	fp,r17,3158 <__alt_data_end+0xfffe3d58>
    31a4:	bdc5883a 	add	r2,r23,r23
    31a8:	1085883a 	add	r2,r2,r2
    31ac:	9887883a 	add	r3,r19,r2
    31b0:	18800017 	ldw	r2,0(r3)
    31b4:	10000c1e 	bne	r2,zero,31e8 <quorem+0x1ec>
    31b8:	18bfff04 	addi	r2,r3,-4
    31bc:	9880082e 	bgeu	r19,r2,31e0 <quorem+0x1e4>
    31c0:	18ffff17 	ldw	r3,-4(r3)
    31c4:	18000326 	beq	r3,zero,31d4 <quorem+0x1d8>
    31c8:	00000506 	br	31e0 <quorem+0x1e4>
    31cc:	10c00017 	ldw	r3,0(r2)
    31d0:	1800031e 	bne	r3,zero,31e0 <quorem+0x1e4>
    31d4:	10bfff04 	addi	r2,r2,-4
    31d8:	bdffffc4 	addi	r23,r23,-1
    31dc:	98bffb36 	bltu	r19,r2,31cc <__alt_data_end+0xfffe3dcc>
    31e0:	d8c00017 	ldw	r3,0(sp)
    31e4:	1dc00415 	stw	r23,16(r3)
    31e8:	9005883a 	mov	r2,r18
    31ec:	dfc00d17 	ldw	ra,52(sp)
    31f0:	df000c17 	ldw	fp,48(sp)
    31f4:	ddc00b17 	ldw	r23,44(sp)
    31f8:	dd800a17 	ldw	r22,40(sp)
    31fc:	dd400917 	ldw	r21,36(sp)
    3200:	dd000817 	ldw	r20,32(sp)
    3204:	dcc00717 	ldw	r19,28(sp)
    3208:	dc800617 	ldw	r18,24(sp)
    320c:	dc400517 	ldw	r17,20(sp)
    3210:	dc000417 	ldw	r16,16(sp)
    3214:	dec00e04 	addi	sp,sp,56
    3218:	f800283a 	ret
    321c:	0005883a 	mov	r2,zero
    3220:	003ff206 	br	31ec <__alt_data_end+0xfffe3dec>

00003224 <_dtoa_r>:
    3224:	20801017 	ldw	r2,64(r4)
    3228:	deffde04 	addi	sp,sp,-136
    322c:	df002015 	stw	fp,128(sp)
    3230:	dcc01b15 	stw	r19,108(sp)
    3234:	dc801a15 	stw	r18,104(sp)
    3238:	dc401915 	stw	r17,100(sp)
    323c:	dc001815 	stw	r16,96(sp)
    3240:	dfc02115 	stw	ra,132(sp)
    3244:	ddc01f15 	stw	r23,124(sp)
    3248:	dd801e15 	stw	r22,120(sp)
    324c:	dd401d15 	stw	r21,116(sp)
    3250:	dd001c15 	stw	r20,112(sp)
    3254:	d9c00315 	stw	r7,12(sp)
    3258:	2039883a 	mov	fp,r4
    325c:	3023883a 	mov	r17,r6
    3260:	2825883a 	mov	r18,r5
    3264:	dc002417 	ldw	r16,144(sp)
    3268:	3027883a 	mov	r19,r6
    326c:	10000826 	beq	r2,zero,3290 <_dtoa_r+0x6c>
    3270:	21801117 	ldw	r6,68(r4)
    3274:	00c00044 	movi	r3,1
    3278:	100b883a 	mov	r5,r2
    327c:	1986983a 	sll	r3,r3,r6
    3280:	11800115 	stw	r6,4(r2)
    3284:	10c00215 	stw	r3,8(r2)
    3288:	00063600 	call	6360 <_Bfree>
    328c:	e0001015 	stw	zero,64(fp)
    3290:	88002e16 	blt	r17,zero,334c <_dtoa_r+0x128>
    3294:	80000015 	stw	zero,0(r16)
    3298:	889ffc2c 	andhi	r2,r17,32752
    329c:	00dffc34 	movhi	r3,32752
    32a0:	10c01c26 	beq	r2,r3,3314 <_dtoa_r+0xf0>
    32a4:	000d883a 	mov	r6,zero
    32a8:	000f883a 	mov	r7,zero
    32ac:	9009883a 	mov	r4,r18
    32b0:	980b883a 	mov	r5,r19
    32b4:	000c2cc0 	call	c2cc <__eqdf2>
    32b8:	10002b1e 	bne	r2,zero,3368 <_dtoa_r+0x144>
    32bc:	d9c02317 	ldw	r7,140(sp)
    32c0:	00800044 	movi	r2,1
    32c4:	38800015 	stw	r2,0(r7)
    32c8:	d8802517 	ldw	r2,148(sp)
    32cc:	10019e26 	beq	r2,zero,3948 <_dtoa_r+0x724>
    32d0:	d8c02517 	ldw	r3,148(sp)
    32d4:	00800074 	movhi	r2,1
    32d8:	10802b44 	addi	r2,r2,173
    32dc:	18800015 	stw	r2,0(r3)
    32e0:	10bfffc4 	addi	r2,r2,-1
    32e4:	dfc02117 	ldw	ra,132(sp)
    32e8:	df002017 	ldw	fp,128(sp)
    32ec:	ddc01f17 	ldw	r23,124(sp)
    32f0:	dd801e17 	ldw	r22,120(sp)
    32f4:	dd401d17 	ldw	r21,116(sp)
    32f8:	dd001c17 	ldw	r20,112(sp)
    32fc:	dcc01b17 	ldw	r19,108(sp)
    3300:	dc801a17 	ldw	r18,104(sp)
    3304:	dc401917 	ldw	r17,100(sp)
    3308:	dc001817 	ldw	r16,96(sp)
    330c:	dec02204 	addi	sp,sp,136
    3310:	f800283a 	ret
    3314:	d8c02317 	ldw	r3,140(sp)
    3318:	0089c3c4 	movi	r2,9999
    331c:	18800015 	stw	r2,0(r3)
    3320:	90017726 	beq	r18,zero,3900 <_dtoa_r+0x6dc>
    3324:	00800074 	movhi	r2,1
    3328:	10803704 	addi	r2,r2,220
    332c:	d9002517 	ldw	r4,148(sp)
    3330:	203fec26 	beq	r4,zero,32e4 <__alt_data_end+0xfffe3ee4>
    3334:	10c000c7 	ldb	r3,3(r2)
    3338:	1801781e 	bne	r3,zero,391c <_dtoa_r+0x6f8>
    333c:	10c000c4 	addi	r3,r2,3
    3340:	d9802517 	ldw	r6,148(sp)
    3344:	30c00015 	stw	r3,0(r6)
    3348:	003fe606 	br	32e4 <__alt_data_end+0xfffe3ee4>
    334c:	04e00034 	movhi	r19,32768
    3350:	9cffffc4 	addi	r19,r19,-1
    3354:	00800044 	movi	r2,1
    3358:	8ce6703a 	and	r19,r17,r19
    335c:	80800015 	stw	r2,0(r16)
    3360:	9823883a 	mov	r17,r19
    3364:	003fcc06 	br	3298 <__alt_data_end+0xfffe3e98>
    3368:	d8800204 	addi	r2,sp,8
    336c:	d8800015 	stw	r2,0(sp)
    3370:	d9c00104 	addi	r7,sp,4
    3374:	900b883a 	mov	r5,r18
    3378:	980d883a 	mov	r6,r19
    337c:	e009883a 	mov	r4,fp
    3380:	8820d53a 	srli	r16,r17,20
    3384:	00070080 	call	7008 <__d2b>
    3388:	d8800915 	stw	r2,36(sp)
    338c:	8001651e 	bne	r16,zero,3924 <_dtoa_r+0x700>
    3390:	dd800217 	ldw	r22,8(sp)
    3394:	dc000117 	ldw	r16,4(sp)
    3398:	00800804 	movi	r2,32
    339c:	b421883a 	add	r16,r22,r16
    33a0:	80c10c84 	addi	r3,r16,1074
    33a4:	10c2d10e 	bge	r2,r3,3eec <_dtoa_r+0xcc8>
    33a8:	00801004 	movi	r2,64
    33ac:	81010484 	addi	r4,r16,1042
    33b0:	10c7c83a 	sub	r3,r2,r3
    33b4:	9108d83a 	srl	r4,r18,r4
    33b8:	88e2983a 	sll	r17,r17,r3
    33bc:	2448b03a 	or	r4,r4,r17
    33c0:	000d7e80 	call	d7e8 <__floatunsidf>
    33c4:	017f8434 	movhi	r5,65040
    33c8:	01800044 	movi	r6,1
    33cc:	1009883a 	mov	r4,r2
    33d0:	194b883a 	add	r5,r3,r5
    33d4:	843fffc4 	addi	r16,r16,-1
    33d8:	d9801115 	stw	r6,68(sp)
    33dc:	000d883a 	mov	r6,zero
    33e0:	01cffe34 	movhi	r7,16376
    33e4:	000cd900 	call	cd90 <__subdf3>
    33e8:	0198dbf4 	movhi	r6,25455
    33ec:	01cff4f4 	movhi	r7,16339
    33f0:	3190d844 	addi	r6,r6,17249
    33f4:	39e1e9c4 	addi	r7,r7,-30809
    33f8:	1009883a 	mov	r4,r2
    33fc:	180b883a 	mov	r5,r3
    3400:	000c5240 	call	c524 <__muldf3>
    3404:	01a2d874 	movhi	r6,35681
    3408:	01cff1f4 	movhi	r7,16327
    340c:	31b22cc4 	addi	r6,r6,-14157
    3410:	39e28a04 	addi	r7,r7,-30168
    3414:	180b883a 	mov	r5,r3
    3418:	1009883a 	mov	r4,r2
    341c:	000b0500 	call	b050 <__adddf3>
    3420:	8009883a 	mov	r4,r16
    3424:	1029883a 	mov	r20,r2
    3428:	1823883a 	mov	r17,r3
    342c:	000d70c0 	call	d70c <__floatsidf>
    3430:	019427f4 	movhi	r6,20639
    3434:	01cff4f4 	movhi	r7,16339
    3438:	319e7ec4 	addi	r6,r6,31227
    343c:	39d104c4 	addi	r7,r7,17427
    3440:	1009883a 	mov	r4,r2
    3444:	180b883a 	mov	r5,r3
    3448:	000c5240 	call	c524 <__muldf3>
    344c:	100d883a 	mov	r6,r2
    3450:	180f883a 	mov	r7,r3
    3454:	a009883a 	mov	r4,r20
    3458:	880b883a 	mov	r5,r17
    345c:	000b0500 	call	b050 <__adddf3>
    3460:	1009883a 	mov	r4,r2
    3464:	180b883a 	mov	r5,r3
    3468:	1029883a 	mov	r20,r2
    346c:	1823883a 	mov	r17,r3
    3470:	000d68c0 	call	d68c <__fixdfsi>
    3474:	000d883a 	mov	r6,zero
    3478:	000f883a 	mov	r7,zero
    347c:	a009883a 	mov	r4,r20
    3480:	880b883a 	mov	r5,r17
    3484:	d8800515 	stw	r2,20(sp)
    3488:	000c4300 	call	c430 <__ledf2>
    348c:	10028716 	blt	r2,zero,3eac <_dtoa_r+0xc88>
    3490:	d8c00517 	ldw	r3,20(sp)
    3494:	00800584 	movi	r2,22
    3498:	10c27536 	bltu	r2,r3,3e70 <_dtoa_r+0xc4c>
    349c:	180490fa 	slli	r2,r3,3
    34a0:	00c00074 	movhi	r3,1
    34a4:	18c05304 	addi	r3,r3,332
    34a8:	1885883a 	add	r2,r3,r2
    34ac:	11000017 	ldw	r4,0(r2)
    34b0:	11400117 	ldw	r5,4(r2)
    34b4:	900d883a 	mov	r6,r18
    34b8:	980f883a 	mov	r7,r19
    34bc:	000c3540 	call	c354 <__gedf2>
    34c0:	00828d0e 	bge	zero,r2,3ef8 <_dtoa_r+0xcd4>
    34c4:	d9000517 	ldw	r4,20(sp)
    34c8:	d8000e15 	stw	zero,56(sp)
    34cc:	213fffc4 	addi	r4,r4,-1
    34d0:	d9000515 	stw	r4,20(sp)
    34d4:	b42dc83a 	sub	r22,r22,r16
    34d8:	b5bfffc4 	addi	r22,r22,-1
    34dc:	b0026f16 	blt	r22,zero,3e9c <_dtoa_r+0xc78>
    34e0:	d8000815 	stw	zero,32(sp)
    34e4:	d9c00517 	ldw	r7,20(sp)
    34e8:	38026416 	blt	r7,zero,3e7c <_dtoa_r+0xc58>
    34ec:	b1ed883a 	add	r22,r22,r7
    34f0:	d9c00d15 	stw	r7,52(sp)
    34f4:	d8000a15 	stw	zero,40(sp)
    34f8:	d9800317 	ldw	r6,12(sp)
    34fc:	00800244 	movi	r2,9
    3500:	11811436 	bltu	r2,r6,3954 <_dtoa_r+0x730>
    3504:	00800144 	movi	r2,5
    3508:	1184e10e 	bge	r2,r6,4890 <_dtoa_r+0x166c>
    350c:	31bfff04 	addi	r6,r6,-4
    3510:	d9800315 	stw	r6,12(sp)
    3514:	0023883a 	mov	r17,zero
    3518:	d9800317 	ldw	r6,12(sp)
    351c:	008000c4 	movi	r2,3
    3520:	30836726 	beq	r6,r2,42c0 <_dtoa_r+0x109c>
    3524:	1183410e 	bge	r2,r6,422c <_dtoa_r+0x1008>
    3528:	d9c00317 	ldw	r7,12(sp)
    352c:	00800104 	movi	r2,4
    3530:	38827c26 	beq	r7,r2,3f24 <_dtoa_r+0xd00>
    3534:	00800144 	movi	r2,5
    3538:	3884c41e 	bne	r7,r2,484c <_dtoa_r+0x1628>
    353c:	00800044 	movi	r2,1
    3540:	d8800b15 	stw	r2,44(sp)
    3544:	d8c00517 	ldw	r3,20(sp)
    3548:	d9002217 	ldw	r4,136(sp)
    354c:	1907883a 	add	r3,r3,r4
    3550:	19800044 	addi	r6,r3,1
    3554:	d8c00c15 	stw	r3,48(sp)
    3558:	d9800615 	stw	r6,24(sp)
    355c:	0183a40e 	bge	zero,r6,43f0 <_dtoa_r+0x11cc>
    3560:	d9800617 	ldw	r6,24(sp)
    3564:	3021883a 	mov	r16,r6
    3568:	e0001115 	stw	zero,68(fp)
    356c:	008005c4 	movi	r2,23
    3570:	1184c92e 	bgeu	r2,r6,4898 <_dtoa_r+0x1674>
    3574:	00c00044 	movi	r3,1
    3578:	00800104 	movi	r2,4
    357c:	1085883a 	add	r2,r2,r2
    3580:	11000504 	addi	r4,r2,20
    3584:	180b883a 	mov	r5,r3
    3588:	18c00044 	addi	r3,r3,1
    358c:	313ffb2e 	bgeu	r6,r4,357c <__alt_data_end+0xfffe417c>
    3590:	e1401115 	stw	r5,68(fp)
    3594:	e009883a 	mov	r4,fp
    3598:	00062b80 	call	62b8 <_Balloc>
    359c:	d8800715 	stw	r2,28(sp)
    35a0:	e0801015 	stw	r2,64(fp)
    35a4:	00800384 	movi	r2,14
    35a8:	1400f736 	bltu	r2,r16,3988 <_dtoa_r+0x764>
    35ac:	8800f626 	beq	r17,zero,3988 <_dtoa_r+0x764>
    35b0:	d9c00517 	ldw	r7,20(sp)
    35b4:	01c39a0e 	bge	zero,r7,4420 <_dtoa_r+0x11fc>
    35b8:	388003cc 	andi	r2,r7,15
    35bc:	100490fa 	slli	r2,r2,3
    35c0:	382bd13a 	srai	r21,r7,4
    35c4:	00c00074 	movhi	r3,1
    35c8:	18c05304 	addi	r3,r3,332
    35cc:	1885883a 	add	r2,r3,r2
    35d0:	a8c0040c 	andi	r3,r21,16
    35d4:	12400017 	ldw	r9,0(r2)
    35d8:	12000117 	ldw	r8,4(r2)
    35dc:	18037926 	beq	r3,zero,43c4 <_dtoa_r+0x11a0>
    35e0:	00800074 	movhi	r2,1
    35e4:	10804904 	addi	r2,r2,292
    35e8:	11800817 	ldw	r6,32(r2)
    35ec:	11c00917 	ldw	r7,36(r2)
    35f0:	9009883a 	mov	r4,r18
    35f4:	980b883a 	mov	r5,r19
    35f8:	da001715 	stw	r8,92(sp)
    35fc:	da401615 	stw	r9,88(sp)
    3600:	000b8fc0 	call	b8fc <__divdf3>
    3604:	da001717 	ldw	r8,92(sp)
    3608:	da401617 	ldw	r9,88(sp)
    360c:	ad4003cc 	andi	r21,r21,15
    3610:	040000c4 	movi	r16,3
    3614:	1023883a 	mov	r17,r2
    3618:	1829883a 	mov	r20,r3
    361c:	a8001126 	beq	r21,zero,3664 <_dtoa_r+0x440>
    3620:	05c00074 	movhi	r23,1
    3624:	bdc04904 	addi	r23,r23,292
    3628:	4805883a 	mov	r2,r9
    362c:	4007883a 	mov	r3,r8
    3630:	a980004c 	andi	r6,r21,1
    3634:	1009883a 	mov	r4,r2
    3638:	a82bd07a 	srai	r21,r21,1
    363c:	180b883a 	mov	r5,r3
    3640:	30000426 	beq	r6,zero,3654 <_dtoa_r+0x430>
    3644:	b9800017 	ldw	r6,0(r23)
    3648:	b9c00117 	ldw	r7,4(r23)
    364c:	84000044 	addi	r16,r16,1
    3650:	000c5240 	call	c524 <__muldf3>
    3654:	bdc00204 	addi	r23,r23,8
    3658:	a83ff51e 	bne	r21,zero,3630 <__alt_data_end+0xfffe4230>
    365c:	1013883a 	mov	r9,r2
    3660:	1811883a 	mov	r8,r3
    3664:	480d883a 	mov	r6,r9
    3668:	400f883a 	mov	r7,r8
    366c:	8809883a 	mov	r4,r17
    3670:	a00b883a 	mov	r5,r20
    3674:	000b8fc0 	call	b8fc <__divdf3>
    3678:	d8800f15 	stw	r2,60(sp)
    367c:	d8c01015 	stw	r3,64(sp)
    3680:	d8c00e17 	ldw	r3,56(sp)
    3684:	18000626 	beq	r3,zero,36a0 <_dtoa_r+0x47c>
    3688:	d9000f17 	ldw	r4,60(sp)
    368c:	d9401017 	ldw	r5,64(sp)
    3690:	000d883a 	mov	r6,zero
    3694:	01cffc34 	movhi	r7,16368
    3698:	000c4300 	call	c430 <__ledf2>
    369c:	10040b16 	blt	r2,zero,46cc <_dtoa_r+0x14a8>
    36a0:	8009883a 	mov	r4,r16
    36a4:	000d70c0 	call	d70c <__floatsidf>
    36a8:	d9800f17 	ldw	r6,60(sp)
    36ac:	d9c01017 	ldw	r7,64(sp)
    36b0:	1009883a 	mov	r4,r2
    36b4:	180b883a 	mov	r5,r3
    36b8:	000c5240 	call	c524 <__muldf3>
    36bc:	000d883a 	mov	r6,zero
    36c0:	01d00734 	movhi	r7,16412
    36c4:	1009883a 	mov	r4,r2
    36c8:	180b883a 	mov	r5,r3
    36cc:	000b0500 	call	b050 <__adddf3>
    36d0:	1021883a 	mov	r16,r2
    36d4:	d8800617 	ldw	r2,24(sp)
    36d8:	047f3034 	movhi	r17,64704
    36dc:	1c63883a 	add	r17,r3,r17
    36e0:	10031826 	beq	r2,zero,4344 <_dtoa_r+0x1120>
    36e4:	d8c00517 	ldw	r3,20(sp)
    36e8:	db000617 	ldw	r12,24(sp)
    36ec:	d8c01315 	stw	r3,76(sp)
    36f0:	d9000b17 	ldw	r4,44(sp)
    36f4:	20038f26 	beq	r4,zero,4534 <_dtoa_r+0x1310>
    36f8:	60bfffc4 	addi	r2,r12,-1
    36fc:	100490fa 	slli	r2,r2,3
    3700:	00c00074 	movhi	r3,1
    3704:	18c05304 	addi	r3,r3,332
    3708:	1885883a 	add	r2,r3,r2
    370c:	11800017 	ldw	r6,0(r2)
    3710:	11c00117 	ldw	r7,4(r2)
    3714:	d8800717 	ldw	r2,28(sp)
    3718:	0009883a 	mov	r4,zero
    371c:	014ff834 	movhi	r5,16352
    3720:	db001615 	stw	r12,88(sp)
    3724:	15c00044 	addi	r23,r2,1
    3728:	000b8fc0 	call	b8fc <__divdf3>
    372c:	800d883a 	mov	r6,r16
    3730:	880f883a 	mov	r7,r17
    3734:	1009883a 	mov	r4,r2
    3738:	180b883a 	mov	r5,r3
    373c:	000cd900 	call	cd90 <__subdf3>
    3740:	d9401017 	ldw	r5,64(sp)
    3744:	d9000f17 	ldw	r4,60(sp)
    3748:	102b883a 	mov	r21,r2
    374c:	d8c01215 	stw	r3,72(sp)
    3750:	000d68c0 	call	d68c <__fixdfsi>
    3754:	1009883a 	mov	r4,r2
    3758:	1029883a 	mov	r20,r2
    375c:	000d70c0 	call	d70c <__floatsidf>
    3760:	d9000f17 	ldw	r4,60(sp)
    3764:	d9401017 	ldw	r5,64(sp)
    3768:	100d883a 	mov	r6,r2
    376c:	180f883a 	mov	r7,r3
    3770:	000cd900 	call	cd90 <__subdf3>
    3774:	1823883a 	mov	r17,r3
    3778:	d8c00717 	ldw	r3,28(sp)
    377c:	d9401217 	ldw	r5,72(sp)
    3780:	a2000c04 	addi	r8,r20,48
    3784:	1021883a 	mov	r16,r2
    3788:	1a000005 	stb	r8,0(r3)
    378c:	800d883a 	mov	r6,r16
    3790:	880f883a 	mov	r7,r17
    3794:	a809883a 	mov	r4,r21
    3798:	4029883a 	mov	r20,r8
    379c:	000c3540 	call	c354 <__gedf2>
    37a0:	00841d16 	blt	zero,r2,4818 <_dtoa_r+0x15f4>
    37a4:	800d883a 	mov	r6,r16
    37a8:	880f883a 	mov	r7,r17
    37ac:	0009883a 	mov	r4,zero
    37b0:	014ffc34 	movhi	r5,16368
    37b4:	000cd900 	call	cd90 <__subdf3>
    37b8:	d9401217 	ldw	r5,72(sp)
    37bc:	100d883a 	mov	r6,r2
    37c0:	180f883a 	mov	r7,r3
    37c4:	a809883a 	mov	r4,r21
    37c8:	000c3540 	call	c354 <__gedf2>
    37cc:	db001617 	ldw	r12,88(sp)
    37d0:	00840e16 	blt	zero,r2,480c <_dtoa_r+0x15e8>
    37d4:	00800044 	movi	r2,1
    37d8:	13006b0e 	bge	r2,r12,3988 <_dtoa_r+0x764>
    37dc:	d9000717 	ldw	r4,28(sp)
    37e0:	dd800f15 	stw	r22,60(sp)
    37e4:	dcc01015 	stw	r19,64(sp)
    37e8:	2319883a 	add	r12,r4,r12
    37ec:	dcc01217 	ldw	r19,72(sp)
    37f0:	602d883a 	mov	r22,r12
    37f4:	dc801215 	stw	r18,72(sp)
    37f8:	b825883a 	mov	r18,r23
    37fc:	00000906 	br	3824 <_dtoa_r+0x600>
    3800:	000cd900 	call	cd90 <__subdf3>
    3804:	a80d883a 	mov	r6,r21
    3808:	980f883a 	mov	r7,r19
    380c:	1009883a 	mov	r4,r2
    3810:	180b883a 	mov	r5,r3
    3814:	000c4300 	call	c430 <__ledf2>
    3818:	1003e816 	blt	r2,zero,47bc <_dtoa_r+0x1598>
    381c:	b825883a 	mov	r18,r23
    3820:	bd83e926 	beq	r23,r22,47c8 <_dtoa_r+0x15a4>
    3824:	a809883a 	mov	r4,r21
    3828:	980b883a 	mov	r5,r19
    382c:	000d883a 	mov	r6,zero
    3830:	01d00934 	movhi	r7,16420
    3834:	000c5240 	call	c524 <__muldf3>
    3838:	000d883a 	mov	r6,zero
    383c:	01d00934 	movhi	r7,16420
    3840:	8009883a 	mov	r4,r16
    3844:	880b883a 	mov	r5,r17
    3848:	102b883a 	mov	r21,r2
    384c:	1827883a 	mov	r19,r3
    3850:	000c5240 	call	c524 <__muldf3>
    3854:	180b883a 	mov	r5,r3
    3858:	1009883a 	mov	r4,r2
    385c:	1821883a 	mov	r16,r3
    3860:	1023883a 	mov	r17,r2
    3864:	000d68c0 	call	d68c <__fixdfsi>
    3868:	1009883a 	mov	r4,r2
    386c:	1029883a 	mov	r20,r2
    3870:	000d70c0 	call	d70c <__floatsidf>
    3874:	8809883a 	mov	r4,r17
    3878:	800b883a 	mov	r5,r16
    387c:	100d883a 	mov	r6,r2
    3880:	180f883a 	mov	r7,r3
    3884:	000cd900 	call	cd90 <__subdf3>
    3888:	a5000c04 	addi	r20,r20,48
    388c:	a80d883a 	mov	r6,r21
    3890:	980f883a 	mov	r7,r19
    3894:	1009883a 	mov	r4,r2
    3898:	180b883a 	mov	r5,r3
    389c:	95000005 	stb	r20,0(r18)
    38a0:	1021883a 	mov	r16,r2
    38a4:	1823883a 	mov	r17,r3
    38a8:	000c4300 	call	c430 <__ledf2>
    38ac:	bdc00044 	addi	r23,r23,1
    38b0:	800d883a 	mov	r6,r16
    38b4:	880f883a 	mov	r7,r17
    38b8:	0009883a 	mov	r4,zero
    38bc:	014ffc34 	movhi	r5,16368
    38c0:	103fcf0e 	bge	r2,zero,3800 <__alt_data_end+0xfffe4400>
    38c4:	d8c01317 	ldw	r3,76(sp)
    38c8:	d8c00515 	stw	r3,20(sp)
    38cc:	d9400917 	ldw	r5,36(sp)
    38d0:	e009883a 	mov	r4,fp
    38d4:	00063600 	call	6360 <_Bfree>
    38d8:	d9000517 	ldw	r4,20(sp)
    38dc:	d9802317 	ldw	r6,140(sp)
    38e0:	d9c02517 	ldw	r7,148(sp)
    38e4:	b8000005 	stb	zero,0(r23)
    38e8:	20800044 	addi	r2,r4,1
    38ec:	30800015 	stw	r2,0(r6)
    38f0:	3802aa26 	beq	r7,zero,439c <_dtoa_r+0x1178>
    38f4:	3dc00015 	stw	r23,0(r7)
    38f8:	d8800717 	ldw	r2,28(sp)
    38fc:	003e7906 	br	32e4 <__alt_data_end+0xfffe3ee4>
    3900:	00800434 	movhi	r2,16
    3904:	10bfffc4 	addi	r2,r2,-1
    3908:	88a2703a 	and	r17,r17,r2
    390c:	883e851e 	bne	r17,zero,3324 <__alt_data_end+0xfffe3f24>
    3910:	00800074 	movhi	r2,1
    3914:	10803404 	addi	r2,r2,208
    3918:	003e8406 	br	332c <__alt_data_end+0xfffe3f2c>
    391c:	10c00204 	addi	r3,r2,8
    3920:	003e8706 	br	3340 <__alt_data_end+0xfffe3f40>
    3924:	01400434 	movhi	r5,16
    3928:	297fffc4 	addi	r5,r5,-1
    392c:	994a703a 	and	r5,r19,r5
    3930:	9009883a 	mov	r4,r18
    3934:	843f0044 	addi	r16,r16,-1023
    3938:	294ffc34 	orhi	r5,r5,16368
    393c:	dd800217 	ldw	r22,8(sp)
    3940:	d8001115 	stw	zero,68(sp)
    3944:	003ea506 	br	33dc <__alt_data_end+0xfffe3fdc>
    3948:	00800074 	movhi	r2,1
    394c:	10802b04 	addi	r2,r2,172
    3950:	003e6406 	br	32e4 <__alt_data_end+0xfffe3ee4>
    3954:	e0001115 	stw	zero,68(fp)
    3958:	000b883a 	mov	r5,zero
    395c:	e009883a 	mov	r4,fp
    3960:	00062b80 	call	62b8 <_Balloc>
    3964:	01bfffc4 	movi	r6,-1
    3968:	01c00044 	movi	r7,1
    396c:	d8800715 	stw	r2,28(sp)
    3970:	d9800c15 	stw	r6,48(sp)
    3974:	e0801015 	stw	r2,64(fp)
    3978:	d8000315 	stw	zero,12(sp)
    397c:	d9c00b15 	stw	r7,44(sp)
    3980:	d9800615 	stw	r6,24(sp)
    3984:	d8002215 	stw	zero,136(sp)
    3988:	d8800117 	ldw	r2,4(sp)
    398c:	10008916 	blt	r2,zero,3bb4 <_dtoa_r+0x990>
    3990:	d9000517 	ldw	r4,20(sp)
    3994:	00c00384 	movi	r3,14
    3998:	19008616 	blt	r3,r4,3bb4 <_dtoa_r+0x990>
    399c:	200490fa 	slli	r2,r4,3
    39a0:	00c00074 	movhi	r3,1
    39a4:	d9802217 	ldw	r6,136(sp)
    39a8:	18c05304 	addi	r3,r3,332
    39ac:	1885883a 	add	r2,r3,r2
    39b0:	14000017 	ldw	r16,0(r2)
    39b4:	14400117 	ldw	r17,4(r2)
    39b8:	30016316 	blt	r6,zero,3f48 <_dtoa_r+0xd24>
    39bc:	800d883a 	mov	r6,r16
    39c0:	880f883a 	mov	r7,r17
    39c4:	9009883a 	mov	r4,r18
    39c8:	980b883a 	mov	r5,r19
    39cc:	000b8fc0 	call	b8fc <__divdf3>
    39d0:	180b883a 	mov	r5,r3
    39d4:	1009883a 	mov	r4,r2
    39d8:	000d68c0 	call	d68c <__fixdfsi>
    39dc:	1009883a 	mov	r4,r2
    39e0:	102b883a 	mov	r21,r2
    39e4:	000d70c0 	call	d70c <__floatsidf>
    39e8:	800d883a 	mov	r6,r16
    39ec:	880f883a 	mov	r7,r17
    39f0:	1009883a 	mov	r4,r2
    39f4:	180b883a 	mov	r5,r3
    39f8:	000c5240 	call	c524 <__muldf3>
    39fc:	100d883a 	mov	r6,r2
    3a00:	180f883a 	mov	r7,r3
    3a04:	9009883a 	mov	r4,r18
    3a08:	980b883a 	mov	r5,r19
    3a0c:	000cd900 	call	cd90 <__subdf3>
    3a10:	d9c00717 	ldw	r7,28(sp)
    3a14:	1009883a 	mov	r4,r2
    3a18:	a8800c04 	addi	r2,r21,48
    3a1c:	38800005 	stb	r2,0(r7)
    3a20:	3dc00044 	addi	r23,r7,1
    3a24:	d9c00617 	ldw	r7,24(sp)
    3a28:	01800044 	movi	r6,1
    3a2c:	180b883a 	mov	r5,r3
    3a30:	2005883a 	mov	r2,r4
    3a34:	39803826 	beq	r7,r6,3b18 <_dtoa_r+0x8f4>
    3a38:	000d883a 	mov	r6,zero
    3a3c:	01d00934 	movhi	r7,16420
    3a40:	000c5240 	call	c524 <__muldf3>
    3a44:	000d883a 	mov	r6,zero
    3a48:	000f883a 	mov	r7,zero
    3a4c:	1009883a 	mov	r4,r2
    3a50:	180b883a 	mov	r5,r3
    3a54:	1025883a 	mov	r18,r2
    3a58:	1827883a 	mov	r19,r3
    3a5c:	000c2cc0 	call	c2cc <__eqdf2>
    3a60:	103f9a26 	beq	r2,zero,38cc <__alt_data_end+0xfffe44cc>
    3a64:	d9c00617 	ldw	r7,24(sp)
    3a68:	d8c00717 	ldw	r3,28(sp)
    3a6c:	b829883a 	mov	r20,r23
    3a70:	38bfffc4 	addi	r2,r7,-1
    3a74:	18ad883a 	add	r22,r3,r2
    3a78:	00000a06 	br	3aa4 <_dtoa_r+0x880>
    3a7c:	000c5240 	call	c524 <__muldf3>
    3a80:	000d883a 	mov	r6,zero
    3a84:	000f883a 	mov	r7,zero
    3a88:	1009883a 	mov	r4,r2
    3a8c:	180b883a 	mov	r5,r3
    3a90:	1025883a 	mov	r18,r2
    3a94:	1827883a 	mov	r19,r3
    3a98:	b829883a 	mov	r20,r23
    3a9c:	000c2cc0 	call	c2cc <__eqdf2>
    3aa0:	103f8a26 	beq	r2,zero,38cc <__alt_data_end+0xfffe44cc>
    3aa4:	800d883a 	mov	r6,r16
    3aa8:	880f883a 	mov	r7,r17
    3aac:	9009883a 	mov	r4,r18
    3ab0:	980b883a 	mov	r5,r19
    3ab4:	000b8fc0 	call	b8fc <__divdf3>
    3ab8:	180b883a 	mov	r5,r3
    3abc:	1009883a 	mov	r4,r2
    3ac0:	000d68c0 	call	d68c <__fixdfsi>
    3ac4:	1009883a 	mov	r4,r2
    3ac8:	102b883a 	mov	r21,r2
    3acc:	000d70c0 	call	d70c <__floatsidf>
    3ad0:	800d883a 	mov	r6,r16
    3ad4:	880f883a 	mov	r7,r17
    3ad8:	1009883a 	mov	r4,r2
    3adc:	180b883a 	mov	r5,r3
    3ae0:	000c5240 	call	c524 <__muldf3>
    3ae4:	100d883a 	mov	r6,r2
    3ae8:	180f883a 	mov	r7,r3
    3aec:	9009883a 	mov	r4,r18
    3af0:	980b883a 	mov	r5,r19
    3af4:	000cd900 	call	cd90 <__subdf3>
    3af8:	aa000c04 	addi	r8,r21,48
    3afc:	a2000005 	stb	r8,0(r20)
    3b00:	000d883a 	mov	r6,zero
    3b04:	01d00934 	movhi	r7,16420
    3b08:	1009883a 	mov	r4,r2
    3b0c:	180b883a 	mov	r5,r3
    3b10:	a5c00044 	addi	r23,r20,1
    3b14:	b53fd91e 	bne	r22,r20,3a7c <__alt_data_end+0xfffe467c>
    3b18:	100d883a 	mov	r6,r2
    3b1c:	180f883a 	mov	r7,r3
    3b20:	1009883a 	mov	r4,r2
    3b24:	180b883a 	mov	r5,r3
    3b28:	000b0500 	call	b050 <__adddf3>
    3b2c:	100d883a 	mov	r6,r2
    3b30:	180f883a 	mov	r7,r3
    3b34:	8009883a 	mov	r4,r16
    3b38:	880b883a 	mov	r5,r17
    3b3c:	1027883a 	mov	r19,r2
    3b40:	1825883a 	mov	r18,r3
    3b44:	000c4300 	call	c430 <__ledf2>
    3b48:	10000816 	blt	r2,zero,3b6c <_dtoa_r+0x948>
    3b4c:	980d883a 	mov	r6,r19
    3b50:	900f883a 	mov	r7,r18
    3b54:	8009883a 	mov	r4,r16
    3b58:	880b883a 	mov	r5,r17
    3b5c:	000c2cc0 	call	c2cc <__eqdf2>
    3b60:	103f5a1e 	bne	r2,zero,38cc <__alt_data_end+0xfffe44cc>
    3b64:	ad40004c 	andi	r21,r21,1
    3b68:	a83f5826 	beq	r21,zero,38cc <__alt_data_end+0xfffe44cc>
    3b6c:	bd3fffc3 	ldbu	r20,-1(r23)
    3b70:	b8bfffc4 	addi	r2,r23,-1
    3b74:	1007883a 	mov	r3,r2
    3b78:	01400e44 	movi	r5,57
    3b7c:	d9800717 	ldw	r6,28(sp)
    3b80:	00000506 	br	3b98 <_dtoa_r+0x974>
    3b84:	18ffffc4 	addi	r3,r3,-1
    3b88:	11824726 	beq	r2,r6,44a8 <_dtoa_r+0x1284>
    3b8c:	1d000003 	ldbu	r20,0(r3)
    3b90:	102f883a 	mov	r23,r2
    3b94:	10bfffc4 	addi	r2,r2,-1
    3b98:	a1003fcc 	andi	r4,r20,255
    3b9c:	2100201c 	xori	r4,r4,128
    3ba0:	213fe004 	addi	r4,r4,-128
    3ba4:	217ff726 	beq	r4,r5,3b84 <__alt_data_end+0xfffe4784>
    3ba8:	a2000044 	addi	r8,r20,1
    3bac:	12000005 	stb	r8,0(r2)
    3bb0:	003f4606 	br	38cc <__alt_data_end+0xfffe44cc>
    3bb4:	d9000b17 	ldw	r4,44(sp)
    3bb8:	2000c826 	beq	r4,zero,3edc <_dtoa_r+0xcb8>
    3bbc:	d9800317 	ldw	r6,12(sp)
    3bc0:	00c00044 	movi	r3,1
    3bc4:	1980f90e 	bge	r3,r6,3fac <_dtoa_r+0xd88>
    3bc8:	d8800617 	ldw	r2,24(sp)
    3bcc:	d8c00a17 	ldw	r3,40(sp)
    3bd0:	157fffc4 	addi	r21,r2,-1
    3bd4:	1d41f316 	blt	r3,r21,43a4 <_dtoa_r+0x1180>
    3bd8:	1d6bc83a 	sub	r21,r3,r21
    3bdc:	d9c00617 	ldw	r7,24(sp)
    3be0:	3802aa16 	blt	r7,zero,468c <_dtoa_r+0x1468>
    3be4:	dd000817 	ldw	r20,32(sp)
    3be8:	d8800617 	ldw	r2,24(sp)
    3bec:	d8c00817 	ldw	r3,32(sp)
    3bf0:	01400044 	movi	r5,1
    3bf4:	e009883a 	mov	r4,fp
    3bf8:	1887883a 	add	r3,r3,r2
    3bfc:	d8c00815 	stw	r3,32(sp)
    3c00:	b0ad883a 	add	r22,r22,r2
    3c04:	00066ec0 	call	66ec <__i2b>
    3c08:	1023883a 	mov	r17,r2
    3c0c:	a0000826 	beq	r20,zero,3c30 <_dtoa_r+0xa0c>
    3c10:	0580070e 	bge	zero,r22,3c30 <_dtoa_r+0xa0c>
    3c14:	a005883a 	mov	r2,r20
    3c18:	b500b916 	blt	r22,r20,3f00 <_dtoa_r+0xcdc>
    3c1c:	d9000817 	ldw	r4,32(sp)
    3c20:	a0a9c83a 	sub	r20,r20,r2
    3c24:	b0adc83a 	sub	r22,r22,r2
    3c28:	2089c83a 	sub	r4,r4,r2
    3c2c:	d9000815 	stw	r4,32(sp)
    3c30:	d9800a17 	ldw	r6,40(sp)
    3c34:	0181810e 	bge	zero,r6,423c <_dtoa_r+0x1018>
    3c38:	d9c00b17 	ldw	r7,44(sp)
    3c3c:	3800b326 	beq	r7,zero,3f0c <_dtoa_r+0xce8>
    3c40:	a800b226 	beq	r21,zero,3f0c <_dtoa_r+0xce8>
    3c44:	880b883a 	mov	r5,r17
    3c48:	a80d883a 	mov	r6,r21
    3c4c:	e009883a 	mov	r4,fp
    3c50:	00069b40 	call	69b4 <__pow5mult>
    3c54:	d9800917 	ldw	r6,36(sp)
    3c58:	100b883a 	mov	r5,r2
    3c5c:	e009883a 	mov	r4,fp
    3c60:	1023883a 	mov	r17,r2
    3c64:	00067280 	call	6728 <__multiply>
    3c68:	1021883a 	mov	r16,r2
    3c6c:	d8800a17 	ldw	r2,40(sp)
    3c70:	d9400917 	ldw	r5,36(sp)
    3c74:	e009883a 	mov	r4,fp
    3c78:	1545c83a 	sub	r2,r2,r21
    3c7c:	d8800a15 	stw	r2,40(sp)
    3c80:	00063600 	call	6360 <_Bfree>
    3c84:	d8c00a17 	ldw	r3,40(sp)
    3c88:	18009f1e 	bne	r3,zero,3f08 <_dtoa_r+0xce4>
    3c8c:	05c00044 	movi	r23,1
    3c90:	e009883a 	mov	r4,fp
    3c94:	b80b883a 	mov	r5,r23
    3c98:	00066ec0 	call	66ec <__i2b>
    3c9c:	d9000d17 	ldw	r4,52(sp)
    3ca0:	102b883a 	mov	r21,r2
    3ca4:	2000ce26 	beq	r4,zero,3fe0 <_dtoa_r+0xdbc>
    3ca8:	200d883a 	mov	r6,r4
    3cac:	100b883a 	mov	r5,r2
    3cb0:	e009883a 	mov	r4,fp
    3cb4:	00069b40 	call	69b4 <__pow5mult>
    3cb8:	d9800317 	ldw	r6,12(sp)
    3cbc:	102b883a 	mov	r21,r2
    3cc0:	b981810e 	bge	r23,r6,42c8 <_dtoa_r+0x10a4>
    3cc4:	0027883a 	mov	r19,zero
    3cc8:	a8800417 	ldw	r2,16(r21)
    3ccc:	05c00804 	movi	r23,32
    3cd0:	10800104 	addi	r2,r2,4
    3cd4:	1085883a 	add	r2,r2,r2
    3cd8:	1085883a 	add	r2,r2,r2
    3cdc:	a885883a 	add	r2,r21,r2
    3ce0:	11000017 	ldw	r4,0(r2)
    3ce4:	00065d40 	call	65d4 <__hi0bits>
    3ce8:	b885c83a 	sub	r2,r23,r2
    3cec:	1585883a 	add	r2,r2,r22
    3cf0:	108007cc 	andi	r2,r2,31
    3cf4:	1000b326 	beq	r2,zero,3fc4 <_dtoa_r+0xda0>
    3cf8:	00c00804 	movi	r3,32
    3cfc:	1887c83a 	sub	r3,r3,r2
    3d00:	01000104 	movi	r4,4
    3d04:	20c2cd0e 	bge	r4,r3,483c <_dtoa_r+0x1618>
    3d08:	00c00704 	movi	r3,28
    3d0c:	1885c83a 	sub	r2,r3,r2
    3d10:	d8c00817 	ldw	r3,32(sp)
    3d14:	a0a9883a 	add	r20,r20,r2
    3d18:	b0ad883a 	add	r22,r22,r2
    3d1c:	1887883a 	add	r3,r3,r2
    3d20:	d8c00815 	stw	r3,32(sp)
    3d24:	d9800817 	ldw	r6,32(sp)
    3d28:	0180040e 	bge	zero,r6,3d3c <_dtoa_r+0xb18>
    3d2c:	800b883a 	mov	r5,r16
    3d30:	e009883a 	mov	r4,fp
    3d34:	0006af40 	call	6af4 <__lshift>
    3d38:	1021883a 	mov	r16,r2
    3d3c:	0580050e 	bge	zero,r22,3d54 <_dtoa_r+0xb30>
    3d40:	a80b883a 	mov	r5,r21
    3d44:	b00d883a 	mov	r6,r22
    3d48:	e009883a 	mov	r4,fp
    3d4c:	0006af40 	call	6af4 <__lshift>
    3d50:	102b883a 	mov	r21,r2
    3d54:	d9c00e17 	ldw	r7,56(sp)
    3d58:	3801211e 	bne	r7,zero,41e0 <_dtoa_r+0xfbc>
    3d5c:	d9800617 	ldw	r6,24(sp)
    3d60:	0181380e 	bge	zero,r6,4244 <_dtoa_r+0x1020>
    3d64:	d8c00b17 	ldw	r3,44(sp)
    3d68:	1800ab1e 	bne	r3,zero,4018 <_dtoa_r+0xdf4>
    3d6c:	dc800717 	ldw	r18,28(sp)
    3d70:	dcc00617 	ldw	r19,24(sp)
    3d74:	9029883a 	mov	r20,r18
    3d78:	00000206 	br	3d84 <_dtoa_r+0xb60>
    3d7c:	00063880 	call	6388 <__multadd>
    3d80:	1021883a 	mov	r16,r2
    3d84:	a80b883a 	mov	r5,r21
    3d88:	8009883a 	mov	r4,r16
    3d8c:	0002ffc0 	call	2ffc <quorem>
    3d90:	10800c04 	addi	r2,r2,48
    3d94:	90800005 	stb	r2,0(r18)
    3d98:	94800044 	addi	r18,r18,1
    3d9c:	9507c83a 	sub	r3,r18,r20
    3da0:	000f883a 	mov	r7,zero
    3da4:	01800284 	movi	r6,10
    3da8:	800b883a 	mov	r5,r16
    3dac:	e009883a 	mov	r4,fp
    3db0:	1cfff216 	blt	r3,r19,3d7c <__alt_data_end+0xfffe497c>
    3db4:	1011883a 	mov	r8,r2
    3db8:	d8800617 	ldw	r2,24(sp)
    3dbc:	0082370e 	bge	zero,r2,469c <_dtoa_r+0x1478>
    3dc0:	d9000717 	ldw	r4,28(sp)
    3dc4:	0025883a 	mov	r18,zero
    3dc8:	20af883a 	add	r23,r4,r2
    3dcc:	01800044 	movi	r6,1
    3dd0:	800b883a 	mov	r5,r16
    3dd4:	e009883a 	mov	r4,fp
    3dd8:	da001715 	stw	r8,92(sp)
    3ddc:	0006af40 	call	6af4 <__lshift>
    3de0:	a80b883a 	mov	r5,r21
    3de4:	1009883a 	mov	r4,r2
    3de8:	d8800915 	stw	r2,36(sp)
    3dec:	0006c3c0 	call	6c3c <__mcmp>
    3df0:	da001717 	ldw	r8,92(sp)
    3df4:	0081800e 	bge	zero,r2,43f8 <_dtoa_r+0x11d4>
    3df8:	b93fffc3 	ldbu	r4,-1(r23)
    3dfc:	b8bfffc4 	addi	r2,r23,-1
    3e00:	1007883a 	mov	r3,r2
    3e04:	01800e44 	movi	r6,57
    3e08:	d9c00717 	ldw	r7,28(sp)
    3e0c:	00000506 	br	3e24 <_dtoa_r+0xc00>
    3e10:	18ffffc4 	addi	r3,r3,-1
    3e14:	11c12326 	beq	r2,r7,42a4 <_dtoa_r+0x1080>
    3e18:	19000003 	ldbu	r4,0(r3)
    3e1c:	102f883a 	mov	r23,r2
    3e20:	10bfffc4 	addi	r2,r2,-1
    3e24:	21403fcc 	andi	r5,r4,255
    3e28:	2940201c 	xori	r5,r5,128
    3e2c:	297fe004 	addi	r5,r5,-128
    3e30:	29bff726 	beq	r5,r6,3e10 <__alt_data_end+0xfffe4a10>
    3e34:	21000044 	addi	r4,r4,1
    3e38:	11000005 	stb	r4,0(r2)
    3e3c:	a80b883a 	mov	r5,r21
    3e40:	e009883a 	mov	r4,fp
    3e44:	00063600 	call	6360 <_Bfree>
    3e48:	883ea026 	beq	r17,zero,38cc <__alt_data_end+0xfffe44cc>
    3e4c:	90000426 	beq	r18,zero,3e60 <_dtoa_r+0xc3c>
    3e50:	94400326 	beq	r18,r17,3e60 <_dtoa_r+0xc3c>
    3e54:	900b883a 	mov	r5,r18
    3e58:	e009883a 	mov	r4,fp
    3e5c:	00063600 	call	6360 <_Bfree>
    3e60:	880b883a 	mov	r5,r17
    3e64:	e009883a 	mov	r4,fp
    3e68:	00063600 	call	6360 <_Bfree>
    3e6c:	003e9706 	br	38cc <__alt_data_end+0xfffe44cc>
    3e70:	01800044 	movi	r6,1
    3e74:	d9800e15 	stw	r6,56(sp)
    3e78:	003d9606 	br	34d4 <__alt_data_end+0xfffe40d4>
    3e7c:	d8800817 	ldw	r2,32(sp)
    3e80:	d8c00517 	ldw	r3,20(sp)
    3e84:	d8000d15 	stw	zero,52(sp)
    3e88:	10c5c83a 	sub	r2,r2,r3
    3e8c:	00c9c83a 	sub	r4,zero,r3
    3e90:	d8800815 	stw	r2,32(sp)
    3e94:	d9000a15 	stw	r4,40(sp)
    3e98:	003d9706 	br	34f8 <__alt_data_end+0xfffe40f8>
    3e9c:	05adc83a 	sub	r22,zero,r22
    3ea0:	dd800815 	stw	r22,32(sp)
    3ea4:	002d883a 	mov	r22,zero
    3ea8:	003d8e06 	br	34e4 <__alt_data_end+0xfffe40e4>
    3eac:	d9000517 	ldw	r4,20(sp)
    3eb0:	000d70c0 	call	d70c <__floatsidf>
    3eb4:	100d883a 	mov	r6,r2
    3eb8:	180f883a 	mov	r7,r3
    3ebc:	a009883a 	mov	r4,r20
    3ec0:	880b883a 	mov	r5,r17
    3ec4:	000c2cc0 	call	c2cc <__eqdf2>
    3ec8:	103d7126 	beq	r2,zero,3490 <__alt_data_end+0xfffe4090>
    3ecc:	d9c00517 	ldw	r7,20(sp)
    3ed0:	39ffffc4 	addi	r7,r7,-1
    3ed4:	d9c00515 	stw	r7,20(sp)
    3ed8:	003d6d06 	br	3490 <__alt_data_end+0xfffe4090>
    3edc:	dd400a17 	ldw	r21,40(sp)
    3ee0:	dd000817 	ldw	r20,32(sp)
    3ee4:	0023883a 	mov	r17,zero
    3ee8:	003f4806 	br	3c0c <__alt_data_end+0xfffe480c>
    3eec:	10e3c83a 	sub	r17,r2,r3
    3ef0:	9448983a 	sll	r4,r18,r17
    3ef4:	003d3206 	br	33c0 <__alt_data_end+0xfffe3fc0>
    3ef8:	d8000e15 	stw	zero,56(sp)
    3efc:	003d7506 	br	34d4 <__alt_data_end+0xfffe40d4>
    3f00:	b005883a 	mov	r2,r22
    3f04:	003f4506 	br	3c1c <__alt_data_end+0xfffe481c>
    3f08:	dc000915 	stw	r16,36(sp)
    3f0c:	d9800a17 	ldw	r6,40(sp)
    3f10:	d9400917 	ldw	r5,36(sp)
    3f14:	e009883a 	mov	r4,fp
    3f18:	00069b40 	call	69b4 <__pow5mult>
    3f1c:	1021883a 	mov	r16,r2
    3f20:	003f5a06 	br	3c8c <__alt_data_end+0xfffe488c>
    3f24:	01c00044 	movi	r7,1
    3f28:	d9c00b15 	stw	r7,44(sp)
    3f2c:	d8802217 	ldw	r2,136(sp)
    3f30:	0081280e 	bge	zero,r2,43d4 <_dtoa_r+0x11b0>
    3f34:	100d883a 	mov	r6,r2
    3f38:	1021883a 	mov	r16,r2
    3f3c:	d8800c15 	stw	r2,48(sp)
    3f40:	d8800615 	stw	r2,24(sp)
    3f44:	003d8806 	br	3568 <__alt_data_end+0xfffe4168>
    3f48:	d8800617 	ldw	r2,24(sp)
    3f4c:	00be9b16 	blt	zero,r2,39bc <__alt_data_end+0xfffe45bc>
    3f50:	10010f1e 	bne	r2,zero,4390 <_dtoa_r+0x116c>
    3f54:	880b883a 	mov	r5,r17
    3f58:	000d883a 	mov	r6,zero
    3f5c:	01d00534 	movhi	r7,16404
    3f60:	8009883a 	mov	r4,r16
    3f64:	000c5240 	call	c524 <__muldf3>
    3f68:	900d883a 	mov	r6,r18
    3f6c:	980f883a 	mov	r7,r19
    3f70:	1009883a 	mov	r4,r2
    3f74:	180b883a 	mov	r5,r3
    3f78:	000c3540 	call	c354 <__gedf2>
    3f7c:	002b883a 	mov	r21,zero
    3f80:	0023883a 	mov	r17,zero
    3f84:	1000bf16 	blt	r2,zero,4284 <_dtoa_r+0x1060>
    3f88:	d9802217 	ldw	r6,136(sp)
    3f8c:	ddc00717 	ldw	r23,28(sp)
    3f90:	018c303a 	nor	r6,zero,r6
    3f94:	d9800515 	stw	r6,20(sp)
    3f98:	a80b883a 	mov	r5,r21
    3f9c:	e009883a 	mov	r4,fp
    3fa0:	00063600 	call	6360 <_Bfree>
    3fa4:	883e4926 	beq	r17,zero,38cc <__alt_data_end+0xfffe44cc>
    3fa8:	003fad06 	br	3e60 <__alt_data_end+0xfffe4a60>
    3fac:	d9c01117 	ldw	r7,68(sp)
    3fb0:	3801bc26 	beq	r7,zero,46a4 <_dtoa_r+0x1480>
    3fb4:	10810cc4 	addi	r2,r2,1075
    3fb8:	dd400a17 	ldw	r21,40(sp)
    3fbc:	dd000817 	ldw	r20,32(sp)
    3fc0:	003f0a06 	br	3bec <__alt_data_end+0xfffe47ec>
    3fc4:	00800704 	movi	r2,28
    3fc8:	d9000817 	ldw	r4,32(sp)
    3fcc:	a0a9883a 	add	r20,r20,r2
    3fd0:	b0ad883a 	add	r22,r22,r2
    3fd4:	2089883a 	add	r4,r4,r2
    3fd8:	d9000815 	stw	r4,32(sp)
    3fdc:	003f5106 	br	3d24 <__alt_data_end+0xfffe4924>
    3fe0:	d8c00317 	ldw	r3,12(sp)
    3fe4:	b8c1fc0e 	bge	r23,r3,47d8 <_dtoa_r+0x15b4>
    3fe8:	0027883a 	mov	r19,zero
    3fec:	b805883a 	mov	r2,r23
    3ff0:	003f3e06 	br	3cec <__alt_data_end+0xfffe48ec>
    3ff4:	880b883a 	mov	r5,r17
    3ff8:	e009883a 	mov	r4,fp
    3ffc:	000f883a 	mov	r7,zero
    4000:	01800284 	movi	r6,10
    4004:	00063880 	call	6388 <__multadd>
    4008:	d9000c17 	ldw	r4,48(sp)
    400c:	1023883a 	mov	r17,r2
    4010:	0102040e 	bge	zero,r4,4824 <_dtoa_r+0x1600>
    4014:	d9000615 	stw	r4,24(sp)
    4018:	0500050e 	bge	zero,r20,4030 <_dtoa_r+0xe0c>
    401c:	880b883a 	mov	r5,r17
    4020:	a00d883a 	mov	r6,r20
    4024:	e009883a 	mov	r4,fp
    4028:	0006af40 	call	6af4 <__lshift>
    402c:	1023883a 	mov	r17,r2
    4030:	9801241e 	bne	r19,zero,44c4 <_dtoa_r+0x12a0>
    4034:	8829883a 	mov	r20,r17
    4038:	d9000617 	ldw	r4,24(sp)
    403c:	dcc00717 	ldw	r19,28(sp)
    4040:	9480004c 	andi	r18,r18,1
    4044:	20bfffc4 	addi	r2,r4,-1
    4048:	9885883a 	add	r2,r19,r2
    404c:	d8800415 	stw	r2,16(sp)
    4050:	dc800615 	stw	r18,24(sp)
    4054:	a80b883a 	mov	r5,r21
    4058:	8009883a 	mov	r4,r16
    405c:	0002ffc0 	call	2ffc <quorem>
    4060:	880b883a 	mov	r5,r17
    4064:	8009883a 	mov	r4,r16
    4068:	102f883a 	mov	r23,r2
    406c:	0006c3c0 	call	6c3c <__mcmp>
    4070:	a80b883a 	mov	r5,r21
    4074:	a00d883a 	mov	r6,r20
    4078:	e009883a 	mov	r4,fp
    407c:	102d883a 	mov	r22,r2
    4080:	0006c9c0 	call	6c9c <__mdiff>
    4084:	1007883a 	mov	r3,r2
    4088:	10800317 	ldw	r2,12(r2)
    408c:	bc800c04 	addi	r18,r23,48
    4090:	180b883a 	mov	r5,r3
    4094:	10004e1e 	bne	r2,zero,41d0 <_dtoa_r+0xfac>
    4098:	8009883a 	mov	r4,r16
    409c:	d8c01615 	stw	r3,88(sp)
    40a0:	0006c3c0 	call	6c3c <__mcmp>
    40a4:	d8c01617 	ldw	r3,88(sp)
    40a8:	e009883a 	mov	r4,fp
    40ac:	d8801615 	stw	r2,88(sp)
    40b0:	180b883a 	mov	r5,r3
    40b4:	00063600 	call	6360 <_Bfree>
    40b8:	d8801617 	ldw	r2,88(sp)
    40bc:	1000041e 	bne	r2,zero,40d0 <_dtoa_r+0xeac>
    40c0:	d9800317 	ldw	r6,12(sp)
    40c4:	3000021e 	bne	r6,zero,40d0 <_dtoa_r+0xeac>
    40c8:	d8c00617 	ldw	r3,24(sp)
    40cc:	18003726 	beq	r3,zero,41ac <_dtoa_r+0xf88>
    40d0:	b0002016 	blt	r22,zero,4154 <_dtoa_r+0xf30>
    40d4:	b000041e 	bne	r22,zero,40e8 <_dtoa_r+0xec4>
    40d8:	d9000317 	ldw	r4,12(sp)
    40dc:	2000021e 	bne	r4,zero,40e8 <_dtoa_r+0xec4>
    40e0:	d8c00617 	ldw	r3,24(sp)
    40e4:	18001b26 	beq	r3,zero,4154 <_dtoa_r+0xf30>
    40e8:	00810716 	blt	zero,r2,4508 <_dtoa_r+0x12e4>
    40ec:	d8c00417 	ldw	r3,16(sp)
    40f0:	9d800044 	addi	r22,r19,1
    40f4:	9c800005 	stb	r18,0(r19)
    40f8:	b02f883a 	mov	r23,r22
    40fc:	98c10626 	beq	r19,r3,4518 <_dtoa_r+0x12f4>
    4100:	800b883a 	mov	r5,r16
    4104:	000f883a 	mov	r7,zero
    4108:	01800284 	movi	r6,10
    410c:	e009883a 	mov	r4,fp
    4110:	00063880 	call	6388 <__multadd>
    4114:	1021883a 	mov	r16,r2
    4118:	000f883a 	mov	r7,zero
    411c:	01800284 	movi	r6,10
    4120:	880b883a 	mov	r5,r17
    4124:	e009883a 	mov	r4,fp
    4128:	8d002526 	beq	r17,r20,41c0 <_dtoa_r+0xf9c>
    412c:	00063880 	call	6388 <__multadd>
    4130:	a00b883a 	mov	r5,r20
    4134:	000f883a 	mov	r7,zero
    4138:	01800284 	movi	r6,10
    413c:	e009883a 	mov	r4,fp
    4140:	1023883a 	mov	r17,r2
    4144:	00063880 	call	6388 <__multadd>
    4148:	1029883a 	mov	r20,r2
    414c:	b027883a 	mov	r19,r22
    4150:	003fc006 	br	4054 <__alt_data_end+0xfffe4c54>
    4154:	9011883a 	mov	r8,r18
    4158:	00800e0e 	bge	zero,r2,4194 <_dtoa_r+0xf70>
    415c:	800b883a 	mov	r5,r16
    4160:	01800044 	movi	r6,1
    4164:	e009883a 	mov	r4,fp
    4168:	da001715 	stw	r8,92(sp)
    416c:	0006af40 	call	6af4 <__lshift>
    4170:	a80b883a 	mov	r5,r21
    4174:	1009883a 	mov	r4,r2
    4178:	1021883a 	mov	r16,r2
    417c:	0006c3c0 	call	6c3c <__mcmp>
    4180:	da001717 	ldw	r8,92(sp)
    4184:	0081960e 	bge	zero,r2,47e0 <_dtoa_r+0x15bc>
    4188:	00800e44 	movi	r2,57
    418c:	40817026 	beq	r8,r2,4750 <_dtoa_r+0x152c>
    4190:	ba000c44 	addi	r8,r23,49
    4194:	8825883a 	mov	r18,r17
    4198:	9dc00044 	addi	r23,r19,1
    419c:	9a000005 	stb	r8,0(r19)
    41a0:	a023883a 	mov	r17,r20
    41a4:	dc000915 	stw	r16,36(sp)
    41a8:	003f2406 	br	3e3c <__alt_data_end+0xfffe4a3c>
    41ac:	00800e44 	movi	r2,57
    41b0:	9011883a 	mov	r8,r18
    41b4:	90816626 	beq	r18,r2,4750 <_dtoa_r+0x152c>
    41b8:	05bff516 	blt	zero,r22,4190 <__alt_data_end+0xfffe4d90>
    41bc:	003ff506 	br	4194 <__alt_data_end+0xfffe4d94>
    41c0:	00063880 	call	6388 <__multadd>
    41c4:	1023883a 	mov	r17,r2
    41c8:	1029883a 	mov	r20,r2
    41cc:	003fdf06 	br	414c <__alt_data_end+0xfffe4d4c>
    41d0:	e009883a 	mov	r4,fp
    41d4:	00063600 	call	6360 <_Bfree>
    41d8:	00800044 	movi	r2,1
    41dc:	003fbc06 	br	40d0 <__alt_data_end+0xfffe4cd0>
    41e0:	a80b883a 	mov	r5,r21
    41e4:	8009883a 	mov	r4,r16
    41e8:	0006c3c0 	call	6c3c <__mcmp>
    41ec:	103edb0e 	bge	r2,zero,3d5c <__alt_data_end+0xfffe495c>
    41f0:	800b883a 	mov	r5,r16
    41f4:	000f883a 	mov	r7,zero
    41f8:	01800284 	movi	r6,10
    41fc:	e009883a 	mov	r4,fp
    4200:	00063880 	call	6388 <__multadd>
    4204:	1021883a 	mov	r16,r2
    4208:	d8800517 	ldw	r2,20(sp)
    420c:	d8c00b17 	ldw	r3,44(sp)
    4210:	10bfffc4 	addi	r2,r2,-1
    4214:	d8800515 	stw	r2,20(sp)
    4218:	183f761e 	bne	r3,zero,3ff4 <__alt_data_end+0xfffe4bf4>
    421c:	d9000c17 	ldw	r4,48(sp)
    4220:	0101730e 	bge	zero,r4,47f0 <_dtoa_r+0x15cc>
    4224:	d9000615 	stw	r4,24(sp)
    4228:	003ed006 	br	3d6c <__alt_data_end+0xfffe496c>
    422c:	00800084 	movi	r2,2
    4230:	3081861e 	bne	r6,r2,484c <_dtoa_r+0x1628>
    4234:	d8000b15 	stw	zero,44(sp)
    4238:	003f3c06 	br	3f2c <__alt_data_end+0xfffe4b2c>
    423c:	dc000917 	ldw	r16,36(sp)
    4240:	003e9206 	br	3c8c <__alt_data_end+0xfffe488c>
    4244:	d9c00317 	ldw	r7,12(sp)
    4248:	00800084 	movi	r2,2
    424c:	11fec50e 	bge	r2,r7,3d64 <__alt_data_end+0xfffe4964>
    4250:	d9000617 	ldw	r4,24(sp)
    4254:	20013c1e 	bne	r4,zero,4748 <_dtoa_r+0x1524>
    4258:	a80b883a 	mov	r5,r21
    425c:	000f883a 	mov	r7,zero
    4260:	01800144 	movi	r6,5
    4264:	e009883a 	mov	r4,fp
    4268:	00063880 	call	6388 <__multadd>
    426c:	100b883a 	mov	r5,r2
    4270:	8009883a 	mov	r4,r16
    4274:	102b883a 	mov	r21,r2
    4278:	0006c3c0 	call	6c3c <__mcmp>
    427c:	dc000915 	stw	r16,36(sp)
    4280:	00bf410e 	bge	zero,r2,3f88 <__alt_data_end+0xfffe4b88>
    4284:	d9c00717 	ldw	r7,28(sp)
    4288:	00800c44 	movi	r2,49
    428c:	38800005 	stb	r2,0(r7)
    4290:	d8800517 	ldw	r2,20(sp)
    4294:	3dc00044 	addi	r23,r7,1
    4298:	10800044 	addi	r2,r2,1
    429c:	d8800515 	stw	r2,20(sp)
    42a0:	003f3d06 	br	3f98 <__alt_data_end+0xfffe4b98>
    42a4:	d9800517 	ldw	r6,20(sp)
    42a8:	d9c00717 	ldw	r7,28(sp)
    42ac:	00800c44 	movi	r2,49
    42b0:	31800044 	addi	r6,r6,1
    42b4:	d9800515 	stw	r6,20(sp)
    42b8:	38800005 	stb	r2,0(r7)
    42bc:	003edf06 	br	3e3c <__alt_data_end+0xfffe4a3c>
    42c0:	d8000b15 	stw	zero,44(sp)
    42c4:	003c9f06 	br	3544 <__alt_data_end+0xfffe4144>
    42c8:	903e7e1e 	bne	r18,zero,3cc4 <__alt_data_end+0xfffe48c4>
    42cc:	00800434 	movhi	r2,16
    42d0:	10bfffc4 	addi	r2,r2,-1
    42d4:	9884703a 	and	r2,r19,r2
    42d8:	1000ea1e 	bne	r2,zero,4684 <_dtoa_r+0x1460>
    42dc:	9cdffc2c 	andhi	r19,r19,32752
    42e0:	9800e826 	beq	r19,zero,4684 <_dtoa_r+0x1460>
    42e4:	d9c00817 	ldw	r7,32(sp)
    42e8:	b5800044 	addi	r22,r22,1
    42ec:	04c00044 	movi	r19,1
    42f0:	39c00044 	addi	r7,r7,1
    42f4:	d9c00815 	stw	r7,32(sp)
    42f8:	d8800d17 	ldw	r2,52(sp)
    42fc:	103e721e 	bne	r2,zero,3cc8 <__alt_data_end+0xfffe48c8>
    4300:	00800044 	movi	r2,1
    4304:	003e7906 	br	3cec <__alt_data_end+0xfffe48ec>
    4308:	8009883a 	mov	r4,r16
    430c:	000d70c0 	call	d70c <__floatsidf>
    4310:	d9800f17 	ldw	r6,60(sp)
    4314:	d9c01017 	ldw	r7,64(sp)
    4318:	1009883a 	mov	r4,r2
    431c:	180b883a 	mov	r5,r3
    4320:	000c5240 	call	c524 <__muldf3>
    4324:	000d883a 	mov	r6,zero
    4328:	01d00734 	movhi	r7,16412
    432c:	1009883a 	mov	r4,r2
    4330:	180b883a 	mov	r5,r3
    4334:	000b0500 	call	b050 <__adddf3>
    4338:	047f3034 	movhi	r17,64704
    433c:	1021883a 	mov	r16,r2
    4340:	1c63883a 	add	r17,r3,r17
    4344:	d9000f17 	ldw	r4,60(sp)
    4348:	d9401017 	ldw	r5,64(sp)
    434c:	000d883a 	mov	r6,zero
    4350:	01d00534 	movhi	r7,16404
    4354:	000cd900 	call	cd90 <__subdf3>
    4358:	800d883a 	mov	r6,r16
    435c:	880f883a 	mov	r7,r17
    4360:	1009883a 	mov	r4,r2
    4364:	180b883a 	mov	r5,r3
    4368:	102b883a 	mov	r21,r2
    436c:	1829883a 	mov	r20,r3
    4370:	000c3540 	call	c354 <__gedf2>
    4374:	00806c16 	blt	zero,r2,4528 <_dtoa_r+0x1304>
    4378:	89e0003c 	xorhi	r7,r17,32768
    437c:	800d883a 	mov	r6,r16
    4380:	a809883a 	mov	r4,r21
    4384:	a00b883a 	mov	r5,r20
    4388:	000c4300 	call	c430 <__ledf2>
    438c:	103d7e0e 	bge	r2,zero,3988 <__alt_data_end+0xfffe4588>
    4390:	002b883a 	mov	r21,zero
    4394:	0023883a 	mov	r17,zero
    4398:	003efb06 	br	3f88 <__alt_data_end+0xfffe4b88>
    439c:	d8800717 	ldw	r2,28(sp)
    43a0:	003bd006 	br	32e4 <__alt_data_end+0xfffe3ee4>
    43a4:	d9000a17 	ldw	r4,40(sp)
    43a8:	d9800d17 	ldw	r6,52(sp)
    43ac:	dd400a15 	stw	r21,40(sp)
    43b0:	a905c83a 	sub	r2,r21,r4
    43b4:	308d883a 	add	r6,r6,r2
    43b8:	d9800d15 	stw	r6,52(sp)
    43bc:	002b883a 	mov	r21,zero
    43c0:	003e0606 	br	3bdc <__alt_data_end+0xfffe47dc>
    43c4:	9023883a 	mov	r17,r18
    43c8:	9829883a 	mov	r20,r19
    43cc:	04000084 	movi	r16,2
    43d0:	003c9206 	br	361c <__alt_data_end+0xfffe421c>
    43d4:	04000044 	movi	r16,1
    43d8:	dc000c15 	stw	r16,48(sp)
    43dc:	dc000615 	stw	r16,24(sp)
    43e0:	dc002215 	stw	r16,136(sp)
    43e4:	e0001115 	stw	zero,68(fp)
    43e8:	000b883a 	mov	r5,zero
    43ec:	003c6906 	br	3594 <__alt_data_end+0xfffe4194>
    43f0:	3021883a 	mov	r16,r6
    43f4:	003ffb06 	br	43e4 <__alt_data_end+0xfffe4fe4>
    43f8:	1000021e 	bne	r2,zero,4404 <_dtoa_r+0x11e0>
    43fc:	4200004c 	andi	r8,r8,1
    4400:	403e7d1e 	bne	r8,zero,3df8 <__alt_data_end+0xfffe49f8>
    4404:	01000c04 	movi	r4,48
    4408:	00000106 	br	4410 <_dtoa_r+0x11ec>
    440c:	102f883a 	mov	r23,r2
    4410:	b8bfffc4 	addi	r2,r23,-1
    4414:	10c00007 	ldb	r3,0(r2)
    4418:	193ffc26 	beq	r3,r4,440c <__alt_data_end+0xfffe500c>
    441c:	003e8706 	br	3e3c <__alt_data_end+0xfffe4a3c>
    4420:	d8800517 	ldw	r2,20(sp)
    4424:	00a3c83a 	sub	r17,zero,r2
    4428:	8800a426 	beq	r17,zero,46bc <_dtoa_r+0x1498>
    442c:	888003cc 	andi	r2,r17,15
    4430:	100490fa 	slli	r2,r2,3
    4434:	00c00074 	movhi	r3,1
    4438:	18c05304 	addi	r3,r3,332
    443c:	1885883a 	add	r2,r3,r2
    4440:	11800017 	ldw	r6,0(r2)
    4444:	11c00117 	ldw	r7,4(r2)
    4448:	9009883a 	mov	r4,r18
    444c:	980b883a 	mov	r5,r19
    4450:	8823d13a 	srai	r17,r17,4
    4454:	000c5240 	call	c524 <__muldf3>
    4458:	d8800f15 	stw	r2,60(sp)
    445c:	d8c01015 	stw	r3,64(sp)
    4460:	8800e826 	beq	r17,zero,4804 <_dtoa_r+0x15e0>
    4464:	05000074 	movhi	r20,1
    4468:	a5004904 	addi	r20,r20,292
    446c:	04000084 	movi	r16,2
    4470:	8980004c 	andi	r6,r17,1
    4474:	1009883a 	mov	r4,r2
    4478:	8823d07a 	srai	r17,r17,1
    447c:	180b883a 	mov	r5,r3
    4480:	30000426 	beq	r6,zero,4494 <_dtoa_r+0x1270>
    4484:	a1800017 	ldw	r6,0(r20)
    4488:	a1c00117 	ldw	r7,4(r20)
    448c:	84000044 	addi	r16,r16,1
    4490:	000c5240 	call	c524 <__muldf3>
    4494:	a5000204 	addi	r20,r20,8
    4498:	883ff51e 	bne	r17,zero,4470 <__alt_data_end+0xfffe5070>
    449c:	d8800f15 	stw	r2,60(sp)
    44a0:	d8c01015 	stw	r3,64(sp)
    44a4:	003c7606 	br	3680 <__alt_data_end+0xfffe4280>
    44a8:	00c00c04 	movi	r3,48
    44ac:	10c00005 	stb	r3,0(r2)
    44b0:	d8c00517 	ldw	r3,20(sp)
    44b4:	bd3fffc3 	ldbu	r20,-1(r23)
    44b8:	18c00044 	addi	r3,r3,1
    44bc:	d8c00515 	stw	r3,20(sp)
    44c0:	003db906 	br	3ba8 <__alt_data_end+0xfffe47a8>
    44c4:	89400117 	ldw	r5,4(r17)
    44c8:	e009883a 	mov	r4,fp
    44cc:	00062b80 	call	62b8 <_Balloc>
    44d0:	89800417 	ldw	r6,16(r17)
    44d4:	89400304 	addi	r5,r17,12
    44d8:	11000304 	addi	r4,r2,12
    44dc:	31800084 	addi	r6,r6,2
    44e0:	318d883a 	add	r6,r6,r6
    44e4:	318d883a 	add	r6,r6,r6
    44e8:	1027883a 	mov	r19,r2
    44ec:	00060480 	call	6048 <memcpy>
    44f0:	01800044 	movi	r6,1
    44f4:	980b883a 	mov	r5,r19
    44f8:	e009883a 	mov	r4,fp
    44fc:	0006af40 	call	6af4 <__lshift>
    4500:	1029883a 	mov	r20,r2
    4504:	003ecc06 	br	4038 <__alt_data_end+0xfffe4c38>
    4508:	00800e44 	movi	r2,57
    450c:	90809026 	beq	r18,r2,4750 <_dtoa_r+0x152c>
    4510:	92000044 	addi	r8,r18,1
    4514:	003f1f06 	br	4194 <__alt_data_end+0xfffe4d94>
    4518:	9011883a 	mov	r8,r18
    451c:	8825883a 	mov	r18,r17
    4520:	a023883a 	mov	r17,r20
    4524:	003e2906 	br	3dcc <__alt_data_end+0xfffe49cc>
    4528:	002b883a 	mov	r21,zero
    452c:	0023883a 	mov	r17,zero
    4530:	003f5406 	br	4284 <__alt_data_end+0xfffe4e84>
    4534:	61bfffc4 	addi	r6,r12,-1
    4538:	300490fa 	slli	r2,r6,3
    453c:	00c00074 	movhi	r3,1
    4540:	18c05304 	addi	r3,r3,332
    4544:	1885883a 	add	r2,r3,r2
    4548:	11000017 	ldw	r4,0(r2)
    454c:	11400117 	ldw	r5,4(r2)
    4550:	d8800717 	ldw	r2,28(sp)
    4554:	880f883a 	mov	r7,r17
    4558:	d9801215 	stw	r6,72(sp)
    455c:	800d883a 	mov	r6,r16
    4560:	db001615 	stw	r12,88(sp)
    4564:	15c00044 	addi	r23,r2,1
    4568:	000c5240 	call	c524 <__muldf3>
    456c:	d9401017 	ldw	r5,64(sp)
    4570:	d9000f17 	ldw	r4,60(sp)
    4574:	d8c01515 	stw	r3,84(sp)
    4578:	d8801415 	stw	r2,80(sp)
    457c:	000d68c0 	call	d68c <__fixdfsi>
    4580:	1009883a 	mov	r4,r2
    4584:	1021883a 	mov	r16,r2
    4588:	000d70c0 	call	d70c <__floatsidf>
    458c:	d9000f17 	ldw	r4,60(sp)
    4590:	d9401017 	ldw	r5,64(sp)
    4594:	100d883a 	mov	r6,r2
    4598:	180f883a 	mov	r7,r3
    459c:	000cd900 	call	cd90 <__subdf3>
    45a0:	1829883a 	mov	r20,r3
    45a4:	d8c00717 	ldw	r3,28(sp)
    45a8:	84000c04 	addi	r16,r16,48
    45ac:	1023883a 	mov	r17,r2
    45b0:	1c000005 	stb	r16,0(r3)
    45b4:	db001617 	ldw	r12,88(sp)
    45b8:	00800044 	movi	r2,1
    45bc:	60802226 	beq	r12,r2,4648 <_dtoa_r+0x1424>
    45c0:	d9c00717 	ldw	r7,28(sp)
    45c4:	8805883a 	mov	r2,r17
    45c8:	b82b883a 	mov	r21,r23
    45cc:	3b19883a 	add	r12,r7,r12
    45d0:	6023883a 	mov	r17,r12
    45d4:	a007883a 	mov	r3,r20
    45d8:	dc800f15 	stw	r18,60(sp)
    45dc:	000d883a 	mov	r6,zero
    45e0:	01d00934 	movhi	r7,16420
    45e4:	1009883a 	mov	r4,r2
    45e8:	180b883a 	mov	r5,r3
    45ec:	000c5240 	call	c524 <__muldf3>
    45f0:	180b883a 	mov	r5,r3
    45f4:	1009883a 	mov	r4,r2
    45f8:	1829883a 	mov	r20,r3
    45fc:	1025883a 	mov	r18,r2
    4600:	000d68c0 	call	d68c <__fixdfsi>
    4604:	1009883a 	mov	r4,r2
    4608:	1021883a 	mov	r16,r2
    460c:	000d70c0 	call	d70c <__floatsidf>
    4610:	100d883a 	mov	r6,r2
    4614:	180f883a 	mov	r7,r3
    4618:	9009883a 	mov	r4,r18
    461c:	a00b883a 	mov	r5,r20
    4620:	84000c04 	addi	r16,r16,48
    4624:	000cd900 	call	cd90 <__subdf3>
    4628:	ad400044 	addi	r21,r21,1
    462c:	ac3fffc5 	stb	r16,-1(r21)
    4630:	ac7fea1e 	bne	r21,r17,45dc <__alt_data_end+0xfffe51dc>
    4634:	1023883a 	mov	r17,r2
    4638:	d8801217 	ldw	r2,72(sp)
    463c:	dc800f17 	ldw	r18,60(sp)
    4640:	1829883a 	mov	r20,r3
    4644:	b8af883a 	add	r23,r23,r2
    4648:	d9001417 	ldw	r4,80(sp)
    464c:	d9401517 	ldw	r5,84(sp)
    4650:	000d883a 	mov	r6,zero
    4654:	01cff834 	movhi	r7,16352
    4658:	000b0500 	call	b050 <__adddf3>
    465c:	880d883a 	mov	r6,r17
    4660:	a00f883a 	mov	r7,r20
    4664:	1009883a 	mov	r4,r2
    4668:	180b883a 	mov	r5,r3
    466c:	000c4300 	call	c430 <__ledf2>
    4670:	10003e0e 	bge	r2,zero,476c <_dtoa_r+0x1548>
    4674:	d9001317 	ldw	r4,76(sp)
    4678:	bd3fffc3 	ldbu	r20,-1(r23)
    467c:	d9000515 	stw	r4,20(sp)
    4680:	003d3b06 	br	3b70 <__alt_data_end+0xfffe4770>
    4684:	0027883a 	mov	r19,zero
    4688:	003f1b06 	br	42f8 <__alt_data_end+0xfffe4ef8>
    468c:	d8800817 	ldw	r2,32(sp)
    4690:	11e9c83a 	sub	r20,r2,r7
    4694:	0005883a 	mov	r2,zero
    4698:	003d5406 	br	3bec <__alt_data_end+0xfffe47ec>
    469c:	00800044 	movi	r2,1
    46a0:	003dc706 	br	3dc0 <__alt_data_end+0xfffe49c0>
    46a4:	d8c00217 	ldw	r3,8(sp)
    46a8:	00800d84 	movi	r2,54
    46ac:	dd400a17 	ldw	r21,40(sp)
    46b0:	10c5c83a 	sub	r2,r2,r3
    46b4:	dd000817 	ldw	r20,32(sp)
    46b8:	003d4c06 	br	3bec <__alt_data_end+0xfffe47ec>
    46bc:	dc800f15 	stw	r18,60(sp)
    46c0:	dcc01015 	stw	r19,64(sp)
    46c4:	04000084 	movi	r16,2
    46c8:	003bed06 	br	3680 <__alt_data_end+0xfffe4280>
    46cc:	d9000617 	ldw	r4,24(sp)
    46d0:	203f0d26 	beq	r4,zero,4308 <__alt_data_end+0xfffe4f08>
    46d4:	d9800c17 	ldw	r6,48(sp)
    46d8:	01bcab0e 	bge	zero,r6,3988 <__alt_data_end+0xfffe4588>
    46dc:	d9401017 	ldw	r5,64(sp)
    46e0:	d9000f17 	ldw	r4,60(sp)
    46e4:	000d883a 	mov	r6,zero
    46e8:	01d00934 	movhi	r7,16420
    46ec:	000c5240 	call	c524 <__muldf3>
    46f0:	81000044 	addi	r4,r16,1
    46f4:	d8800f15 	stw	r2,60(sp)
    46f8:	d8c01015 	stw	r3,64(sp)
    46fc:	000d70c0 	call	d70c <__floatsidf>
    4700:	d9800f17 	ldw	r6,60(sp)
    4704:	d9c01017 	ldw	r7,64(sp)
    4708:	1009883a 	mov	r4,r2
    470c:	180b883a 	mov	r5,r3
    4710:	000c5240 	call	c524 <__muldf3>
    4714:	01d00734 	movhi	r7,16412
    4718:	000d883a 	mov	r6,zero
    471c:	1009883a 	mov	r4,r2
    4720:	180b883a 	mov	r5,r3
    4724:	000b0500 	call	b050 <__adddf3>
    4728:	d9c00517 	ldw	r7,20(sp)
    472c:	047f3034 	movhi	r17,64704
    4730:	1021883a 	mov	r16,r2
    4734:	39ffffc4 	addi	r7,r7,-1
    4738:	d9c01315 	stw	r7,76(sp)
    473c:	1c63883a 	add	r17,r3,r17
    4740:	db000c17 	ldw	r12,48(sp)
    4744:	003bea06 	br	36f0 <__alt_data_end+0xfffe42f0>
    4748:	dc000915 	stw	r16,36(sp)
    474c:	003e0e06 	br	3f88 <__alt_data_end+0xfffe4b88>
    4750:	01000e44 	movi	r4,57
    4754:	8825883a 	mov	r18,r17
    4758:	9dc00044 	addi	r23,r19,1
    475c:	99000005 	stb	r4,0(r19)
    4760:	a023883a 	mov	r17,r20
    4764:	dc000915 	stw	r16,36(sp)
    4768:	003da406 	br	3dfc <__alt_data_end+0xfffe49fc>
    476c:	d9801417 	ldw	r6,80(sp)
    4770:	d9c01517 	ldw	r7,84(sp)
    4774:	0009883a 	mov	r4,zero
    4778:	014ff834 	movhi	r5,16352
    477c:	000cd900 	call	cd90 <__subdf3>
    4780:	880d883a 	mov	r6,r17
    4784:	a00f883a 	mov	r7,r20
    4788:	1009883a 	mov	r4,r2
    478c:	180b883a 	mov	r5,r3
    4790:	000c3540 	call	c354 <__gedf2>
    4794:	00bc7c0e 	bge	zero,r2,3988 <__alt_data_end+0xfffe4588>
    4798:	01000c04 	movi	r4,48
    479c:	00000106 	br	47a4 <_dtoa_r+0x1580>
    47a0:	102f883a 	mov	r23,r2
    47a4:	b8bfffc4 	addi	r2,r23,-1
    47a8:	10c00007 	ldb	r3,0(r2)
    47ac:	193ffc26 	beq	r3,r4,47a0 <__alt_data_end+0xfffe53a0>
    47b0:	d9801317 	ldw	r6,76(sp)
    47b4:	d9800515 	stw	r6,20(sp)
    47b8:	003c4406 	br	38cc <__alt_data_end+0xfffe44cc>
    47bc:	d9801317 	ldw	r6,76(sp)
    47c0:	d9800515 	stw	r6,20(sp)
    47c4:	003cea06 	br	3b70 <__alt_data_end+0xfffe4770>
    47c8:	dd800f17 	ldw	r22,60(sp)
    47cc:	dcc01017 	ldw	r19,64(sp)
    47d0:	dc801217 	ldw	r18,72(sp)
    47d4:	003c6c06 	br	3988 <__alt_data_end+0xfffe4588>
    47d8:	903e031e 	bne	r18,zero,3fe8 <__alt_data_end+0xfffe4be8>
    47dc:	003ebb06 	br	42cc <__alt_data_end+0xfffe4ecc>
    47e0:	103e6c1e 	bne	r2,zero,4194 <__alt_data_end+0xfffe4d94>
    47e4:	4080004c 	andi	r2,r8,1
    47e8:	103e6a26 	beq	r2,zero,4194 <__alt_data_end+0xfffe4d94>
    47ec:	003e6606 	br	4188 <__alt_data_end+0xfffe4d88>
    47f0:	d8c00317 	ldw	r3,12(sp)
    47f4:	00800084 	movi	r2,2
    47f8:	10c02916 	blt	r2,r3,48a0 <_dtoa_r+0x167c>
    47fc:	d9000c17 	ldw	r4,48(sp)
    4800:	003e8806 	br	4224 <__alt_data_end+0xfffe4e24>
    4804:	04000084 	movi	r16,2
    4808:	003b9d06 	br	3680 <__alt_data_end+0xfffe4280>
    480c:	d9001317 	ldw	r4,76(sp)
    4810:	d9000515 	stw	r4,20(sp)
    4814:	003cd606 	br	3b70 <__alt_data_end+0xfffe4770>
    4818:	d8801317 	ldw	r2,76(sp)
    481c:	d8800515 	stw	r2,20(sp)
    4820:	003c2a06 	br	38cc <__alt_data_end+0xfffe44cc>
    4824:	d9800317 	ldw	r6,12(sp)
    4828:	00800084 	movi	r2,2
    482c:	11801516 	blt	r2,r6,4884 <_dtoa_r+0x1660>
    4830:	d9c00c17 	ldw	r7,48(sp)
    4834:	d9c00615 	stw	r7,24(sp)
    4838:	003df706 	br	4018 <__alt_data_end+0xfffe4c18>
    483c:	193d3926 	beq	r3,r4,3d24 <__alt_data_end+0xfffe4924>
    4840:	00c00f04 	movi	r3,60
    4844:	1885c83a 	sub	r2,r3,r2
    4848:	003ddf06 	br	3fc8 <__alt_data_end+0xfffe4bc8>
    484c:	e009883a 	mov	r4,fp
    4850:	e0001115 	stw	zero,68(fp)
    4854:	000b883a 	mov	r5,zero
    4858:	00062b80 	call	62b8 <_Balloc>
    485c:	d8800715 	stw	r2,28(sp)
    4860:	d8c00717 	ldw	r3,28(sp)
    4864:	00bfffc4 	movi	r2,-1
    4868:	01000044 	movi	r4,1
    486c:	d8800c15 	stw	r2,48(sp)
    4870:	e0c01015 	stw	r3,64(fp)
    4874:	d9000b15 	stw	r4,44(sp)
    4878:	d8800615 	stw	r2,24(sp)
    487c:	d8002215 	stw	zero,136(sp)
    4880:	003c4106 	br	3988 <__alt_data_end+0xfffe4588>
    4884:	d8c00c17 	ldw	r3,48(sp)
    4888:	d8c00615 	stw	r3,24(sp)
    488c:	003e7006 	br	4250 <__alt_data_end+0xfffe4e50>
    4890:	04400044 	movi	r17,1
    4894:	003b2006 	br	3518 <__alt_data_end+0xfffe4118>
    4898:	000b883a 	mov	r5,zero
    489c:	003b3d06 	br	3594 <__alt_data_end+0xfffe4194>
    48a0:	d8800c17 	ldw	r2,48(sp)
    48a4:	d8800615 	stw	r2,24(sp)
    48a8:	003e6906 	br	4250 <__alt_data_end+0xfffe4e50>

000048ac <__sflush_r>:
    48ac:	2880030b 	ldhu	r2,12(r5)
    48b0:	defffb04 	addi	sp,sp,-20
    48b4:	dcc00315 	stw	r19,12(sp)
    48b8:	dc400115 	stw	r17,4(sp)
    48bc:	dfc00415 	stw	ra,16(sp)
    48c0:	dc800215 	stw	r18,8(sp)
    48c4:	dc000015 	stw	r16,0(sp)
    48c8:	10c0020c 	andi	r3,r2,8
    48cc:	2823883a 	mov	r17,r5
    48d0:	2027883a 	mov	r19,r4
    48d4:	1800311e 	bne	r3,zero,499c <__sflush_r+0xf0>
    48d8:	28c00117 	ldw	r3,4(r5)
    48dc:	10820014 	ori	r2,r2,2048
    48e0:	2880030d 	sth	r2,12(r5)
    48e4:	00c04b0e 	bge	zero,r3,4a14 <__sflush_r+0x168>
    48e8:	8a000a17 	ldw	r8,40(r17)
    48ec:	40002326 	beq	r8,zero,497c <__sflush_r+0xd0>
    48f0:	9c000017 	ldw	r16,0(r19)
    48f4:	10c4000c 	andi	r3,r2,4096
    48f8:	98000015 	stw	zero,0(r19)
    48fc:	18004826 	beq	r3,zero,4a20 <__sflush_r+0x174>
    4900:	89801417 	ldw	r6,80(r17)
    4904:	10c0010c 	andi	r3,r2,4
    4908:	18000626 	beq	r3,zero,4924 <__sflush_r+0x78>
    490c:	88c00117 	ldw	r3,4(r17)
    4910:	88800c17 	ldw	r2,48(r17)
    4914:	30cdc83a 	sub	r6,r6,r3
    4918:	10000226 	beq	r2,zero,4924 <__sflush_r+0x78>
    491c:	88800f17 	ldw	r2,60(r17)
    4920:	308dc83a 	sub	r6,r6,r2
    4924:	89400717 	ldw	r5,28(r17)
    4928:	000f883a 	mov	r7,zero
    492c:	9809883a 	mov	r4,r19
    4930:	403ee83a 	callr	r8
    4934:	00ffffc4 	movi	r3,-1
    4938:	10c04426 	beq	r2,r3,4a4c <__sflush_r+0x1a0>
    493c:	88c0030b 	ldhu	r3,12(r17)
    4940:	89000417 	ldw	r4,16(r17)
    4944:	88000115 	stw	zero,4(r17)
    4948:	197dffcc 	andi	r5,r3,63487
    494c:	8940030d 	sth	r5,12(r17)
    4950:	89000015 	stw	r4,0(r17)
    4954:	18c4000c 	andi	r3,r3,4096
    4958:	18002c1e 	bne	r3,zero,4a0c <__sflush_r+0x160>
    495c:	89400c17 	ldw	r5,48(r17)
    4960:	9c000015 	stw	r16,0(r19)
    4964:	28000526 	beq	r5,zero,497c <__sflush_r+0xd0>
    4968:	88801004 	addi	r2,r17,64
    496c:	28800226 	beq	r5,r2,4978 <__sflush_r+0xcc>
    4970:	9809883a 	mov	r4,r19
    4974:	00050280 	call	5028 <_free_r>
    4978:	88000c15 	stw	zero,48(r17)
    497c:	0005883a 	mov	r2,zero
    4980:	dfc00417 	ldw	ra,16(sp)
    4984:	dcc00317 	ldw	r19,12(sp)
    4988:	dc800217 	ldw	r18,8(sp)
    498c:	dc400117 	ldw	r17,4(sp)
    4990:	dc000017 	ldw	r16,0(sp)
    4994:	dec00504 	addi	sp,sp,20
    4998:	f800283a 	ret
    499c:	2c800417 	ldw	r18,16(r5)
    49a0:	903ff626 	beq	r18,zero,497c <__alt_data_end+0xfffe557c>
    49a4:	2c000017 	ldw	r16,0(r5)
    49a8:	108000cc 	andi	r2,r2,3
    49ac:	2c800015 	stw	r18,0(r5)
    49b0:	84a1c83a 	sub	r16,r16,r18
    49b4:	1000131e 	bne	r2,zero,4a04 <__sflush_r+0x158>
    49b8:	28800517 	ldw	r2,20(r5)
    49bc:	88800215 	stw	r2,8(r17)
    49c0:	04000316 	blt	zero,r16,49d0 <__sflush_r+0x124>
    49c4:	003fed06 	br	497c <__alt_data_end+0xfffe557c>
    49c8:	90a5883a 	add	r18,r18,r2
    49cc:	043feb0e 	bge	zero,r16,497c <__alt_data_end+0xfffe557c>
    49d0:	88800917 	ldw	r2,36(r17)
    49d4:	89400717 	ldw	r5,28(r17)
    49d8:	800f883a 	mov	r7,r16
    49dc:	900d883a 	mov	r6,r18
    49e0:	9809883a 	mov	r4,r19
    49e4:	103ee83a 	callr	r2
    49e8:	80a1c83a 	sub	r16,r16,r2
    49ec:	00bff616 	blt	zero,r2,49c8 <__alt_data_end+0xfffe55c8>
    49f0:	88c0030b 	ldhu	r3,12(r17)
    49f4:	00bfffc4 	movi	r2,-1
    49f8:	18c01014 	ori	r3,r3,64
    49fc:	88c0030d 	sth	r3,12(r17)
    4a00:	003fdf06 	br	4980 <__alt_data_end+0xfffe5580>
    4a04:	0005883a 	mov	r2,zero
    4a08:	003fec06 	br	49bc <__alt_data_end+0xfffe55bc>
    4a0c:	88801415 	stw	r2,80(r17)
    4a10:	003fd206 	br	495c <__alt_data_end+0xfffe555c>
    4a14:	28c00f17 	ldw	r3,60(r5)
    4a18:	00ffb316 	blt	zero,r3,48e8 <__alt_data_end+0xfffe54e8>
    4a1c:	003fd706 	br	497c <__alt_data_end+0xfffe557c>
    4a20:	89400717 	ldw	r5,28(r17)
    4a24:	000d883a 	mov	r6,zero
    4a28:	01c00044 	movi	r7,1
    4a2c:	9809883a 	mov	r4,r19
    4a30:	403ee83a 	callr	r8
    4a34:	100d883a 	mov	r6,r2
    4a38:	00bfffc4 	movi	r2,-1
    4a3c:	30801426 	beq	r6,r2,4a90 <__sflush_r+0x1e4>
    4a40:	8880030b 	ldhu	r2,12(r17)
    4a44:	8a000a17 	ldw	r8,40(r17)
    4a48:	003fae06 	br	4904 <__alt_data_end+0xfffe5504>
    4a4c:	98c00017 	ldw	r3,0(r19)
    4a50:	183fba26 	beq	r3,zero,493c <__alt_data_end+0xfffe553c>
    4a54:	01000744 	movi	r4,29
    4a58:	19000626 	beq	r3,r4,4a74 <__sflush_r+0x1c8>
    4a5c:	01000584 	movi	r4,22
    4a60:	19000426 	beq	r3,r4,4a74 <__sflush_r+0x1c8>
    4a64:	88c0030b 	ldhu	r3,12(r17)
    4a68:	18c01014 	ori	r3,r3,64
    4a6c:	88c0030d 	sth	r3,12(r17)
    4a70:	003fc306 	br	4980 <__alt_data_end+0xfffe5580>
    4a74:	8880030b 	ldhu	r2,12(r17)
    4a78:	88c00417 	ldw	r3,16(r17)
    4a7c:	88000115 	stw	zero,4(r17)
    4a80:	10bdffcc 	andi	r2,r2,63487
    4a84:	8880030d 	sth	r2,12(r17)
    4a88:	88c00015 	stw	r3,0(r17)
    4a8c:	003fb306 	br	495c <__alt_data_end+0xfffe555c>
    4a90:	98800017 	ldw	r2,0(r19)
    4a94:	103fea26 	beq	r2,zero,4a40 <__alt_data_end+0xfffe5640>
    4a98:	00c00744 	movi	r3,29
    4a9c:	10c00226 	beq	r2,r3,4aa8 <__sflush_r+0x1fc>
    4aa0:	00c00584 	movi	r3,22
    4aa4:	10c0031e 	bne	r2,r3,4ab4 <__sflush_r+0x208>
    4aa8:	9c000015 	stw	r16,0(r19)
    4aac:	0005883a 	mov	r2,zero
    4ab0:	003fb306 	br	4980 <__alt_data_end+0xfffe5580>
    4ab4:	88c0030b 	ldhu	r3,12(r17)
    4ab8:	3005883a 	mov	r2,r6
    4abc:	18c01014 	ori	r3,r3,64
    4ac0:	88c0030d 	sth	r3,12(r17)
    4ac4:	003fae06 	br	4980 <__alt_data_end+0xfffe5580>

00004ac8 <_fflush_r>:
    4ac8:	defffd04 	addi	sp,sp,-12
    4acc:	dc000115 	stw	r16,4(sp)
    4ad0:	dfc00215 	stw	ra,8(sp)
    4ad4:	2021883a 	mov	r16,r4
    4ad8:	20000226 	beq	r4,zero,4ae4 <_fflush_r+0x1c>
    4adc:	20800e17 	ldw	r2,56(r4)
    4ae0:	10000c26 	beq	r2,zero,4b14 <_fflush_r+0x4c>
    4ae4:	2880030f 	ldh	r2,12(r5)
    4ae8:	1000051e 	bne	r2,zero,4b00 <_fflush_r+0x38>
    4aec:	0005883a 	mov	r2,zero
    4af0:	dfc00217 	ldw	ra,8(sp)
    4af4:	dc000117 	ldw	r16,4(sp)
    4af8:	dec00304 	addi	sp,sp,12
    4afc:	f800283a 	ret
    4b00:	8009883a 	mov	r4,r16
    4b04:	dfc00217 	ldw	ra,8(sp)
    4b08:	dc000117 	ldw	r16,4(sp)
    4b0c:	dec00304 	addi	sp,sp,12
    4b10:	00048ac1 	jmpi	48ac <__sflush_r>
    4b14:	d9400015 	stw	r5,0(sp)
    4b18:	0004eb40 	call	4eb4 <__sinit>
    4b1c:	d9400017 	ldw	r5,0(sp)
    4b20:	003ff006 	br	4ae4 <__alt_data_end+0xfffe56e4>

00004b24 <fflush>:
    4b24:	20000526 	beq	r4,zero,4b3c <fflush+0x18>
    4b28:	00800074 	movhi	r2,1
    4b2c:	10878604 	addi	r2,r2,7704
    4b30:	200b883a 	mov	r5,r4
    4b34:	11000017 	ldw	r4,0(r2)
    4b38:	0004ac81 	jmpi	4ac8 <_fflush_r>
    4b3c:	00800074 	movhi	r2,1
    4b40:	10878504 	addi	r2,r2,7700
    4b44:	11000017 	ldw	r4,0(r2)
    4b48:	01400034 	movhi	r5,0
    4b4c:	2952b204 	addi	r5,r5,19144
    4b50:	00053fc1 	jmpi	53fc <_fwalk_reent>

00004b54 <__fp_unlock>:
    4b54:	0005883a 	mov	r2,zero
    4b58:	f800283a 	ret

00004b5c <_cleanup_r>:
    4b5c:	01400074 	movhi	r5,1
    4b60:	2963dc04 	addi	r5,r5,-28816
    4b64:	00053fc1 	jmpi	53fc <_fwalk_reent>

00004b68 <__sinit.part.1>:
    4b68:	defff704 	addi	sp,sp,-36
    4b6c:	00c00034 	movhi	r3,0
    4b70:	dfc00815 	stw	ra,32(sp)
    4b74:	ddc00715 	stw	r23,28(sp)
    4b78:	dd800615 	stw	r22,24(sp)
    4b7c:	dd400515 	stw	r21,20(sp)
    4b80:	dd000415 	stw	r20,16(sp)
    4b84:	dcc00315 	stw	r19,12(sp)
    4b88:	dc800215 	stw	r18,8(sp)
    4b8c:	dc400115 	stw	r17,4(sp)
    4b90:	dc000015 	stw	r16,0(sp)
    4b94:	18d2d704 	addi	r3,r3,19292
    4b98:	24000117 	ldw	r16,4(r4)
    4b9c:	20c00f15 	stw	r3,60(r4)
    4ba0:	2080bb04 	addi	r2,r4,748
    4ba4:	00c000c4 	movi	r3,3
    4ba8:	20c0b915 	stw	r3,740(r4)
    4bac:	2080ba15 	stw	r2,744(r4)
    4bb0:	2000b815 	stw	zero,736(r4)
    4bb4:	05c00204 	movi	r23,8
    4bb8:	00800104 	movi	r2,4
    4bbc:	2025883a 	mov	r18,r4
    4bc0:	b80d883a 	mov	r6,r23
    4bc4:	81001704 	addi	r4,r16,92
    4bc8:	000b883a 	mov	r5,zero
    4bcc:	80000015 	stw	zero,0(r16)
    4bd0:	80000115 	stw	zero,4(r16)
    4bd4:	80000215 	stw	zero,8(r16)
    4bd8:	8080030d 	sth	r2,12(r16)
    4bdc:	80001915 	stw	zero,100(r16)
    4be0:	8000038d 	sth	zero,14(r16)
    4be4:	80000415 	stw	zero,16(r16)
    4be8:	80000515 	stw	zero,20(r16)
    4bec:	80000615 	stw	zero,24(r16)
    4bf0:	00061900 	call	6190 <memset>
    4bf4:	05800034 	movhi	r22,0
    4bf8:	94400217 	ldw	r17,8(r18)
    4bfc:	05400034 	movhi	r21,0
    4c00:	05000034 	movhi	r20,0
    4c04:	04c00034 	movhi	r19,0
    4c08:	b59d0e04 	addi	r22,r22,29752
    4c0c:	ad5d2504 	addi	r21,r21,29844
    4c10:	a51d4404 	addi	r20,r20,29968
    4c14:	9cdd5b04 	addi	r19,r19,30060
    4c18:	85800815 	stw	r22,32(r16)
    4c1c:	85400915 	stw	r21,36(r16)
    4c20:	85000a15 	stw	r20,40(r16)
    4c24:	84c00b15 	stw	r19,44(r16)
    4c28:	84000715 	stw	r16,28(r16)
    4c2c:	00800284 	movi	r2,10
    4c30:	8880030d 	sth	r2,12(r17)
    4c34:	00800044 	movi	r2,1
    4c38:	b80d883a 	mov	r6,r23
    4c3c:	89001704 	addi	r4,r17,92
    4c40:	000b883a 	mov	r5,zero
    4c44:	88000015 	stw	zero,0(r17)
    4c48:	88000115 	stw	zero,4(r17)
    4c4c:	88000215 	stw	zero,8(r17)
    4c50:	88001915 	stw	zero,100(r17)
    4c54:	8880038d 	sth	r2,14(r17)
    4c58:	88000415 	stw	zero,16(r17)
    4c5c:	88000515 	stw	zero,20(r17)
    4c60:	88000615 	stw	zero,24(r17)
    4c64:	00061900 	call	6190 <memset>
    4c68:	94000317 	ldw	r16,12(r18)
    4c6c:	00800484 	movi	r2,18
    4c70:	8c400715 	stw	r17,28(r17)
    4c74:	8d800815 	stw	r22,32(r17)
    4c78:	8d400915 	stw	r21,36(r17)
    4c7c:	8d000a15 	stw	r20,40(r17)
    4c80:	8cc00b15 	stw	r19,44(r17)
    4c84:	8080030d 	sth	r2,12(r16)
    4c88:	00800084 	movi	r2,2
    4c8c:	80000015 	stw	zero,0(r16)
    4c90:	80000115 	stw	zero,4(r16)
    4c94:	80000215 	stw	zero,8(r16)
    4c98:	80001915 	stw	zero,100(r16)
    4c9c:	8080038d 	sth	r2,14(r16)
    4ca0:	80000415 	stw	zero,16(r16)
    4ca4:	80000515 	stw	zero,20(r16)
    4ca8:	80000615 	stw	zero,24(r16)
    4cac:	b80d883a 	mov	r6,r23
    4cb0:	000b883a 	mov	r5,zero
    4cb4:	81001704 	addi	r4,r16,92
    4cb8:	00061900 	call	6190 <memset>
    4cbc:	00800044 	movi	r2,1
    4cc0:	84000715 	stw	r16,28(r16)
    4cc4:	85800815 	stw	r22,32(r16)
    4cc8:	85400915 	stw	r21,36(r16)
    4ccc:	85000a15 	stw	r20,40(r16)
    4cd0:	84c00b15 	stw	r19,44(r16)
    4cd4:	90800e15 	stw	r2,56(r18)
    4cd8:	dfc00817 	ldw	ra,32(sp)
    4cdc:	ddc00717 	ldw	r23,28(sp)
    4ce0:	dd800617 	ldw	r22,24(sp)
    4ce4:	dd400517 	ldw	r21,20(sp)
    4ce8:	dd000417 	ldw	r20,16(sp)
    4cec:	dcc00317 	ldw	r19,12(sp)
    4cf0:	dc800217 	ldw	r18,8(sp)
    4cf4:	dc400117 	ldw	r17,4(sp)
    4cf8:	dc000017 	ldw	r16,0(sp)
    4cfc:	dec00904 	addi	sp,sp,36
    4d00:	f800283a 	ret

00004d04 <__fp_lock>:
    4d04:	0005883a 	mov	r2,zero
    4d08:	f800283a 	ret

00004d0c <__sfmoreglue>:
    4d0c:	defffc04 	addi	sp,sp,-16
    4d10:	dc800215 	stw	r18,8(sp)
    4d14:	2825883a 	mov	r18,r5
    4d18:	dc000015 	stw	r16,0(sp)
    4d1c:	01401a04 	movi	r5,104
    4d20:	2021883a 	mov	r16,r4
    4d24:	913fffc4 	addi	r4,r18,-1
    4d28:	dfc00315 	stw	ra,12(sp)
    4d2c:	dc400115 	stw	r17,4(sp)
    4d30:	000b0280 	call	b028 <__mulsi3>
    4d34:	8009883a 	mov	r4,r16
    4d38:	11401d04 	addi	r5,r2,116
    4d3c:	1023883a 	mov	r17,r2
    4d40:	00057580 	call	5758 <_malloc_r>
    4d44:	1021883a 	mov	r16,r2
    4d48:	10000726 	beq	r2,zero,4d68 <__sfmoreglue+0x5c>
    4d4c:	11000304 	addi	r4,r2,12
    4d50:	10000015 	stw	zero,0(r2)
    4d54:	14800115 	stw	r18,4(r2)
    4d58:	11000215 	stw	r4,8(r2)
    4d5c:	89801a04 	addi	r6,r17,104
    4d60:	000b883a 	mov	r5,zero
    4d64:	00061900 	call	6190 <memset>
    4d68:	8005883a 	mov	r2,r16
    4d6c:	dfc00317 	ldw	ra,12(sp)
    4d70:	dc800217 	ldw	r18,8(sp)
    4d74:	dc400117 	ldw	r17,4(sp)
    4d78:	dc000017 	ldw	r16,0(sp)
    4d7c:	dec00404 	addi	sp,sp,16
    4d80:	f800283a 	ret

00004d84 <__sfp>:
    4d84:	defffb04 	addi	sp,sp,-20
    4d88:	dc000015 	stw	r16,0(sp)
    4d8c:	04000074 	movhi	r16,1
    4d90:	84078504 	addi	r16,r16,7700
    4d94:	dcc00315 	stw	r19,12(sp)
    4d98:	2027883a 	mov	r19,r4
    4d9c:	81000017 	ldw	r4,0(r16)
    4da0:	dfc00415 	stw	ra,16(sp)
    4da4:	dc800215 	stw	r18,8(sp)
    4da8:	20800e17 	ldw	r2,56(r4)
    4dac:	dc400115 	stw	r17,4(sp)
    4db0:	1000021e 	bne	r2,zero,4dbc <__sfp+0x38>
    4db4:	0004b680 	call	4b68 <__sinit.part.1>
    4db8:	81000017 	ldw	r4,0(r16)
    4dbc:	2480b804 	addi	r18,r4,736
    4dc0:	047fffc4 	movi	r17,-1
    4dc4:	91000117 	ldw	r4,4(r18)
    4dc8:	94000217 	ldw	r16,8(r18)
    4dcc:	213fffc4 	addi	r4,r4,-1
    4dd0:	20000a16 	blt	r4,zero,4dfc <__sfp+0x78>
    4dd4:	8080030f 	ldh	r2,12(r16)
    4dd8:	10000c26 	beq	r2,zero,4e0c <__sfp+0x88>
    4ddc:	80c01d04 	addi	r3,r16,116
    4de0:	00000206 	br	4dec <__sfp+0x68>
    4de4:	18bfe60f 	ldh	r2,-104(r3)
    4de8:	10000826 	beq	r2,zero,4e0c <__sfp+0x88>
    4dec:	213fffc4 	addi	r4,r4,-1
    4df0:	1c3ffd04 	addi	r16,r3,-12
    4df4:	18c01a04 	addi	r3,r3,104
    4df8:	247ffa1e 	bne	r4,r17,4de4 <__alt_data_end+0xfffe59e4>
    4dfc:	90800017 	ldw	r2,0(r18)
    4e00:	10001d26 	beq	r2,zero,4e78 <__sfp+0xf4>
    4e04:	1025883a 	mov	r18,r2
    4e08:	003fee06 	br	4dc4 <__alt_data_end+0xfffe59c4>
    4e0c:	00bfffc4 	movi	r2,-1
    4e10:	8080038d 	sth	r2,14(r16)
    4e14:	00800044 	movi	r2,1
    4e18:	8080030d 	sth	r2,12(r16)
    4e1c:	80001915 	stw	zero,100(r16)
    4e20:	80000015 	stw	zero,0(r16)
    4e24:	80000215 	stw	zero,8(r16)
    4e28:	80000115 	stw	zero,4(r16)
    4e2c:	80000415 	stw	zero,16(r16)
    4e30:	80000515 	stw	zero,20(r16)
    4e34:	80000615 	stw	zero,24(r16)
    4e38:	01800204 	movi	r6,8
    4e3c:	000b883a 	mov	r5,zero
    4e40:	81001704 	addi	r4,r16,92
    4e44:	00061900 	call	6190 <memset>
    4e48:	8005883a 	mov	r2,r16
    4e4c:	80000c15 	stw	zero,48(r16)
    4e50:	80000d15 	stw	zero,52(r16)
    4e54:	80001115 	stw	zero,68(r16)
    4e58:	80001215 	stw	zero,72(r16)
    4e5c:	dfc00417 	ldw	ra,16(sp)
    4e60:	dcc00317 	ldw	r19,12(sp)
    4e64:	dc800217 	ldw	r18,8(sp)
    4e68:	dc400117 	ldw	r17,4(sp)
    4e6c:	dc000017 	ldw	r16,0(sp)
    4e70:	dec00504 	addi	sp,sp,20
    4e74:	f800283a 	ret
    4e78:	01400104 	movi	r5,4
    4e7c:	9809883a 	mov	r4,r19
    4e80:	0004d0c0 	call	4d0c <__sfmoreglue>
    4e84:	90800015 	stw	r2,0(r18)
    4e88:	103fde1e 	bne	r2,zero,4e04 <__alt_data_end+0xfffe5a04>
    4e8c:	00800304 	movi	r2,12
    4e90:	98800015 	stw	r2,0(r19)
    4e94:	0005883a 	mov	r2,zero
    4e98:	003ff006 	br	4e5c <__alt_data_end+0xfffe5a5c>

00004e9c <_cleanup>:
    4e9c:	00800074 	movhi	r2,1
    4ea0:	10878504 	addi	r2,r2,7700
    4ea4:	11000017 	ldw	r4,0(r2)
    4ea8:	01400074 	movhi	r5,1
    4eac:	2963dc04 	addi	r5,r5,-28816
    4eb0:	00053fc1 	jmpi	53fc <_fwalk_reent>

00004eb4 <__sinit>:
    4eb4:	20800e17 	ldw	r2,56(r4)
    4eb8:	10000126 	beq	r2,zero,4ec0 <__sinit+0xc>
    4ebc:	f800283a 	ret
    4ec0:	0004b681 	jmpi	4b68 <__sinit.part.1>

00004ec4 <__sfp_lock_acquire>:
    4ec4:	f800283a 	ret

00004ec8 <__sfp_lock_release>:
    4ec8:	f800283a 	ret

00004ecc <__sinit_lock_acquire>:
    4ecc:	f800283a 	ret

00004ed0 <__sinit_lock_release>:
    4ed0:	f800283a 	ret

00004ed4 <__fp_lock_all>:
    4ed4:	00800074 	movhi	r2,1
    4ed8:	10878604 	addi	r2,r2,7704
    4edc:	11000017 	ldw	r4,0(r2)
    4ee0:	01400034 	movhi	r5,0
    4ee4:	29534104 	addi	r5,r5,19716
    4ee8:	00053381 	jmpi	5338 <_fwalk>

00004eec <__fp_unlock_all>:
    4eec:	00800074 	movhi	r2,1
    4ef0:	10878604 	addi	r2,r2,7704
    4ef4:	11000017 	ldw	r4,0(r2)
    4ef8:	01400034 	movhi	r5,0
    4efc:	2952d504 	addi	r5,r5,19284
    4f00:	00053381 	jmpi	5338 <_fwalk>

00004f04 <_malloc_trim_r>:
    4f04:	defffb04 	addi	sp,sp,-20
    4f08:	dcc00315 	stw	r19,12(sp)
    4f0c:	04c00074 	movhi	r19,1
    4f10:	dc800215 	stw	r18,8(sp)
    4f14:	dc400115 	stw	r17,4(sp)
    4f18:	dc000015 	stw	r16,0(sp)
    4f1c:	dfc00415 	stw	ra,16(sp)
    4f20:	2821883a 	mov	r16,r5
    4f24:	9cc20104 	addi	r19,r19,2052
    4f28:	2025883a 	mov	r18,r4
    4f2c:	000e1300 	call	e130 <__malloc_lock>
    4f30:	98800217 	ldw	r2,8(r19)
    4f34:	14400117 	ldw	r17,4(r2)
    4f38:	00bfff04 	movi	r2,-4
    4f3c:	88a2703a 	and	r17,r17,r2
    4f40:	8c21c83a 	sub	r16,r17,r16
    4f44:	8403fbc4 	addi	r16,r16,4079
    4f48:	8020d33a 	srli	r16,r16,12
    4f4c:	0083ffc4 	movi	r2,4095
    4f50:	843fffc4 	addi	r16,r16,-1
    4f54:	8020933a 	slli	r16,r16,12
    4f58:	1400060e 	bge	r2,r16,4f74 <_malloc_trim_r+0x70>
    4f5c:	000b883a 	mov	r5,zero
    4f60:	9009883a 	mov	r4,r18
    4f64:	00073e40 	call	73e4 <_sbrk_r>
    4f68:	98c00217 	ldw	r3,8(r19)
    4f6c:	1c47883a 	add	r3,r3,r17
    4f70:	10c00a26 	beq	r2,r3,4f9c <_malloc_trim_r+0x98>
    4f74:	9009883a 	mov	r4,r18
    4f78:	000e1540 	call	e154 <__malloc_unlock>
    4f7c:	0005883a 	mov	r2,zero
    4f80:	dfc00417 	ldw	ra,16(sp)
    4f84:	dcc00317 	ldw	r19,12(sp)
    4f88:	dc800217 	ldw	r18,8(sp)
    4f8c:	dc400117 	ldw	r17,4(sp)
    4f90:	dc000017 	ldw	r16,0(sp)
    4f94:	dec00504 	addi	sp,sp,20
    4f98:	f800283a 	ret
    4f9c:	040bc83a 	sub	r5,zero,r16
    4fa0:	9009883a 	mov	r4,r18
    4fa4:	00073e40 	call	73e4 <_sbrk_r>
    4fa8:	00ffffc4 	movi	r3,-1
    4fac:	10c00d26 	beq	r2,r3,4fe4 <_malloc_trim_r+0xe0>
    4fb0:	00c00074 	movhi	r3,1
    4fb4:	18ce6404 	addi	r3,r3,14736
    4fb8:	18800017 	ldw	r2,0(r3)
    4fbc:	99000217 	ldw	r4,8(r19)
    4fc0:	8c23c83a 	sub	r17,r17,r16
    4fc4:	8c400054 	ori	r17,r17,1
    4fc8:	1421c83a 	sub	r16,r2,r16
    4fcc:	24400115 	stw	r17,4(r4)
    4fd0:	9009883a 	mov	r4,r18
    4fd4:	1c000015 	stw	r16,0(r3)
    4fd8:	000e1540 	call	e154 <__malloc_unlock>
    4fdc:	00800044 	movi	r2,1
    4fe0:	003fe706 	br	4f80 <__alt_data_end+0xfffe5b80>
    4fe4:	000b883a 	mov	r5,zero
    4fe8:	9009883a 	mov	r4,r18
    4fec:	00073e40 	call	73e4 <_sbrk_r>
    4ff0:	99000217 	ldw	r4,8(r19)
    4ff4:	014003c4 	movi	r5,15
    4ff8:	1107c83a 	sub	r3,r2,r4
    4ffc:	28ffdd0e 	bge	r5,r3,4f74 <__alt_data_end+0xfffe5b74>
    5000:	01400074 	movhi	r5,1
    5004:	29478804 	addi	r5,r5,7712
    5008:	29400017 	ldw	r5,0(r5)
    500c:	18c00054 	ori	r3,r3,1
    5010:	20c00115 	stw	r3,4(r4)
    5014:	00c00074 	movhi	r3,1
    5018:	1145c83a 	sub	r2,r2,r5
    501c:	18ce6404 	addi	r3,r3,14736
    5020:	18800015 	stw	r2,0(r3)
    5024:	003fd306 	br	4f74 <__alt_data_end+0xfffe5b74>

00005028 <_free_r>:
    5028:	28004126 	beq	r5,zero,5130 <_free_r+0x108>
    502c:	defffd04 	addi	sp,sp,-12
    5030:	dc400115 	stw	r17,4(sp)
    5034:	dc000015 	stw	r16,0(sp)
    5038:	2023883a 	mov	r17,r4
    503c:	2821883a 	mov	r16,r5
    5040:	dfc00215 	stw	ra,8(sp)
    5044:	000e1300 	call	e130 <__malloc_lock>
    5048:	81ffff17 	ldw	r7,-4(r16)
    504c:	00bfff84 	movi	r2,-2
    5050:	01000074 	movhi	r4,1
    5054:	81bffe04 	addi	r6,r16,-8
    5058:	3884703a 	and	r2,r7,r2
    505c:	21020104 	addi	r4,r4,2052
    5060:	308b883a 	add	r5,r6,r2
    5064:	2a400117 	ldw	r9,4(r5)
    5068:	22000217 	ldw	r8,8(r4)
    506c:	00ffff04 	movi	r3,-4
    5070:	48c6703a 	and	r3,r9,r3
    5074:	2a005726 	beq	r5,r8,51d4 <_free_r+0x1ac>
    5078:	28c00115 	stw	r3,4(r5)
    507c:	39c0004c 	andi	r7,r7,1
    5080:	3800091e 	bne	r7,zero,50a8 <_free_r+0x80>
    5084:	823ffe17 	ldw	r8,-8(r16)
    5088:	22400204 	addi	r9,r4,8
    508c:	320dc83a 	sub	r6,r6,r8
    5090:	31c00217 	ldw	r7,8(r6)
    5094:	1205883a 	add	r2,r2,r8
    5098:	3a406526 	beq	r7,r9,5230 <_free_r+0x208>
    509c:	32000317 	ldw	r8,12(r6)
    50a0:	3a000315 	stw	r8,12(r7)
    50a4:	41c00215 	stw	r7,8(r8)
    50a8:	28cf883a 	add	r7,r5,r3
    50ac:	39c00117 	ldw	r7,4(r7)
    50b0:	39c0004c 	andi	r7,r7,1
    50b4:	38003a26 	beq	r7,zero,51a0 <_free_r+0x178>
    50b8:	10c00054 	ori	r3,r2,1
    50bc:	30c00115 	stw	r3,4(r6)
    50c0:	3087883a 	add	r3,r6,r2
    50c4:	18800015 	stw	r2,0(r3)
    50c8:	00c07fc4 	movi	r3,511
    50cc:	18801936 	bltu	r3,r2,5134 <_free_r+0x10c>
    50d0:	1004d0fa 	srli	r2,r2,3
    50d4:	01c00044 	movi	r7,1
    50d8:	21400117 	ldw	r5,4(r4)
    50dc:	10c00044 	addi	r3,r2,1
    50e0:	18c7883a 	add	r3,r3,r3
    50e4:	1005d0ba 	srai	r2,r2,2
    50e8:	18c7883a 	add	r3,r3,r3
    50ec:	18c7883a 	add	r3,r3,r3
    50f0:	1907883a 	add	r3,r3,r4
    50f4:	3884983a 	sll	r2,r7,r2
    50f8:	19c00017 	ldw	r7,0(r3)
    50fc:	1a3ffe04 	addi	r8,r3,-8
    5100:	1144b03a 	or	r2,r2,r5
    5104:	32000315 	stw	r8,12(r6)
    5108:	31c00215 	stw	r7,8(r6)
    510c:	20800115 	stw	r2,4(r4)
    5110:	19800015 	stw	r6,0(r3)
    5114:	39800315 	stw	r6,12(r7)
    5118:	8809883a 	mov	r4,r17
    511c:	dfc00217 	ldw	ra,8(sp)
    5120:	dc400117 	ldw	r17,4(sp)
    5124:	dc000017 	ldw	r16,0(sp)
    5128:	dec00304 	addi	sp,sp,12
    512c:	000e1541 	jmpi	e154 <__malloc_unlock>
    5130:	f800283a 	ret
    5134:	100ad27a 	srli	r5,r2,9
    5138:	00c00104 	movi	r3,4
    513c:	19404a36 	bltu	r3,r5,5268 <_free_r+0x240>
    5140:	100ad1ba 	srli	r5,r2,6
    5144:	28c00e44 	addi	r3,r5,57
    5148:	18c7883a 	add	r3,r3,r3
    514c:	29400e04 	addi	r5,r5,56
    5150:	18c7883a 	add	r3,r3,r3
    5154:	18c7883a 	add	r3,r3,r3
    5158:	1909883a 	add	r4,r3,r4
    515c:	20c00017 	ldw	r3,0(r4)
    5160:	01c00074 	movhi	r7,1
    5164:	213ffe04 	addi	r4,r4,-8
    5168:	39c20104 	addi	r7,r7,2052
    516c:	20c04426 	beq	r4,r3,5280 <_free_r+0x258>
    5170:	01ffff04 	movi	r7,-4
    5174:	19400117 	ldw	r5,4(r3)
    5178:	29ca703a 	and	r5,r5,r7
    517c:	1140022e 	bgeu	r2,r5,5188 <_free_r+0x160>
    5180:	18c00217 	ldw	r3,8(r3)
    5184:	20fffb1e 	bne	r4,r3,5174 <__alt_data_end+0xfffe5d74>
    5188:	19000317 	ldw	r4,12(r3)
    518c:	31000315 	stw	r4,12(r6)
    5190:	30c00215 	stw	r3,8(r6)
    5194:	21800215 	stw	r6,8(r4)
    5198:	19800315 	stw	r6,12(r3)
    519c:	003fde06 	br	5118 <__alt_data_end+0xfffe5d18>
    51a0:	29c00217 	ldw	r7,8(r5)
    51a4:	10c5883a 	add	r2,r2,r3
    51a8:	00c00074 	movhi	r3,1
    51ac:	18c20304 	addi	r3,r3,2060
    51b0:	38c03b26 	beq	r7,r3,52a0 <_free_r+0x278>
    51b4:	2a000317 	ldw	r8,12(r5)
    51b8:	11400054 	ori	r5,r2,1
    51bc:	3087883a 	add	r3,r6,r2
    51c0:	3a000315 	stw	r8,12(r7)
    51c4:	41c00215 	stw	r7,8(r8)
    51c8:	31400115 	stw	r5,4(r6)
    51cc:	18800015 	stw	r2,0(r3)
    51d0:	003fbd06 	br	50c8 <__alt_data_end+0xfffe5cc8>
    51d4:	39c0004c 	andi	r7,r7,1
    51d8:	10c5883a 	add	r2,r2,r3
    51dc:	3800071e 	bne	r7,zero,51fc <_free_r+0x1d4>
    51e0:	81fffe17 	ldw	r7,-8(r16)
    51e4:	31cdc83a 	sub	r6,r6,r7
    51e8:	30c00317 	ldw	r3,12(r6)
    51ec:	31400217 	ldw	r5,8(r6)
    51f0:	11c5883a 	add	r2,r2,r7
    51f4:	28c00315 	stw	r3,12(r5)
    51f8:	19400215 	stw	r5,8(r3)
    51fc:	10c00054 	ori	r3,r2,1
    5200:	30c00115 	stw	r3,4(r6)
    5204:	00c00074 	movhi	r3,1
    5208:	18c78904 	addi	r3,r3,7716
    520c:	18c00017 	ldw	r3,0(r3)
    5210:	21800215 	stw	r6,8(r4)
    5214:	10ffc036 	bltu	r2,r3,5118 <__alt_data_end+0xfffe5d18>
    5218:	00800074 	movhi	r2,1
    521c:	108e5c04 	addi	r2,r2,14704
    5220:	11400017 	ldw	r5,0(r2)
    5224:	8809883a 	mov	r4,r17
    5228:	0004f040 	call	4f04 <_malloc_trim_r>
    522c:	003fba06 	br	5118 <__alt_data_end+0xfffe5d18>
    5230:	28c9883a 	add	r4,r5,r3
    5234:	21000117 	ldw	r4,4(r4)
    5238:	2100004c 	andi	r4,r4,1
    523c:	2000391e 	bne	r4,zero,5324 <_free_r+0x2fc>
    5240:	29c00217 	ldw	r7,8(r5)
    5244:	29000317 	ldw	r4,12(r5)
    5248:	1885883a 	add	r2,r3,r2
    524c:	10c00054 	ori	r3,r2,1
    5250:	39000315 	stw	r4,12(r7)
    5254:	21c00215 	stw	r7,8(r4)
    5258:	30c00115 	stw	r3,4(r6)
    525c:	308d883a 	add	r6,r6,r2
    5260:	30800015 	stw	r2,0(r6)
    5264:	003fac06 	br	5118 <__alt_data_end+0xfffe5d18>
    5268:	00c00504 	movi	r3,20
    526c:	19401536 	bltu	r3,r5,52c4 <_free_r+0x29c>
    5270:	28c01704 	addi	r3,r5,92
    5274:	18c7883a 	add	r3,r3,r3
    5278:	294016c4 	addi	r5,r5,91
    527c:	003fb406 	br	5150 <__alt_data_end+0xfffe5d50>
    5280:	280bd0ba 	srai	r5,r5,2
    5284:	00c00044 	movi	r3,1
    5288:	38800117 	ldw	r2,4(r7)
    528c:	194a983a 	sll	r5,r3,r5
    5290:	2007883a 	mov	r3,r4
    5294:	2884b03a 	or	r2,r5,r2
    5298:	38800115 	stw	r2,4(r7)
    529c:	003fbb06 	br	518c <__alt_data_end+0xfffe5d8c>
    52a0:	21800515 	stw	r6,20(r4)
    52a4:	21800415 	stw	r6,16(r4)
    52a8:	10c00054 	ori	r3,r2,1
    52ac:	31c00315 	stw	r7,12(r6)
    52b0:	31c00215 	stw	r7,8(r6)
    52b4:	30c00115 	stw	r3,4(r6)
    52b8:	308d883a 	add	r6,r6,r2
    52bc:	30800015 	stw	r2,0(r6)
    52c0:	003f9506 	br	5118 <__alt_data_end+0xfffe5d18>
    52c4:	00c01504 	movi	r3,84
    52c8:	19400536 	bltu	r3,r5,52e0 <_free_r+0x2b8>
    52cc:	100ad33a 	srli	r5,r2,12
    52d0:	28c01bc4 	addi	r3,r5,111
    52d4:	18c7883a 	add	r3,r3,r3
    52d8:	29401b84 	addi	r5,r5,110
    52dc:	003f9c06 	br	5150 <__alt_data_end+0xfffe5d50>
    52e0:	00c05504 	movi	r3,340
    52e4:	19400536 	bltu	r3,r5,52fc <_free_r+0x2d4>
    52e8:	100ad3fa 	srli	r5,r2,15
    52ec:	28c01e04 	addi	r3,r5,120
    52f0:	18c7883a 	add	r3,r3,r3
    52f4:	29401dc4 	addi	r5,r5,119
    52f8:	003f9506 	br	5150 <__alt_data_end+0xfffe5d50>
    52fc:	00c15504 	movi	r3,1364
    5300:	19400536 	bltu	r3,r5,5318 <_free_r+0x2f0>
    5304:	100ad4ba 	srli	r5,r2,18
    5308:	28c01f44 	addi	r3,r5,125
    530c:	18c7883a 	add	r3,r3,r3
    5310:	29401f04 	addi	r5,r5,124
    5314:	003f8e06 	br	5150 <__alt_data_end+0xfffe5d50>
    5318:	00c03f84 	movi	r3,254
    531c:	01401f84 	movi	r5,126
    5320:	003f8b06 	br	5150 <__alt_data_end+0xfffe5d50>
    5324:	10c00054 	ori	r3,r2,1
    5328:	30c00115 	stw	r3,4(r6)
    532c:	308d883a 	add	r6,r6,r2
    5330:	30800015 	stw	r2,0(r6)
    5334:	003f7806 	br	5118 <__alt_data_end+0xfffe5d18>

00005338 <_fwalk>:
    5338:	defff704 	addi	sp,sp,-36
    533c:	dd000415 	stw	r20,16(sp)
    5340:	dfc00815 	stw	ra,32(sp)
    5344:	ddc00715 	stw	r23,28(sp)
    5348:	dd800615 	stw	r22,24(sp)
    534c:	dd400515 	stw	r21,20(sp)
    5350:	dcc00315 	stw	r19,12(sp)
    5354:	dc800215 	stw	r18,8(sp)
    5358:	dc400115 	stw	r17,4(sp)
    535c:	dc000015 	stw	r16,0(sp)
    5360:	2500b804 	addi	r20,r4,736
    5364:	a0002326 	beq	r20,zero,53f4 <_fwalk+0xbc>
    5368:	282b883a 	mov	r21,r5
    536c:	002f883a 	mov	r23,zero
    5370:	05800044 	movi	r22,1
    5374:	04ffffc4 	movi	r19,-1
    5378:	a4400117 	ldw	r17,4(r20)
    537c:	a4800217 	ldw	r18,8(r20)
    5380:	8c7fffc4 	addi	r17,r17,-1
    5384:	88000d16 	blt	r17,zero,53bc <_fwalk+0x84>
    5388:	94000304 	addi	r16,r18,12
    538c:	94800384 	addi	r18,r18,14
    5390:	8080000b 	ldhu	r2,0(r16)
    5394:	8c7fffc4 	addi	r17,r17,-1
    5398:	813ffd04 	addi	r4,r16,-12
    539c:	b080042e 	bgeu	r22,r2,53b0 <_fwalk+0x78>
    53a0:	9080000f 	ldh	r2,0(r18)
    53a4:	14c00226 	beq	r2,r19,53b0 <_fwalk+0x78>
    53a8:	a83ee83a 	callr	r21
    53ac:	b8aeb03a 	or	r23,r23,r2
    53b0:	84001a04 	addi	r16,r16,104
    53b4:	94801a04 	addi	r18,r18,104
    53b8:	8cfff51e 	bne	r17,r19,5390 <__alt_data_end+0xfffe5f90>
    53bc:	a5000017 	ldw	r20,0(r20)
    53c0:	a03fed1e 	bne	r20,zero,5378 <__alt_data_end+0xfffe5f78>
    53c4:	b805883a 	mov	r2,r23
    53c8:	dfc00817 	ldw	ra,32(sp)
    53cc:	ddc00717 	ldw	r23,28(sp)
    53d0:	dd800617 	ldw	r22,24(sp)
    53d4:	dd400517 	ldw	r21,20(sp)
    53d8:	dd000417 	ldw	r20,16(sp)
    53dc:	dcc00317 	ldw	r19,12(sp)
    53e0:	dc800217 	ldw	r18,8(sp)
    53e4:	dc400117 	ldw	r17,4(sp)
    53e8:	dc000017 	ldw	r16,0(sp)
    53ec:	dec00904 	addi	sp,sp,36
    53f0:	f800283a 	ret
    53f4:	002f883a 	mov	r23,zero
    53f8:	003ff206 	br	53c4 <__alt_data_end+0xfffe5fc4>

000053fc <_fwalk_reent>:
    53fc:	defff704 	addi	sp,sp,-36
    5400:	dd000415 	stw	r20,16(sp)
    5404:	dfc00815 	stw	ra,32(sp)
    5408:	ddc00715 	stw	r23,28(sp)
    540c:	dd800615 	stw	r22,24(sp)
    5410:	dd400515 	stw	r21,20(sp)
    5414:	dcc00315 	stw	r19,12(sp)
    5418:	dc800215 	stw	r18,8(sp)
    541c:	dc400115 	stw	r17,4(sp)
    5420:	dc000015 	stw	r16,0(sp)
    5424:	2500b804 	addi	r20,r4,736
    5428:	a0002326 	beq	r20,zero,54b8 <_fwalk_reent+0xbc>
    542c:	282b883a 	mov	r21,r5
    5430:	2027883a 	mov	r19,r4
    5434:	002f883a 	mov	r23,zero
    5438:	05800044 	movi	r22,1
    543c:	04bfffc4 	movi	r18,-1
    5440:	a4400117 	ldw	r17,4(r20)
    5444:	a4000217 	ldw	r16,8(r20)
    5448:	8c7fffc4 	addi	r17,r17,-1
    544c:	88000c16 	blt	r17,zero,5480 <_fwalk_reent+0x84>
    5450:	84000304 	addi	r16,r16,12
    5454:	8080000b 	ldhu	r2,0(r16)
    5458:	8c7fffc4 	addi	r17,r17,-1
    545c:	817ffd04 	addi	r5,r16,-12
    5460:	b080052e 	bgeu	r22,r2,5478 <_fwalk_reent+0x7c>
    5464:	8080008f 	ldh	r2,2(r16)
    5468:	9809883a 	mov	r4,r19
    546c:	14800226 	beq	r2,r18,5478 <_fwalk_reent+0x7c>
    5470:	a83ee83a 	callr	r21
    5474:	b8aeb03a 	or	r23,r23,r2
    5478:	84001a04 	addi	r16,r16,104
    547c:	8cbff51e 	bne	r17,r18,5454 <__alt_data_end+0xfffe6054>
    5480:	a5000017 	ldw	r20,0(r20)
    5484:	a03fee1e 	bne	r20,zero,5440 <__alt_data_end+0xfffe6040>
    5488:	b805883a 	mov	r2,r23
    548c:	dfc00817 	ldw	ra,32(sp)
    5490:	ddc00717 	ldw	r23,28(sp)
    5494:	dd800617 	ldw	r22,24(sp)
    5498:	dd400517 	ldw	r21,20(sp)
    549c:	dd000417 	ldw	r20,16(sp)
    54a0:	dcc00317 	ldw	r19,12(sp)
    54a4:	dc800217 	ldw	r18,8(sp)
    54a8:	dc400117 	ldw	r17,4(sp)
    54ac:	dc000017 	ldw	r16,0(sp)
    54b0:	dec00904 	addi	sp,sp,36
    54b4:	f800283a 	ret
    54b8:	002f883a 	mov	r23,zero
    54bc:	003ff206 	br	5488 <__alt_data_end+0xfffe6088>

000054c0 <_setlocale_r>:
    54c0:	30001b26 	beq	r6,zero,5530 <_setlocale_r+0x70>
    54c4:	01400074 	movhi	r5,1
    54c8:	defffe04 	addi	sp,sp,-8
    54cc:	29403904 	addi	r5,r5,228
    54d0:	3009883a 	mov	r4,r6
    54d4:	dc000015 	stw	r16,0(sp)
    54d8:	dfc00115 	stw	ra,4(sp)
    54dc:	3021883a 	mov	r16,r6
    54e0:	00075740 	call	7574 <strcmp>
    54e4:	1000061e 	bne	r2,zero,5500 <_setlocale_r+0x40>
    54e8:	00800074 	movhi	r2,1
    54ec:	10803804 	addi	r2,r2,224
    54f0:	dfc00117 	ldw	ra,4(sp)
    54f4:	dc000017 	ldw	r16,0(sp)
    54f8:	dec00204 	addi	sp,sp,8
    54fc:	f800283a 	ret
    5500:	01400074 	movhi	r5,1
    5504:	29403804 	addi	r5,r5,224
    5508:	8009883a 	mov	r4,r16
    550c:	00075740 	call	7574 <strcmp>
    5510:	103ff526 	beq	r2,zero,54e8 <__alt_data_end+0xfffe60e8>
    5514:	01400074 	movhi	r5,1
    5518:	29402304 	addi	r5,r5,140
    551c:	8009883a 	mov	r4,r16
    5520:	00075740 	call	7574 <strcmp>
    5524:	103ff026 	beq	r2,zero,54e8 <__alt_data_end+0xfffe60e8>
    5528:	0005883a 	mov	r2,zero
    552c:	003ff006 	br	54f0 <__alt_data_end+0xfffe60f0>
    5530:	00800074 	movhi	r2,1
    5534:	10803804 	addi	r2,r2,224
    5538:	f800283a 	ret

0000553c <__locale_charset>:
    553c:	00800074 	movhi	r2,1
    5540:	1081eb04 	addi	r2,r2,1964
    5544:	f800283a 	ret

00005548 <__locale_mb_cur_max>:
    5548:	00800074 	movhi	r2,1
    554c:	10878704 	addi	r2,r2,7708
    5550:	10800017 	ldw	r2,0(r2)
    5554:	f800283a 	ret

00005558 <__locale_msgcharset>:
    5558:	00800074 	movhi	r2,1
    555c:	1081e304 	addi	r2,r2,1932
    5560:	f800283a 	ret

00005564 <__locale_cjk_lang>:
    5564:	0005883a 	mov	r2,zero
    5568:	f800283a 	ret

0000556c <_localeconv_r>:
    556c:	00800074 	movhi	r2,1
    5570:	1081f304 	addi	r2,r2,1996
    5574:	f800283a 	ret

00005578 <setlocale>:
    5578:	00800074 	movhi	r2,1
    557c:	10878604 	addi	r2,r2,7704
    5580:	280d883a 	mov	r6,r5
    5584:	200b883a 	mov	r5,r4
    5588:	11000017 	ldw	r4,0(r2)
    558c:	00054c01 	jmpi	54c0 <_setlocale_r>

00005590 <localeconv>:
    5590:	00800074 	movhi	r2,1
    5594:	1081f304 	addi	r2,r2,1996
    5598:	f800283a 	ret

0000559c <__smakebuf_r>:
    559c:	2880030b 	ldhu	r2,12(r5)
    55a0:	10c0008c 	andi	r3,r2,2
    55a4:	1800411e 	bne	r3,zero,56ac <__smakebuf_r+0x110>
    55a8:	deffec04 	addi	sp,sp,-80
    55ac:	dc000f15 	stw	r16,60(sp)
    55b0:	2821883a 	mov	r16,r5
    55b4:	2940038f 	ldh	r5,14(r5)
    55b8:	dc401015 	stw	r17,64(sp)
    55bc:	dfc01315 	stw	ra,76(sp)
    55c0:	dcc01215 	stw	r19,72(sp)
    55c4:	dc801115 	stw	r18,68(sp)
    55c8:	2023883a 	mov	r17,r4
    55cc:	28001c16 	blt	r5,zero,5640 <__smakebuf_r+0xa4>
    55d0:	d80d883a 	mov	r6,sp
    55d4:	000927c0 	call	927c <_fstat_r>
    55d8:	10001816 	blt	r2,zero,563c <__smakebuf_r+0xa0>
    55dc:	d8800117 	ldw	r2,4(sp)
    55e0:	00e00014 	movui	r3,32768
    55e4:	10bc000c 	andi	r2,r2,61440
    55e8:	14c80020 	cmpeqi	r19,r2,8192
    55ec:	10c03726 	beq	r2,r3,56cc <__smakebuf_r+0x130>
    55f0:	80c0030b 	ldhu	r3,12(r16)
    55f4:	18c20014 	ori	r3,r3,2048
    55f8:	80c0030d 	sth	r3,12(r16)
    55fc:	00c80004 	movi	r3,8192
    5600:	10c0521e 	bne	r2,r3,574c <__smakebuf_r+0x1b0>
    5604:	8140038f 	ldh	r5,14(r16)
    5608:	8809883a 	mov	r4,r17
    560c:	00097a00 	call	97a0 <_isatty_r>
    5610:	10004c26 	beq	r2,zero,5744 <__smakebuf_r+0x1a8>
    5614:	8080030b 	ldhu	r2,12(r16)
    5618:	80c010c4 	addi	r3,r16,67
    561c:	80c00015 	stw	r3,0(r16)
    5620:	10800054 	ori	r2,r2,1
    5624:	8080030d 	sth	r2,12(r16)
    5628:	00800044 	movi	r2,1
    562c:	80c00415 	stw	r3,16(r16)
    5630:	80800515 	stw	r2,20(r16)
    5634:	04810004 	movi	r18,1024
    5638:	00000706 	br	5658 <__smakebuf_r+0xbc>
    563c:	8080030b 	ldhu	r2,12(r16)
    5640:	10c0200c 	andi	r3,r2,128
    5644:	18001f1e 	bne	r3,zero,56c4 <__smakebuf_r+0x128>
    5648:	04810004 	movi	r18,1024
    564c:	10820014 	ori	r2,r2,2048
    5650:	8080030d 	sth	r2,12(r16)
    5654:	0027883a 	mov	r19,zero
    5658:	900b883a 	mov	r5,r18
    565c:	8809883a 	mov	r4,r17
    5660:	00057580 	call	5758 <_malloc_r>
    5664:	10002c26 	beq	r2,zero,5718 <__smakebuf_r+0x17c>
    5668:	80c0030b 	ldhu	r3,12(r16)
    566c:	01000034 	movhi	r4,0
    5670:	2112d704 	addi	r4,r4,19292
    5674:	89000f15 	stw	r4,60(r17)
    5678:	18c02014 	ori	r3,r3,128
    567c:	80c0030d 	sth	r3,12(r16)
    5680:	80800015 	stw	r2,0(r16)
    5684:	80800415 	stw	r2,16(r16)
    5688:	84800515 	stw	r18,20(r16)
    568c:	98001a1e 	bne	r19,zero,56f8 <__smakebuf_r+0x15c>
    5690:	dfc01317 	ldw	ra,76(sp)
    5694:	dcc01217 	ldw	r19,72(sp)
    5698:	dc801117 	ldw	r18,68(sp)
    569c:	dc401017 	ldw	r17,64(sp)
    56a0:	dc000f17 	ldw	r16,60(sp)
    56a4:	dec01404 	addi	sp,sp,80
    56a8:	f800283a 	ret
    56ac:	288010c4 	addi	r2,r5,67
    56b0:	28800015 	stw	r2,0(r5)
    56b4:	28800415 	stw	r2,16(r5)
    56b8:	00800044 	movi	r2,1
    56bc:	28800515 	stw	r2,20(r5)
    56c0:	f800283a 	ret
    56c4:	04801004 	movi	r18,64
    56c8:	003fe006 	br	564c <__alt_data_end+0xfffe624c>
    56cc:	81000a17 	ldw	r4,40(r16)
    56d0:	00c00034 	movhi	r3,0
    56d4:	18dd4404 	addi	r3,r3,29968
    56d8:	20ffc51e 	bne	r4,r3,55f0 <__alt_data_end+0xfffe61f0>
    56dc:	8080030b 	ldhu	r2,12(r16)
    56e0:	04810004 	movi	r18,1024
    56e4:	84801315 	stw	r18,76(r16)
    56e8:	1484b03a 	or	r2,r2,r18
    56ec:	8080030d 	sth	r2,12(r16)
    56f0:	0027883a 	mov	r19,zero
    56f4:	003fd806 	br	5658 <__alt_data_end+0xfffe6258>
    56f8:	8140038f 	ldh	r5,14(r16)
    56fc:	8809883a 	mov	r4,r17
    5700:	00097a00 	call	97a0 <_isatty_r>
    5704:	103fe226 	beq	r2,zero,5690 <__alt_data_end+0xfffe6290>
    5708:	8080030b 	ldhu	r2,12(r16)
    570c:	10800054 	ori	r2,r2,1
    5710:	8080030d 	sth	r2,12(r16)
    5714:	003fde06 	br	5690 <__alt_data_end+0xfffe6290>
    5718:	8080030b 	ldhu	r2,12(r16)
    571c:	10c0800c 	andi	r3,r2,512
    5720:	183fdb1e 	bne	r3,zero,5690 <__alt_data_end+0xfffe6290>
    5724:	10800094 	ori	r2,r2,2
    5728:	80c010c4 	addi	r3,r16,67
    572c:	8080030d 	sth	r2,12(r16)
    5730:	00800044 	movi	r2,1
    5734:	80c00015 	stw	r3,0(r16)
    5738:	80c00415 	stw	r3,16(r16)
    573c:	80800515 	stw	r2,20(r16)
    5740:	003fd306 	br	5690 <__alt_data_end+0xfffe6290>
    5744:	04810004 	movi	r18,1024
    5748:	003fc306 	br	5658 <__alt_data_end+0xfffe6258>
    574c:	0027883a 	mov	r19,zero
    5750:	04810004 	movi	r18,1024
    5754:	003fc006 	br	5658 <__alt_data_end+0xfffe6258>

00005758 <_malloc_r>:
    5758:	defff504 	addi	sp,sp,-44
    575c:	dc800315 	stw	r18,12(sp)
    5760:	dfc00a15 	stw	ra,40(sp)
    5764:	df000915 	stw	fp,36(sp)
    5768:	ddc00815 	stw	r23,32(sp)
    576c:	dd800715 	stw	r22,28(sp)
    5770:	dd400615 	stw	r21,24(sp)
    5774:	dd000515 	stw	r20,20(sp)
    5778:	dcc00415 	stw	r19,16(sp)
    577c:	dc400215 	stw	r17,8(sp)
    5780:	dc000115 	stw	r16,4(sp)
    5784:	288002c4 	addi	r2,r5,11
    5788:	00c00584 	movi	r3,22
    578c:	2025883a 	mov	r18,r4
    5790:	18807f2e 	bgeu	r3,r2,5990 <_malloc_r+0x238>
    5794:	047ffe04 	movi	r17,-8
    5798:	1462703a 	and	r17,r2,r17
    579c:	8800a316 	blt	r17,zero,5a2c <_malloc_r+0x2d4>
    57a0:	8940a236 	bltu	r17,r5,5a2c <_malloc_r+0x2d4>
    57a4:	000e1300 	call	e130 <__malloc_lock>
    57a8:	00807dc4 	movi	r2,503
    57ac:	1441e92e 	bgeu	r2,r17,5f54 <_malloc_r+0x7fc>
    57b0:	8804d27a 	srli	r2,r17,9
    57b4:	1000a126 	beq	r2,zero,5a3c <_malloc_r+0x2e4>
    57b8:	00c00104 	movi	r3,4
    57bc:	18811e36 	bltu	r3,r2,5c38 <_malloc_r+0x4e0>
    57c0:	8804d1ba 	srli	r2,r17,6
    57c4:	12000e44 	addi	r8,r2,57
    57c8:	11c00e04 	addi	r7,r2,56
    57cc:	4209883a 	add	r4,r8,r8
    57d0:	04c00074 	movhi	r19,1
    57d4:	2109883a 	add	r4,r4,r4
    57d8:	9cc20104 	addi	r19,r19,2052
    57dc:	2109883a 	add	r4,r4,r4
    57e0:	9909883a 	add	r4,r19,r4
    57e4:	24000117 	ldw	r16,4(r4)
    57e8:	213ffe04 	addi	r4,r4,-8
    57ec:	24009726 	beq	r4,r16,5a4c <_malloc_r+0x2f4>
    57f0:	80800117 	ldw	r2,4(r16)
    57f4:	01bfff04 	movi	r6,-4
    57f8:	014003c4 	movi	r5,15
    57fc:	1184703a 	and	r2,r2,r6
    5800:	1447c83a 	sub	r3,r2,r17
    5804:	28c00716 	blt	r5,r3,5824 <_malloc_r+0xcc>
    5808:	1800920e 	bge	r3,zero,5a54 <_malloc_r+0x2fc>
    580c:	84000317 	ldw	r16,12(r16)
    5810:	24008e26 	beq	r4,r16,5a4c <_malloc_r+0x2f4>
    5814:	80800117 	ldw	r2,4(r16)
    5818:	1184703a 	and	r2,r2,r6
    581c:	1447c83a 	sub	r3,r2,r17
    5820:	28fff90e 	bge	r5,r3,5808 <__alt_data_end+0xfffe6408>
    5824:	3809883a 	mov	r4,r7
    5828:	01800074 	movhi	r6,1
    582c:	9c000417 	ldw	r16,16(r19)
    5830:	31820104 	addi	r6,r6,2052
    5834:	32000204 	addi	r8,r6,8
    5838:	82013426 	beq	r16,r8,5d0c <_malloc_r+0x5b4>
    583c:	80c00117 	ldw	r3,4(r16)
    5840:	00bfff04 	movi	r2,-4
    5844:	188e703a 	and	r7,r3,r2
    5848:	3c45c83a 	sub	r2,r7,r17
    584c:	00c003c4 	movi	r3,15
    5850:	18811f16 	blt	r3,r2,5cd0 <_malloc_r+0x578>
    5854:	32000515 	stw	r8,20(r6)
    5858:	32000415 	stw	r8,16(r6)
    585c:	10007f0e 	bge	r2,zero,5a5c <_malloc_r+0x304>
    5860:	00807fc4 	movi	r2,511
    5864:	11c0fd36 	bltu	r2,r7,5c5c <_malloc_r+0x504>
    5868:	3806d0fa 	srli	r3,r7,3
    586c:	01c00044 	movi	r7,1
    5870:	30800117 	ldw	r2,4(r6)
    5874:	19400044 	addi	r5,r3,1
    5878:	294b883a 	add	r5,r5,r5
    587c:	1807d0ba 	srai	r3,r3,2
    5880:	294b883a 	add	r5,r5,r5
    5884:	294b883a 	add	r5,r5,r5
    5888:	298b883a 	add	r5,r5,r6
    588c:	38c6983a 	sll	r3,r7,r3
    5890:	29c00017 	ldw	r7,0(r5)
    5894:	2a7ffe04 	addi	r9,r5,-8
    5898:	1886b03a 	or	r3,r3,r2
    589c:	82400315 	stw	r9,12(r16)
    58a0:	81c00215 	stw	r7,8(r16)
    58a4:	30c00115 	stw	r3,4(r6)
    58a8:	2c000015 	stw	r16,0(r5)
    58ac:	3c000315 	stw	r16,12(r7)
    58b0:	2005d0ba 	srai	r2,r4,2
    58b4:	01400044 	movi	r5,1
    58b8:	288a983a 	sll	r5,r5,r2
    58bc:	19406f36 	bltu	r3,r5,5a7c <_malloc_r+0x324>
    58c0:	28c4703a 	and	r2,r5,r3
    58c4:	10000a1e 	bne	r2,zero,58f0 <_malloc_r+0x198>
    58c8:	00bfff04 	movi	r2,-4
    58cc:	294b883a 	add	r5,r5,r5
    58d0:	2088703a 	and	r4,r4,r2
    58d4:	28c4703a 	and	r2,r5,r3
    58d8:	21000104 	addi	r4,r4,4
    58dc:	1000041e 	bne	r2,zero,58f0 <_malloc_r+0x198>
    58e0:	294b883a 	add	r5,r5,r5
    58e4:	28c4703a 	and	r2,r5,r3
    58e8:	21000104 	addi	r4,r4,4
    58ec:	103ffc26 	beq	r2,zero,58e0 <__alt_data_end+0xfffe64e0>
    58f0:	02bfff04 	movi	r10,-4
    58f4:	024003c4 	movi	r9,15
    58f8:	21800044 	addi	r6,r4,1
    58fc:	318d883a 	add	r6,r6,r6
    5900:	318d883a 	add	r6,r6,r6
    5904:	318d883a 	add	r6,r6,r6
    5908:	998d883a 	add	r6,r19,r6
    590c:	333ffe04 	addi	r12,r6,-8
    5910:	2017883a 	mov	r11,r4
    5914:	31800104 	addi	r6,r6,4
    5918:	34000017 	ldw	r16,0(r6)
    591c:	31fffd04 	addi	r7,r6,-12
    5920:	81c0041e 	bne	r16,r7,5934 <_malloc_r+0x1dc>
    5924:	0000fb06 	br	5d14 <_malloc_r+0x5bc>
    5928:	1801030e 	bge	r3,zero,5d38 <_malloc_r+0x5e0>
    592c:	84000317 	ldw	r16,12(r16)
    5930:	81c0f826 	beq	r16,r7,5d14 <_malloc_r+0x5bc>
    5934:	80800117 	ldw	r2,4(r16)
    5938:	1284703a 	and	r2,r2,r10
    593c:	1447c83a 	sub	r3,r2,r17
    5940:	48fff90e 	bge	r9,r3,5928 <__alt_data_end+0xfffe6528>
    5944:	80800317 	ldw	r2,12(r16)
    5948:	81000217 	ldw	r4,8(r16)
    594c:	89400054 	ori	r5,r17,1
    5950:	81400115 	stw	r5,4(r16)
    5954:	20800315 	stw	r2,12(r4)
    5958:	11000215 	stw	r4,8(r2)
    595c:	8463883a 	add	r17,r16,r17
    5960:	9c400515 	stw	r17,20(r19)
    5964:	9c400415 	stw	r17,16(r19)
    5968:	18800054 	ori	r2,r3,1
    596c:	88800115 	stw	r2,4(r17)
    5970:	8a000315 	stw	r8,12(r17)
    5974:	8a000215 	stw	r8,8(r17)
    5978:	88e3883a 	add	r17,r17,r3
    597c:	88c00015 	stw	r3,0(r17)
    5980:	9009883a 	mov	r4,r18
    5984:	000e1540 	call	e154 <__malloc_unlock>
    5988:	80800204 	addi	r2,r16,8
    598c:	00001b06 	br	59fc <_malloc_r+0x2a4>
    5990:	04400404 	movi	r17,16
    5994:	89402536 	bltu	r17,r5,5a2c <_malloc_r+0x2d4>
    5998:	000e1300 	call	e130 <__malloc_lock>
    599c:	00800184 	movi	r2,6
    59a0:	01000084 	movi	r4,2
    59a4:	04c00074 	movhi	r19,1
    59a8:	1085883a 	add	r2,r2,r2
    59ac:	9cc20104 	addi	r19,r19,2052
    59b0:	1085883a 	add	r2,r2,r2
    59b4:	9885883a 	add	r2,r19,r2
    59b8:	14000117 	ldw	r16,4(r2)
    59bc:	10fffe04 	addi	r3,r2,-8
    59c0:	80c0d926 	beq	r16,r3,5d28 <_malloc_r+0x5d0>
    59c4:	80c00117 	ldw	r3,4(r16)
    59c8:	81000317 	ldw	r4,12(r16)
    59cc:	00bfff04 	movi	r2,-4
    59d0:	1884703a 	and	r2,r3,r2
    59d4:	81400217 	ldw	r5,8(r16)
    59d8:	8085883a 	add	r2,r16,r2
    59dc:	10c00117 	ldw	r3,4(r2)
    59e0:	29000315 	stw	r4,12(r5)
    59e4:	21400215 	stw	r5,8(r4)
    59e8:	18c00054 	ori	r3,r3,1
    59ec:	10c00115 	stw	r3,4(r2)
    59f0:	9009883a 	mov	r4,r18
    59f4:	000e1540 	call	e154 <__malloc_unlock>
    59f8:	80800204 	addi	r2,r16,8
    59fc:	dfc00a17 	ldw	ra,40(sp)
    5a00:	df000917 	ldw	fp,36(sp)
    5a04:	ddc00817 	ldw	r23,32(sp)
    5a08:	dd800717 	ldw	r22,28(sp)
    5a0c:	dd400617 	ldw	r21,24(sp)
    5a10:	dd000517 	ldw	r20,20(sp)
    5a14:	dcc00417 	ldw	r19,16(sp)
    5a18:	dc800317 	ldw	r18,12(sp)
    5a1c:	dc400217 	ldw	r17,8(sp)
    5a20:	dc000117 	ldw	r16,4(sp)
    5a24:	dec00b04 	addi	sp,sp,44
    5a28:	f800283a 	ret
    5a2c:	00800304 	movi	r2,12
    5a30:	90800015 	stw	r2,0(r18)
    5a34:	0005883a 	mov	r2,zero
    5a38:	003ff006 	br	59fc <__alt_data_end+0xfffe65fc>
    5a3c:	01002004 	movi	r4,128
    5a40:	02001004 	movi	r8,64
    5a44:	01c00fc4 	movi	r7,63
    5a48:	003f6106 	br	57d0 <__alt_data_end+0xfffe63d0>
    5a4c:	4009883a 	mov	r4,r8
    5a50:	003f7506 	br	5828 <__alt_data_end+0xfffe6428>
    5a54:	81000317 	ldw	r4,12(r16)
    5a58:	003fde06 	br	59d4 <__alt_data_end+0xfffe65d4>
    5a5c:	81c5883a 	add	r2,r16,r7
    5a60:	11400117 	ldw	r5,4(r2)
    5a64:	9009883a 	mov	r4,r18
    5a68:	29400054 	ori	r5,r5,1
    5a6c:	11400115 	stw	r5,4(r2)
    5a70:	000e1540 	call	e154 <__malloc_unlock>
    5a74:	80800204 	addi	r2,r16,8
    5a78:	003fe006 	br	59fc <__alt_data_end+0xfffe65fc>
    5a7c:	9c000217 	ldw	r16,8(r19)
    5a80:	00bfff04 	movi	r2,-4
    5a84:	85800117 	ldw	r22,4(r16)
    5a88:	b0ac703a 	and	r22,r22,r2
    5a8c:	b4400336 	bltu	r22,r17,5a9c <_malloc_r+0x344>
    5a90:	b445c83a 	sub	r2,r22,r17
    5a94:	00c003c4 	movi	r3,15
    5a98:	18805d16 	blt	r3,r2,5c10 <_malloc_r+0x4b8>
    5a9c:	05c00074 	movhi	r23,1
    5aa0:	00800074 	movhi	r2,1
    5aa4:	108e5c04 	addi	r2,r2,14704
    5aa8:	bdc78804 	addi	r23,r23,7712
    5aac:	15400017 	ldw	r21,0(r2)
    5ab0:	b8c00017 	ldw	r3,0(r23)
    5ab4:	00bfffc4 	movi	r2,-1
    5ab8:	858d883a 	add	r6,r16,r22
    5abc:	8d6b883a 	add	r21,r17,r21
    5ac0:	1880ea26 	beq	r3,r2,5e6c <_malloc_r+0x714>
    5ac4:	ad4403c4 	addi	r21,r21,4111
    5ac8:	00bc0004 	movi	r2,-4096
    5acc:	a8aa703a 	and	r21,r21,r2
    5ad0:	a80b883a 	mov	r5,r21
    5ad4:	9009883a 	mov	r4,r18
    5ad8:	d9800015 	stw	r6,0(sp)
    5adc:	00073e40 	call	73e4 <_sbrk_r>
    5ae0:	1029883a 	mov	r20,r2
    5ae4:	00bfffc4 	movi	r2,-1
    5ae8:	d9800017 	ldw	r6,0(sp)
    5aec:	a080e826 	beq	r20,r2,5e90 <_malloc_r+0x738>
    5af0:	a180a636 	bltu	r20,r6,5d8c <_malloc_r+0x634>
    5af4:	07000074 	movhi	fp,1
    5af8:	e70e6404 	addi	fp,fp,14736
    5afc:	e0800017 	ldw	r2,0(fp)
    5b00:	a887883a 	add	r3,r21,r2
    5b04:	e0c00015 	stw	r3,0(fp)
    5b08:	3500e626 	beq	r6,r20,5ea4 <_malloc_r+0x74c>
    5b0c:	b9000017 	ldw	r4,0(r23)
    5b10:	00bfffc4 	movi	r2,-1
    5b14:	2080ee26 	beq	r4,r2,5ed0 <_malloc_r+0x778>
    5b18:	a185c83a 	sub	r2,r20,r6
    5b1c:	10c5883a 	add	r2,r2,r3
    5b20:	e0800015 	stw	r2,0(fp)
    5b24:	a0c001cc 	andi	r3,r20,7
    5b28:	1800bc26 	beq	r3,zero,5e1c <_malloc_r+0x6c4>
    5b2c:	a0e9c83a 	sub	r20,r20,r3
    5b30:	00840204 	movi	r2,4104
    5b34:	a5000204 	addi	r20,r20,8
    5b38:	10c7c83a 	sub	r3,r2,r3
    5b3c:	a545883a 	add	r2,r20,r21
    5b40:	1083ffcc 	andi	r2,r2,4095
    5b44:	18abc83a 	sub	r21,r3,r2
    5b48:	a80b883a 	mov	r5,r21
    5b4c:	9009883a 	mov	r4,r18
    5b50:	00073e40 	call	73e4 <_sbrk_r>
    5b54:	00ffffc4 	movi	r3,-1
    5b58:	10c0e126 	beq	r2,r3,5ee0 <_malloc_r+0x788>
    5b5c:	1505c83a 	sub	r2,r2,r20
    5b60:	1545883a 	add	r2,r2,r21
    5b64:	10800054 	ori	r2,r2,1
    5b68:	e0c00017 	ldw	r3,0(fp)
    5b6c:	9d000215 	stw	r20,8(r19)
    5b70:	a0800115 	stw	r2,4(r20)
    5b74:	a8c7883a 	add	r3,r21,r3
    5b78:	e0c00015 	stw	r3,0(fp)
    5b7c:	84c00e26 	beq	r16,r19,5bb8 <_malloc_r+0x460>
    5b80:	018003c4 	movi	r6,15
    5b84:	3580a72e 	bgeu	r6,r22,5e24 <_malloc_r+0x6cc>
    5b88:	81400117 	ldw	r5,4(r16)
    5b8c:	013ffe04 	movi	r4,-8
    5b90:	b0bffd04 	addi	r2,r22,-12
    5b94:	1104703a 	and	r2,r2,r4
    5b98:	2900004c 	andi	r4,r5,1
    5b9c:	2088b03a 	or	r4,r4,r2
    5ba0:	81000115 	stw	r4,4(r16)
    5ba4:	01400144 	movi	r5,5
    5ba8:	8089883a 	add	r4,r16,r2
    5bac:	21400115 	stw	r5,4(r4)
    5bb0:	21400215 	stw	r5,8(r4)
    5bb4:	3080cd36 	bltu	r6,r2,5eec <_malloc_r+0x794>
    5bb8:	00800074 	movhi	r2,1
    5bbc:	108e5b04 	addi	r2,r2,14700
    5bc0:	11000017 	ldw	r4,0(r2)
    5bc4:	20c0012e 	bgeu	r4,r3,5bcc <_malloc_r+0x474>
    5bc8:	10c00015 	stw	r3,0(r2)
    5bcc:	00800074 	movhi	r2,1
    5bd0:	108e5a04 	addi	r2,r2,14696
    5bd4:	11000017 	ldw	r4,0(r2)
    5bd8:	9c000217 	ldw	r16,8(r19)
    5bdc:	20c0012e 	bgeu	r4,r3,5be4 <_malloc_r+0x48c>
    5be0:	10c00015 	stw	r3,0(r2)
    5be4:	80c00117 	ldw	r3,4(r16)
    5be8:	00bfff04 	movi	r2,-4
    5bec:	1886703a 	and	r3,r3,r2
    5bf0:	1c45c83a 	sub	r2,r3,r17
    5bf4:	1c400236 	bltu	r3,r17,5c00 <_malloc_r+0x4a8>
    5bf8:	00c003c4 	movi	r3,15
    5bfc:	18800416 	blt	r3,r2,5c10 <_malloc_r+0x4b8>
    5c00:	9009883a 	mov	r4,r18
    5c04:	000e1540 	call	e154 <__malloc_unlock>
    5c08:	0005883a 	mov	r2,zero
    5c0c:	003f7b06 	br	59fc <__alt_data_end+0xfffe65fc>
    5c10:	88c00054 	ori	r3,r17,1
    5c14:	80c00115 	stw	r3,4(r16)
    5c18:	8463883a 	add	r17,r16,r17
    5c1c:	10800054 	ori	r2,r2,1
    5c20:	9c400215 	stw	r17,8(r19)
    5c24:	88800115 	stw	r2,4(r17)
    5c28:	9009883a 	mov	r4,r18
    5c2c:	000e1540 	call	e154 <__malloc_unlock>
    5c30:	80800204 	addi	r2,r16,8
    5c34:	003f7106 	br	59fc <__alt_data_end+0xfffe65fc>
    5c38:	00c00504 	movi	r3,20
    5c3c:	18804a2e 	bgeu	r3,r2,5d68 <_malloc_r+0x610>
    5c40:	00c01504 	movi	r3,84
    5c44:	18806e36 	bltu	r3,r2,5e00 <_malloc_r+0x6a8>
    5c48:	8804d33a 	srli	r2,r17,12
    5c4c:	12001bc4 	addi	r8,r2,111
    5c50:	11c01b84 	addi	r7,r2,110
    5c54:	4209883a 	add	r4,r8,r8
    5c58:	003edd06 	br	57d0 <__alt_data_end+0xfffe63d0>
    5c5c:	3804d27a 	srli	r2,r7,9
    5c60:	00c00104 	movi	r3,4
    5c64:	1880442e 	bgeu	r3,r2,5d78 <_malloc_r+0x620>
    5c68:	00c00504 	movi	r3,20
    5c6c:	18808136 	bltu	r3,r2,5e74 <_malloc_r+0x71c>
    5c70:	11401704 	addi	r5,r2,92
    5c74:	10c016c4 	addi	r3,r2,91
    5c78:	294b883a 	add	r5,r5,r5
    5c7c:	294b883a 	add	r5,r5,r5
    5c80:	294b883a 	add	r5,r5,r5
    5c84:	994b883a 	add	r5,r19,r5
    5c88:	28800017 	ldw	r2,0(r5)
    5c8c:	01800074 	movhi	r6,1
    5c90:	297ffe04 	addi	r5,r5,-8
    5c94:	31820104 	addi	r6,r6,2052
    5c98:	28806526 	beq	r5,r2,5e30 <_malloc_r+0x6d8>
    5c9c:	01bfff04 	movi	r6,-4
    5ca0:	10c00117 	ldw	r3,4(r2)
    5ca4:	1986703a 	and	r3,r3,r6
    5ca8:	38c0022e 	bgeu	r7,r3,5cb4 <_malloc_r+0x55c>
    5cac:	10800217 	ldw	r2,8(r2)
    5cb0:	28bffb1e 	bne	r5,r2,5ca0 <__alt_data_end+0xfffe68a0>
    5cb4:	11400317 	ldw	r5,12(r2)
    5cb8:	98c00117 	ldw	r3,4(r19)
    5cbc:	81400315 	stw	r5,12(r16)
    5cc0:	80800215 	stw	r2,8(r16)
    5cc4:	2c000215 	stw	r16,8(r5)
    5cc8:	14000315 	stw	r16,12(r2)
    5ccc:	003ef806 	br	58b0 <__alt_data_end+0xfffe64b0>
    5cd0:	88c00054 	ori	r3,r17,1
    5cd4:	80c00115 	stw	r3,4(r16)
    5cd8:	8463883a 	add	r17,r16,r17
    5cdc:	34400515 	stw	r17,20(r6)
    5ce0:	34400415 	stw	r17,16(r6)
    5ce4:	10c00054 	ori	r3,r2,1
    5ce8:	8a000315 	stw	r8,12(r17)
    5cec:	8a000215 	stw	r8,8(r17)
    5cf0:	88c00115 	stw	r3,4(r17)
    5cf4:	88a3883a 	add	r17,r17,r2
    5cf8:	88800015 	stw	r2,0(r17)
    5cfc:	9009883a 	mov	r4,r18
    5d00:	000e1540 	call	e154 <__malloc_unlock>
    5d04:	80800204 	addi	r2,r16,8
    5d08:	003f3c06 	br	59fc <__alt_data_end+0xfffe65fc>
    5d0c:	30c00117 	ldw	r3,4(r6)
    5d10:	003ee706 	br	58b0 <__alt_data_end+0xfffe64b0>
    5d14:	5ac00044 	addi	r11,r11,1
    5d18:	588000cc 	andi	r2,r11,3
    5d1c:	31800204 	addi	r6,r6,8
    5d20:	103efd1e 	bne	r2,zero,5918 <__alt_data_end+0xfffe6518>
    5d24:	00002406 	br	5db8 <_malloc_r+0x660>
    5d28:	14000317 	ldw	r16,12(r2)
    5d2c:	143f251e 	bne	r2,r16,59c4 <__alt_data_end+0xfffe65c4>
    5d30:	21000084 	addi	r4,r4,2
    5d34:	003ebc06 	br	5828 <__alt_data_end+0xfffe6428>
    5d38:	8085883a 	add	r2,r16,r2
    5d3c:	10c00117 	ldw	r3,4(r2)
    5d40:	81000317 	ldw	r4,12(r16)
    5d44:	81400217 	ldw	r5,8(r16)
    5d48:	18c00054 	ori	r3,r3,1
    5d4c:	10c00115 	stw	r3,4(r2)
    5d50:	29000315 	stw	r4,12(r5)
    5d54:	21400215 	stw	r5,8(r4)
    5d58:	9009883a 	mov	r4,r18
    5d5c:	000e1540 	call	e154 <__malloc_unlock>
    5d60:	80800204 	addi	r2,r16,8
    5d64:	003f2506 	br	59fc <__alt_data_end+0xfffe65fc>
    5d68:	12001704 	addi	r8,r2,92
    5d6c:	11c016c4 	addi	r7,r2,91
    5d70:	4209883a 	add	r4,r8,r8
    5d74:	003e9606 	br	57d0 <__alt_data_end+0xfffe63d0>
    5d78:	3804d1ba 	srli	r2,r7,6
    5d7c:	11400e44 	addi	r5,r2,57
    5d80:	10c00e04 	addi	r3,r2,56
    5d84:	294b883a 	add	r5,r5,r5
    5d88:	003fbc06 	br	5c7c <__alt_data_end+0xfffe687c>
    5d8c:	84ff5926 	beq	r16,r19,5af4 <__alt_data_end+0xfffe66f4>
    5d90:	00800074 	movhi	r2,1
    5d94:	10820104 	addi	r2,r2,2052
    5d98:	14000217 	ldw	r16,8(r2)
    5d9c:	00bfff04 	movi	r2,-4
    5da0:	80c00117 	ldw	r3,4(r16)
    5da4:	1886703a 	and	r3,r3,r2
    5da8:	003f9106 	br	5bf0 <__alt_data_end+0xfffe67f0>
    5dac:	60800217 	ldw	r2,8(r12)
    5db0:	213fffc4 	addi	r4,r4,-1
    5db4:	1300651e 	bne	r2,r12,5f4c <_malloc_r+0x7f4>
    5db8:	208000cc 	andi	r2,r4,3
    5dbc:	633ffe04 	addi	r12,r12,-8
    5dc0:	103ffa1e 	bne	r2,zero,5dac <__alt_data_end+0xfffe69ac>
    5dc4:	98800117 	ldw	r2,4(r19)
    5dc8:	0146303a 	nor	r3,zero,r5
    5dcc:	1884703a 	and	r2,r3,r2
    5dd0:	98800115 	stw	r2,4(r19)
    5dd4:	294b883a 	add	r5,r5,r5
    5dd8:	117f2836 	bltu	r2,r5,5a7c <__alt_data_end+0xfffe667c>
    5ddc:	283f2726 	beq	r5,zero,5a7c <__alt_data_end+0xfffe667c>
    5de0:	2886703a 	and	r3,r5,r2
    5de4:	5809883a 	mov	r4,r11
    5de8:	183ec31e 	bne	r3,zero,58f8 <__alt_data_end+0xfffe64f8>
    5dec:	294b883a 	add	r5,r5,r5
    5df0:	2886703a 	and	r3,r5,r2
    5df4:	21000104 	addi	r4,r4,4
    5df8:	183ffc26 	beq	r3,zero,5dec <__alt_data_end+0xfffe69ec>
    5dfc:	003ebe06 	br	58f8 <__alt_data_end+0xfffe64f8>
    5e00:	00c05504 	movi	r3,340
    5e04:	18801236 	bltu	r3,r2,5e50 <_malloc_r+0x6f8>
    5e08:	8804d3fa 	srli	r2,r17,15
    5e0c:	12001e04 	addi	r8,r2,120
    5e10:	11c01dc4 	addi	r7,r2,119
    5e14:	4209883a 	add	r4,r8,r8
    5e18:	003e6d06 	br	57d0 <__alt_data_end+0xfffe63d0>
    5e1c:	00c40004 	movi	r3,4096
    5e20:	003f4606 	br	5b3c <__alt_data_end+0xfffe673c>
    5e24:	00800044 	movi	r2,1
    5e28:	a0800115 	stw	r2,4(r20)
    5e2c:	003f7406 	br	5c00 <__alt_data_end+0xfffe6800>
    5e30:	1805d0ba 	srai	r2,r3,2
    5e34:	01c00044 	movi	r7,1
    5e38:	30c00117 	ldw	r3,4(r6)
    5e3c:	388e983a 	sll	r7,r7,r2
    5e40:	2805883a 	mov	r2,r5
    5e44:	38c6b03a 	or	r3,r7,r3
    5e48:	30c00115 	stw	r3,4(r6)
    5e4c:	003f9b06 	br	5cbc <__alt_data_end+0xfffe68bc>
    5e50:	00c15504 	movi	r3,1364
    5e54:	18801a36 	bltu	r3,r2,5ec0 <_malloc_r+0x768>
    5e58:	8804d4ba 	srli	r2,r17,18
    5e5c:	12001f44 	addi	r8,r2,125
    5e60:	11c01f04 	addi	r7,r2,124
    5e64:	4209883a 	add	r4,r8,r8
    5e68:	003e5906 	br	57d0 <__alt_data_end+0xfffe63d0>
    5e6c:	ad400404 	addi	r21,r21,16
    5e70:	003f1706 	br	5ad0 <__alt_data_end+0xfffe66d0>
    5e74:	00c01504 	movi	r3,84
    5e78:	18802336 	bltu	r3,r2,5f08 <_malloc_r+0x7b0>
    5e7c:	3804d33a 	srli	r2,r7,12
    5e80:	11401bc4 	addi	r5,r2,111
    5e84:	10c01b84 	addi	r3,r2,110
    5e88:	294b883a 	add	r5,r5,r5
    5e8c:	003f7b06 	br	5c7c <__alt_data_end+0xfffe687c>
    5e90:	9c000217 	ldw	r16,8(r19)
    5e94:	00bfff04 	movi	r2,-4
    5e98:	80c00117 	ldw	r3,4(r16)
    5e9c:	1886703a 	and	r3,r3,r2
    5ea0:	003f5306 	br	5bf0 <__alt_data_end+0xfffe67f0>
    5ea4:	3083ffcc 	andi	r2,r6,4095
    5ea8:	103f181e 	bne	r2,zero,5b0c <__alt_data_end+0xfffe670c>
    5eac:	99000217 	ldw	r4,8(r19)
    5eb0:	b545883a 	add	r2,r22,r21
    5eb4:	10800054 	ori	r2,r2,1
    5eb8:	20800115 	stw	r2,4(r4)
    5ebc:	003f3e06 	br	5bb8 <__alt_data_end+0xfffe67b8>
    5ec0:	01003f84 	movi	r4,254
    5ec4:	02001fc4 	movi	r8,127
    5ec8:	01c01f84 	movi	r7,126
    5ecc:	003e4006 	br	57d0 <__alt_data_end+0xfffe63d0>
    5ed0:	00800074 	movhi	r2,1
    5ed4:	10878804 	addi	r2,r2,7712
    5ed8:	15000015 	stw	r20,0(r2)
    5edc:	003f1106 	br	5b24 <__alt_data_end+0xfffe6724>
    5ee0:	00800044 	movi	r2,1
    5ee4:	002b883a 	mov	r21,zero
    5ee8:	003f1f06 	br	5b68 <__alt_data_end+0xfffe6768>
    5eec:	81400204 	addi	r5,r16,8
    5ef0:	9009883a 	mov	r4,r18
    5ef4:	00050280 	call	5028 <_free_r>
    5ef8:	00800074 	movhi	r2,1
    5efc:	108e6404 	addi	r2,r2,14736
    5f00:	10c00017 	ldw	r3,0(r2)
    5f04:	003f2c06 	br	5bb8 <__alt_data_end+0xfffe67b8>
    5f08:	00c05504 	movi	r3,340
    5f0c:	18800536 	bltu	r3,r2,5f24 <_malloc_r+0x7cc>
    5f10:	3804d3fa 	srli	r2,r7,15
    5f14:	11401e04 	addi	r5,r2,120
    5f18:	10c01dc4 	addi	r3,r2,119
    5f1c:	294b883a 	add	r5,r5,r5
    5f20:	003f5606 	br	5c7c <__alt_data_end+0xfffe687c>
    5f24:	00c15504 	movi	r3,1364
    5f28:	18800536 	bltu	r3,r2,5f40 <_malloc_r+0x7e8>
    5f2c:	3804d4ba 	srli	r2,r7,18
    5f30:	11401f44 	addi	r5,r2,125
    5f34:	10c01f04 	addi	r3,r2,124
    5f38:	294b883a 	add	r5,r5,r5
    5f3c:	003f4f06 	br	5c7c <__alt_data_end+0xfffe687c>
    5f40:	01403f84 	movi	r5,254
    5f44:	00c01f84 	movi	r3,126
    5f48:	003f4c06 	br	5c7c <__alt_data_end+0xfffe687c>
    5f4c:	98800117 	ldw	r2,4(r19)
    5f50:	003fa006 	br	5dd4 <__alt_data_end+0xfffe69d4>
    5f54:	8808d0fa 	srli	r4,r17,3
    5f58:	20800044 	addi	r2,r4,1
    5f5c:	1085883a 	add	r2,r2,r2
    5f60:	003e9006 	br	59a4 <__alt_data_end+0xfffe65a4>

00005f64 <memchr>:
    5f64:	208000cc 	andi	r2,r4,3
    5f68:	280f883a 	mov	r7,r5
    5f6c:	10003426 	beq	r2,zero,6040 <memchr+0xdc>
    5f70:	30bfffc4 	addi	r2,r6,-1
    5f74:	30001a26 	beq	r6,zero,5fe0 <memchr+0x7c>
    5f78:	20c00003 	ldbu	r3,0(r4)
    5f7c:	29803fcc 	andi	r6,r5,255
    5f80:	30c0051e 	bne	r6,r3,5f98 <memchr+0x34>
    5f84:	00001806 	br	5fe8 <memchr+0x84>
    5f88:	10001526 	beq	r2,zero,5fe0 <memchr+0x7c>
    5f8c:	20c00003 	ldbu	r3,0(r4)
    5f90:	10bfffc4 	addi	r2,r2,-1
    5f94:	30c01426 	beq	r6,r3,5fe8 <memchr+0x84>
    5f98:	21000044 	addi	r4,r4,1
    5f9c:	20c000cc 	andi	r3,r4,3
    5fa0:	183ff91e 	bne	r3,zero,5f88 <__alt_data_end+0xfffe6b88>
    5fa4:	020000c4 	movi	r8,3
    5fa8:	40801136 	bltu	r8,r2,5ff0 <memchr+0x8c>
    5fac:	10000c26 	beq	r2,zero,5fe0 <memchr+0x7c>
    5fb0:	20c00003 	ldbu	r3,0(r4)
    5fb4:	29403fcc 	andi	r5,r5,255
    5fb8:	28c00b26 	beq	r5,r3,5fe8 <memchr+0x84>
    5fbc:	20c00044 	addi	r3,r4,1
    5fc0:	39803fcc 	andi	r6,r7,255
    5fc4:	2089883a 	add	r4,r4,r2
    5fc8:	00000306 	br	5fd8 <memchr+0x74>
    5fcc:	18c00044 	addi	r3,r3,1
    5fd0:	197fffc3 	ldbu	r5,-1(r3)
    5fd4:	31400526 	beq	r6,r5,5fec <memchr+0x88>
    5fd8:	1805883a 	mov	r2,r3
    5fdc:	20fffb1e 	bne	r4,r3,5fcc <__alt_data_end+0xfffe6bcc>
    5fe0:	0005883a 	mov	r2,zero
    5fe4:	f800283a 	ret
    5fe8:	2005883a 	mov	r2,r4
    5fec:	f800283a 	ret
    5ff0:	28c03fcc 	andi	r3,r5,255
    5ff4:	1812923a 	slli	r9,r3,8
    5ff8:	02ffbff4 	movhi	r11,65279
    5ffc:	02a02074 	movhi	r10,32897
    6000:	48d2b03a 	or	r9,r9,r3
    6004:	4806943a 	slli	r3,r9,16
    6008:	5affbfc4 	addi	r11,r11,-257
    600c:	52a02004 	addi	r10,r10,-32640
    6010:	48d2b03a 	or	r9,r9,r3
    6014:	20c00017 	ldw	r3,0(r4)
    6018:	48c6f03a 	xor	r3,r9,r3
    601c:	1acd883a 	add	r6,r3,r11
    6020:	00c6303a 	nor	r3,zero,r3
    6024:	30c6703a 	and	r3,r6,r3
    6028:	1a86703a 	and	r3,r3,r10
    602c:	183fe01e 	bne	r3,zero,5fb0 <__alt_data_end+0xfffe6bb0>
    6030:	10bfff04 	addi	r2,r2,-4
    6034:	21000104 	addi	r4,r4,4
    6038:	40bff636 	bltu	r8,r2,6014 <__alt_data_end+0xfffe6c14>
    603c:	003fdb06 	br	5fac <__alt_data_end+0xfffe6bac>
    6040:	3005883a 	mov	r2,r6
    6044:	003fd706 	br	5fa4 <__alt_data_end+0xfffe6ba4>

00006048 <memcpy>:
    6048:	defffd04 	addi	sp,sp,-12
    604c:	dfc00215 	stw	ra,8(sp)
    6050:	dc400115 	stw	r17,4(sp)
    6054:	dc000015 	stw	r16,0(sp)
    6058:	00c003c4 	movi	r3,15
    605c:	2005883a 	mov	r2,r4
    6060:	1980452e 	bgeu	r3,r6,6178 <memcpy+0x130>
    6064:	2906b03a 	or	r3,r5,r4
    6068:	18c000cc 	andi	r3,r3,3
    606c:	1800441e 	bne	r3,zero,6180 <memcpy+0x138>
    6070:	347ffc04 	addi	r17,r6,-16
    6074:	8822d13a 	srli	r17,r17,4
    6078:	28c00104 	addi	r3,r5,4
    607c:	23400104 	addi	r13,r4,4
    6080:	8820913a 	slli	r16,r17,4
    6084:	2b000204 	addi	r12,r5,8
    6088:	22c00204 	addi	r11,r4,8
    608c:	84000504 	addi	r16,r16,20
    6090:	2a800304 	addi	r10,r5,12
    6094:	22400304 	addi	r9,r4,12
    6098:	2c21883a 	add	r16,r5,r16
    609c:	2811883a 	mov	r8,r5
    60a0:	200f883a 	mov	r7,r4
    60a4:	41000017 	ldw	r4,0(r8)
    60a8:	1fc00017 	ldw	ra,0(r3)
    60ac:	63c00017 	ldw	r15,0(r12)
    60b0:	39000015 	stw	r4,0(r7)
    60b4:	53800017 	ldw	r14,0(r10)
    60b8:	6fc00015 	stw	ra,0(r13)
    60bc:	5bc00015 	stw	r15,0(r11)
    60c0:	4b800015 	stw	r14,0(r9)
    60c4:	18c00404 	addi	r3,r3,16
    60c8:	39c00404 	addi	r7,r7,16
    60cc:	42000404 	addi	r8,r8,16
    60d0:	6b400404 	addi	r13,r13,16
    60d4:	63000404 	addi	r12,r12,16
    60d8:	5ac00404 	addi	r11,r11,16
    60dc:	52800404 	addi	r10,r10,16
    60e0:	4a400404 	addi	r9,r9,16
    60e4:	1c3fef1e 	bne	r3,r16,60a4 <__alt_data_end+0xfffe6ca4>
    60e8:	89c00044 	addi	r7,r17,1
    60ec:	380e913a 	slli	r7,r7,4
    60f0:	310003cc 	andi	r4,r6,15
    60f4:	02c000c4 	movi	r11,3
    60f8:	11c7883a 	add	r3,r2,r7
    60fc:	29cb883a 	add	r5,r5,r7
    6100:	5900212e 	bgeu	r11,r4,6188 <memcpy+0x140>
    6104:	1813883a 	mov	r9,r3
    6108:	2811883a 	mov	r8,r5
    610c:	200f883a 	mov	r7,r4
    6110:	42800017 	ldw	r10,0(r8)
    6114:	4a400104 	addi	r9,r9,4
    6118:	39ffff04 	addi	r7,r7,-4
    611c:	4abfff15 	stw	r10,-4(r9)
    6120:	42000104 	addi	r8,r8,4
    6124:	59fffa36 	bltu	r11,r7,6110 <__alt_data_end+0xfffe6d10>
    6128:	213fff04 	addi	r4,r4,-4
    612c:	2008d0ba 	srli	r4,r4,2
    6130:	318000cc 	andi	r6,r6,3
    6134:	21000044 	addi	r4,r4,1
    6138:	2109883a 	add	r4,r4,r4
    613c:	2109883a 	add	r4,r4,r4
    6140:	1907883a 	add	r3,r3,r4
    6144:	290b883a 	add	r5,r5,r4
    6148:	30000626 	beq	r6,zero,6164 <memcpy+0x11c>
    614c:	198d883a 	add	r6,r3,r6
    6150:	29c00003 	ldbu	r7,0(r5)
    6154:	18c00044 	addi	r3,r3,1
    6158:	29400044 	addi	r5,r5,1
    615c:	19ffffc5 	stb	r7,-1(r3)
    6160:	19bffb1e 	bne	r3,r6,6150 <__alt_data_end+0xfffe6d50>
    6164:	dfc00217 	ldw	ra,8(sp)
    6168:	dc400117 	ldw	r17,4(sp)
    616c:	dc000017 	ldw	r16,0(sp)
    6170:	dec00304 	addi	sp,sp,12
    6174:	f800283a 	ret
    6178:	2007883a 	mov	r3,r4
    617c:	003ff206 	br	6148 <__alt_data_end+0xfffe6d48>
    6180:	2007883a 	mov	r3,r4
    6184:	003ff106 	br	614c <__alt_data_end+0xfffe6d4c>
    6188:	200d883a 	mov	r6,r4
    618c:	003fee06 	br	6148 <__alt_data_end+0xfffe6d48>

00006190 <memset>:
    6190:	20c000cc 	andi	r3,r4,3
    6194:	2005883a 	mov	r2,r4
    6198:	18004426 	beq	r3,zero,62ac <memset+0x11c>
    619c:	31ffffc4 	addi	r7,r6,-1
    61a0:	30004026 	beq	r6,zero,62a4 <memset+0x114>
    61a4:	2813883a 	mov	r9,r5
    61a8:	200d883a 	mov	r6,r4
    61ac:	2007883a 	mov	r3,r4
    61b0:	00000406 	br	61c4 <memset+0x34>
    61b4:	3a3fffc4 	addi	r8,r7,-1
    61b8:	31800044 	addi	r6,r6,1
    61bc:	38003926 	beq	r7,zero,62a4 <memset+0x114>
    61c0:	400f883a 	mov	r7,r8
    61c4:	18c00044 	addi	r3,r3,1
    61c8:	32400005 	stb	r9,0(r6)
    61cc:	1a0000cc 	andi	r8,r3,3
    61d0:	403ff81e 	bne	r8,zero,61b4 <__alt_data_end+0xfffe6db4>
    61d4:	010000c4 	movi	r4,3
    61d8:	21c02d2e 	bgeu	r4,r7,6290 <memset+0x100>
    61dc:	29003fcc 	andi	r4,r5,255
    61e0:	200c923a 	slli	r6,r4,8
    61e4:	3108b03a 	or	r4,r6,r4
    61e8:	200c943a 	slli	r6,r4,16
    61ec:	218cb03a 	or	r6,r4,r6
    61f0:	010003c4 	movi	r4,15
    61f4:	21c0182e 	bgeu	r4,r7,6258 <memset+0xc8>
    61f8:	3b3ffc04 	addi	r12,r7,-16
    61fc:	6018d13a 	srli	r12,r12,4
    6200:	1a000104 	addi	r8,r3,4
    6204:	1ac00204 	addi	r11,r3,8
    6208:	6008913a 	slli	r4,r12,4
    620c:	1a800304 	addi	r10,r3,12
    6210:	1813883a 	mov	r9,r3
    6214:	21000504 	addi	r4,r4,20
    6218:	1909883a 	add	r4,r3,r4
    621c:	49800015 	stw	r6,0(r9)
    6220:	41800015 	stw	r6,0(r8)
    6224:	59800015 	stw	r6,0(r11)
    6228:	51800015 	stw	r6,0(r10)
    622c:	42000404 	addi	r8,r8,16
    6230:	4a400404 	addi	r9,r9,16
    6234:	5ac00404 	addi	r11,r11,16
    6238:	52800404 	addi	r10,r10,16
    623c:	413ff71e 	bne	r8,r4,621c <__alt_data_end+0xfffe6e1c>
    6240:	63000044 	addi	r12,r12,1
    6244:	6018913a 	slli	r12,r12,4
    6248:	39c003cc 	andi	r7,r7,15
    624c:	010000c4 	movi	r4,3
    6250:	1b07883a 	add	r3,r3,r12
    6254:	21c00e2e 	bgeu	r4,r7,6290 <memset+0x100>
    6258:	1813883a 	mov	r9,r3
    625c:	3811883a 	mov	r8,r7
    6260:	010000c4 	movi	r4,3
    6264:	49800015 	stw	r6,0(r9)
    6268:	423fff04 	addi	r8,r8,-4
    626c:	4a400104 	addi	r9,r9,4
    6270:	223ffc36 	bltu	r4,r8,6264 <__alt_data_end+0xfffe6e64>
    6274:	393fff04 	addi	r4,r7,-4
    6278:	2008d0ba 	srli	r4,r4,2
    627c:	39c000cc 	andi	r7,r7,3
    6280:	21000044 	addi	r4,r4,1
    6284:	2109883a 	add	r4,r4,r4
    6288:	2109883a 	add	r4,r4,r4
    628c:	1907883a 	add	r3,r3,r4
    6290:	38000526 	beq	r7,zero,62a8 <memset+0x118>
    6294:	19cf883a 	add	r7,r3,r7
    6298:	19400005 	stb	r5,0(r3)
    629c:	18c00044 	addi	r3,r3,1
    62a0:	38fffd1e 	bne	r7,r3,6298 <__alt_data_end+0xfffe6e98>
    62a4:	f800283a 	ret
    62a8:	f800283a 	ret
    62ac:	2007883a 	mov	r3,r4
    62b0:	300f883a 	mov	r7,r6
    62b4:	003fc706 	br	61d4 <__alt_data_end+0xfffe6dd4>

000062b8 <_Balloc>:
    62b8:	20801317 	ldw	r2,76(r4)
    62bc:	defffc04 	addi	sp,sp,-16
    62c0:	dc400115 	stw	r17,4(sp)
    62c4:	dc000015 	stw	r16,0(sp)
    62c8:	dfc00315 	stw	ra,12(sp)
    62cc:	dc800215 	stw	r18,8(sp)
    62d0:	2023883a 	mov	r17,r4
    62d4:	2821883a 	mov	r16,r5
    62d8:	10000f26 	beq	r2,zero,6318 <_Balloc+0x60>
    62dc:	8407883a 	add	r3,r16,r16
    62e0:	18c7883a 	add	r3,r3,r3
    62e4:	10c7883a 	add	r3,r2,r3
    62e8:	18800017 	ldw	r2,0(r3)
    62ec:	10001126 	beq	r2,zero,6334 <_Balloc+0x7c>
    62f0:	11000017 	ldw	r4,0(r2)
    62f4:	19000015 	stw	r4,0(r3)
    62f8:	10000415 	stw	zero,16(r2)
    62fc:	10000315 	stw	zero,12(r2)
    6300:	dfc00317 	ldw	ra,12(sp)
    6304:	dc800217 	ldw	r18,8(sp)
    6308:	dc400117 	ldw	r17,4(sp)
    630c:	dc000017 	ldw	r16,0(sp)
    6310:	dec00404 	addi	sp,sp,16
    6314:	f800283a 	ret
    6318:	01800844 	movi	r6,33
    631c:	01400104 	movi	r5,4
    6320:	0008e940 	call	8e94 <_calloc_r>
    6324:	88801315 	stw	r2,76(r17)
    6328:	103fec1e 	bne	r2,zero,62dc <__alt_data_end+0xfffe6edc>
    632c:	0005883a 	mov	r2,zero
    6330:	003ff306 	br	6300 <__alt_data_end+0xfffe6f00>
    6334:	01400044 	movi	r5,1
    6338:	2c24983a 	sll	r18,r5,r16
    633c:	8809883a 	mov	r4,r17
    6340:	91800144 	addi	r6,r18,5
    6344:	318d883a 	add	r6,r6,r6
    6348:	318d883a 	add	r6,r6,r6
    634c:	0008e940 	call	8e94 <_calloc_r>
    6350:	103ff626 	beq	r2,zero,632c <__alt_data_end+0xfffe6f2c>
    6354:	14000115 	stw	r16,4(r2)
    6358:	14800215 	stw	r18,8(r2)
    635c:	003fe606 	br	62f8 <__alt_data_end+0xfffe6ef8>

00006360 <_Bfree>:
    6360:	28000826 	beq	r5,zero,6384 <_Bfree+0x24>
    6364:	28c00117 	ldw	r3,4(r5)
    6368:	20801317 	ldw	r2,76(r4)
    636c:	18c7883a 	add	r3,r3,r3
    6370:	18c7883a 	add	r3,r3,r3
    6374:	10c5883a 	add	r2,r2,r3
    6378:	10c00017 	ldw	r3,0(r2)
    637c:	28c00015 	stw	r3,0(r5)
    6380:	11400015 	stw	r5,0(r2)
    6384:	f800283a 	ret

00006388 <__multadd>:
    6388:	defff704 	addi	sp,sp,-36
    638c:	dc800215 	stw	r18,8(sp)
    6390:	2c800417 	ldw	r18,16(r5)
    6394:	dd800615 	stw	r22,24(sp)
    6398:	dd400515 	stw	r21,20(sp)
    639c:	dd000415 	stw	r20,16(sp)
    63a0:	dcc00315 	stw	r19,12(sp)
    63a4:	dc400115 	stw	r17,4(sp)
    63a8:	dc000015 	stw	r16,0(sp)
    63ac:	dfc00815 	stw	ra,32(sp)
    63b0:	ddc00715 	stw	r23,28(sp)
    63b4:	2827883a 	mov	r19,r5
    63b8:	2029883a 	mov	r20,r4
    63bc:	3023883a 	mov	r17,r6
    63c0:	3821883a 	mov	r16,r7
    63c4:	2d400504 	addi	r21,r5,20
    63c8:	002d883a 	mov	r22,zero
    63cc:	adc00017 	ldw	r23,0(r21)
    63d0:	880b883a 	mov	r5,r17
    63d4:	ad400104 	addi	r21,r21,4
    63d8:	b93fffcc 	andi	r4,r23,65535
    63dc:	000b0280 	call	b028 <__mulsi3>
    63e0:	b808d43a 	srli	r4,r23,16
    63e4:	880b883a 	mov	r5,r17
    63e8:	1421883a 	add	r16,r2,r16
    63ec:	000b0280 	call	b028 <__mulsi3>
    63f0:	800ed43a 	srli	r7,r16,16
    63f4:	80ffffcc 	andi	r3,r16,65535
    63f8:	b5800044 	addi	r22,r22,1
    63fc:	11c5883a 	add	r2,r2,r7
    6400:	100e943a 	slli	r7,r2,16
    6404:	1020d43a 	srli	r16,r2,16
    6408:	38c7883a 	add	r3,r7,r3
    640c:	a8ffff15 	stw	r3,-4(r21)
    6410:	b4bfee16 	blt	r22,r18,63cc <__alt_data_end+0xfffe6fcc>
    6414:	80000926 	beq	r16,zero,643c <__multadd+0xb4>
    6418:	98800217 	ldw	r2,8(r19)
    641c:	9080130e 	bge	r18,r2,646c <__multadd+0xe4>
    6420:	90800144 	addi	r2,r18,5
    6424:	1085883a 	add	r2,r2,r2
    6428:	1085883a 	add	r2,r2,r2
    642c:	9885883a 	add	r2,r19,r2
    6430:	14000015 	stw	r16,0(r2)
    6434:	94800044 	addi	r18,r18,1
    6438:	9c800415 	stw	r18,16(r19)
    643c:	9805883a 	mov	r2,r19
    6440:	dfc00817 	ldw	ra,32(sp)
    6444:	ddc00717 	ldw	r23,28(sp)
    6448:	dd800617 	ldw	r22,24(sp)
    644c:	dd400517 	ldw	r21,20(sp)
    6450:	dd000417 	ldw	r20,16(sp)
    6454:	dcc00317 	ldw	r19,12(sp)
    6458:	dc800217 	ldw	r18,8(sp)
    645c:	dc400117 	ldw	r17,4(sp)
    6460:	dc000017 	ldw	r16,0(sp)
    6464:	dec00904 	addi	sp,sp,36
    6468:	f800283a 	ret
    646c:	99400117 	ldw	r5,4(r19)
    6470:	a009883a 	mov	r4,r20
    6474:	29400044 	addi	r5,r5,1
    6478:	00062b80 	call	62b8 <_Balloc>
    647c:	99800417 	ldw	r6,16(r19)
    6480:	99400304 	addi	r5,r19,12
    6484:	11000304 	addi	r4,r2,12
    6488:	31800084 	addi	r6,r6,2
    648c:	318d883a 	add	r6,r6,r6
    6490:	318d883a 	add	r6,r6,r6
    6494:	1023883a 	mov	r17,r2
    6498:	00060480 	call	6048 <memcpy>
    649c:	98000a26 	beq	r19,zero,64c8 <__multadd+0x140>
    64a0:	98c00117 	ldw	r3,4(r19)
    64a4:	a0801317 	ldw	r2,76(r20)
    64a8:	18c7883a 	add	r3,r3,r3
    64ac:	18c7883a 	add	r3,r3,r3
    64b0:	10c5883a 	add	r2,r2,r3
    64b4:	10c00017 	ldw	r3,0(r2)
    64b8:	98c00015 	stw	r3,0(r19)
    64bc:	14c00015 	stw	r19,0(r2)
    64c0:	8827883a 	mov	r19,r17
    64c4:	003fd606 	br	6420 <__alt_data_end+0xfffe7020>
    64c8:	8827883a 	mov	r19,r17
    64cc:	003fd406 	br	6420 <__alt_data_end+0xfffe7020>

000064d0 <__s2b>:
    64d0:	defff904 	addi	sp,sp,-28
    64d4:	dc400115 	stw	r17,4(sp)
    64d8:	dc000015 	stw	r16,0(sp)
    64dc:	2023883a 	mov	r17,r4
    64e0:	2821883a 	mov	r16,r5
    64e4:	39000204 	addi	r4,r7,8
    64e8:	01400244 	movi	r5,9
    64ec:	dcc00315 	stw	r19,12(sp)
    64f0:	dc800215 	stw	r18,8(sp)
    64f4:	dfc00615 	stw	ra,24(sp)
    64f8:	dd400515 	stw	r21,20(sp)
    64fc:	dd000415 	stw	r20,16(sp)
    6500:	3825883a 	mov	r18,r7
    6504:	3027883a 	mov	r19,r6
    6508:	000ae740 	call	ae74 <__divsi3>
    650c:	00c00044 	movi	r3,1
    6510:	000b883a 	mov	r5,zero
    6514:	1880030e 	bge	r3,r2,6524 <__s2b+0x54>
    6518:	18c7883a 	add	r3,r3,r3
    651c:	29400044 	addi	r5,r5,1
    6520:	18bffd16 	blt	r3,r2,6518 <__alt_data_end+0xfffe7118>
    6524:	8809883a 	mov	r4,r17
    6528:	00062b80 	call	62b8 <_Balloc>
    652c:	d8c00717 	ldw	r3,28(sp)
    6530:	10c00515 	stw	r3,20(r2)
    6534:	00c00044 	movi	r3,1
    6538:	10c00415 	stw	r3,16(r2)
    653c:	00c00244 	movi	r3,9
    6540:	1cc0210e 	bge	r3,r19,65c8 <__s2b+0xf8>
    6544:	80eb883a 	add	r21,r16,r3
    6548:	a829883a 	mov	r20,r21
    654c:	84e1883a 	add	r16,r16,r19
    6550:	a1c00007 	ldb	r7,0(r20)
    6554:	01800284 	movi	r6,10
    6558:	a5000044 	addi	r20,r20,1
    655c:	100b883a 	mov	r5,r2
    6560:	39fff404 	addi	r7,r7,-48
    6564:	8809883a 	mov	r4,r17
    6568:	00063880 	call	6388 <__multadd>
    656c:	a43ff81e 	bne	r20,r16,6550 <__alt_data_end+0xfffe7150>
    6570:	ace1883a 	add	r16,r21,r19
    6574:	843ffe04 	addi	r16,r16,-8
    6578:	9c800a0e 	bge	r19,r18,65a4 <__s2b+0xd4>
    657c:	94e5c83a 	sub	r18,r18,r19
    6580:	84a5883a 	add	r18,r16,r18
    6584:	81c00007 	ldb	r7,0(r16)
    6588:	01800284 	movi	r6,10
    658c:	84000044 	addi	r16,r16,1
    6590:	100b883a 	mov	r5,r2
    6594:	39fff404 	addi	r7,r7,-48
    6598:	8809883a 	mov	r4,r17
    659c:	00063880 	call	6388 <__multadd>
    65a0:	84bff81e 	bne	r16,r18,6584 <__alt_data_end+0xfffe7184>
    65a4:	dfc00617 	ldw	ra,24(sp)
    65a8:	dd400517 	ldw	r21,20(sp)
    65ac:	dd000417 	ldw	r20,16(sp)
    65b0:	dcc00317 	ldw	r19,12(sp)
    65b4:	dc800217 	ldw	r18,8(sp)
    65b8:	dc400117 	ldw	r17,4(sp)
    65bc:	dc000017 	ldw	r16,0(sp)
    65c0:	dec00704 	addi	sp,sp,28
    65c4:	f800283a 	ret
    65c8:	84000284 	addi	r16,r16,10
    65cc:	1827883a 	mov	r19,r3
    65d0:	003fe906 	br	6578 <__alt_data_end+0xfffe7178>

000065d4 <__hi0bits>:
    65d4:	20bfffec 	andhi	r2,r4,65535
    65d8:	1000141e 	bne	r2,zero,662c <__hi0bits+0x58>
    65dc:	2008943a 	slli	r4,r4,16
    65e0:	00800404 	movi	r2,16
    65e4:	20ffc02c 	andhi	r3,r4,65280
    65e8:	1800021e 	bne	r3,zero,65f4 <__hi0bits+0x20>
    65ec:	2008923a 	slli	r4,r4,8
    65f0:	10800204 	addi	r2,r2,8
    65f4:	20fc002c 	andhi	r3,r4,61440
    65f8:	1800021e 	bne	r3,zero,6604 <__hi0bits+0x30>
    65fc:	2008913a 	slli	r4,r4,4
    6600:	10800104 	addi	r2,r2,4
    6604:	20f0002c 	andhi	r3,r4,49152
    6608:	1800031e 	bne	r3,zero,6618 <__hi0bits+0x44>
    660c:	2109883a 	add	r4,r4,r4
    6610:	10800084 	addi	r2,r2,2
    6614:	2109883a 	add	r4,r4,r4
    6618:	20000316 	blt	r4,zero,6628 <__hi0bits+0x54>
    661c:	2110002c 	andhi	r4,r4,16384
    6620:	2000041e 	bne	r4,zero,6634 <__hi0bits+0x60>
    6624:	00800804 	movi	r2,32
    6628:	f800283a 	ret
    662c:	0005883a 	mov	r2,zero
    6630:	003fec06 	br	65e4 <__alt_data_end+0xfffe71e4>
    6634:	10800044 	addi	r2,r2,1
    6638:	f800283a 	ret

0000663c <__lo0bits>:
    663c:	20c00017 	ldw	r3,0(r4)
    6640:	188001cc 	andi	r2,r3,7
    6644:	10000826 	beq	r2,zero,6668 <__lo0bits+0x2c>
    6648:	1880004c 	andi	r2,r3,1
    664c:	1000211e 	bne	r2,zero,66d4 <__lo0bits+0x98>
    6650:	1880008c 	andi	r2,r3,2
    6654:	1000211e 	bne	r2,zero,66dc <__lo0bits+0xa0>
    6658:	1806d0ba 	srli	r3,r3,2
    665c:	00800084 	movi	r2,2
    6660:	20c00015 	stw	r3,0(r4)
    6664:	f800283a 	ret
    6668:	18bfffcc 	andi	r2,r3,65535
    666c:	10001326 	beq	r2,zero,66bc <__lo0bits+0x80>
    6670:	0005883a 	mov	r2,zero
    6674:	19403fcc 	andi	r5,r3,255
    6678:	2800021e 	bne	r5,zero,6684 <__lo0bits+0x48>
    667c:	1806d23a 	srli	r3,r3,8
    6680:	10800204 	addi	r2,r2,8
    6684:	194003cc 	andi	r5,r3,15
    6688:	2800021e 	bne	r5,zero,6694 <__lo0bits+0x58>
    668c:	1806d13a 	srli	r3,r3,4
    6690:	10800104 	addi	r2,r2,4
    6694:	194000cc 	andi	r5,r3,3
    6698:	2800021e 	bne	r5,zero,66a4 <__lo0bits+0x68>
    669c:	1806d0ba 	srli	r3,r3,2
    66a0:	10800084 	addi	r2,r2,2
    66a4:	1940004c 	andi	r5,r3,1
    66a8:	2800081e 	bne	r5,zero,66cc <__lo0bits+0x90>
    66ac:	1806d07a 	srli	r3,r3,1
    66b0:	1800051e 	bne	r3,zero,66c8 <__lo0bits+0x8c>
    66b4:	00800804 	movi	r2,32
    66b8:	f800283a 	ret
    66bc:	1806d43a 	srli	r3,r3,16
    66c0:	00800404 	movi	r2,16
    66c4:	003feb06 	br	6674 <__alt_data_end+0xfffe7274>
    66c8:	10800044 	addi	r2,r2,1
    66cc:	20c00015 	stw	r3,0(r4)
    66d0:	f800283a 	ret
    66d4:	0005883a 	mov	r2,zero
    66d8:	f800283a 	ret
    66dc:	1806d07a 	srli	r3,r3,1
    66e0:	00800044 	movi	r2,1
    66e4:	20c00015 	stw	r3,0(r4)
    66e8:	f800283a 	ret

000066ec <__i2b>:
    66ec:	defffd04 	addi	sp,sp,-12
    66f0:	dc000015 	stw	r16,0(sp)
    66f4:	04000044 	movi	r16,1
    66f8:	dc400115 	stw	r17,4(sp)
    66fc:	2823883a 	mov	r17,r5
    6700:	800b883a 	mov	r5,r16
    6704:	dfc00215 	stw	ra,8(sp)
    6708:	00062b80 	call	62b8 <_Balloc>
    670c:	14400515 	stw	r17,20(r2)
    6710:	14000415 	stw	r16,16(r2)
    6714:	dfc00217 	ldw	ra,8(sp)
    6718:	dc400117 	ldw	r17,4(sp)
    671c:	dc000017 	ldw	r16,0(sp)
    6720:	dec00304 	addi	sp,sp,12
    6724:	f800283a 	ret

00006728 <__multiply>:
    6728:	deffef04 	addi	sp,sp,-68
    672c:	dc400815 	stw	r17,32(sp)
    6730:	dc000715 	stw	r16,28(sp)
    6734:	34400417 	ldw	r17,16(r6)
    6738:	2c000417 	ldw	r16,16(r5)
    673c:	dd800d15 	stw	r22,52(sp)
    6740:	dc800915 	stw	r18,36(sp)
    6744:	dfc01015 	stw	ra,64(sp)
    6748:	df000f15 	stw	fp,60(sp)
    674c:	ddc00e15 	stw	r23,56(sp)
    6750:	dd400c15 	stw	r21,48(sp)
    6754:	dd000b15 	stw	r20,44(sp)
    6758:	dcc00a15 	stw	r19,40(sp)
    675c:	2825883a 	mov	r18,r5
    6760:	302d883a 	mov	r22,r6
    6764:	8440050e 	bge	r16,r17,677c <__multiply+0x54>
    6768:	8007883a 	mov	r3,r16
    676c:	3025883a 	mov	r18,r6
    6770:	8821883a 	mov	r16,r17
    6774:	282d883a 	mov	r22,r5
    6778:	1823883a 	mov	r17,r3
    677c:	90800217 	ldw	r2,8(r18)
    6780:	8447883a 	add	r3,r16,r17
    6784:	d8c00215 	stw	r3,8(sp)
    6788:	91400117 	ldw	r5,4(r18)
    678c:	10c0010e 	bge	r2,r3,6794 <__multiply+0x6c>
    6790:	29400044 	addi	r5,r5,1
    6794:	00062b80 	call	62b8 <_Balloc>
    6798:	d8c00217 	ldw	r3,8(sp)
    679c:	d8800615 	stw	r2,24(sp)
    67a0:	18eb883a 	add	r21,r3,r3
    67a4:	ad6b883a 	add	r21,r21,r21
    67a8:	10c00504 	addi	r3,r2,20
    67ac:	1d6b883a 	add	r21,r3,r21
    67b0:	d8c00115 	stw	r3,4(sp)
    67b4:	dd400315 	stw	r21,12(sp)
    67b8:	1805883a 	mov	r2,r3
    67bc:	1d40042e 	bgeu	r3,r21,67d0 <__multiply+0xa8>
    67c0:	d8c00317 	ldw	r3,12(sp)
    67c4:	10000015 	stw	zero,0(r2)
    67c8:	10800104 	addi	r2,r2,4
    67cc:	10fffc36 	bltu	r2,r3,67c0 <__alt_data_end+0xfffe73c0>
    67d0:	8c63883a 	add	r17,r17,r17
    67d4:	b5800504 	addi	r22,r22,20
    67d8:	8c63883a 	add	r17,r17,r17
    67dc:	94800504 	addi	r18,r18,20
    67e0:	8421883a 	add	r16,r16,r16
    67e4:	b463883a 	add	r17,r22,r17
    67e8:	8421883a 	add	r16,r16,r16
    67ec:	dd800015 	stw	r22,0(sp)
    67f0:	dc800415 	stw	r18,16(sp)
    67f4:	dc400515 	stw	r17,20(sp)
    67f8:	9429883a 	add	r20,r18,r16
    67fc:	b4404f2e 	bgeu	r22,r17,693c <__multiply+0x214>
    6800:	d8c00017 	ldw	r3,0(sp)
    6804:	1c800017 	ldw	r18,0(r3)
    6808:	947fffcc 	andi	r17,r18,65535
    680c:	88001e26 	beq	r17,zero,6888 <__multiply+0x160>
    6810:	dd800117 	ldw	r22,4(sp)
    6814:	dd400417 	ldw	r21,16(sp)
    6818:	0027883a 	mov	r19,zero
    681c:	ac800017 	ldw	r18,0(r21)
    6820:	b4000017 	ldw	r16,0(r22)
    6824:	880b883a 	mov	r5,r17
    6828:	913fffcc 	andi	r4,r18,65535
    682c:	000b0280 	call	b028 <__mulsi3>
    6830:	9008d43a 	srli	r4,r18,16
    6834:	84bfffcc 	andi	r18,r16,65535
    6838:	1485883a 	add	r2,r2,r18
    683c:	14e5883a 	add	r18,r2,r19
    6840:	8020d43a 	srli	r16,r16,16
    6844:	9026d43a 	srli	r19,r18,16
    6848:	880b883a 	mov	r5,r17
    684c:	000b0280 	call	b028 <__mulsi3>
    6850:	1405883a 	add	r2,r2,r16
    6854:	14e1883a 	add	r16,r2,r19
    6858:	90ffffcc 	andi	r3,r18,65535
    685c:	8024943a 	slli	r18,r16,16
    6860:	ad400104 	addi	r21,r21,4
    6864:	b005883a 	mov	r2,r22
    6868:	90c6b03a 	or	r3,r18,r3
    686c:	b0c00015 	stw	r3,0(r22)
    6870:	8026d43a 	srli	r19,r16,16
    6874:	b5800104 	addi	r22,r22,4
    6878:	ad3fe836 	bltu	r21,r20,681c <__alt_data_end+0xfffe741c>
    687c:	d8c00017 	ldw	r3,0(sp)
    6880:	14c00115 	stw	r19,4(r2)
    6884:	1c800017 	ldw	r18,0(r3)
    6888:	9024d43a 	srli	r18,r18,16
    688c:	90002226 	beq	r18,zero,6918 <__multiply+0x1f0>
    6890:	d8c00117 	ldw	r3,4(sp)
    6894:	dd800417 	ldw	r22,16(sp)
    6898:	002f883a 	mov	r23,zero
    689c:	1f000017 	ldw	fp,0(r3)
    68a0:	1823883a 	mov	r17,r3
    68a4:	182b883a 	mov	r21,r3
    68a8:	e021883a 	mov	r16,fp
    68ac:	00000106 	br	68b4 <__multiply+0x18c>
    68b0:	982b883a 	mov	r21,r19
    68b4:	b100000b 	ldhu	r4,0(r22)
    68b8:	8020d43a 	srli	r16,r16,16
    68bc:	900b883a 	mov	r5,r18
    68c0:	000b0280 	call	b028 <__mulsi3>
    68c4:	1405883a 	add	r2,r2,r16
    68c8:	15ef883a 	add	r23,r2,r23
    68cc:	b804943a 	slli	r2,r23,16
    68d0:	e0ffffcc 	andi	r3,fp,65535
    68d4:	8c400104 	addi	r17,r17,4
    68d8:	10c6b03a 	or	r3,r2,r3
    68dc:	88ffff15 	stw	r3,-4(r17)
    68e0:	b5800104 	addi	r22,r22,4
    68e4:	b13fff17 	ldw	r4,-4(r22)
    68e8:	acc00104 	addi	r19,r21,4
    68ec:	900b883a 	mov	r5,r18
    68f0:	2008d43a 	srli	r4,r4,16
    68f4:	9c000017 	ldw	r16,0(r19)
    68f8:	000b0280 	call	b028 <__mulsi3>
    68fc:	b806d43a 	srli	r3,r23,16
    6900:	813fffcc 	andi	r4,r16,65535
    6904:	1105883a 	add	r2,r2,r4
    6908:	10f9883a 	add	fp,r2,r3
    690c:	e02ed43a 	srli	r23,fp,16
    6910:	b53fe736 	bltu	r22,r20,68b0 <__alt_data_end+0xfffe74b0>
    6914:	af000115 	stw	fp,4(r21)
    6918:	d8c00017 	ldw	r3,0(sp)
    691c:	d9000517 	ldw	r4,20(sp)
    6920:	18c00104 	addi	r3,r3,4
    6924:	d8c00015 	stw	r3,0(sp)
    6928:	d8c00117 	ldw	r3,4(sp)
    692c:	18c00104 	addi	r3,r3,4
    6930:	d8c00115 	stw	r3,4(sp)
    6934:	d8c00017 	ldw	r3,0(sp)
    6938:	193fb136 	bltu	r3,r4,6800 <__alt_data_end+0xfffe7400>
    693c:	d8c00217 	ldw	r3,8(sp)
    6940:	00c00c0e 	bge	zero,r3,6974 <__multiply+0x24c>
    6944:	d8c00317 	ldw	r3,12(sp)
    6948:	18bfff17 	ldw	r2,-4(r3)
    694c:	1d7fff04 	addi	r21,r3,-4
    6950:	10000326 	beq	r2,zero,6960 <__multiply+0x238>
    6954:	00000706 	br	6974 <__multiply+0x24c>
    6958:	a8800017 	ldw	r2,0(r21)
    695c:	1000051e 	bne	r2,zero,6974 <__multiply+0x24c>
    6960:	d8c00217 	ldw	r3,8(sp)
    6964:	ad7fff04 	addi	r21,r21,-4
    6968:	18ffffc4 	addi	r3,r3,-1
    696c:	d8c00215 	stw	r3,8(sp)
    6970:	183ff91e 	bne	r3,zero,6958 <__alt_data_end+0xfffe7558>
    6974:	d8c00617 	ldw	r3,24(sp)
    6978:	d9000217 	ldw	r4,8(sp)
    697c:	1805883a 	mov	r2,r3
    6980:	19000415 	stw	r4,16(r3)
    6984:	dfc01017 	ldw	ra,64(sp)
    6988:	df000f17 	ldw	fp,60(sp)
    698c:	ddc00e17 	ldw	r23,56(sp)
    6990:	dd800d17 	ldw	r22,52(sp)
    6994:	dd400c17 	ldw	r21,48(sp)
    6998:	dd000b17 	ldw	r20,44(sp)
    699c:	dcc00a17 	ldw	r19,40(sp)
    69a0:	dc800917 	ldw	r18,36(sp)
    69a4:	dc400817 	ldw	r17,32(sp)
    69a8:	dc000717 	ldw	r16,28(sp)
    69ac:	dec01104 	addi	sp,sp,68
    69b0:	f800283a 	ret

000069b4 <__pow5mult>:
    69b4:	defffa04 	addi	sp,sp,-24
    69b8:	dcc00315 	stw	r19,12(sp)
    69bc:	dc000015 	stw	r16,0(sp)
    69c0:	dfc00515 	stw	ra,20(sp)
    69c4:	dd000415 	stw	r20,16(sp)
    69c8:	dc800215 	stw	r18,8(sp)
    69cc:	dc400115 	stw	r17,4(sp)
    69d0:	308000cc 	andi	r2,r6,3
    69d4:	3021883a 	mov	r16,r6
    69d8:	2027883a 	mov	r19,r4
    69dc:	10002f1e 	bne	r2,zero,6a9c <__pow5mult+0xe8>
    69e0:	2825883a 	mov	r18,r5
    69e4:	8021d0ba 	srai	r16,r16,2
    69e8:	80001a26 	beq	r16,zero,6a54 <__pow5mult+0xa0>
    69ec:	9c401217 	ldw	r17,72(r19)
    69f0:	8800061e 	bne	r17,zero,6a0c <__pow5mult+0x58>
    69f4:	00003406 	br	6ac8 <__pow5mult+0x114>
    69f8:	8021d07a 	srai	r16,r16,1
    69fc:	80001526 	beq	r16,zero,6a54 <__pow5mult+0xa0>
    6a00:	88800017 	ldw	r2,0(r17)
    6a04:	10001c26 	beq	r2,zero,6a78 <__pow5mult+0xc4>
    6a08:	1023883a 	mov	r17,r2
    6a0c:	8080004c 	andi	r2,r16,1
    6a10:	103ff926 	beq	r2,zero,69f8 <__alt_data_end+0xfffe75f8>
    6a14:	880d883a 	mov	r6,r17
    6a18:	900b883a 	mov	r5,r18
    6a1c:	9809883a 	mov	r4,r19
    6a20:	00067280 	call	6728 <__multiply>
    6a24:	90001b26 	beq	r18,zero,6a94 <__pow5mult+0xe0>
    6a28:	91000117 	ldw	r4,4(r18)
    6a2c:	98c01317 	ldw	r3,76(r19)
    6a30:	8021d07a 	srai	r16,r16,1
    6a34:	2109883a 	add	r4,r4,r4
    6a38:	2109883a 	add	r4,r4,r4
    6a3c:	1907883a 	add	r3,r3,r4
    6a40:	19000017 	ldw	r4,0(r3)
    6a44:	91000015 	stw	r4,0(r18)
    6a48:	1c800015 	stw	r18,0(r3)
    6a4c:	1025883a 	mov	r18,r2
    6a50:	803feb1e 	bne	r16,zero,6a00 <__alt_data_end+0xfffe7600>
    6a54:	9005883a 	mov	r2,r18
    6a58:	dfc00517 	ldw	ra,20(sp)
    6a5c:	dd000417 	ldw	r20,16(sp)
    6a60:	dcc00317 	ldw	r19,12(sp)
    6a64:	dc800217 	ldw	r18,8(sp)
    6a68:	dc400117 	ldw	r17,4(sp)
    6a6c:	dc000017 	ldw	r16,0(sp)
    6a70:	dec00604 	addi	sp,sp,24
    6a74:	f800283a 	ret
    6a78:	880d883a 	mov	r6,r17
    6a7c:	880b883a 	mov	r5,r17
    6a80:	9809883a 	mov	r4,r19
    6a84:	00067280 	call	6728 <__multiply>
    6a88:	88800015 	stw	r2,0(r17)
    6a8c:	10000015 	stw	zero,0(r2)
    6a90:	003fdd06 	br	6a08 <__alt_data_end+0xfffe7608>
    6a94:	1025883a 	mov	r18,r2
    6a98:	003fd706 	br	69f8 <__alt_data_end+0xfffe75f8>
    6a9c:	10bfffc4 	addi	r2,r2,-1
    6aa0:	1085883a 	add	r2,r2,r2
    6aa4:	00c00074 	movhi	r3,1
    6aa8:	18c03c04 	addi	r3,r3,240
    6aac:	1085883a 	add	r2,r2,r2
    6ab0:	1885883a 	add	r2,r3,r2
    6ab4:	11800017 	ldw	r6,0(r2)
    6ab8:	000f883a 	mov	r7,zero
    6abc:	00063880 	call	6388 <__multadd>
    6ac0:	1025883a 	mov	r18,r2
    6ac4:	003fc706 	br	69e4 <__alt_data_end+0xfffe75e4>
    6ac8:	05000044 	movi	r20,1
    6acc:	a00b883a 	mov	r5,r20
    6ad0:	9809883a 	mov	r4,r19
    6ad4:	00062b80 	call	62b8 <_Balloc>
    6ad8:	1023883a 	mov	r17,r2
    6adc:	00809c44 	movi	r2,625
    6ae0:	88800515 	stw	r2,20(r17)
    6ae4:	8d000415 	stw	r20,16(r17)
    6ae8:	9c401215 	stw	r17,72(r19)
    6aec:	88000015 	stw	zero,0(r17)
    6af0:	003fc606 	br	6a0c <__alt_data_end+0xfffe760c>

00006af4 <__lshift>:
    6af4:	defff904 	addi	sp,sp,-28
    6af8:	dd400515 	stw	r21,20(sp)
    6afc:	dcc00315 	stw	r19,12(sp)
    6b00:	302bd17a 	srai	r21,r6,5
    6b04:	2cc00417 	ldw	r19,16(r5)
    6b08:	28800217 	ldw	r2,8(r5)
    6b0c:	dd000415 	stw	r20,16(sp)
    6b10:	ace7883a 	add	r19,r21,r19
    6b14:	dc800215 	stw	r18,8(sp)
    6b18:	dc400115 	stw	r17,4(sp)
    6b1c:	dc000015 	stw	r16,0(sp)
    6b20:	dfc00615 	stw	ra,24(sp)
    6b24:	9c000044 	addi	r16,r19,1
    6b28:	2823883a 	mov	r17,r5
    6b2c:	3029883a 	mov	r20,r6
    6b30:	2025883a 	mov	r18,r4
    6b34:	29400117 	ldw	r5,4(r5)
    6b38:	1400030e 	bge	r2,r16,6b48 <__lshift+0x54>
    6b3c:	1085883a 	add	r2,r2,r2
    6b40:	29400044 	addi	r5,r5,1
    6b44:	143ffd16 	blt	r2,r16,6b3c <__alt_data_end+0xfffe773c>
    6b48:	9009883a 	mov	r4,r18
    6b4c:	00062b80 	call	62b8 <_Balloc>
    6b50:	10c00504 	addi	r3,r2,20
    6b54:	0540070e 	bge	zero,r21,6b74 <__lshift+0x80>
    6b58:	ad6b883a 	add	r21,r21,r21
    6b5c:	ad6b883a 	add	r21,r21,r21
    6b60:	1809883a 	mov	r4,r3
    6b64:	1d47883a 	add	r3,r3,r21
    6b68:	20000015 	stw	zero,0(r4)
    6b6c:	21000104 	addi	r4,r4,4
    6b70:	193ffd1e 	bne	r3,r4,6b68 <__alt_data_end+0xfffe7768>
    6b74:	8a000417 	ldw	r8,16(r17)
    6b78:	89000504 	addi	r4,r17,20
    6b7c:	a18007cc 	andi	r6,r20,31
    6b80:	4211883a 	add	r8,r8,r8
    6b84:	4211883a 	add	r8,r8,r8
    6b88:	2211883a 	add	r8,r4,r8
    6b8c:	30002326 	beq	r6,zero,6c1c <__lshift+0x128>
    6b90:	02400804 	movi	r9,32
    6b94:	4993c83a 	sub	r9,r9,r6
    6b98:	000b883a 	mov	r5,zero
    6b9c:	21c00017 	ldw	r7,0(r4)
    6ba0:	1815883a 	mov	r10,r3
    6ba4:	18c00104 	addi	r3,r3,4
    6ba8:	398e983a 	sll	r7,r7,r6
    6bac:	21000104 	addi	r4,r4,4
    6bb0:	394ab03a 	or	r5,r7,r5
    6bb4:	197fff15 	stw	r5,-4(r3)
    6bb8:	217fff17 	ldw	r5,-4(r4)
    6bbc:	2a4ad83a 	srl	r5,r5,r9
    6bc0:	223ff636 	bltu	r4,r8,6b9c <__alt_data_end+0xfffe779c>
    6bc4:	51400115 	stw	r5,4(r10)
    6bc8:	28001a1e 	bne	r5,zero,6c34 <__lshift+0x140>
    6bcc:	843fffc4 	addi	r16,r16,-1
    6bd0:	14000415 	stw	r16,16(r2)
    6bd4:	88000826 	beq	r17,zero,6bf8 <__lshift+0x104>
    6bd8:	89000117 	ldw	r4,4(r17)
    6bdc:	90c01317 	ldw	r3,76(r18)
    6be0:	2109883a 	add	r4,r4,r4
    6be4:	2109883a 	add	r4,r4,r4
    6be8:	1907883a 	add	r3,r3,r4
    6bec:	19000017 	ldw	r4,0(r3)
    6bf0:	89000015 	stw	r4,0(r17)
    6bf4:	1c400015 	stw	r17,0(r3)
    6bf8:	dfc00617 	ldw	ra,24(sp)
    6bfc:	dd400517 	ldw	r21,20(sp)
    6c00:	dd000417 	ldw	r20,16(sp)
    6c04:	dcc00317 	ldw	r19,12(sp)
    6c08:	dc800217 	ldw	r18,8(sp)
    6c0c:	dc400117 	ldw	r17,4(sp)
    6c10:	dc000017 	ldw	r16,0(sp)
    6c14:	dec00704 	addi	sp,sp,28
    6c18:	f800283a 	ret
    6c1c:	21400017 	ldw	r5,0(r4)
    6c20:	18c00104 	addi	r3,r3,4
    6c24:	21000104 	addi	r4,r4,4
    6c28:	197fff15 	stw	r5,-4(r3)
    6c2c:	223ffb36 	bltu	r4,r8,6c1c <__alt_data_end+0xfffe781c>
    6c30:	003fe606 	br	6bcc <__alt_data_end+0xfffe77cc>
    6c34:	9c000084 	addi	r16,r19,2
    6c38:	003fe406 	br	6bcc <__alt_data_end+0xfffe77cc>

00006c3c <__mcmp>:
    6c3c:	20800417 	ldw	r2,16(r4)
    6c40:	28c00417 	ldw	r3,16(r5)
    6c44:	10c5c83a 	sub	r2,r2,r3
    6c48:	1000111e 	bne	r2,zero,6c90 <__mcmp+0x54>
    6c4c:	18c7883a 	add	r3,r3,r3
    6c50:	18c7883a 	add	r3,r3,r3
    6c54:	21000504 	addi	r4,r4,20
    6c58:	29400504 	addi	r5,r5,20
    6c5c:	20c5883a 	add	r2,r4,r3
    6c60:	28cb883a 	add	r5,r5,r3
    6c64:	00000106 	br	6c6c <__mcmp+0x30>
    6c68:	20800a2e 	bgeu	r4,r2,6c94 <__mcmp+0x58>
    6c6c:	10bfff04 	addi	r2,r2,-4
    6c70:	297fff04 	addi	r5,r5,-4
    6c74:	11800017 	ldw	r6,0(r2)
    6c78:	28c00017 	ldw	r3,0(r5)
    6c7c:	30fffa26 	beq	r6,r3,6c68 <__alt_data_end+0xfffe7868>
    6c80:	30c00236 	bltu	r6,r3,6c8c <__mcmp+0x50>
    6c84:	00800044 	movi	r2,1
    6c88:	f800283a 	ret
    6c8c:	00bfffc4 	movi	r2,-1
    6c90:	f800283a 	ret
    6c94:	0005883a 	mov	r2,zero
    6c98:	f800283a 	ret

00006c9c <__mdiff>:
    6c9c:	28c00417 	ldw	r3,16(r5)
    6ca0:	30800417 	ldw	r2,16(r6)
    6ca4:	defffa04 	addi	sp,sp,-24
    6ca8:	dcc00315 	stw	r19,12(sp)
    6cac:	dc800215 	stw	r18,8(sp)
    6cb0:	dfc00515 	stw	ra,20(sp)
    6cb4:	dd000415 	stw	r20,16(sp)
    6cb8:	dc400115 	stw	r17,4(sp)
    6cbc:	dc000015 	stw	r16,0(sp)
    6cc0:	1887c83a 	sub	r3,r3,r2
    6cc4:	2825883a 	mov	r18,r5
    6cc8:	3027883a 	mov	r19,r6
    6ccc:	1800141e 	bne	r3,zero,6d20 <__mdiff+0x84>
    6cd0:	1085883a 	add	r2,r2,r2
    6cd4:	1085883a 	add	r2,r2,r2
    6cd8:	2a000504 	addi	r8,r5,20
    6cdc:	34000504 	addi	r16,r6,20
    6ce0:	4087883a 	add	r3,r8,r2
    6ce4:	8085883a 	add	r2,r16,r2
    6ce8:	00000106 	br	6cf0 <__mdiff+0x54>
    6cec:	40c0592e 	bgeu	r8,r3,6e54 <__mdiff+0x1b8>
    6cf0:	18ffff04 	addi	r3,r3,-4
    6cf4:	10bfff04 	addi	r2,r2,-4
    6cf8:	19c00017 	ldw	r7,0(r3)
    6cfc:	11400017 	ldw	r5,0(r2)
    6d00:	397ffa26 	beq	r7,r5,6cec <__alt_data_end+0xfffe78ec>
    6d04:	3940592e 	bgeu	r7,r5,6e6c <__mdiff+0x1d0>
    6d08:	9005883a 	mov	r2,r18
    6d0c:	4023883a 	mov	r17,r8
    6d10:	9825883a 	mov	r18,r19
    6d14:	05000044 	movi	r20,1
    6d18:	1027883a 	mov	r19,r2
    6d1c:	00000406 	br	6d30 <__mdiff+0x94>
    6d20:	18005616 	blt	r3,zero,6e7c <__mdiff+0x1e0>
    6d24:	34400504 	addi	r17,r6,20
    6d28:	2c000504 	addi	r16,r5,20
    6d2c:	0029883a 	mov	r20,zero
    6d30:	91400117 	ldw	r5,4(r18)
    6d34:	00062b80 	call	62b8 <_Balloc>
    6d38:	92400417 	ldw	r9,16(r18)
    6d3c:	9b000417 	ldw	r12,16(r19)
    6d40:	12c00504 	addi	r11,r2,20
    6d44:	4a51883a 	add	r8,r9,r9
    6d48:	6319883a 	add	r12,r12,r12
    6d4c:	4211883a 	add	r8,r8,r8
    6d50:	6319883a 	add	r12,r12,r12
    6d54:	15000315 	stw	r20,12(r2)
    6d58:	8211883a 	add	r8,r16,r8
    6d5c:	8b19883a 	add	r12,r17,r12
    6d60:	0007883a 	mov	r3,zero
    6d64:	81400017 	ldw	r5,0(r16)
    6d68:	89c00017 	ldw	r7,0(r17)
    6d6c:	59800104 	addi	r6,r11,4
    6d70:	293fffcc 	andi	r4,r5,65535
    6d74:	20c7883a 	add	r3,r4,r3
    6d78:	393fffcc 	andi	r4,r7,65535
    6d7c:	1909c83a 	sub	r4,r3,r4
    6d80:	280ad43a 	srli	r5,r5,16
    6d84:	380ed43a 	srli	r7,r7,16
    6d88:	2007d43a 	srai	r3,r4,16
    6d8c:	213fffcc 	andi	r4,r4,65535
    6d90:	29cbc83a 	sub	r5,r5,r7
    6d94:	28c7883a 	add	r3,r5,r3
    6d98:	180a943a 	slli	r5,r3,16
    6d9c:	8c400104 	addi	r17,r17,4
    6da0:	84000104 	addi	r16,r16,4
    6da4:	2908b03a 	or	r4,r5,r4
    6da8:	59000015 	stw	r4,0(r11)
    6dac:	1807d43a 	srai	r3,r3,16
    6db0:	3015883a 	mov	r10,r6
    6db4:	3017883a 	mov	r11,r6
    6db8:	8b3fea36 	bltu	r17,r12,6d64 <__alt_data_end+0xfffe7964>
    6dbc:	8200162e 	bgeu	r16,r8,6e18 <__mdiff+0x17c>
    6dc0:	8017883a 	mov	r11,r16
    6dc4:	59400017 	ldw	r5,0(r11)
    6dc8:	31800104 	addi	r6,r6,4
    6dcc:	5ac00104 	addi	r11,r11,4
    6dd0:	293fffcc 	andi	r4,r5,65535
    6dd4:	20c7883a 	add	r3,r4,r3
    6dd8:	280ed43a 	srli	r7,r5,16
    6ddc:	180bd43a 	srai	r5,r3,16
    6de0:	193fffcc 	andi	r4,r3,65535
    6de4:	3947883a 	add	r3,r7,r5
    6de8:	180a943a 	slli	r5,r3,16
    6dec:	1807d43a 	srai	r3,r3,16
    6df0:	2908b03a 	or	r4,r5,r4
    6df4:	313fff15 	stw	r4,-4(r6)
    6df8:	5a3ff236 	bltu	r11,r8,6dc4 <__alt_data_end+0xfffe79c4>
    6dfc:	0406303a 	nor	r3,zero,r16
    6e00:	1a07883a 	add	r3,r3,r8
    6e04:	1806d0ba 	srli	r3,r3,2
    6e08:	18c00044 	addi	r3,r3,1
    6e0c:	18c7883a 	add	r3,r3,r3
    6e10:	18c7883a 	add	r3,r3,r3
    6e14:	50d5883a 	add	r10,r10,r3
    6e18:	50ffff04 	addi	r3,r10,-4
    6e1c:	2000041e 	bne	r4,zero,6e30 <__mdiff+0x194>
    6e20:	18ffff04 	addi	r3,r3,-4
    6e24:	19000017 	ldw	r4,0(r3)
    6e28:	4a7fffc4 	addi	r9,r9,-1
    6e2c:	203ffc26 	beq	r4,zero,6e20 <__alt_data_end+0xfffe7a20>
    6e30:	12400415 	stw	r9,16(r2)
    6e34:	dfc00517 	ldw	ra,20(sp)
    6e38:	dd000417 	ldw	r20,16(sp)
    6e3c:	dcc00317 	ldw	r19,12(sp)
    6e40:	dc800217 	ldw	r18,8(sp)
    6e44:	dc400117 	ldw	r17,4(sp)
    6e48:	dc000017 	ldw	r16,0(sp)
    6e4c:	dec00604 	addi	sp,sp,24
    6e50:	f800283a 	ret
    6e54:	000b883a 	mov	r5,zero
    6e58:	00062b80 	call	62b8 <_Balloc>
    6e5c:	00c00044 	movi	r3,1
    6e60:	10c00415 	stw	r3,16(r2)
    6e64:	10000515 	stw	zero,20(r2)
    6e68:	003ff206 	br	6e34 <__alt_data_end+0xfffe7a34>
    6e6c:	8023883a 	mov	r17,r16
    6e70:	0029883a 	mov	r20,zero
    6e74:	4021883a 	mov	r16,r8
    6e78:	003fad06 	br	6d30 <__alt_data_end+0xfffe7930>
    6e7c:	9005883a 	mov	r2,r18
    6e80:	94400504 	addi	r17,r18,20
    6e84:	9c000504 	addi	r16,r19,20
    6e88:	9825883a 	mov	r18,r19
    6e8c:	05000044 	movi	r20,1
    6e90:	1027883a 	mov	r19,r2
    6e94:	003fa606 	br	6d30 <__alt_data_end+0xfffe7930>

00006e98 <__ulp>:
    6e98:	295ffc2c 	andhi	r5,r5,32752
    6e9c:	00bf3034 	movhi	r2,64704
    6ea0:	2887883a 	add	r3,r5,r2
    6ea4:	00c0020e 	bge	zero,r3,6eb0 <__ulp+0x18>
    6ea8:	0005883a 	mov	r2,zero
    6eac:	f800283a 	ret
    6eb0:	00c7c83a 	sub	r3,zero,r3
    6eb4:	1807d53a 	srai	r3,r3,20
    6eb8:	008004c4 	movi	r2,19
    6ebc:	10c00b0e 	bge	r2,r3,6eec <__ulp+0x54>
    6ec0:	18bffb04 	addi	r2,r3,-20
    6ec4:	01000784 	movi	r4,30
    6ec8:	0007883a 	mov	r3,zero
    6ecc:	20800516 	blt	r4,r2,6ee4 <__ulp+0x4c>
    6ed0:	010007c4 	movi	r4,31
    6ed4:	2089c83a 	sub	r4,r4,r2
    6ed8:	00800044 	movi	r2,1
    6edc:	1104983a 	sll	r2,r2,r4
    6ee0:	f800283a 	ret
    6ee4:	00800044 	movi	r2,1
    6ee8:	f800283a 	ret
    6eec:	01400234 	movhi	r5,8
    6ef0:	28c7d83a 	sra	r3,r5,r3
    6ef4:	0005883a 	mov	r2,zero
    6ef8:	f800283a 	ret

00006efc <__b2d>:
    6efc:	defffa04 	addi	sp,sp,-24
    6f00:	dc000015 	stw	r16,0(sp)
    6f04:	24000417 	ldw	r16,16(r4)
    6f08:	dc400115 	stw	r17,4(sp)
    6f0c:	24400504 	addi	r17,r4,20
    6f10:	8421883a 	add	r16,r16,r16
    6f14:	8421883a 	add	r16,r16,r16
    6f18:	8c21883a 	add	r16,r17,r16
    6f1c:	dc800215 	stw	r18,8(sp)
    6f20:	84bfff17 	ldw	r18,-4(r16)
    6f24:	dd000415 	stw	r20,16(sp)
    6f28:	dcc00315 	stw	r19,12(sp)
    6f2c:	9009883a 	mov	r4,r18
    6f30:	2829883a 	mov	r20,r5
    6f34:	dfc00515 	stw	ra,20(sp)
    6f38:	00065d40 	call	65d4 <__hi0bits>
    6f3c:	00c00804 	movi	r3,32
    6f40:	1889c83a 	sub	r4,r3,r2
    6f44:	a1000015 	stw	r4,0(r20)
    6f48:	01000284 	movi	r4,10
    6f4c:	84ffff04 	addi	r19,r16,-4
    6f50:	20801216 	blt	r4,r2,6f9c <__b2d+0xa0>
    6f54:	018002c4 	movi	r6,11
    6f58:	308dc83a 	sub	r6,r6,r2
    6f5c:	9186d83a 	srl	r3,r18,r6
    6f60:	18cffc34 	orhi	r3,r3,16368
    6f64:	8cc0212e 	bgeu	r17,r19,6fec <__b2d+0xf0>
    6f68:	813ffe17 	ldw	r4,-8(r16)
    6f6c:	218cd83a 	srl	r6,r4,r6
    6f70:	10800544 	addi	r2,r2,21
    6f74:	9084983a 	sll	r2,r18,r2
    6f78:	1184b03a 	or	r2,r2,r6
    6f7c:	dfc00517 	ldw	ra,20(sp)
    6f80:	dd000417 	ldw	r20,16(sp)
    6f84:	dcc00317 	ldw	r19,12(sp)
    6f88:	dc800217 	ldw	r18,8(sp)
    6f8c:	dc400117 	ldw	r17,4(sp)
    6f90:	dc000017 	ldw	r16,0(sp)
    6f94:	dec00604 	addi	sp,sp,24
    6f98:	f800283a 	ret
    6f9c:	8cc00f2e 	bgeu	r17,r19,6fdc <__b2d+0xe0>
    6fa0:	117ffd44 	addi	r5,r2,-11
    6fa4:	80bffe17 	ldw	r2,-8(r16)
    6fa8:	28000e26 	beq	r5,zero,6fe4 <__b2d+0xe8>
    6fac:	1949c83a 	sub	r4,r3,r5
    6fb0:	9164983a 	sll	r18,r18,r5
    6fb4:	1106d83a 	srl	r3,r2,r4
    6fb8:	81bffe04 	addi	r6,r16,-8
    6fbc:	948ffc34 	orhi	r18,r18,16368
    6fc0:	90c6b03a 	or	r3,r18,r3
    6fc4:	89800e2e 	bgeu	r17,r6,7000 <__b2d+0x104>
    6fc8:	81bffd17 	ldw	r6,-12(r16)
    6fcc:	1144983a 	sll	r2,r2,r5
    6fd0:	310ad83a 	srl	r5,r6,r4
    6fd4:	2884b03a 	or	r2,r5,r2
    6fd8:	003fe806 	br	6f7c <__alt_data_end+0xfffe7b7c>
    6fdc:	10bffd44 	addi	r2,r2,-11
    6fe0:	1000041e 	bne	r2,zero,6ff4 <__b2d+0xf8>
    6fe4:	90cffc34 	orhi	r3,r18,16368
    6fe8:	003fe406 	br	6f7c <__alt_data_end+0xfffe7b7c>
    6fec:	000d883a 	mov	r6,zero
    6ff0:	003fdf06 	br	6f70 <__alt_data_end+0xfffe7b70>
    6ff4:	90a4983a 	sll	r18,r18,r2
    6ff8:	0005883a 	mov	r2,zero
    6ffc:	003ff906 	br	6fe4 <__alt_data_end+0xfffe7be4>
    7000:	1144983a 	sll	r2,r2,r5
    7004:	003fdd06 	br	6f7c <__alt_data_end+0xfffe7b7c>

00007008 <__d2b>:
    7008:	defff804 	addi	sp,sp,-32
    700c:	dc000215 	stw	r16,8(sp)
    7010:	3021883a 	mov	r16,r6
    7014:	dc400315 	stw	r17,12(sp)
    7018:	8022907a 	slli	r17,r16,1
    701c:	dd000615 	stw	r20,24(sp)
    7020:	2829883a 	mov	r20,r5
    7024:	01400044 	movi	r5,1
    7028:	dcc00515 	stw	r19,20(sp)
    702c:	dc800415 	stw	r18,16(sp)
    7030:	dfc00715 	stw	ra,28(sp)
    7034:	3825883a 	mov	r18,r7
    7038:	8822d57a 	srli	r17,r17,21
    703c:	00062b80 	call	62b8 <_Balloc>
    7040:	1027883a 	mov	r19,r2
    7044:	00800434 	movhi	r2,16
    7048:	10bfffc4 	addi	r2,r2,-1
    704c:	808c703a 	and	r6,r16,r2
    7050:	88000126 	beq	r17,zero,7058 <__d2b+0x50>
    7054:	31800434 	orhi	r6,r6,16
    7058:	d9800015 	stw	r6,0(sp)
    705c:	a0002426 	beq	r20,zero,70f0 <__d2b+0xe8>
    7060:	d9000104 	addi	r4,sp,4
    7064:	dd000115 	stw	r20,4(sp)
    7068:	000663c0 	call	663c <__lo0bits>
    706c:	d8c00017 	ldw	r3,0(sp)
    7070:	10002f1e 	bne	r2,zero,7130 <__d2b+0x128>
    7074:	d9000117 	ldw	r4,4(sp)
    7078:	99000515 	stw	r4,20(r19)
    707c:	1821003a 	cmpeq	r16,r3,zero
    7080:	01000084 	movi	r4,2
    7084:	2421c83a 	sub	r16,r4,r16
    7088:	98c00615 	stw	r3,24(r19)
    708c:	9c000415 	stw	r16,16(r19)
    7090:	88001f1e 	bne	r17,zero,7110 <__d2b+0x108>
    7094:	10bef384 	addi	r2,r2,-1074
    7098:	90800015 	stw	r2,0(r18)
    709c:	00900034 	movhi	r2,16384
    70a0:	10bfffc4 	addi	r2,r2,-1
    70a4:	8085883a 	add	r2,r16,r2
    70a8:	1085883a 	add	r2,r2,r2
    70ac:	1085883a 	add	r2,r2,r2
    70b0:	9885883a 	add	r2,r19,r2
    70b4:	11000517 	ldw	r4,20(r2)
    70b8:	8020917a 	slli	r16,r16,5
    70bc:	00065d40 	call	65d4 <__hi0bits>
    70c0:	d8c00817 	ldw	r3,32(sp)
    70c4:	8085c83a 	sub	r2,r16,r2
    70c8:	18800015 	stw	r2,0(r3)
    70cc:	9805883a 	mov	r2,r19
    70d0:	dfc00717 	ldw	ra,28(sp)
    70d4:	dd000617 	ldw	r20,24(sp)
    70d8:	dcc00517 	ldw	r19,20(sp)
    70dc:	dc800417 	ldw	r18,16(sp)
    70e0:	dc400317 	ldw	r17,12(sp)
    70e4:	dc000217 	ldw	r16,8(sp)
    70e8:	dec00804 	addi	sp,sp,32
    70ec:	f800283a 	ret
    70f0:	d809883a 	mov	r4,sp
    70f4:	000663c0 	call	663c <__lo0bits>
    70f8:	d8c00017 	ldw	r3,0(sp)
    70fc:	04000044 	movi	r16,1
    7100:	9c000415 	stw	r16,16(r19)
    7104:	98c00515 	stw	r3,20(r19)
    7108:	10800804 	addi	r2,r2,32
    710c:	883fe126 	beq	r17,zero,7094 <__alt_data_end+0xfffe7c94>
    7110:	00c00d44 	movi	r3,53
    7114:	8c7ef344 	addi	r17,r17,-1075
    7118:	88a3883a 	add	r17,r17,r2
    711c:	1885c83a 	sub	r2,r3,r2
    7120:	d8c00817 	ldw	r3,32(sp)
    7124:	94400015 	stw	r17,0(r18)
    7128:	18800015 	stw	r2,0(r3)
    712c:	003fe706 	br	70cc <__alt_data_end+0xfffe7ccc>
    7130:	01000804 	movi	r4,32
    7134:	2089c83a 	sub	r4,r4,r2
    7138:	1908983a 	sll	r4,r3,r4
    713c:	d9400117 	ldw	r5,4(sp)
    7140:	1886d83a 	srl	r3,r3,r2
    7144:	2148b03a 	or	r4,r4,r5
    7148:	99000515 	stw	r4,20(r19)
    714c:	d8c00015 	stw	r3,0(sp)
    7150:	003fca06 	br	707c <__alt_data_end+0xfffe7c7c>

00007154 <__ratio>:
    7154:	defff904 	addi	sp,sp,-28
    7158:	dc400315 	stw	r17,12(sp)
    715c:	2823883a 	mov	r17,r5
    7160:	d9400104 	addi	r5,sp,4
    7164:	dfc00615 	stw	ra,24(sp)
    7168:	dcc00515 	stw	r19,20(sp)
    716c:	dc800415 	stw	r18,16(sp)
    7170:	2027883a 	mov	r19,r4
    7174:	dc000215 	stw	r16,8(sp)
    7178:	0006efc0 	call	6efc <__b2d>
    717c:	d80b883a 	mov	r5,sp
    7180:	8809883a 	mov	r4,r17
    7184:	1025883a 	mov	r18,r2
    7188:	1821883a 	mov	r16,r3
    718c:	0006efc0 	call	6efc <__b2d>
    7190:	8a000417 	ldw	r8,16(r17)
    7194:	99000417 	ldw	r4,16(r19)
    7198:	d9400117 	ldw	r5,4(sp)
    719c:	2209c83a 	sub	r4,r4,r8
    71a0:	2010917a 	slli	r8,r4,5
    71a4:	d9000017 	ldw	r4,0(sp)
    71a8:	2909c83a 	sub	r4,r5,r4
    71ac:	4109883a 	add	r4,r8,r4
    71b0:	01000e0e 	bge	zero,r4,71ec <__ratio+0x98>
    71b4:	2008953a 	slli	r4,r4,20
    71b8:	2421883a 	add	r16,r4,r16
    71bc:	100d883a 	mov	r6,r2
    71c0:	180f883a 	mov	r7,r3
    71c4:	9009883a 	mov	r4,r18
    71c8:	800b883a 	mov	r5,r16
    71cc:	000b8fc0 	call	b8fc <__divdf3>
    71d0:	dfc00617 	ldw	ra,24(sp)
    71d4:	dcc00517 	ldw	r19,20(sp)
    71d8:	dc800417 	ldw	r18,16(sp)
    71dc:	dc400317 	ldw	r17,12(sp)
    71e0:	dc000217 	ldw	r16,8(sp)
    71e4:	dec00704 	addi	sp,sp,28
    71e8:	f800283a 	ret
    71ec:	2008953a 	slli	r4,r4,20
    71f0:	1907c83a 	sub	r3,r3,r4
    71f4:	003ff106 	br	71bc <__alt_data_end+0xfffe7dbc>

000071f8 <_mprec_log10>:
    71f8:	defffe04 	addi	sp,sp,-8
    71fc:	dc000015 	stw	r16,0(sp)
    7200:	dfc00115 	stw	ra,4(sp)
    7204:	008005c4 	movi	r2,23
    7208:	2021883a 	mov	r16,r4
    720c:	11000d0e 	bge	r2,r4,7244 <_mprec_log10+0x4c>
    7210:	0005883a 	mov	r2,zero
    7214:	00cffc34 	movhi	r3,16368
    7218:	843fffc4 	addi	r16,r16,-1
    721c:	000d883a 	mov	r6,zero
    7220:	01d00934 	movhi	r7,16420
    7224:	1009883a 	mov	r4,r2
    7228:	180b883a 	mov	r5,r3
    722c:	000c5240 	call	c524 <__muldf3>
    7230:	803ff91e 	bne	r16,zero,7218 <__alt_data_end+0xfffe7e18>
    7234:	dfc00117 	ldw	ra,4(sp)
    7238:	dc000017 	ldw	r16,0(sp)
    723c:	dec00204 	addi	sp,sp,8
    7240:	f800283a 	ret
    7244:	202090fa 	slli	r16,r4,3
    7248:	00800074 	movhi	r2,1
    724c:	10805304 	addi	r2,r2,332
    7250:	1421883a 	add	r16,r2,r16
    7254:	80800017 	ldw	r2,0(r16)
    7258:	80c00117 	ldw	r3,4(r16)
    725c:	dfc00117 	ldw	ra,4(sp)
    7260:	dc000017 	ldw	r16,0(sp)
    7264:	dec00204 	addi	sp,sp,8
    7268:	f800283a 	ret

0000726c <__copybits>:
    726c:	297fffc4 	addi	r5,r5,-1
    7270:	280fd17a 	srai	r7,r5,5
    7274:	30c00417 	ldw	r3,16(r6)
    7278:	30800504 	addi	r2,r6,20
    727c:	39c00044 	addi	r7,r7,1
    7280:	18c7883a 	add	r3,r3,r3
    7284:	39cf883a 	add	r7,r7,r7
    7288:	18c7883a 	add	r3,r3,r3
    728c:	39cf883a 	add	r7,r7,r7
    7290:	10c7883a 	add	r3,r2,r3
    7294:	21cf883a 	add	r7,r4,r7
    7298:	10c00d2e 	bgeu	r2,r3,72d0 <__copybits+0x64>
    729c:	200b883a 	mov	r5,r4
    72a0:	12000017 	ldw	r8,0(r2)
    72a4:	29400104 	addi	r5,r5,4
    72a8:	10800104 	addi	r2,r2,4
    72ac:	2a3fff15 	stw	r8,-4(r5)
    72b0:	10fffb36 	bltu	r2,r3,72a0 <__alt_data_end+0xfffe7ea0>
    72b4:	1985c83a 	sub	r2,r3,r6
    72b8:	10bffac4 	addi	r2,r2,-21
    72bc:	1004d0ba 	srli	r2,r2,2
    72c0:	10800044 	addi	r2,r2,1
    72c4:	1085883a 	add	r2,r2,r2
    72c8:	1085883a 	add	r2,r2,r2
    72cc:	2089883a 	add	r4,r4,r2
    72d0:	21c0032e 	bgeu	r4,r7,72e0 <__copybits+0x74>
    72d4:	20000015 	stw	zero,0(r4)
    72d8:	21000104 	addi	r4,r4,4
    72dc:	21fffd36 	bltu	r4,r7,72d4 <__alt_data_end+0xfffe7ed4>
    72e0:	f800283a 	ret

000072e4 <__any_on>:
    72e4:	20c00417 	ldw	r3,16(r4)
    72e8:	2805d17a 	srai	r2,r5,5
    72ec:	21000504 	addi	r4,r4,20
    72f0:	18800d0e 	bge	r3,r2,7328 <__any_on+0x44>
    72f4:	18c7883a 	add	r3,r3,r3
    72f8:	18c7883a 	add	r3,r3,r3
    72fc:	20c7883a 	add	r3,r4,r3
    7300:	20c0192e 	bgeu	r4,r3,7368 <__any_on+0x84>
    7304:	18bfff17 	ldw	r2,-4(r3)
    7308:	18ffff04 	addi	r3,r3,-4
    730c:	1000041e 	bne	r2,zero,7320 <__any_on+0x3c>
    7310:	20c0142e 	bgeu	r4,r3,7364 <__any_on+0x80>
    7314:	18ffff04 	addi	r3,r3,-4
    7318:	19400017 	ldw	r5,0(r3)
    731c:	283ffc26 	beq	r5,zero,7310 <__alt_data_end+0xfffe7f10>
    7320:	00800044 	movi	r2,1
    7324:	f800283a 	ret
    7328:	10c00a0e 	bge	r2,r3,7354 <__any_on+0x70>
    732c:	1085883a 	add	r2,r2,r2
    7330:	1085883a 	add	r2,r2,r2
    7334:	294007cc 	andi	r5,r5,31
    7338:	2087883a 	add	r3,r4,r2
    733c:	283ff026 	beq	r5,zero,7300 <__alt_data_end+0xfffe7f00>
    7340:	19800017 	ldw	r6,0(r3)
    7344:	3144d83a 	srl	r2,r6,r5
    7348:	114a983a 	sll	r5,r2,r5
    734c:	317ff41e 	bne	r6,r5,7320 <__alt_data_end+0xfffe7f20>
    7350:	003feb06 	br	7300 <__alt_data_end+0xfffe7f00>
    7354:	1085883a 	add	r2,r2,r2
    7358:	1085883a 	add	r2,r2,r2
    735c:	2087883a 	add	r3,r4,r2
    7360:	003fe706 	br	7300 <__alt_data_end+0xfffe7f00>
    7364:	f800283a 	ret
    7368:	0005883a 	mov	r2,zero
    736c:	f800283a 	ret

00007370 <__fpclassifyd>:
    7370:	00a00034 	movhi	r2,32768
    7374:	10bfffc4 	addi	r2,r2,-1
    7378:	2884703a 	and	r2,r5,r2
    737c:	10000726 	beq	r2,zero,739c <__fpclassifyd+0x2c>
    7380:	00fffc34 	movhi	r3,65520
    7384:	019ff834 	movhi	r6,32736
    7388:	28c7883a 	add	r3,r5,r3
    738c:	31bfffc4 	addi	r6,r6,-1
    7390:	30c00536 	bltu	r6,r3,73a8 <__fpclassifyd+0x38>
    7394:	00800104 	movi	r2,4
    7398:	f800283a 	ret
    739c:	2000021e 	bne	r4,zero,73a8 <__fpclassifyd+0x38>
    73a0:	00800084 	movi	r2,2
    73a4:	f800283a 	ret
    73a8:	00dffc34 	movhi	r3,32752
    73ac:	019ff834 	movhi	r6,32736
    73b0:	28cb883a 	add	r5,r5,r3
    73b4:	31bfffc4 	addi	r6,r6,-1
    73b8:	317ff62e 	bgeu	r6,r5,7394 <__alt_data_end+0xfffe7f94>
    73bc:	01400434 	movhi	r5,16
    73c0:	297fffc4 	addi	r5,r5,-1
    73c4:	28800236 	bltu	r5,r2,73d0 <__fpclassifyd+0x60>
    73c8:	008000c4 	movi	r2,3
    73cc:	f800283a 	ret
    73d0:	10c00226 	beq	r2,r3,73dc <__fpclassifyd+0x6c>
    73d4:	0005883a 	mov	r2,zero
    73d8:	f800283a 	ret
    73dc:	2005003a 	cmpeq	r2,r4,zero
    73e0:	f800283a 	ret

000073e4 <_sbrk_r>:
    73e4:	defffd04 	addi	sp,sp,-12
    73e8:	dc000015 	stw	r16,0(sp)
    73ec:	04000074 	movhi	r16,1
    73f0:	dc400115 	stw	r17,4(sp)
    73f4:	840e5d04 	addi	r16,r16,14708
    73f8:	2023883a 	mov	r17,r4
    73fc:	2809883a 	mov	r4,r5
    7400:	dfc00215 	stw	ra,8(sp)
    7404:	80000015 	stw	zero,0(r16)
    7408:	000e33c0 	call	e33c <sbrk>
    740c:	00ffffc4 	movi	r3,-1
    7410:	10c00526 	beq	r2,r3,7428 <_sbrk_r+0x44>
    7414:	dfc00217 	ldw	ra,8(sp)
    7418:	dc400117 	ldw	r17,4(sp)
    741c:	dc000017 	ldw	r16,0(sp)
    7420:	dec00304 	addi	sp,sp,12
    7424:	f800283a 	ret
    7428:	80c00017 	ldw	r3,0(r16)
    742c:	183ff926 	beq	r3,zero,7414 <__alt_data_end+0xfffe8014>
    7430:	88c00015 	stw	r3,0(r17)
    7434:	003ff706 	br	7414 <__alt_data_end+0xfffe8014>

00007438 <__sread>:
    7438:	defffe04 	addi	sp,sp,-8
    743c:	dc000015 	stw	r16,0(sp)
    7440:	2821883a 	mov	r16,r5
    7444:	2940038f 	ldh	r5,14(r5)
    7448:	dfc00115 	stw	ra,4(sp)
    744c:	00099b00 	call	99b0 <_read_r>
    7450:	10000716 	blt	r2,zero,7470 <__sread+0x38>
    7454:	80c01417 	ldw	r3,80(r16)
    7458:	1887883a 	add	r3,r3,r2
    745c:	80c01415 	stw	r3,80(r16)
    7460:	dfc00117 	ldw	ra,4(sp)
    7464:	dc000017 	ldw	r16,0(sp)
    7468:	dec00204 	addi	sp,sp,8
    746c:	f800283a 	ret
    7470:	80c0030b 	ldhu	r3,12(r16)
    7474:	18fbffcc 	andi	r3,r3,61439
    7478:	80c0030d 	sth	r3,12(r16)
    747c:	dfc00117 	ldw	ra,4(sp)
    7480:	dc000017 	ldw	r16,0(sp)
    7484:	dec00204 	addi	sp,sp,8
    7488:	f800283a 	ret

0000748c <__seofread>:
    748c:	0005883a 	mov	r2,zero
    7490:	f800283a 	ret

00007494 <__swrite>:
    7494:	2880030b 	ldhu	r2,12(r5)
    7498:	defffb04 	addi	sp,sp,-20
    749c:	dcc00315 	stw	r19,12(sp)
    74a0:	dc800215 	stw	r18,8(sp)
    74a4:	dc400115 	stw	r17,4(sp)
    74a8:	dc000015 	stw	r16,0(sp)
    74ac:	dfc00415 	stw	ra,16(sp)
    74b0:	10c0400c 	andi	r3,r2,256
    74b4:	2821883a 	mov	r16,r5
    74b8:	2023883a 	mov	r17,r4
    74bc:	3025883a 	mov	r18,r6
    74c0:	3827883a 	mov	r19,r7
    74c4:	18000526 	beq	r3,zero,74dc <__swrite+0x48>
    74c8:	2940038f 	ldh	r5,14(r5)
    74cc:	01c00084 	movi	r7,2
    74d0:	000d883a 	mov	r6,zero
    74d4:	00097f40 	call	97f4 <_lseek_r>
    74d8:	8080030b 	ldhu	r2,12(r16)
    74dc:	8140038f 	ldh	r5,14(r16)
    74e0:	10bbffcc 	andi	r2,r2,61439
    74e4:	980f883a 	mov	r7,r19
    74e8:	900d883a 	mov	r6,r18
    74ec:	8809883a 	mov	r4,r17
    74f0:	8080030d 	sth	r2,12(r16)
    74f4:	dfc00417 	ldw	ra,16(sp)
    74f8:	dcc00317 	ldw	r19,12(sp)
    74fc:	dc800217 	ldw	r18,8(sp)
    7500:	dc400117 	ldw	r17,4(sp)
    7504:	dc000017 	ldw	r16,0(sp)
    7508:	dec00504 	addi	sp,sp,20
    750c:	0008de01 	jmpi	8de0 <_write_r>

00007510 <__sseek>:
    7510:	defffe04 	addi	sp,sp,-8
    7514:	dc000015 	stw	r16,0(sp)
    7518:	2821883a 	mov	r16,r5
    751c:	2940038f 	ldh	r5,14(r5)
    7520:	dfc00115 	stw	ra,4(sp)
    7524:	00097f40 	call	97f4 <_lseek_r>
    7528:	00ffffc4 	movi	r3,-1
    752c:	10c00826 	beq	r2,r3,7550 <__sseek+0x40>
    7530:	80c0030b 	ldhu	r3,12(r16)
    7534:	80801415 	stw	r2,80(r16)
    7538:	18c40014 	ori	r3,r3,4096
    753c:	80c0030d 	sth	r3,12(r16)
    7540:	dfc00117 	ldw	ra,4(sp)
    7544:	dc000017 	ldw	r16,0(sp)
    7548:	dec00204 	addi	sp,sp,8
    754c:	f800283a 	ret
    7550:	80c0030b 	ldhu	r3,12(r16)
    7554:	18fbffcc 	andi	r3,r3,61439
    7558:	80c0030d 	sth	r3,12(r16)
    755c:	dfc00117 	ldw	ra,4(sp)
    7560:	dc000017 	ldw	r16,0(sp)
    7564:	dec00204 	addi	sp,sp,8
    7568:	f800283a 	ret

0000756c <__sclose>:
    756c:	2940038f 	ldh	r5,14(r5)
    7570:	0008e401 	jmpi	8e40 <_close_r>

00007574 <strcmp>:
    7574:	2144b03a 	or	r2,r4,r5
    7578:	108000cc 	andi	r2,r2,3
    757c:	1000171e 	bne	r2,zero,75dc <strcmp+0x68>
    7580:	20800017 	ldw	r2,0(r4)
    7584:	28c00017 	ldw	r3,0(r5)
    7588:	10c0141e 	bne	r2,r3,75dc <strcmp+0x68>
    758c:	027fbff4 	movhi	r9,65279
    7590:	4a7fbfc4 	addi	r9,r9,-257
    7594:	0086303a 	nor	r3,zero,r2
    7598:	02202074 	movhi	r8,32897
    759c:	1245883a 	add	r2,r2,r9
    75a0:	42202004 	addi	r8,r8,-32640
    75a4:	10c4703a 	and	r2,r2,r3
    75a8:	1204703a 	and	r2,r2,r8
    75ac:	10000226 	beq	r2,zero,75b8 <strcmp+0x44>
    75b0:	00002306 	br	7640 <strcmp+0xcc>
    75b4:	1000221e 	bne	r2,zero,7640 <strcmp+0xcc>
    75b8:	21000104 	addi	r4,r4,4
    75bc:	20c00017 	ldw	r3,0(r4)
    75c0:	29400104 	addi	r5,r5,4
    75c4:	29800017 	ldw	r6,0(r5)
    75c8:	1a4f883a 	add	r7,r3,r9
    75cc:	00c4303a 	nor	r2,zero,r3
    75d0:	3884703a 	and	r2,r7,r2
    75d4:	1204703a 	and	r2,r2,r8
    75d8:	19bff626 	beq	r3,r6,75b4 <__alt_data_end+0xfffe81b4>
    75dc:	20800003 	ldbu	r2,0(r4)
    75e0:	10c03fcc 	andi	r3,r2,255
    75e4:	18c0201c 	xori	r3,r3,128
    75e8:	18ffe004 	addi	r3,r3,-128
    75ec:	18000c26 	beq	r3,zero,7620 <strcmp+0xac>
    75f0:	29800007 	ldb	r6,0(r5)
    75f4:	19800326 	beq	r3,r6,7604 <strcmp+0x90>
    75f8:	00001306 	br	7648 <strcmp+0xd4>
    75fc:	29800007 	ldb	r6,0(r5)
    7600:	11800b1e 	bne	r2,r6,7630 <strcmp+0xbc>
    7604:	21000044 	addi	r4,r4,1
    7608:	20c00003 	ldbu	r3,0(r4)
    760c:	29400044 	addi	r5,r5,1
    7610:	18803fcc 	andi	r2,r3,255
    7614:	1080201c 	xori	r2,r2,128
    7618:	10bfe004 	addi	r2,r2,-128
    761c:	103ff71e 	bne	r2,zero,75fc <__alt_data_end+0xfffe81fc>
    7620:	0007883a 	mov	r3,zero
    7624:	28800003 	ldbu	r2,0(r5)
    7628:	1885c83a 	sub	r2,r3,r2
    762c:	f800283a 	ret
    7630:	28800003 	ldbu	r2,0(r5)
    7634:	18c03fcc 	andi	r3,r3,255
    7638:	1885c83a 	sub	r2,r3,r2
    763c:	f800283a 	ret
    7640:	0005883a 	mov	r2,zero
    7644:	f800283a 	ret
    7648:	10c03fcc 	andi	r3,r2,255
    764c:	003ff506 	br	7624 <__alt_data_end+0xfffe8224>

00007650 <strlen>:
    7650:	208000cc 	andi	r2,r4,3
    7654:	10002026 	beq	r2,zero,76d8 <strlen+0x88>
    7658:	20800007 	ldb	r2,0(r4)
    765c:	10002026 	beq	r2,zero,76e0 <strlen+0x90>
    7660:	2005883a 	mov	r2,r4
    7664:	00000206 	br	7670 <strlen+0x20>
    7668:	10c00007 	ldb	r3,0(r2)
    766c:	18001826 	beq	r3,zero,76d0 <strlen+0x80>
    7670:	10800044 	addi	r2,r2,1
    7674:	10c000cc 	andi	r3,r2,3
    7678:	183ffb1e 	bne	r3,zero,7668 <__alt_data_end+0xfffe8268>
    767c:	10c00017 	ldw	r3,0(r2)
    7680:	01ffbff4 	movhi	r7,65279
    7684:	39ffbfc4 	addi	r7,r7,-257
    7688:	00ca303a 	nor	r5,zero,r3
    768c:	01a02074 	movhi	r6,32897
    7690:	19c7883a 	add	r3,r3,r7
    7694:	31a02004 	addi	r6,r6,-32640
    7698:	1946703a 	and	r3,r3,r5
    769c:	1986703a 	and	r3,r3,r6
    76a0:	1800091e 	bne	r3,zero,76c8 <strlen+0x78>
    76a4:	10800104 	addi	r2,r2,4
    76a8:	10c00017 	ldw	r3,0(r2)
    76ac:	19cb883a 	add	r5,r3,r7
    76b0:	00c6303a 	nor	r3,zero,r3
    76b4:	28c6703a 	and	r3,r5,r3
    76b8:	1986703a 	and	r3,r3,r6
    76bc:	183ff926 	beq	r3,zero,76a4 <__alt_data_end+0xfffe82a4>
    76c0:	00000106 	br	76c8 <strlen+0x78>
    76c4:	10800044 	addi	r2,r2,1
    76c8:	10c00007 	ldb	r3,0(r2)
    76cc:	183ffd1e 	bne	r3,zero,76c4 <__alt_data_end+0xfffe82c4>
    76d0:	1105c83a 	sub	r2,r2,r4
    76d4:	f800283a 	ret
    76d8:	2005883a 	mov	r2,r4
    76dc:	003fe706 	br	767c <__alt_data_end+0xfffe827c>
    76e0:	0005883a 	mov	r2,zero
    76e4:	f800283a 	ret

000076e8 <__sprint_r.part.0>:
    76e8:	28801917 	ldw	r2,100(r5)
    76ec:	defff604 	addi	sp,sp,-40
    76f0:	dd400515 	stw	r21,20(sp)
    76f4:	dfc00915 	stw	ra,36(sp)
    76f8:	df000815 	stw	fp,32(sp)
    76fc:	ddc00715 	stw	r23,28(sp)
    7700:	dd800615 	stw	r22,24(sp)
    7704:	dd000415 	stw	r20,16(sp)
    7708:	dcc00315 	stw	r19,12(sp)
    770c:	dc800215 	stw	r18,8(sp)
    7710:	dc400115 	stw	r17,4(sp)
    7714:	dc000015 	stw	r16,0(sp)
    7718:	1088000c 	andi	r2,r2,8192
    771c:	302b883a 	mov	r21,r6
    7720:	10002e26 	beq	r2,zero,77dc <__sprint_r.part.0+0xf4>
    7724:	30800217 	ldw	r2,8(r6)
    7728:	35800017 	ldw	r22,0(r6)
    772c:	10002926 	beq	r2,zero,77d4 <__sprint_r.part.0+0xec>
    7730:	2827883a 	mov	r19,r5
    7734:	2029883a 	mov	r20,r4
    7738:	b5c00104 	addi	r23,r22,4
    773c:	04bfffc4 	movi	r18,-1
    7740:	bc400017 	ldw	r17,0(r23)
    7744:	b4000017 	ldw	r16,0(r22)
    7748:	0039883a 	mov	fp,zero
    774c:	8822d0ba 	srli	r17,r17,2
    7750:	8800031e 	bne	r17,zero,7760 <__sprint_r.part.0+0x78>
    7754:	00001806 	br	77b8 <__sprint_r.part.0+0xd0>
    7758:	84000104 	addi	r16,r16,4
    775c:	8f001526 	beq	r17,fp,77b4 <__sprint_r.part.0+0xcc>
    7760:	81400017 	ldw	r5,0(r16)
    7764:	980d883a 	mov	r6,r19
    7768:	a009883a 	mov	r4,r20
    776c:	00091d80 	call	91d8 <_fputwc_r>
    7770:	e7000044 	addi	fp,fp,1
    7774:	14bff81e 	bne	r2,r18,7758 <__alt_data_end+0xfffe8358>
    7778:	9005883a 	mov	r2,r18
    777c:	a8000215 	stw	zero,8(r21)
    7780:	a8000115 	stw	zero,4(r21)
    7784:	dfc00917 	ldw	ra,36(sp)
    7788:	df000817 	ldw	fp,32(sp)
    778c:	ddc00717 	ldw	r23,28(sp)
    7790:	dd800617 	ldw	r22,24(sp)
    7794:	dd400517 	ldw	r21,20(sp)
    7798:	dd000417 	ldw	r20,16(sp)
    779c:	dcc00317 	ldw	r19,12(sp)
    77a0:	dc800217 	ldw	r18,8(sp)
    77a4:	dc400117 	ldw	r17,4(sp)
    77a8:	dc000017 	ldw	r16,0(sp)
    77ac:	dec00a04 	addi	sp,sp,40
    77b0:	f800283a 	ret
    77b4:	a8800217 	ldw	r2,8(r21)
    77b8:	8c63883a 	add	r17,r17,r17
    77bc:	8c63883a 	add	r17,r17,r17
    77c0:	1445c83a 	sub	r2,r2,r17
    77c4:	a8800215 	stw	r2,8(r21)
    77c8:	b5800204 	addi	r22,r22,8
    77cc:	bdc00204 	addi	r23,r23,8
    77d0:	103fdb1e 	bne	r2,zero,7740 <__alt_data_end+0xfffe8340>
    77d4:	0005883a 	mov	r2,zero
    77d8:	003fe806 	br	777c <__alt_data_end+0xfffe837c>
    77dc:	00092d80 	call	92d8 <__sfvwrite_r>
    77e0:	003fe606 	br	777c <__alt_data_end+0xfffe837c>

000077e4 <__sprint_r>:
    77e4:	30c00217 	ldw	r3,8(r6)
    77e8:	18000126 	beq	r3,zero,77f0 <__sprint_r+0xc>
    77ec:	00076e81 	jmpi	76e8 <__sprint_r.part.0>
    77f0:	30000115 	stw	zero,4(r6)
    77f4:	0005883a 	mov	r2,zero
    77f8:	f800283a 	ret

000077fc <___vfiprintf_internal_r>:
    77fc:	deffca04 	addi	sp,sp,-216
    7800:	dd403115 	stw	r21,196(sp)
    7804:	dfc03515 	stw	ra,212(sp)
    7808:	df003415 	stw	fp,208(sp)
    780c:	ddc03315 	stw	r23,204(sp)
    7810:	dd803215 	stw	r22,200(sp)
    7814:	dd003015 	stw	r20,192(sp)
    7818:	dcc02f15 	stw	r19,188(sp)
    781c:	dc802e15 	stw	r18,184(sp)
    7820:	dc402d15 	stw	r17,180(sp)
    7824:	dc002c15 	stw	r16,176(sp)
    7828:	d9002115 	stw	r4,132(sp)
    782c:	d9402015 	stw	r5,128(sp)
    7830:	d9c02215 	stw	r7,136(sp)
    7834:	302b883a 	mov	r21,r6
    7838:	20000226 	beq	r4,zero,7844 <___vfiprintf_internal_r+0x48>
    783c:	20800e17 	ldw	r2,56(r4)
    7840:	1000cf26 	beq	r2,zero,7b80 <___vfiprintf_internal_r+0x384>
    7844:	d8c02017 	ldw	r3,128(sp)
    7848:	1880030b 	ldhu	r2,12(r3)
    784c:	10c8000c 	andi	r3,r2,8192
    7850:	1800071e 	bne	r3,zero,7870 <___vfiprintf_internal_r+0x74>
    7854:	d9402017 	ldw	r5,128(sp)
    7858:	00f7ffc4 	movi	r3,-8193
    785c:	10880014 	ori	r2,r2,8192
    7860:	29001917 	ldw	r4,100(r5)
    7864:	2880030d 	sth	r2,12(r5)
    7868:	20c6703a 	and	r3,r4,r3
    786c:	28c01915 	stw	r3,100(r5)
    7870:	10c0020c 	andi	r3,r2,8
    7874:	1800a526 	beq	r3,zero,7b0c <___vfiprintf_internal_r+0x310>
    7878:	d9002017 	ldw	r4,128(sp)
    787c:	20c00417 	ldw	r3,16(r4)
    7880:	1800a226 	beq	r3,zero,7b0c <___vfiprintf_internal_r+0x310>
    7884:	1080068c 	andi	r2,r2,26
    7888:	00c00284 	movi	r3,10
    788c:	10c0a826 	beq	r2,r3,7b30 <___vfiprintf_internal_r+0x334>
    7890:	d9001a04 	addi	r4,sp,104
    7894:	d94019c4 	addi	r5,sp,103
    7898:	04800074 	movhi	r18,1
    789c:	2145c83a 	sub	r2,r4,r5
    78a0:	94808504 	addi	r18,r18,532
    78a4:	d9001e15 	stw	r4,120(sp)
    78a8:	d9401f15 	stw	r5,124(sp)
    78ac:	dec01a15 	stw	sp,104(sp)
    78b0:	d8001c15 	stw	zero,112(sp)
    78b4:	d8001b15 	stw	zero,108(sp)
    78b8:	d811883a 	mov	r8,sp
    78bc:	d8002615 	stw	zero,152(sp)
    78c0:	d8002415 	stw	zero,144(sp)
    78c4:	d8802815 	stw	r2,160(sp)
    78c8:	a82d883a 	mov	r22,r21
    78cc:	b0800007 	ldb	r2,0(r22)
    78d0:	10040d26 	beq	r2,zero,8908 <___vfiprintf_internal_r+0x110c>
    78d4:	00c00944 	movi	r3,37
    78d8:	b029883a 	mov	r20,r22
    78dc:	10c0021e 	bne	r2,r3,78e8 <___vfiprintf_internal_r+0xec>
    78e0:	00001606 	br	793c <___vfiprintf_internal_r+0x140>
    78e4:	10c00326 	beq	r2,r3,78f4 <___vfiprintf_internal_r+0xf8>
    78e8:	a5000044 	addi	r20,r20,1
    78ec:	a0800007 	ldb	r2,0(r20)
    78f0:	103ffc1e 	bne	r2,zero,78e4 <__alt_data_end+0xfffe84e4>
    78f4:	a5a1c83a 	sub	r16,r20,r22
    78f8:	80001026 	beq	r16,zero,793c <___vfiprintf_internal_r+0x140>
    78fc:	d8c01c17 	ldw	r3,112(sp)
    7900:	d8801b17 	ldw	r2,108(sp)
    7904:	45800015 	stw	r22,0(r8)
    7908:	80c7883a 	add	r3,r16,r3
    790c:	10800044 	addi	r2,r2,1
    7910:	44000115 	stw	r16,4(r8)
    7914:	d8c01c15 	stw	r3,112(sp)
    7918:	d8801b15 	stw	r2,108(sp)
    791c:	010001c4 	movi	r4,7
    7920:	2080750e 	bge	r4,r2,7af8 <___vfiprintf_internal_r+0x2fc>
    7924:	1803951e 	bne	r3,zero,877c <___vfiprintf_internal_r+0xf80>
    7928:	d8c02417 	ldw	r3,144(sp)
    792c:	d8001b15 	stw	zero,108(sp)
    7930:	d811883a 	mov	r8,sp
    7934:	1c07883a 	add	r3,r3,r16
    7938:	d8c02415 	stw	r3,144(sp)
    793c:	a0800007 	ldb	r2,0(r20)
    7940:	1002e026 	beq	r2,zero,84c4 <___vfiprintf_internal_r+0xcc8>
    7944:	a5800044 	addi	r22,r20,1
    7948:	a0c00047 	ldb	r3,1(r20)
    794c:	d8001d85 	stb	zero,118(sp)
    7950:	0027883a 	mov	r19,zero
    7954:	d8002305 	stb	zero,140(sp)
    7958:	043fffc4 	movi	r16,-1
    795c:	d8002515 	stw	zero,148(sp)
    7960:	0023883a 	mov	r17,zero
    7964:	05001604 	movi	r20,88
    7968:	05400244 	movi	r21,9
    796c:	402f883a 	mov	r23,r8
    7970:	b5800044 	addi	r22,r22,1
    7974:	18bff804 	addi	r2,r3,-32
    7978:	a0827736 	bltu	r20,r2,8358 <___vfiprintf_internal_r+0xb5c>
    797c:	100490ba 	slli	r2,r2,2
    7980:	01000034 	movhi	r4,0
    7984:	211e6504 	addi	r4,r4,31124
    7988:	1105883a 	add	r2,r2,r4
    798c:	10800017 	ldw	r2,0(r2)
    7990:	1000683a 	jmp	r2
    7994:	00008058 	cmpnei	zero,zero,513
    7998:	00008358 	cmpnei	zero,zero,525
    799c:	00008358 	cmpnei	zero,zero,525
    79a0:	00008074 	movhi	zero,513
    79a4:	00008358 	cmpnei	zero,zero,525
    79a8:	00008358 	cmpnei	zero,zero,525
    79ac:	00008358 	cmpnei	zero,zero,525
    79b0:	00008358 	cmpnei	zero,zero,525
    79b4:	00008358 	cmpnei	zero,zero,525
    79b8:	00008358 	cmpnei	zero,zero,525
    79bc:	0000827c 	xorhi	zero,zero,521
    79c0:	000082a0 	cmpeqi	zero,zero,522
    79c4:	00008358 	cmpnei	zero,zero,525
    79c8:	00007b98 	cmpnei	zero,zero,494
    79cc:	000082b4 	movhi	zero,522
    79d0:	00008358 	cmpnei	zero,zero,525
    79d4:	00008080 	call	808 <write7SegDisplay+0xb8>
    79d8:	0000808c 	andi	zero,zero,514
    79dc:	0000808c 	andi	zero,zero,514
    79e0:	0000808c 	andi	zero,zero,514
    79e4:	0000808c 	andi	zero,zero,514
    79e8:	0000808c 	andi	zero,zero,514
    79ec:	0000808c 	andi	zero,zero,514
    79f0:	0000808c 	andi	zero,zero,514
    79f4:	0000808c 	andi	zero,zero,514
    79f8:	0000808c 	andi	zero,zero,514
    79fc:	00008358 	cmpnei	zero,zero,525
    7a00:	00008358 	cmpnei	zero,zero,525
    7a04:	00008358 	cmpnei	zero,zero,525
    7a08:	00008358 	cmpnei	zero,zero,525
    7a0c:	00008358 	cmpnei	zero,zero,525
    7a10:	00008358 	cmpnei	zero,zero,525
    7a14:	00008358 	cmpnei	zero,zero,525
    7a18:	00008358 	cmpnei	zero,zero,525
    7a1c:	00008358 	cmpnei	zero,zero,525
    7a20:	00008358 	cmpnei	zero,zero,525
    7a24:	000080cc 	andi	zero,zero,515
    7a28:	00008358 	cmpnei	zero,zero,525
    7a2c:	00008358 	cmpnei	zero,zero,525
    7a30:	00008358 	cmpnei	zero,zero,525
    7a34:	00008358 	cmpnei	zero,zero,525
    7a38:	00008358 	cmpnei	zero,zero,525
    7a3c:	00008358 	cmpnei	zero,zero,525
    7a40:	00008358 	cmpnei	zero,zero,525
    7a44:	00008358 	cmpnei	zero,zero,525
    7a48:	00008358 	cmpnei	zero,zero,525
    7a4c:	00008358 	cmpnei	zero,zero,525
    7a50:	00008108 	cmpgei	zero,zero,516
    7a54:	00008358 	cmpnei	zero,zero,525
    7a58:	00008358 	cmpnei	zero,zero,525
    7a5c:	00008358 	cmpnei	zero,zero,525
    7a60:	00008358 	cmpnei	zero,zero,525
    7a64:	00008358 	cmpnei	zero,zero,525
    7a68:	00008164 	muli	zero,zero,517
    7a6c:	00008358 	cmpnei	zero,zero,525
    7a70:	00008358 	cmpnei	zero,zero,525
    7a74:	000081d8 	cmpnei	zero,zero,519
    7a78:	00008358 	cmpnei	zero,zero,525
    7a7c:	00008358 	cmpnei	zero,zero,525
    7a80:	00008358 	cmpnei	zero,zero,525
    7a84:	00008358 	cmpnei	zero,zero,525
    7a88:	00008358 	cmpnei	zero,zero,525
    7a8c:	00008358 	cmpnei	zero,zero,525
    7a90:	00008358 	cmpnei	zero,zero,525
    7a94:	00008358 	cmpnei	zero,zero,525
    7a98:	00008358 	cmpnei	zero,zero,525
    7a9c:	00008358 	cmpnei	zero,zero,525
    7aa0:	00007f80 	call	7f8 <write7SegDisplay+0xa8>
    7aa4:	00007fb0 	cmpltui	zero,zero,510
    7aa8:	00008358 	cmpnei	zero,zero,525
    7aac:	00008358 	cmpnei	zero,zero,525
    7ab0:	00008358 	cmpnei	zero,zero,525
    7ab4:	00008300 	call	830 <write7SegDisplay+0xe0>
    7ab8:	00007fb0 	cmpltui	zero,zero,510
    7abc:	00008358 	cmpnei	zero,zero,525
    7ac0:	00008358 	cmpnei	zero,zero,525
    7ac4:	00007e58 	cmpnei	zero,zero,505
    7ac8:	00008358 	cmpnei	zero,zero,525
    7acc:	00007e6c 	andhi	zero,zero,505
    7ad0:	00007ea4 	muli	zero,zero,506
    7ad4:	00007ba4 	muli	zero,zero,494
    7ad8:	00007e4c 	andi	zero,zero,505
    7adc:	00008358 	cmpnei	zero,zero,525
    7ae0:	00008218 	cmpnei	zero,zero,520
    7ae4:	00008358 	cmpnei	zero,zero,525
    7ae8:	00008264 	muli	zero,zero,521
    7aec:	00008358 	cmpnei	zero,zero,525
    7af0:	00008358 	cmpnei	zero,zero,525
    7af4:	00007f28 	cmpgeui	zero,zero,508
    7af8:	42000204 	addi	r8,r8,8
    7afc:	d8c02417 	ldw	r3,144(sp)
    7b00:	1c07883a 	add	r3,r3,r16
    7b04:	d8c02415 	stw	r3,144(sp)
    7b08:	003f8c06 	br	793c <__alt_data_end+0xfffe853c>
    7b0c:	d9402017 	ldw	r5,128(sp)
    7b10:	d9002117 	ldw	r4,132(sp)
    7b14:	0002ea80 	call	2ea8 <__swsetup_r>
    7b18:	1003c11e 	bne	r2,zero,8a20 <___vfiprintf_internal_r+0x1224>
    7b1c:	d9402017 	ldw	r5,128(sp)
    7b20:	00c00284 	movi	r3,10
    7b24:	2880030b 	ldhu	r2,12(r5)
    7b28:	1080068c 	andi	r2,r2,26
    7b2c:	10ff581e 	bne	r2,r3,7890 <__alt_data_end+0xfffe8490>
    7b30:	d8c02017 	ldw	r3,128(sp)
    7b34:	1880038f 	ldh	r2,14(r3)
    7b38:	103f5516 	blt	r2,zero,7890 <__alt_data_end+0xfffe8490>
    7b3c:	d9c02217 	ldw	r7,136(sp)
    7b40:	d9002117 	ldw	r4,132(sp)
    7b44:	a80d883a 	mov	r6,r21
    7b48:	180b883a 	mov	r5,r3
    7b4c:	0008d240 	call	8d24 <__sbprintf>
    7b50:	dfc03517 	ldw	ra,212(sp)
    7b54:	df003417 	ldw	fp,208(sp)
    7b58:	ddc03317 	ldw	r23,204(sp)
    7b5c:	dd803217 	ldw	r22,200(sp)
    7b60:	dd403117 	ldw	r21,196(sp)
    7b64:	dd003017 	ldw	r20,192(sp)
    7b68:	dcc02f17 	ldw	r19,188(sp)
    7b6c:	dc802e17 	ldw	r18,184(sp)
    7b70:	dc402d17 	ldw	r17,180(sp)
    7b74:	dc002c17 	ldw	r16,176(sp)
    7b78:	dec03604 	addi	sp,sp,216
    7b7c:	f800283a 	ret
    7b80:	0004eb40 	call	4eb4 <__sinit>
    7b84:	003f2f06 	br	7844 <__alt_data_end+0xfffe8444>
    7b88:	d8c02517 	ldw	r3,148(sp)
    7b8c:	d8802215 	stw	r2,136(sp)
    7b90:	00c7c83a 	sub	r3,zero,r3
    7b94:	d8c02515 	stw	r3,148(sp)
    7b98:	8c400114 	ori	r17,r17,4
    7b9c:	b0c00007 	ldb	r3,0(r22)
    7ba0:	003f7306 	br	7970 <__alt_data_end+0xfffe8570>
    7ba4:	00800c04 	movi	r2,48
    7ba8:	d9402217 	ldw	r5,136(sp)
    7bac:	d8801d05 	stb	r2,116(sp)
    7bb0:	00801e04 	movi	r2,120
    7bb4:	d8801d45 	stb	r2,117(sp)
    7bb8:	d8001d85 	stb	zero,118(sp)
    7bbc:	b811883a 	mov	r8,r23
    7bc0:	28c00104 	addi	r3,r5,4
    7bc4:	2cc00017 	ldw	r19,0(r5)
    7bc8:	0029883a 	mov	r20,zero
    7bcc:	88800094 	ori	r2,r17,2
    7bd0:	80032516 	blt	r16,zero,8868 <___vfiprintf_internal_r+0x106c>
    7bd4:	00bfdfc4 	movi	r2,-129
    7bd8:	88a2703a 	and	r17,r17,r2
    7bdc:	d8c02215 	stw	r3,136(sp)
    7be0:	8c400094 	ori	r17,r17,2
    7be4:	98032a1e 	bne	r19,zero,8890 <___vfiprintf_internal_r+0x1094>
    7be8:	00800074 	movhi	r2,1
    7bec:	10802404 	addi	r2,r2,144
    7bf0:	d8802615 	stw	r2,152(sp)
    7bf4:	002b883a 	mov	r21,zero
    7bf8:	8001741e 	bne	r16,zero,81cc <___vfiprintf_internal_r+0x9d0>
    7bfc:	0021883a 	mov	r16,zero
    7c00:	0029883a 	mov	r20,zero
    7c04:	ddc01a04 	addi	r23,sp,104
    7c08:	8027883a 	mov	r19,r16
    7c0c:	8500010e 	bge	r16,r20,7c14 <___vfiprintf_internal_r+0x418>
    7c10:	a027883a 	mov	r19,r20
    7c14:	ad403fcc 	andi	r21,r21,255
    7c18:	ad40201c 	xori	r21,r21,128
    7c1c:	ad7fe004 	addi	r21,r21,-128
    7c20:	a8000126 	beq	r21,zero,7c28 <___vfiprintf_internal_r+0x42c>
    7c24:	9cc00044 	addi	r19,r19,1
    7c28:	89c0008c 	andi	r7,r17,2
    7c2c:	38000126 	beq	r7,zero,7c34 <___vfiprintf_internal_r+0x438>
    7c30:	9cc00084 	addi	r19,r19,2
    7c34:	88c0210c 	andi	r3,r17,132
    7c38:	1801dd1e 	bne	r3,zero,83b0 <___vfiprintf_internal_r+0xbb4>
    7c3c:	d9402517 	ldw	r5,148(sp)
    7c40:	2cebc83a 	sub	r21,r5,r19
    7c44:	0541da0e 	bge	zero,r21,83b0 <___vfiprintf_internal_r+0xbb4>
    7c48:	07000404 	movi	fp,16
    7c4c:	d8801c17 	ldw	r2,112(sp)
    7c50:	e543be0e 	bge	fp,r21,8b4c <___vfiprintf_internal_r+0x1350>
    7c54:	01400074 	movhi	r5,1
    7c58:	29408904 	addi	r5,r5,548
    7c5c:	dc002715 	stw	r16,156(sp)
    7c60:	d9801b17 	ldw	r6,108(sp)
    7c64:	a821883a 	mov	r16,r21
    7c68:	d9402315 	stw	r5,140(sp)
    7c6c:	028001c4 	movi	r10,7
    7c70:	d9c02915 	stw	r7,164(sp)
    7c74:	182b883a 	mov	r21,r3
    7c78:	00000506 	br	7c90 <___vfiprintf_internal_r+0x494>
    7c7c:	31000084 	addi	r4,r6,2
    7c80:	42000204 	addi	r8,r8,8
    7c84:	180d883a 	mov	r6,r3
    7c88:	843ffc04 	addi	r16,r16,-16
    7c8c:	e4000f0e 	bge	fp,r16,7ccc <___vfiprintf_internal_r+0x4d0>
    7c90:	01000074 	movhi	r4,1
    7c94:	10800404 	addi	r2,r2,16
    7c98:	30c00044 	addi	r3,r6,1
    7c9c:	21008904 	addi	r4,r4,548
    7ca0:	41000015 	stw	r4,0(r8)
    7ca4:	47000115 	stw	fp,4(r8)
    7ca8:	d8801c15 	stw	r2,112(sp)
    7cac:	d8c01b15 	stw	r3,108(sp)
    7cb0:	50fff20e 	bge	r10,r3,7c7c <__alt_data_end+0xfffe887c>
    7cb4:	1001b21e 	bne	r2,zero,8380 <___vfiprintf_internal_r+0xb84>
    7cb8:	843ffc04 	addi	r16,r16,-16
    7cbc:	000d883a 	mov	r6,zero
    7cc0:	01000044 	movi	r4,1
    7cc4:	d811883a 	mov	r8,sp
    7cc8:	e43ff116 	blt	fp,r16,7c90 <__alt_data_end+0xfffe8890>
    7ccc:	a807883a 	mov	r3,r21
    7cd0:	d9c02917 	ldw	r7,164(sp)
    7cd4:	802b883a 	mov	r21,r16
    7cd8:	dc002717 	ldw	r16,156(sp)
    7cdc:	d9402317 	ldw	r5,140(sp)
    7ce0:	a885883a 	add	r2,r21,r2
    7ce4:	45400115 	stw	r21,4(r8)
    7ce8:	41400015 	stw	r5,0(r8)
    7cec:	d8801c15 	stw	r2,112(sp)
    7cf0:	d9001b15 	stw	r4,108(sp)
    7cf4:	014001c4 	movi	r5,7
    7cf8:	29026216 	blt	r5,r4,8684 <___vfiprintf_internal_r+0xe88>
    7cfc:	d9801d87 	ldb	r6,118(sp)
    7d00:	42000204 	addi	r8,r8,8
    7d04:	21400044 	addi	r5,r4,1
    7d08:	3001ae1e 	bne	r6,zero,83c4 <___vfiprintf_internal_r+0xbc8>
    7d0c:	3801bb26 	beq	r7,zero,83fc <___vfiprintf_internal_r+0xc00>
    7d10:	d9001d04 	addi	r4,sp,116
    7d14:	10800084 	addi	r2,r2,2
    7d18:	41000015 	stw	r4,0(r8)
    7d1c:	01000084 	movi	r4,2
    7d20:	41000115 	stw	r4,4(r8)
    7d24:	d8801c15 	stw	r2,112(sp)
    7d28:	d9401b15 	stw	r5,108(sp)
    7d2c:	010001c4 	movi	r4,7
    7d30:	2142680e 	bge	r4,r5,86d4 <___vfiprintf_internal_r+0xed8>
    7d34:	1002b11e 	bne	r2,zero,87fc <___vfiprintf_internal_r+0x1000>
    7d38:	01802004 	movi	r6,128
    7d3c:	01400044 	movi	r5,1
    7d40:	0009883a 	mov	r4,zero
    7d44:	d811883a 	mov	r8,sp
    7d48:	1981ae1e 	bne	r3,r6,8404 <___vfiprintf_internal_r+0xc08>
    7d4c:	d8c02517 	ldw	r3,148(sp)
    7d50:	1cf9c83a 	sub	fp,r3,r19
    7d54:	0701ab0e 	bge	zero,fp,8404 <___vfiprintf_internal_r+0xc08>
    7d58:	05400404 	movi	r21,16
    7d5c:	af03a90e 	bge	r21,fp,8c04 <___vfiprintf_internal_r+0x1408>
    7d60:	01400074 	movhi	r5,1
    7d64:	29408504 	addi	r5,r5,532
    7d68:	d9402315 	stw	r5,140(sp)
    7d6c:	01c001c4 	movi	r7,7
    7d70:	00000506 	br	7d88 <___vfiprintf_internal_r+0x58c>
    7d74:	21800084 	addi	r6,r4,2
    7d78:	42000204 	addi	r8,r8,8
    7d7c:	1809883a 	mov	r4,r3
    7d80:	e73ffc04 	addi	fp,fp,-16
    7d84:	af000d0e 	bge	r21,fp,7dbc <___vfiprintf_internal_r+0x5c0>
    7d88:	10800404 	addi	r2,r2,16
    7d8c:	20c00044 	addi	r3,r4,1
    7d90:	44800015 	stw	r18,0(r8)
    7d94:	45400115 	stw	r21,4(r8)
    7d98:	d8801c15 	stw	r2,112(sp)
    7d9c:	d8c01b15 	stw	r3,108(sp)
    7da0:	38fff40e 	bge	r7,r3,7d74 <__alt_data_end+0xfffe8974>
    7da4:	10022b1e 	bne	r2,zero,8654 <___vfiprintf_internal_r+0xe58>
    7da8:	e73ffc04 	addi	fp,fp,-16
    7dac:	01800044 	movi	r6,1
    7db0:	0009883a 	mov	r4,zero
    7db4:	d811883a 	mov	r8,sp
    7db8:	af3ff316 	blt	r21,fp,7d88 <__alt_data_end+0xfffe8988>
    7dbc:	d8c02317 	ldw	r3,140(sp)
    7dc0:	1705883a 	add	r2,r2,fp
    7dc4:	47000115 	stw	fp,4(r8)
    7dc8:	40c00015 	stw	r3,0(r8)
    7dcc:	d8801c15 	stw	r2,112(sp)
    7dd0:	d9801b15 	stw	r6,108(sp)
    7dd4:	00c001c4 	movi	r3,7
    7dd8:	19829416 	blt	r3,r6,882c <___vfiprintf_internal_r+0x1030>
    7ddc:	8521c83a 	sub	r16,r16,r20
    7de0:	42000204 	addi	r8,r8,8
    7de4:	31400044 	addi	r5,r6,1
    7de8:	3009883a 	mov	r4,r6
    7dec:	04018716 	blt	zero,r16,840c <___vfiprintf_internal_r+0xc10>
    7df0:	a085883a 	add	r2,r20,r2
    7df4:	45c00015 	stw	r23,0(r8)
    7df8:	45000115 	stw	r20,4(r8)
    7dfc:	d8801c15 	stw	r2,112(sp)
    7e00:	d9401b15 	stw	r5,108(sp)
    7e04:	00c001c4 	movi	r3,7
    7e08:	1941c20e 	bge	r3,r5,8514 <___vfiprintf_internal_r+0xd18>
    7e0c:	1002531e 	bne	r2,zero,875c <___vfiprintf_internal_r+0xf60>
    7e10:	d8001b15 	stw	zero,108(sp)
    7e14:	8c40010c 	andi	r17,r17,4
    7e18:	88023226 	beq	r17,zero,86e4 <___vfiprintf_internal_r+0xee8>
    7e1c:	d9002517 	ldw	r4,148(sp)
    7e20:	24e3c83a 	sub	r17,r4,r19
    7e24:	04432916 	blt	zero,r17,8acc <___vfiprintf_internal_r+0x12d0>
    7e28:	d8802517 	ldw	r2,148(sp)
    7e2c:	14c0010e 	bge	r2,r19,7e34 <___vfiprintf_internal_r+0x638>
    7e30:	9805883a 	mov	r2,r19
    7e34:	d8c02417 	ldw	r3,144(sp)
    7e38:	1887883a 	add	r3,r3,r2
    7e3c:	d8c02415 	stw	r3,144(sp)
    7e40:	d8001b15 	stw	zero,108(sp)
    7e44:	d811883a 	mov	r8,sp
    7e48:	003ea006 	br	78cc <__alt_data_end+0xfffe84cc>
    7e4c:	8c400814 	ori	r17,r17,32
    7e50:	b0c00007 	ldb	r3,0(r22)
    7e54:	003ec606 	br	7970 <__alt_data_end+0xfffe8570>
    7e58:	b0c00007 	ldb	r3,0(r22)
    7e5c:	00801b04 	movi	r2,108
    7e60:	18832026 	beq	r3,r2,8ae4 <___vfiprintf_internal_r+0x12e8>
    7e64:	8c400414 	ori	r17,r17,16
    7e68:	003ec106 	br	7970 <__alt_data_end+0xfffe8570>
    7e6c:	9cc03fcc 	andi	r19,r19,255
    7e70:	b811883a 	mov	r8,r23
    7e74:	9803981e 	bne	r19,zero,8cd8 <___vfiprintf_internal_r+0x14dc>
    7e78:	8880080c 	andi	r2,r17,32
    7e7c:	1002be26 	beq	r2,zero,8978 <___vfiprintf_internal_r+0x117c>
    7e80:	d9002217 	ldw	r4,136(sp)
    7e84:	d9402417 	ldw	r5,144(sp)
    7e88:	20800017 	ldw	r2,0(r4)
    7e8c:	2807d7fa 	srai	r3,r5,31
    7e90:	21000104 	addi	r4,r4,4
    7e94:	d9002215 	stw	r4,136(sp)
    7e98:	11400015 	stw	r5,0(r2)
    7e9c:	10c00115 	stw	r3,4(r2)
    7ea0:	003e8a06 	br	78cc <__alt_data_end+0xfffe84cc>
    7ea4:	9cc03fcc 	andi	r19,r19,255
    7ea8:	b811883a 	mov	r8,r23
    7eac:	9803871e 	bne	r19,zero,8ccc <___vfiprintf_internal_r+0x14d0>
    7eb0:	8880080c 	andi	r2,r17,32
    7eb4:	10009a26 	beq	r2,zero,8120 <___vfiprintf_internal_r+0x924>
    7eb8:	d9002217 	ldw	r4,136(sp)
    7ebc:	d8001d85 	stb	zero,118(sp)
    7ec0:	20800204 	addi	r2,r4,8
    7ec4:	24c00017 	ldw	r19,0(r4)
    7ec8:	25000117 	ldw	r20,4(r4)
    7ecc:	8002a416 	blt	r16,zero,8960 <___vfiprintf_internal_r+0x1164>
    7ed0:	013fdfc4 	movi	r4,-129
    7ed4:	9d06b03a 	or	r3,r19,r20
    7ed8:	d8802215 	stw	r2,136(sp)
    7edc:	8922703a 	and	r17,r17,r4
    7ee0:	18009b26 	beq	r3,zero,8150 <___vfiprintf_internal_r+0x954>
    7ee4:	002b883a 	mov	r21,zero
    7ee8:	ddc01a04 	addi	r23,sp,104
    7eec:	9806d0fa 	srli	r3,r19,3
    7ef0:	a008977a 	slli	r4,r20,29
    7ef4:	a028d0fa 	srli	r20,r20,3
    7ef8:	9cc001cc 	andi	r19,r19,7
    7efc:	98800c04 	addi	r2,r19,48
    7f00:	bdffffc4 	addi	r23,r23,-1
    7f04:	20e6b03a 	or	r19,r4,r3
    7f08:	b8800005 	stb	r2,0(r23)
    7f0c:	9d06b03a 	or	r3,r19,r20
    7f10:	183ff61e 	bne	r3,zero,7eec <__alt_data_end+0xfffe8aec>
    7f14:	88c0004c 	andi	r3,r17,1
    7f18:	18021f1e 	bne	r3,zero,8798 <___vfiprintf_internal_r+0xf9c>
    7f1c:	d9401e17 	ldw	r5,120(sp)
    7f20:	2de9c83a 	sub	r20,r5,r23
    7f24:	003f3806 	br	7c08 <__alt_data_end+0xfffe8808>
    7f28:	9cc03fcc 	andi	r19,r19,255
    7f2c:	b811883a 	mov	r8,r23
    7f30:	98034f1e 	bne	r19,zero,8c70 <___vfiprintf_internal_r+0x1474>
    7f34:	00800074 	movhi	r2,1
    7f38:	10802404 	addi	r2,r2,144
    7f3c:	d8802615 	stw	r2,152(sp)
    7f40:	8880080c 	andi	r2,r17,32
    7f44:	1000ac26 	beq	r2,zero,81f8 <___vfiprintf_internal_r+0x9fc>
    7f48:	d9002217 	ldw	r4,136(sp)
    7f4c:	24c00017 	ldw	r19,0(r4)
    7f50:	25000117 	ldw	r20,4(r4)
    7f54:	21000204 	addi	r4,r4,8
    7f58:	d9002215 	stw	r4,136(sp)
    7f5c:	8880004c 	andi	r2,r17,1
    7f60:	1001e726 	beq	r2,zero,8700 <___vfiprintf_internal_r+0xf04>
    7f64:	9d04b03a 	or	r2,r19,r20
    7f68:	10025c1e 	bne	r2,zero,88dc <___vfiprintf_internal_r+0x10e0>
    7f6c:	d8001d85 	stb	zero,118(sp)
    7f70:	80024416 	blt	r16,zero,8884 <___vfiprintf_internal_r+0x1088>
    7f74:	00bfdfc4 	movi	r2,-129
    7f78:	88a2703a 	and	r17,r17,r2
    7f7c:	003f1d06 	br	7bf4 <__alt_data_end+0xfffe87f4>
    7f80:	d8c02217 	ldw	r3,136(sp)
    7f84:	04c00044 	movi	r19,1
    7f88:	b811883a 	mov	r8,r23
    7f8c:	18800017 	ldw	r2,0(r3)
    7f90:	18c00104 	addi	r3,r3,4
    7f94:	d8001d85 	stb	zero,118(sp)
    7f98:	d8801005 	stb	r2,64(sp)
    7f9c:	d8c02215 	stw	r3,136(sp)
    7fa0:	9829883a 	mov	r20,r19
    7fa4:	ddc01004 	addi	r23,sp,64
    7fa8:	0021883a 	mov	r16,zero
    7fac:	003f1e06 	br	7c28 <__alt_data_end+0xfffe8828>
    7fb0:	9cc03fcc 	andi	r19,r19,255
    7fb4:	b811883a 	mov	r8,r23
    7fb8:	9803331e 	bne	r19,zero,8c88 <___vfiprintf_internal_r+0x148c>
    7fbc:	8880080c 	andi	r2,r17,32
    7fc0:	10004826 	beq	r2,zero,80e4 <___vfiprintf_internal_r+0x8e8>
    7fc4:	d9002217 	ldw	r4,136(sp)
    7fc8:	20800117 	ldw	r2,4(r4)
    7fcc:	24c00017 	ldw	r19,0(r4)
    7fd0:	21000204 	addi	r4,r4,8
    7fd4:	d9002215 	stw	r4,136(sp)
    7fd8:	1029883a 	mov	r20,r2
    7fdc:	10024c16 	blt	r2,zero,8910 <___vfiprintf_internal_r+0x1114>
    7fe0:	dd401d83 	ldbu	r21,118(sp)
    7fe4:	80007116 	blt	r16,zero,81ac <___vfiprintf_internal_r+0x9b0>
    7fe8:	00ffdfc4 	movi	r3,-129
    7fec:	9d04b03a 	or	r2,r19,r20
    7ff0:	88e2703a 	and	r17,r17,r3
    7ff4:	1000d126 	beq	r2,zero,833c <___vfiprintf_internal_r+0xb40>
    7ff8:	a0023526 	beq	r20,zero,88d0 <___vfiprintf_internal_r+0x10d4>
    7ffc:	ddc01a04 	addi	r23,sp,104
    8000:	4039883a 	mov	fp,r8
    8004:	9809883a 	mov	r4,r19
    8008:	a00b883a 	mov	r5,r20
    800c:	01800284 	movi	r6,10
    8010:	000f883a 	mov	r7,zero
    8014:	000a8b00 	call	a8b0 <__umoddi3>
    8018:	10800c04 	addi	r2,r2,48
    801c:	bdffffc4 	addi	r23,r23,-1
    8020:	9809883a 	mov	r4,r19
    8024:	a00b883a 	mov	r5,r20
    8028:	b8800005 	stb	r2,0(r23)
    802c:	01800284 	movi	r6,10
    8030:	000f883a 	mov	r7,zero
    8034:	000a2b40 	call	a2b4 <__udivdi3>
    8038:	1027883a 	mov	r19,r2
    803c:	10c4b03a 	or	r2,r2,r3
    8040:	1829883a 	mov	r20,r3
    8044:	103fef1e 	bne	r2,zero,8004 <__alt_data_end+0xfffe8c04>
    8048:	d9001e17 	ldw	r4,120(sp)
    804c:	e011883a 	mov	r8,fp
    8050:	25e9c83a 	sub	r20,r4,r23
    8054:	003eec06 	br	7c08 <__alt_data_end+0xfffe8808>
    8058:	d8802307 	ldb	r2,140(sp)
    805c:	1002361e 	bne	r2,zero,8938 <___vfiprintf_internal_r+0x113c>
    8060:	00c00804 	movi	r3,32
    8064:	d8c02305 	stb	r3,140(sp)
    8068:	04c00044 	movi	r19,1
    806c:	b0c00007 	ldb	r3,0(r22)
    8070:	003e3f06 	br	7970 <__alt_data_end+0xfffe8570>
    8074:	8c400054 	ori	r17,r17,1
    8078:	b0c00007 	ldb	r3,0(r22)
    807c:	003e3c06 	br	7970 <__alt_data_end+0xfffe8570>
    8080:	8c402014 	ori	r17,r17,128
    8084:	b0c00007 	ldb	r3,0(r22)
    8088:	003e3906 	br	7970 <__alt_data_end+0xfffe8570>
    808c:	dc002715 	stw	r16,156(sp)
    8090:	d8002515 	stw	zero,148(sp)
    8094:	1f3ff404 	addi	fp,r3,-48
    8098:	0009883a 	mov	r4,zero
    809c:	b021883a 	mov	r16,r22
    80a0:	01400284 	movi	r5,10
    80a4:	000b0280 	call	b028 <__mulsi3>
    80a8:	80c00007 	ldb	r3,0(r16)
    80ac:	e089883a 	add	r4,fp,r2
    80b0:	b5800044 	addi	r22,r22,1
    80b4:	1f3ff404 	addi	fp,r3,-48
    80b8:	b021883a 	mov	r16,r22
    80bc:	af3ff82e 	bgeu	r21,fp,80a0 <__alt_data_end+0xfffe8ca0>
    80c0:	d9002515 	stw	r4,148(sp)
    80c4:	dc002717 	ldw	r16,156(sp)
    80c8:	003e2a06 	br	7974 <__alt_data_end+0xfffe8574>
    80cc:	9cc03fcc 	andi	r19,r19,255
    80d0:	b811883a 	mov	r8,r23
    80d4:	9802e91e 	bne	r19,zero,8c7c <___vfiprintf_internal_r+0x1480>
    80d8:	8c400414 	ori	r17,r17,16
    80dc:	8880080c 	andi	r2,r17,32
    80e0:	103fb81e 	bne	r2,zero,7fc4 <__alt_data_end+0xfffe8bc4>
    80e4:	8880040c 	andi	r2,r17,16
    80e8:	10022e26 	beq	r2,zero,89a4 <___vfiprintf_internal_r+0x11a8>
    80ec:	d9402217 	ldw	r5,136(sp)
    80f0:	2cc00017 	ldw	r19,0(r5)
    80f4:	29400104 	addi	r5,r5,4
    80f8:	d9402215 	stw	r5,136(sp)
    80fc:	9829d7fa 	srai	r20,r19,31
    8100:	a005883a 	mov	r2,r20
    8104:	003fb506 	br	7fdc <__alt_data_end+0xfffe8bdc>
    8108:	9cc03fcc 	andi	r19,r19,255
    810c:	b811883a 	mov	r8,r23
    8110:	9802fa1e 	bne	r19,zero,8cfc <___vfiprintf_internal_r+0x1500>
    8114:	8c400414 	ori	r17,r17,16
    8118:	8880080c 	andi	r2,r17,32
    811c:	103f661e 	bne	r2,zero,7eb8 <__alt_data_end+0xfffe8ab8>
    8120:	8880040c 	andi	r2,r17,16
    8124:	10020626 	beq	r2,zero,8940 <___vfiprintf_internal_r+0x1144>
    8128:	d9402217 	ldw	r5,136(sp)
    812c:	d8001d85 	stb	zero,118(sp)
    8130:	0029883a 	mov	r20,zero
    8134:	28800104 	addi	r2,r5,4
    8138:	2cc00017 	ldw	r19,0(r5)
    813c:	80020816 	blt	r16,zero,8960 <___vfiprintf_internal_r+0x1164>
    8140:	00ffdfc4 	movi	r3,-129
    8144:	d8802215 	stw	r2,136(sp)
    8148:	88e2703a 	and	r17,r17,r3
    814c:	983f651e 	bne	r19,zero,7ee4 <__alt_data_end+0xfffe8ae4>
    8150:	002b883a 	mov	r21,zero
    8154:	8002cf26 	beq	r16,zero,8c94 <___vfiprintf_internal_r+0x1498>
    8158:	0027883a 	mov	r19,zero
    815c:	0029883a 	mov	r20,zero
    8160:	003f6106 	br	7ee8 <__alt_data_end+0xfffe8ae8>
    8164:	9cc03fcc 	andi	r19,r19,255
    8168:	b811883a 	mov	r8,r23
    816c:	9802e01e 	bne	r19,zero,8cf0 <___vfiprintf_internal_r+0x14f4>
    8170:	8c400414 	ori	r17,r17,16
    8174:	8880080c 	andi	r2,r17,32
    8178:	1000641e 	bne	r2,zero,830c <___vfiprintf_internal_r+0xb10>
    817c:	8880040c 	andi	r2,r17,16
    8180:	1001c81e 	bne	r2,zero,88a4 <___vfiprintf_internal_r+0x10a8>
    8184:	8880100c 	andi	r2,r17,64
    8188:	d8001d85 	stb	zero,118(sp)
    818c:	1002281e 	bne	r2,zero,8a30 <___vfiprintf_internal_r+0x1234>
    8190:	d9002217 	ldw	r4,136(sp)
    8194:	0029883a 	mov	r20,zero
    8198:	20800104 	addi	r2,r4,4
    819c:	24c00017 	ldw	r19,0(r4)
    81a0:	8001c60e 	bge	r16,zero,88bc <___vfiprintf_internal_r+0x10c0>
    81a4:	d8802215 	stw	r2,136(sp)
    81a8:	002b883a 	mov	r21,zero
    81ac:	9d04b03a 	or	r2,r19,r20
    81b0:	103f911e 	bne	r2,zero,7ff8 <__alt_data_end+0xfffe8bf8>
    81b4:	00800044 	movi	r2,1
    81b8:	10803fcc 	andi	r2,r2,255
    81bc:	00c00044 	movi	r3,1
    81c0:	10c05f26 	beq	r2,r3,8340 <___vfiprintf_internal_r+0xb44>
    81c4:	00c00084 	movi	r3,2
    81c8:	10ffe31e 	bne	r2,r3,8158 <__alt_data_end+0xfffe8d58>
    81cc:	0027883a 	mov	r19,zero
    81d0:	0029883a 	mov	r20,zero
    81d4:	00015106 	br	871c <___vfiprintf_internal_r+0xf20>
    81d8:	9cc03fcc 	andi	r19,r19,255
    81dc:	b811883a 	mov	r8,r23
    81e0:	9802c01e 	bne	r19,zero,8ce4 <___vfiprintf_internal_r+0x14e8>
    81e4:	01400074 	movhi	r5,1
    81e8:	29401f04 	addi	r5,r5,124
    81ec:	d9402615 	stw	r5,152(sp)
    81f0:	8880080c 	andi	r2,r17,32
    81f4:	103f541e 	bne	r2,zero,7f48 <__alt_data_end+0xfffe8b48>
    81f8:	8880040c 	andi	r2,r17,16
    81fc:	1001f226 	beq	r2,zero,89c8 <___vfiprintf_internal_r+0x11cc>
    8200:	d9402217 	ldw	r5,136(sp)
    8204:	0029883a 	mov	r20,zero
    8208:	2cc00017 	ldw	r19,0(r5)
    820c:	29400104 	addi	r5,r5,4
    8210:	d9402215 	stw	r5,136(sp)
    8214:	003f5106 	br	7f5c <__alt_data_end+0xfffe8b5c>
    8218:	d8c02217 	ldw	r3,136(sp)
    821c:	b811883a 	mov	r8,r23
    8220:	d8001d85 	stb	zero,118(sp)
    8224:	1dc00017 	ldw	r23,0(r3)
    8228:	1f000104 	addi	fp,r3,4
    822c:	b8025926 	beq	r23,zero,8b94 <___vfiprintf_internal_r+0x1398>
    8230:	80023316 	blt	r16,zero,8b00 <___vfiprintf_internal_r+0x1304>
    8234:	800d883a 	mov	r6,r16
    8238:	000b883a 	mov	r5,zero
    823c:	b809883a 	mov	r4,r23
    8240:	da002a15 	stw	r8,168(sp)
    8244:	0005f640 	call	5f64 <memchr>
    8248:	da002a17 	ldw	r8,168(sp)
    824c:	10026826 	beq	r2,zero,8bf0 <___vfiprintf_internal_r+0x13f4>
    8250:	15e9c83a 	sub	r20,r2,r23
    8254:	dd401d83 	ldbu	r21,118(sp)
    8258:	df002215 	stw	fp,136(sp)
    825c:	0021883a 	mov	r16,zero
    8260:	003e6906 	br	7c08 <__alt_data_end+0xfffe8808>
    8264:	9cc03fcc 	andi	r19,r19,255
    8268:	b811883a 	mov	r8,r23
    826c:	983fc126 	beq	r19,zero,8174 <__alt_data_end+0xfffe8d74>
    8270:	d8c02303 	ldbu	r3,140(sp)
    8274:	d8c01d85 	stb	r3,118(sp)
    8278:	003fbe06 	br	8174 <__alt_data_end+0xfffe8d74>
    827c:	d9002217 	ldw	r4,136(sp)
    8280:	d9402217 	ldw	r5,136(sp)
    8284:	21000017 	ldw	r4,0(r4)
    8288:	28800104 	addi	r2,r5,4
    828c:	d9002515 	stw	r4,148(sp)
    8290:	203e3d16 	blt	r4,zero,7b88 <__alt_data_end+0xfffe8788>
    8294:	d8802215 	stw	r2,136(sp)
    8298:	b0c00007 	ldb	r3,0(r22)
    829c:	003db406 	br	7970 <__alt_data_end+0xfffe8570>
    82a0:	00c00ac4 	movi	r3,43
    82a4:	d8c02305 	stb	r3,140(sp)
    82a8:	04c00044 	movi	r19,1
    82ac:	b0c00007 	ldb	r3,0(r22)
    82b0:	003daf06 	br	7970 <__alt_data_end+0xfffe8570>
    82b4:	b0c00007 	ldb	r3,0(r22)
    82b8:	01000a84 	movi	r4,42
    82bc:	b4000044 	addi	r16,r22,1
    82c0:	19025e26 	beq	r3,r4,8c3c <___vfiprintf_internal_r+0x1440>
    82c4:	1f3ff404 	addi	fp,r3,-48
    82c8:	0009883a 	mov	r4,zero
    82cc:	af025236 	bltu	r21,fp,8c18 <___vfiprintf_internal_r+0x141c>
    82d0:	01400284 	movi	r5,10
    82d4:	000b0280 	call	b028 <__mulsi3>
    82d8:	80c00007 	ldb	r3,0(r16)
    82dc:	1709883a 	add	r4,r2,fp
    82e0:	85800044 	addi	r22,r16,1
    82e4:	1f3ff404 	addi	fp,r3,-48
    82e8:	b021883a 	mov	r16,r22
    82ec:	af3ff82e 	bgeu	r21,fp,82d0 <__alt_data_end+0xfffe8ed0>
    82f0:	2021883a 	mov	r16,r4
    82f4:	203d9f0e 	bge	r4,zero,7974 <__alt_data_end+0xfffe8574>
    82f8:	043fffc4 	movi	r16,-1
    82fc:	003d9d06 	br	7974 <__alt_data_end+0xfffe8574>
    8300:	8c401014 	ori	r17,r17,64
    8304:	b0c00007 	ldb	r3,0(r22)
    8308:	003d9906 	br	7970 <__alt_data_end+0xfffe8570>
    830c:	d9002217 	ldw	r4,136(sp)
    8310:	d8001d85 	stb	zero,118(sp)
    8314:	20c00204 	addi	r3,r4,8
    8318:	24c00017 	ldw	r19,0(r4)
    831c:	25000117 	ldw	r20,4(r4)
    8320:	8001e716 	blt	r16,zero,8ac0 <___vfiprintf_internal_r+0x12c4>
    8324:	013fdfc4 	movi	r4,-129
    8328:	9d04b03a 	or	r2,r19,r20
    832c:	d8c02215 	stw	r3,136(sp)
    8330:	8922703a 	and	r17,r17,r4
    8334:	002b883a 	mov	r21,zero
    8338:	103f2f1e 	bne	r2,zero,7ff8 <__alt_data_end+0xfffe8bf8>
    833c:	803e2f26 	beq	r16,zero,7bfc <__alt_data_end+0xfffe87fc>
    8340:	0027883a 	mov	r19,zero
    8344:	9cc00c04 	addi	r19,r19,48
    8348:	dcc019c5 	stb	r19,103(sp)
    834c:	dd002817 	ldw	r20,160(sp)
    8350:	ddc019c4 	addi	r23,sp,103
    8354:	003e2c06 	br	7c08 <__alt_data_end+0xfffe8808>
    8358:	9cc03fcc 	andi	r19,r19,255
    835c:	b811883a 	mov	r8,r23
    8360:	9802571e 	bne	r19,zero,8cc0 <___vfiprintf_internal_r+0x14c4>
    8364:	18005726 	beq	r3,zero,84c4 <___vfiprintf_internal_r+0xcc8>
    8368:	04c00044 	movi	r19,1
    836c:	d8c01005 	stb	r3,64(sp)
    8370:	d8001d85 	stb	zero,118(sp)
    8374:	9829883a 	mov	r20,r19
    8378:	ddc01004 	addi	r23,sp,64
    837c:	003f0a06 	br	7fa8 <__alt_data_end+0xfffe8ba8>
    8380:	d9402017 	ldw	r5,128(sp)
    8384:	d9002117 	ldw	r4,132(sp)
    8388:	d9801a04 	addi	r6,sp,104
    838c:	da802a15 	stw	r10,168(sp)
    8390:	00076e80 	call	76e8 <__sprint_r.part.0>
    8394:	da802a17 	ldw	r10,168(sp)
    8398:	1000501e 	bne	r2,zero,84dc <___vfiprintf_internal_r+0xce0>
    839c:	d9801b17 	ldw	r6,108(sp)
    83a0:	d8801c17 	ldw	r2,112(sp)
    83a4:	d811883a 	mov	r8,sp
    83a8:	31000044 	addi	r4,r6,1
    83ac:	003e3606 	br	7c88 <__alt_data_end+0xfffe8888>
    83b0:	d9001b17 	ldw	r4,108(sp)
    83b4:	d8801c17 	ldw	r2,112(sp)
    83b8:	21400044 	addi	r5,r4,1
    83bc:	d9801d87 	ldb	r6,118(sp)
    83c0:	303e5226 	beq	r6,zero,7d0c <__alt_data_end+0xfffe890c>
    83c4:	01800044 	movi	r6,1
    83c8:	d9001d84 	addi	r4,sp,118
    83cc:	1185883a 	add	r2,r2,r6
    83d0:	41000015 	stw	r4,0(r8)
    83d4:	41800115 	stw	r6,4(r8)
    83d8:	d8801c15 	stw	r2,112(sp)
    83dc:	d9401b15 	stw	r5,108(sp)
    83e0:	010001c4 	movi	r4,7
    83e4:	2140b00e 	bge	r4,r5,86a8 <___vfiprintf_internal_r+0xeac>
    83e8:	1000f61e 	bne	r2,zero,87c4 <___vfiprintf_internal_r+0xfc8>
    83ec:	3800b31e 	bne	r7,zero,86bc <___vfiprintf_internal_r+0xec0>
    83f0:	0009883a 	mov	r4,zero
    83f4:	300b883a 	mov	r5,r6
    83f8:	d811883a 	mov	r8,sp
    83fc:	01802004 	movi	r6,128
    8400:	19be5226 	beq	r3,r6,7d4c <__alt_data_end+0xfffe894c>
    8404:	8521c83a 	sub	r16,r16,r20
    8408:	043e790e 	bge	zero,r16,7df0 <__alt_data_end+0xfffe89f0>
    840c:	05400404 	movi	r21,16
    8410:	ac01b00e 	bge	r21,r16,8ad4 <___vfiprintf_internal_r+0x12d8>
    8414:	01400074 	movhi	r5,1
    8418:	29408504 	addi	r5,r5,532
    841c:	d9402315 	stw	r5,140(sp)
    8420:	070001c4 	movi	fp,7
    8424:	00000506 	br	843c <___vfiprintf_internal_r+0xc40>
    8428:	21400084 	addi	r5,r4,2
    842c:	42000204 	addi	r8,r8,8
    8430:	1809883a 	mov	r4,r3
    8434:	843ffc04 	addi	r16,r16,-16
    8438:	ac000d0e 	bge	r21,r16,8470 <___vfiprintf_internal_r+0xc74>
    843c:	10800404 	addi	r2,r2,16
    8440:	20c00044 	addi	r3,r4,1
    8444:	44800015 	stw	r18,0(r8)
    8448:	45400115 	stw	r21,4(r8)
    844c:	d8801c15 	stw	r2,112(sp)
    8450:	d8c01b15 	stw	r3,108(sp)
    8454:	e0fff40e 	bge	fp,r3,8428 <__alt_data_end+0xfffe9028>
    8458:	1000101e 	bne	r2,zero,849c <___vfiprintf_internal_r+0xca0>
    845c:	843ffc04 	addi	r16,r16,-16
    8460:	01400044 	movi	r5,1
    8464:	0009883a 	mov	r4,zero
    8468:	d811883a 	mov	r8,sp
    846c:	ac3ff316 	blt	r21,r16,843c <__alt_data_end+0xfffe903c>
    8470:	d8c02317 	ldw	r3,140(sp)
    8474:	1405883a 	add	r2,r2,r16
    8478:	44000115 	stw	r16,4(r8)
    847c:	40c00015 	stw	r3,0(r8)
    8480:	d8801c15 	stw	r2,112(sp)
    8484:	d9401b15 	stw	r5,108(sp)
    8488:	00c001c4 	movi	r3,7
    848c:	19401916 	blt	r3,r5,84f4 <___vfiprintf_internal_r+0xcf8>
    8490:	42000204 	addi	r8,r8,8
    8494:	29400044 	addi	r5,r5,1
    8498:	003e5506 	br	7df0 <__alt_data_end+0xfffe89f0>
    849c:	d9402017 	ldw	r5,128(sp)
    84a0:	d9002117 	ldw	r4,132(sp)
    84a4:	d9801a04 	addi	r6,sp,104
    84a8:	00076e80 	call	76e8 <__sprint_r.part.0>
    84ac:	10000b1e 	bne	r2,zero,84dc <___vfiprintf_internal_r+0xce0>
    84b0:	d9001b17 	ldw	r4,108(sp)
    84b4:	d8801c17 	ldw	r2,112(sp)
    84b8:	d811883a 	mov	r8,sp
    84bc:	21400044 	addi	r5,r4,1
    84c0:	003fdc06 	br	8434 <__alt_data_end+0xfffe9034>
    84c4:	d8801c17 	ldw	r2,112(sp)
    84c8:	10000426 	beq	r2,zero,84dc <___vfiprintf_internal_r+0xce0>
    84cc:	d9402017 	ldw	r5,128(sp)
    84d0:	d9002117 	ldw	r4,132(sp)
    84d4:	d9801a04 	addi	r6,sp,104
    84d8:	00076e80 	call	76e8 <__sprint_r.part.0>
    84dc:	d9402017 	ldw	r5,128(sp)
    84e0:	2880030b 	ldhu	r2,12(r5)
    84e4:	1080100c 	andi	r2,r2,64
    84e8:	10014d1e 	bne	r2,zero,8a20 <___vfiprintf_internal_r+0x1224>
    84ec:	d8802417 	ldw	r2,144(sp)
    84f0:	003d9706 	br	7b50 <__alt_data_end+0xfffe8750>
    84f4:	1000d21e 	bne	r2,zero,8840 <___vfiprintf_internal_r+0x1044>
    84f8:	00c00044 	movi	r3,1
    84fc:	a005883a 	mov	r2,r20
    8500:	ddc00015 	stw	r23,0(sp)
    8504:	dd000115 	stw	r20,4(sp)
    8508:	dd001c15 	stw	r20,112(sp)
    850c:	d8c01b15 	stw	r3,108(sp)
    8510:	d811883a 	mov	r8,sp
    8514:	42000204 	addi	r8,r8,8
    8518:	8c40010c 	andi	r17,r17,4
    851c:	88004026 	beq	r17,zero,8620 <___vfiprintf_internal_r+0xe24>
    8520:	d9002517 	ldw	r4,148(sp)
    8524:	24e3c83a 	sub	r17,r4,r19
    8528:	04403d0e 	bge	zero,r17,8620 <___vfiprintf_internal_r+0xe24>
    852c:	04000404 	movi	r16,16
    8530:	8441a90e 	bge	r16,r17,8bd8 <___vfiprintf_internal_r+0x13dc>
    8534:	00c00074 	movhi	r3,1
    8538:	18c08904 	addi	r3,r3,548
    853c:	d9001b17 	ldw	r4,108(sp)
    8540:	d8c02315 	stw	r3,140(sp)
    8544:	050001c4 	movi	r20,7
    8548:	dd402117 	ldw	r21,132(sp)
    854c:	ddc02017 	ldw	r23,128(sp)
    8550:	00000506 	br	8568 <___vfiprintf_internal_r+0xd6c>
    8554:	21400084 	addi	r5,r4,2
    8558:	42000204 	addi	r8,r8,8
    855c:	1809883a 	mov	r4,r3
    8560:	8c7ffc04 	addi	r17,r17,-16
    8564:	84400f0e 	bge	r16,r17,85a4 <___vfiprintf_internal_r+0xda8>
    8568:	01400074 	movhi	r5,1
    856c:	10800404 	addi	r2,r2,16
    8570:	20c00044 	addi	r3,r4,1
    8574:	29408904 	addi	r5,r5,548
    8578:	41400015 	stw	r5,0(r8)
    857c:	44000115 	stw	r16,4(r8)
    8580:	d8801c15 	stw	r2,112(sp)
    8584:	d8c01b15 	stw	r3,108(sp)
    8588:	a0fff20e 	bge	r20,r3,8554 <__alt_data_end+0xfffe9154>
    858c:	1000141e 	bne	r2,zero,85e0 <___vfiprintf_internal_r+0xde4>
    8590:	8c7ffc04 	addi	r17,r17,-16
    8594:	01400044 	movi	r5,1
    8598:	0009883a 	mov	r4,zero
    859c:	d811883a 	mov	r8,sp
    85a0:	847ff116 	blt	r16,r17,8568 <__alt_data_end+0xfffe9168>
    85a4:	d8c02317 	ldw	r3,140(sp)
    85a8:	1445883a 	add	r2,r2,r17
    85ac:	44400115 	stw	r17,4(r8)
    85b0:	40c00015 	stw	r3,0(r8)
    85b4:	d8801c15 	stw	r2,112(sp)
    85b8:	d9401b15 	stw	r5,108(sp)
    85bc:	00c001c4 	movi	r3,7
    85c0:	1940170e 	bge	r3,r5,8620 <___vfiprintf_internal_r+0xe24>
    85c4:	1000101e 	bne	r2,zero,8608 <___vfiprintf_internal_r+0xe0c>
    85c8:	d8802517 	ldw	r2,148(sp)
    85cc:	14c11616 	blt	r2,r19,8a28 <___vfiprintf_internal_r+0x122c>
    85d0:	d9002417 	ldw	r4,144(sp)
    85d4:	2089883a 	add	r4,r4,r2
    85d8:	d9002415 	stw	r4,144(sp)
    85dc:	003e1806 	br	7e40 <__alt_data_end+0xfffe8a40>
    85e0:	d9801a04 	addi	r6,sp,104
    85e4:	b80b883a 	mov	r5,r23
    85e8:	a809883a 	mov	r4,r21
    85ec:	00076e80 	call	76e8 <__sprint_r.part.0>
    85f0:	103fba1e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    85f4:	d9001b17 	ldw	r4,108(sp)
    85f8:	d8801c17 	ldw	r2,112(sp)
    85fc:	d811883a 	mov	r8,sp
    8600:	21400044 	addi	r5,r4,1
    8604:	003fd606 	br	8560 <__alt_data_end+0xfffe9160>
    8608:	d9402017 	ldw	r5,128(sp)
    860c:	d9002117 	ldw	r4,132(sp)
    8610:	d9801a04 	addi	r6,sp,104
    8614:	00076e80 	call	76e8 <__sprint_r.part.0>
    8618:	103fb01e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    861c:	d8801c17 	ldw	r2,112(sp)
    8620:	d8c02517 	ldw	r3,148(sp)
    8624:	1cc0010e 	bge	r3,r19,862c <___vfiprintf_internal_r+0xe30>
    8628:	9807883a 	mov	r3,r19
    862c:	d9002417 	ldw	r4,144(sp)
    8630:	20c9883a 	add	r4,r4,r3
    8634:	d9002415 	stw	r4,144(sp)
    8638:	103e0126 	beq	r2,zero,7e40 <__alt_data_end+0xfffe8a40>
    863c:	d9402017 	ldw	r5,128(sp)
    8640:	d9002117 	ldw	r4,132(sp)
    8644:	d9801a04 	addi	r6,sp,104
    8648:	00076e80 	call	76e8 <__sprint_r.part.0>
    864c:	103dfc26 	beq	r2,zero,7e40 <__alt_data_end+0xfffe8a40>
    8650:	003fa206 	br	84dc <__alt_data_end+0xfffe90dc>
    8654:	d9402017 	ldw	r5,128(sp)
    8658:	d9002117 	ldw	r4,132(sp)
    865c:	d9801a04 	addi	r6,sp,104
    8660:	d9c02b15 	stw	r7,172(sp)
    8664:	00076e80 	call	76e8 <__sprint_r.part.0>
    8668:	d9c02b17 	ldw	r7,172(sp)
    866c:	103f9b1e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    8670:	d9001b17 	ldw	r4,108(sp)
    8674:	d8801c17 	ldw	r2,112(sp)
    8678:	d811883a 	mov	r8,sp
    867c:	21800044 	addi	r6,r4,1
    8680:	003dbf06 	br	7d80 <__alt_data_end+0xfffe8980>
    8684:	1000d81e 	bne	r2,zero,89e8 <___vfiprintf_internal_r+0x11ec>
    8688:	d9001d87 	ldb	r4,118(sp)
    868c:	20000a26 	beq	r4,zero,86b8 <___vfiprintf_internal_r+0xebc>
    8690:	00800044 	movi	r2,1
    8694:	d9001d84 	addi	r4,sp,118
    8698:	100b883a 	mov	r5,r2
    869c:	d9000015 	stw	r4,0(sp)
    86a0:	d8800115 	stw	r2,4(sp)
    86a4:	d811883a 	mov	r8,sp
    86a8:	2809883a 	mov	r4,r5
    86ac:	42000204 	addi	r8,r8,8
    86b0:	29400044 	addi	r5,r5,1
    86b4:	003d9506 	br	7d0c <__alt_data_end+0xfffe890c>
    86b8:	3800fd26 	beq	r7,zero,8ab0 <___vfiprintf_internal_r+0x12b4>
    86bc:	00800084 	movi	r2,2
    86c0:	d9001d04 	addi	r4,sp,116
    86c4:	d9000015 	stw	r4,0(sp)
    86c8:	d8800115 	stw	r2,4(sp)
    86cc:	01400044 	movi	r5,1
    86d0:	d811883a 	mov	r8,sp
    86d4:	2809883a 	mov	r4,r5
    86d8:	42000204 	addi	r8,r8,8
    86dc:	29400044 	addi	r5,r5,1
    86e0:	003f4606 	br	83fc <__alt_data_end+0xfffe8ffc>
    86e4:	d8802517 	ldw	r2,148(sp)
    86e8:	14c0010e 	bge	r2,r19,86f0 <___vfiprintf_internal_r+0xef4>
    86ec:	9805883a 	mov	r2,r19
    86f0:	d9402417 	ldw	r5,144(sp)
    86f4:	288b883a 	add	r5,r5,r2
    86f8:	d9402415 	stw	r5,144(sp)
    86fc:	003dd006 	br	7e40 <__alt_data_end+0xfffe8a40>
    8700:	d8001d85 	stb	zero,118(sp)
    8704:	80005d16 	blt	r16,zero,887c <___vfiprintf_internal_r+0x1080>
    8708:	00ffdfc4 	movi	r3,-129
    870c:	9d04b03a 	or	r2,r19,r20
    8710:	88e2703a 	and	r17,r17,r3
    8714:	103d3726 	beq	r2,zero,7bf4 <__alt_data_end+0xfffe87f4>
    8718:	002b883a 	mov	r21,zero
    871c:	d9002617 	ldw	r4,152(sp)
    8720:	ddc01a04 	addi	r23,sp,104
    8724:	988003cc 	andi	r2,r19,15
    8728:	a006973a 	slli	r3,r20,28
    872c:	2085883a 	add	r2,r4,r2
    8730:	9826d13a 	srli	r19,r19,4
    8734:	10800003 	ldbu	r2,0(r2)
    8738:	a028d13a 	srli	r20,r20,4
    873c:	bdffffc4 	addi	r23,r23,-1
    8740:	1ce6b03a 	or	r19,r3,r19
    8744:	b8800005 	stb	r2,0(r23)
    8748:	9d04b03a 	or	r2,r19,r20
    874c:	103ff51e 	bne	r2,zero,8724 <__alt_data_end+0xfffe9324>
    8750:	d8801e17 	ldw	r2,120(sp)
    8754:	15e9c83a 	sub	r20,r2,r23
    8758:	003d2b06 	br	7c08 <__alt_data_end+0xfffe8808>
    875c:	d9402017 	ldw	r5,128(sp)
    8760:	d9002117 	ldw	r4,132(sp)
    8764:	d9801a04 	addi	r6,sp,104
    8768:	00076e80 	call	76e8 <__sprint_r.part.0>
    876c:	103f5b1e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    8770:	d8801c17 	ldw	r2,112(sp)
    8774:	d811883a 	mov	r8,sp
    8778:	003f6706 	br	8518 <__alt_data_end+0xfffe9118>
    877c:	d9402017 	ldw	r5,128(sp)
    8780:	d9002117 	ldw	r4,132(sp)
    8784:	d9801a04 	addi	r6,sp,104
    8788:	00076e80 	call	76e8 <__sprint_r.part.0>
    878c:	103f531e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    8790:	d811883a 	mov	r8,sp
    8794:	003cd906 	br	7afc <__alt_data_end+0xfffe86fc>
    8798:	10803fcc 	andi	r2,r2,255
    879c:	1080201c 	xori	r2,r2,128
    87a0:	10bfe004 	addi	r2,r2,-128
    87a4:	00c00c04 	movi	r3,48
    87a8:	10ffe926 	beq	r2,r3,8750 <__alt_data_end+0xfffe9350>
    87ac:	b8ffffc5 	stb	r3,-1(r23)
    87b0:	d8c01e17 	ldw	r3,120(sp)
    87b4:	b8bfffc4 	addi	r2,r23,-1
    87b8:	102f883a 	mov	r23,r2
    87bc:	18a9c83a 	sub	r20,r3,r2
    87c0:	003d1106 	br	7c08 <__alt_data_end+0xfffe8808>
    87c4:	d9402017 	ldw	r5,128(sp)
    87c8:	d9002117 	ldw	r4,132(sp)
    87cc:	d9801a04 	addi	r6,sp,104
    87d0:	d8c02a15 	stw	r3,168(sp)
    87d4:	d9c02b15 	stw	r7,172(sp)
    87d8:	00076e80 	call	76e8 <__sprint_r.part.0>
    87dc:	d8c02a17 	ldw	r3,168(sp)
    87e0:	d9c02b17 	ldw	r7,172(sp)
    87e4:	103f3d1e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    87e8:	d9001b17 	ldw	r4,108(sp)
    87ec:	d8801c17 	ldw	r2,112(sp)
    87f0:	d811883a 	mov	r8,sp
    87f4:	21400044 	addi	r5,r4,1
    87f8:	003d4406 	br	7d0c <__alt_data_end+0xfffe890c>
    87fc:	d9402017 	ldw	r5,128(sp)
    8800:	d9002117 	ldw	r4,132(sp)
    8804:	d9801a04 	addi	r6,sp,104
    8808:	d8c02a15 	stw	r3,168(sp)
    880c:	00076e80 	call	76e8 <__sprint_r.part.0>
    8810:	d8c02a17 	ldw	r3,168(sp)
    8814:	103f311e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    8818:	d9001b17 	ldw	r4,108(sp)
    881c:	d8801c17 	ldw	r2,112(sp)
    8820:	d811883a 	mov	r8,sp
    8824:	21400044 	addi	r5,r4,1
    8828:	003ef406 	br	83fc <__alt_data_end+0xfffe8ffc>
    882c:	1000bd1e 	bne	r2,zero,8b24 <___vfiprintf_internal_r+0x1328>
    8830:	01400044 	movi	r5,1
    8834:	0009883a 	mov	r4,zero
    8838:	d811883a 	mov	r8,sp
    883c:	003ef106 	br	8404 <__alt_data_end+0xfffe9004>
    8840:	d9402017 	ldw	r5,128(sp)
    8844:	d9002117 	ldw	r4,132(sp)
    8848:	d9801a04 	addi	r6,sp,104
    884c:	00076e80 	call	76e8 <__sprint_r.part.0>
    8850:	103f221e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    8854:	d9401b17 	ldw	r5,108(sp)
    8858:	d8801c17 	ldw	r2,112(sp)
    885c:	d811883a 	mov	r8,sp
    8860:	29400044 	addi	r5,r5,1
    8864:	003d6206 	br	7df0 <__alt_data_end+0xfffe89f0>
    8868:	01400074 	movhi	r5,1
    886c:	29402404 	addi	r5,r5,144
    8870:	d9402615 	stw	r5,152(sp)
    8874:	d8c02215 	stw	r3,136(sp)
    8878:	1023883a 	mov	r17,r2
    887c:	9d04b03a 	or	r2,r19,r20
    8880:	103fa51e 	bne	r2,zero,8718 <__alt_data_end+0xfffe9318>
    8884:	002b883a 	mov	r21,zero
    8888:	00800084 	movi	r2,2
    888c:	003e4a06 	br	81b8 <__alt_data_end+0xfffe8db8>
    8890:	01400074 	movhi	r5,1
    8894:	29402404 	addi	r5,r5,144
    8898:	002b883a 	mov	r21,zero
    889c:	d9402615 	stw	r5,152(sp)
    88a0:	003f9e06 	br	871c <__alt_data_end+0xfffe931c>
    88a4:	d9402217 	ldw	r5,136(sp)
    88a8:	d8001d85 	stb	zero,118(sp)
    88ac:	0029883a 	mov	r20,zero
    88b0:	28800104 	addi	r2,r5,4
    88b4:	2cc00017 	ldw	r19,0(r5)
    88b8:	803e3a16 	blt	r16,zero,81a4 <__alt_data_end+0xfffe8da4>
    88bc:	00ffdfc4 	movi	r3,-129
    88c0:	d8802215 	stw	r2,136(sp)
    88c4:	88e2703a 	and	r17,r17,r3
    88c8:	002b883a 	mov	r21,zero
    88cc:	983e9b26 	beq	r19,zero,833c <__alt_data_end+0xfffe8f3c>
    88d0:	00800244 	movi	r2,9
    88d4:	14fdc936 	bltu	r2,r19,7ffc <__alt_data_end+0xfffe8bfc>
    88d8:	003e9a06 	br	8344 <__alt_data_end+0xfffe8f44>
    88dc:	00800c04 	movi	r2,48
    88e0:	d8c01d45 	stb	r3,117(sp)
    88e4:	d8801d05 	stb	r2,116(sp)
    88e8:	d8001d85 	stb	zero,118(sp)
    88ec:	88c00094 	ori	r3,r17,2
    88f0:	80009c16 	blt	r16,zero,8b64 <___vfiprintf_internal_r+0x1368>
    88f4:	00bfdfc4 	movi	r2,-129
    88f8:	88a2703a 	and	r17,r17,r2
    88fc:	8c400094 	ori	r17,r17,2
    8900:	002b883a 	mov	r21,zero
    8904:	003f8506 	br	871c <__alt_data_end+0xfffe931c>
    8908:	b029883a 	mov	r20,r22
    890c:	003c0b06 	br	793c <__alt_data_end+0xfffe853c>
    8910:	04e7c83a 	sub	r19,zero,r19
    8914:	05400b44 	movi	r21,45
    8918:	9804c03a 	cmpne	r2,r19,zero
    891c:	0529c83a 	sub	r20,zero,r20
    8920:	dd401d85 	stb	r21,118(sp)
    8924:	a0a9c83a 	sub	r20,r20,r2
    8928:	80009716 	blt	r16,zero,8b88 <___vfiprintf_internal_r+0x138c>
    892c:	00bfdfc4 	movi	r2,-129
    8930:	88a2703a 	and	r17,r17,r2
    8934:	003db006 	br	7ff8 <__alt_data_end+0xfffe8bf8>
    8938:	b0c00007 	ldb	r3,0(r22)
    893c:	003c0c06 	br	7970 <__alt_data_end+0xfffe8570>
    8940:	8880100c 	andi	r2,r17,64
    8944:	d8001d85 	stb	zero,118(sp)
    8948:	1000461e 	bne	r2,zero,8a64 <___vfiprintf_internal_r+0x1268>
    894c:	d9002217 	ldw	r4,136(sp)
    8950:	0029883a 	mov	r20,zero
    8954:	20800104 	addi	r2,r4,4
    8958:	24c00017 	ldw	r19,0(r4)
    895c:	803df80e 	bge	r16,zero,8140 <__alt_data_end+0xfffe8d40>
    8960:	9d06b03a 	or	r3,r19,r20
    8964:	d8802215 	stw	r2,136(sp)
    8968:	183d5e1e 	bne	r3,zero,7ee4 <__alt_data_end+0xfffe8ae4>
    896c:	002b883a 	mov	r21,zero
    8970:	0005883a 	mov	r2,zero
    8974:	003e1006 	br	81b8 <__alt_data_end+0xfffe8db8>
    8978:	8880040c 	andi	r2,r17,16
    897c:	1000321e 	bne	r2,zero,8a48 <___vfiprintf_internal_r+0x124c>
    8980:	8c40100c 	andi	r17,r17,64
    8984:	88008d26 	beq	r17,zero,8bbc <___vfiprintf_internal_r+0x13c0>
    8988:	d9402217 	ldw	r5,136(sp)
    898c:	d8c02417 	ldw	r3,144(sp)
    8990:	28800017 	ldw	r2,0(r5)
    8994:	29400104 	addi	r5,r5,4
    8998:	d9402215 	stw	r5,136(sp)
    899c:	10c0000d 	sth	r3,0(r2)
    89a0:	003bca06 	br	78cc <__alt_data_end+0xfffe84cc>
    89a4:	8880100c 	andi	r2,r17,64
    89a8:	10003a26 	beq	r2,zero,8a94 <___vfiprintf_internal_r+0x1298>
    89ac:	d8802217 	ldw	r2,136(sp)
    89b0:	14c0000f 	ldh	r19,0(r2)
    89b4:	10800104 	addi	r2,r2,4
    89b8:	d8802215 	stw	r2,136(sp)
    89bc:	9829d7fa 	srai	r20,r19,31
    89c0:	a005883a 	mov	r2,r20
    89c4:	003d8506 	br	7fdc <__alt_data_end+0xfffe8bdc>
    89c8:	8880100c 	andi	r2,r17,64
    89cc:	10002b26 	beq	r2,zero,8a7c <___vfiprintf_internal_r+0x1280>
    89d0:	d8802217 	ldw	r2,136(sp)
    89d4:	0029883a 	mov	r20,zero
    89d8:	14c0000b 	ldhu	r19,0(r2)
    89dc:	10800104 	addi	r2,r2,4
    89e0:	d8802215 	stw	r2,136(sp)
    89e4:	003d5d06 	br	7f5c <__alt_data_end+0xfffe8b5c>
    89e8:	d9402017 	ldw	r5,128(sp)
    89ec:	d9002117 	ldw	r4,132(sp)
    89f0:	d9801a04 	addi	r6,sp,104
    89f4:	d8c02a15 	stw	r3,168(sp)
    89f8:	d9c02b15 	stw	r7,172(sp)
    89fc:	00076e80 	call	76e8 <__sprint_r.part.0>
    8a00:	d8c02a17 	ldw	r3,168(sp)
    8a04:	d9c02b17 	ldw	r7,172(sp)
    8a08:	103eb41e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    8a0c:	d9001b17 	ldw	r4,108(sp)
    8a10:	d8801c17 	ldw	r2,112(sp)
    8a14:	d811883a 	mov	r8,sp
    8a18:	21400044 	addi	r5,r4,1
    8a1c:	003e6706 	br	83bc <__alt_data_end+0xfffe8fbc>
    8a20:	00bfffc4 	movi	r2,-1
    8a24:	003c4a06 	br	7b50 <__alt_data_end+0xfffe8750>
    8a28:	9805883a 	mov	r2,r19
    8a2c:	003ee806 	br	85d0 <__alt_data_end+0xfffe91d0>
    8a30:	d8c02217 	ldw	r3,136(sp)
    8a34:	0029883a 	mov	r20,zero
    8a38:	18800104 	addi	r2,r3,4
    8a3c:	1cc0000b 	ldhu	r19,0(r3)
    8a40:	803f9e0e 	bge	r16,zero,88bc <__alt_data_end+0xfffe94bc>
    8a44:	003dd706 	br	81a4 <__alt_data_end+0xfffe8da4>
    8a48:	d8c02217 	ldw	r3,136(sp)
    8a4c:	d9002417 	ldw	r4,144(sp)
    8a50:	18800017 	ldw	r2,0(r3)
    8a54:	18c00104 	addi	r3,r3,4
    8a58:	d8c02215 	stw	r3,136(sp)
    8a5c:	11000015 	stw	r4,0(r2)
    8a60:	003b9a06 	br	78cc <__alt_data_end+0xfffe84cc>
    8a64:	d8c02217 	ldw	r3,136(sp)
    8a68:	0029883a 	mov	r20,zero
    8a6c:	18800104 	addi	r2,r3,4
    8a70:	1cc0000b 	ldhu	r19,0(r3)
    8a74:	803db20e 	bge	r16,zero,8140 <__alt_data_end+0xfffe8d40>
    8a78:	003fb906 	br	8960 <__alt_data_end+0xfffe9560>
    8a7c:	d9002217 	ldw	r4,136(sp)
    8a80:	0029883a 	mov	r20,zero
    8a84:	24c00017 	ldw	r19,0(r4)
    8a88:	21000104 	addi	r4,r4,4
    8a8c:	d9002215 	stw	r4,136(sp)
    8a90:	003d3206 	br	7f5c <__alt_data_end+0xfffe8b5c>
    8a94:	d8c02217 	ldw	r3,136(sp)
    8a98:	1cc00017 	ldw	r19,0(r3)
    8a9c:	18c00104 	addi	r3,r3,4
    8aa0:	d8c02215 	stw	r3,136(sp)
    8aa4:	9829d7fa 	srai	r20,r19,31
    8aa8:	a005883a 	mov	r2,r20
    8aac:	003d4b06 	br	7fdc <__alt_data_end+0xfffe8bdc>
    8ab0:	0009883a 	mov	r4,zero
    8ab4:	01400044 	movi	r5,1
    8ab8:	d811883a 	mov	r8,sp
    8abc:	003e4f06 	br	83fc <__alt_data_end+0xfffe8ffc>
    8ac0:	d8c02215 	stw	r3,136(sp)
    8ac4:	002b883a 	mov	r21,zero
    8ac8:	003db806 	br	81ac <__alt_data_end+0xfffe8dac>
    8acc:	d811883a 	mov	r8,sp
    8ad0:	003e9606 	br	852c <__alt_data_end+0xfffe912c>
    8ad4:	01000074 	movhi	r4,1
    8ad8:	21008504 	addi	r4,r4,532
    8adc:	d9002315 	stw	r4,140(sp)
    8ae0:	003e6306 	br	8470 <__alt_data_end+0xfffe9070>
    8ae4:	b0c00043 	ldbu	r3,1(r22)
    8ae8:	8c400814 	ori	r17,r17,32
    8aec:	b5800044 	addi	r22,r22,1
    8af0:	18c03fcc 	andi	r3,r3,255
    8af4:	18c0201c 	xori	r3,r3,128
    8af8:	18ffe004 	addi	r3,r3,-128
    8afc:	003b9c06 	br	7970 <__alt_data_end+0xfffe8570>
    8b00:	b809883a 	mov	r4,r23
    8b04:	da002a15 	stw	r8,168(sp)
    8b08:	00076500 	call	7650 <strlen>
    8b0c:	1029883a 	mov	r20,r2
    8b10:	dd401d83 	ldbu	r21,118(sp)
    8b14:	df002215 	stw	fp,136(sp)
    8b18:	0021883a 	mov	r16,zero
    8b1c:	da002a17 	ldw	r8,168(sp)
    8b20:	003c3906 	br	7c08 <__alt_data_end+0xfffe8808>
    8b24:	d9402017 	ldw	r5,128(sp)
    8b28:	d9002117 	ldw	r4,132(sp)
    8b2c:	d9801a04 	addi	r6,sp,104
    8b30:	00076e80 	call	76e8 <__sprint_r.part.0>
    8b34:	103e691e 	bne	r2,zero,84dc <__alt_data_end+0xfffe90dc>
    8b38:	d9001b17 	ldw	r4,108(sp)
    8b3c:	d8801c17 	ldw	r2,112(sp)
    8b40:	d811883a 	mov	r8,sp
    8b44:	21400044 	addi	r5,r4,1
    8b48:	003e2e06 	br	8404 <__alt_data_end+0xfffe9004>
    8b4c:	01000074 	movhi	r4,1
    8b50:	21008904 	addi	r4,r4,548
    8b54:	d9002315 	stw	r4,140(sp)
    8b58:	d9001b17 	ldw	r4,108(sp)
    8b5c:	21000044 	addi	r4,r4,1
    8b60:	003c5e06 	br	7cdc <__alt_data_end+0xfffe88dc>
    8b64:	002b883a 	mov	r21,zero
    8b68:	00800084 	movi	r2,2
    8b6c:	10803fcc 	andi	r2,r2,255
    8b70:	01000044 	movi	r4,1
    8b74:	11002b26 	beq	r2,r4,8c24 <___vfiprintf_internal_r+0x1428>
    8b78:	01000084 	movi	r4,2
    8b7c:	11002b1e 	bne	r2,r4,8c2c <___vfiprintf_internal_r+0x1430>
    8b80:	1823883a 	mov	r17,r3
    8b84:	003ee506 	br	871c <__alt_data_end+0xfffe931c>
    8b88:	8807883a 	mov	r3,r17
    8b8c:	00800044 	movi	r2,1
    8b90:	003ff606 	br	8b6c <__alt_data_end+0xfffe976c>
    8b94:	00800184 	movi	r2,6
    8b98:	1400012e 	bgeu	r2,r16,8ba0 <___vfiprintf_internal_r+0x13a4>
    8b9c:	1021883a 	mov	r16,r2
    8ba0:	8029883a 	mov	r20,r16
    8ba4:	8027883a 	mov	r19,r16
    8ba8:	80002216 	blt	r16,zero,8c34 <___vfiprintf_internal_r+0x1438>
    8bac:	05c00074 	movhi	r23,1
    8bb0:	df002215 	stw	fp,136(sp)
    8bb4:	bdc02904 	addi	r23,r23,164
    8bb8:	003cfb06 	br	7fa8 <__alt_data_end+0xfffe8ba8>
    8bbc:	d9002217 	ldw	r4,136(sp)
    8bc0:	d9402417 	ldw	r5,144(sp)
    8bc4:	20800017 	ldw	r2,0(r4)
    8bc8:	21000104 	addi	r4,r4,4
    8bcc:	d9002215 	stw	r4,136(sp)
    8bd0:	11400015 	stw	r5,0(r2)
    8bd4:	003b3d06 	br	78cc <__alt_data_end+0xfffe84cc>
    8bd8:	01400074 	movhi	r5,1
    8bdc:	29408904 	addi	r5,r5,548
    8be0:	d9402315 	stw	r5,140(sp)
    8be4:	d9401b17 	ldw	r5,108(sp)
    8be8:	29400044 	addi	r5,r5,1
    8bec:	003e6d06 	br	85a4 <__alt_data_end+0xfffe91a4>
    8bf0:	8029883a 	mov	r20,r16
    8bf4:	dd401d83 	ldbu	r21,118(sp)
    8bf8:	df002215 	stw	fp,136(sp)
    8bfc:	0021883a 	mov	r16,zero
    8c00:	003c0106 	br	7c08 <__alt_data_end+0xfffe8808>
    8c04:	00c00074 	movhi	r3,1
    8c08:	18c08504 	addi	r3,r3,532
    8c0c:	d8c02315 	stw	r3,140(sp)
    8c10:	280d883a 	mov	r6,r5
    8c14:	003c6906 	br	7dbc <__alt_data_end+0xfffe89bc>
    8c18:	802d883a 	mov	r22,r16
    8c1c:	0021883a 	mov	r16,zero
    8c20:	003b5406 	br	7974 <__alt_data_end+0xfffe8574>
    8c24:	1823883a 	mov	r17,r3
    8c28:	003cf306 	br	7ff8 <__alt_data_end+0xfffe8bf8>
    8c2c:	1823883a 	mov	r17,r3
    8c30:	003cad06 	br	7ee8 <__alt_data_end+0xfffe8ae8>
    8c34:	0027883a 	mov	r19,zero
    8c38:	003fdc06 	br	8bac <__alt_data_end+0xfffe97ac>
    8c3c:	d9402217 	ldw	r5,136(sp)
    8c40:	8005883a 	mov	r2,r16
    8c44:	b0c00043 	ldbu	r3,1(r22)
    8c48:	2c000017 	ldw	r16,0(r5)
    8c4c:	29000104 	addi	r4,r5,4
    8c50:	d9002215 	stw	r4,136(sp)
    8c54:	102d883a 	mov	r22,r2
    8c58:	803fa50e 	bge	r16,zero,8af0 <__alt_data_end+0xfffe96f0>
    8c5c:	18c03fcc 	andi	r3,r3,255
    8c60:	18c0201c 	xori	r3,r3,128
    8c64:	043fffc4 	movi	r16,-1
    8c68:	18ffe004 	addi	r3,r3,-128
    8c6c:	003b4006 	br	7970 <__alt_data_end+0xfffe8570>
    8c70:	d9402303 	ldbu	r5,140(sp)
    8c74:	d9401d85 	stb	r5,118(sp)
    8c78:	003cae06 	br	7f34 <__alt_data_end+0xfffe8b34>
    8c7c:	d8c02303 	ldbu	r3,140(sp)
    8c80:	d8c01d85 	stb	r3,118(sp)
    8c84:	003d1406 	br	80d8 <__alt_data_end+0xfffe8cd8>
    8c88:	d8c02303 	ldbu	r3,140(sp)
    8c8c:	d8c01d85 	stb	r3,118(sp)
    8c90:	003cca06 	br	7fbc <__alt_data_end+0xfffe8bbc>
    8c94:	8880004c 	andi	r2,r17,1
    8c98:	002b883a 	mov	r21,zero
    8c9c:	10000526 	beq	r2,zero,8cb4 <___vfiprintf_internal_r+0x14b8>
    8ca0:	00800c04 	movi	r2,48
    8ca4:	d88019c5 	stb	r2,103(sp)
    8ca8:	dd002817 	ldw	r20,160(sp)
    8cac:	ddc019c4 	addi	r23,sp,103
    8cb0:	003bd506 	br	7c08 <__alt_data_end+0xfffe8808>
    8cb4:	0029883a 	mov	r20,zero
    8cb8:	ddc01a04 	addi	r23,sp,104
    8cbc:	003bd206 	br	7c08 <__alt_data_end+0xfffe8808>
    8cc0:	d9002303 	ldbu	r4,140(sp)
    8cc4:	d9001d85 	stb	r4,118(sp)
    8cc8:	003da606 	br	8364 <__alt_data_end+0xfffe8f64>
    8ccc:	d8c02303 	ldbu	r3,140(sp)
    8cd0:	d8c01d85 	stb	r3,118(sp)
    8cd4:	003c7606 	br	7eb0 <__alt_data_end+0xfffe8ab0>
    8cd8:	d8c02303 	ldbu	r3,140(sp)
    8cdc:	d8c01d85 	stb	r3,118(sp)
    8ce0:	003c6506 	br	7e78 <__alt_data_end+0xfffe8a78>
    8ce4:	d9002303 	ldbu	r4,140(sp)
    8ce8:	d9001d85 	stb	r4,118(sp)
    8cec:	003d3d06 	br	81e4 <__alt_data_end+0xfffe8de4>
    8cf0:	d8c02303 	ldbu	r3,140(sp)
    8cf4:	d8c01d85 	stb	r3,118(sp)
    8cf8:	003d1d06 	br	8170 <__alt_data_end+0xfffe8d70>
    8cfc:	d8c02303 	ldbu	r3,140(sp)
    8d00:	d8c01d85 	stb	r3,118(sp)
    8d04:	003d0306 	br	8114 <__alt_data_end+0xfffe8d14>

00008d08 <__vfiprintf_internal>:
    8d08:	00800074 	movhi	r2,1
    8d0c:	10878604 	addi	r2,r2,7704
    8d10:	300f883a 	mov	r7,r6
    8d14:	280d883a 	mov	r6,r5
    8d18:	200b883a 	mov	r5,r4
    8d1c:	11000017 	ldw	r4,0(r2)
    8d20:	00077fc1 	jmpi	77fc <___vfiprintf_internal_r>

00008d24 <__sbprintf>:
    8d24:	2880030b 	ldhu	r2,12(r5)
    8d28:	2ac01917 	ldw	r11,100(r5)
    8d2c:	2a80038b 	ldhu	r10,14(r5)
    8d30:	2a400717 	ldw	r9,28(r5)
    8d34:	2a000917 	ldw	r8,36(r5)
    8d38:	defee204 	addi	sp,sp,-1144
    8d3c:	00c10004 	movi	r3,1024
    8d40:	dc011a15 	stw	r16,1128(sp)
    8d44:	10bfff4c 	andi	r2,r2,65533
    8d48:	2821883a 	mov	r16,r5
    8d4c:	d8cb883a 	add	r5,sp,r3
    8d50:	dc811c15 	stw	r18,1136(sp)
    8d54:	dc411b15 	stw	r17,1132(sp)
    8d58:	dfc11d15 	stw	ra,1140(sp)
    8d5c:	2025883a 	mov	r18,r4
    8d60:	d881030d 	sth	r2,1036(sp)
    8d64:	dac11915 	stw	r11,1124(sp)
    8d68:	da81038d 	sth	r10,1038(sp)
    8d6c:	da410715 	stw	r9,1052(sp)
    8d70:	da010915 	stw	r8,1060(sp)
    8d74:	dec10015 	stw	sp,1024(sp)
    8d78:	dec10415 	stw	sp,1040(sp)
    8d7c:	d8c10215 	stw	r3,1032(sp)
    8d80:	d8c10515 	stw	r3,1044(sp)
    8d84:	d8010615 	stw	zero,1048(sp)
    8d88:	00077fc0 	call	77fc <___vfiprintf_internal_r>
    8d8c:	1023883a 	mov	r17,r2
    8d90:	10000416 	blt	r2,zero,8da4 <__sbprintf+0x80>
    8d94:	d9410004 	addi	r5,sp,1024
    8d98:	9009883a 	mov	r4,r18
    8d9c:	0004ac80 	call	4ac8 <_fflush_r>
    8da0:	10000d1e 	bne	r2,zero,8dd8 <__sbprintf+0xb4>
    8da4:	d881030b 	ldhu	r2,1036(sp)
    8da8:	1080100c 	andi	r2,r2,64
    8dac:	10000326 	beq	r2,zero,8dbc <__sbprintf+0x98>
    8db0:	8080030b 	ldhu	r2,12(r16)
    8db4:	10801014 	ori	r2,r2,64
    8db8:	8080030d 	sth	r2,12(r16)
    8dbc:	8805883a 	mov	r2,r17
    8dc0:	dfc11d17 	ldw	ra,1140(sp)
    8dc4:	dc811c17 	ldw	r18,1136(sp)
    8dc8:	dc411b17 	ldw	r17,1132(sp)
    8dcc:	dc011a17 	ldw	r16,1128(sp)
    8dd0:	dec11e04 	addi	sp,sp,1144
    8dd4:	f800283a 	ret
    8dd8:	047fffc4 	movi	r17,-1
    8ddc:	003ff106 	br	8da4 <__alt_data_end+0xfffe99a4>

00008de0 <_write_r>:
    8de0:	defffd04 	addi	sp,sp,-12
    8de4:	2805883a 	mov	r2,r5
    8de8:	dc000015 	stw	r16,0(sp)
    8dec:	04000074 	movhi	r16,1
    8df0:	dc400115 	stw	r17,4(sp)
    8df4:	300b883a 	mov	r5,r6
    8df8:	840e5d04 	addi	r16,r16,14708
    8dfc:	2023883a 	mov	r17,r4
    8e00:	380d883a 	mov	r6,r7
    8e04:	1009883a 	mov	r4,r2
    8e08:	dfc00215 	stw	ra,8(sp)
    8e0c:	80000015 	stw	zero,0(r16)
    8e10:	000e4280 	call	e428 <write>
    8e14:	00ffffc4 	movi	r3,-1
    8e18:	10c00526 	beq	r2,r3,8e30 <_write_r+0x50>
    8e1c:	dfc00217 	ldw	ra,8(sp)
    8e20:	dc400117 	ldw	r17,4(sp)
    8e24:	dc000017 	ldw	r16,0(sp)
    8e28:	dec00304 	addi	sp,sp,12
    8e2c:	f800283a 	ret
    8e30:	80c00017 	ldw	r3,0(r16)
    8e34:	183ff926 	beq	r3,zero,8e1c <__alt_data_end+0xfffe9a1c>
    8e38:	88c00015 	stw	r3,0(r17)
    8e3c:	003ff706 	br	8e1c <__alt_data_end+0xfffe9a1c>

00008e40 <_close_r>:
    8e40:	defffd04 	addi	sp,sp,-12
    8e44:	dc000015 	stw	r16,0(sp)
    8e48:	04000074 	movhi	r16,1
    8e4c:	dc400115 	stw	r17,4(sp)
    8e50:	840e5d04 	addi	r16,r16,14708
    8e54:	2023883a 	mov	r17,r4
    8e58:	2809883a 	mov	r4,r5
    8e5c:	dfc00215 	stw	ra,8(sp)
    8e60:	80000015 	stw	zero,0(r16)
    8e64:	000d9300 	call	d930 <close>
    8e68:	00ffffc4 	movi	r3,-1
    8e6c:	10c00526 	beq	r2,r3,8e84 <_close_r+0x44>
    8e70:	dfc00217 	ldw	ra,8(sp)
    8e74:	dc400117 	ldw	r17,4(sp)
    8e78:	dc000017 	ldw	r16,0(sp)
    8e7c:	dec00304 	addi	sp,sp,12
    8e80:	f800283a 	ret
    8e84:	80c00017 	ldw	r3,0(r16)
    8e88:	183ff926 	beq	r3,zero,8e70 <__alt_data_end+0xfffe9a70>
    8e8c:	88c00015 	stw	r3,0(r17)
    8e90:	003ff706 	br	8e70 <__alt_data_end+0xfffe9a70>

00008e94 <_calloc_r>:
    8e94:	defffe04 	addi	sp,sp,-8
    8e98:	2805883a 	mov	r2,r5
    8e9c:	dc000015 	stw	r16,0(sp)
    8ea0:	300b883a 	mov	r5,r6
    8ea4:	2021883a 	mov	r16,r4
    8ea8:	1009883a 	mov	r4,r2
    8eac:	dfc00115 	stw	ra,4(sp)
    8eb0:	000b0280 	call	b028 <__mulsi3>
    8eb4:	100b883a 	mov	r5,r2
    8eb8:	8009883a 	mov	r4,r16
    8ebc:	00057580 	call	5758 <_malloc_r>
    8ec0:	10002926 	beq	r2,zero,8f68 <_calloc_r+0xd4>
    8ec4:	11bfff17 	ldw	r6,-4(r2)
    8ec8:	1021883a 	mov	r16,r2
    8ecc:	00bfff04 	movi	r2,-4
    8ed0:	308c703a 	and	r6,r6,r2
    8ed4:	00c00904 	movi	r3,36
    8ed8:	308d883a 	add	r6,r6,r2
    8edc:	19801636 	bltu	r3,r6,8f38 <_calloc_r+0xa4>
    8ee0:	008004c4 	movi	r2,19
    8ee4:	11800b2e 	bgeu	r2,r6,8f14 <_calloc_r+0x80>
    8ee8:	80000015 	stw	zero,0(r16)
    8eec:	80000115 	stw	zero,4(r16)
    8ef0:	008006c4 	movi	r2,27
    8ef4:	11801a2e 	bgeu	r2,r6,8f60 <_calloc_r+0xcc>
    8ef8:	80000215 	stw	zero,8(r16)
    8efc:	80000315 	stw	zero,12(r16)
    8f00:	30c0151e 	bne	r6,r3,8f58 <_calloc_r+0xc4>
    8f04:	80000415 	stw	zero,16(r16)
    8f08:	80800604 	addi	r2,r16,24
    8f0c:	80000515 	stw	zero,20(r16)
    8f10:	00000106 	br	8f18 <_calloc_r+0x84>
    8f14:	8005883a 	mov	r2,r16
    8f18:	10000015 	stw	zero,0(r2)
    8f1c:	10000115 	stw	zero,4(r2)
    8f20:	10000215 	stw	zero,8(r2)
    8f24:	8005883a 	mov	r2,r16
    8f28:	dfc00117 	ldw	ra,4(sp)
    8f2c:	dc000017 	ldw	r16,0(sp)
    8f30:	dec00204 	addi	sp,sp,8
    8f34:	f800283a 	ret
    8f38:	000b883a 	mov	r5,zero
    8f3c:	8009883a 	mov	r4,r16
    8f40:	00061900 	call	6190 <memset>
    8f44:	8005883a 	mov	r2,r16
    8f48:	dfc00117 	ldw	ra,4(sp)
    8f4c:	dc000017 	ldw	r16,0(sp)
    8f50:	dec00204 	addi	sp,sp,8
    8f54:	f800283a 	ret
    8f58:	80800404 	addi	r2,r16,16
    8f5c:	003fee06 	br	8f18 <__alt_data_end+0xfffe9b18>
    8f60:	80800204 	addi	r2,r16,8
    8f64:	003fec06 	br	8f18 <__alt_data_end+0xfffe9b18>
    8f68:	0005883a 	mov	r2,zero
    8f6c:	003fee06 	br	8f28 <__alt_data_end+0xfffe9b28>

00008f70 <_fclose_r>:
    8f70:	28003926 	beq	r5,zero,9058 <_fclose_r+0xe8>
    8f74:	defffc04 	addi	sp,sp,-16
    8f78:	dc400115 	stw	r17,4(sp)
    8f7c:	dc000015 	stw	r16,0(sp)
    8f80:	dfc00315 	stw	ra,12(sp)
    8f84:	dc800215 	stw	r18,8(sp)
    8f88:	2023883a 	mov	r17,r4
    8f8c:	2821883a 	mov	r16,r5
    8f90:	20000226 	beq	r4,zero,8f9c <_fclose_r+0x2c>
    8f94:	20800e17 	ldw	r2,56(r4)
    8f98:	10002726 	beq	r2,zero,9038 <_fclose_r+0xc8>
    8f9c:	8080030f 	ldh	r2,12(r16)
    8fa0:	1000071e 	bne	r2,zero,8fc0 <_fclose_r+0x50>
    8fa4:	0005883a 	mov	r2,zero
    8fa8:	dfc00317 	ldw	ra,12(sp)
    8fac:	dc800217 	ldw	r18,8(sp)
    8fb0:	dc400117 	ldw	r17,4(sp)
    8fb4:	dc000017 	ldw	r16,0(sp)
    8fb8:	dec00404 	addi	sp,sp,16
    8fbc:	f800283a 	ret
    8fc0:	800b883a 	mov	r5,r16
    8fc4:	8809883a 	mov	r4,r17
    8fc8:	00048ac0 	call	48ac <__sflush_r>
    8fcc:	1025883a 	mov	r18,r2
    8fd0:	80800b17 	ldw	r2,44(r16)
    8fd4:	10000426 	beq	r2,zero,8fe8 <_fclose_r+0x78>
    8fd8:	81400717 	ldw	r5,28(r16)
    8fdc:	8809883a 	mov	r4,r17
    8fe0:	103ee83a 	callr	r2
    8fe4:	10001616 	blt	r2,zero,9040 <_fclose_r+0xd0>
    8fe8:	8080030b 	ldhu	r2,12(r16)
    8fec:	1080200c 	andi	r2,r2,128
    8ff0:	1000151e 	bne	r2,zero,9048 <_fclose_r+0xd8>
    8ff4:	81400c17 	ldw	r5,48(r16)
    8ff8:	28000526 	beq	r5,zero,9010 <_fclose_r+0xa0>
    8ffc:	80801004 	addi	r2,r16,64
    9000:	28800226 	beq	r5,r2,900c <_fclose_r+0x9c>
    9004:	8809883a 	mov	r4,r17
    9008:	00050280 	call	5028 <_free_r>
    900c:	80000c15 	stw	zero,48(r16)
    9010:	81401117 	ldw	r5,68(r16)
    9014:	28000326 	beq	r5,zero,9024 <_fclose_r+0xb4>
    9018:	8809883a 	mov	r4,r17
    901c:	00050280 	call	5028 <_free_r>
    9020:	80001115 	stw	zero,68(r16)
    9024:	0004ec40 	call	4ec4 <__sfp_lock_acquire>
    9028:	8000030d 	sth	zero,12(r16)
    902c:	0004ec80 	call	4ec8 <__sfp_lock_release>
    9030:	9005883a 	mov	r2,r18
    9034:	003fdc06 	br	8fa8 <__alt_data_end+0xfffe9ba8>
    9038:	0004eb40 	call	4eb4 <__sinit>
    903c:	003fd706 	br	8f9c <__alt_data_end+0xfffe9b9c>
    9040:	04bfffc4 	movi	r18,-1
    9044:	003fe806 	br	8fe8 <__alt_data_end+0xfffe9be8>
    9048:	81400417 	ldw	r5,16(r16)
    904c:	8809883a 	mov	r4,r17
    9050:	00050280 	call	5028 <_free_r>
    9054:	003fe706 	br	8ff4 <__alt_data_end+0xfffe9bf4>
    9058:	0005883a 	mov	r2,zero
    905c:	f800283a 	ret

00009060 <fclose>:
    9060:	00800074 	movhi	r2,1
    9064:	10878604 	addi	r2,r2,7704
    9068:	200b883a 	mov	r5,r4
    906c:	11000017 	ldw	r4,0(r2)
    9070:	0008f701 	jmpi	8f70 <_fclose_r>

00009074 <__fputwc>:
    9074:	defff804 	addi	sp,sp,-32
    9078:	dcc00415 	stw	r19,16(sp)
    907c:	dc800315 	stw	r18,12(sp)
    9080:	dc000115 	stw	r16,4(sp)
    9084:	dfc00715 	stw	ra,28(sp)
    9088:	dd400615 	stw	r21,24(sp)
    908c:	dd000515 	stw	r20,20(sp)
    9090:	dc400215 	stw	r17,8(sp)
    9094:	2027883a 	mov	r19,r4
    9098:	2825883a 	mov	r18,r5
    909c:	3021883a 	mov	r16,r6
    90a0:	00055480 	call	5548 <__locale_mb_cur_max>
    90a4:	00c00044 	movi	r3,1
    90a8:	10c03e26 	beq	r2,r3,91a4 <__fputwc+0x130>
    90ac:	81c01704 	addi	r7,r16,92
    90b0:	900d883a 	mov	r6,r18
    90b4:	d80b883a 	mov	r5,sp
    90b8:	9809883a 	mov	r4,r19
    90bc:	000a0cc0 	call	a0cc <_wcrtomb_r>
    90c0:	1029883a 	mov	r20,r2
    90c4:	00bfffc4 	movi	r2,-1
    90c8:	a0802026 	beq	r20,r2,914c <__fputwc+0xd8>
    90cc:	d9400003 	ldbu	r5,0(sp)
    90d0:	a0001c26 	beq	r20,zero,9144 <__fputwc+0xd0>
    90d4:	0023883a 	mov	r17,zero
    90d8:	05400284 	movi	r21,10
    90dc:	00000906 	br	9104 <__fputwc+0x90>
    90e0:	80800017 	ldw	r2,0(r16)
    90e4:	11400005 	stb	r5,0(r2)
    90e8:	80c00017 	ldw	r3,0(r16)
    90ec:	18c00044 	addi	r3,r3,1
    90f0:	80c00015 	stw	r3,0(r16)
    90f4:	8c400044 	addi	r17,r17,1
    90f8:	dc45883a 	add	r2,sp,r17
    90fc:	8d00112e 	bgeu	r17,r20,9144 <__fputwc+0xd0>
    9100:	11400003 	ldbu	r5,0(r2)
    9104:	80c00217 	ldw	r3,8(r16)
    9108:	18ffffc4 	addi	r3,r3,-1
    910c:	80c00215 	stw	r3,8(r16)
    9110:	183ff30e 	bge	r3,zero,90e0 <__alt_data_end+0xfffe9ce0>
    9114:	80800617 	ldw	r2,24(r16)
    9118:	18801916 	blt	r3,r2,9180 <__fputwc+0x10c>
    911c:	80800017 	ldw	r2,0(r16)
    9120:	11400005 	stb	r5,0(r2)
    9124:	80800017 	ldw	r2,0(r16)
    9128:	10c00003 	ldbu	r3,0(r2)
    912c:	10800044 	addi	r2,r2,1
    9130:	1d402326 	beq	r3,r21,91c0 <__fputwc+0x14c>
    9134:	80800015 	stw	r2,0(r16)
    9138:	8c400044 	addi	r17,r17,1
    913c:	dc45883a 	add	r2,sp,r17
    9140:	8d3fef36 	bltu	r17,r20,9100 <__alt_data_end+0xfffe9d00>
    9144:	9005883a 	mov	r2,r18
    9148:	00000406 	br	915c <__fputwc+0xe8>
    914c:	80c0030b 	ldhu	r3,12(r16)
    9150:	a005883a 	mov	r2,r20
    9154:	18c01014 	ori	r3,r3,64
    9158:	80c0030d 	sth	r3,12(r16)
    915c:	dfc00717 	ldw	ra,28(sp)
    9160:	dd400617 	ldw	r21,24(sp)
    9164:	dd000517 	ldw	r20,20(sp)
    9168:	dcc00417 	ldw	r19,16(sp)
    916c:	dc800317 	ldw	r18,12(sp)
    9170:	dc400217 	ldw	r17,8(sp)
    9174:	dc000117 	ldw	r16,4(sp)
    9178:	dec00804 	addi	sp,sp,32
    917c:	f800283a 	ret
    9180:	800d883a 	mov	r6,r16
    9184:	29403fcc 	andi	r5,r5,255
    9188:	9809883a 	mov	r4,r19
    918c:	0009f740 	call	9f74 <__swbuf_r>
    9190:	10bfffe0 	cmpeqi	r2,r2,-1
    9194:	10803fcc 	andi	r2,r2,255
    9198:	103fd626 	beq	r2,zero,90f4 <__alt_data_end+0xfffe9cf4>
    919c:	00bfffc4 	movi	r2,-1
    91a0:	003fee06 	br	915c <__alt_data_end+0xfffe9d5c>
    91a4:	90ffffc4 	addi	r3,r18,-1
    91a8:	01003f84 	movi	r4,254
    91ac:	20ffbf36 	bltu	r4,r3,90ac <__alt_data_end+0xfffe9cac>
    91b0:	900b883a 	mov	r5,r18
    91b4:	dc800005 	stb	r18,0(sp)
    91b8:	1029883a 	mov	r20,r2
    91bc:	003fc506 	br	90d4 <__alt_data_end+0xfffe9cd4>
    91c0:	800d883a 	mov	r6,r16
    91c4:	a80b883a 	mov	r5,r21
    91c8:	9809883a 	mov	r4,r19
    91cc:	0009f740 	call	9f74 <__swbuf_r>
    91d0:	10bfffe0 	cmpeqi	r2,r2,-1
    91d4:	003fef06 	br	9194 <__alt_data_end+0xfffe9d94>

000091d8 <_fputwc_r>:
    91d8:	3080030b 	ldhu	r2,12(r6)
    91dc:	10c8000c 	andi	r3,r2,8192
    91e0:	1800051e 	bne	r3,zero,91f8 <_fputwc_r+0x20>
    91e4:	30c01917 	ldw	r3,100(r6)
    91e8:	10880014 	ori	r2,r2,8192
    91ec:	3080030d 	sth	r2,12(r6)
    91f0:	18880014 	ori	r2,r3,8192
    91f4:	30801915 	stw	r2,100(r6)
    91f8:	00090741 	jmpi	9074 <__fputwc>

000091fc <fputwc>:
    91fc:	00800074 	movhi	r2,1
    9200:	defffc04 	addi	sp,sp,-16
    9204:	10878604 	addi	r2,r2,7704
    9208:	dc000115 	stw	r16,4(sp)
    920c:	14000017 	ldw	r16,0(r2)
    9210:	dc400215 	stw	r17,8(sp)
    9214:	dfc00315 	stw	ra,12(sp)
    9218:	2023883a 	mov	r17,r4
    921c:	80000226 	beq	r16,zero,9228 <fputwc+0x2c>
    9220:	80800e17 	ldw	r2,56(r16)
    9224:	10001026 	beq	r2,zero,9268 <fputwc+0x6c>
    9228:	2880030b 	ldhu	r2,12(r5)
    922c:	10c8000c 	andi	r3,r2,8192
    9230:	1800051e 	bne	r3,zero,9248 <fputwc+0x4c>
    9234:	28c01917 	ldw	r3,100(r5)
    9238:	10880014 	ori	r2,r2,8192
    923c:	2880030d 	sth	r2,12(r5)
    9240:	18880014 	ori	r2,r3,8192
    9244:	28801915 	stw	r2,100(r5)
    9248:	280d883a 	mov	r6,r5
    924c:	8009883a 	mov	r4,r16
    9250:	880b883a 	mov	r5,r17
    9254:	dfc00317 	ldw	ra,12(sp)
    9258:	dc400217 	ldw	r17,8(sp)
    925c:	dc000117 	ldw	r16,4(sp)
    9260:	dec00404 	addi	sp,sp,16
    9264:	00090741 	jmpi	9074 <__fputwc>
    9268:	8009883a 	mov	r4,r16
    926c:	d9400015 	stw	r5,0(sp)
    9270:	0004eb40 	call	4eb4 <__sinit>
    9274:	d9400017 	ldw	r5,0(sp)
    9278:	003feb06 	br	9228 <__alt_data_end+0xfffe9e28>

0000927c <_fstat_r>:
    927c:	defffd04 	addi	sp,sp,-12
    9280:	2805883a 	mov	r2,r5
    9284:	dc000015 	stw	r16,0(sp)
    9288:	04000074 	movhi	r16,1
    928c:	dc400115 	stw	r17,4(sp)
    9290:	840e5d04 	addi	r16,r16,14708
    9294:	2023883a 	mov	r17,r4
    9298:	300b883a 	mov	r5,r6
    929c:	1009883a 	mov	r4,r2
    92a0:	dfc00215 	stw	ra,8(sp)
    92a4:	80000015 	stw	zero,0(r16)
    92a8:	000da700 	call	da70 <fstat>
    92ac:	00ffffc4 	movi	r3,-1
    92b0:	10c00526 	beq	r2,r3,92c8 <_fstat_r+0x4c>
    92b4:	dfc00217 	ldw	ra,8(sp)
    92b8:	dc400117 	ldw	r17,4(sp)
    92bc:	dc000017 	ldw	r16,0(sp)
    92c0:	dec00304 	addi	sp,sp,12
    92c4:	f800283a 	ret
    92c8:	80c00017 	ldw	r3,0(r16)
    92cc:	183ff926 	beq	r3,zero,92b4 <__alt_data_end+0xfffe9eb4>
    92d0:	88c00015 	stw	r3,0(r17)
    92d4:	003ff706 	br	92b4 <__alt_data_end+0xfffe9eb4>

000092d8 <__sfvwrite_r>:
    92d8:	30800217 	ldw	r2,8(r6)
    92dc:	10006726 	beq	r2,zero,947c <__sfvwrite_r+0x1a4>
    92e0:	28c0030b 	ldhu	r3,12(r5)
    92e4:	defff404 	addi	sp,sp,-48
    92e8:	dd400715 	stw	r21,28(sp)
    92ec:	dd000615 	stw	r20,24(sp)
    92f0:	dc000215 	stw	r16,8(sp)
    92f4:	dfc00b15 	stw	ra,44(sp)
    92f8:	df000a15 	stw	fp,40(sp)
    92fc:	ddc00915 	stw	r23,36(sp)
    9300:	dd800815 	stw	r22,32(sp)
    9304:	dcc00515 	stw	r19,20(sp)
    9308:	dc800415 	stw	r18,16(sp)
    930c:	dc400315 	stw	r17,12(sp)
    9310:	1880020c 	andi	r2,r3,8
    9314:	2821883a 	mov	r16,r5
    9318:	202b883a 	mov	r21,r4
    931c:	3029883a 	mov	r20,r6
    9320:	10002726 	beq	r2,zero,93c0 <__sfvwrite_r+0xe8>
    9324:	28800417 	ldw	r2,16(r5)
    9328:	10002526 	beq	r2,zero,93c0 <__sfvwrite_r+0xe8>
    932c:	1880008c 	andi	r2,r3,2
    9330:	a4400017 	ldw	r17,0(r20)
    9334:	10002a26 	beq	r2,zero,93e0 <__sfvwrite_r+0x108>
    9338:	05a00034 	movhi	r22,32768
    933c:	0027883a 	mov	r19,zero
    9340:	0025883a 	mov	r18,zero
    9344:	b5bf0004 	addi	r22,r22,-1024
    9348:	980d883a 	mov	r6,r19
    934c:	a809883a 	mov	r4,r21
    9350:	90004626 	beq	r18,zero,946c <__sfvwrite_r+0x194>
    9354:	900f883a 	mov	r7,r18
    9358:	b480022e 	bgeu	r22,r18,9364 <__sfvwrite_r+0x8c>
    935c:	01e00034 	movhi	r7,32768
    9360:	39ff0004 	addi	r7,r7,-1024
    9364:	80800917 	ldw	r2,36(r16)
    9368:	81400717 	ldw	r5,28(r16)
    936c:	103ee83a 	callr	r2
    9370:	00805a0e 	bge	zero,r2,94dc <__sfvwrite_r+0x204>
    9374:	a0c00217 	ldw	r3,8(r20)
    9378:	98a7883a 	add	r19,r19,r2
    937c:	90a5c83a 	sub	r18,r18,r2
    9380:	1885c83a 	sub	r2,r3,r2
    9384:	a0800215 	stw	r2,8(r20)
    9388:	103fef1e 	bne	r2,zero,9348 <__alt_data_end+0xfffe9f48>
    938c:	0005883a 	mov	r2,zero
    9390:	dfc00b17 	ldw	ra,44(sp)
    9394:	df000a17 	ldw	fp,40(sp)
    9398:	ddc00917 	ldw	r23,36(sp)
    939c:	dd800817 	ldw	r22,32(sp)
    93a0:	dd400717 	ldw	r21,28(sp)
    93a4:	dd000617 	ldw	r20,24(sp)
    93a8:	dcc00517 	ldw	r19,20(sp)
    93ac:	dc800417 	ldw	r18,16(sp)
    93b0:	dc400317 	ldw	r17,12(sp)
    93b4:	dc000217 	ldw	r16,8(sp)
    93b8:	dec00c04 	addi	sp,sp,48
    93bc:	f800283a 	ret
    93c0:	800b883a 	mov	r5,r16
    93c4:	a809883a 	mov	r4,r21
    93c8:	0002ea80 	call	2ea8 <__swsetup_r>
    93cc:	1000ee1e 	bne	r2,zero,9788 <__sfvwrite_r+0x4b0>
    93d0:	80c0030b 	ldhu	r3,12(r16)
    93d4:	a4400017 	ldw	r17,0(r20)
    93d8:	1880008c 	andi	r2,r3,2
    93dc:	103fd61e 	bne	r2,zero,9338 <__alt_data_end+0xfffe9f38>
    93e0:	1880004c 	andi	r2,r3,1
    93e4:	1000421e 	bne	r2,zero,94f0 <__sfvwrite_r+0x218>
    93e8:	0039883a 	mov	fp,zero
    93ec:	0025883a 	mov	r18,zero
    93f0:	90001a26 	beq	r18,zero,945c <__sfvwrite_r+0x184>
    93f4:	1880800c 	andi	r2,r3,512
    93f8:	84c00217 	ldw	r19,8(r16)
    93fc:	10002126 	beq	r2,zero,9484 <__sfvwrite_r+0x1ac>
    9400:	982f883a 	mov	r23,r19
    9404:	94c09636 	bltu	r18,r19,9660 <__sfvwrite_r+0x388>
    9408:	1881200c 	andi	r2,r3,1152
    940c:	1000a11e 	bne	r2,zero,9694 <__sfvwrite_r+0x3bc>
    9410:	81000017 	ldw	r4,0(r16)
    9414:	b80d883a 	mov	r6,r23
    9418:	e00b883a 	mov	r5,fp
    941c:	00098540 	call	9854 <memmove>
    9420:	80c00217 	ldw	r3,8(r16)
    9424:	81000017 	ldw	r4,0(r16)
    9428:	9005883a 	mov	r2,r18
    942c:	1ce7c83a 	sub	r19,r3,r19
    9430:	25cf883a 	add	r7,r4,r23
    9434:	84c00215 	stw	r19,8(r16)
    9438:	81c00015 	stw	r7,0(r16)
    943c:	a0c00217 	ldw	r3,8(r20)
    9440:	e0b9883a 	add	fp,fp,r2
    9444:	90a5c83a 	sub	r18,r18,r2
    9448:	18a7c83a 	sub	r19,r3,r2
    944c:	a4c00215 	stw	r19,8(r20)
    9450:	983fce26 	beq	r19,zero,938c <__alt_data_end+0xfffe9f8c>
    9454:	80c0030b 	ldhu	r3,12(r16)
    9458:	903fe61e 	bne	r18,zero,93f4 <__alt_data_end+0xfffe9ff4>
    945c:	8f000017 	ldw	fp,0(r17)
    9460:	8c800117 	ldw	r18,4(r17)
    9464:	8c400204 	addi	r17,r17,8
    9468:	003fe106 	br	93f0 <__alt_data_end+0xfffe9ff0>
    946c:	8cc00017 	ldw	r19,0(r17)
    9470:	8c800117 	ldw	r18,4(r17)
    9474:	8c400204 	addi	r17,r17,8
    9478:	003fb306 	br	9348 <__alt_data_end+0xfffe9f48>
    947c:	0005883a 	mov	r2,zero
    9480:	f800283a 	ret
    9484:	81000017 	ldw	r4,0(r16)
    9488:	80800417 	ldw	r2,16(r16)
    948c:	11005a36 	bltu	r2,r4,95f8 <__sfvwrite_r+0x320>
    9490:	85c00517 	ldw	r23,20(r16)
    9494:	95c05836 	bltu	r18,r23,95f8 <__sfvwrite_r+0x320>
    9498:	00a00034 	movhi	r2,32768
    949c:	10bfffc4 	addi	r2,r2,-1
    94a0:	9009883a 	mov	r4,r18
    94a4:	1480012e 	bgeu	r2,r18,94ac <__sfvwrite_r+0x1d4>
    94a8:	1009883a 	mov	r4,r2
    94ac:	b80b883a 	mov	r5,r23
    94b0:	000ae740 	call	ae74 <__divsi3>
    94b4:	b80b883a 	mov	r5,r23
    94b8:	1009883a 	mov	r4,r2
    94bc:	000b0280 	call	b028 <__mulsi3>
    94c0:	81400717 	ldw	r5,28(r16)
    94c4:	80c00917 	ldw	r3,36(r16)
    94c8:	100f883a 	mov	r7,r2
    94cc:	e00d883a 	mov	r6,fp
    94d0:	a809883a 	mov	r4,r21
    94d4:	183ee83a 	callr	r3
    94d8:	00bfd816 	blt	zero,r2,943c <__alt_data_end+0xfffea03c>
    94dc:	8080030b 	ldhu	r2,12(r16)
    94e0:	10801014 	ori	r2,r2,64
    94e4:	8080030d 	sth	r2,12(r16)
    94e8:	00bfffc4 	movi	r2,-1
    94ec:	003fa806 	br	9390 <__alt_data_end+0xfffe9f90>
    94f0:	0027883a 	mov	r19,zero
    94f4:	0011883a 	mov	r8,zero
    94f8:	0039883a 	mov	fp,zero
    94fc:	0025883a 	mov	r18,zero
    9500:	90001f26 	beq	r18,zero,9580 <__sfvwrite_r+0x2a8>
    9504:	40005a26 	beq	r8,zero,9670 <__sfvwrite_r+0x398>
    9508:	982d883a 	mov	r22,r19
    950c:	94c0012e 	bgeu	r18,r19,9514 <__sfvwrite_r+0x23c>
    9510:	902d883a 	mov	r22,r18
    9514:	81000017 	ldw	r4,0(r16)
    9518:	80800417 	ldw	r2,16(r16)
    951c:	b02f883a 	mov	r23,r22
    9520:	81c00517 	ldw	r7,20(r16)
    9524:	1100032e 	bgeu	r2,r4,9534 <__sfvwrite_r+0x25c>
    9528:	80c00217 	ldw	r3,8(r16)
    952c:	38c7883a 	add	r3,r7,r3
    9530:	1d801816 	blt	r3,r22,9594 <__sfvwrite_r+0x2bc>
    9534:	b1c03e16 	blt	r22,r7,9630 <__sfvwrite_r+0x358>
    9538:	80800917 	ldw	r2,36(r16)
    953c:	81400717 	ldw	r5,28(r16)
    9540:	e00d883a 	mov	r6,fp
    9544:	da000115 	stw	r8,4(sp)
    9548:	a809883a 	mov	r4,r21
    954c:	103ee83a 	callr	r2
    9550:	102f883a 	mov	r23,r2
    9554:	da000117 	ldw	r8,4(sp)
    9558:	00bfe00e 	bge	zero,r2,94dc <__alt_data_end+0xfffea0dc>
    955c:	9de7c83a 	sub	r19,r19,r23
    9560:	98001f26 	beq	r19,zero,95e0 <__sfvwrite_r+0x308>
    9564:	a0800217 	ldw	r2,8(r20)
    9568:	e5f9883a 	add	fp,fp,r23
    956c:	95e5c83a 	sub	r18,r18,r23
    9570:	15efc83a 	sub	r23,r2,r23
    9574:	a5c00215 	stw	r23,8(r20)
    9578:	b83f8426 	beq	r23,zero,938c <__alt_data_end+0xfffe9f8c>
    957c:	903fe11e 	bne	r18,zero,9504 <__alt_data_end+0xfffea104>
    9580:	8f000017 	ldw	fp,0(r17)
    9584:	8c800117 	ldw	r18,4(r17)
    9588:	0011883a 	mov	r8,zero
    958c:	8c400204 	addi	r17,r17,8
    9590:	003fdb06 	br	9500 <__alt_data_end+0xfffea100>
    9594:	180d883a 	mov	r6,r3
    9598:	e00b883a 	mov	r5,fp
    959c:	da000115 	stw	r8,4(sp)
    95a0:	d8c00015 	stw	r3,0(sp)
    95a4:	00098540 	call	9854 <memmove>
    95a8:	d8c00017 	ldw	r3,0(sp)
    95ac:	80800017 	ldw	r2,0(r16)
    95b0:	800b883a 	mov	r5,r16
    95b4:	a809883a 	mov	r4,r21
    95b8:	10c5883a 	add	r2,r2,r3
    95bc:	80800015 	stw	r2,0(r16)
    95c0:	d8c00015 	stw	r3,0(sp)
    95c4:	0004ac80 	call	4ac8 <_fflush_r>
    95c8:	d8c00017 	ldw	r3,0(sp)
    95cc:	da000117 	ldw	r8,4(sp)
    95d0:	103fc21e 	bne	r2,zero,94dc <__alt_data_end+0xfffea0dc>
    95d4:	182f883a 	mov	r23,r3
    95d8:	9de7c83a 	sub	r19,r19,r23
    95dc:	983fe11e 	bne	r19,zero,9564 <__alt_data_end+0xfffea164>
    95e0:	800b883a 	mov	r5,r16
    95e4:	a809883a 	mov	r4,r21
    95e8:	0004ac80 	call	4ac8 <_fflush_r>
    95ec:	103fbb1e 	bne	r2,zero,94dc <__alt_data_end+0xfffea0dc>
    95f0:	0011883a 	mov	r8,zero
    95f4:	003fdb06 	br	9564 <__alt_data_end+0xfffea164>
    95f8:	94c0012e 	bgeu	r18,r19,9600 <__sfvwrite_r+0x328>
    95fc:	9027883a 	mov	r19,r18
    9600:	980d883a 	mov	r6,r19
    9604:	e00b883a 	mov	r5,fp
    9608:	00098540 	call	9854 <memmove>
    960c:	80800217 	ldw	r2,8(r16)
    9610:	80c00017 	ldw	r3,0(r16)
    9614:	14c5c83a 	sub	r2,r2,r19
    9618:	1cc7883a 	add	r3,r3,r19
    961c:	80800215 	stw	r2,8(r16)
    9620:	80c00015 	stw	r3,0(r16)
    9624:	10004326 	beq	r2,zero,9734 <__sfvwrite_r+0x45c>
    9628:	9805883a 	mov	r2,r19
    962c:	003f8306 	br	943c <__alt_data_end+0xfffea03c>
    9630:	b00d883a 	mov	r6,r22
    9634:	e00b883a 	mov	r5,fp
    9638:	da000115 	stw	r8,4(sp)
    963c:	00098540 	call	9854 <memmove>
    9640:	80800217 	ldw	r2,8(r16)
    9644:	80c00017 	ldw	r3,0(r16)
    9648:	da000117 	ldw	r8,4(sp)
    964c:	1585c83a 	sub	r2,r2,r22
    9650:	1dad883a 	add	r22,r3,r22
    9654:	80800215 	stw	r2,8(r16)
    9658:	85800015 	stw	r22,0(r16)
    965c:	003fbf06 	br	955c <__alt_data_end+0xfffea15c>
    9660:	81000017 	ldw	r4,0(r16)
    9664:	9027883a 	mov	r19,r18
    9668:	902f883a 	mov	r23,r18
    966c:	003f6906 	br	9414 <__alt_data_end+0xfffea014>
    9670:	900d883a 	mov	r6,r18
    9674:	01400284 	movi	r5,10
    9678:	e009883a 	mov	r4,fp
    967c:	0005f640 	call	5f64 <memchr>
    9680:	10003e26 	beq	r2,zero,977c <__sfvwrite_r+0x4a4>
    9684:	10800044 	addi	r2,r2,1
    9688:	1727c83a 	sub	r19,r2,fp
    968c:	02000044 	movi	r8,1
    9690:	003f9d06 	br	9508 <__alt_data_end+0xfffea108>
    9694:	80800517 	ldw	r2,20(r16)
    9698:	81400417 	ldw	r5,16(r16)
    969c:	81c00017 	ldw	r7,0(r16)
    96a0:	10a7883a 	add	r19,r2,r2
    96a4:	9885883a 	add	r2,r19,r2
    96a8:	1026d7fa 	srli	r19,r2,31
    96ac:	396dc83a 	sub	r22,r7,r5
    96b0:	b1000044 	addi	r4,r22,1
    96b4:	9885883a 	add	r2,r19,r2
    96b8:	1027d07a 	srai	r19,r2,1
    96bc:	2485883a 	add	r2,r4,r18
    96c0:	980d883a 	mov	r6,r19
    96c4:	9880022e 	bgeu	r19,r2,96d0 <__sfvwrite_r+0x3f8>
    96c8:	1027883a 	mov	r19,r2
    96cc:	100d883a 	mov	r6,r2
    96d0:	18c1000c 	andi	r3,r3,1024
    96d4:	18001c26 	beq	r3,zero,9748 <__sfvwrite_r+0x470>
    96d8:	300b883a 	mov	r5,r6
    96dc:	a809883a 	mov	r4,r21
    96e0:	00057580 	call	5758 <_malloc_r>
    96e4:	102f883a 	mov	r23,r2
    96e8:	10002926 	beq	r2,zero,9790 <__sfvwrite_r+0x4b8>
    96ec:	81400417 	ldw	r5,16(r16)
    96f0:	b00d883a 	mov	r6,r22
    96f4:	1009883a 	mov	r4,r2
    96f8:	00060480 	call	6048 <memcpy>
    96fc:	8080030b 	ldhu	r2,12(r16)
    9700:	00fedfc4 	movi	r3,-1153
    9704:	10c4703a 	and	r2,r2,r3
    9708:	10802014 	ori	r2,r2,128
    970c:	8080030d 	sth	r2,12(r16)
    9710:	bd89883a 	add	r4,r23,r22
    9714:	9d8fc83a 	sub	r7,r19,r22
    9718:	85c00415 	stw	r23,16(r16)
    971c:	84c00515 	stw	r19,20(r16)
    9720:	81000015 	stw	r4,0(r16)
    9724:	9027883a 	mov	r19,r18
    9728:	81c00215 	stw	r7,8(r16)
    972c:	902f883a 	mov	r23,r18
    9730:	003f3806 	br	9414 <__alt_data_end+0xfffea014>
    9734:	800b883a 	mov	r5,r16
    9738:	a809883a 	mov	r4,r21
    973c:	0004ac80 	call	4ac8 <_fflush_r>
    9740:	103fb926 	beq	r2,zero,9628 <__alt_data_end+0xfffea228>
    9744:	003f6506 	br	94dc <__alt_data_end+0xfffea0dc>
    9748:	a809883a 	mov	r4,r21
    974c:	0009a100 	call	9a10 <_realloc_r>
    9750:	102f883a 	mov	r23,r2
    9754:	103fee1e 	bne	r2,zero,9710 <__alt_data_end+0xfffea310>
    9758:	81400417 	ldw	r5,16(r16)
    975c:	a809883a 	mov	r4,r21
    9760:	00050280 	call	5028 <_free_r>
    9764:	8080030b 	ldhu	r2,12(r16)
    9768:	00ffdfc4 	movi	r3,-129
    976c:	1884703a 	and	r2,r3,r2
    9770:	00c00304 	movi	r3,12
    9774:	a8c00015 	stw	r3,0(r21)
    9778:	003f5906 	br	94e0 <__alt_data_end+0xfffea0e0>
    977c:	94c00044 	addi	r19,r18,1
    9780:	02000044 	movi	r8,1
    9784:	003f6006 	br	9508 <__alt_data_end+0xfffea108>
    9788:	00bfffc4 	movi	r2,-1
    978c:	003f0006 	br	9390 <__alt_data_end+0xfffe9f90>
    9790:	00800304 	movi	r2,12
    9794:	a8800015 	stw	r2,0(r21)
    9798:	8080030b 	ldhu	r2,12(r16)
    979c:	003f5006 	br	94e0 <__alt_data_end+0xfffea0e0>

000097a0 <_isatty_r>:
    97a0:	defffd04 	addi	sp,sp,-12
    97a4:	dc000015 	stw	r16,0(sp)
    97a8:	04000074 	movhi	r16,1
    97ac:	dc400115 	stw	r17,4(sp)
    97b0:	840e5d04 	addi	r16,r16,14708
    97b4:	2023883a 	mov	r17,r4
    97b8:	2809883a 	mov	r4,r5
    97bc:	dfc00215 	stw	ra,8(sp)
    97c0:	80000015 	stw	zero,0(r16)
    97c4:	000de040 	call	de04 <isatty>
    97c8:	00ffffc4 	movi	r3,-1
    97cc:	10c00526 	beq	r2,r3,97e4 <_isatty_r+0x44>
    97d0:	dfc00217 	ldw	ra,8(sp)
    97d4:	dc400117 	ldw	r17,4(sp)
    97d8:	dc000017 	ldw	r16,0(sp)
    97dc:	dec00304 	addi	sp,sp,12
    97e0:	f800283a 	ret
    97e4:	80c00017 	ldw	r3,0(r16)
    97e8:	183ff926 	beq	r3,zero,97d0 <__alt_data_end+0xfffea3d0>
    97ec:	88c00015 	stw	r3,0(r17)
    97f0:	003ff706 	br	97d0 <__alt_data_end+0xfffea3d0>

000097f4 <_lseek_r>:
    97f4:	defffd04 	addi	sp,sp,-12
    97f8:	2805883a 	mov	r2,r5
    97fc:	dc000015 	stw	r16,0(sp)
    9800:	04000074 	movhi	r16,1
    9804:	dc400115 	stw	r17,4(sp)
    9808:	300b883a 	mov	r5,r6
    980c:	840e5d04 	addi	r16,r16,14708
    9810:	2023883a 	mov	r17,r4
    9814:	380d883a 	mov	r6,r7
    9818:	1009883a 	mov	r4,r2
    981c:	dfc00215 	stw	ra,8(sp)
    9820:	80000015 	stw	zero,0(r16)
    9824:	000dfd80 	call	dfd8 <lseek>
    9828:	00ffffc4 	movi	r3,-1
    982c:	10c00526 	beq	r2,r3,9844 <_lseek_r+0x50>
    9830:	dfc00217 	ldw	ra,8(sp)
    9834:	dc400117 	ldw	r17,4(sp)
    9838:	dc000017 	ldw	r16,0(sp)
    983c:	dec00304 	addi	sp,sp,12
    9840:	f800283a 	ret
    9844:	80c00017 	ldw	r3,0(r16)
    9848:	183ff926 	beq	r3,zero,9830 <__alt_data_end+0xfffea430>
    984c:	88c00015 	stw	r3,0(r17)
    9850:	003ff706 	br	9830 <__alt_data_end+0xfffea430>

00009854 <memmove>:
    9854:	2005883a 	mov	r2,r4
    9858:	29000b2e 	bgeu	r5,r4,9888 <memmove+0x34>
    985c:	298f883a 	add	r7,r5,r6
    9860:	21c0092e 	bgeu	r4,r7,9888 <memmove+0x34>
    9864:	2187883a 	add	r3,r4,r6
    9868:	198bc83a 	sub	r5,r3,r6
    986c:	30004826 	beq	r6,zero,9990 <memmove+0x13c>
    9870:	39ffffc4 	addi	r7,r7,-1
    9874:	39000003 	ldbu	r4,0(r7)
    9878:	18ffffc4 	addi	r3,r3,-1
    987c:	19000005 	stb	r4,0(r3)
    9880:	28fffb1e 	bne	r5,r3,9870 <__alt_data_end+0xfffea470>
    9884:	f800283a 	ret
    9888:	00c003c4 	movi	r3,15
    988c:	1980412e 	bgeu	r3,r6,9994 <memmove+0x140>
    9890:	2886b03a 	or	r3,r5,r2
    9894:	18c000cc 	andi	r3,r3,3
    9898:	1800401e 	bne	r3,zero,999c <memmove+0x148>
    989c:	33fffc04 	addi	r15,r6,-16
    98a0:	781ed13a 	srli	r15,r15,4
    98a4:	28c00104 	addi	r3,r5,4
    98a8:	13400104 	addi	r13,r2,4
    98ac:	781c913a 	slli	r14,r15,4
    98b0:	2b000204 	addi	r12,r5,8
    98b4:	12c00204 	addi	r11,r2,8
    98b8:	73800504 	addi	r14,r14,20
    98bc:	2a800304 	addi	r10,r5,12
    98c0:	12400304 	addi	r9,r2,12
    98c4:	2b9d883a 	add	r14,r5,r14
    98c8:	2811883a 	mov	r8,r5
    98cc:	100f883a 	mov	r7,r2
    98d0:	41000017 	ldw	r4,0(r8)
    98d4:	39c00404 	addi	r7,r7,16
    98d8:	18c00404 	addi	r3,r3,16
    98dc:	393ffc15 	stw	r4,-16(r7)
    98e0:	193ffc17 	ldw	r4,-16(r3)
    98e4:	6b400404 	addi	r13,r13,16
    98e8:	5ac00404 	addi	r11,r11,16
    98ec:	693ffc15 	stw	r4,-16(r13)
    98f0:	61000017 	ldw	r4,0(r12)
    98f4:	4a400404 	addi	r9,r9,16
    98f8:	42000404 	addi	r8,r8,16
    98fc:	593ffc15 	stw	r4,-16(r11)
    9900:	51000017 	ldw	r4,0(r10)
    9904:	63000404 	addi	r12,r12,16
    9908:	52800404 	addi	r10,r10,16
    990c:	493ffc15 	stw	r4,-16(r9)
    9910:	1bbfef1e 	bne	r3,r14,98d0 <__alt_data_end+0xfffea4d0>
    9914:	79000044 	addi	r4,r15,1
    9918:	2008913a 	slli	r4,r4,4
    991c:	328003cc 	andi	r10,r6,15
    9920:	02c000c4 	movi	r11,3
    9924:	1107883a 	add	r3,r2,r4
    9928:	290b883a 	add	r5,r5,r4
    992c:	5a801e2e 	bgeu	r11,r10,99a8 <memmove+0x154>
    9930:	1813883a 	mov	r9,r3
    9934:	2811883a 	mov	r8,r5
    9938:	500f883a 	mov	r7,r10
    993c:	41000017 	ldw	r4,0(r8)
    9940:	4a400104 	addi	r9,r9,4
    9944:	39ffff04 	addi	r7,r7,-4
    9948:	493fff15 	stw	r4,-4(r9)
    994c:	42000104 	addi	r8,r8,4
    9950:	59fffa36 	bltu	r11,r7,993c <__alt_data_end+0xfffea53c>
    9954:	513fff04 	addi	r4,r10,-4
    9958:	2008d0ba 	srli	r4,r4,2
    995c:	318000cc 	andi	r6,r6,3
    9960:	21000044 	addi	r4,r4,1
    9964:	2109883a 	add	r4,r4,r4
    9968:	2109883a 	add	r4,r4,r4
    996c:	1907883a 	add	r3,r3,r4
    9970:	290b883a 	add	r5,r5,r4
    9974:	30000b26 	beq	r6,zero,99a4 <memmove+0x150>
    9978:	198d883a 	add	r6,r3,r6
    997c:	29c00003 	ldbu	r7,0(r5)
    9980:	18c00044 	addi	r3,r3,1
    9984:	29400044 	addi	r5,r5,1
    9988:	19ffffc5 	stb	r7,-1(r3)
    998c:	19bffb1e 	bne	r3,r6,997c <__alt_data_end+0xfffea57c>
    9990:	f800283a 	ret
    9994:	1007883a 	mov	r3,r2
    9998:	003ff606 	br	9974 <__alt_data_end+0xfffea574>
    999c:	1007883a 	mov	r3,r2
    99a0:	003ff506 	br	9978 <__alt_data_end+0xfffea578>
    99a4:	f800283a 	ret
    99a8:	500d883a 	mov	r6,r10
    99ac:	003ff106 	br	9974 <__alt_data_end+0xfffea574>

000099b0 <_read_r>:
    99b0:	defffd04 	addi	sp,sp,-12
    99b4:	2805883a 	mov	r2,r5
    99b8:	dc000015 	stw	r16,0(sp)
    99bc:	04000074 	movhi	r16,1
    99c0:	dc400115 	stw	r17,4(sp)
    99c4:	300b883a 	mov	r5,r6
    99c8:	840e5d04 	addi	r16,r16,14708
    99cc:	2023883a 	mov	r17,r4
    99d0:	380d883a 	mov	r6,r7
    99d4:	1009883a 	mov	r4,r2
    99d8:	dfc00215 	stw	ra,8(sp)
    99dc:	80000015 	stw	zero,0(r16)
    99e0:	000e1b40 	call	e1b4 <read>
    99e4:	00ffffc4 	movi	r3,-1
    99e8:	10c00526 	beq	r2,r3,9a00 <_read_r+0x50>
    99ec:	dfc00217 	ldw	ra,8(sp)
    99f0:	dc400117 	ldw	r17,4(sp)
    99f4:	dc000017 	ldw	r16,0(sp)
    99f8:	dec00304 	addi	sp,sp,12
    99fc:	f800283a 	ret
    9a00:	80c00017 	ldw	r3,0(r16)
    9a04:	183ff926 	beq	r3,zero,99ec <__alt_data_end+0xfffea5ec>
    9a08:	88c00015 	stw	r3,0(r17)
    9a0c:	003ff706 	br	99ec <__alt_data_end+0xfffea5ec>

00009a10 <_realloc_r>:
    9a10:	defff604 	addi	sp,sp,-40
    9a14:	dc800215 	stw	r18,8(sp)
    9a18:	dfc00915 	stw	ra,36(sp)
    9a1c:	df000815 	stw	fp,32(sp)
    9a20:	ddc00715 	stw	r23,28(sp)
    9a24:	dd800615 	stw	r22,24(sp)
    9a28:	dd400515 	stw	r21,20(sp)
    9a2c:	dd000415 	stw	r20,16(sp)
    9a30:	dcc00315 	stw	r19,12(sp)
    9a34:	dc400115 	stw	r17,4(sp)
    9a38:	dc000015 	stw	r16,0(sp)
    9a3c:	3025883a 	mov	r18,r6
    9a40:	2800b726 	beq	r5,zero,9d20 <_realloc_r+0x310>
    9a44:	282b883a 	mov	r21,r5
    9a48:	2029883a 	mov	r20,r4
    9a4c:	000e1300 	call	e130 <__malloc_lock>
    9a50:	a8bfff17 	ldw	r2,-4(r21)
    9a54:	043fff04 	movi	r16,-4
    9a58:	90c002c4 	addi	r3,r18,11
    9a5c:	01000584 	movi	r4,22
    9a60:	acfffe04 	addi	r19,r21,-8
    9a64:	1420703a 	and	r16,r2,r16
    9a68:	20c0332e 	bgeu	r4,r3,9b38 <_realloc_r+0x128>
    9a6c:	047ffe04 	movi	r17,-8
    9a70:	1c62703a 	and	r17,r3,r17
    9a74:	8807883a 	mov	r3,r17
    9a78:	88005816 	blt	r17,zero,9bdc <_realloc_r+0x1cc>
    9a7c:	8c805736 	bltu	r17,r18,9bdc <_realloc_r+0x1cc>
    9a80:	80c0300e 	bge	r16,r3,9b44 <_realloc_r+0x134>
    9a84:	07000074 	movhi	fp,1
    9a88:	e7020104 	addi	fp,fp,2052
    9a8c:	e1c00217 	ldw	r7,8(fp)
    9a90:	9c09883a 	add	r4,r19,r16
    9a94:	22000117 	ldw	r8,4(r4)
    9a98:	21c06326 	beq	r4,r7,9c28 <_realloc_r+0x218>
    9a9c:	017fff84 	movi	r5,-2
    9aa0:	414a703a 	and	r5,r8,r5
    9aa4:	214b883a 	add	r5,r4,r5
    9aa8:	29800117 	ldw	r6,4(r5)
    9aac:	3180004c 	andi	r6,r6,1
    9ab0:	30003f26 	beq	r6,zero,9bb0 <_realloc_r+0x1a0>
    9ab4:	1080004c 	andi	r2,r2,1
    9ab8:	10008326 	beq	r2,zero,9cc8 <_realloc_r+0x2b8>
    9abc:	900b883a 	mov	r5,r18
    9ac0:	a009883a 	mov	r4,r20
    9ac4:	00057580 	call	5758 <_malloc_r>
    9ac8:	1025883a 	mov	r18,r2
    9acc:	10011e26 	beq	r2,zero,9f48 <_realloc_r+0x538>
    9ad0:	a93fff17 	ldw	r4,-4(r21)
    9ad4:	10fffe04 	addi	r3,r2,-8
    9ad8:	00bfff84 	movi	r2,-2
    9adc:	2084703a 	and	r2,r4,r2
    9ae0:	9885883a 	add	r2,r19,r2
    9ae4:	1880ee26 	beq	r3,r2,9ea0 <_realloc_r+0x490>
    9ae8:	81bfff04 	addi	r6,r16,-4
    9aec:	00800904 	movi	r2,36
    9af0:	1180b836 	bltu	r2,r6,9dd4 <_realloc_r+0x3c4>
    9af4:	00c004c4 	movi	r3,19
    9af8:	19809636 	bltu	r3,r6,9d54 <_realloc_r+0x344>
    9afc:	9005883a 	mov	r2,r18
    9b00:	a807883a 	mov	r3,r21
    9b04:	19000017 	ldw	r4,0(r3)
    9b08:	11000015 	stw	r4,0(r2)
    9b0c:	19000117 	ldw	r4,4(r3)
    9b10:	11000115 	stw	r4,4(r2)
    9b14:	18c00217 	ldw	r3,8(r3)
    9b18:	10c00215 	stw	r3,8(r2)
    9b1c:	a80b883a 	mov	r5,r21
    9b20:	a009883a 	mov	r4,r20
    9b24:	00050280 	call	5028 <_free_r>
    9b28:	a009883a 	mov	r4,r20
    9b2c:	000e1540 	call	e154 <__malloc_unlock>
    9b30:	9005883a 	mov	r2,r18
    9b34:	00001206 	br	9b80 <_realloc_r+0x170>
    9b38:	00c00404 	movi	r3,16
    9b3c:	1823883a 	mov	r17,r3
    9b40:	003fce06 	br	9a7c <__alt_data_end+0xfffea67c>
    9b44:	a825883a 	mov	r18,r21
    9b48:	8445c83a 	sub	r2,r16,r17
    9b4c:	00c003c4 	movi	r3,15
    9b50:	18802636 	bltu	r3,r2,9bec <_realloc_r+0x1dc>
    9b54:	99800117 	ldw	r6,4(r19)
    9b58:	9c07883a 	add	r3,r19,r16
    9b5c:	3180004c 	andi	r6,r6,1
    9b60:	3420b03a 	or	r16,r6,r16
    9b64:	9c000115 	stw	r16,4(r19)
    9b68:	18800117 	ldw	r2,4(r3)
    9b6c:	10800054 	ori	r2,r2,1
    9b70:	18800115 	stw	r2,4(r3)
    9b74:	a009883a 	mov	r4,r20
    9b78:	000e1540 	call	e154 <__malloc_unlock>
    9b7c:	9005883a 	mov	r2,r18
    9b80:	dfc00917 	ldw	ra,36(sp)
    9b84:	df000817 	ldw	fp,32(sp)
    9b88:	ddc00717 	ldw	r23,28(sp)
    9b8c:	dd800617 	ldw	r22,24(sp)
    9b90:	dd400517 	ldw	r21,20(sp)
    9b94:	dd000417 	ldw	r20,16(sp)
    9b98:	dcc00317 	ldw	r19,12(sp)
    9b9c:	dc800217 	ldw	r18,8(sp)
    9ba0:	dc400117 	ldw	r17,4(sp)
    9ba4:	dc000017 	ldw	r16,0(sp)
    9ba8:	dec00a04 	addi	sp,sp,40
    9bac:	f800283a 	ret
    9bb0:	017fff04 	movi	r5,-4
    9bb4:	414a703a 	and	r5,r8,r5
    9bb8:	814d883a 	add	r6,r16,r5
    9bbc:	30c01f16 	blt	r6,r3,9c3c <_realloc_r+0x22c>
    9bc0:	20800317 	ldw	r2,12(r4)
    9bc4:	20c00217 	ldw	r3,8(r4)
    9bc8:	a825883a 	mov	r18,r21
    9bcc:	3021883a 	mov	r16,r6
    9bd0:	18800315 	stw	r2,12(r3)
    9bd4:	10c00215 	stw	r3,8(r2)
    9bd8:	003fdb06 	br	9b48 <__alt_data_end+0xfffea748>
    9bdc:	00800304 	movi	r2,12
    9be0:	a0800015 	stw	r2,0(r20)
    9be4:	0005883a 	mov	r2,zero
    9be8:	003fe506 	br	9b80 <__alt_data_end+0xfffea780>
    9bec:	98c00117 	ldw	r3,4(r19)
    9bf0:	9c4b883a 	add	r5,r19,r17
    9bf4:	11000054 	ori	r4,r2,1
    9bf8:	18c0004c 	andi	r3,r3,1
    9bfc:	1c62b03a 	or	r17,r3,r17
    9c00:	9c400115 	stw	r17,4(r19)
    9c04:	29000115 	stw	r4,4(r5)
    9c08:	2885883a 	add	r2,r5,r2
    9c0c:	10c00117 	ldw	r3,4(r2)
    9c10:	29400204 	addi	r5,r5,8
    9c14:	a009883a 	mov	r4,r20
    9c18:	18c00054 	ori	r3,r3,1
    9c1c:	10c00115 	stw	r3,4(r2)
    9c20:	00050280 	call	5028 <_free_r>
    9c24:	003fd306 	br	9b74 <__alt_data_end+0xfffea774>
    9c28:	017fff04 	movi	r5,-4
    9c2c:	414a703a 	and	r5,r8,r5
    9c30:	89800404 	addi	r6,r17,16
    9c34:	8151883a 	add	r8,r16,r5
    9c38:	4180590e 	bge	r8,r6,9da0 <_realloc_r+0x390>
    9c3c:	1080004c 	andi	r2,r2,1
    9c40:	103f9e1e 	bne	r2,zero,9abc <__alt_data_end+0xfffea6bc>
    9c44:	adbffe17 	ldw	r22,-8(r21)
    9c48:	00bfff04 	movi	r2,-4
    9c4c:	9dadc83a 	sub	r22,r19,r22
    9c50:	b1800117 	ldw	r6,4(r22)
    9c54:	3084703a 	and	r2,r6,r2
    9c58:	20002026 	beq	r4,zero,9cdc <_realloc_r+0x2cc>
    9c5c:	80af883a 	add	r23,r16,r2
    9c60:	b96f883a 	add	r23,r23,r5
    9c64:	21c05f26 	beq	r4,r7,9de4 <_realloc_r+0x3d4>
    9c68:	b8c01c16 	blt	r23,r3,9cdc <_realloc_r+0x2cc>
    9c6c:	20800317 	ldw	r2,12(r4)
    9c70:	20c00217 	ldw	r3,8(r4)
    9c74:	81bfff04 	addi	r6,r16,-4
    9c78:	01000904 	movi	r4,36
    9c7c:	18800315 	stw	r2,12(r3)
    9c80:	10c00215 	stw	r3,8(r2)
    9c84:	b0c00217 	ldw	r3,8(r22)
    9c88:	b0800317 	ldw	r2,12(r22)
    9c8c:	b4800204 	addi	r18,r22,8
    9c90:	18800315 	stw	r2,12(r3)
    9c94:	10c00215 	stw	r3,8(r2)
    9c98:	21801b36 	bltu	r4,r6,9d08 <_realloc_r+0x2f8>
    9c9c:	008004c4 	movi	r2,19
    9ca0:	1180352e 	bgeu	r2,r6,9d78 <_realloc_r+0x368>
    9ca4:	a8800017 	ldw	r2,0(r21)
    9ca8:	b0800215 	stw	r2,8(r22)
    9cac:	a8800117 	ldw	r2,4(r21)
    9cb0:	b0800315 	stw	r2,12(r22)
    9cb4:	008006c4 	movi	r2,27
    9cb8:	11807f36 	bltu	r2,r6,9eb8 <_realloc_r+0x4a8>
    9cbc:	b0800404 	addi	r2,r22,16
    9cc0:	ad400204 	addi	r21,r21,8
    9cc4:	00002d06 	br	9d7c <_realloc_r+0x36c>
    9cc8:	adbffe17 	ldw	r22,-8(r21)
    9ccc:	00bfff04 	movi	r2,-4
    9cd0:	9dadc83a 	sub	r22,r19,r22
    9cd4:	b1000117 	ldw	r4,4(r22)
    9cd8:	2084703a 	and	r2,r4,r2
    9cdc:	b03f7726 	beq	r22,zero,9abc <__alt_data_end+0xfffea6bc>
    9ce0:	80af883a 	add	r23,r16,r2
    9ce4:	b8ff7516 	blt	r23,r3,9abc <__alt_data_end+0xfffea6bc>
    9ce8:	b0800317 	ldw	r2,12(r22)
    9cec:	b0c00217 	ldw	r3,8(r22)
    9cf0:	81bfff04 	addi	r6,r16,-4
    9cf4:	01000904 	movi	r4,36
    9cf8:	18800315 	stw	r2,12(r3)
    9cfc:	10c00215 	stw	r3,8(r2)
    9d00:	b4800204 	addi	r18,r22,8
    9d04:	21bfe52e 	bgeu	r4,r6,9c9c <__alt_data_end+0xfffea89c>
    9d08:	a80b883a 	mov	r5,r21
    9d0c:	9009883a 	mov	r4,r18
    9d10:	00098540 	call	9854 <memmove>
    9d14:	b821883a 	mov	r16,r23
    9d18:	b027883a 	mov	r19,r22
    9d1c:	003f8a06 	br	9b48 <__alt_data_end+0xfffea748>
    9d20:	300b883a 	mov	r5,r6
    9d24:	dfc00917 	ldw	ra,36(sp)
    9d28:	df000817 	ldw	fp,32(sp)
    9d2c:	ddc00717 	ldw	r23,28(sp)
    9d30:	dd800617 	ldw	r22,24(sp)
    9d34:	dd400517 	ldw	r21,20(sp)
    9d38:	dd000417 	ldw	r20,16(sp)
    9d3c:	dcc00317 	ldw	r19,12(sp)
    9d40:	dc800217 	ldw	r18,8(sp)
    9d44:	dc400117 	ldw	r17,4(sp)
    9d48:	dc000017 	ldw	r16,0(sp)
    9d4c:	dec00a04 	addi	sp,sp,40
    9d50:	00057581 	jmpi	5758 <_malloc_r>
    9d54:	a8c00017 	ldw	r3,0(r21)
    9d58:	90c00015 	stw	r3,0(r18)
    9d5c:	a8c00117 	ldw	r3,4(r21)
    9d60:	90c00115 	stw	r3,4(r18)
    9d64:	00c006c4 	movi	r3,27
    9d68:	19804536 	bltu	r3,r6,9e80 <_realloc_r+0x470>
    9d6c:	90800204 	addi	r2,r18,8
    9d70:	a8c00204 	addi	r3,r21,8
    9d74:	003f6306 	br	9b04 <__alt_data_end+0xfffea704>
    9d78:	9005883a 	mov	r2,r18
    9d7c:	a8c00017 	ldw	r3,0(r21)
    9d80:	b821883a 	mov	r16,r23
    9d84:	b027883a 	mov	r19,r22
    9d88:	10c00015 	stw	r3,0(r2)
    9d8c:	a8c00117 	ldw	r3,4(r21)
    9d90:	10c00115 	stw	r3,4(r2)
    9d94:	a8c00217 	ldw	r3,8(r21)
    9d98:	10c00215 	stw	r3,8(r2)
    9d9c:	003f6a06 	br	9b48 <__alt_data_end+0xfffea748>
    9da0:	9c67883a 	add	r19,r19,r17
    9da4:	4445c83a 	sub	r2,r8,r17
    9da8:	e4c00215 	stw	r19,8(fp)
    9dac:	10800054 	ori	r2,r2,1
    9db0:	98800115 	stw	r2,4(r19)
    9db4:	a8bfff17 	ldw	r2,-4(r21)
    9db8:	a009883a 	mov	r4,r20
    9dbc:	1080004c 	andi	r2,r2,1
    9dc0:	1462b03a 	or	r17,r2,r17
    9dc4:	ac7fff15 	stw	r17,-4(r21)
    9dc8:	000e1540 	call	e154 <__malloc_unlock>
    9dcc:	a805883a 	mov	r2,r21
    9dd0:	003f6b06 	br	9b80 <__alt_data_end+0xfffea780>
    9dd4:	a80b883a 	mov	r5,r21
    9dd8:	9009883a 	mov	r4,r18
    9ddc:	00098540 	call	9854 <memmove>
    9de0:	003f4e06 	br	9b1c <__alt_data_end+0xfffea71c>
    9de4:	89000404 	addi	r4,r17,16
    9de8:	b93fbc16 	blt	r23,r4,9cdc <__alt_data_end+0xfffea8dc>
    9dec:	b0800317 	ldw	r2,12(r22)
    9df0:	b0c00217 	ldw	r3,8(r22)
    9df4:	81bfff04 	addi	r6,r16,-4
    9df8:	01000904 	movi	r4,36
    9dfc:	18800315 	stw	r2,12(r3)
    9e00:	10c00215 	stw	r3,8(r2)
    9e04:	b4800204 	addi	r18,r22,8
    9e08:	21804336 	bltu	r4,r6,9f18 <_realloc_r+0x508>
    9e0c:	008004c4 	movi	r2,19
    9e10:	11803f2e 	bgeu	r2,r6,9f10 <_realloc_r+0x500>
    9e14:	a8800017 	ldw	r2,0(r21)
    9e18:	b0800215 	stw	r2,8(r22)
    9e1c:	a8800117 	ldw	r2,4(r21)
    9e20:	b0800315 	stw	r2,12(r22)
    9e24:	008006c4 	movi	r2,27
    9e28:	11803f36 	bltu	r2,r6,9f28 <_realloc_r+0x518>
    9e2c:	b0800404 	addi	r2,r22,16
    9e30:	ad400204 	addi	r21,r21,8
    9e34:	a8c00017 	ldw	r3,0(r21)
    9e38:	10c00015 	stw	r3,0(r2)
    9e3c:	a8c00117 	ldw	r3,4(r21)
    9e40:	10c00115 	stw	r3,4(r2)
    9e44:	a8c00217 	ldw	r3,8(r21)
    9e48:	10c00215 	stw	r3,8(r2)
    9e4c:	b447883a 	add	r3,r22,r17
    9e50:	bc45c83a 	sub	r2,r23,r17
    9e54:	e0c00215 	stw	r3,8(fp)
    9e58:	10800054 	ori	r2,r2,1
    9e5c:	18800115 	stw	r2,4(r3)
    9e60:	b0800117 	ldw	r2,4(r22)
    9e64:	a009883a 	mov	r4,r20
    9e68:	1080004c 	andi	r2,r2,1
    9e6c:	1462b03a 	or	r17,r2,r17
    9e70:	b4400115 	stw	r17,4(r22)
    9e74:	000e1540 	call	e154 <__malloc_unlock>
    9e78:	9005883a 	mov	r2,r18
    9e7c:	003f4006 	br	9b80 <__alt_data_end+0xfffea780>
    9e80:	a8c00217 	ldw	r3,8(r21)
    9e84:	90c00215 	stw	r3,8(r18)
    9e88:	a8c00317 	ldw	r3,12(r21)
    9e8c:	90c00315 	stw	r3,12(r18)
    9e90:	30801126 	beq	r6,r2,9ed8 <_realloc_r+0x4c8>
    9e94:	90800404 	addi	r2,r18,16
    9e98:	a8c00404 	addi	r3,r21,16
    9e9c:	003f1906 	br	9b04 <__alt_data_end+0xfffea704>
    9ea0:	90ffff17 	ldw	r3,-4(r18)
    9ea4:	00bfff04 	movi	r2,-4
    9ea8:	a825883a 	mov	r18,r21
    9eac:	1884703a 	and	r2,r3,r2
    9eb0:	80a1883a 	add	r16,r16,r2
    9eb4:	003f2406 	br	9b48 <__alt_data_end+0xfffea748>
    9eb8:	a8800217 	ldw	r2,8(r21)
    9ebc:	b0800415 	stw	r2,16(r22)
    9ec0:	a8800317 	ldw	r2,12(r21)
    9ec4:	b0800515 	stw	r2,20(r22)
    9ec8:	31000a26 	beq	r6,r4,9ef4 <_realloc_r+0x4e4>
    9ecc:	b0800604 	addi	r2,r22,24
    9ed0:	ad400404 	addi	r21,r21,16
    9ed4:	003fa906 	br	9d7c <__alt_data_end+0xfffea97c>
    9ed8:	a9000417 	ldw	r4,16(r21)
    9edc:	90800604 	addi	r2,r18,24
    9ee0:	a8c00604 	addi	r3,r21,24
    9ee4:	91000415 	stw	r4,16(r18)
    9ee8:	a9000517 	ldw	r4,20(r21)
    9eec:	91000515 	stw	r4,20(r18)
    9ef0:	003f0406 	br	9b04 <__alt_data_end+0xfffea704>
    9ef4:	a8c00417 	ldw	r3,16(r21)
    9ef8:	ad400604 	addi	r21,r21,24
    9efc:	b0800804 	addi	r2,r22,32
    9f00:	b0c00615 	stw	r3,24(r22)
    9f04:	a8ffff17 	ldw	r3,-4(r21)
    9f08:	b0c00715 	stw	r3,28(r22)
    9f0c:	003f9b06 	br	9d7c <__alt_data_end+0xfffea97c>
    9f10:	9005883a 	mov	r2,r18
    9f14:	003fc706 	br	9e34 <__alt_data_end+0xfffeaa34>
    9f18:	a80b883a 	mov	r5,r21
    9f1c:	9009883a 	mov	r4,r18
    9f20:	00098540 	call	9854 <memmove>
    9f24:	003fc906 	br	9e4c <__alt_data_end+0xfffeaa4c>
    9f28:	a8800217 	ldw	r2,8(r21)
    9f2c:	b0800415 	stw	r2,16(r22)
    9f30:	a8800317 	ldw	r2,12(r21)
    9f34:	b0800515 	stw	r2,20(r22)
    9f38:	31000726 	beq	r6,r4,9f58 <_realloc_r+0x548>
    9f3c:	b0800604 	addi	r2,r22,24
    9f40:	ad400404 	addi	r21,r21,16
    9f44:	003fbb06 	br	9e34 <__alt_data_end+0xfffeaa34>
    9f48:	a009883a 	mov	r4,r20
    9f4c:	000e1540 	call	e154 <__malloc_unlock>
    9f50:	0005883a 	mov	r2,zero
    9f54:	003f0a06 	br	9b80 <__alt_data_end+0xfffea780>
    9f58:	a8c00417 	ldw	r3,16(r21)
    9f5c:	ad400604 	addi	r21,r21,24
    9f60:	b0800804 	addi	r2,r22,32
    9f64:	b0c00615 	stw	r3,24(r22)
    9f68:	a8ffff17 	ldw	r3,-4(r21)
    9f6c:	b0c00715 	stw	r3,28(r22)
    9f70:	003fb006 	br	9e34 <__alt_data_end+0xfffeaa34>

00009f74 <__swbuf_r>:
    9f74:	defffb04 	addi	sp,sp,-20
    9f78:	dcc00315 	stw	r19,12(sp)
    9f7c:	dc800215 	stw	r18,8(sp)
    9f80:	dc000015 	stw	r16,0(sp)
    9f84:	dfc00415 	stw	ra,16(sp)
    9f88:	dc400115 	stw	r17,4(sp)
    9f8c:	2025883a 	mov	r18,r4
    9f90:	2827883a 	mov	r19,r5
    9f94:	3021883a 	mov	r16,r6
    9f98:	20000226 	beq	r4,zero,9fa4 <__swbuf_r+0x30>
    9f9c:	20800e17 	ldw	r2,56(r4)
    9fa0:	10004226 	beq	r2,zero,a0ac <__swbuf_r+0x138>
    9fa4:	80800617 	ldw	r2,24(r16)
    9fa8:	8100030b 	ldhu	r4,12(r16)
    9fac:	80800215 	stw	r2,8(r16)
    9fb0:	2080020c 	andi	r2,r4,8
    9fb4:	10003626 	beq	r2,zero,a090 <__swbuf_r+0x11c>
    9fb8:	80c00417 	ldw	r3,16(r16)
    9fbc:	18003426 	beq	r3,zero,a090 <__swbuf_r+0x11c>
    9fc0:	2088000c 	andi	r2,r4,8192
    9fc4:	9c403fcc 	andi	r17,r19,255
    9fc8:	10001a26 	beq	r2,zero,a034 <__swbuf_r+0xc0>
    9fcc:	80800017 	ldw	r2,0(r16)
    9fd0:	81000517 	ldw	r4,20(r16)
    9fd4:	10c7c83a 	sub	r3,r2,r3
    9fd8:	1900200e 	bge	r3,r4,a05c <__swbuf_r+0xe8>
    9fdc:	18c00044 	addi	r3,r3,1
    9fe0:	81000217 	ldw	r4,8(r16)
    9fe4:	11400044 	addi	r5,r2,1
    9fe8:	81400015 	stw	r5,0(r16)
    9fec:	213fffc4 	addi	r4,r4,-1
    9ff0:	81000215 	stw	r4,8(r16)
    9ff4:	14c00005 	stb	r19,0(r2)
    9ff8:	80800517 	ldw	r2,20(r16)
    9ffc:	10c01e26 	beq	r2,r3,a078 <__swbuf_r+0x104>
    a000:	8080030b 	ldhu	r2,12(r16)
    a004:	1080004c 	andi	r2,r2,1
    a008:	10000226 	beq	r2,zero,a014 <__swbuf_r+0xa0>
    a00c:	00800284 	movi	r2,10
    a010:	88801926 	beq	r17,r2,a078 <__swbuf_r+0x104>
    a014:	8805883a 	mov	r2,r17
    a018:	dfc00417 	ldw	ra,16(sp)
    a01c:	dcc00317 	ldw	r19,12(sp)
    a020:	dc800217 	ldw	r18,8(sp)
    a024:	dc400117 	ldw	r17,4(sp)
    a028:	dc000017 	ldw	r16,0(sp)
    a02c:	dec00504 	addi	sp,sp,20
    a030:	f800283a 	ret
    a034:	81401917 	ldw	r5,100(r16)
    a038:	00b7ffc4 	movi	r2,-8193
    a03c:	21080014 	ori	r4,r4,8192
    a040:	2884703a 	and	r2,r5,r2
    a044:	80801915 	stw	r2,100(r16)
    a048:	80800017 	ldw	r2,0(r16)
    a04c:	8100030d 	sth	r4,12(r16)
    a050:	81000517 	ldw	r4,20(r16)
    a054:	10c7c83a 	sub	r3,r2,r3
    a058:	193fe016 	blt	r3,r4,9fdc <__alt_data_end+0xfffeabdc>
    a05c:	800b883a 	mov	r5,r16
    a060:	9009883a 	mov	r4,r18
    a064:	0004ac80 	call	4ac8 <_fflush_r>
    a068:	1000071e 	bne	r2,zero,a088 <__swbuf_r+0x114>
    a06c:	80800017 	ldw	r2,0(r16)
    a070:	00c00044 	movi	r3,1
    a074:	003fda06 	br	9fe0 <__alt_data_end+0xfffeabe0>
    a078:	800b883a 	mov	r5,r16
    a07c:	9009883a 	mov	r4,r18
    a080:	0004ac80 	call	4ac8 <_fflush_r>
    a084:	103fe326 	beq	r2,zero,a014 <__alt_data_end+0xfffeac14>
    a088:	00bfffc4 	movi	r2,-1
    a08c:	003fe206 	br	a018 <__alt_data_end+0xfffeac18>
    a090:	800b883a 	mov	r5,r16
    a094:	9009883a 	mov	r4,r18
    a098:	0002ea80 	call	2ea8 <__swsetup_r>
    a09c:	103ffa1e 	bne	r2,zero,a088 <__alt_data_end+0xfffeac88>
    a0a0:	8100030b 	ldhu	r4,12(r16)
    a0a4:	80c00417 	ldw	r3,16(r16)
    a0a8:	003fc506 	br	9fc0 <__alt_data_end+0xfffeabc0>
    a0ac:	0004eb40 	call	4eb4 <__sinit>
    a0b0:	003fbc06 	br	9fa4 <__alt_data_end+0xfffeaba4>

0000a0b4 <__swbuf>:
    a0b4:	00800074 	movhi	r2,1
    a0b8:	10878604 	addi	r2,r2,7704
    a0bc:	280d883a 	mov	r6,r5
    a0c0:	200b883a 	mov	r5,r4
    a0c4:	11000017 	ldw	r4,0(r2)
    a0c8:	0009f741 	jmpi	9f74 <__swbuf_r>

0000a0cc <_wcrtomb_r>:
    a0cc:	defff604 	addi	sp,sp,-40
    a0d0:	00800074 	movhi	r2,1
    a0d4:	dc800815 	stw	r18,32(sp)
    a0d8:	dc400715 	stw	r17,28(sp)
    a0dc:	dc000615 	stw	r16,24(sp)
    a0e0:	10878a04 	addi	r2,r2,7720
    a0e4:	dfc00915 	stw	ra,36(sp)
    a0e8:	2021883a 	mov	r16,r4
    a0ec:	3823883a 	mov	r17,r7
    a0f0:	14800017 	ldw	r18,0(r2)
    a0f4:	28001426 	beq	r5,zero,a148 <_wcrtomb_r+0x7c>
    a0f8:	d9400415 	stw	r5,16(sp)
    a0fc:	d9800515 	stw	r6,20(sp)
    a100:	000553c0 	call	553c <__locale_charset>
    a104:	d9800517 	ldw	r6,20(sp)
    a108:	d9400417 	ldw	r5,16(sp)
    a10c:	100f883a 	mov	r7,r2
    a110:	dc400015 	stw	r17,0(sp)
    a114:	8009883a 	mov	r4,r16
    a118:	903ee83a 	callr	r18
    a11c:	00ffffc4 	movi	r3,-1
    a120:	10c0031e 	bne	r2,r3,a130 <_wcrtomb_r+0x64>
    a124:	88000015 	stw	zero,0(r17)
    a128:	00c02284 	movi	r3,138
    a12c:	80c00015 	stw	r3,0(r16)
    a130:	dfc00917 	ldw	ra,36(sp)
    a134:	dc800817 	ldw	r18,32(sp)
    a138:	dc400717 	ldw	r17,28(sp)
    a13c:	dc000617 	ldw	r16,24(sp)
    a140:	dec00a04 	addi	sp,sp,40
    a144:	f800283a 	ret
    a148:	000553c0 	call	553c <__locale_charset>
    a14c:	100f883a 	mov	r7,r2
    a150:	dc400015 	stw	r17,0(sp)
    a154:	000d883a 	mov	r6,zero
    a158:	d9400104 	addi	r5,sp,4
    a15c:	8009883a 	mov	r4,r16
    a160:	903ee83a 	callr	r18
    a164:	003fed06 	br	a11c <__alt_data_end+0xfffead1c>

0000a168 <wcrtomb>:
    a168:	defff604 	addi	sp,sp,-40
    a16c:	00800074 	movhi	r2,1
    a170:	dc800615 	stw	r18,24(sp)
    a174:	dc400515 	stw	r17,20(sp)
    a178:	10878604 	addi	r2,r2,7704
    a17c:	dfc00915 	stw	ra,36(sp)
    a180:	dd000815 	stw	r20,32(sp)
    a184:	dcc00715 	stw	r19,28(sp)
    a188:	dc000415 	stw	r16,16(sp)
    a18c:	3025883a 	mov	r18,r6
    a190:	14400017 	ldw	r17,0(r2)
    a194:	20001926 	beq	r4,zero,a1fc <wcrtomb+0x94>
    a198:	00800074 	movhi	r2,1
    a19c:	10878a04 	addi	r2,r2,7720
    a1a0:	15000017 	ldw	r20,0(r2)
    a1a4:	2021883a 	mov	r16,r4
    a1a8:	2827883a 	mov	r19,r5
    a1ac:	000553c0 	call	553c <__locale_charset>
    a1b0:	100f883a 	mov	r7,r2
    a1b4:	dc800015 	stw	r18,0(sp)
    a1b8:	980d883a 	mov	r6,r19
    a1bc:	800b883a 	mov	r5,r16
    a1c0:	8809883a 	mov	r4,r17
    a1c4:	a03ee83a 	callr	r20
    a1c8:	00ffffc4 	movi	r3,-1
    a1cc:	10c0031e 	bne	r2,r3,a1dc <wcrtomb+0x74>
    a1d0:	90000015 	stw	zero,0(r18)
    a1d4:	00c02284 	movi	r3,138
    a1d8:	88c00015 	stw	r3,0(r17)
    a1dc:	dfc00917 	ldw	ra,36(sp)
    a1e0:	dd000817 	ldw	r20,32(sp)
    a1e4:	dcc00717 	ldw	r19,28(sp)
    a1e8:	dc800617 	ldw	r18,24(sp)
    a1ec:	dc400517 	ldw	r17,20(sp)
    a1f0:	dc000417 	ldw	r16,16(sp)
    a1f4:	dec00a04 	addi	sp,sp,40
    a1f8:	f800283a 	ret
    a1fc:	00800074 	movhi	r2,1
    a200:	10878a04 	addi	r2,r2,7720
    a204:	14000017 	ldw	r16,0(r2)
    a208:	000553c0 	call	553c <__locale_charset>
    a20c:	100f883a 	mov	r7,r2
    a210:	dc800015 	stw	r18,0(sp)
    a214:	000d883a 	mov	r6,zero
    a218:	d9400104 	addi	r5,sp,4
    a21c:	8809883a 	mov	r4,r17
    a220:	803ee83a 	callr	r16
    a224:	003fe806 	br	a1c8 <__alt_data_end+0xfffeadc8>

0000a228 <__ascii_wctomb>:
    a228:	28000526 	beq	r5,zero,a240 <__ascii_wctomb+0x18>
    a22c:	00803fc4 	movi	r2,255
    a230:	11800536 	bltu	r2,r6,a248 <__ascii_wctomb+0x20>
    a234:	29800005 	stb	r6,0(r5)
    a238:	00800044 	movi	r2,1
    a23c:	f800283a 	ret
    a240:	0005883a 	mov	r2,zero
    a244:	f800283a 	ret
    a248:	00802284 	movi	r2,138
    a24c:	20800015 	stw	r2,0(r4)
    a250:	00bfffc4 	movi	r2,-1
    a254:	f800283a 	ret

0000a258 <_wctomb_r>:
    a258:	00800074 	movhi	r2,1
    a25c:	defff904 	addi	sp,sp,-28
    a260:	10878a04 	addi	r2,r2,7720
    a264:	dfc00615 	stw	ra,24(sp)
    a268:	dc400515 	stw	r17,20(sp)
    a26c:	dc000415 	stw	r16,16(sp)
    a270:	3823883a 	mov	r17,r7
    a274:	14000017 	ldw	r16,0(r2)
    a278:	d9000115 	stw	r4,4(sp)
    a27c:	d9400215 	stw	r5,8(sp)
    a280:	d9800315 	stw	r6,12(sp)
    a284:	000553c0 	call	553c <__locale_charset>
    a288:	d9800317 	ldw	r6,12(sp)
    a28c:	d9400217 	ldw	r5,8(sp)
    a290:	d9000117 	ldw	r4,4(sp)
    a294:	100f883a 	mov	r7,r2
    a298:	dc400015 	stw	r17,0(sp)
    a29c:	803ee83a 	callr	r16
    a2a0:	dfc00617 	ldw	ra,24(sp)
    a2a4:	dc400517 	ldw	r17,20(sp)
    a2a8:	dc000417 	ldw	r16,16(sp)
    a2ac:	dec00704 	addi	sp,sp,28
    a2b0:	f800283a 	ret

0000a2b4 <__udivdi3>:
    a2b4:	defff404 	addi	sp,sp,-48
    a2b8:	dcc00515 	stw	r19,20(sp)
    a2bc:	dc000215 	stw	r16,8(sp)
    a2c0:	dfc00b15 	stw	ra,44(sp)
    a2c4:	df000a15 	stw	fp,40(sp)
    a2c8:	ddc00915 	stw	r23,36(sp)
    a2cc:	dd800815 	stw	r22,32(sp)
    a2d0:	dd400715 	stw	r21,28(sp)
    a2d4:	dd000615 	stw	r20,24(sp)
    a2d8:	dc800415 	stw	r18,16(sp)
    a2dc:	dc400315 	stw	r17,12(sp)
    a2e0:	2027883a 	mov	r19,r4
    a2e4:	2821883a 	mov	r16,r5
    a2e8:	3800461e 	bne	r7,zero,a404 <__udivdi3+0x150>
    a2ec:	3023883a 	mov	r17,r6
    a2f0:	2025883a 	mov	r18,r4
    a2f4:	2980572e 	bgeu	r5,r6,a454 <__udivdi3+0x1a0>
    a2f8:	00bfffd4 	movui	r2,65535
    a2fc:	282d883a 	mov	r22,r5
    a300:	1180b236 	bltu	r2,r6,a5cc <__udivdi3+0x318>
    a304:	00803fc4 	movi	r2,255
    a308:	1185803a 	cmpltu	r2,r2,r6
    a30c:	100490fa 	slli	r2,r2,3
    a310:	3086d83a 	srl	r3,r6,r2
    a314:	01000074 	movhi	r4,1
    a318:	21008d04 	addi	r4,r4,564
    a31c:	20c7883a 	add	r3,r4,r3
    a320:	18c00003 	ldbu	r3,0(r3)
    a324:	1885883a 	add	r2,r3,r2
    a328:	00c00804 	movi	r3,32
    a32c:	1887c83a 	sub	r3,r3,r2
    a330:	18000526 	beq	r3,zero,a348 <__udivdi3+0x94>
    a334:	80e0983a 	sll	r16,r16,r3
    a338:	9884d83a 	srl	r2,r19,r2
    a33c:	30e2983a 	sll	r17,r6,r3
    a340:	98e4983a 	sll	r18,r19,r3
    a344:	142cb03a 	or	r22,r2,r16
    a348:	882ad43a 	srli	r21,r17,16
    a34c:	b009883a 	mov	r4,r22
    a350:	8d3fffcc 	andi	r20,r17,65535
    a354:	a80b883a 	mov	r5,r21
    a358:	000afd00 	call	afd0 <__umodsi3>
    a35c:	b009883a 	mov	r4,r22
    a360:	a80b883a 	mov	r5,r21
    a364:	1027883a 	mov	r19,r2
    a368:	000af6c0 	call	af6c <__udivsi3>
    a36c:	100b883a 	mov	r5,r2
    a370:	a009883a 	mov	r4,r20
    a374:	102d883a 	mov	r22,r2
    a378:	000b0280 	call	b028 <__mulsi3>
    a37c:	9826943a 	slli	r19,r19,16
    a380:	9006d43a 	srli	r3,r18,16
    a384:	1cc6b03a 	or	r3,r3,r19
    a388:	1880052e 	bgeu	r3,r2,a3a0 <__udivdi3+0xec>
    a38c:	1c47883a 	add	r3,r3,r17
    a390:	b13fffc4 	addi	r4,r22,-1
    a394:	1c400136 	bltu	r3,r17,a39c <__udivdi3+0xe8>
    a398:	18814236 	bltu	r3,r2,a8a4 <__udivdi3+0x5f0>
    a39c:	202d883a 	mov	r22,r4
    a3a0:	18a1c83a 	sub	r16,r3,r2
    a3a4:	8009883a 	mov	r4,r16
    a3a8:	a80b883a 	mov	r5,r21
    a3ac:	000afd00 	call	afd0 <__umodsi3>
    a3b0:	1027883a 	mov	r19,r2
    a3b4:	8009883a 	mov	r4,r16
    a3b8:	a80b883a 	mov	r5,r21
    a3bc:	9826943a 	slli	r19,r19,16
    a3c0:	000af6c0 	call	af6c <__udivsi3>
    a3c4:	100b883a 	mov	r5,r2
    a3c8:	a009883a 	mov	r4,r20
    a3cc:	94bfffcc 	andi	r18,r18,65535
    a3d0:	1021883a 	mov	r16,r2
    a3d4:	94e4b03a 	or	r18,r18,r19
    a3d8:	000b0280 	call	b028 <__mulsi3>
    a3dc:	9080052e 	bgeu	r18,r2,a3f4 <__udivdi3+0x140>
    a3e0:	8ca5883a 	add	r18,r17,r18
    a3e4:	80ffffc4 	addi	r3,r16,-1
    a3e8:	94410c36 	bltu	r18,r17,a81c <__udivdi3+0x568>
    a3ec:	90810b2e 	bgeu	r18,r2,a81c <__udivdi3+0x568>
    a3f0:	843fff84 	addi	r16,r16,-2
    a3f4:	b004943a 	slli	r2,r22,16
    a3f8:	0007883a 	mov	r3,zero
    a3fc:	1404b03a 	or	r2,r2,r16
    a400:	00005e06 	br	a57c <__udivdi3+0x2c8>
    a404:	29c05b36 	bltu	r5,r7,a574 <__udivdi3+0x2c0>
    a408:	00bfffd4 	movui	r2,65535
    a40c:	11c0672e 	bgeu	r2,r7,a5ac <__udivdi3+0x2f8>
    a410:	00804034 	movhi	r2,256
    a414:	10bfffc4 	addi	r2,r2,-1
    a418:	11c10a36 	bltu	r2,r7,a844 <__udivdi3+0x590>
    a41c:	00800404 	movi	r2,16
    a420:	3886d83a 	srl	r3,r7,r2
    a424:	01000074 	movhi	r4,1
    a428:	21008d04 	addi	r4,r4,564
    a42c:	20c7883a 	add	r3,r4,r3
    a430:	18c00003 	ldbu	r3,0(r3)
    a434:	05c00804 	movi	r23,32
    a438:	1885883a 	add	r2,r3,r2
    a43c:	b8afc83a 	sub	r23,r23,r2
    a440:	b800671e 	bne	r23,zero,a5e0 <__udivdi3+0x32c>
    a444:	3c010536 	bltu	r7,r16,a85c <__udivdi3+0x5a8>
    a448:	9985403a 	cmpgeu	r2,r19,r6
    a44c:	0007883a 	mov	r3,zero
    a450:	00004a06 	br	a57c <__udivdi3+0x2c8>
    a454:	3000041e 	bne	r6,zero,a468 <__udivdi3+0x1b4>
    a458:	000b883a 	mov	r5,zero
    a45c:	01000044 	movi	r4,1
    a460:	000af6c0 	call	af6c <__udivsi3>
    a464:	1023883a 	mov	r17,r2
    a468:	00bfffd4 	movui	r2,65535
    a46c:	1440532e 	bgeu	r2,r17,a5bc <__udivdi3+0x308>
    a470:	00804034 	movhi	r2,256
    a474:	10bfffc4 	addi	r2,r2,-1
    a478:	1440f436 	bltu	r2,r17,a84c <__udivdi3+0x598>
    a47c:	00800404 	movi	r2,16
    a480:	8886d83a 	srl	r3,r17,r2
    a484:	01000074 	movhi	r4,1
    a488:	21008d04 	addi	r4,r4,564
    a48c:	20c7883a 	add	r3,r4,r3
    a490:	18c00003 	ldbu	r3,0(r3)
    a494:	1885883a 	add	r2,r3,r2
    a498:	00c00804 	movi	r3,32
    a49c:	1887c83a 	sub	r3,r3,r2
    a4a0:	1800a51e 	bne	r3,zero,a738 <__udivdi3+0x484>
    a4a4:	882ad43a 	srli	r21,r17,16
    a4a8:	8461c83a 	sub	r16,r16,r17
    a4ac:	8d3fffcc 	andi	r20,r17,65535
    a4b0:	00c00044 	movi	r3,1
    a4b4:	a80b883a 	mov	r5,r21
    a4b8:	8009883a 	mov	r4,r16
    a4bc:	d8c00115 	stw	r3,4(sp)
    a4c0:	000afd00 	call	afd0 <__umodsi3>
    a4c4:	a80b883a 	mov	r5,r21
    a4c8:	8009883a 	mov	r4,r16
    a4cc:	1027883a 	mov	r19,r2
    a4d0:	000af6c0 	call	af6c <__udivsi3>
    a4d4:	a00b883a 	mov	r5,r20
    a4d8:	1009883a 	mov	r4,r2
    a4dc:	102d883a 	mov	r22,r2
    a4e0:	000b0280 	call	b028 <__mulsi3>
    a4e4:	9826943a 	slli	r19,r19,16
    a4e8:	900ed43a 	srli	r7,r18,16
    a4ec:	d8c00117 	ldw	r3,4(sp)
    a4f0:	3cceb03a 	or	r7,r7,r19
    a4f4:	3880052e 	bgeu	r7,r2,a50c <__udivdi3+0x258>
    a4f8:	3c4f883a 	add	r7,r7,r17
    a4fc:	b13fffc4 	addi	r4,r22,-1
    a500:	3c400136 	bltu	r7,r17,a508 <__udivdi3+0x254>
    a504:	3880e436 	bltu	r7,r2,a898 <__udivdi3+0x5e4>
    a508:	202d883a 	mov	r22,r4
    a50c:	38a1c83a 	sub	r16,r7,r2
    a510:	8009883a 	mov	r4,r16
    a514:	a80b883a 	mov	r5,r21
    a518:	d8c00115 	stw	r3,4(sp)
    a51c:	000afd00 	call	afd0 <__umodsi3>
    a520:	1027883a 	mov	r19,r2
    a524:	8009883a 	mov	r4,r16
    a528:	a80b883a 	mov	r5,r21
    a52c:	9826943a 	slli	r19,r19,16
    a530:	000af6c0 	call	af6c <__udivsi3>
    a534:	a00b883a 	mov	r5,r20
    a538:	1009883a 	mov	r4,r2
    a53c:	94bfffcc 	andi	r18,r18,65535
    a540:	1021883a 	mov	r16,r2
    a544:	94e4b03a 	or	r18,r18,r19
    a548:	000b0280 	call	b028 <__mulsi3>
    a54c:	d8c00117 	ldw	r3,4(sp)
    a550:	9080052e 	bgeu	r18,r2,a568 <__udivdi3+0x2b4>
    a554:	8ca5883a 	add	r18,r17,r18
    a558:	813fffc4 	addi	r4,r16,-1
    a55c:	9440ad36 	bltu	r18,r17,a814 <__udivdi3+0x560>
    a560:	9080ac2e 	bgeu	r18,r2,a814 <__udivdi3+0x560>
    a564:	843fff84 	addi	r16,r16,-2
    a568:	b004943a 	slli	r2,r22,16
    a56c:	1404b03a 	or	r2,r2,r16
    a570:	00000206 	br	a57c <__udivdi3+0x2c8>
    a574:	0007883a 	mov	r3,zero
    a578:	0005883a 	mov	r2,zero
    a57c:	dfc00b17 	ldw	ra,44(sp)
    a580:	df000a17 	ldw	fp,40(sp)
    a584:	ddc00917 	ldw	r23,36(sp)
    a588:	dd800817 	ldw	r22,32(sp)
    a58c:	dd400717 	ldw	r21,28(sp)
    a590:	dd000617 	ldw	r20,24(sp)
    a594:	dcc00517 	ldw	r19,20(sp)
    a598:	dc800417 	ldw	r18,16(sp)
    a59c:	dc400317 	ldw	r17,12(sp)
    a5a0:	dc000217 	ldw	r16,8(sp)
    a5a4:	dec00c04 	addi	sp,sp,48
    a5a8:	f800283a 	ret
    a5ac:	00803fc4 	movi	r2,255
    a5b0:	11c5803a 	cmpltu	r2,r2,r7
    a5b4:	100490fa 	slli	r2,r2,3
    a5b8:	003f9906 	br	a420 <__alt_data_end+0xfffeb020>
    a5bc:	00803fc4 	movi	r2,255
    a5c0:	1445803a 	cmpltu	r2,r2,r17
    a5c4:	100490fa 	slli	r2,r2,3
    a5c8:	003fad06 	br	a480 <__alt_data_end+0xfffeb080>
    a5cc:	00804034 	movhi	r2,256
    a5d0:	10bfffc4 	addi	r2,r2,-1
    a5d4:	11809f36 	bltu	r2,r6,a854 <__udivdi3+0x5a0>
    a5d8:	00800404 	movi	r2,16
    a5dc:	003f4c06 	br	a310 <__alt_data_end+0xfffeaf10>
    a5e0:	3dce983a 	sll	r7,r7,r23
    a5e4:	30b8d83a 	srl	fp,r6,r2
    a5e8:	80a2d83a 	srl	r17,r16,r2
    a5ec:	35cc983a 	sll	r6,r6,r23
    a5f0:	3f38b03a 	or	fp,r7,fp
    a5f4:	e024d43a 	srli	r18,fp,16
    a5f8:	9884d83a 	srl	r2,r19,r2
    a5fc:	85e0983a 	sll	r16,r16,r23
    a600:	8809883a 	mov	r4,r17
    a604:	900b883a 	mov	r5,r18
    a608:	d9800015 	stw	r6,0(sp)
    a60c:	1420b03a 	or	r16,r2,r16
    a610:	000afd00 	call	afd0 <__umodsi3>
    a614:	900b883a 	mov	r5,r18
    a618:	8809883a 	mov	r4,r17
    a61c:	1029883a 	mov	r20,r2
    a620:	e5bfffcc 	andi	r22,fp,65535
    a624:	000af6c0 	call	af6c <__udivsi3>
    a628:	100b883a 	mov	r5,r2
    a62c:	b009883a 	mov	r4,r22
    a630:	102b883a 	mov	r21,r2
    a634:	000b0280 	call	b028 <__mulsi3>
    a638:	a028943a 	slli	r20,r20,16
    a63c:	8006d43a 	srli	r3,r16,16
    a640:	1d06b03a 	or	r3,r3,r20
    a644:	1880042e 	bgeu	r3,r2,a658 <__udivdi3+0x3a4>
    a648:	1f07883a 	add	r3,r3,fp
    a64c:	a93fffc4 	addi	r4,r21,-1
    a650:	1f00892e 	bgeu	r3,fp,a878 <__udivdi3+0x5c4>
    a654:	202b883a 	mov	r21,r4
    a658:	18a3c83a 	sub	r17,r3,r2
    a65c:	8809883a 	mov	r4,r17
    a660:	900b883a 	mov	r5,r18
    a664:	000afd00 	call	afd0 <__umodsi3>
    a668:	1029883a 	mov	r20,r2
    a66c:	8809883a 	mov	r4,r17
    a670:	900b883a 	mov	r5,r18
    a674:	a028943a 	slli	r20,r20,16
    a678:	000af6c0 	call	af6c <__udivsi3>
    a67c:	100b883a 	mov	r5,r2
    a680:	b009883a 	mov	r4,r22
    a684:	843fffcc 	andi	r16,r16,65535
    a688:	1023883a 	mov	r17,r2
    a68c:	8520b03a 	or	r16,r16,r20
    a690:	000b0280 	call	b028 <__mulsi3>
    a694:	8080042e 	bgeu	r16,r2,a6a8 <__udivdi3+0x3f4>
    a698:	8721883a 	add	r16,r16,fp
    a69c:	88ffffc4 	addi	r3,r17,-1
    a6a0:	8700712e 	bgeu	r16,fp,a868 <__udivdi3+0x5b4>
    a6a4:	1823883a 	mov	r17,r3
    a6a8:	a80e943a 	slli	r7,r21,16
    a6ac:	d8c00017 	ldw	r3,0(sp)
    a6b0:	80a1c83a 	sub	r16,r16,r2
    a6b4:	3c64b03a 	or	r18,r7,r17
    a6b8:	1d3fffcc 	andi	r20,r3,65535
    a6bc:	9022d43a 	srli	r17,r18,16
    a6c0:	95bfffcc 	andi	r22,r18,65535
    a6c4:	a00b883a 	mov	r5,r20
    a6c8:	b009883a 	mov	r4,r22
    a6cc:	182ad43a 	srli	r21,r3,16
    a6d0:	000b0280 	call	b028 <__mulsi3>
    a6d4:	a00b883a 	mov	r5,r20
    a6d8:	8809883a 	mov	r4,r17
    a6dc:	1039883a 	mov	fp,r2
    a6e0:	000b0280 	call	b028 <__mulsi3>
    a6e4:	8809883a 	mov	r4,r17
    a6e8:	a80b883a 	mov	r5,r21
    a6ec:	1029883a 	mov	r20,r2
    a6f0:	000b0280 	call	b028 <__mulsi3>
    a6f4:	a80b883a 	mov	r5,r21
    a6f8:	b009883a 	mov	r4,r22
    a6fc:	1023883a 	mov	r17,r2
    a700:	000b0280 	call	b028 <__mulsi3>
    a704:	e006d43a 	srli	r3,fp,16
    a708:	1505883a 	add	r2,r2,r20
    a70c:	1887883a 	add	r3,r3,r2
    a710:	1d00022e 	bgeu	r3,r20,a71c <__udivdi3+0x468>
    a714:	00800074 	movhi	r2,1
    a718:	88a3883a 	add	r17,r17,r2
    a71c:	1804d43a 	srli	r2,r3,16
    a720:	1463883a 	add	r17,r2,r17
    a724:	84404436 	bltu	r16,r17,a838 <__udivdi3+0x584>
    a728:	84403e26 	beq	r16,r17,a824 <__udivdi3+0x570>
    a72c:	9005883a 	mov	r2,r18
    a730:	0007883a 	mov	r3,zero
    a734:	003f9106 	br	a57c <__alt_data_end+0xfffeb17c>
    a738:	88e2983a 	sll	r17,r17,r3
    a73c:	80aed83a 	srl	r23,r16,r2
    a740:	80e0983a 	sll	r16,r16,r3
    a744:	882ad43a 	srli	r21,r17,16
    a748:	9884d83a 	srl	r2,r19,r2
    a74c:	b809883a 	mov	r4,r23
    a750:	a80b883a 	mov	r5,r21
    a754:	98e4983a 	sll	r18,r19,r3
    a758:	142cb03a 	or	r22,r2,r16
    a75c:	000afd00 	call	afd0 <__umodsi3>
    a760:	b809883a 	mov	r4,r23
    a764:	a80b883a 	mov	r5,r21
    a768:	1027883a 	mov	r19,r2
    a76c:	8d3fffcc 	andi	r20,r17,65535
    a770:	000af6c0 	call	af6c <__udivsi3>
    a774:	a009883a 	mov	r4,r20
    a778:	100b883a 	mov	r5,r2
    a77c:	102f883a 	mov	r23,r2
    a780:	000b0280 	call	b028 <__mulsi3>
    a784:	9826943a 	slli	r19,r19,16
    a788:	b008d43a 	srli	r4,r22,16
    a78c:	24c8b03a 	or	r4,r4,r19
    a790:	2080062e 	bgeu	r4,r2,a7ac <__udivdi3+0x4f8>
    a794:	2449883a 	add	r4,r4,r17
    a798:	b8ffffc4 	addi	r3,r23,-1
    a79c:	24403c36 	bltu	r4,r17,a890 <__udivdi3+0x5dc>
    a7a0:	20803b2e 	bgeu	r4,r2,a890 <__udivdi3+0x5dc>
    a7a4:	bdffff84 	addi	r23,r23,-2
    a7a8:	2449883a 	add	r4,r4,r17
    a7ac:	20a1c83a 	sub	r16,r4,r2
    a7b0:	a80b883a 	mov	r5,r21
    a7b4:	8009883a 	mov	r4,r16
    a7b8:	000afd00 	call	afd0 <__umodsi3>
    a7bc:	a80b883a 	mov	r5,r21
    a7c0:	8009883a 	mov	r4,r16
    a7c4:	1027883a 	mov	r19,r2
    a7c8:	000af6c0 	call	af6c <__udivsi3>
    a7cc:	a009883a 	mov	r4,r20
    a7d0:	100b883a 	mov	r5,r2
    a7d4:	9826943a 	slli	r19,r19,16
    a7d8:	1039883a 	mov	fp,r2
    a7dc:	000b0280 	call	b028 <__mulsi3>
    a7e0:	b13fffcc 	andi	r4,r22,65535
    a7e4:	24c8b03a 	or	r4,r4,r19
    a7e8:	2080062e 	bgeu	r4,r2,a804 <__udivdi3+0x550>
    a7ec:	2449883a 	add	r4,r4,r17
    a7f0:	e0ffffc4 	addi	r3,fp,-1
    a7f4:	24402436 	bltu	r4,r17,a888 <__udivdi3+0x5d4>
    a7f8:	2080232e 	bgeu	r4,r2,a888 <__udivdi3+0x5d4>
    a7fc:	e73fff84 	addi	fp,fp,-2
    a800:	2449883a 	add	r4,r4,r17
    a804:	b82e943a 	slli	r23,r23,16
    a808:	20a1c83a 	sub	r16,r4,r2
    a80c:	bf06b03a 	or	r3,r23,fp
    a810:	003f2806 	br	a4b4 <__alt_data_end+0xfffeb0b4>
    a814:	2021883a 	mov	r16,r4
    a818:	003f5306 	br	a568 <__alt_data_end+0xfffeb168>
    a81c:	1821883a 	mov	r16,r3
    a820:	003ef406 	br	a3f4 <__alt_data_end+0xfffeaff4>
    a824:	1806943a 	slli	r3,r3,16
    a828:	9de6983a 	sll	r19,r19,r23
    a82c:	e73fffcc 	andi	fp,fp,65535
    a830:	1f07883a 	add	r3,r3,fp
    a834:	98ffbd2e 	bgeu	r19,r3,a72c <__alt_data_end+0xfffeb32c>
    a838:	90bfffc4 	addi	r2,r18,-1
    a83c:	0007883a 	mov	r3,zero
    a840:	003f4e06 	br	a57c <__alt_data_end+0xfffeb17c>
    a844:	00800604 	movi	r2,24
    a848:	003ef506 	br	a420 <__alt_data_end+0xfffeb020>
    a84c:	00800604 	movi	r2,24
    a850:	003f0b06 	br	a480 <__alt_data_end+0xfffeb080>
    a854:	00800604 	movi	r2,24
    a858:	003ead06 	br	a310 <__alt_data_end+0xfffeaf10>
    a85c:	0007883a 	mov	r3,zero
    a860:	00800044 	movi	r2,1
    a864:	003f4506 	br	a57c <__alt_data_end+0xfffeb17c>
    a868:	80bf8e2e 	bgeu	r16,r2,a6a4 <__alt_data_end+0xfffeb2a4>
    a86c:	8c7fff84 	addi	r17,r17,-2
    a870:	8721883a 	add	r16,r16,fp
    a874:	003f8c06 	br	a6a8 <__alt_data_end+0xfffeb2a8>
    a878:	18bf762e 	bgeu	r3,r2,a654 <__alt_data_end+0xfffeb254>
    a87c:	ad7fff84 	addi	r21,r21,-2
    a880:	1f07883a 	add	r3,r3,fp
    a884:	003f7406 	br	a658 <__alt_data_end+0xfffeb258>
    a888:	1839883a 	mov	fp,r3
    a88c:	003fdd06 	br	a804 <__alt_data_end+0xfffeb404>
    a890:	182f883a 	mov	r23,r3
    a894:	003fc506 	br	a7ac <__alt_data_end+0xfffeb3ac>
    a898:	b5bfff84 	addi	r22,r22,-2
    a89c:	3c4f883a 	add	r7,r7,r17
    a8a0:	003f1a06 	br	a50c <__alt_data_end+0xfffeb10c>
    a8a4:	b5bfff84 	addi	r22,r22,-2
    a8a8:	1c47883a 	add	r3,r3,r17
    a8ac:	003ebc06 	br	a3a0 <__alt_data_end+0xfffeafa0>

0000a8b0 <__umoddi3>:
    a8b0:	defff304 	addi	sp,sp,-52
    a8b4:	df000b15 	stw	fp,44(sp)
    a8b8:	dc400415 	stw	r17,16(sp)
    a8bc:	dc000315 	stw	r16,12(sp)
    a8c0:	dfc00c15 	stw	ra,48(sp)
    a8c4:	ddc00a15 	stw	r23,40(sp)
    a8c8:	dd800915 	stw	r22,36(sp)
    a8cc:	dd400815 	stw	r21,32(sp)
    a8d0:	dd000715 	stw	r20,28(sp)
    a8d4:	dcc00615 	stw	r19,24(sp)
    a8d8:	dc800515 	stw	r18,20(sp)
    a8dc:	2021883a 	mov	r16,r4
    a8e0:	2823883a 	mov	r17,r5
    a8e4:	2839883a 	mov	fp,r5
    a8e8:	3800401e 	bne	r7,zero,a9ec <__umoddi3+0x13c>
    a8ec:	3027883a 	mov	r19,r6
    a8f0:	2029883a 	mov	r20,r4
    a8f4:	2980552e 	bgeu	r5,r6,aa4c <__umoddi3+0x19c>
    a8f8:	00bfffd4 	movui	r2,65535
    a8fc:	1180a236 	bltu	r2,r6,ab88 <__umoddi3+0x2d8>
    a900:	01003fc4 	movi	r4,255
    a904:	2189803a 	cmpltu	r4,r4,r6
    a908:	200890fa 	slli	r4,r4,3
    a90c:	3104d83a 	srl	r2,r6,r4
    a910:	00c00074 	movhi	r3,1
    a914:	18c08d04 	addi	r3,r3,564
    a918:	1885883a 	add	r2,r3,r2
    a91c:	10c00003 	ldbu	r3,0(r2)
    a920:	00800804 	movi	r2,32
    a924:	1909883a 	add	r4,r3,r4
    a928:	1125c83a 	sub	r18,r2,r4
    a92c:	90000526 	beq	r18,zero,a944 <__umoddi3+0x94>
    a930:	8ca2983a 	sll	r17,r17,r18
    a934:	8108d83a 	srl	r4,r16,r4
    a938:	34a6983a 	sll	r19,r6,r18
    a93c:	84a8983a 	sll	r20,r16,r18
    a940:	2478b03a 	or	fp,r4,r17
    a944:	982cd43a 	srli	r22,r19,16
    a948:	e009883a 	mov	r4,fp
    a94c:	9dffffcc 	andi	r23,r19,65535
    a950:	b00b883a 	mov	r5,r22
    a954:	000afd00 	call	afd0 <__umodsi3>
    a958:	b00b883a 	mov	r5,r22
    a95c:	e009883a 	mov	r4,fp
    a960:	102b883a 	mov	r21,r2
    a964:	000af6c0 	call	af6c <__udivsi3>
    a968:	100b883a 	mov	r5,r2
    a96c:	b809883a 	mov	r4,r23
    a970:	000b0280 	call	b028 <__mulsi3>
    a974:	a82a943a 	slli	r21,r21,16
    a978:	a006d43a 	srli	r3,r20,16
    a97c:	1d46b03a 	or	r3,r3,r21
    a980:	1880032e 	bgeu	r3,r2,a990 <__umoddi3+0xe0>
    a984:	1cc7883a 	add	r3,r3,r19
    a988:	1cc00136 	bltu	r3,r19,a990 <__umoddi3+0xe0>
    a98c:	18813136 	bltu	r3,r2,ae54 <__umoddi3+0x5a4>
    a990:	18a1c83a 	sub	r16,r3,r2
    a994:	b00b883a 	mov	r5,r22
    a998:	8009883a 	mov	r4,r16
    a99c:	000afd00 	call	afd0 <__umodsi3>
    a9a0:	b00b883a 	mov	r5,r22
    a9a4:	8009883a 	mov	r4,r16
    a9a8:	1023883a 	mov	r17,r2
    a9ac:	000af6c0 	call	af6c <__udivsi3>
    a9b0:	100b883a 	mov	r5,r2
    a9b4:	b809883a 	mov	r4,r23
    a9b8:	8822943a 	slli	r17,r17,16
    a9bc:	000b0280 	call	b028 <__mulsi3>
    a9c0:	a0ffffcc 	andi	r3,r20,65535
    a9c4:	1c46b03a 	or	r3,r3,r17
    a9c8:	1880042e 	bgeu	r3,r2,a9dc <__umoddi3+0x12c>
    a9cc:	1cc7883a 	add	r3,r3,r19
    a9d0:	1cc00236 	bltu	r3,r19,a9dc <__umoddi3+0x12c>
    a9d4:	1880012e 	bgeu	r3,r2,a9dc <__umoddi3+0x12c>
    a9d8:	1cc7883a 	add	r3,r3,r19
    a9dc:	1885c83a 	sub	r2,r3,r2
    a9e0:	1484d83a 	srl	r2,r2,r18
    a9e4:	0007883a 	mov	r3,zero
    a9e8:	00005306 	br	ab38 <__umoddi3+0x288>
    a9ec:	29c05036 	bltu	r5,r7,ab30 <__umoddi3+0x280>
    a9f0:	00bfffd4 	movui	r2,65535
    a9f4:	11c05c2e 	bgeu	r2,r7,ab68 <__umoddi3+0x2b8>
    a9f8:	00804034 	movhi	r2,256
    a9fc:	10bfffc4 	addi	r2,r2,-1
    aa00:	11c10636 	bltu	r2,r7,ae1c <__umoddi3+0x56c>
    aa04:	01000404 	movi	r4,16
    aa08:	3904d83a 	srl	r2,r7,r4
    aa0c:	00c00074 	movhi	r3,1
    aa10:	18c08d04 	addi	r3,r3,564
    aa14:	1885883a 	add	r2,r3,r2
    aa18:	14c00003 	ldbu	r19,0(r2)
    aa1c:	00c00804 	movi	r3,32
    aa20:	9927883a 	add	r19,r19,r4
    aa24:	1ce9c83a 	sub	r20,r3,r19
    aa28:	a0005c1e 	bne	r20,zero,ab9c <__umoddi3+0x2ec>
    aa2c:	3c400136 	bltu	r7,r17,aa34 <__umoddi3+0x184>
    aa30:	81810a36 	bltu	r16,r6,ae5c <__umoddi3+0x5ac>
    aa34:	8185c83a 	sub	r2,r16,r6
    aa38:	89e3c83a 	sub	r17,r17,r7
    aa3c:	8089803a 	cmpltu	r4,r16,r2
    aa40:	8939c83a 	sub	fp,r17,r4
    aa44:	e007883a 	mov	r3,fp
    aa48:	00003b06 	br	ab38 <__umoddi3+0x288>
    aa4c:	3000041e 	bne	r6,zero,aa60 <__umoddi3+0x1b0>
    aa50:	000b883a 	mov	r5,zero
    aa54:	01000044 	movi	r4,1
    aa58:	000af6c0 	call	af6c <__udivsi3>
    aa5c:	1027883a 	mov	r19,r2
    aa60:	00bfffd4 	movui	r2,65535
    aa64:	14c0442e 	bgeu	r2,r19,ab78 <__umoddi3+0x2c8>
    aa68:	00804034 	movhi	r2,256
    aa6c:	10bfffc4 	addi	r2,r2,-1
    aa70:	14c0ec36 	bltu	r2,r19,ae24 <__umoddi3+0x574>
    aa74:	00800404 	movi	r2,16
    aa78:	9886d83a 	srl	r3,r19,r2
    aa7c:	01000074 	movhi	r4,1
    aa80:	21008d04 	addi	r4,r4,564
    aa84:	20c7883a 	add	r3,r4,r3
    aa88:	18c00003 	ldbu	r3,0(r3)
    aa8c:	1887883a 	add	r3,r3,r2
    aa90:	00800804 	movi	r2,32
    aa94:	10e5c83a 	sub	r18,r2,r3
    aa98:	9000ab1e 	bne	r18,zero,ad48 <__umoddi3+0x498>
    aa9c:	982cd43a 	srli	r22,r19,16
    aaa0:	8ce3c83a 	sub	r17,r17,r19
    aaa4:	9dffffcc 	andi	r23,r19,65535
    aaa8:	b00b883a 	mov	r5,r22
    aaac:	8809883a 	mov	r4,r17
    aab0:	000afd00 	call	afd0 <__umodsi3>
    aab4:	b00b883a 	mov	r5,r22
    aab8:	8809883a 	mov	r4,r17
    aabc:	102b883a 	mov	r21,r2
    aac0:	000af6c0 	call	af6c <__udivsi3>
    aac4:	b80b883a 	mov	r5,r23
    aac8:	1009883a 	mov	r4,r2
    aacc:	000b0280 	call	b028 <__mulsi3>
    aad0:	a82a943a 	slli	r21,r21,16
    aad4:	a006d43a 	srli	r3,r20,16
    aad8:	1d46b03a 	or	r3,r3,r21
    aadc:	1880042e 	bgeu	r3,r2,aaf0 <__umoddi3+0x240>
    aae0:	1cc7883a 	add	r3,r3,r19
    aae4:	1cc00236 	bltu	r3,r19,aaf0 <__umoddi3+0x240>
    aae8:	1880012e 	bgeu	r3,r2,aaf0 <__umoddi3+0x240>
    aaec:	1cc7883a 	add	r3,r3,r19
    aaf0:	18a1c83a 	sub	r16,r3,r2
    aaf4:	b00b883a 	mov	r5,r22
    aaf8:	8009883a 	mov	r4,r16
    aafc:	000afd00 	call	afd0 <__umodsi3>
    ab00:	1023883a 	mov	r17,r2
    ab04:	b00b883a 	mov	r5,r22
    ab08:	8009883a 	mov	r4,r16
    ab0c:	000af6c0 	call	af6c <__udivsi3>
    ab10:	8822943a 	slli	r17,r17,16
    ab14:	b80b883a 	mov	r5,r23
    ab18:	1009883a 	mov	r4,r2
    ab1c:	000b0280 	call	b028 <__mulsi3>
    ab20:	a53fffcc 	andi	r20,r20,65535
    ab24:	a446b03a 	or	r3,r20,r17
    ab28:	18bfac2e 	bgeu	r3,r2,a9dc <__alt_data_end+0xfffeb5dc>
    ab2c:	003fa706 	br	a9cc <__alt_data_end+0xfffeb5cc>
    ab30:	2005883a 	mov	r2,r4
    ab34:	2807883a 	mov	r3,r5
    ab38:	dfc00c17 	ldw	ra,48(sp)
    ab3c:	df000b17 	ldw	fp,44(sp)
    ab40:	ddc00a17 	ldw	r23,40(sp)
    ab44:	dd800917 	ldw	r22,36(sp)
    ab48:	dd400817 	ldw	r21,32(sp)
    ab4c:	dd000717 	ldw	r20,28(sp)
    ab50:	dcc00617 	ldw	r19,24(sp)
    ab54:	dc800517 	ldw	r18,20(sp)
    ab58:	dc400417 	ldw	r17,16(sp)
    ab5c:	dc000317 	ldw	r16,12(sp)
    ab60:	dec00d04 	addi	sp,sp,52
    ab64:	f800283a 	ret
    ab68:	04c03fc4 	movi	r19,255
    ab6c:	99c9803a 	cmpltu	r4,r19,r7
    ab70:	200890fa 	slli	r4,r4,3
    ab74:	003fa406 	br	aa08 <__alt_data_end+0xfffeb608>
    ab78:	00803fc4 	movi	r2,255
    ab7c:	14c5803a 	cmpltu	r2,r2,r19
    ab80:	100490fa 	slli	r2,r2,3
    ab84:	003fbc06 	br	aa78 <__alt_data_end+0xfffeb678>
    ab88:	00804034 	movhi	r2,256
    ab8c:	10bfffc4 	addi	r2,r2,-1
    ab90:	1180a636 	bltu	r2,r6,ae2c <__umoddi3+0x57c>
    ab94:	01000404 	movi	r4,16
    ab98:	003f5c06 	br	a90c <__alt_data_end+0xfffeb50c>
    ab9c:	3d0e983a 	sll	r7,r7,r20
    aba0:	34ead83a 	srl	r21,r6,r19
    aba4:	8cc6d83a 	srl	r3,r17,r19
    aba8:	8d10983a 	sll	r8,r17,r20
    abac:	3d6ab03a 	or	r21,r7,r21
    abb0:	a82cd43a 	srli	r22,r21,16
    abb4:	84e2d83a 	srl	r17,r16,r19
    abb8:	1809883a 	mov	r4,r3
    abbc:	b00b883a 	mov	r5,r22
    abc0:	8a22b03a 	or	r17,r17,r8
    abc4:	3524983a 	sll	r18,r6,r20
    abc8:	dc400015 	stw	r17,0(sp)
    abcc:	d8c00115 	stw	r3,4(sp)
    abd0:	000afd00 	call	afd0 <__umodsi3>
    abd4:	d8c00117 	ldw	r3,4(sp)
    abd8:	b00b883a 	mov	r5,r22
    abdc:	1039883a 	mov	fp,r2
    abe0:	1809883a 	mov	r4,r3
    abe4:	000af6c0 	call	af6c <__udivsi3>
    abe8:	adffffcc 	andi	r23,r21,65535
    abec:	100b883a 	mov	r5,r2
    abf0:	b809883a 	mov	r4,r23
    abf4:	1023883a 	mov	r17,r2
    abf8:	000b0280 	call	b028 <__mulsi3>
    abfc:	d9400017 	ldw	r5,0(sp)
    ac00:	e008943a 	slli	r4,fp,16
    ac04:	8520983a 	sll	r16,r16,r20
    ac08:	2806d43a 	srli	r3,r5,16
    ac0c:	1906b03a 	or	r3,r3,r4
    ac10:	1880042e 	bgeu	r3,r2,ac24 <__umoddi3+0x374>
    ac14:	1d47883a 	add	r3,r3,r21
    ac18:	893fffc4 	addi	r4,r17,-1
    ac1c:	1d40892e 	bgeu	r3,r21,ae44 <__umoddi3+0x594>
    ac20:	2023883a 	mov	r17,r4
    ac24:	18b9c83a 	sub	fp,r3,r2
    ac28:	b00b883a 	mov	r5,r22
    ac2c:	e009883a 	mov	r4,fp
    ac30:	000afd00 	call	afd0 <__umodsi3>
    ac34:	b00b883a 	mov	r5,r22
    ac38:	e009883a 	mov	r4,fp
    ac3c:	d8800215 	stw	r2,8(sp)
    ac40:	000af6c0 	call	af6c <__udivsi3>
    ac44:	100b883a 	mov	r5,r2
    ac48:	b809883a 	mov	r4,r23
    ac4c:	102d883a 	mov	r22,r2
    ac50:	000b0280 	call	b028 <__mulsi3>
    ac54:	d9800217 	ldw	r6,8(sp)
    ac58:	d8c00017 	ldw	r3,0(sp)
    ac5c:	300c943a 	slli	r6,r6,16
    ac60:	1a3fffcc 	andi	r8,r3,65535
    ac64:	4190b03a 	or	r8,r8,r6
    ac68:	4080042e 	bgeu	r8,r2,ac7c <__umoddi3+0x3cc>
    ac6c:	4551883a 	add	r8,r8,r21
    ac70:	b0ffffc4 	addi	r3,r22,-1
    ac74:	45406f2e 	bgeu	r8,r21,ae34 <__umoddi3+0x584>
    ac78:	182d883a 	mov	r22,r3
    ac7c:	880e943a 	slli	r7,r17,16
    ac80:	9006d43a 	srli	r3,r18,16
    ac84:	91bfffcc 	andi	r6,r18,65535
    ac88:	3dacb03a 	or	r22,r7,r22
    ac8c:	b02ed43a 	srli	r23,r22,16
    ac90:	b5bfffcc 	andi	r22,r22,65535
    ac94:	300b883a 	mov	r5,r6
    ac98:	b009883a 	mov	r4,r22
    ac9c:	40a3c83a 	sub	r17,r8,r2
    aca0:	d8c00115 	stw	r3,4(sp)
    aca4:	d9800215 	stw	r6,8(sp)
    aca8:	000b0280 	call	b028 <__mulsi3>
    acac:	d9800217 	ldw	r6,8(sp)
    acb0:	b809883a 	mov	r4,r23
    acb4:	1039883a 	mov	fp,r2
    acb8:	300b883a 	mov	r5,r6
    acbc:	000b0280 	call	b028 <__mulsi3>
    acc0:	d8c00117 	ldw	r3,4(sp)
    acc4:	b809883a 	mov	r4,r23
    acc8:	d8800215 	stw	r2,8(sp)
    accc:	180b883a 	mov	r5,r3
    acd0:	000b0280 	call	b028 <__mulsi3>
    acd4:	d8c00117 	ldw	r3,4(sp)
    acd8:	b009883a 	mov	r4,r22
    acdc:	102f883a 	mov	r23,r2
    ace0:	180b883a 	mov	r5,r3
    ace4:	000b0280 	call	b028 <__mulsi3>
    ace8:	d9800217 	ldw	r6,8(sp)
    acec:	e006d43a 	srli	r3,fp,16
    acf0:	1185883a 	add	r2,r2,r6
    acf4:	1885883a 	add	r2,r3,r2
    acf8:	1180022e 	bgeu	r2,r6,ad04 <__umoddi3+0x454>
    acfc:	00c00074 	movhi	r3,1
    ad00:	b8ef883a 	add	r23,r23,r3
    ad04:	1006d43a 	srli	r3,r2,16
    ad08:	1004943a 	slli	r2,r2,16
    ad0c:	e73fffcc 	andi	fp,fp,65535
    ad10:	1dc7883a 	add	r3,r3,r23
    ad14:	1739883a 	add	fp,r2,fp
    ad18:	88c03a36 	bltu	r17,r3,ae04 <__umoddi3+0x554>
    ad1c:	88c05126 	beq	r17,r3,ae64 <__umoddi3+0x5b4>
    ad20:	88c9c83a 	sub	r4,r17,r3
    ad24:	e00f883a 	mov	r7,fp
    ad28:	81cfc83a 	sub	r7,r16,r7
    ad2c:	81c7803a 	cmpltu	r3,r16,r7
    ad30:	20c7c83a 	sub	r3,r4,r3
    ad34:	1cc4983a 	sll	r2,r3,r19
    ad38:	3d0ed83a 	srl	r7,r7,r20
    ad3c:	1d06d83a 	srl	r3,r3,r20
    ad40:	11c4b03a 	or	r2,r2,r7
    ad44:	003f7c06 	br	ab38 <__alt_data_end+0xfffeb738>
    ad48:	9ca6983a 	sll	r19,r19,r18
    ad4c:	88f8d83a 	srl	fp,r17,r3
    ad50:	80c4d83a 	srl	r2,r16,r3
    ad54:	982cd43a 	srli	r22,r19,16
    ad58:	8ca2983a 	sll	r17,r17,r18
    ad5c:	e009883a 	mov	r4,fp
    ad60:	b00b883a 	mov	r5,r22
    ad64:	146ab03a 	or	r21,r2,r17
    ad68:	000afd00 	call	afd0 <__umodsi3>
    ad6c:	b00b883a 	mov	r5,r22
    ad70:	e009883a 	mov	r4,fp
    ad74:	1029883a 	mov	r20,r2
    ad78:	9dffffcc 	andi	r23,r19,65535
    ad7c:	000af6c0 	call	af6c <__udivsi3>
    ad80:	b809883a 	mov	r4,r23
    ad84:	100b883a 	mov	r5,r2
    ad88:	000b0280 	call	b028 <__mulsi3>
    ad8c:	a008943a 	slli	r4,r20,16
    ad90:	a806d43a 	srli	r3,r21,16
    ad94:	84a8983a 	sll	r20,r16,r18
    ad98:	1906b03a 	or	r3,r3,r4
    ad9c:	1880042e 	bgeu	r3,r2,adb0 <__umoddi3+0x500>
    ada0:	1cc7883a 	add	r3,r3,r19
    ada4:	1cc00236 	bltu	r3,r19,adb0 <__umoddi3+0x500>
    ada8:	1880012e 	bgeu	r3,r2,adb0 <__umoddi3+0x500>
    adac:	1cc7883a 	add	r3,r3,r19
    adb0:	18a3c83a 	sub	r17,r3,r2
    adb4:	b00b883a 	mov	r5,r22
    adb8:	8809883a 	mov	r4,r17
    adbc:	000afd00 	call	afd0 <__umodsi3>
    adc0:	b00b883a 	mov	r5,r22
    adc4:	8809883a 	mov	r4,r17
    adc8:	1021883a 	mov	r16,r2
    adcc:	000af6c0 	call	af6c <__udivsi3>
    add0:	100b883a 	mov	r5,r2
    add4:	b809883a 	mov	r4,r23
    add8:	8020943a 	slli	r16,r16,16
    addc:	000b0280 	call	b028 <__mulsi3>
    ade0:	a8ffffcc 	andi	r3,r21,65535
    ade4:	1c06b03a 	or	r3,r3,r16
    ade8:	1880042e 	bgeu	r3,r2,adfc <__umoddi3+0x54c>
    adec:	1cc7883a 	add	r3,r3,r19
    adf0:	1cc00236 	bltu	r3,r19,adfc <__umoddi3+0x54c>
    adf4:	1880012e 	bgeu	r3,r2,adfc <__umoddi3+0x54c>
    adf8:	1cc7883a 	add	r3,r3,r19
    adfc:	18a3c83a 	sub	r17,r3,r2
    ae00:	003f2906 	br	aaa8 <__alt_data_end+0xfffeb6a8>
    ae04:	e48fc83a 	sub	r7,fp,r18
    ae08:	1d49c83a 	sub	r4,r3,r21
    ae0c:	e1f9803a 	cmpltu	fp,fp,r7
    ae10:	2739c83a 	sub	fp,r4,fp
    ae14:	8f09c83a 	sub	r4,r17,fp
    ae18:	003fc306 	br	ad28 <__alt_data_end+0xfffeb928>
    ae1c:	01000604 	movi	r4,24
    ae20:	003ef906 	br	aa08 <__alt_data_end+0xfffeb608>
    ae24:	00800604 	movi	r2,24
    ae28:	003f1306 	br	aa78 <__alt_data_end+0xfffeb678>
    ae2c:	01000604 	movi	r4,24
    ae30:	003eb606 	br	a90c <__alt_data_end+0xfffeb50c>
    ae34:	40bf902e 	bgeu	r8,r2,ac78 <__alt_data_end+0xfffeb878>
    ae38:	b5bfff84 	addi	r22,r22,-2
    ae3c:	4551883a 	add	r8,r8,r21
    ae40:	003f8e06 	br	ac7c <__alt_data_end+0xfffeb87c>
    ae44:	18bf762e 	bgeu	r3,r2,ac20 <__alt_data_end+0xfffeb820>
    ae48:	8c7fff84 	addi	r17,r17,-2
    ae4c:	1d47883a 	add	r3,r3,r21
    ae50:	003f7406 	br	ac24 <__alt_data_end+0xfffeb824>
    ae54:	1cc7883a 	add	r3,r3,r19
    ae58:	003ecd06 	br	a990 <__alt_data_end+0xfffeb590>
    ae5c:	8005883a 	mov	r2,r16
    ae60:	003ef806 	br	aa44 <__alt_data_end+0xfffeb644>
    ae64:	873fe736 	bltu	r16,fp,ae04 <__alt_data_end+0xfffeba04>
    ae68:	e00f883a 	mov	r7,fp
    ae6c:	0009883a 	mov	r4,zero
    ae70:	003fad06 	br	ad28 <__alt_data_end+0xfffeb928>

0000ae74 <__divsi3>:
    ae74:	20001b16 	blt	r4,zero,aee4 <__divsi3+0x70>
    ae78:	000f883a 	mov	r7,zero
    ae7c:	28001616 	blt	r5,zero,aed8 <__divsi3+0x64>
    ae80:	200d883a 	mov	r6,r4
    ae84:	29001a2e 	bgeu	r5,r4,aef0 <__divsi3+0x7c>
    ae88:	00800804 	movi	r2,32
    ae8c:	00c00044 	movi	r3,1
    ae90:	00000106 	br	ae98 <__divsi3+0x24>
    ae94:	10000d26 	beq	r2,zero,aecc <__divsi3+0x58>
    ae98:	294b883a 	add	r5,r5,r5
    ae9c:	10bfffc4 	addi	r2,r2,-1
    aea0:	18c7883a 	add	r3,r3,r3
    aea4:	293ffb36 	bltu	r5,r4,ae94 <__alt_data_end+0xfffeba94>
    aea8:	0005883a 	mov	r2,zero
    aeac:	18000726 	beq	r3,zero,aecc <__divsi3+0x58>
    aeb0:	0005883a 	mov	r2,zero
    aeb4:	31400236 	bltu	r6,r5,aec0 <__divsi3+0x4c>
    aeb8:	314dc83a 	sub	r6,r6,r5
    aebc:	10c4b03a 	or	r2,r2,r3
    aec0:	1806d07a 	srli	r3,r3,1
    aec4:	280ad07a 	srli	r5,r5,1
    aec8:	183ffa1e 	bne	r3,zero,aeb4 <__alt_data_end+0xfffebab4>
    aecc:	38000126 	beq	r7,zero,aed4 <__divsi3+0x60>
    aed0:	0085c83a 	sub	r2,zero,r2
    aed4:	f800283a 	ret
    aed8:	014bc83a 	sub	r5,zero,r5
    aedc:	39c0005c 	xori	r7,r7,1
    aee0:	003fe706 	br	ae80 <__alt_data_end+0xfffeba80>
    aee4:	0109c83a 	sub	r4,zero,r4
    aee8:	01c00044 	movi	r7,1
    aeec:	003fe306 	br	ae7c <__alt_data_end+0xfffeba7c>
    aef0:	00c00044 	movi	r3,1
    aef4:	003fee06 	br	aeb0 <__alt_data_end+0xfffebab0>

0000aef8 <__modsi3>:
    aef8:	20001716 	blt	r4,zero,af58 <__modsi3+0x60>
    aefc:	000f883a 	mov	r7,zero
    af00:	2005883a 	mov	r2,r4
    af04:	28001216 	blt	r5,zero,af50 <__modsi3+0x58>
    af08:	2900162e 	bgeu	r5,r4,af64 <__modsi3+0x6c>
    af0c:	01800804 	movi	r6,32
    af10:	00c00044 	movi	r3,1
    af14:	00000106 	br	af1c <__modsi3+0x24>
    af18:	30000a26 	beq	r6,zero,af44 <__modsi3+0x4c>
    af1c:	294b883a 	add	r5,r5,r5
    af20:	31bfffc4 	addi	r6,r6,-1
    af24:	18c7883a 	add	r3,r3,r3
    af28:	293ffb36 	bltu	r5,r4,af18 <__alt_data_end+0xfffebb18>
    af2c:	18000526 	beq	r3,zero,af44 <__modsi3+0x4c>
    af30:	1806d07a 	srli	r3,r3,1
    af34:	11400136 	bltu	r2,r5,af3c <__modsi3+0x44>
    af38:	1145c83a 	sub	r2,r2,r5
    af3c:	280ad07a 	srli	r5,r5,1
    af40:	183ffb1e 	bne	r3,zero,af30 <__alt_data_end+0xfffebb30>
    af44:	38000126 	beq	r7,zero,af4c <__modsi3+0x54>
    af48:	0085c83a 	sub	r2,zero,r2
    af4c:	f800283a 	ret
    af50:	014bc83a 	sub	r5,zero,r5
    af54:	003fec06 	br	af08 <__alt_data_end+0xfffebb08>
    af58:	0109c83a 	sub	r4,zero,r4
    af5c:	01c00044 	movi	r7,1
    af60:	003fe706 	br	af00 <__alt_data_end+0xfffebb00>
    af64:	00c00044 	movi	r3,1
    af68:	003ff106 	br	af30 <__alt_data_end+0xfffebb30>

0000af6c <__udivsi3>:
    af6c:	200d883a 	mov	r6,r4
    af70:	2900152e 	bgeu	r5,r4,afc8 <__udivsi3+0x5c>
    af74:	28001416 	blt	r5,zero,afc8 <__udivsi3+0x5c>
    af78:	00800804 	movi	r2,32
    af7c:	00c00044 	movi	r3,1
    af80:	00000206 	br	af8c <__udivsi3+0x20>
    af84:	10000e26 	beq	r2,zero,afc0 <__udivsi3+0x54>
    af88:	28000516 	blt	r5,zero,afa0 <__udivsi3+0x34>
    af8c:	294b883a 	add	r5,r5,r5
    af90:	10bfffc4 	addi	r2,r2,-1
    af94:	18c7883a 	add	r3,r3,r3
    af98:	293ffa36 	bltu	r5,r4,af84 <__alt_data_end+0xfffebb84>
    af9c:	18000826 	beq	r3,zero,afc0 <__udivsi3+0x54>
    afa0:	0005883a 	mov	r2,zero
    afa4:	31400236 	bltu	r6,r5,afb0 <__udivsi3+0x44>
    afa8:	314dc83a 	sub	r6,r6,r5
    afac:	10c4b03a 	or	r2,r2,r3
    afb0:	1806d07a 	srli	r3,r3,1
    afb4:	280ad07a 	srli	r5,r5,1
    afb8:	183ffa1e 	bne	r3,zero,afa4 <__alt_data_end+0xfffebba4>
    afbc:	f800283a 	ret
    afc0:	0005883a 	mov	r2,zero
    afc4:	f800283a 	ret
    afc8:	00c00044 	movi	r3,1
    afcc:	003ff406 	br	afa0 <__alt_data_end+0xfffebba0>

0000afd0 <__umodsi3>:
    afd0:	2005883a 	mov	r2,r4
    afd4:	2900122e 	bgeu	r5,r4,b020 <__umodsi3+0x50>
    afd8:	28001116 	blt	r5,zero,b020 <__umodsi3+0x50>
    afdc:	01800804 	movi	r6,32
    afe0:	00c00044 	movi	r3,1
    afe4:	00000206 	br	aff0 <__umodsi3+0x20>
    afe8:	30000c26 	beq	r6,zero,b01c <__umodsi3+0x4c>
    afec:	28000516 	blt	r5,zero,b004 <__umodsi3+0x34>
    aff0:	294b883a 	add	r5,r5,r5
    aff4:	31bfffc4 	addi	r6,r6,-1
    aff8:	18c7883a 	add	r3,r3,r3
    affc:	293ffa36 	bltu	r5,r4,afe8 <__alt_data_end+0xfffebbe8>
    b000:	18000626 	beq	r3,zero,b01c <__umodsi3+0x4c>
    b004:	1806d07a 	srli	r3,r3,1
    b008:	11400136 	bltu	r2,r5,b010 <__umodsi3+0x40>
    b00c:	1145c83a 	sub	r2,r2,r5
    b010:	280ad07a 	srli	r5,r5,1
    b014:	183ffb1e 	bne	r3,zero,b004 <__alt_data_end+0xfffebc04>
    b018:	f800283a 	ret
    b01c:	f800283a 	ret
    b020:	00c00044 	movi	r3,1
    b024:	003ff706 	br	b004 <__alt_data_end+0xfffebc04>

0000b028 <__mulsi3>:
    b028:	0005883a 	mov	r2,zero
    b02c:	20000726 	beq	r4,zero,b04c <__mulsi3+0x24>
    b030:	20c0004c 	andi	r3,r4,1
    b034:	2008d07a 	srli	r4,r4,1
    b038:	18000126 	beq	r3,zero,b040 <__mulsi3+0x18>
    b03c:	1145883a 	add	r2,r2,r5
    b040:	294b883a 	add	r5,r5,r5
    b044:	203ffa1e 	bne	r4,zero,b030 <__alt_data_end+0xfffebc30>
    b048:	f800283a 	ret
    b04c:	f800283a 	ret

0000b050 <__adddf3>:
    b050:	02c00434 	movhi	r11,16
    b054:	5affffc4 	addi	r11,r11,-1
    b058:	2806d7fa 	srli	r3,r5,31
    b05c:	2ad4703a 	and	r10,r5,r11
    b060:	3ad2703a 	and	r9,r7,r11
    b064:	3804d53a 	srli	r2,r7,20
    b068:	3018d77a 	srli	r12,r6,29
    b06c:	280ad53a 	srli	r5,r5,20
    b070:	501490fa 	slli	r10,r10,3
    b074:	2010d77a 	srli	r8,r4,29
    b078:	481290fa 	slli	r9,r9,3
    b07c:	380ed7fa 	srli	r7,r7,31
    b080:	defffb04 	addi	sp,sp,-20
    b084:	dc800215 	stw	r18,8(sp)
    b088:	dc400115 	stw	r17,4(sp)
    b08c:	dc000015 	stw	r16,0(sp)
    b090:	dfc00415 	stw	ra,16(sp)
    b094:	dcc00315 	stw	r19,12(sp)
    b098:	1c803fcc 	andi	r18,r3,255
    b09c:	2c01ffcc 	andi	r16,r5,2047
    b0a0:	5210b03a 	or	r8,r10,r8
    b0a4:	202290fa 	slli	r17,r4,3
    b0a8:	1081ffcc 	andi	r2,r2,2047
    b0ac:	4b12b03a 	or	r9,r9,r12
    b0b0:	300c90fa 	slli	r6,r6,3
    b0b4:	91c07526 	beq	r18,r7,b28c <__adddf3+0x23c>
    b0b8:	8087c83a 	sub	r3,r16,r2
    b0bc:	00c0ab0e 	bge	zero,r3,b36c <__adddf3+0x31c>
    b0c0:	10002a1e 	bne	r2,zero,b16c <__adddf3+0x11c>
    b0c4:	4984b03a 	or	r2,r9,r6
    b0c8:	1000961e 	bne	r2,zero,b324 <__adddf3+0x2d4>
    b0cc:	888001cc 	andi	r2,r17,7
    b0d0:	10000726 	beq	r2,zero,b0f0 <__adddf3+0xa0>
    b0d4:	888003cc 	andi	r2,r17,15
    b0d8:	00c00104 	movi	r3,4
    b0dc:	10c00426 	beq	r2,r3,b0f0 <__adddf3+0xa0>
    b0e0:	88c7883a 	add	r3,r17,r3
    b0e4:	1c63803a 	cmpltu	r17,r3,r17
    b0e8:	4451883a 	add	r8,r8,r17
    b0ec:	1823883a 	mov	r17,r3
    b0f0:	4080202c 	andhi	r2,r8,128
    b0f4:	10005926 	beq	r2,zero,b25c <__adddf3+0x20c>
    b0f8:	84000044 	addi	r16,r16,1
    b0fc:	0081ffc4 	movi	r2,2047
    b100:	8080ba26 	beq	r16,r2,b3ec <__adddf3+0x39c>
    b104:	00bfe034 	movhi	r2,65408
    b108:	10bfffc4 	addi	r2,r2,-1
    b10c:	4090703a 	and	r8,r8,r2
    b110:	4004977a 	slli	r2,r8,29
    b114:	4010927a 	slli	r8,r8,9
    b118:	8822d0fa 	srli	r17,r17,3
    b11c:	8401ffcc 	andi	r16,r16,2047
    b120:	4010d33a 	srli	r8,r8,12
    b124:	9007883a 	mov	r3,r18
    b128:	1444b03a 	or	r2,r2,r17
    b12c:	8401ffcc 	andi	r16,r16,2047
    b130:	8020953a 	slli	r16,r16,20
    b134:	18c03fcc 	andi	r3,r3,255
    b138:	01000434 	movhi	r4,16
    b13c:	213fffc4 	addi	r4,r4,-1
    b140:	180697fa 	slli	r3,r3,31
    b144:	4110703a 	and	r8,r8,r4
    b148:	4410b03a 	or	r8,r8,r16
    b14c:	40c6b03a 	or	r3,r8,r3
    b150:	dfc00417 	ldw	ra,16(sp)
    b154:	dcc00317 	ldw	r19,12(sp)
    b158:	dc800217 	ldw	r18,8(sp)
    b15c:	dc400117 	ldw	r17,4(sp)
    b160:	dc000017 	ldw	r16,0(sp)
    b164:	dec00504 	addi	sp,sp,20
    b168:	f800283a 	ret
    b16c:	0081ffc4 	movi	r2,2047
    b170:	80bfd626 	beq	r16,r2,b0cc <__alt_data_end+0xfffebccc>
    b174:	4a402034 	orhi	r9,r9,128
    b178:	00800e04 	movi	r2,56
    b17c:	10c09f16 	blt	r2,r3,b3fc <__adddf3+0x3ac>
    b180:	008007c4 	movi	r2,31
    b184:	10c0c216 	blt	r2,r3,b490 <__adddf3+0x440>
    b188:	00800804 	movi	r2,32
    b18c:	10c5c83a 	sub	r2,r2,r3
    b190:	488a983a 	sll	r5,r9,r2
    b194:	30c8d83a 	srl	r4,r6,r3
    b198:	3084983a 	sll	r2,r6,r2
    b19c:	48c6d83a 	srl	r3,r9,r3
    b1a0:	290cb03a 	or	r6,r5,r4
    b1a4:	1004c03a 	cmpne	r2,r2,zero
    b1a8:	308cb03a 	or	r6,r6,r2
    b1ac:	898dc83a 	sub	r6,r17,r6
    b1b0:	89a3803a 	cmpltu	r17,r17,r6
    b1b4:	40d1c83a 	sub	r8,r8,r3
    b1b8:	4451c83a 	sub	r8,r8,r17
    b1bc:	3023883a 	mov	r17,r6
    b1c0:	4080202c 	andhi	r2,r8,128
    b1c4:	10002326 	beq	r2,zero,b254 <__adddf3+0x204>
    b1c8:	04c02034 	movhi	r19,128
    b1cc:	9cffffc4 	addi	r19,r19,-1
    b1d0:	44e6703a 	and	r19,r8,r19
    b1d4:	98007626 	beq	r19,zero,b3b0 <__adddf3+0x360>
    b1d8:	9809883a 	mov	r4,r19
    b1dc:	000d8900 	call	d890 <__clzsi2>
    b1e0:	10fffe04 	addi	r3,r2,-8
    b1e4:	010007c4 	movi	r4,31
    b1e8:	20c07716 	blt	r4,r3,b3c8 <__adddf3+0x378>
    b1ec:	00800804 	movi	r2,32
    b1f0:	10c5c83a 	sub	r2,r2,r3
    b1f4:	8884d83a 	srl	r2,r17,r2
    b1f8:	98d0983a 	sll	r8,r19,r3
    b1fc:	88e2983a 	sll	r17,r17,r3
    b200:	1204b03a 	or	r2,r2,r8
    b204:	1c007416 	blt	r3,r16,b3d8 <__adddf3+0x388>
    b208:	1c21c83a 	sub	r16,r3,r16
    b20c:	82000044 	addi	r8,r16,1
    b210:	00c007c4 	movi	r3,31
    b214:	1a009116 	blt	r3,r8,b45c <__adddf3+0x40c>
    b218:	00c00804 	movi	r3,32
    b21c:	1a07c83a 	sub	r3,r3,r8
    b220:	8a08d83a 	srl	r4,r17,r8
    b224:	88e2983a 	sll	r17,r17,r3
    b228:	10c6983a 	sll	r3,r2,r3
    b22c:	1210d83a 	srl	r8,r2,r8
    b230:	8804c03a 	cmpne	r2,r17,zero
    b234:	1906b03a 	or	r3,r3,r4
    b238:	18a2b03a 	or	r17,r3,r2
    b23c:	0021883a 	mov	r16,zero
    b240:	003fa206 	br	b0cc <__alt_data_end+0xfffebccc>
    b244:	1890b03a 	or	r8,r3,r2
    b248:	40017d26 	beq	r8,zero,b840 <__adddf3+0x7f0>
    b24c:	1011883a 	mov	r8,r2
    b250:	1823883a 	mov	r17,r3
    b254:	888001cc 	andi	r2,r17,7
    b258:	103f9e1e 	bne	r2,zero,b0d4 <__alt_data_end+0xfffebcd4>
    b25c:	4004977a 	slli	r2,r8,29
    b260:	8822d0fa 	srli	r17,r17,3
    b264:	4010d0fa 	srli	r8,r8,3
    b268:	9007883a 	mov	r3,r18
    b26c:	1444b03a 	or	r2,r2,r17
    b270:	0101ffc4 	movi	r4,2047
    b274:	81002426 	beq	r16,r4,b308 <__adddf3+0x2b8>
    b278:	8120703a 	and	r16,r16,r4
    b27c:	01000434 	movhi	r4,16
    b280:	213fffc4 	addi	r4,r4,-1
    b284:	4110703a 	and	r8,r8,r4
    b288:	003fa806 	br	b12c <__alt_data_end+0xfffebd2c>
    b28c:	8089c83a 	sub	r4,r16,r2
    b290:	01005e0e 	bge	zero,r4,b40c <__adddf3+0x3bc>
    b294:	10002b26 	beq	r2,zero,b344 <__adddf3+0x2f4>
    b298:	0081ffc4 	movi	r2,2047
    b29c:	80bf8b26 	beq	r16,r2,b0cc <__alt_data_end+0xfffebccc>
    b2a0:	4a402034 	orhi	r9,r9,128
    b2a4:	00800e04 	movi	r2,56
    b2a8:	1100a40e 	bge	r2,r4,b53c <__adddf3+0x4ec>
    b2ac:	498cb03a 	or	r6,r9,r6
    b2b0:	300ac03a 	cmpne	r5,r6,zero
    b2b4:	0013883a 	mov	r9,zero
    b2b8:	2c4b883a 	add	r5,r5,r17
    b2bc:	2c63803a 	cmpltu	r17,r5,r17
    b2c0:	4a11883a 	add	r8,r9,r8
    b2c4:	8a11883a 	add	r8,r17,r8
    b2c8:	2823883a 	mov	r17,r5
    b2cc:	4080202c 	andhi	r2,r8,128
    b2d0:	103fe026 	beq	r2,zero,b254 <__alt_data_end+0xfffebe54>
    b2d4:	84000044 	addi	r16,r16,1
    b2d8:	0081ffc4 	movi	r2,2047
    b2dc:	8080d226 	beq	r16,r2,b628 <__adddf3+0x5d8>
    b2e0:	00bfe034 	movhi	r2,65408
    b2e4:	10bfffc4 	addi	r2,r2,-1
    b2e8:	4090703a 	and	r8,r8,r2
    b2ec:	880ad07a 	srli	r5,r17,1
    b2f0:	400897fa 	slli	r4,r8,31
    b2f4:	88c0004c 	andi	r3,r17,1
    b2f8:	28e2b03a 	or	r17,r5,r3
    b2fc:	4010d07a 	srli	r8,r8,1
    b300:	2462b03a 	or	r17,r4,r17
    b304:	003f7106 	br	b0cc <__alt_data_end+0xfffebccc>
    b308:	4088b03a 	or	r4,r8,r2
    b30c:	20014526 	beq	r4,zero,b824 <__adddf3+0x7d4>
    b310:	01000434 	movhi	r4,16
    b314:	42000234 	orhi	r8,r8,8
    b318:	213fffc4 	addi	r4,r4,-1
    b31c:	4110703a 	and	r8,r8,r4
    b320:	003f8206 	br	b12c <__alt_data_end+0xfffebd2c>
    b324:	18ffffc4 	addi	r3,r3,-1
    b328:	1800491e 	bne	r3,zero,b450 <__adddf3+0x400>
    b32c:	898bc83a 	sub	r5,r17,r6
    b330:	8963803a 	cmpltu	r17,r17,r5
    b334:	4251c83a 	sub	r8,r8,r9
    b338:	4451c83a 	sub	r8,r8,r17
    b33c:	2823883a 	mov	r17,r5
    b340:	003f9f06 	br	b1c0 <__alt_data_end+0xfffebdc0>
    b344:	4984b03a 	or	r2,r9,r6
    b348:	103f6026 	beq	r2,zero,b0cc <__alt_data_end+0xfffebccc>
    b34c:	213fffc4 	addi	r4,r4,-1
    b350:	2000931e 	bne	r4,zero,b5a0 <__adddf3+0x550>
    b354:	898d883a 	add	r6,r17,r6
    b358:	3463803a 	cmpltu	r17,r6,r17
    b35c:	4251883a 	add	r8,r8,r9
    b360:	8a11883a 	add	r8,r17,r8
    b364:	3023883a 	mov	r17,r6
    b368:	003fd806 	br	b2cc <__alt_data_end+0xfffebecc>
    b36c:	1800541e 	bne	r3,zero,b4c0 <__adddf3+0x470>
    b370:	80800044 	addi	r2,r16,1
    b374:	1081ffcc 	andi	r2,r2,2047
    b378:	00c00044 	movi	r3,1
    b37c:	1880a00e 	bge	r3,r2,b600 <__adddf3+0x5b0>
    b380:	8989c83a 	sub	r4,r17,r6
    b384:	8905803a 	cmpltu	r2,r17,r4
    b388:	4267c83a 	sub	r19,r8,r9
    b38c:	98a7c83a 	sub	r19,r19,r2
    b390:	9880202c 	andhi	r2,r19,128
    b394:	10006326 	beq	r2,zero,b524 <__adddf3+0x4d4>
    b398:	3463c83a 	sub	r17,r6,r17
    b39c:	4a07c83a 	sub	r3,r9,r8
    b3a0:	344d803a 	cmpltu	r6,r6,r17
    b3a4:	19a7c83a 	sub	r19,r3,r6
    b3a8:	3825883a 	mov	r18,r7
    b3ac:	983f8a1e 	bne	r19,zero,b1d8 <__alt_data_end+0xfffebdd8>
    b3b0:	8809883a 	mov	r4,r17
    b3b4:	000d8900 	call	d890 <__clzsi2>
    b3b8:	10800804 	addi	r2,r2,32
    b3bc:	10fffe04 	addi	r3,r2,-8
    b3c0:	010007c4 	movi	r4,31
    b3c4:	20ff890e 	bge	r4,r3,b1ec <__alt_data_end+0xfffebdec>
    b3c8:	10bff604 	addi	r2,r2,-40
    b3cc:	8884983a 	sll	r2,r17,r2
    b3d0:	0023883a 	mov	r17,zero
    b3d4:	1c3f8c0e 	bge	r3,r16,b208 <__alt_data_end+0xfffebe08>
    b3d8:	023fe034 	movhi	r8,65408
    b3dc:	423fffc4 	addi	r8,r8,-1
    b3e0:	80e1c83a 	sub	r16,r16,r3
    b3e4:	1210703a 	and	r8,r2,r8
    b3e8:	003f3806 	br	b0cc <__alt_data_end+0xfffebccc>
    b3ec:	9007883a 	mov	r3,r18
    b3f0:	0011883a 	mov	r8,zero
    b3f4:	0005883a 	mov	r2,zero
    b3f8:	003f4c06 	br	b12c <__alt_data_end+0xfffebd2c>
    b3fc:	498cb03a 	or	r6,r9,r6
    b400:	300cc03a 	cmpne	r6,r6,zero
    b404:	0007883a 	mov	r3,zero
    b408:	003f6806 	br	b1ac <__alt_data_end+0xfffebdac>
    b40c:	20009c1e 	bne	r4,zero,b680 <__adddf3+0x630>
    b410:	80800044 	addi	r2,r16,1
    b414:	1141ffcc 	andi	r5,r2,2047
    b418:	01000044 	movi	r4,1
    b41c:	2140670e 	bge	r4,r5,b5bc <__adddf3+0x56c>
    b420:	0101ffc4 	movi	r4,2047
    b424:	11007f26 	beq	r2,r4,b624 <__adddf3+0x5d4>
    b428:	898d883a 	add	r6,r17,r6
    b42c:	4247883a 	add	r3,r8,r9
    b430:	3451803a 	cmpltu	r8,r6,r17
    b434:	40d1883a 	add	r8,r8,r3
    b438:	402297fa 	slli	r17,r8,31
    b43c:	300cd07a 	srli	r6,r6,1
    b440:	4010d07a 	srli	r8,r8,1
    b444:	1021883a 	mov	r16,r2
    b448:	89a2b03a 	or	r17,r17,r6
    b44c:	003f1f06 	br	b0cc <__alt_data_end+0xfffebccc>
    b450:	0081ffc4 	movi	r2,2047
    b454:	80bf481e 	bne	r16,r2,b178 <__alt_data_end+0xfffebd78>
    b458:	003f1c06 	br	b0cc <__alt_data_end+0xfffebccc>
    b45c:	843ff844 	addi	r16,r16,-31
    b460:	01000804 	movi	r4,32
    b464:	1406d83a 	srl	r3,r2,r16
    b468:	41005026 	beq	r8,r4,b5ac <__adddf3+0x55c>
    b46c:	01001004 	movi	r4,64
    b470:	2211c83a 	sub	r8,r4,r8
    b474:	1204983a 	sll	r2,r2,r8
    b478:	88a2b03a 	or	r17,r17,r2
    b47c:	8822c03a 	cmpne	r17,r17,zero
    b480:	1c62b03a 	or	r17,r3,r17
    b484:	0011883a 	mov	r8,zero
    b488:	0021883a 	mov	r16,zero
    b48c:	003f7106 	br	b254 <__alt_data_end+0xfffebe54>
    b490:	193ff804 	addi	r4,r3,-32
    b494:	00800804 	movi	r2,32
    b498:	4908d83a 	srl	r4,r9,r4
    b49c:	18804526 	beq	r3,r2,b5b4 <__adddf3+0x564>
    b4a0:	00801004 	movi	r2,64
    b4a4:	10c5c83a 	sub	r2,r2,r3
    b4a8:	4886983a 	sll	r3,r9,r2
    b4ac:	198cb03a 	or	r6,r3,r6
    b4b0:	300cc03a 	cmpne	r6,r6,zero
    b4b4:	218cb03a 	or	r6,r4,r6
    b4b8:	0007883a 	mov	r3,zero
    b4bc:	003f3b06 	br	b1ac <__alt_data_end+0xfffebdac>
    b4c0:	80002a26 	beq	r16,zero,b56c <__adddf3+0x51c>
    b4c4:	0101ffc4 	movi	r4,2047
    b4c8:	11006826 	beq	r2,r4,b66c <__adddf3+0x61c>
    b4cc:	00c7c83a 	sub	r3,zero,r3
    b4d0:	42002034 	orhi	r8,r8,128
    b4d4:	01000e04 	movi	r4,56
    b4d8:	20c07c16 	blt	r4,r3,b6cc <__adddf3+0x67c>
    b4dc:	010007c4 	movi	r4,31
    b4e0:	20c0da16 	blt	r4,r3,b84c <__adddf3+0x7fc>
    b4e4:	01000804 	movi	r4,32
    b4e8:	20c9c83a 	sub	r4,r4,r3
    b4ec:	4114983a 	sll	r10,r8,r4
    b4f0:	88cad83a 	srl	r5,r17,r3
    b4f4:	8908983a 	sll	r4,r17,r4
    b4f8:	40c6d83a 	srl	r3,r8,r3
    b4fc:	5162b03a 	or	r17,r10,r5
    b500:	2008c03a 	cmpne	r4,r4,zero
    b504:	8922b03a 	or	r17,r17,r4
    b508:	3463c83a 	sub	r17,r6,r17
    b50c:	48c7c83a 	sub	r3,r9,r3
    b510:	344d803a 	cmpltu	r6,r6,r17
    b514:	1991c83a 	sub	r8,r3,r6
    b518:	1021883a 	mov	r16,r2
    b51c:	3825883a 	mov	r18,r7
    b520:	003f2706 	br	b1c0 <__alt_data_end+0xfffebdc0>
    b524:	24d0b03a 	or	r8,r4,r19
    b528:	40001b1e 	bne	r8,zero,b598 <__adddf3+0x548>
    b52c:	0005883a 	mov	r2,zero
    b530:	0007883a 	mov	r3,zero
    b534:	0021883a 	mov	r16,zero
    b538:	003f4d06 	br	b270 <__alt_data_end+0xfffebe70>
    b53c:	008007c4 	movi	r2,31
    b540:	11003c16 	blt	r2,r4,b634 <__adddf3+0x5e4>
    b544:	00800804 	movi	r2,32
    b548:	1105c83a 	sub	r2,r2,r4
    b54c:	488e983a 	sll	r7,r9,r2
    b550:	310ad83a 	srl	r5,r6,r4
    b554:	3084983a 	sll	r2,r6,r2
    b558:	4912d83a 	srl	r9,r9,r4
    b55c:	394ab03a 	or	r5,r7,r5
    b560:	1004c03a 	cmpne	r2,r2,zero
    b564:	288ab03a 	or	r5,r5,r2
    b568:	003f5306 	br	b2b8 <__alt_data_end+0xfffebeb8>
    b56c:	4448b03a 	or	r4,r8,r17
    b570:	20003e26 	beq	r4,zero,b66c <__adddf3+0x61c>
    b574:	00c6303a 	nor	r3,zero,r3
    b578:	18003a1e 	bne	r3,zero,b664 <__adddf3+0x614>
    b57c:	3463c83a 	sub	r17,r6,r17
    b580:	4a07c83a 	sub	r3,r9,r8
    b584:	344d803a 	cmpltu	r6,r6,r17
    b588:	1991c83a 	sub	r8,r3,r6
    b58c:	1021883a 	mov	r16,r2
    b590:	3825883a 	mov	r18,r7
    b594:	003f0a06 	br	b1c0 <__alt_data_end+0xfffebdc0>
    b598:	2023883a 	mov	r17,r4
    b59c:	003f0d06 	br	b1d4 <__alt_data_end+0xfffebdd4>
    b5a0:	0081ffc4 	movi	r2,2047
    b5a4:	80bf3f1e 	bne	r16,r2,b2a4 <__alt_data_end+0xfffebea4>
    b5a8:	003ec806 	br	b0cc <__alt_data_end+0xfffebccc>
    b5ac:	0005883a 	mov	r2,zero
    b5b0:	003fb106 	br	b478 <__alt_data_end+0xfffec078>
    b5b4:	0007883a 	mov	r3,zero
    b5b8:	003fbc06 	br	b4ac <__alt_data_end+0xfffec0ac>
    b5bc:	4444b03a 	or	r2,r8,r17
    b5c0:	8000871e 	bne	r16,zero,b7e0 <__adddf3+0x790>
    b5c4:	1000ba26 	beq	r2,zero,b8b0 <__adddf3+0x860>
    b5c8:	4984b03a 	or	r2,r9,r6
    b5cc:	103ebf26 	beq	r2,zero,b0cc <__alt_data_end+0xfffebccc>
    b5d0:	8985883a 	add	r2,r17,r6
    b5d4:	4247883a 	add	r3,r8,r9
    b5d8:	1451803a 	cmpltu	r8,r2,r17
    b5dc:	40d1883a 	add	r8,r8,r3
    b5e0:	40c0202c 	andhi	r3,r8,128
    b5e4:	1023883a 	mov	r17,r2
    b5e8:	183f1a26 	beq	r3,zero,b254 <__alt_data_end+0xfffebe54>
    b5ec:	00bfe034 	movhi	r2,65408
    b5f0:	10bfffc4 	addi	r2,r2,-1
    b5f4:	2021883a 	mov	r16,r4
    b5f8:	4090703a 	and	r8,r8,r2
    b5fc:	003eb306 	br	b0cc <__alt_data_end+0xfffebccc>
    b600:	4444b03a 	or	r2,r8,r17
    b604:	8000291e 	bne	r16,zero,b6ac <__adddf3+0x65c>
    b608:	10004b1e 	bne	r2,zero,b738 <__adddf3+0x6e8>
    b60c:	4990b03a 	or	r8,r9,r6
    b610:	40008b26 	beq	r8,zero,b840 <__adddf3+0x7f0>
    b614:	4811883a 	mov	r8,r9
    b618:	3023883a 	mov	r17,r6
    b61c:	3825883a 	mov	r18,r7
    b620:	003eaa06 	br	b0cc <__alt_data_end+0xfffebccc>
    b624:	1021883a 	mov	r16,r2
    b628:	0011883a 	mov	r8,zero
    b62c:	0005883a 	mov	r2,zero
    b630:	003f0f06 	br	b270 <__alt_data_end+0xfffebe70>
    b634:	217ff804 	addi	r5,r4,-32
    b638:	00800804 	movi	r2,32
    b63c:	494ad83a 	srl	r5,r9,r5
    b640:	20807d26 	beq	r4,r2,b838 <__adddf3+0x7e8>
    b644:	00801004 	movi	r2,64
    b648:	1109c83a 	sub	r4,r2,r4
    b64c:	4912983a 	sll	r9,r9,r4
    b650:	498cb03a 	or	r6,r9,r6
    b654:	300cc03a 	cmpne	r6,r6,zero
    b658:	298ab03a 	or	r5,r5,r6
    b65c:	0013883a 	mov	r9,zero
    b660:	003f1506 	br	b2b8 <__alt_data_end+0xfffebeb8>
    b664:	0101ffc4 	movi	r4,2047
    b668:	113f9a1e 	bne	r2,r4,b4d4 <__alt_data_end+0xfffec0d4>
    b66c:	4811883a 	mov	r8,r9
    b670:	3023883a 	mov	r17,r6
    b674:	1021883a 	mov	r16,r2
    b678:	3825883a 	mov	r18,r7
    b67c:	003e9306 	br	b0cc <__alt_data_end+0xfffebccc>
    b680:	8000161e 	bne	r16,zero,b6dc <__adddf3+0x68c>
    b684:	444ab03a 	or	r5,r8,r17
    b688:	28005126 	beq	r5,zero,b7d0 <__adddf3+0x780>
    b68c:	0108303a 	nor	r4,zero,r4
    b690:	20004d1e 	bne	r4,zero,b7c8 <__adddf3+0x778>
    b694:	89a3883a 	add	r17,r17,r6
    b698:	4253883a 	add	r9,r8,r9
    b69c:	898d803a 	cmpltu	r6,r17,r6
    b6a0:	3251883a 	add	r8,r6,r9
    b6a4:	1021883a 	mov	r16,r2
    b6a8:	003f0806 	br	b2cc <__alt_data_end+0xfffebecc>
    b6ac:	1000301e 	bne	r2,zero,b770 <__adddf3+0x720>
    b6b0:	4984b03a 	or	r2,r9,r6
    b6b4:	10007126 	beq	r2,zero,b87c <__adddf3+0x82c>
    b6b8:	4811883a 	mov	r8,r9
    b6bc:	3023883a 	mov	r17,r6
    b6c0:	3825883a 	mov	r18,r7
    b6c4:	0401ffc4 	movi	r16,2047
    b6c8:	003e8006 	br	b0cc <__alt_data_end+0xfffebccc>
    b6cc:	4462b03a 	or	r17,r8,r17
    b6d0:	8822c03a 	cmpne	r17,r17,zero
    b6d4:	0007883a 	mov	r3,zero
    b6d8:	003f8b06 	br	b508 <__alt_data_end+0xfffec108>
    b6dc:	0141ffc4 	movi	r5,2047
    b6e0:	11403b26 	beq	r2,r5,b7d0 <__adddf3+0x780>
    b6e4:	0109c83a 	sub	r4,zero,r4
    b6e8:	42002034 	orhi	r8,r8,128
    b6ec:	01400e04 	movi	r5,56
    b6f0:	29006716 	blt	r5,r4,b890 <__adddf3+0x840>
    b6f4:	014007c4 	movi	r5,31
    b6f8:	29007016 	blt	r5,r4,b8bc <__adddf3+0x86c>
    b6fc:	01400804 	movi	r5,32
    b700:	290bc83a 	sub	r5,r5,r4
    b704:	4154983a 	sll	r10,r8,r5
    b708:	890ed83a 	srl	r7,r17,r4
    b70c:	894a983a 	sll	r5,r17,r5
    b710:	4108d83a 	srl	r4,r8,r4
    b714:	51e2b03a 	or	r17,r10,r7
    b718:	280ac03a 	cmpne	r5,r5,zero
    b71c:	8962b03a 	or	r17,r17,r5
    b720:	89a3883a 	add	r17,r17,r6
    b724:	2253883a 	add	r9,r4,r9
    b728:	898d803a 	cmpltu	r6,r17,r6
    b72c:	3251883a 	add	r8,r6,r9
    b730:	1021883a 	mov	r16,r2
    b734:	003ee506 	br	b2cc <__alt_data_end+0xfffebecc>
    b738:	4984b03a 	or	r2,r9,r6
    b73c:	103e6326 	beq	r2,zero,b0cc <__alt_data_end+0xfffebccc>
    b740:	8987c83a 	sub	r3,r17,r6
    b744:	88c9803a 	cmpltu	r4,r17,r3
    b748:	4245c83a 	sub	r2,r8,r9
    b74c:	1105c83a 	sub	r2,r2,r4
    b750:	1100202c 	andhi	r4,r2,128
    b754:	203ebb26 	beq	r4,zero,b244 <__alt_data_end+0xfffebe44>
    b758:	3463c83a 	sub	r17,r6,r17
    b75c:	4a07c83a 	sub	r3,r9,r8
    b760:	344d803a 	cmpltu	r6,r6,r17
    b764:	1991c83a 	sub	r8,r3,r6
    b768:	3825883a 	mov	r18,r7
    b76c:	003e5706 	br	b0cc <__alt_data_end+0xfffebccc>
    b770:	4984b03a 	or	r2,r9,r6
    b774:	10002e26 	beq	r2,zero,b830 <__adddf3+0x7e0>
    b778:	4004d0fa 	srli	r2,r8,3
    b77c:	8822d0fa 	srli	r17,r17,3
    b780:	4010977a 	slli	r8,r8,29
    b784:	10c0022c 	andhi	r3,r2,8
    b788:	4462b03a 	or	r17,r8,r17
    b78c:	18000826 	beq	r3,zero,b7b0 <__adddf3+0x760>
    b790:	4808d0fa 	srli	r4,r9,3
    b794:	20c0022c 	andhi	r3,r4,8
    b798:	1800051e 	bne	r3,zero,b7b0 <__adddf3+0x760>
    b79c:	300cd0fa 	srli	r6,r6,3
    b7a0:	4806977a 	slli	r3,r9,29
    b7a4:	2005883a 	mov	r2,r4
    b7a8:	3825883a 	mov	r18,r7
    b7ac:	19a2b03a 	or	r17,r3,r6
    b7b0:	8810d77a 	srli	r8,r17,29
    b7b4:	100490fa 	slli	r2,r2,3
    b7b8:	882290fa 	slli	r17,r17,3
    b7bc:	0401ffc4 	movi	r16,2047
    b7c0:	4090b03a 	or	r8,r8,r2
    b7c4:	003e4106 	br	b0cc <__alt_data_end+0xfffebccc>
    b7c8:	0141ffc4 	movi	r5,2047
    b7cc:	117fc71e 	bne	r2,r5,b6ec <__alt_data_end+0xfffec2ec>
    b7d0:	4811883a 	mov	r8,r9
    b7d4:	3023883a 	mov	r17,r6
    b7d8:	1021883a 	mov	r16,r2
    b7dc:	003e3b06 	br	b0cc <__alt_data_end+0xfffebccc>
    b7e0:	10002f26 	beq	r2,zero,b8a0 <__adddf3+0x850>
    b7e4:	4984b03a 	or	r2,r9,r6
    b7e8:	10001126 	beq	r2,zero,b830 <__adddf3+0x7e0>
    b7ec:	4004d0fa 	srli	r2,r8,3
    b7f0:	8822d0fa 	srli	r17,r17,3
    b7f4:	4010977a 	slli	r8,r8,29
    b7f8:	10c0022c 	andhi	r3,r2,8
    b7fc:	4462b03a 	or	r17,r8,r17
    b800:	183feb26 	beq	r3,zero,b7b0 <__alt_data_end+0xfffec3b0>
    b804:	4808d0fa 	srli	r4,r9,3
    b808:	20c0022c 	andhi	r3,r4,8
    b80c:	183fe81e 	bne	r3,zero,b7b0 <__alt_data_end+0xfffec3b0>
    b810:	300cd0fa 	srli	r6,r6,3
    b814:	4806977a 	slli	r3,r9,29
    b818:	2005883a 	mov	r2,r4
    b81c:	19a2b03a 	or	r17,r3,r6
    b820:	003fe306 	br	b7b0 <__alt_data_end+0xfffec3b0>
    b824:	0011883a 	mov	r8,zero
    b828:	0005883a 	mov	r2,zero
    b82c:	003e3f06 	br	b12c <__alt_data_end+0xfffebd2c>
    b830:	0401ffc4 	movi	r16,2047
    b834:	003e2506 	br	b0cc <__alt_data_end+0xfffebccc>
    b838:	0013883a 	mov	r9,zero
    b83c:	003f8406 	br	b650 <__alt_data_end+0xfffec250>
    b840:	0005883a 	mov	r2,zero
    b844:	0007883a 	mov	r3,zero
    b848:	003e8906 	br	b270 <__alt_data_end+0xfffebe70>
    b84c:	197ff804 	addi	r5,r3,-32
    b850:	01000804 	movi	r4,32
    b854:	414ad83a 	srl	r5,r8,r5
    b858:	19002426 	beq	r3,r4,b8ec <__adddf3+0x89c>
    b85c:	01001004 	movi	r4,64
    b860:	20c7c83a 	sub	r3,r4,r3
    b864:	40c6983a 	sll	r3,r8,r3
    b868:	1c46b03a 	or	r3,r3,r17
    b86c:	1806c03a 	cmpne	r3,r3,zero
    b870:	28e2b03a 	or	r17,r5,r3
    b874:	0007883a 	mov	r3,zero
    b878:	003f2306 	br	b508 <__alt_data_end+0xfffec108>
    b87c:	0007883a 	mov	r3,zero
    b880:	5811883a 	mov	r8,r11
    b884:	00bfffc4 	movi	r2,-1
    b888:	0401ffc4 	movi	r16,2047
    b88c:	003e7806 	br	b270 <__alt_data_end+0xfffebe70>
    b890:	4462b03a 	or	r17,r8,r17
    b894:	8822c03a 	cmpne	r17,r17,zero
    b898:	0009883a 	mov	r4,zero
    b89c:	003fa006 	br	b720 <__alt_data_end+0xfffec320>
    b8a0:	4811883a 	mov	r8,r9
    b8a4:	3023883a 	mov	r17,r6
    b8a8:	0401ffc4 	movi	r16,2047
    b8ac:	003e0706 	br	b0cc <__alt_data_end+0xfffebccc>
    b8b0:	4811883a 	mov	r8,r9
    b8b4:	3023883a 	mov	r17,r6
    b8b8:	003e0406 	br	b0cc <__alt_data_end+0xfffebccc>
    b8bc:	21fff804 	addi	r7,r4,-32
    b8c0:	01400804 	movi	r5,32
    b8c4:	41ced83a 	srl	r7,r8,r7
    b8c8:	21400a26 	beq	r4,r5,b8f4 <__adddf3+0x8a4>
    b8cc:	01401004 	movi	r5,64
    b8d0:	2909c83a 	sub	r4,r5,r4
    b8d4:	4108983a 	sll	r4,r8,r4
    b8d8:	2448b03a 	or	r4,r4,r17
    b8dc:	2008c03a 	cmpne	r4,r4,zero
    b8e0:	3922b03a 	or	r17,r7,r4
    b8e4:	0009883a 	mov	r4,zero
    b8e8:	003f8d06 	br	b720 <__alt_data_end+0xfffec320>
    b8ec:	0007883a 	mov	r3,zero
    b8f0:	003fdd06 	br	b868 <__alt_data_end+0xfffec468>
    b8f4:	0009883a 	mov	r4,zero
    b8f8:	003ff706 	br	b8d8 <__alt_data_end+0xfffec4d8>

0000b8fc <__divdf3>:
    b8fc:	defff004 	addi	sp,sp,-64
    b900:	dc800815 	stw	r18,32(sp)
    b904:	2824d53a 	srli	r18,r5,20
    b908:	dd800c15 	stw	r22,48(sp)
    b90c:	282cd7fa 	srli	r22,r5,31
    b910:	dc000615 	stw	r16,24(sp)
    b914:	04000434 	movhi	r16,16
    b918:	843fffc4 	addi	r16,r16,-1
    b91c:	dfc00f15 	stw	ra,60(sp)
    b920:	df000e15 	stw	fp,56(sp)
    b924:	ddc00d15 	stw	r23,52(sp)
    b928:	dd400b15 	stw	r21,44(sp)
    b92c:	dd000a15 	stw	r20,40(sp)
    b930:	dcc00915 	stw	r19,36(sp)
    b934:	dc400715 	stw	r17,28(sp)
    b938:	9481ffcc 	andi	r18,r18,2047
    b93c:	2c20703a 	and	r16,r5,r16
    b940:	b2003fcc 	andi	r8,r22,255
    b944:	90006126 	beq	r18,zero,bacc <__divdf3+0x1d0>
    b948:	0081ffc4 	movi	r2,2047
    b94c:	202b883a 	mov	r21,r4
    b950:	90803726 	beq	r18,r2,ba30 <__divdf3+0x134>
    b954:	80800434 	orhi	r2,r16,16
    b958:	100490fa 	slli	r2,r2,3
    b95c:	2020d77a 	srli	r16,r4,29
    b960:	202a90fa 	slli	r21,r4,3
    b964:	94bf0044 	addi	r18,r18,-1023
    b968:	80a0b03a 	or	r16,r16,r2
    b96c:	0013883a 	mov	r9,zero
    b970:	000b883a 	mov	r5,zero
    b974:	3806d53a 	srli	r3,r7,20
    b978:	382ed7fa 	srli	r23,r7,31
    b97c:	04400434 	movhi	r17,16
    b980:	8c7fffc4 	addi	r17,r17,-1
    b984:	18c1ffcc 	andi	r3,r3,2047
    b988:	3029883a 	mov	r20,r6
    b98c:	3c62703a 	and	r17,r7,r17
    b990:	bf003fcc 	andi	fp,r23,255
    b994:	18006e26 	beq	r3,zero,bb50 <__divdf3+0x254>
    b998:	0081ffc4 	movi	r2,2047
    b99c:	18806626 	beq	r3,r2,bb38 <__divdf3+0x23c>
    b9a0:	88800434 	orhi	r2,r17,16
    b9a4:	100490fa 	slli	r2,r2,3
    b9a8:	3022d77a 	srli	r17,r6,29
    b9ac:	302890fa 	slli	r20,r6,3
    b9b0:	18ff0044 	addi	r3,r3,-1023
    b9b4:	88a2b03a 	or	r17,r17,r2
    b9b8:	000f883a 	mov	r7,zero
    b9bc:	b5e6f03a 	xor	r19,r22,r23
    b9c0:	3a4cb03a 	or	r6,r7,r9
    b9c4:	008003c4 	movi	r2,15
    b9c8:	9809883a 	mov	r4,r19
    b9cc:	90c7c83a 	sub	r3,r18,r3
    b9d0:	9cc03fcc 	andi	r19,r19,255
    b9d4:	11809636 	bltu	r2,r6,bc30 <__divdf3+0x334>
    b9d8:	300c90ba 	slli	r6,r6,2
    b9dc:	00800074 	movhi	r2,1
    b9e0:	10ae7c04 	addi	r2,r2,-17936
    b9e4:	308d883a 	add	r6,r6,r2
    b9e8:	30800017 	ldw	r2,0(r6)
    b9ec:	1000683a 	jmp	r2
    b9f0:	0000bc30 	cmpltui	zero,zero,752
    b9f4:	0000ba68 	cmpgeui	zero,zero,745
    b9f8:	0000bc20 	cmpeqi	zero,zero,752
    b9fc:	0000ba5c 	xori	zero,zero,745
    ba00:	0000bc20 	cmpeqi	zero,zero,752
    ba04:	0000bbf4 	movhi	zero,751
    ba08:	0000bc20 	cmpeqi	zero,zero,752
    ba0c:	0000ba5c 	xori	zero,zero,745
    ba10:	0000ba68 	cmpgeui	zero,zero,745
    ba14:	0000ba68 	cmpgeui	zero,zero,745
    ba18:	0000bbf4 	movhi	zero,751
    ba1c:	0000ba5c 	xori	zero,zero,745
    ba20:	0000ba4c 	andi	zero,zero,745
    ba24:	0000ba4c 	andi	zero,zero,745
    ba28:	0000ba4c 	andi	zero,zero,745
    ba2c:	0000bfb8 	rdprs	zero,zero,766
    ba30:	2404b03a 	or	r2,r4,r16
    ba34:	10006c1e 	bne	r2,zero,bbe8 <__divdf3+0x2ec>
    ba38:	02400204 	movi	r9,8
    ba3c:	0021883a 	mov	r16,zero
    ba40:	002b883a 	mov	r21,zero
    ba44:	01400084 	movi	r5,2
    ba48:	003fca06 	br	b974 <__alt_data_end+0xfffec574>
    ba4c:	8023883a 	mov	r17,r16
    ba50:	a829883a 	mov	r20,r21
    ba54:	4039883a 	mov	fp,r8
    ba58:	280f883a 	mov	r7,r5
    ba5c:	00800084 	movi	r2,2
    ba60:	3881601e 	bne	r7,r2,bfe4 <__divdf3+0x6e8>
    ba64:	e027883a 	mov	r19,fp
    ba68:	9900004c 	andi	r4,r19,1
    ba6c:	0081ffc4 	movi	r2,2047
    ba70:	0021883a 	mov	r16,zero
    ba74:	002b883a 	mov	r21,zero
    ba78:	1004953a 	slli	r2,r2,20
    ba7c:	20c03fcc 	andi	r3,r4,255
    ba80:	01400434 	movhi	r5,16
    ba84:	297fffc4 	addi	r5,r5,-1
    ba88:	180697fa 	slli	r3,r3,31
    ba8c:	8160703a 	and	r16,r16,r5
    ba90:	80a0b03a 	or	r16,r16,r2
    ba94:	80c6b03a 	or	r3,r16,r3
    ba98:	a805883a 	mov	r2,r21
    ba9c:	dfc00f17 	ldw	ra,60(sp)
    baa0:	df000e17 	ldw	fp,56(sp)
    baa4:	ddc00d17 	ldw	r23,52(sp)
    baa8:	dd800c17 	ldw	r22,48(sp)
    baac:	dd400b17 	ldw	r21,44(sp)
    bab0:	dd000a17 	ldw	r20,40(sp)
    bab4:	dcc00917 	ldw	r19,36(sp)
    bab8:	dc800817 	ldw	r18,32(sp)
    babc:	dc400717 	ldw	r17,28(sp)
    bac0:	dc000617 	ldw	r16,24(sp)
    bac4:	dec01004 	addi	sp,sp,64
    bac8:	f800283a 	ret
    bacc:	2404b03a 	or	r2,r4,r16
    bad0:	2023883a 	mov	r17,r4
    bad4:	10003f26 	beq	r2,zero,bbd4 <__divdf3+0x2d8>
    bad8:	80015e26 	beq	r16,zero,c054 <__divdf3+0x758>
    badc:	8009883a 	mov	r4,r16
    bae0:	d9800215 	stw	r6,8(sp)
    bae4:	d9c00515 	stw	r7,20(sp)
    bae8:	da000415 	stw	r8,16(sp)
    baec:	000d8900 	call	d890 <__clzsi2>
    baf0:	d9800217 	ldw	r6,8(sp)
    baf4:	d9c00517 	ldw	r7,20(sp)
    baf8:	da000417 	ldw	r8,16(sp)
    bafc:	113ffd44 	addi	r4,r2,-11
    bb00:	00c00704 	movi	r3,28
    bb04:	19014f16 	blt	r3,r4,c044 <__divdf3+0x748>
    bb08:	00c00744 	movi	r3,29
    bb0c:	157ffe04 	addi	r21,r2,-8
    bb10:	1907c83a 	sub	r3,r3,r4
    bb14:	8560983a 	sll	r16,r16,r21
    bb18:	88c6d83a 	srl	r3,r17,r3
    bb1c:	8d6a983a 	sll	r21,r17,r21
    bb20:	1c20b03a 	or	r16,r3,r16
    bb24:	1080fcc4 	addi	r2,r2,1011
    bb28:	00a5c83a 	sub	r18,zero,r2
    bb2c:	0013883a 	mov	r9,zero
    bb30:	000b883a 	mov	r5,zero
    bb34:	003f8f06 	br	b974 <__alt_data_end+0xfffec574>
    bb38:	3444b03a 	or	r2,r6,r17
    bb3c:	1000231e 	bne	r2,zero,bbcc <__divdf3+0x2d0>
    bb40:	0023883a 	mov	r17,zero
    bb44:	0029883a 	mov	r20,zero
    bb48:	01c00084 	movi	r7,2
    bb4c:	003f9b06 	br	b9bc <__alt_data_end+0xfffec5bc>
    bb50:	3444b03a 	or	r2,r6,r17
    bb54:	10001926 	beq	r2,zero,bbbc <__divdf3+0x2c0>
    bb58:	88014b26 	beq	r17,zero,c088 <__divdf3+0x78c>
    bb5c:	8809883a 	mov	r4,r17
    bb60:	d9400115 	stw	r5,4(sp)
    bb64:	d9800215 	stw	r6,8(sp)
    bb68:	da000415 	stw	r8,16(sp)
    bb6c:	da400315 	stw	r9,12(sp)
    bb70:	000d8900 	call	d890 <__clzsi2>
    bb74:	d9400117 	ldw	r5,4(sp)
    bb78:	d9800217 	ldw	r6,8(sp)
    bb7c:	da000417 	ldw	r8,16(sp)
    bb80:	da400317 	ldw	r9,12(sp)
    bb84:	113ffd44 	addi	r4,r2,-11
    bb88:	00c00704 	movi	r3,28
    bb8c:	19013a16 	blt	r3,r4,c078 <__divdf3+0x77c>
    bb90:	00c00744 	movi	r3,29
    bb94:	153ffe04 	addi	r20,r2,-8
    bb98:	1907c83a 	sub	r3,r3,r4
    bb9c:	8d22983a 	sll	r17,r17,r20
    bba0:	30c6d83a 	srl	r3,r6,r3
    bba4:	3528983a 	sll	r20,r6,r20
    bba8:	1c62b03a 	or	r17,r3,r17
    bbac:	1080fcc4 	addi	r2,r2,1011
    bbb0:	0087c83a 	sub	r3,zero,r2
    bbb4:	000f883a 	mov	r7,zero
    bbb8:	003f8006 	br	b9bc <__alt_data_end+0xfffec5bc>
    bbbc:	0023883a 	mov	r17,zero
    bbc0:	0029883a 	mov	r20,zero
    bbc4:	01c00044 	movi	r7,1
    bbc8:	003f7c06 	br	b9bc <__alt_data_end+0xfffec5bc>
    bbcc:	01c000c4 	movi	r7,3
    bbd0:	003f7a06 	br	b9bc <__alt_data_end+0xfffec5bc>
    bbd4:	02400104 	movi	r9,4
    bbd8:	0021883a 	mov	r16,zero
    bbdc:	002b883a 	mov	r21,zero
    bbe0:	01400044 	movi	r5,1
    bbe4:	003f6306 	br	b974 <__alt_data_end+0xfffec574>
    bbe8:	02400304 	movi	r9,12
    bbec:	014000c4 	movi	r5,3
    bbf0:	003f6006 	br	b974 <__alt_data_end+0xfffec574>
    bbf4:	04000434 	movhi	r16,16
    bbf8:	0009883a 	mov	r4,zero
    bbfc:	843fffc4 	addi	r16,r16,-1
    bc00:	057fffc4 	movi	r21,-1
    bc04:	0081ffc4 	movi	r2,2047
    bc08:	003f9b06 	br	ba78 <__alt_data_end+0xfffec678>
    bc0c:	00c00044 	movi	r3,1
    bc10:	1887c83a 	sub	r3,r3,r2
    bc14:	01000e04 	movi	r4,56
    bc18:	20c1530e 	bge	r4,r3,c168 <__divdf3+0x86c>
    bc1c:	9900004c 	andi	r4,r19,1
    bc20:	0005883a 	mov	r2,zero
    bc24:	0021883a 	mov	r16,zero
    bc28:	002b883a 	mov	r21,zero
    bc2c:	003f9206 	br	ba78 <__alt_data_end+0xfffec678>
    bc30:	8c012e36 	bltu	r17,r16,c0ec <__divdf3+0x7f0>
    bc34:	84412c26 	beq	r16,r17,c0e8 <__divdf3+0x7ec>
    bc38:	a82f883a 	mov	r23,r21
    bc3c:	18ffffc4 	addi	r3,r3,-1
    bc40:	002b883a 	mov	r21,zero
    bc44:	a004d63a 	srli	r2,r20,24
    bc48:	8822923a 	slli	r17,r17,8
    bc4c:	a028923a 	slli	r20,r20,8
    bc50:	8009883a 	mov	r4,r16
    bc54:	88acb03a 	or	r22,r17,r2
    bc58:	dd000015 	stw	r20,0(sp)
    bc5c:	b028d43a 	srli	r20,r22,16
    bc60:	d8c00215 	stw	r3,8(sp)
    bc64:	b4bfffcc 	andi	r18,r22,65535
    bc68:	a00b883a 	mov	r5,r20
    bc6c:	000af6c0 	call	af6c <__udivsi3>
    bc70:	100b883a 	mov	r5,r2
    bc74:	9009883a 	mov	r4,r18
    bc78:	1023883a 	mov	r17,r2
    bc7c:	000b0280 	call	b028 <__mulsi3>
    bc80:	8009883a 	mov	r4,r16
    bc84:	a00b883a 	mov	r5,r20
    bc88:	1039883a 	mov	fp,r2
    bc8c:	000afd00 	call	afd0 <__umodsi3>
    bc90:	1004943a 	slli	r2,r2,16
    bc94:	b808d43a 	srli	r4,r23,16
    bc98:	d8c00217 	ldw	r3,8(sp)
    bc9c:	2084b03a 	or	r2,r4,r2
    bca0:	1700062e 	bgeu	r2,fp,bcbc <__divdf3+0x3c0>
    bca4:	1585883a 	add	r2,r2,r22
    bca8:	893fffc4 	addi	r4,r17,-1
    bcac:	15811d36 	bltu	r2,r22,c124 <__divdf3+0x828>
    bcb0:	17011c2e 	bgeu	r2,fp,c124 <__divdf3+0x828>
    bcb4:	8c7fff84 	addi	r17,r17,-2
    bcb8:	1585883a 	add	r2,r2,r22
    bcbc:	1739c83a 	sub	fp,r2,fp
    bcc0:	a00b883a 	mov	r5,r20
    bcc4:	e009883a 	mov	r4,fp
    bcc8:	d8c00215 	stw	r3,8(sp)
    bccc:	000af6c0 	call	af6c <__udivsi3>
    bcd0:	100b883a 	mov	r5,r2
    bcd4:	9009883a 	mov	r4,r18
    bcd8:	1021883a 	mov	r16,r2
    bcdc:	000b0280 	call	b028 <__mulsi3>
    bce0:	a00b883a 	mov	r5,r20
    bce4:	e009883a 	mov	r4,fp
    bce8:	d8800415 	stw	r2,16(sp)
    bcec:	000afd00 	call	afd0 <__umodsi3>
    bcf0:	1004943a 	slli	r2,r2,16
    bcf4:	da000417 	ldw	r8,16(sp)
    bcf8:	bdffffcc 	andi	r23,r23,65535
    bcfc:	b884b03a 	or	r2,r23,r2
    bd00:	d8c00217 	ldw	r3,8(sp)
    bd04:	1200062e 	bgeu	r2,r8,bd20 <__divdf3+0x424>
    bd08:	1585883a 	add	r2,r2,r22
    bd0c:	813fffc4 	addi	r4,r16,-1
    bd10:	15810236 	bltu	r2,r22,c11c <__divdf3+0x820>
    bd14:	1201012e 	bgeu	r2,r8,c11c <__divdf3+0x820>
    bd18:	843fff84 	addi	r16,r16,-2
    bd1c:	1585883a 	add	r2,r2,r22
    bd20:	8822943a 	slli	r17,r17,16
    bd24:	d9800017 	ldw	r6,0(sp)
    bd28:	1211c83a 	sub	r8,r2,r8
    bd2c:	8c22b03a 	or	r17,r17,r16
    bd30:	373fffcc 	andi	fp,r6,65535
    bd34:	8abfffcc 	andi	r10,r17,65535
    bd38:	8820d43a 	srli	r16,r17,16
    bd3c:	5009883a 	mov	r4,r10
    bd40:	e00b883a 	mov	r5,fp
    bd44:	302ed43a 	srli	r23,r6,16
    bd48:	d8c00215 	stw	r3,8(sp)
    bd4c:	da000415 	stw	r8,16(sp)
    bd50:	da800115 	stw	r10,4(sp)
    bd54:	000b0280 	call	b028 <__mulsi3>
    bd58:	800b883a 	mov	r5,r16
    bd5c:	e009883a 	mov	r4,fp
    bd60:	d8800515 	stw	r2,20(sp)
    bd64:	000b0280 	call	b028 <__mulsi3>
    bd68:	8009883a 	mov	r4,r16
    bd6c:	b80b883a 	mov	r5,r23
    bd70:	d8800315 	stw	r2,12(sp)
    bd74:	000b0280 	call	b028 <__mulsi3>
    bd78:	da800117 	ldw	r10,4(sp)
    bd7c:	b80b883a 	mov	r5,r23
    bd80:	1021883a 	mov	r16,r2
    bd84:	5009883a 	mov	r4,r10
    bd88:	000b0280 	call	b028 <__mulsi3>
    bd8c:	d9c00517 	ldw	r7,20(sp)
    bd90:	da400317 	ldw	r9,12(sp)
    bd94:	d8c00217 	ldw	r3,8(sp)
    bd98:	3808d43a 	srli	r4,r7,16
    bd9c:	1245883a 	add	r2,r2,r9
    bda0:	da000417 	ldw	r8,16(sp)
    bda4:	2085883a 	add	r2,r4,r2
    bda8:	1240022e 	bgeu	r2,r9,bdb4 <__divdf3+0x4b8>
    bdac:	01000074 	movhi	r4,1
    bdb0:	8121883a 	add	r16,r16,r4
    bdb4:	1008d43a 	srli	r4,r2,16
    bdb8:	1004943a 	slli	r2,r2,16
    bdbc:	39ffffcc 	andi	r7,r7,65535
    bdc0:	2409883a 	add	r4,r4,r16
    bdc4:	11c5883a 	add	r2,r2,r7
    bdc8:	4100bb36 	bltu	r8,r4,c0b8 <__divdf3+0x7bc>
    bdcc:	4100d726 	beq	r8,r4,c12c <__divdf3+0x830>
    bdd0:	4109c83a 	sub	r4,r8,r4
    bdd4:	a8a1c83a 	sub	r16,r21,r2
    bdd8:	ac2b803a 	cmpltu	r21,r21,r16
    bddc:	256bc83a 	sub	r21,r4,r21
    bde0:	b540d926 	beq	r22,r21,c148 <__divdf3+0x84c>
    bde4:	a00b883a 	mov	r5,r20
    bde8:	a809883a 	mov	r4,r21
    bdec:	d8c00215 	stw	r3,8(sp)
    bdf0:	000af6c0 	call	af6c <__udivsi3>
    bdf4:	100b883a 	mov	r5,r2
    bdf8:	9009883a 	mov	r4,r18
    bdfc:	d8800515 	stw	r2,20(sp)
    be00:	000b0280 	call	b028 <__mulsi3>
    be04:	a809883a 	mov	r4,r21
    be08:	a00b883a 	mov	r5,r20
    be0c:	d8800415 	stw	r2,16(sp)
    be10:	000afd00 	call	afd0 <__umodsi3>
    be14:	1004943a 	slli	r2,r2,16
    be18:	8008d43a 	srli	r4,r16,16
    be1c:	da000417 	ldw	r8,16(sp)
    be20:	d8c00217 	ldw	r3,8(sp)
    be24:	2084b03a 	or	r2,r4,r2
    be28:	d9c00517 	ldw	r7,20(sp)
    be2c:	1200062e 	bgeu	r2,r8,be48 <__divdf3+0x54c>
    be30:	1585883a 	add	r2,r2,r22
    be34:	393fffc4 	addi	r4,r7,-1
    be38:	1580c536 	bltu	r2,r22,c150 <__divdf3+0x854>
    be3c:	1200c42e 	bgeu	r2,r8,c150 <__divdf3+0x854>
    be40:	39ffff84 	addi	r7,r7,-2
    be44:	1585883a 	add	r2,r2,r22
    be48:	122bc83a 	sub	r21,r2,r8
    be4c:	a00b883a 	mov	r5,r20
    be50:	a809883a 	mov	r4,r21
    be54:	d8c00215 	stw	r3,8(sp)
    be58:	d9c00515 	stw	r7,20(sp)
    be5c:	000af6c0 	call	af6c <__udivsi3>
    be60:	9009883a 	mov	r4,r18
    be64:	100b883a 	mov	r5,r2
    be68:	d8800415 	stw	r2,16(sp)
    be6c:	000b0280 	call	b028 <__mulsi3>
    be70:	a809883a 	mov	r4,r21
    be74:	a00b883a 	mov	r5,r20
    be78:	1025883a 	mov	r18,r2
    be7c:	000afd00 	call	afd0 <__umodsi3>
    be80:	1004943a 	slli	r2,r2,16
    be84:	813fffcc 	andi	r4,r16,65535
    be88:	d8c00217 	ldw	r3,8(sp)
    be8c:	20a0b03a 	or	r16,r4,r2
    be90:	d9c00517 	ldw	r7,20(sp)
    be94:	da000417 	ldw	r8,16(sp)
    be98:	8480062e 	bgeu	r16,r18,beb4 <__divdf3+0x5b8>
    be9c:	85a1883a 	add	r16,r16,r22
    bea0:	40bfffc4 	addi	r2,r8,-1
    bea4:	8580ac36 	bltu	r16,r22,c158 <__divdf3+0x85c>
    bea8:	8480ab2e 	bgeu	r16,r18,c158 <__divdf3+0x85c>
    beac:	423fff84 	addi	r8,r8,-2
    beb0:	85a1883a 	add	r16,r16,r22
    beb4:	3804943a 	slli	r2,r7,16
    beb8:	84a1c83a 	sub	r16,r16,r18
    bebc:	e009883a 	mov	r4,fp
    bec0:	1228b03a 	or	r20,r2,r8
    bec4:	a1ffffcc 	andi	r7,r20,65535
    bec8:	a024d43a 	srli	r18,r20,16
    becc:	380b883a 	mov	r5,r7
    bed0:	d8c00215 	stw	r3,8(sp)
    bed4:	d9c00515 	stw	r7,20(sp)
    bed8:	000b0280 	call	b028 <__mulsi3>
    bedc:	900b883a 	mov	r5,r18
    bee0:	e009883a 	mov	r4,fp
    bee4:	102b883a 	mov	r21,r2
    bee8:	000b0280 	call	b028 <__mulsi3>
    beec:	900b883a 	mov	r5,r18
    bef0:	b809883a 	mov	r4,r23
    bef4:	1039883a 	mov	fp,r2
    bef8:	000b0280 	call	b028 <__mulsi3>
    befc:	d9c00517 	ldw	r7,20(sp)
    bf00:	b80b883a 	mov	r5,r23
    bf04:	1025883a 	mov	r18,r2
    bf08:	3809883a 	mov	r4,r7
    bf0c:	000b0280 	call	b028 <__mulsi3>
    bf10:	a808d43a 	srli	r4,r21,16
    bf14:	1705883a 	add	r2,r2,fp
    bf18:	d8c00217 	ldw	r3,8(sp)
    bf1c:	2085883a 	add	r2,r4,r2
    bf20:	1700022e 	bgeu	r2,fp,bf2c <__divdf3+0x630>
    bf24:	01000074 	movhi	r4,1
    bf28:	9125883a 	add	r18,r18,r4
    bf2c:	1008d43a 	srli	r4,r2,16
    bf30:	1004943a 	slli	r2,r2,16
    bf34:	ad7fffcc 	andi	r21,r21,65535
    bf38:	2489883a 	add	r4,r4,r18
    bf3c:	1545883a 	add	r2,r2,r21
    bf40:	81003836 	bltu	r16,r4,c024 <__divdf3+0x728>
    bf44:	81003626 	beq	r16,r4,c020 <__divdf3+0x724>
    bf48:	a5000054 	ori	r20,r20,1
    bf4c:	1880ffc4 	addi	r2,r3,1023
    bf50:	00bf2e0e 	bge	zero,r2,bc0c <__alt_data_end+0xfffec80c>
    bf54:	a10001cc 	andi	r4,r20,7
    bf58:	20000726 	beq	r4,zero,bf78 <__divdf3+0x67c>
    bf5c:	a10003cc 	andi	r4,r20,15
    bf60:	01400104 	movi	r5,4
    bf64:	21400426 	beq	r4,r5,bf78 <__divdf3+0x67c>
    bf68:	a149883a 	add	r4,r20,r5
    bf6c:	2529803a 	cmpltu	r20,r4,r20
    bf70:	8d23883a 	add	r17,r17,r20
    bf74:	2029883a 	mov	r20,r4
    bf78:	8900402c 	andhi	r4,r17,256
    bf7c:	20000426 	beq	r4,zero,bf90 <__divdf3+0x694>
    bf80:	18810004 	addi	r2,r3,1024
    bf84:	00ffc034 	movhi	r3,65280
    bf88:	18ffffc4 	addi	r3,r3,-1
    bf8c:	88e2703a 	and	r17,r17,r3
    bf90:	00c1ff84 	movi	r3,2046
    bf94:	18beb416 	blt	r3,r2,ba68 <__alt_data_end+0xfffec668>
    bf98:	a028d0fa 	srli	r20,r20,3
    bf9c:	882a977a 	slli	r21,r17,29
    bfa0:	8820927a 	slli	r16,r17,9
    bfa4:	1081ffcc 	andi	r2,r2,2047
    bfa8:	ad2ab03a 	or	r21,r21,r20
    bfac:	8020d33a 	srli	r16,r16,12
    bfb0:	9900004c 	andi	r4,r19,1
    bfb4:	003eb006 	br	ba78 <__alt_data_end+0xfffec678>
    bfb8:	8080022c 	andhi	r2,r16,8
    bfbc:	10001226 	beq	r2,zero,c008 <__divdf3+0x70c>
    bfc0:	8880022c 	andhi	r2,r17,8
    bfc4:	1000101e 	bne	r2,zero,c008 <__divdf3+0x70c>
    bfc8:	00800434 	movhi	r2,16
    bfcc:	8c000234 	orhi	r16,r17,8
    bfd0:	10bfffc4 	addi	r2,r2,-1
    bfd4:	b809883a 	mov	r4,r23
    bfd8:	80a0703a 	and	r16,r16,r2
    bfdc:	a02b883a 	mov	r21,r20
    bfe0:	003f0806 	br	bc04 <__alt_data_end+0xfffec804>
    bfe4:	008000c4 	movi	r2,3
    bfe8:	3880b126 	beq	r7,r2,c2b0 <__divdf3+0x9b4>
    bfec:	00800044 	movi	r2,1
    bff0:	38805b1e 	bne	r7,r2,c160 <__divdf3+0x864>
    bff4:	e009883a 	mov	r4,fp
    bff8:	0005883a 	mov	r2,zero
    bffc:	0021883a 	mov	r16,zero
    c000:	002b883a 	mov	r21,zero
    c004:	003e9c06 	br	ba78 <__alt_data_end+0xfffec678>
    c008:	00800434 	movhi	r2,16
    c00c:	84000234 	orhi	r16,r16,8
    c010:	10bfffc4 	addi	r2,r2,-1
    c014:	b009883a 	mov	r4,r22
    c018:	80a0703a 	and	r16,r16,r2
    c01c:	003ef906 	br	bc04 <__alt_data_end+0xfffec804>
    c020:	103fca26 	beq	r2,zero,bf4c <__alt_data_end+0xfffecb4c>
    c024:	b421883a 	add	r16,r22,r16
    c028:	a17fffc4 	addi	r5,r20,-1
    c02c:	8580422e 	bgeu	r16,r22,c138 <__divdf3+0x83c>
    c030:	2829883a 	mov	r20,r5
    c034:	813fc41e 	bne	r16,r4,bf48 <__alt_data_end+0xfffecb48>
    c038:	d9800017 	ldw	r6,0(sp)
    c03c:	30bfc21e 	bne	r6,r2,bf48 <__alt_data_end+0xfffecb48>
    c040:	003fc206 	br	bf4c <__alt_data_end+0xfffecb4c>
    c044:	143ff604 	addi	r16,r2,-40
    c048:	8c20983a 	sll	r16,r17,r16
    c04c:	002b883a 	mov	r21,zero
    c050:	003eb406 	br	bb24 <__alt_data_end+0xfffec724>
    c054:	d9800215 	stw	r6,8(sp)
    c058:	d9c00515 	stw	r7,20(sp)
    c05c:	da000415 	stw	r8,16(sp)
    c060:	000d8900 	call	d890 <__clzsi2>
    c064:	10800804 	addi	r2,r2,32
    c068:	da000417 	ldw	r8,16(sp)
    c06c:	d9c00517 	ldw	r7,20(sp)
    c070:	d9800217 	ldw	r6,8(sp)
    c074:	003ea106 	br	bafc <__alt_data_end+0xfffec6fc>
    c078:	147ff604 	addi	r17,r2,-40
    c07c:	3462983a 	sll	r17,r6,r17
    c080:	0029883a 	mov	r20,zero
    c084:	003ec906 	br	bbac <__alt_data_end+0xfffec7ac>
    c088:	3009883a 	mov	r4,r6
    c08c:	d9400115 	stw	r5,4(sp)
    c090:	d9800215 	stw	r6,8(sp)
    c094:	da000415 	stw	r8,16(sp)
    c098:	da400315 	stw	r9,12(sp)
    c09c:	000d8900 	call	d890 <__clzsi2>
    c0a0:	10800804 	addi	r2,r2,32
    c0a4:	da400317 	ldw	r9,12(sp)
    c0a8:	da000417 	ldw	r8,16(sp)
    c0ac:	d9800217 	ldw	r6,8(sp)
    c0b0:	d9400117 	ldw	r5,4(sp)
    c0b4:	003eb306 	br	bb84 <__alt_data_end+0xfffec784>
    c0b8:	d9800017 	ldw	r6,0(sp)
    c0bc:	a9ab883a 	add	r21,r21,r6
    c0c0:	a98b803a 	cmpltu	r5,r21,r6
    c0c4:	2d8b883a 	add	r5,r5,r22
    c0c8:	2a11883a 	add	r8,r5,r8
    c0cc:	897fffc4 	addi	r5,r17,-1
    c0d0:	b2000c2e 	bgeu	r22,r8,c104 <__divdf3+0x808>
    c0d4:	41003f36 	bltu	r8,r4,c1d4 <__divdf3+0x8d8>
    c0d8:	22006c26 	beq	r4,r8,c28c <__divdf3+0x990>
    c0dc:	4109c83a 	sub	r4,r8,r4
    c0e0:	2823883a 	mov	r17,r5
    c0e4:	003f3b06 	br	bdd4 <__alt_data_end+0xfffec9d4>
    c0e8:	ad3ed336 	bltu	r21,r20,bc38 <__alt_data_end+0xfffec838>
    c0ec:	a804d07a 	srli	r2,r21,1
    c0f0:	802e97fa 	slli	r23,r16,31
    c0f4:	a82a97fa 	slli	r21,r21,31
    c0f8:	8020d07a 	srli	r16,r16,1
    c0fc:	b8aeb03a 	or	r23,r23,r2
    c100:	003ed006 	br	bc44 <__alt_data_end+0xfffec844>
    c104:	b23ff51e 	bne	r22,r8,c0dc <__alt_data_end+0xfffeccdc>
    c108:	d9800017 	ldw	r6,0(sp)
    c10c:	a9bff12e 	bgeu	r21,r6,c0d4 <__alt_data_end+0xfffeccd4>
    c110:	b109c83a 	sub	r4,r22,r4
    c114:	2823883a 	mov	r17,r5
    c118:	003f2e06 	br	bdd4 <__alt_data_end+0xfffec9d4>
    c11c:	2021883a 	mov	r16,r4
    c120:	003eff06 	br	bd20 <__alt_data_end+0xfffec920>
    c124:	2023883a 	mov	r17,r4
    c128:	003ee406 	br	bcbc <__alt_data_end+0xfffec8bc>
    c12c:	a8bfe236 	bltu	r21,r2,c0b8 <__alt_data_end+0xfffeccb8>
    c130:	0009883a 	mov	r4,zero
    c134:	003f2706 	br	bdd4 <__alt_data_end+0xfffec9d4>
    c138:	81002d36 	bltu	r16,r4,c1f0 <__divdf3+0x8f4>
    c13c:	24005626 	beq	r4,r16,c298 <__divdf3+0x99c>
    c140:	2829883a 	mov	r20,r5
    c144:	003f8006 	br	bf48 <__alt_data_end+0xfffecb48>
    c148:	053fffc4 	movi	r20,-1
    c14c:	003f7f06 	br	bf4c <__alt_data_end+0xfffecb4c>
    c150:	200f883a 	mov	r7,r4
    c154:	003f3c06 	br	be48 <__alt_data_end+0xfffeca48>
    c158:	1011883a 	mov	r8,r2
    c15c:	003f5506 	br	beb4 <__alt_data_end+0xfffecab4>
    c160:	e027883a 	mov	r19,fp
    c164:	003f7906 	br	bf4c <__alt_data_end+0xfffecb4c>
    c168:	010007c4 	movi	r4,31
    c16c:	20c02816 	blt	r4,r3,c210 <__divdf3+0x914>
    c170:	00800804 	movi	r2,32
    c174:	10c5c83a 	sub	r2,r2,r3
    c178:	888a983a 	sll	r5,r17,r2
    c17c:	a0c8d83a 	srl	r4,r20,r3
    c180:	a084983a 	sll	r2,r20,r2
    c184:	88e2d83a 	srl	r17,r17,r3
    c188:	2906b03a 	or	r3,r5,r4
    c18c:	1004c03a 	cmpne	r2,r2,zero
    c190:	1886b03a 	or	r3,r3,r2
    c194:	188001cc 	andi	r2,r3,7
    c198:	10000726 	beq	r2,zero,c1b8 <__divdf3+0x8bc>
    c19c:	188003cc 	andi	r2,r3,15
    c1a0:	01000104 	movi	r4,4
    c1a4:	11000426 	beq	r2,r4,c1b8 <__divdf3+0x8bc>
    c1a8:	1805883a 	mov	r2,r3
    c1ac:	10c00104 	addi	r3,r2,4
    c1b0:	1885803a 	cmpltu	r2,r3,r2
    c1b4:	88a3883a 	add	r17,r17,r2
    c1b8:	8880202c 	andhi	r2,r17,128
    c1bc:	10002926 	beq	r2,zero,c264 <__divdf3+0x968>
    c1c0:	9900004c 	andi	r4,r19,1
    c1c4:	00800044 	movi	r2,1
    c1c8:	0021883a 	mov	r16,zero
    c1cc:	002b883a 	mov	r21,zero
    c1d0:	003e2906 	br	ba78 <__alt_data_end+0xfffec678>
    c1d4:	d9800017 	ldw	r6,0(sp)
    c1d8:	8c7fff84 	addi	r17,r17,-2
    c1dc:	a9ab883a 	add	r21,r21,r6
    c1e0:	a98b803a 	cmpltu	r5,r21,r6
    c1e4:	2d8b883a 	add	r5,r5,r22
    c1e8:	2a11883a 	add	r8,r5,r8
    c1ec:	003ef806 	br	bdd0 <__alt_data_end+0xfffec9d0>
    c1f0:	d9800017 	ldw	r6,0(sp)
    c1f4:	318f883a 	add	r7,r6,r6
    c1f8:	398b803a 	cmpltu	r5,r7,r6
    c1fc:	2d8d883a 	add	r6,r5,r22
    c200:	81a1883a 	add	r16,r16,r6
    c204:	a17fff84 	addi	r5,r20,-2
    c208:	d9c00015 	stw	r7,0(sp)
    c20c:	003f8806 	br	c030 <__alt_data_end+0xfffecc30>
    c210:	013ff844 	movi	r4,-31
    c214:	2085c83a 	sub	r2,r4,r2
    c218:	8888d83a 	srl	r4,r17,r2
    c21c:	00800804 	movi	r2,32
    c220:	18802126 	beq	r3,r2,c2a8 <__divdf3+0x9ac>
    c224:	04001004 	movi	r16,64
    c228:	80c7c83a 	sub	r3,r16,r3
    c22c:	88e0983a 	sll	r16,r17,r3
    c230:	8504b03a 	or	r2,r16,r20
    c234:	1004c03a 	cmpne	r2,r2,zero
    c238:	2084b03a 	or	r2,r4,r2
    c23c:	144001cc 	andi	r17,r2,7
    c240:	88000d1e 	bne	r17,zero,c278 <__divdf3+0x97c>
    c244:	0021883a 	mov	r16,zero
    c248:	102ad0fa 	srli	r21,r2,3
    c24c:	9900004c 	andi	r4,r19,1
    c250:	0005883a 	mov	r2,zero
    c254:	ac6ab03a 	or	r21,r21,r17
    c258:	003e0706 	br	ba78 <__alt_data_end+0xfffec678>
    c25c:	1007883a 	mov	r3,r2
    c260:	0023883a 	mov	r17,zero
    c264:	8820927a 	slli	r16,r17,9
    c268:	1805883a 	mov	r2,r3
    c26c:	8822977a 	slli	r17,r17,29
    c270:	8020d33a 	srli	r16,r16,12
    c274:	003ff406 	br	c248 <__alt_data_end+0xfffece48>
    c278:	10c003cc 	andi	r3,r2,15
    c27c:	01000104 	movi	r4,4
    c280:	193ff626 	beq	r3,r4,c25c <__alt_data_end+0xfffece5c>
    c284:	0023883a 	mov	r17,zero
    c288:	003fc806 	br	c1ac <__alt_data_end+0xfffecdac>
    c28c:	a8bfd136 	bltu	r21,r2,c1d4 <__alt_data_end+0xfffecdd4>
    c290:	2823883a 	mov	r17,r5
    c294:	003fa606 	br	c130 <__alt_data_end+0xfffecd30>
    c298:	d9800017 	ldw	r6,0(sp)
    c29c:	30bfd436 	bltu	r6,r2,c1f0 <__alt_data_end+0xfffecdf0>
    c2a0:	2829883a 	mov	r20,r5
    c2a4:	003f6406 	br	c038 <__alt_data_end+0xfffecc38>
    c2a8:	0021883a 	mov	r16,zero
    c2ac:	003fe006 	br	c230 <__alt_data_end+0xfffece30>
    c2b0:	00800434 	movhi	r2,16
    c2b4:	8c000234 	orhi	r16,r17,8
    c2b8:	10bfffc4 	addi	r2,r2,-1
    c2bc:	e009883a 	mov	r4,fp
    c2c0:	80a0703a 	and	r16,r16,r2
    c2c4:	a02b883a 	mov	r21,r20
    c2c8:	003e4e06 	br	bc04 <__alt_data_end+0xfffec804>

0000c2cc <__eqdf2>:
    c2cc:	2804d53a 	srli	r2,r5,20
    c2d0:	3806d53a 	srli	r3,r7,20
    c2d4:	02000434 	movhi	r8,16
    c2d8:	423fffc4 	addi	r8,r8,-1
    c2dc:	1081ffcc 	andi	r2,r2,2047
    c2e0:	0281ffc4 	movi	r10,2047
    c2e4:	2a12703a 	and	r9,r5,r8
    c2e8:	18c1ffcc 	andi	r3,r3,2047
    c2ec:	3a10703a 	and	r8,r7,r8
    c2f0:	280ad7fa 	srli	r5,r5,31
    c2f4:	380ed7fa 	srli	r7,r7,31
    c2f8:	12801026 	beq	r2,r10,c33c <__eqdf2+0x70>
    c2fc:	0281ffc4 	movi	r10,2047
    c300:	1a800a26 	beq	r3,r10,c32c <__eqdf2+0x60>
    c304:	10c00226 	beq	r2,r3,c310 <__eqdf2+0x44>
    c308:	00800044 	movi	r2,1
    c30c:	f800283a 	ret
    c310:	4a3ffd1e 	bne	r9,r8,c308 <__alt_data_end+0xfffecf08>
    c314:	21bffc1e 	bne	r4,r6,c308 <__alt_data_end+0xfffecf08>
    c318:	29c00c26 	beq	r5,r7,c34c <__eqdf2+0x80>
    c31c:	103ffa1e 	bne	r2,zero,c308 <__alt_data_end+0xfffecf08>
    c320:	2244b03a 	or	r2,r4,r9
    c324:	1004c03a 	cmpne	r2,r2,zero
    c328:	f800283a 	ret
    c32c:	3214b03a 	or	r10,r6,r8
    c330:	503ff426 	beq	r10,zero,c304 <__alt_data_end+0xfffecf04>
    c334:	00800044 	movi	r2,1
    c338:	f800283a 	ret
    c33c:	2254b03a 	or	r10,r4,r9
    c340:	503fee26 	beq	r10,zero,c2fc <__alt_data_end+0xfffecefc>
    c344:	00800044 	movi	r2,1
    c348:	f800283a 	ret
    c34c:	0005883a 	mov	r2,zero
    c350:	f800283a 	ret

0000c354 <__gedf2>:
    c354:	2804d53a 	srli	r2,r5,20
    c358:	3806d53a 	srli	r3,r7,20
    c35c:	02000434 	movhi	r8,16
    c360:	423fffc4 	addi	r8,r8,-1
    c364:	1081ffcc 	andi	r2,r2,2047
    c368:	0241ffc4 	movi	r9,2047
    c36c:	2a14703a 	and	r10,r5,r8
    c370:	18c1ffcc 	andi	r3,r3,2047
    c374:	3a10703a 	and	r8,r7,r8
    c378:	280ad7fa 	srli	r5,r5,31
    c37c:	380ed7fa 	srli	r7,r7,31
    c380:	12401d26 	beq	r2,r9,c3f8 <__gedf2+0xa4>
    c384:	0241ffc4 	movi	r9,2047
    c388:	1a401226 	beq	r3,r9,c3d4 <__gedf2+0x80>
    c38c:	1000081e 	bne	r2,zero,c3b0 <__gedf2+0x5c>
    c390:	2296b03a 	or	r11,r4,r10
    c394:	5813003a 	cmpeq	r9,r11,zero
    c398:	1800091e 	bne	r3,zero,c3c0 <__gedf2+0x6c>
    c39c:	3218b03a 	or	r12,r6,r8
    c3a0:	6000071e 	bne	r12,zero,c3c0 <__gedf2+0x6c>
    c3a4:	0005883a 	mov	r2,zero
    c3a8:	5800101e 	bne	r11,zero,c3ec <__gedf2+0x98>
    c3ac:	f800283a 	ret
    c3b0:	18000c1e 	bne	r3,zero,c3e4 <__gedf2+0x90>
    c3b4:	3212b03a 	or	r9,r6,r8
    c3b8:	48000c26 	beq	r9,zero,c3ec <__gedf2+0x98>
    c3bc:	0013883a 	mov	r9,zero
    c3c0:	39c03fcc 	andi	r7,r7,255
    c3c4:	48000826 	beq	r9,zero,c3e8 <__gedf2+0x94>
    c3c8:	38000926 	beq	r7,zero,c3f0 <__gedf2+0x9c>
    c3cc:	00800044 	movi	r2,1
    c3d0:	f800283a 	ret
    c3d4:	3212b03a 	or	r9,r6,r8
    c3d8:	483fec26 	beq	r9,zero,c38c <__alt_data_end+0xfffecf8c>
    c3dc:	00bfff84 	movi	r2,-2
    c3e0:	f800283a 	ret
    c3e4:	39c03fcc 	andi	r7,r7,255
    c3e8:	29c00626 	beq	r5,r7,c404 <__gedf2+0xb0>
    c3ec:	283ff726 	beq	r5,zero,c3cc <__alt_data_end+0xfffecfcc>
    c3f0:	00bfffc4 	movi	r2,-1
    c3f4:	f800283a 	ret
    c3f8:	2292b03a 	or	r9,r4,r10
    c3fc:	483fe126 	beq	r9,zero,c384 <__alt_data_end+0xfffecf84>
    c400:	003ff606 	br	c3dc <__alt_data_end+0xfffecfdc>
    c404:	18bff916 	blt	r3,r2,c3ec <__alt_data_end+0xfffecfec>
    c408:	10c00316 	blt	r2,r3,c418 <__gedf2+0xc4>
    c40c:	42bff736 	bltu	r8,r10,c3ec <__alt_data_end+0xfffecfec>
    c410:	52000326 	beq	r10,r8,c420 <__gedf2+0xcc>
    c414:	5200042e 	bgeu	r10,r8,c428 <__gedf2+0xd4>
    c418:	283fec1e 	bne	r5,zero,c3cc <__alt_data_end+0xfffecfcc>
    c41c:	003ff406 	br	c3f0 <__alt_data_end+0xfffecff0>
    c420:	313ff236 	bltu	r6,r4,c3ec <__alt_data_end+0xfffecfec>
    c424:	21bffc36 	bltu	r4,r6,c418 <__alt_data_end+0xfffed018>
    c428:	0005883a 	mov	r2,zero
    c42c:	f800283a 	ret

0000c430 <__ledf2>:
    c430:	2804d53a 	srli	r2,r5,20
    c434:	3810d53a 	srli	r8,r7,20
    c438:	00c00434 	movhi	r3,16
    c43c:	18ffffc4 	addi	r3,r3,-1
    c440:	1081ffcc 	andi	r2,r2,2047
    c444:	0241ffc4 	movi	r9,2047
    c448:	28d4703a 	and	r10,r5,r3
    c44c:	4201ffcc 	andi	r8,r8,2047
    c450:	38c6703a 	and	r3,r7,r3
    c454:	280ad7fa 	srli	r5,r5,31
    c458:	380ed7fa 	srli	r7,r7,31
    c45c:	12401f26 	beq	r2,r9,c4dc <__ledf2+0xac>
    c460:	0241ffc4 	movi	r9,2047
    c464:	42401426 	beq	r8,r9,c4b8 <__ledf2+0x88>
    c468:	1000091e 	bne	r2,zero,c490 <__ledf2+0x60>
    c46c:	2296b03a 	or	r11,r4,r10
    c470:	5813003a 	cmpeq	r9,r11,zero
    c474:	29403fcc 	andi	r5,r5,255
    c478:	40000a1e 	bne	r8,zero,c4a4 <__ledf2+0x74>
    c47c:	30d8b03a 	or	r12,r6,r3
    c480:	6000081e 	bne	r12,zero,c4a4 <__ledf2+0x74>
    c484:	0005883a 	mov	r2,zero
    c488:	5800111e 	bne	r11,zero,c4d0 <__ledf2+0xa0>
    c48c:	f800283a 	ret
    c490:	29403fcc 	andi	r5,r5,255
    c494:	40000c1e 	bne	r8,zero,c4c8 <__ledf2+0x98>
    c498:	30d2b03a 	or	r9,r6,r3
    c49c:	48000c26 	beq	r9,zero,c4d0 <__ledf2+0xa0>
    c4a0:	0013883a 	mov	r9,zero
    c4a4:	39c03fcc 	andi	r7,r7,255
    c4a8:	48000826 	beq	r9,zero,c4cc <__ledf2+0x9c>
    c4ac:	38001126 	beq	r7,zero,c4f4 <__ledf2+0xc4>
    c4b0:	00800044 	movi	r2,1
    c4b4:	f800283a 	ret
    c4b8:	30d2b03a 	or	r9,r6,r3
    c4bc:	483fea26 	beq	r9,zero,c468 <__alt_data_end+0xfffed068>
    c4c0:	00800084 	movi	r2,2
    c4c4:	f800283a 	ret
    c4c8:	39c03fcc 	andi	r7,r7,255
    c4cc:	39400726 	beq	r7,r5,c4ec <__ledf2+0xbc>
    c4d0:	2800081e 	bne	r5,zero,c4f4 <__ledf2+0xc4>
    c4d4:	00800044 	movi	r2,1
    c4d8:	f800283a 	ret
    c4dc:	2292b03a 	or	r9,r4,r10
    c4e0:	483fdf26 	beq	r9,zero,c460 <__alt_data_end+0xfffed060>
    c4e4:	00800084 	movi	r2,2
    c4e8:	f800283a 	ret
    c4ec:	4080030e 	bge	r8,r2,c4fc <__ledf2+0xcc>
    c4f0:	383fef26 	beq	r7,zero,c4b0 <__alt_data_end+0xfffed0b0>
    c4f4:	00bfffc4 	movi	r2,-1
    c4f8:	f800283a 	ret
    c4fc:	123feb16 	blt	r2,r8,c4ac <__alt_data_end+0xfffed0ac>
    c500:	1abff336 	bltu	r3,r10,c4d0 <__alt_data_end+0xfffed0d0>
    c504:	50c00326 	beq	r10,r3,c514 <__ledf2+0xe4>
    c508:	50c0042e 	bgeu	r10,r3,c51c <__ledf2+0xec>
    c50c:	283fe81e 	bne	r5,zero,c4b0 <__alt_data_end+0xfffed0b0>
    c510:	003ff806 	br	c4f4 <__alt_data_end+0xfffed0f4>
    c514:	313fee36 	bltu	r6,r4,c4d0 <__alt_data_end+0xfffed0d0>
    c518:	21bffc36 	bltu	r4,r6,c50c <__alt_data_end+0xfffed10c>
    c51c:	0005883a 	mov	r2,zero
    c520:	f800283a 	ret

0000c524 <__muldf3>:
    c524:	deffee04 	addi	sp,sp,-72
    c528:	dd000c15 	stw	r20,48(sp)
    c52c:	2828d53a 	srli	r20,r5,20
    c530:	ddc00f15 	stw	r23,60(sp)
    c534:	282ed7fa 	srli	r23,r5,31
    c538:	dc000815 	stw	r16,32(sp)
    c53c:	04000434 	movhi	r16,16
    c540:	dcc00b15 	stw	r19,44(sp)
    c544:	843fffc4 	addi	r16,r16,-1
    c548:	dfc01115 	stw	ra,68(sp)
    c54c:	df001015 	stw	fp,64(sp)
    c550:	dd800e15 	stw	r22,56(sp)
    c554:	dd400d15 	stw	r21,52(sp)
    c558:	dc800a15 	stw	r18,40(sp)
    c55c:	dc400915 	stw	r17,36(sp)
    c560:	a501ffcc 	andi	r20,r20,2047
    c564:	2c20703a 	and	r16,r5,r16
    c568:	b827883a 	mov	r19,r23
    c56c:	ba403fcc 	andi	r9,r23,255
    c570:	a0006026 	beq	r20,zero,c6f4 <__muldf3+0x1d0>
    c574:	0081ffc4 	movi	r2,2047
    c578:	202d883a 	mov	r22,r4
    c57c:	a0803626 	beq	r20,r2,c658 <__muldf3+0x134>
    c580:	84000434 	orhi	r16,r16,16
    c584:	200ad77a 	srli	r5,r4,29
    c588:	800490fa 	slli	r2,r16,3
    c58c:	202c90fa 	slli	r22,r4,3
    c590:	a53f0044 	addi	r20,r20,-1023
    c594:	28a0b03a 	or	r16,r5,r2
    c598:	002b883a 	mov	r21,zero
    c59c:	000b883a 	mov	r5,zero
    c5a0:	3804d53a 	srli	r2,r7,20
    c5a4:	3838d7fa 	srli	fp,r7,31
    c5a8:	04400434 	movhi	r17,16
    c5ac:	8c7fffc4 	addi	r17,r17,-1
    c5b0:	1081ffcc 	andi	r2,r2,2047
    c5b4:	3025883a 	mov	r18,r6
    c5b8:	3c62703a 	and	r17,r7,r17
    c5bc:	e2803fcc 	andi	r10,fp,255
    c5c0:	10006d26 	beq	r2,zero,c778 <__muldf3+0x254>
    c5c4:	00c1ffc4 	movi	r3,2047
    c5c8:	10c06526 	beq	r2,r3,c760 <__muldf3+0x23c>
    c5cc:	8c400434 	orhi	r17,r17,16
    c5d0:	300ed77a 	srli	r7,r6,29
    c5d4:	880690fa 	slli	r3,r17,3
    c5d8:	302490fa 	slli	r18,r6,3
    c5dc:	10bf0044 	addi	r2,r2,-1023
    c5e0:	38e2b03a 	or	r17,r7,r3
    c5e4:	000f883a 	mov	r7,zero
    c5e8:	a087883a 	add	r3,r20,r2
    c5ec:	010003c4 	movi	r4,15
    c5f0:	3d44b03a 	or	r2,r7,r21
    c5f4:	e5ccf03a 	xor	r6,fp,r23
    c5f8:	1a000044 	addi	r8,r3,1
    c5fc:	20809b36 	bltu	r4,r2,c86c <__muldf3+0x348>
    c600:	100490ba 	slli	r2,r2,2
    c604:	01000074 	movhi	r4,1
    c608:	21318604 	addi	r4,r4,-14824
    c60c:	1105883a 	add	r2,r2,r4
    c610:	10800017 	ldw	r2,0(r2)
    c614:	1000683a 	jmp	r2
    c618:	0000c86c 	andhi	zero,zero,801
    c61c:	0000c678 	rdprs	zero,zero,793
    c620:	0000c678 	rdprs	zero,zero,793
    c624:	0000c674 	movhi	zero,793
    c628:	0000c848 	cmpgei	zero,zero,801
    c62c:	0000c848 	cmpgei	zero,zero,801
    c630:	0000c830 	cmpltui	zero,zero,800
    c634:	0000c674 	movhi	zero,793
    c638:	0000c848 	cmpgei	zero,zero,801
    c63c:	0000c830 	cmpltui	zero,zero,800
    c640:	0000c848 	cmpgei	zero,zero,801
    c644:	0000c674 	movhi	zero,793
    c648:	0000c858 	cmpnei	zero,zero,801
    c64c:	0000c858 	cmpnei	zero,zero,801
    c650:	0000c858 	cmpnei	zero,zero,801
    c654:	0000cbb8 	rdprs	zero,zero,814
    c658:	2404b03a 	or	r2,r4,r16
    c65c:	1000711e 	bne	r2,zero,c824 <__muldf3+0x300>
    c660:	05400204 	movi	r21,8
    c664:	0021883a 	mov	r16,zero
    c668:	002d883a 	mov	r22,zero
    c66c:	01400084 	movi	r5,2
    c670:	003fcb06 	br	c5a0 <__alt_data_end+0xfffed1a0>
    c674:	500d883a 	mov	r6,r10
    c678:	00800084 	movi	r2,2
    c67c:	38805926 	beq	r7,r2,c7e4 <__muldf3+0x2c0>
    c680:	008000c4 	movi	r2,3
    c684:	3881bb26 	beq	r7,r2,cd74 <__muldf3+0x850>
    c688:	00800044 	movi	r2,1
    c68c:	3881961e 	bne	r7,r2,cce8 <__muldf3+0x7c4>
    c690:	3027883a 	mov	r19,r6
    c694:	0005883a 	mov	r2,zero
    c698:	0021883a 	mov	r16,zero
    c69c:	002d883a 	mov	r22,zero
    c6a0:	1004953a 	slli	r2,r2,20
    c6a4:	98c03fcc 	andi	r3,r19,255
    c6a8:	04400434 	movhi	r17,16
    c6ac:	8c7fffc4 	addi	r17,r17,-1
    c6b0:	180697fa 	slli	r3,r3,31
    c6b4:	8460703a 	and	r16,r16,r17
    c6b8:	80a0b03a 	or	r16,r16,r2
    c6bc:	80c6b03a 	or	r3,r16,r3
    c6c0:	b005883a 	mov	r2,r22
    c6c4:	dfc01117 	ldw	ra,68(sp)
    c6c8:	df001017 	ldw	fp,64(sp)
    c6cc:	ddc00f17 	ldw	r23,60(sp)
    c6d0:	dd800e17 	ldw	r22,56(sp)
    c6d4:	dd400d17 	ldw	r21,52(sp)
    c6d8:	dd000c17 	ldw	r20,48(sp)
    c6dc:	dcc00b17 	ldw	r19,44(sp)
    c6e0:	dc800a17 	ldw	r18,40(sp)
    c6e4:	dc400917 	ldw	r17,36(sp)
    c6e8:	dc000817 	ldw	r16,32(sp)
    c6ec:	dec01204 	addi	sp,sp,72
    c6f0:	f800283a 	ret
    c6f4:	2404b03a 	or	r2,r4,r16
    c6f8:	202b883a 	mov	r21,r4
    c6fc:	10004426 	beq	r2,zero,c810 <__muldf3+0x2ec>
    c700:	80015126 	beq	r16,zero,cc48 <__muldf3+0x724>
    c704:	8009883a 	mov	r4,r16
    c708:	d9800715 	stw	r6,28(sp)
    c70c:	d9c00215 	stw	r7,8(sp)
    c710:	da400415 	stw	r9,16(sp)
    c714:	000d8900 	call	d890 <__clzsi2>
    c718:	d9800717 	ldw	r6,28(sp)
    c71c:	d9c00217 	ldw	r7,8(sp)
    c720:	da400417 	ldw	r9,16(sp)
    c724:	113ffd44 	addi	r4,r2,-11
    c728:	00c00704 	movi	r3,28
    c72c:	19014216 	blt	r3,r4,cc38 <__muldf3+0x714>
    c730:	00c00744 	movi	r3,29
    c734:	15bffe04 	addi	r22,r2,-8
    c738:	1907c83a 	sub	r3,r3,r4
    c73c:	85a0983a 	sll	r16,r16,r22
    c740:	a8c6d83a 	srl	r3,r21,r3
    c744:	adac983a 	sll	r22,r21,r22
    c748:	1c20b03a 	or	r16,r3,r16
    c74c:	1080fcc4 	addi	r2,r2,1011
    c750:	00a9c83a 	sub	r20,zero,r2
    c754:	002b883a 	mov	r21,zero
    c758:	000b883a 	mov	r5,zero
    c75c:	003f9006 	br	c5a0 <__alt_data_end+0xfffed1a0>
    c760:	3446b03a 	or	r3,r6,r17
    c764:	1800281e 	bne	r3,zero,c808 <__muldf3+0x2e4>
    c768:	0023883a 	mov	r17,zero
    c76c:	0025883a 	mov	r18,zero
    c770:	01c00084 	movi	r7,2
    c774:	003f9c06 	br	c5e8 <__alt_data_end+0xfffed1e8>
    c778:	3446b03a 	or	r3,r6,r17
    c77c:	18001e26 	beq	r3,zero,c7f8 <__muldf3+0x2d4>
    c780:	88012126 	beq	r17,zero,cc08 <__muldf3+0x6e4>
    c784:	8809883a 	mov	r4,r17
    c788:	d9400215 	stw	r5,8(sp)
    c78c:	d9800715 	stw	r6,28(sp)
    c790:	da400415 	stw	r9,16(sp)
    c794:	da800315 	stw	r10,12(sp)
    c798:	000d8900 	call	d890 <__clzsi2>
    c79c:	d9400217 	ldw	r5,8(sp)
    c7a0:	d9800717 	ldw	r6,28(sp)
    c7a4:	da400417 	ldw	r9,16(sp)
    c7a8:	da800317 	ldw	r10,12(sp)
    c7ac:	113ffd44 	addi	r4,r2,-11
    c7b0:	00c00704 	movi	r3,28
    c7b4:	19011016 	blt	r3,r4,cbf8 <__muldf3+0x6d4>
    c7b8:	00c00744 	movi	r3,29
    c7bc:	14bffe04 	addi	r18,r2,-8
    c7c0:	1907c83a 	sub	r3,r3,r4
    c7c4:	8ca2983a 	sll	r17,r17,r18
    c7c8:	30c6d83a 	srl	r3,r6,r3
    c7cc:	34a4983a 	sll	r18,r6,r18
    c7d0:	1c62b03a 	or	r17,r3,r17
    c7d4:	1080fcc4 	addi	r2,r2,1011
    c7d8:	0085c83a 	sub	r2,zero,r2
    c7dc:	000f883a 	mov	r7,zero
    c7e0:	003f8106 	br	c5e8 <__alt_data_end+0xfffed1e8>
    c7e4:	3027883a 	mov	r19,r6
    c7e8:	0081ffc4 	movi	r2,2047
    c7ec:	0021883a 	mov	r16,zero
    c7f0:	002d883a 	mov	r22,zero
    c7f4:	003faa06 	br	c6a0 <__alt_data_end+0xfffed2a0>
    c7f8:	0023883a 	mov	r17,zero
    c7fc:	0025883a 	mov	r18,zero
    c800:	01c00044 	movi	r7,1
    c804:	003f7806 	br	c5e8 <__alt_data_end+0xfffed1e8>
    c808:	01c000c4 	movi	r7,3
    c80c:	003f7606 	br	c5e8 <__alt_data_end+0xfffed1e8>
    c810:	05400104 	movi	r21,4
    c814:	0021883a 	mov	r16,zero
    c818:	002d883a 	mov	r22,zero
    c81c:	01400044 	movi	r5,1
    c820:	003f5f06 	br	c5a0 <__alt_data_end+0xfffed1a0>
    c824:	05400304 	movi	r21,12
    c828:	014000c4 	movi	r5,3
    c82c:	003f5c06 	br	c5a0 <__alt_data_end+0xfffed1a0>
    c830:	04000434 	movhi	r16,16
    c834:	0027883a 	mov	r19,zero
    c838:	843fffc4 	addi	r16,r16,-1
    c83c:	05bfffc4 	movi	r22,-1
    c840:	0081ffc4 	movi	r2,2047
    c844:	003f9606 	br	c6a0 <__alt_data_end+0xfffed2a0>
    c848:	8023883a 	mov	r17,r16
    c84c:	b025883a 	mov	r18,r22
    c850:	280f883a 	mov	r7,r5
    c854:	003f8806 	br	c678 <__alt_data_end+0xfffed278>
    c858:	8023883a 	mov	r17,r16
    c85c:	b025883a 	mov	r18,r22
    c860:	480d883a 	mov	r6,r9
    c864:	280f883a 	mov	r7,r5
    c868:	003f8306 	br	c678 <__alt_data_end+0xfffed278>
    c86c:	b026d43a 	srli	r19,r22,16
    c870:	902ed43a 	srli	r23,r18,16
    c874:	b5bfffcc 	andi	r22,r22,65535
    c878:	94bfffcc 	andi	r18,r18,65535
    c87c:	b00b883a 	mov	r5,r22
    c880:	9009883a 	mov	r4,r18
    c884:	d8c00515 	stw	r3,20(sp)
    c888:	d9800715 	stw	r6,28(sp)
    c88c:	da000615 	stw	r8,24(sp)
    c890:	000b0280 	call	b028 <__mulsi3>
    c894:	980b883a 	mov	r5,r19
    c898:	9009883a 	mov	r4,r18
    c89c:	1029883a 	mov	r20,r2
    c8a0:	000b0280 	call	b028 <__mulsi3>
    c8a4:	b80b883a 	mov	r5,r23
    c8a8:	9809883a 	mov	r4,r19
    c8ac:	102b883a 	mov	r21,r2
    c8b0:	000b0280 	call	b028 <__mulsi3>
    c8b4:	b809883a 	mov	r4,r23
    c8b8:	b00b883a 	mov	r5,r22
    c8bc:	1039883a 	mov	fp,r2
    c8c0:	000b0280 	call	b028 <__mulsi3>
    c8c4:	a008d43a 	srli	r4,r20,16
    c8c8:	1545883a 	add	r2,r2,r21
    c8cc:	d8c00517 	ldw	r3,20(sp)
    c8d0:	2085883a 	add	r2,r4,r2
    c8d4:	d9800717 	ldw	r6,28(sp)
    c8d8:	da000617 	ldw	r8,24(sp)
    c8dc:	1540022e 	bgeu	r2,r21,c8e8 <__muldf3+0x3c4>
    c8e0:	01000074 	movhi	r4,1
    c8e4:	e139883a 	add	fp,fp,r4
    c8e8:	100e943a 	slli	r7,r2,16
    c8ec:	1004d43a 	srli	r2,r2,16
    c8f0:	882ad43a 	srli	r21,r17,16
    c8f4:	a53fffcc 	andi	r20,r20,65535
    c8f8:	8c7fffcc 	andi	r17,r17,65535
    c8fc:	3d29883a 	add	r20,r7,r20
    c900:	b00b883a 	mov	r5,r22
    c904:	8809883a 	mov	r4,r17
    c908:	d8c00515 	stw	r3,20(sp)
    c90c:	d9800715 	stw	r6,28(sp)
    c910:	da000615 	stw	r8,24(sp)
    c914:	dd000115 	stw	r20,4(sp)
    c918:	d8800015 	stw	r2,0(sp)
    c91c:	000b0280 	call	b028 <__mulsi3>
    c920:	980b883a 	mov	r5,r19
    c924:	8809883a 	mov	r4,r17
    c928:	d8800215 	stw	r2,8(sp)
    c92c:	000b0280 	call	b028 <__mulsi3>
    c930:	9809883a 	mov	r4,r19
    c934:	a80b883a 	mov	r5,r21
    c938:	1029883a 	mov	r20,r2
    c93c:	000b0280 	call	b028 <__mulsi3>
    c940:	b00b883a 	mov	r5,r22
    c944:	a809883a 	mov	r4,r21
    c948:	d8800415 	stw	r2,16(sp)
    c94c:	000b0280 	call	b028 <__mulsi3>
    c950:	d9c00217 	ldw	r7,8(sp)
    c954:	1505883a 	add	r2,r2,r20
    c958:	d8c00517 	ldw	r3,20(sp)
    c95c:	3826d43a 	srli	r19,r7,16
    c960:	d9800717 	ldw	r6,28(sp)
    c964:	da000617 	ldw	r8,24(sp)
    c968:	9885883a 	add	r2,r19,r2
    c96c:	da400417 	ldw	r9,16(sp)
    c970:	1500022e 	bgeu	r2,r20,c97c <__muldf3+0x458>
    c974:	01000074 	movhi	r4,1
    c978:	4913883a 	add	r9,r9,r4
    c97c:	1028d43a 	srli	r20,r2,16
    c980:	1004943a 	slli	r2,r2,16
    c984:	802cd43a 	srli	r22,r16,16
    c988:	843fffcc 	andi	r16,r16,65535
    c98c:	3cffffcc 	andi	r19,r7,65535
    c990:	9009883a 	mov	r4,r18
    c994:	800b883a 	mov	r5,r16
    c998:	a269883a 	add	r20,r20,r9
    c99c:	d8c00515 	stw	r3,20(sp)
    c9a0:	d9800715 	stw	r6,28(sp)
    c9a4:	da000615 	stw	r8,24(sp)
    c9a8:	14e7883a 	add	r19,r2,r19
    c9ac:	000b0280 	call	b028 <__mulsi3>
    c9b0:	9009883a 	mov	r4,r18
    c9b4:	b00b883a 	mov	r5,r22
    c9b8:	d8800315 	stw	r2,12(sp)
    c9bc:	000b0280 	call	b028 <__mulsi3>
    c9c0:	b809883a 	mov	r4,r23
    c9c4:	b00b883a 	mov	r5,r22
    c9c8:	d8800215 	stw	r2,8(sp)
    c9cc:	000b0280 	call	b028 <__mulsi3>
    c9d0:	b80b883a 	mov	r5,r23
    c9d4:	8009883a 	mov	r4,r16
    c9d8:	d8800415 	stw	r2,16(sp)
    c9dc:	000b0280 	call	b028 <__mulsi3>
    c9e0:	da800317 	ldw	r10,12(sp)
    c9e4:	d9c00217 	ldw	r7,8(sp)
    c9e8:	d9000017 	ldw	r4,0(sp)
    c9ec:	502ed43a 	srli	r23,r10,16
    c9f0:	11c5883a 	add	r2,r2,r7
    c9f4:	24e5883a 	add	r18,r4,r19
    c9f8:	b885883a 	add	r2,r23,r2
    c9fc:	d8c00517 	ldw	r3,20(sp)
    ca00:	d9800717 	ldw	r6,28(sp)
    ca04:	da000617 	ldw	r8,24(sp)
    ca08:	da400417 	ldw	r9,16(sp)
    ca0c:	11c0022e 	bgeu	r2,r7,ca18 <__muldf3+0x4f4>
    ca10:	01000074 	movhi	r4,1
    ca14:	4913883a 	add	r9,r9,r4
    ca18:	100ed43a 	srli	r7,r2,16
    ca1c:	1004943a 	slli	r2,r2,16
    ca20:	55ffffcc 	andi	r23,r10,65535
    ca24:	3a53883a 	add	r9,r7,r9
    ca28:	8809883a 	mov	r4,r17
    ca2c:	800b883a 	mov	r5,r16
    ca30:	d8c00515 	stw	r3,20(sp)
    ca34:	d9800715 	stw	r6,28(sp)
    ca38:	da000615 	stw	r8,24(sp)
    ca3c:	da400415 	stw	r9,16(sp)
    ca40:	15ef883a 	add	r23,r2,r23
    ca44:	000b0280 	call	b028 <__mulsi3>
    ca48:	8809883a 	mov	r4,r17
    ca4c:	b00b883a 	mov	r5,r22
    ca50:	d8800215 	stw	r2,8(sp)
    ca54:	000b0280 	call	b028 <__mulsi3>
    ca58:	b00b883a 	mov	r5,r22
    ca5c:	a809883a 	mov	r4,r21
    ca60:	d8800315 	stw	r2,12(sp)
    ca64:	000b0280 	call	b028 <__mulsi3>
    ca68:	8009883a 	mov	r4,r16
    ca6c:	a80b883a 	mov	r5,r21
    ca70:	1023883a 	mov	r17,r2
    ca74:	000b0280 	call	b028 <__mulsi3>
    ca78:	d9c00217 	ldw	r7,8(sp)
    ca7c:	da800317 	ldw	r10,12(sp)
    ca80:	d8c00517 	ldw	r3,20(sp)
    ca84:	3808d43a 	srli	r4,r7,16
    ca88:	1285883a 	add	r2,r2,r10
    ca8c:	d9800717 	ldw	r6,28(sp)
    ca90:	2085883a 	add	r2,r4,r2
    ca94:	da000617 	ldw	r8,24(sp)
    ca98:	da400417 	ldw	r9,16(sp)
    ca9c:	1280022e 	bgeu	r2,r10,caa8 <__muldf3+0x584>
    caa0:	01000074 	movhi	r4,1
    caa4:	8923883a 	add	r17,r17,r4
    caa8:	1008943a 	slli	r4,r2,16
    caac:	39ffffcc 	andi	r7,r7,65535
    cab0:	e4b9883a 	add	fp,fp,r18
    cab4:	21cf883a 	add	r7,r4,r7
    cab8:	e4e7803a 	cmpltu	r19,fp,r19
    cabc:	3d0f883a 	add	r7,r7,r20
    cac0:	bf39883a 	add	fp,r23,fp
    cac4:	99c9883a 	add	r4,r19,r7
    cac8:	e5ef803a 	cmpltu	r23,fp,r23
    cacc:	490b883a 	add	r5,r9,r4
    cad0:	1004d43a 	srli	r2,r2,16
    cad4:	b965883a 	add	r18,r23,r5
    cad8:	24c9803a 	cmpltu	r4,r4,r19
    cadc:	3d29803a 	cmpltu	r20,r7,r20
    cae0:	a128b03a 	or	r20,r20,r4
    cae4:	95ef803a 	cmpltu	r23,r18,r23
    cae8:	2a53803a 	cmpltu	r9,r5,r9
    caec:	a0a9883a 	add	r20,r20,r2
    caf0:	4deeb03a 	or	r23,r9,r23
    caf4:	a5ef883a 	add	r23,r20,r23
    caf8:	bc63883a 	add	r17,r23,r17
    cafc:	e004927a 	slli	r2,fp,9
    cb00:	d9000117 	ldw	r4,4(sp)
    cb04:	882e927a 	slli	r23,r17,9
    cb08:	9022d5fa 	srli	r17,r18,23
    cb0c:	e038d5fa 	srli	fp,fp,23
    cb10:	1104b03a 	or	r2,r2,r4
    cb14:	9024927a 	slli	r18,r18,9
    cb18:	1004c03a 	cmpne	r2,r2,zero
    cb1c:	bc62b03a 	or	r17,r23,r17
    cb20:	1738b03a 	or	fp,r2,fp
    cb24:	8880402c 	andhi	r2,r17,256
    cb28:	e4a4b03a 	or	r18,fp,r18
    cb2c:	10000726 	beq	r2,zero,cb4c <__muldf3+0x628>
    cb30:	9006d07a 	srli	r3,r18,1
    cb34:	880497fa 	slli	r2,r17,31
    cb38:	9480004c 	andi	r18,r18,1
    cb3c:	8822d07a 	srli	r17,r17,1
    cb40:	1ca4b03a 	or	r18,r3,r18
    cb44:	14a4b03a 	or	r18,r2,r18
    cb48:	4007883a 	mov	r3,r8
    cb4c:	1880ffc4 	addi	r2,r3,1023
    cb50:	0080460e 	bge	zero,r2,cc6c <__muldf3+0x748>
    cb54:	910001cc 	andi	r4,r18,7
    cb58:	20000726 	beq	r4,zero,cb78 <__muldf3+0x654>
    cb5c:	910003cc 	andi	r4,r18,15
    cb60:	01400104 	movi	r5,4
    cb64:	21400426 	beq	r4,r5,cb78 <__muldf3+0x654>
    cb68:	9149883a 	add	r4,r18,r5
    cb6c:	24a5803a 	cmpltu	r18,r4,r18
    cb70:	8ca3883a 	add	r17,r17,r18
    cb74:	2025883a 	mov	r18,r4
    cb78:	8900402c 	andhi	r4,r17,256
    cb7c:	20000426 	beq	r4,zero,cb90 <__muldf3+0x66c>
    cb80:	18810004 	addi	r2,r3,1024
    cb84:	00ffc034 	movhi	r3,65280
    cb88:	18ffffc4 	addi	r3,r3,-1
    cb8c:	88e2703a 	and	r17,r17,r3
    cb90:	00c1ff84 	movi	r3,2046
    cb94:	18bf1316 	blt	r3,r2,c7e4 <__alt_data_end+0xfffed3e4>
    cb98:	882c977a 	slli	r22,r17,29
    cb9c:	9024d0fa 	srli	r18,r18,3
    cba0:	8822927a 	slli	r17,r17,9
    cba4:	1081ffcc 	andi	r2,r2,2047
    cba8:	b4acb03a 	or	r22,r22,r18
    cbac:	8820d33a 	srli	r16,r17,12
    cbb0:	3027883a 	mov	r19,r6
    cbb4:	003eba06 	br	c6a0 <__alt_data_end+0xfffed2a0>
    cbb8:	8080022c 	andhi	r2,r16,8
    cbbc:	10000926 	beq	r2,zero,cbe4 <__muldf3+0x6c0>
    cbc0:	8880022c 	andhi	r2,r17,8
    cbc4:	1000071e 	bne	r2,zero,cbe4 <__muldf3+0x6c0>
    cbc8:	00800434 	movhi	r2,16
    cbcc:	8c000234 	orhi	r16,r17,8
    cbd0:	10bfffc4 	addi	r2,r2,-1
    cbd4:	e027883a 	mov	r19,fp
    cbd8:	80a0703a 	and	r16,r16,r2
    cbdc:	902d883a 	mov	r22,r18
    cbe0:	003f1706 	br	c840 <__alt_data_end+0xfffed440>
    cbe4:	00800434 	movhi	r2,16
    cbe8:	84000234 	orhi	r16,r16,8
    cbec:	10bfffc4 	addi	r2,r2,-1
    cbf0:	80a0703a 	and	r16,r16,r2
    cbf4:	003f1206 	br	c840 <__alt_data_end+0xfffed440>
    cbf8:	147ff604 	addi	r17,r2,-40
    cbfc:	3462983a 	sll	r17,r6,r17
    cc00:	0025883a 	mov	r18,zero
    cc04:	003ef306 	br	c7d4 <__alt_data_end+0xfffed3d4>
    cc08:	3009883a 	mov	r4,r6
    cc0c:	d9400215 	stw	r5,8(sp)
    cc10:	d9800715 	stw	r6,28(sp)
    cc14:	da400415 	stw	r9,16(sp)
    cc18:	da800315 	stw	r10,12(sp)
    cc1c:	000d8900 	call	d890 <__clzsi2>
    cc20:	10800804 	addi	r2,r2,32
    cc24:	da800317 	ldw	r10,12(sp)
    cc28:	da400417 	ldw	r9,16(sp)
    cc2c:	d9800717 	ldw	r6,28(sp)
    cc30:	d9400217 	ldw	r5,8(sp)
    cc34:	003edd06 	br	c7ac <__alt_data_end+0xfffed3ac>
    cc38:	143ff604 	addi	r16,r2,-40
    cc3c:	ac20983a 	sll	r16,r21,r16
    cc40:	002d883a 	mov	r22,zero
    cc44:	003ec106 	br	c74c <__alt_data_end+0xfffed34c>
    cc48:	d9800715 	stw	r6,28(sp)
    cc4c:	d9c00215 	stw	r7,8(sp)
    cc50:	da400415 	stw	r9,16(sp)
    cc54:	000d8900 	call	d890 <__clzsi2>
    cc58:	10800804 	addi	r2,r2,32
    cc5c:	da400417 	ldw	r9,16(sp)
    cc60:	d9c00217 	ldw	r7,8(sp)
    cc64:	d9800717 	ldw	r6,28(sp)
    cc68:	003eae06 	br	c724 <__alt_data_end+0xfffed324>
    cc6c:	00c00044 	movi	r3,1
    cc70:	1887c83a 	sub	r3,r3,r2
    cc74:	01000e04 	movi	r4,56
    cc78:	20fe8516 	blt	r4,r3,c690 <__alt_data_end+0xfffed290>
    cc7c:	010007c4 	movi	r4,31
    cc80:	20c01b16 	blt	r4,r3,ccf0 <__muldf3+0x7cc>
    cc84:	00800804 	movi	r2,32
    cc88:	10c5c83a 	sub	r2,r2,r3
    cc8c:	888a983a 	sll	r5,r17,r2
    cc90:	90c8d83a 	srl	r4,r18,r3
    cc94:	9084983a 	sll	r2,r18,r2
    cc98:	88e2d83a 	srl	r17,r17,r3
    cc9c:	2906b03a 	or	r3,r5,r4
    cca0:	1004c03a 	cmpne	r2,r2,zero
    cca4:	1886b03a 	or	r3,r3,r2
    cca8:	188001cc 	andi	r2,r3,7
    ccac:	10000726 	beq	r2,zero,cccc <__muldf3+0x7a8>
    ccb0:	188003cc 	andi	r2,r3,15
    ccb4:	01000104 	movi	r4,4
    ccb8:	11000426 	beq	r2,r4,cccc <__muldf3+0x7a8>
    ccbc:	1805883a 	mov	r2,r3
    ccc0:	10c00104 	addi	r3,r2,4
    ccc4:	1885803a 	cmpltu	r2,r3,r2
    ccc8:	88a3883a 	add	r17,r17,r2
    cccc:	8880202c 	andhi	r2,r17,128
    ccd0:	10001c26 	beq	r2,zero,cd44 <__muldf3+0x820>
    ccd4:	3027883a 	mov	r19,r6
    ccd8:	00800044 	movi	r2,1
    ccdc:	0021883a 	mov	r16,zero
    cce0:	002d883a 	mov	r22,zero
    cce4:	003e6e06 	br	c6a0 <__alt_data_end+0xfffed2a0>
    cce8:	4007883a 	mov	r3,r8
    ccec:	003f9706 	br	cb4c <__alt_data_end+0xfffed74c>
    ccf0:	017ff844 	movi	r5,-31
    ccf4:	2885c83a 	sub	r2,r5,r2
    ccf8:	888ad83a 	srl	r5,r17,r2
    ccfc:	00800804 	movi	r2,32
    cd00:	18801a26 	beq	r3,r2,cd6c <__muldf3+0x848>
    cd04:	01001004 	movi	r4,64
    cd08:	20c7c83a 	sub	r3,r4,r3
    cd0c:	88e2983a 	sll	r17,r17,r3
    cd10:	8ca4b03a 	or	r18,r17,r18
    cd14:	9004c03a 	cmpne	r2,r18,zero
    cd18:	2884b03a 	or	r2,r5,r2
    cd1c:	144001cc 	andi	r17,r2,7
    cd20:	88000d1e 	bne	r17,zero,cd58 <__muldf3+0x834>
    cd24:	0021883a 	mov	r16,zero
    cd28:	102cd0fa 	srli	r22,r2,3
    cd2c:	3027883a 	mov	r19,r6
    cd30:	0005883a 	mov	r2,zero
    cd34:	b46cb03a 	or	r22,r22,r17
    cd38:	003e5906 	br	c6a0 <__alt_data_end+0xfffed2a0>
    cd3c:	1007883a 	mov	r3,r2
    cd40:	0023883a 	mov	r17,zero
    cd44:	8820927a 	slli	r16,r17,9
    cd48:	1805883a 	mov	r2,r3
    cd4c:	8822977a 	slli	r17,r17,29
    cd50:	8020d33a 	srli	r16,r16,12
    cd54:	003ff406 	br	cd28 <__alt_data_end+0xfffed928>
    cd58:	10c003cc 	andi	r3,r2,15
    cd5c:	01000104 	movi	r4,4
    cd60:	193ff626 	beq	r3,r4,cd3c <__alt_data_end+0xfffed93c>
    cd64:	0023883a 	mov	r17,zero
    cd68:	003fd506 	br	ccc0 <__alt_data_end+0xfffed8c0>
    cd6c:	0023883a 	mov	r17,zero
    cd70:	003fe706 	br	cd10 <__alt_data_end+0xfffed910>
    cd74:	00800434 	movhi	r2,16
    cd78:	8c000234 	orhi	r16,r17,8
    cd7c:	10bfffc4 	addi	r2,r2,-1
    cd80:	3027883a 	mov	r19,r6
    cd84:	80a0703a 	and	r16,r16,r2
    cd88:	902d883a 	mov	r22,r18
    cd8c:	003eac06 	br	c840 <__alt_data_end+0xfffed440>

0000cd90 <__subdf3>:
    cd90:	02000434 	movhi	r8,16
    cd94:	423fffc4 	addi	r8,r8,-1
    cd98:	defffb04 	addi	sp,sp,-20
    cd9c:	2a14703a 	and	r10,r5,r8
    cda0:	3812d53a 	srli	r9,r7,20
    cda4:	3a10703a 	and	r8,r7,r8
    cda8:	2006d77a 	srli	r3,r4,29
    cdac:	3004d77a 	srli	r2,r6,29
    cdb0:	dc000015 	stw	r16,0(sp)
    cdb4:	501490fa 	slli	r10,r10,3
    cdb8:	2820d53a 	srli	r16,r5,20
    cdbc:	401090fa 	slli	r8,r8,3
    cdc0:	dc800215 	stw	r18,8(sp)
    cdc4:	dc400115 	stw	r17,4(sp)
    cdc8:	dfc00415 	stw	ra,16(sp)
    cdcc:	202290fa 	slli	r17,r4,3
    cdd0:	dcc00315 	stw	r19,12(sp)
    cdd4:	4a41ffcc 	andi	r9,r9,2047
    cdd8:	0101ffc4 	movi	r4,2047
    cddc:	2824d7fa 	srli	r18,r5,31
    cde0:	8401ffcc 	andi	r16,r16,2047
    cde4:	50c6b03a 	or	r3,r10,r3
    cde8:	380ed7fa 	srli	r7,r7,31
    cdec:	408ab03a 	or	r5,r8,r2
    cdf0:	300c90fa 	slli	r6,r6,3
    cdf4:	49009626 	beq	r9,r4,d050 <__subdf3+0x2c0>
    cdf8:	39c0005c 	xori	r7,r7,1
    cdfc:	8245c83a 	sub	r2,r16,r9
    ce00:	3c807426 	beq	r7,r18,cfd4 <__subdf3+0x244>
    ce04:	0080af0e 	bge	zero,r2,d0c4 <__subdf3+0x334>
    ce08:	48002a1e 	bne	r9,zero,ceb4 <__subdf3+0x124>
    ce0c:	2988b03a 	or	r4,r5,r6
    ce10:	20009a1e 	bne	r4,zero,d07c <__subdf3+0x2ec>
    ce14:	888001cc 	andi	r2,r17,7
    ce18:	10000726 	beq	r2,zero,ce38 <__subdf3+0xa8>
    ce1c:	888003cc 	andi	r2,r17,15
    ce20:	01000104 	movi	r4,4
    ce24:	11000426 	beq	r2,r4,ce38 <__subdf3+0xa8>
    ce28:	890b883a 	add	r5,r17,r4
    ce2c:	2c63803a 	cmpltu	r17,r5,r17
    ce30:	1c47883a 	add	r3,r3,r17
    ce34:	2823883a 	mov	r17,r5
    ce38:	1880202c 	andhi	r2,r3,128
    ce3c:	10005926 	beq	r2,zero,cfa4 <__subdf3+0x214>
    ce40:	84000044 	addi	r16,r16,1
    ce44:	0081ffc4 	movi	r2,2047
    ce48:	8080be26 	beq	r16,r2,d144 <__subdf3+0x3b4>
    ce4c:	017fe034 	movhi	r5,65408
    ce50:	297fffc4 	addi	r5,r5,-1
    ce54:	1946703a 	and	r3,r3,r5
    ce58:	1804977a 	slli	r2,r3,29
    ce5c:	1806927a 	slli	r3,r3,9
    ce60:	8822d0fa 	srli	r17,r17,3
    ce64:	8401ffcc 	andi	r16,r16,2047
    ce68:	180ad33a 	srli	r5,r3,12
    ce6c:	9100004c 	andi	r4,r18,1
    ce70:	1444b03a 	or	r2,r2,r17
    ce74:	80c1ffcc 	andi	r3,r16,2047
    ce78:	1820953a 	slli	r16,r3,20
    ce7c:	20c03fcc 	andi	r3,r4,255
    ce80:	180897fa 	slli	r4,r3,31
    ce84:	00c00434 	movhi	r3,16
    ce88:	18ffffc4 	addi	r3,r3,-1
    ce8c:	28c6703a 	and	r3,r5,r3
    ce90:	1c06b03a 	or	r3,r3,r16
    ce94:	1906b03a 	or	r3,r3,r4
    ce98:	dfc00417 	ldw	ra,16(sp)
    ce9c:	dcc00317 	ldw	r19,12(sp)
    cea0:	dc800217 	ldw	r18,8(sp)
    cea4:	dc400117 	ldw	r17,4(sp)
    cea8:	dc000017 	ldw	r16,0(sp)
    ceac:	dec00504 	addi	sp,sp,20
    ceb0:	f800283a 	ret
    ceb4:	0101ffc4 	movi	r4,2047
    ceb8:	813fd626 	beq	r16,r4,ce14 <__alt_data_end+0xfffeda14>
    cebc:	29402034 	orhi	r5,r5,128
    cec0:	01000e04 	movi	r4,56
    cec4:	2080a316 	blt	r4,r2,d154 <__subdf3+0x3c4>
    cec8:	010007c4 	movi	r4,31
    cecc:	2080c616 	blt	r4,r2,d1e8 <__subdf3+0x458>
    ced0:	01000804 	movi	r4,32
    ced4:	2089c83a 	sub	r4,r4,r2
    ced8:	2910983a 	sll	r8,r5,r4
    cedc:	308ed83a 	srl	r7,r6,r2
    cee0:	3108983a 	sll	r4,r6,r4
    cee4:	2884d83a 	srl	r2,r5,r2
    cee8:	41ccb03a 	or	r6,r8,r7
    ceec:	2008c03a 	cmpne	r4,r4,zero
    cef0:	310cb03a 	or	r6,r6,r4
    cef4:	898dc83a 	sub	r6,r17,r6
    cef8:	89a3803a 	cmpltu	r17,r17,r6
    cefc:	1887c83a 	sub	r3,r3,r2
    cf00:	1c47c83a 	sub	r3,r3,r17
    cf04:	3023883a 	mov	r17,r6
    cf08:	1880202c 	andhi	r2,r3,128
    cf0c:	10002326 	beq	r2,zero,cf9c <__subdf3+0x20c>
    cf10:	04c02034 	movhi	r19,128
    cf14:	9cffffc4 	addi	r19,r19,-1
    cf18:	1ce6703a 	and	r19,r3,r19
    cf1c:	98007a26 	beq	r19,zero,d108 <__subdf3+0x378>
    cf20:	9809883a 	mov	r4,r19
    cf24:	000d8900 	call	d890 <__clzsi2>
    cf28:	113ffe04 	addi	r4,r2,-8
    cf2c:	00c007c4 	movi	r3,31
    cf30:	19007b16 	blt	r3,r4,d120 <__subdf3+0x390>
    cf34:	00800804 	movi	r2,32
    cf38:	1105c83a 	sub	r2,r2,r4
    cf3c:	8884d83a 	srl	r2,r17,r2
    cf40:	9906983a 	sll	r3,r19,r4
    cf44:	8922983a 	sll	r17,r17,r4
    cf48:	10c4b03a 	or	r2,r2,r3
    cf4c:	24007816 	blt	r4,r16,d130 <__subdf3+0x3a0>
    cf50:	2421c83a 	sub	r16,r4,r16
    cf54:	80c00044 	addi	r3,r16,1
    cf58:	010007c4 	movi	r4,31
    cf5c:	20c09516 	blt	r4,r3,d1b4 <__subdf3+0x424>
    cf60:	01400804 	movi	r5,32
    cf64:	28cbc83a 	sub	r5,r5,r3
    cf68:	88c8d83a 	srl	r4,r17,r3
    cf6c:	8962983a 	sll	r17,r17,r5
    cf70:	114a983a 	sll	r5,r2,r5
    cf74:	10c6d83a 	srl	r3,r2,r3
    cf78:	8804c03a 	cmpne	r2,r17,zero
    cf7c:	290ab03a 	or	r5,r5,r4
    cf80:	28a2b03a 	or	r17,r5,r2
    cf84:	0021883a 	mov	r16,zero
    cf88:	003fa206 	br	ce14 <__alt_data_end+0xfffeda14>
    cf8c:	2090b03a 	or	r8,r4,r2
    cf90:	40018e26 	beq	r8,zero,d5cc <__subdf3+0x83c>
    cf94:	1007883a 	mov	r3,r2
    cf98:	2023883a 	mov	r17,r4
    cf9c:	888001cc 	andi	r2,r17,7
    cfa0:	103f9e1e 	bne	r2,zero,ce1c <__alt_data_end+0xfffeda1c>
    cfa4:	1804977a 	slli	r2,r3,29
    cfa8:	8822d0fa 	srli	r17,r17,3
    cfac:	1810d0fa 	srli	r8,r3,3
    cfb0:	9100004c 	andi	r4,r18,1
    cfb4:	1444b03a 	or	r2,r2,r17
    cfb8:	00c1ffc4 	movi	r3,2047
    cfbc:	80c02826 	beq	r16,r3,d060 <__subdf3+0x2d0>
    cfc0:	01400434 	movhi	r5,16
    cfc4:	297fffc4 	addi	r5,r5,-1
    cfc8:	80e0703a 	and	r16,r16,r3
    cfcc:	414a703a 	and	r5,r8,r5
    cfd0:	003fa806 	br	ce74 <__alt_data_end+0xfffeda74>
    cfd4:	0080630e 	bge	zero,r2,d164 <__subdf3+0x3d4>
    cfd8:	48003026 	beq	r9,zero,d09c <__subdf3+0x30c>
    cfdc:	0101ffc4 	movi	r4,2047
    cfe0:	813f8c26 	beq	r16,r4,ce14 <__alt_data_end+0xfffeda14>
    cfe4:	29402034 	orhi	r5,r5,128
    cfe8:	01000e04 	movi	r4,56
    cfec:	2080a90e 	bge	r4,r2,d294 <__subdf3+0x504>
    cff0:	298cb03a 	or	r6,r5,r6
    cff4:	3012c03a 	cmpne	r9,r6,zero
    cff8:	0005883a 	mov	r2,zero
    cffc:	4c53883a 	add	r9,r9,r17
    d000:	4c63803a 	cmpltu	r17,r9,r17
    d004:	10c7883a 	add	r3,r2,r3
    d008:	88c7883a 	add	r3,r17,r3
    d00c:	4823883a 	mov	r17,r9
    d010:	1880202c 	andhi	r2,r3,128
    d014:	1000d026 	beq	r2,zero,d358 <__subdf3+0x5c8>
    d018:	84000044 	addi	r16,r16,1
    d01c:	0081ffc4 	movi	r2,2047
    d020:	8080fe26 	beq	r16,r2,d41c <__subdf3+0x68c>
    d024:	00bfe034 	movhi	r2,65408
    d028:	10bfffc4 	addi	r2,r2,-1
    d02c:	1886703a 	and	r3,r3,r2
    d030:	880ad07a 	srli	r5,r17,1
    d034:	180497fa 	slli	r2,r3,31
    d038:	8900004c 	andi	r4,r17,1
    d03c:	2922b03a 	or	r17,r5,r4
    d040:	1806d07a 	srli	r3,r3,1
    d044:	1462b03a 	or	r17,r2,r17
    d048:	3825883a 	mov	r18,r7
    d04c:	003f7106 	br	ce14 <__alt_data_end+0xfffeda14>
    d050:	2984b03a 	or	r2,r5,r6
    d054:	103f6826 	beq	r2,zero,cdf8 <__alt_data_end+0xfffed9f8>
    d058:	39c03fcc 	andi	r7,r7,255
    d05c:	003f6706 	br	cdfc <__alt_data_end+0xfffed9fc>
    d060:	4086b03a 	or	r3,r8,r2
    d064:	18015226 	beq	r3,zero,d5b0 <__subdf3+0x820>
    d068:	00c00434 	movhi	r3,16
    d06c:	41400234 	orhi	r5,r8,8
    d070:	18ffffc4 	addi	r3,r3,-1
    d074:	28ca703a 	and	r5,r5,r3
    d078:	003f7e06 	br	ce74 <__alt_data_end+0xfffeda74>
    d07c:	10bfffc4 	addi	r2,r2,-1
    d080:	1000491e 	bne	r2,zero,d1a8 <__subdf3+0x418>
    d084:	898fc83a 	sub	r7,r17,r6
    d088:	89e3803a 	cmpltu	r17,r17,r7
    d08c:	1947c83a 	sub	r3,r3,r5
    d090:	1c47c83a 	sub	r3,r3,r17
    d094:	3823883a 	mov	r17,r7
    d098:	003f9b06 	br	cf08 <__alt_data_end+0xfffedb08>
    d09c:	2988b03a 	or	r4,r5,r6
    d0a0:	203f5c26 	beq	r4,zero,ce14 <__alt_data_end+0xfffeda14>
    d0a4:	10bfffc4 	addi	r2,r2,-1
    d0a8:	1000931e 	bne	r2,zero,d2f8 <__subdf3+0x568>
    d0ac:	898d883a 	add	r6,r17,r6
    d0b0:	3463803a 	cmpltu	r17,r6,r17
    d0b4:	1947883a 	add	r3,r3,r5
    d0b8:	88c7883a 	add	r3,r17,r3
    d0bc:	3023883a 	mov	r17,r6
    d0c0:	003fd306 	br	d010 <__alt_data_end+0xfffedc10>
    d0c4:	1000541e 	bne	r2,zero,d218 <__subdf3+0x488>
    d0c8:	80800044 	addi	r2,r16,1
    d0cc:	1081ffcc 	andi	r2,r2,2047
    d0d0:	01000044 	movi	r4,1
    d0d4:	2080a20e 	bge	r4,r2,d360 <__subdf3+0x5d0>
    d0d8:	8989c83a 	sub	r4,r17,r6
    d0dc:	8905803a 	cmpltu	r2,r17,r4
    d0e0:	1967c83a 	sub	r19,r3,r5
    d0e4:	98a7c83a 	sub	r19,r19,r2
    d0e8:	9880202c 	andhi	r2,r19,128
    d0ec:	10006326 	beq	r2,zero,d27c <__subdf3+0x4ec>
    d0f0:	3463c83a 	sub	r17,r6,r17
    d0f4:	28c7c83a 	sub	r3,r5,r3
    d0f8:	344d803a 	cmpltu	r6,r6,r17
    d0fc:	19a7c83a 	sub	r19,r3,r6
    d100:	3825883a 	mov	r18,r7
    d104:	983f861e 	bne	r19,zero,cf20 <__alt_data_end+0xfffedb20>
    d108:	8809883a 	mov	r4,r17
    d10c:	000d8900 	call	d890 <__clzsi2>
    d110:	10800804 	addi	r2,r2,32
    d114:	113ffe04 	addi	r4,r2,-8
    d118:	00c007c4 	movi	r3,31
    d11c:	193f850e 	bge	r3,r4,cf34 <__alt_data_end+0xfffedb34>
    d120:	10bff604 	addi	r2,r2,-40
    d124:	8884983a 	sll	r2,r17,r2
    d128:	0023883a 	mov	r17,zero
    d12c:	243f880e 	bge	r4,r16,cf50 <__alt_data_end+0xfffedb50>
    d130:	00ffe034 	movhi	r3,65408
    d134:	18ffffc4 	addi	r3,r3,-1
    d138:	8121c83a 	sub	r16,r16,r4
    d13c:	10c6703a 	and	r3,r2,r3
    d140:	003f3406 	br	ce14 <__alt_data_end+0xfffeda14>
    d144:	9100004c 	andi	r4,r18,1
    d148:	000b883a 	mov	r5,zero
    d14c:	0005883a 	mov	r2,zero
    d150:	003f4806 	br	ce74 <__alt_data_end+0xfffeda74>
    d154:	298cb03a 	or	r6,r5,r6
    d158:	300cc03a 	cmpne	r6,r6,zero
    d15c:	0005883a 	mov	r2,zero
    d160:	003f6406 	br	cef4 <__alt_data_end+0xfffedaf4>
    d164:	10009a1e 	bne	r2,zero,d3d0 <__subdf3+0x640>
    d168:	82400044 	addi	r9,r16,1
    d16c:	4881ffcc 	andi	r2,r9,2047
    d170:	02800044 	movi	r10,1
    d174:	5080670e 	bge	r10,r2,d314 <__subdf3+0x584>
    d178:	0081ffc4 	movi	r2,2047
    d17c:	4880af26 	beq	r9,r2,d43c <__subdf3+0x6ac>
    d180:	898d883a 	add	r6,r17,r6
    d184:	1945883a 	add	r2,r3,r5
    d188:	3447803a 	cmpltu	r3,r6,r17
    d18c:	1887883a 	add	r3,r3,r2
    d190:	182297fa 	slli	r17,r3,31
    d194:	300cd07a 	srli	r6,r6,1
    d198:	1806d07a 	srli	r3,r3,1
    d19c:	4821883a 	mov	r16,r9
    d1a0:	89a2b03a 	or	r17,r17,r6
    d1a4:	003f1b06 	br	ce14 <__alt_data_end+0xfffeda14>
    d1a8:	0101ffc4 	movi	r4,2047
    d1ac:	813f441e 	bne	r16,r4,cec0 <__alt_data_end+0xfffedac0>
    d1b0:	003f1806 	br	ce14 <__alt_data_end+0xfffeda14>
    d1b4:	843ff844 	addi	r16,r16,-31
    d1b8:	01400804 	movi	r5,32
    d1bc:	1408d83a 	srl	r4,r2,r16
    d1c0:	19405026 	beq	r3,r5,d304 <__subdf3+0x574>
    d1c4:	01401004 	movi	r5,64
    d1c8:	28c7c83a 	sub	r3,r5,r3
    d1cc:	10c4983a 	sll	r2,r2,r3
    d1d0:	88a2b03a 	or	r17,r17,r2
    d1d4:	8822c03a 	cmpne	r17,r17,zero
    d1d8:	2462b03a 	or	r17,r4,r17
    d1dc:	0007883a 	mov	r3,zero
    d1e0:	0021883a 	mov	r16,zero
    d1e4:	003f6d06 	br	cf9c <__alt_data_end+0xfffedb9c>
    d1e8:	11fff804 	addi	r7,r2,-32
    d1ec:	01000804 	movi	r4,32
    d1f0:	29ced83a 	srl	r7,r5,r7
    d1f4:	11004526 	beq	r2,r4,d30c <__subdf3+0x57c>
    d1f8:	01001004 	movi	r4,64
    d1fc:	2089c83a 	sub	r4,r4,r2
    d200:	2904983a 	sll	r2,r5,r4
    d204:	118cb03a 	or	r6,r2,r6
    d208:	300cc03a 	cmpne	r6,r6,zero
    d20c:	398cb03a 	or	r6,r7,r6
    d210:	0005883a 	mov	r2,zero
    d214:	003f3706 	br	cef4 <__alt_data_end+0xfffedaf4>
    d218:	80002a26 	beq	r16,zero,d2c4 <__subdf3+0x534>
    d21c:	0101ffc4 	movi	r4,2047
    d220:	49006626 	beq	r9,r4,d3bc <__subdf3+0x62c>
    d224:	0085c83a 	sub	r2,zero,r2
    d228:	18c02034 	orhi	r3,r3,128
    d22c:	01000e04 	movi	r4,56
    d230:	20807e16 	blt	r4,r2,d42c <__subdf3+0x69c>
    d234:	010007c4 	movi	r4,31
    d238:	2080e716 	blt	r4,r2,d5d8 <__subdf3+0x848>
    d23c:	01000804 	movi	r4,32
    d240:	2089c83a 	sub	r4,r4,r2
    d244:	1914983a 	sll	r10,r3,r4
    d248:	8890d83a 	srl	r8,r17,r2
    d24c:	8908983a 	sll	r4,r17,r4
    d250:	1884d83a 	srl	r2,r3,r2
    d254:	5222b03a 	or	r17,r10,r8
    d258:	2006c03a 	cmpne	r3,r4,zero
    d25c:	88e2b03a 	or	r17,r17,r3
    d260:	3463c83a 	sub	r17,r6,r17
    d264:	2885c83a 	sub	r2,r5,r2
    d268:	344d803a 	cmpltu	r6,r6,r17
    d26c:	1187c83a 	sub	r3,r2,r6
    d270:	4821883a 	mov	r16,r9
    d274:	3825883a 	mov	r18,r7
    d278:	003f2306 	br	cf08 <__alt_data_end+0xfffedb08>
    d27c:	24d0b03a 	or	r8,r4,r19
    d280:	40001b1e 	bne	r8,zero,d2f0 <__subdf3+0x560>
    d284:	0005883a 	mov	r2,zero
    d288:	0009883a 	mov	r4,zero
    d28c:	0021883a 	mov	r16,zero
    d290:	003f4906 	br	cfb8 <__alt_data_end+0xfffedbb8>
    d294:	010007c4 	movi	r4,31
    d298:	20803a16 	blt	r4,r2,d384 <__subdf3+0x5f4>
    d29c:	01000804 	movi	r4,32
    d2a0:	2089c83a 	sub	r4,r4,r2
    d2a4:	2912983a 	sll	r9,r5,r4
    d2a8:	3090d83a 	srl	r8,r6,r2
    d2ac:	3108983a 	sll	r4,r6,r4
    d2b0:	2884d83a 	srl	r2,r5,r2
    d2b4:	4a12b03a 	or	r9,r9,r8
    d2b8:	2008c03a 	cmpne	r4,r4,zero
    d2bc:	4912b03a 	or	r9,r9,r4
    d2c0:	003f4e06 	br	cffc <__alt_data_end+0xfffedbfc>
    d2c4:	1c48b03a 	or	r4,r3,r17
    d2c8:	20003c26 	beq	r4,zero,d3bc <__subdf3+0x62c>
    d2cc:	0084303a 	nor	r2,zero,r2
    d2d0:	1000381e 	bne	r2,zero,d3b4 <__subdf3+0x624>
    d2d4:	3463c83a 	sub	r17,r6,r17
    d2d8:	28c5c83a 	sub	r2,r5,r3
    d2dc:	344d803a 	cmpltu	r6,r6,r17
    d2e0:	1187c83a 	sub	r3,r2,r6
    d2e4:	4821883a 	mov	r16,r9
    d2e8:	3825883a 	mov	r18,r7
    d2ec:	003f0606 	br	cf08 <__alt_data_end+0xfffedb08>
    d2f0:	2023883a 	mov	r17,r4
    d2f4:	003f0906 	br	cf1c <__alt_data_end+0xfffedb1c>
    d2f8:	0101ffc4 	movi	r4,2047
    d2fc:	813f3a1e 	bne	r16,r4,cfe8 <__alt_data_end+0xfffedbe8>
    d300:	003ec406 	br	ce14 <__alt_data_end+0xfffeda14>
    d304:	0005883a 	mov	r2,zero
    d308:	003fb106 	br	d1d0 <__alt_data_end+0xfffeddd0>
    d30c:	0005883a 	mov	r2,zero
    d310:	003fbc06 	br	d204 <__alt_data_end+0xfffede04>
    d314:	1c44b03a 	or	r2,r3,r17
    d318:	80008e1e 	bne	r16,zero,d554 <__subdf3+0x7c4>
    d31c:	1000c826 	beq	r2,zero,d640 <__subdf3+0x8b0>
    d320:	2984b03a 	or	r2,r5,r6
    d324:	103ebb26 	beq	r2,zero,ce14 <__alt_data_end+0xfffeda14>
    d328:	8989883a 	add	r4,r17,r6
    d32c:	1945883a 	add	r2,r3,r5
    d330:	2447803a 	cmpltu	r3,r4,r17
    d334:	1887883a 	add	r3,r3,r2
    d338:	1880202c 	andhi	r2,r3,128
    d33c:	2023883a 	mov	r17,r4
    d340:	103f1626 	beq	r2,zero,cf9c <__alt_data_end+0xfffedb9c>
    d344:	00bfe034 	movhi	r2,65408
    d348:	10bfffc4 	addi	r2,r2,-1
    d34c:	5021883a 	mov	r16,r10
    d350:	1886703a 	and	r3,r3,r2
    d354:	003eaf06 	br	ce14 <__alt_data_end+0xfffeda14>
    d358:	3825883a 	mov	r18,r7
    d35c:	003f0f06 	br	cf9c <__alt_data_end+0xfffedb9c>
    d360:	1c44b03a 	or	r2,r3,r17
    d364:	8000251e 	bne	r16,zero,d3fc <__subdf3+0x66c>
    d368:	1000661e 	bne	r2,zero,d504 <__subdf3+0x774>
    d36c:	2990b03a 	or	r8,r5,r6
    d370:	40009626 	beq	r8,zero,d5cc <__subdf3+0x83c>
    d374:	2807883a 	mov	r3,r5
    d378:	3023883a 	mov	r17,r6
    d37c:	3825883a 	mov	r18,r7
    d380:	003ea406 	br	ce14 <__alt_data_end+0xfffeda14>
    d384:	127ff804 	addi	r9,r2,-32
    d388:	01000804 	movi	r4,32
    d38c:	2a52d83a 	srl	r9,r5,r9
    d390:	11008c26 	beq	r2,r4,d5c4 <__subdf3+0x834>
    d394:	01001004 	movi	r4,64
    d398:	2085c83a 	sub	r2,r4,r2
    d39c:	2884983a 	sll	r2,r5,r2
    d3a0:	118cb03a 	or	r6,r2,r6
    d3a4:	300cc03a 	cmpne	r6,r6,zero
    d3a8:	4992b03a 	or	r9,r9,r6
    d3ac:	0005883a 	mov	r2,zero
    d3b0:	003f1206 	br	cffc <__alt_data_end+0xfffedbfc>
    d3b4:	0101ffc4 	movi	r4,2047
    d3b8:	493f9c1e 	bne	r9,r4,d22c <__alt_data_end+0xfffede2c>
    d3bc:	2807883a 	mov	r3,r5
    d3c0:	3023883a 	mov	r17,r6
    d3c4:	4821883a 	mov	r16,r9
    d3c8:	3825883a 	mov	r18,r7
    d3cc:	003e9106 	br	ce14 <__alt_data_end+0xfffeda14>
    d3d0:	80001f1e 	bne	r16,zero,d450 <__subdf3+0x6c0>
    d3d4:	1c48b03a 	or	r4,r3,r17
    d3d8:	20005a26 	beq	r4,zero,d544 <__subdf3+0x7b4>
    d3dc:	0084303a 	nor	r2,zero,r2
    d3e0:	1000561e 	bne	r2,zero,d53c <__subdf3+0x7ac>
    d3e4:	89a3883a 	add	r17,r17,r6
    d3e8:	1945883a 	add	r2,r3,r5
    d3ec:	898d803a 	cmpltu	r6,r17,r6
    d3f0:	3087883a 	add	r3,r6,r2
    d3f4:	4821883a 	mov	r16,r9
    d3f8:	003f0506 	br	d010 <__alt_data_end+0xfffedc10>
    d3fc:	10002b1e 	bne	r2,zero,d4ac <__subdf3+0x71c>
    d400:	2984b03a 	or	r2,r5,r6
    d404:	10008026 	beq	r2,zero,d608 <__subdf3+0x878>
    d408:	2807883a 	mov	r3,r5
    d40c:	3023883a 	mov	r17,r6
    d410:	3825883a 	mov	r18,r7
    d414:	0401ffc4 	movi	r16,2047
    d418:	003e7e06 	br	ce14 <__alt_data_end+0xfffeda14>
    d41c:	3809883a 	mov	r4,r7
    d420:	0011883a 	mov	r8,zero
    d424:	0005883a 	mov	r2,zero
    d428:	003ee306 	br	cfb8 <__alt_data_end+0xfffedbb8>
    d42c:	1c62b03a 	or	r17,r3,r17
    d430:	8822c03a 	cmpne	r17,r17,zero
    d434:	0005883a 	mov	r2,zero
    d438:	003f8906 	br	d260 <__alt_data_end+0xfffede60>
    d43c:	3809883a 	mov	r4,r7
    d440:	4821883a 	mov	r16,r9
    d444:	0011883a 	mov	r8,zero
    d448:	0005883a 	mov	r2,zero
    d44c:	003eda06 	br	cfb8 <__alt_data_end+0xfffedbb8>
    d450:	0101ffc4 	movi	r4,2047
    d454:	49003b26 	beq	r9,r4,d544 <__subdf3+0x7b4>
    d458:	0085c83a 	sub	r2,zero,r2
    d45c:	18c02034 	orhi	r3,r3,128
    d460:	01000e04 	movi	r4,56
    d464:	20806e16 	blt	r4,r2,d620 <__subdf3+0x890>
    d468:	010007c4 	movi	r4,31
    d46c:	20807716 	blt	r4,r2,d64c <__subdf3+0x8bc>
    d470:	01000804 	movi	r4,32
    d474:	2089c83a 	sub	r4,r4,r2
    d478:	1914983a 	sll	r10,r3,r4
    d47c:	8890d83a 	srl	r8,r17,r2
    d480:	8908983a 	sll	r4,r17,r4
    d484:	1884d83a 	srl	r2,r3,r2
    d488:	5222b03a 	or	r17,r10,r8
    d48c:	2006c03a 	cmpne	r3,r4,zero
    d490:	88e2b03a 	or	r17,r17,r3
    d494:	89a3883a 	add	r17,r17,r6
    d498:	1145883a 	add	r2,r2,r5
    d49c:	898d803a 	cmpltu	r6,r17,r6
    d4a0:	3087883a 	add	r3,r6,r2
    d4a4:	4821883a 	mov	r16,r9
    d4a8:	003ed906 	br	d010 <__alt_data_end+0xfffedc10>
    d4ac:	2984b03a 	or	r2,r5,r6
    d4b0:	10004226 	beq	r2,zero,d5bc <__subdf3+0x82c>
    d4b4:	1808d0fa 	srli	r4,r3,3
    d4b8:	8822d0fa 	srli	r17,r17,3
    d4bc:	1806977a 	slli	r3,r3,29
    d4c0:	2080022c 	andhi	r2,r4,8
    d4c4:	1c62b03a 	or	r17,r3,r17
    d4c8:	10000826 	beq	r2,zero,d4ec <__subdf3+0x75c>
    d4cc:	2812d0fa 	srli	r9,r5,3
    d4d0:	4880022c 	andhi	r2,r9,8
    d4d4:	1000051e 	bne	r2,zero,d4ec <__subdf3+0x75c>
    d4d8:	300cd0fa 	srli	r6,r6,3
    d4dc:	2804977a 	slli	r2,r5,29
    d4e0:	4809883a 	mov	r4,r9
    d4e4:	3825883a 	mov	r18,r7
    d4e8:	11a2b03a 	or	r17,r2,r6
    d4ec:	8806d77a 	srli	r3,r17,29
    d4f0:	200890fa 	slli	r4,r4,3
    d4f4:	882290fa 	slli	r17,r17,3
    d4f8:	0401ffc4 	movi	r16,2047
    d4fc:	1906b03a 	or	r3,r3,r4
    d500:	003e4406 	br	ce14 <__alt_data_end+0xfffeda14>
    d504:	2984b03a 	or	r2,r5,r6
    d508:	103e4226 	beq	r2,zero,ce14 <__alt_data_end+0xfffeda14>
    d50c:	8989c83a 	sub	r4,r17,r6
    d510:	8911803a 	cmpltu	r8,r17,r4
    d514:	1945c83a 	sub	r2,r3,r5
    d518:	1205c83a 	sub	r2,r2,r8
    d51c:	1200202c 	andhi	r8,r2,128
    d520:	403e9a26 	beq	r8,zero,cf8c <__alt_data_end+0xfffedb8c>
    d524:	3463c83a 	sub	r17,r6,r17
    d528:	28c5c83a 	sub	r2,r5,r3
    d52c:	344d803a 	cmpltu	r6,r6,r17
    d530:	1187c83a 	sub	r3,r2,r6
    d534:	3825883a 	mov	r18,r7
    d538:	003e3606 	br	ce14 <__alt_data_end+0xfffeda14>
    d53c:	0101ffc4 	movi	r4,2047
    d540:	493fc71e 	bne	r9,r4,d460 <__alt_data_end+0xfffee060>
    d544:	2807883a 	mov	r3,r5
    d548:	3023883a 	mov	r17,r6
    d54c:	4821883a 	mov	r16,r9
    d550:	003e3006 	br	ce14 <__alt_data_end+0xfffeda14>
    d554:	10003626 	beq	r2,zero,d630 <__subdf3+0x8a0>
    d558:	2984b03a 	or	r2,r5,r6
    d55c:	10001726 	beq	r2,zero,d5bc <__subdf3+0x82c>
    d560:	1808d0fa 	srli	r4,r3,3
    d564:	8822d0fa 	srli	r17,r17,3
    d568:	1806977a 	slli	r3,r3,29
    d56c:	2080022c 	andhi	r2,r4,8
    d570:	1c62b03a 	or	r17,r3,r17
    d574:	10000726 	beq	r2,zero,d594 <__subdf3+0x804>
    d578:	2812d0fa 	srli	r9,r5,3
    d57c:	4880022c 	andhi	r2,r9,8
    d580:	1000041e 	bne	r2,zero,d594 <__subdf3+0x804>
    d584:	300cd0fa 	srli	r6,r6,3
    d588:	2804977a 	slli	r2,r5,29
    d58c:	4809883a 	mov	r4,r9
    d590:	11a2b03a 	or	r17,r2,r6
    d594:	8806d77a 	srli	r3,r17,29
    d598:	200890fa 	slli	r4,r4,3
    d59c:	882290fa 	slli	r17,r17,3
    d5a0:	3825883a 	mov	r18,r7
    d5a4:	1906b03a 	or	r3,r3,r4
    d5a8:	0401ffc4 	movi	r16,2047
    d5ac:	003e1906 	br	ce14 <__alt_data_end+0xfffeda14>
    d5b0:	000b883a 	mov	r5,zero
    d5b4:	0005883a 	mov	r2,zero
    d5b8:	003e2e06 	br	ce74 <__alt_data_end+0xfffeda74>
    d5bc:	0401ffc4 	movi	r16,2047
    d5c0:	003e1406 	br	ce14 <__alt_data_end+0xfffeda14>
    d5c4:	0005883a 	mov	r2,zero
    d5c8:	003f7506 	br	d3a0 <__alt_data_end+0xfffedfa0>
    d5cc:	0005883a 	mov	r2,zero
    d5d0:	0009883a 	mov	r4,zero
    d5d4:	003e7806 	br	cfb8 <__alt_data_end+0xfffedbb8>
    d5d8:	123ff804 	addi	r8,r2,-32
    d5dc:	01000804 	movi	r4,32
    d5e0:	1a10d83a 	srl	r8,r3,r8
    d5e4:	11002526 	beq	r2,r4,d67c <__subdf3+0x8ec>
    d5e8:	01001004 	movi	r4,64
    d5ec:	2085c83a 	sub	r2,r4,r2
    d5f0:	1884983a 	sll	r2,r3,r2
    d5f4:	1444b03a 	or	r2,r2,r17
    d5f8:	1004c03a 	cmpne	r2,r2,zero
    d5fc:	40a2b03a 	or	r17,r8,r2
    d600:	0005883a 	mov	r2,zero
    d604:	003f1606 	br	d260 <__alt_data_end+0xfffede60>
    d608:	02000434 	movhi	r8,16
    d60c:	0009883a 	mov	r4,zero
    d610:	423fffc4 	addi	r8,r8,-1
    d614:	00bfffc4 	movi	r2,-1
    d618:	0401ffc4 	movi	r16,2047
    d61c:	003e6606 	br	cfb8 <__alt_data_end+0xfffedbb8>
    d620:	1c62b03a 	or	r17,r3,r17
    d624:	8822c03a 	cmpne	r17,r17,zero
    d628:	0005883a 	mov	r2,zero
    d62c:	003f9906 	br	d494 <__alt_data_end+0xfffee094>
    d630:	2807883a 	mov	r3,r5
    d634:	3023883a 	mov	r17,r6
    d638:	0401ffc4 	movi	r16,2047
    d63c:	003df506 	br	ce14 <__alt_data_end+0xfffeda14>
    d640:	2807883a 	mov	r3,r5
    d644:	3023883a 	mov	r17,r6
    d648:	003df206 	br	ce14 <__alt_data_end+0xfffeda14>
    d64c:	123ff804 	addi	r8,r2,-32
    d650:	01000804 	movi	r4,32
    d654:	1a10d83a 	srl	r8,r3,r8
    d658:	11000a26 	beq	r2,r4,d684 <__subdf3+0x8f4>
    d65c:	01001004 	movi	r4,64
    d660:	2085c83a 	sub	r2,r4,r2
    d664:	1884983a 	sll	r2,r3,r2
    d668:	1444b03a 	or	r2,r2,r17
    d66c:	1004c03a 	cmpne	r2,r2,zero
    d670:	40a2b03a 	or	r17,r8,r2
    d674:	0005883a 	mov	r2,zero
    d678:	003f8606 	br	d494 <__alt_data_end+0xfffee094>
    d67c:	0005883a 	mov	r2,zero
    d680:	003fdc06 	br	d5f4 <__alt_data_end+0xfffee1f4>
    d684:	0005883a 	mov	r2,zero
    d688:	003ff706 	br	d668 <__alt_data_end+0xfffee268>

0000d68c <__fixdfsi>:
    d68c:	280cd53a 	srli	r6,r5,20
    d690:	00c00434 	movhi	r3,16
    d694:	18ffffc4 	addi	r3,r3,-1
    d698:	3181ffcc 	andi	r6,r6,2047
    d69c:	01c0ff84 	movi	r7,1022
    d6a0:	28c6703a 	and	r3,r5,r3
    d6a4:	280ad7fa 	srli	r5,r5,31
    d6a8:	3980120e 	bge	r7,r6,d6f4 <__fixdfsi+0x68>
    d6ac:	00810744 	movi	r2,1053
    d6b0:	11800c16 	blt	r2,r6,d6e4 <__fixdfsi+0x58>
    d6b4:	00810cc4 	movi	r2,1075
    d6b8:	1185c83a 	sub	r2,r2,r6
    d6bc:	01c007c4 	movi	r7,31
    d6c0:	18c00434 	orhi	r3,r3,16
    d6c4:	38800d16 	blt	r7,r2,d6fc <__fixdfsi+0x70>
    d6c8:	31befb44 	addi	r6,r6,-1043
    d6cc:	2084d83a 	srl	r2,r4,r2
    d6d0:	1986983a 	sll	r3,r3,r6
    d6d4:	1884b03a 	or	r2,r3,r2
    d6d8:	28000726 	beq	r5,zero,d6f8 <__fixdfsi+0x6c>
    d6dc:	0085c83a 	sub	r2,zero,r2
    d6e0:	f800283a 	ret
    d6e4:	00a00034 	movhi	r2,32768
    d6e8:	10bfffc4 	addi	r2,r2,-1
    d6ec:	2885883a 	add	r2,r5,r2
    d6f0:	f800283a 	ret
    d6f4:	0005883a 	mov	r2,zero
    d6f8:	f800283a 	ret
    d6fc:	008104c4 	movi	r2,1043
    d700:	1185c83a 	sub	r2,r2,r6
    d704:	1884d83a 	srl	r2,r3,r2
    d708:	003ff306 	br	d6d8 <__alt_data_end+0xfffee2d8>

0000d70c <__floatsidf>:
    d70c:	defffd04 	addi	sp,sp,-12
    d710:	dfc00215 	stw	ra,8(sp)
    d714:	dc400115 	stw	r17,4(sp)
    d718:	dc000015 	stw	r16,0(sp)
    d71c:	20002b26 	beq	r4,zero,d7cc <__floatsidf+0xc0>
    d720:	2023883a 	mov	r17,r4
    d724:	2020d7fa 	srli	r16,r4,31
    d728:	20002d16 	blt	r4,zero,d7e0 <__floatsidf+0xd4>
    d72c:	8809883a 	mov	r4,r17
    d730:	000d8900 	call	d890 <__clzsi2>
    d734:	01410784 	movi	r5,1054
    d738:	288bc83a 	sub	r5,r5,r2
    d73c:	01010cc4 	movi	r4,1075
    d740:	2149c83a 	sub	r4,r4,r5
    d744:	00c007c4 	movi	r3,31
    d748:	1900160e 	bge	r3,r4,d7a4 <__floatsidf+0x98>
    d74c:	00c104c4 	movi	r3,1043
    d750:	1947c83a 	sub	r3,r3,r5
    d754:	88c6983a 	sll	r3,r17,r3
    d758:	00800434 	movhi	r2,16
    d75c:	10bfffc4 	addi	r2,r2,-1
    d760:	1886703a 	and	r3,r3,r2
    d764:	2941ffcc 	andi	r5,r5,2047
    d768:	800d883a 	mov	r6,r16
    d76c:	0005883a 	mov	r2,zero
    d770:	280a953a 	slli	r5,r5,20
    d774:	31803fcc 	andi	r6,r6,255
    d778:	01000434 	movhi	r4,16
    d77c:	300c97fa 	slli	r6,r6,31
    d780:	213fffc4 	addi	r4,r4,-1
    d784:	1906703a 	and	r3,r3,r4
    d788:	1946b03a 	or	r3,r3,r5
    d78c:	1986b03a 	or	r3,r3,r6
    d790:	dfc00217 	ldw	ra,8(sp)
    d794:	dc400117 	ldw	r17,4(sp)
    d798:	dc000017 	ldw	r16,0(sp)
    d79c:	dec00304 	addi	sp,sp,12
    d7a0:	f800283a 	ret
    d7a4:	00c002c4 	movi	r3,11
    d7a8:	1887c83a 	sub	r3,r3,r2
    d7ac:	88c6d83a 	srl	r3,r17,r3
    d7b0:	8904983a 	sll	r2,r17,r4
    d7b4:	01000434 	movhi	r4,16
    d7b8:	213fffc4 	addi	r4,r4,-1
    d7bc:	2941ffcc 	andi	r5,r5,2047
    d7c0:	1906703a 	and	r3,r3,r4
    d7c4:	800d883a 	mov	r6,r16
    d7c8:	003fe906 	br	d770 <__alt_data_end+0xfffee370>
    d7cc:	000d883a 	mov	r6,zero
    d7d0:	000b883a 	mov	r5,zero
    d7d4:	0007883a 	mov	r3,zero
    d7d8:	0005883a 	mov	r2,zero
    d7dc:	003fe406 	br	d770 <__alt_data_end+0xfffee370>
    d7e0:	0123c83a 	sub	r17,zero,r4
    d7e4:	003fd106 	br	d72c <__alt_data_end+0xfffee32c>

0000d7e8 <__floatunsidf>:
    d7e8:	defffe04 	addi	sp,sp,-8
    d7ec:	dc000015 	stw	r16,0(sp)
    d7f0:	dfc00115 	stw	ra,4(sp)
    d7f4:	2021883a 	mov	r16,r4
    d7f8:	20002226 	beq	r4,zero,d884 <__floatunsidf+0x9c>
    d7fc:	000d8900 	call	d890 <__clzsi2>
    d800:	01010784 	movi	r4,1054
    d804:	2089c83a 	sub	r4,r4,r2
    d808:	01810cc4 	movi	r6,1075
    d80c:	310dc83a 	sub	r6,r6,r4
    d810:	00c007c4 	movi	r3,31
    d814:	1980120e 	bge	r3,r6,d860 <__floatunsidf+0x78>
    d818:	00c104c4 	movi	r3,1043
    d81c:	1907c83a 	sub	r3,r3,r4
    d820:	80ca983a 	sll	r5,r16,r3
    d824:	00800434 	movhi	r2,16
    d828:	10bfffc4 	addi	r2,r2,-1
    d82c:	2101ffcc 	andi	r4,r4,2047
    d830:	0021883a 	mov	r16,zero
    d834:	288a703a 	and	r5,r5,r2
    d838:	2008953a 	slli	r4,r4,20
    d83c:	00c00434 	movhi	r3,16
    d840:	18ffffc4 	addi	r3,r3,-1
    d844:	28c6703a 	and	r3,r5,r3
    d848:	8005883a 	mov	r2,r16
    d84c:	1906b03a 	or	r3,r3,r4
    d850:	dfc00117 	ldw	ra,4(sp)
    d854:	dc000017 	ldw	r16,0(sp)
    d858:	dec00204 	addi	sp,sp,8
    d85c:	f800283a 	ret
    d860:	00c002c4 	movi	r3,11
    d864:	188bc83a 	sub	r5,r3,r2
    d868:	814ad83a 	srl	r5,r16,r5
    d86c:	00c00434 	movhi	r3,16
    d870:	18ffffc4 	addi	r3,r3,-1
    d874:	81a0983a 	sll	r16,r16,r6
    d878:	2101ffcc 	andi	r4,r4,2047
    d87c:	28ca703a 	and	r5,r5,r3
    d880:	003fed06 	br	d838 <__alt_data_end+0xfffee438>
    d884:	0009883a 	mov	r4,zero
    d888:	000b883a 	mov	r5,zero
    d88c:	003fea06 	br	d838 <__alt_data_end+0xfffee438>

0000d890 <__clzsi2>:
    d890:	00bfffd4 	movui	r2,65535
    d894:	11000536 	bltu	r2,r4,d8ac <__clzsi2+0x1c>
    d898:	00803fc4 	movi	r2,255
    d89c:	11000f36 	bltu	r2,r4,d8dc <__clzsi2+0x4c>
    d8a0:	00800804 	movi	r2,32
    d8a4:	0007883a 	mov	r3,zero
    d8a8:	00000506 	br	d8c0 <__clzsi2+0x30>
    d8ac:	00804034 	movhi	r2,256
    d8b0:	10bfffc4 	addi	r2,r2,-1
    d8b4:	11000c2e 	bgeu	r2,r4,d8e8 <__clzsi2+0x58>
    d8b8:	00800204 	movi	r2,8
    d8bc:	00c00604 	movi	r3,24
    d8c0:	20c8d83a 	srl	r4,r4,r3
    d8c4:	00c00074 	movhi	r3,1
    d8c8:	18c08d04 	addi	r3,r3,564
    d8cc:	1909883a 	add	r4,r3,r4
    d8d0:	20c00003 	ldbu	r3,0(r4)
    d8d4:	10c5c83a 	sub	r2,r2,r3
    d8d8:	f800283a 	ret
    d8dc:	00800604 	movi	r2,24
    d8e0:	00c00204 	movi	r3,8
    d8e4:	003ff606 	br	d8c0 <__alt_data_end+0xfffee4c0>
    d8e8:	00800404 	movi	r2,16
    d8ec:	1007883a 	mov	r3,r2
    d8f0:	003ff306 	br	d8c0 <__alt_data_end+0xfffee4c0>

0000d8f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d8f4:	defffe04 	addi	sp,sp,-8
    d8f8:	dfc00115 	stw	ra,4(sp)
    d8fc:	df000015 	stw	fp,0(sp)
    d900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d904:	d0a00b17 	ldw	r2,-32724(gp)
    d908:	10000326 	beq	r2,zero,d918 <alt_get_errno+0x24>
    d90c:	d0a00b17 	ldw	r2,-32724(gp)
    d910:	103ee83a 	callr	r2
    d914:	00000106 	br	d91c <alt_get_errno+0x28>
    d918:	d0a6d804 	addi	r2,gp,-25760
}
    d91c:	e037883a 	mov	sp,fp
    d920:	dfc00117 	ldw	ra,4(sp)
    d924:	df000017 	ldw	fp,0(sp)
    d928:	dec00204 	addi	sp,sp,8
    d92c:	f800283a 	ret

0000d930 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d930:	defffb04 	addi	sp,sp,-20
    d934:	dfc00415 	stw	ra,16(sp)
    d938:	df000315 	stw	fp,12(sp)
    d93c:	df000304 	addi	fp,sp,12
    d940:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d944:	e0bfff17 	ldw	r2,-4(fp)
    d948:	10000816 	blt	r2,zero,d96c <close+0x3c>
    d94c:	01400304 	movi	r5,12
    d950:	e13fff17 	ldw	r4,-4(fp)
    d954:	000b0280 	call	b028 <__mulsi3>
    d958:	1007883a 	mov	r3,r2
    d95c:	00800074 	movhi	r2,1
    d960:	10830d04 	addi	r2,r2,3124
    d964:	1885883a 	add	r2,r3,r2
    d968:	00000106 	br	d970 <close+0x40>
    d96c:	0005883a 	mov	r2,zero
    d970:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d974:	e0bffd17 	ldw	r2,-12(fp)
    d978:	10001926 	beq	r2,zero,d9e0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d97c:	e0bffd17 	ldw	r2,-12(fp)
    d980:	10800017 	ldw	r2,0(r2)
    d984:	10800417 	ldw	r2,16(r2)
    d988:	10000626 	beq	r2,zero,d9a4 <close+0x74>
    d98c:	e0bffd17 	ldw	r2,-12(fp)
    d990:	10800017 	ldw	r2,0(r2)
    d994:	10800417 	ldw	r2,16(r2)
    d998:	e13ffd17 	ldw	r4,-12(fp)
    d99c:	103ee83a 	callr	r2
    d9a0:	00000106 	br	d9a8 <close+0x78>
    d9a4:	0005883a 	mov	r2,zero
    d9a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d9ac:	e13fff17 	ldw	r4,-4(fp)
    d9b0:	000e2b80 	call	e2b8 <alt_release_fd>
    if (rval < 0)
    d9b4:	e0bffe17 	ldw	r2,-8(fp)
    d9b8:	1000070e 	bge	r2,zero,d9d8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d9bc:	000d8f40 	call	d8f4 <alt_get_errno>
    d9c0:	1007883a 	mov	r3,r2
    d9c4:	e0bffe17 	ldw	r2,-8(fp)
    d9c8:	0085c83a 	sub	r2,zero,r2
    d9cc:	18800015 	stw	r2,0(r3)
      return -1;
    d9d0:	00bfffc4 	movi	r2,-1
    d9d4:	00000706 	br	d9f4 <close+0xc4>
    }
    return 0;
    d9d8:	0005883a 	mov	r2,zero
    d9dc:	00000506 	br	d9f4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d9e0:	000d8f40 	call	d8f4 <alt_get_errno>
    d9e4:	1007883a 	mov	r3,r2
    d9e8:	00801444 	movi	r2,81
    d9ec:	18800015 	stw	r2,0(r3)
    return -1;
    d9f0:	00bfffc4 	movi	r2,-1
  }
}
    d9f4:	e037883a 	mov	sp,fp
    d9f8:	dfc00117 	ldw	ra,4(sp)
    d9fc:	df000017 	ldw	fp,0(sp)
    da00:	dec00204 	addi	sp,sp,8
    da04:	f800283a 	ret

0000da08 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    da08:	defffc04 	addi	sp,sp,-16
    da0c:	df000315 	stw	fp,12(sp)
    da10:	df000304 	addi	fp,sp,12
    da14:	e13ffd15 	stw	r4,-12(fp)
    da18:	e17ffe15 	stw	r5,-8(fp)
    da1c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    da20:	e0bfff17 	ldw	r2,-4(fp)
}
    da24:	e037883a 	mov	sp,fp
    da28:	df000017 	ldw	fp,0(sp)
    da2c:	dec00104 	addi	sp,sp,4
    da30:	f800283a 	ret

0000da34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    da34:	defffe04 	addi	sp,sp,-8
    da38:	dfc00115 	stw	ra,4(sp)
    da3c:	df000015 	stw	fp,0(sp)
    da40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    da44:	d0a00b17 	ldw	r2,-32724(gp)
    da48:	10000326 	beq	r2,zero,da58 <alt_get_errno+0x24>
    da4c:	d0a00b17 	ldw	r2,-32724(gp)
    da50:	103ee83a 	callr	r2
    da54:	00000106 	br	da5c <alt_get_errno+0x28>
    da58:	d0a6d804 	addi	r2,gp,-25760
}
    da5c:	e037883a 	mov	sp,fp
    da60:	dfc00117 	ldw	ra,4(sp)
    da64:	df000017 	ldw	fp,0(sp)
    da68:	dec00204 	addi	sp,sp,8
    da6c:	f800283a 	ret

0000da70 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    da70:	defffb04 	addi	sp,sp,-20
    da74:	dfc00415 	stw	ra,16(sp)
    da78:	df000315 	stw	fp,12(sp)
    da7c:	df000304 	addi	fp,sp,12
    da80:	e13ffe15 	stw	r4,-8(fp)
    da84:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    da88:	e0bffe17 	ldw	r2,-8(fp)
    da8c:	10000816 	blt	r2,zero,dab0 <fstat+0x40>
    da90:	01400304 	movi	r5,12
    da94:	e13ffe17 	ldw	r4,-8(fp)
    da98:	000b0280 	call	b028 <__mulsi3>
    da9c:	1007883a 	mov	r3,r2
    daa0:	00800074 	movhi	r2,1
    daa4:	10830d04 	addi	r2,r2,3124
    daa8:	1885883a 	add	r2,r3,r2
    daac:	00000106 	br	dab4 <fstat+0x44>
    dab0:	0005883a 	mov	r2,zero
    dab4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    dab8:	e0bffd17 	ldw	r2,-12(fp)
    dabc:	10001026 	beq	r2,zero,db00 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    dac0:	e0bffd17 	ldw	r2,-12(fp)
    dac4:	10800017 	ldw	r2,0(r2)
    dac8:	10800817 	ldw	r2,32(r2)
    dacc:	10000726 	beq	r2,zero,daec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    dad0:	e0bffd17 	ldw	r2,-12(fp)
    dad4:	10800017 	ldw	r2,0(r2)
    dad8:	10800817 	ldw	r2,32(r2)
    dadc:	e17fff17 	ldw	r5,-4(fp)
    dae0:	e13ffd17 	ldw	r4,-12(fp)
    dae4:	103ee83a 	callr	r2
    dae8:	00000a06 	br	db14 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    daec:	e0bfff17 	ldw	r2,-4(fp)
    daf0:	00c80004 	movi	r3,8192
    daf4:	10c00115 	stw	r3,4(r2)
      return 0;
    daf8:	0005883a 	mov	r2,zero
    dafc:	00000506 	br	db14 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    db00:	000da340 	call	da34 <alt_get_errno>
    db04:	1007883a 	mov	r3,r2
    db08:	00801444 	movi	r2,81
    db0c:	18800015 	stw	r2,0(r3)
    return -1;
    db10:	00bfffc4 	movi	r2,-1
  }
}
    db14:	e037883a 	mov	sp,fp
    db18:	dfc00117 	ldw	ra,4(sp)
    db1c:	df000017 	ldw	fp,0(sp)
    db20:	dec00204 	addi	sp,sp,8
    db24:	f800283a 	ret

0000db28 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    db28:	defff904 	addi	sp,sp,-28
    db2c:	dfc00615 	stw	ra,24(sp)
    db30:	df000515 	stw	fp,20(sp)
    db34:	df000504 	addi	fp,sp,20
    db38:	e13ffc15 	stw	r4,-16(fp)
    db3c:	e17ffd15 	stw	r5,-12(fp)
    db40:	e1bffe15 	stw	r6,-8(fp)
    db44:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    db48:	e0800217 	ldw	r2,8(fp)
    db4c:	d8800015 	stw	r2,0(sp)
    db50:	e1ffff17 	ldw	r7,-4(fp)
    db54:	e1bffe17 	ldw	r6,-8(fp)
    db58:	e17ffd17 	ldw	r5,-12(fp)
    db5c:	e13ffc17 	ldw	r4,-16(fp)
    db60:	000dcd80 	call	dcd8 <alt_iic_isr_register>
}  
    db64:	e037883a 	mov	sp,fp
    db68:	dfc00117 	ldw	ra,4(sp)
    db6c:	df000017 	ldw	fp,0(sp)
    db70:	dec00204 	addi	sp,sp,8
    db74:	f800283a 	ret

0000db78 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    db78:	defff904 	addi	sp,sp,-28
    db7c:	df000615 	stw	fp,24(sp)
    db80:	df000604 	addi	fp,sp,24
    db84:	e13ffe15 	stw	r4,-8(fp)
    db88:	e17fff15 	stw	r5,-4(fp)
    db8c:	e0bfff17 	ldw	r2,-4(fp)
    db90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db94:	0005303a 	rdctl	r2,status
    db98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db9c:	e0fffb17 	ldw	r3,-20(fp)
    dba0:	00bfff84 	movi	r2,-2
    dba4:	1884703a 	and	r2,r3,r2
    dba8:	1001703a 	wrctl	status,r2
  
  return context;
    dbac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    dbb0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    dbb4:	00c00044 	movi	r3,1
    dbb8:	e0bffa17 	ldw	r2,-24(fp)
    dbbc:	1884983a 	sll	r2,r3,r2
    dbc0:	1007883a 	mov	r3,r2
    dbc4:	d0a6d917 	ldw	r2,-25756(gp)
    dbc8:	1884b03a 	or	r2,r3,r2
    dbcc:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dbd0:	d0a6d917 	ldw	r2,-25756(gp)
    dbd4:	100170fa 	wrctl	ienable,r2
    dbd8:	e0bffc17 	ldw	r2,-16(fp)
    dbdc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dbe0:	e0bffd17 	ldw	r2,-12(fp)
    dbe4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    dbe8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    dbec:	0001883a 	nop
}
    dbf0:	e037883a 	mov	sp,fp
    dbf4:	df000017 	ldw	fp,0(sp)
    dbf8:	dec00104 	addi	sp,sp,4
    dbfc:	f800283a 	ret

0000dc00 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    dc00:	defff904 	addi	sp,sp,-28
    dc04:	df000615 	stw	fp,24(sp)
    dc08:	df000604 	addi	fp,sp,24
    dc0c:	e13ffe15 	stw	r4,-8(fp)
    dc10:	e17fff15 	stw	r5,-4(fp)
    dc14:	e0bfff17 	ldw	r2,-4(fp)
    dc18:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dc1c:	0005303a 	rdctl	r2,status
    dc20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dc24:	e0fffb17 	ldw	r3,-20(fp)
    dc28:	00bfff84 	movi	r2,-2
    dc2c:	1884703a 	and	r2,r3,r2
    dc30:	1001703a 	wrctl	status,r2
  
  return context;
    dc34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    dc38:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    dc3c:	00c00044 	movi	r3,1
    dc40:	e0bffa17 	ldw	r2,-24(fp)
    dc44:	1884983a 	sll	r2,r3,r2
    dc48:	0084303a 	nor	r2,zero,r2
    dc4c:	1007883a 	mov	r3,r2
    dc50:	d0a6d917 	ldw	r2,-25756(gp)
    dc54:	1884703a 	and	r2,r3,r2
    dc58:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dc5c:	d0a6d917 	ldw	r2,-25756(gp)
    dc60:	100170fa 	wrctl	ienable,r2
    dc64:	e0bffc17 	ldw	r2,-16(fp)
    dc68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc6c:	e0bffd17 	ldw	r2,-12(fp)
    dc70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    dc74:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    dc78:	0001883a 	nop
}
    dc7c:	e037883a 	mov	sp,fp
    dc80:	df000017 	ldw	fp,0(sp)
    dc84:	dec00104 	addi	sp,sp,4
    dc88:	f800283a 	ret

0000dc8c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    dc8c:	defffc04 	addi	sp,sp,-16
    dc90:	df000315 	stw	fp,12(sp)
    dc94:	df000304 	addi	fp,sp,12
    dc98:	e13ffe15 	stw	r4,-8(fp)
    dc9c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    dca0:	000530fa 	rdctl	r2,ienable
    dca4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    dca8:	00c00044 	movi	r3,1
    dcac:	e0bfff17 	ldw	r2,-4(fp)
    dcb0:	1884983a 	sll	r2,r3,r2
    dcb4:	1007883a 	mov	r3,r2
    dcb8:	e0bffd17 	ldw	r2,-12(fp)
    dcbc:	1884703a 	and	r2,r3,r2
    dcc0:	1004c03a 	cmpne	r2,r2,zero
    dcc4:	10803fcc 	andi	r2,r2,255
}
    dcc8:	e037883a 	mov	sp,fp
    dccc:	df000017 	ldw	fp,0(sp)
    dcd0:	dec00104 	addi	sp,sp,4
    dcd4:	f800283a 	ret

0000dcd8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    dcd8:	defff504 	addi	sp,sp,-44
    dcdc:	dfc00a15 	stw	ra,40(sp)
    dce0:	df000915 	stw	fp,36(sp)
    dce4:	df000904 	addi	fp,sp,36
    dce8:	e13ffc15 	stw	r4,-16(fp)
    dcec:	e17ffd15 	stw	r5,-12(fp)
    dcf0:	e1bffe15 	stw	r6,-8(fp)
    dcf4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    dcf8:	00bffa84 	movi	r2,-22
    dcfc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    dd00:	e0bffd17 	ldw	r2,-12(fp)
    dd04:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    dd08:	e0bff817 	ldw	r2,-32(fp)
    dd0c:	10800808 	cmpgei	r2,r2,32
    dd10:	1000271e 	bne	r2,zero,ddb0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd14:	0005303a 	rdctl	r2,status
    dd18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd1c:	e0fffb17 	ldw	r3,-20(fp)
    dd20:	00bfff84 	movi	r2,-2
    dd24:	1884703a 	and	r2,r3,r2
    dd28:	1001703a 	wrctl	status,r2
  
  return context;
    dd2c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    dd30:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    dd34:	00800074 	movhi	r2,1
    dd38:	108e6e04 	addi	r2,r2,14776
    dd3c:	e0fff817 	ldw	r3,-32(fp)
    dd40:	180690fa 	slli	r3,r3,3
    dd44:	10c5883a 	add	r2,r2,r3
    dd48:	e0fffe17 	ldw	r3,-8(fp)
    dd4c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    dd50:	00800074 	movhi	r2,1
    dd54:	108e6e04 	addi	r2,r2,14776
    dd58:	e0fff817 	ldw	r3,-32(fp)
    dd5c:	180690fa 	slli	r3,r3,3
    dd60:	10c5883a 	add	r2,r2,r3
    dd64:	10800104 	addi	r2,r2,4
    dd68:	e0ffff17 	ldw	r3,-4(fp)
    dd6c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    dd70:	e0bffe17 	ldw	r2,-8(fp)
    dd74:	10000526 	beq	r2,zero,dd8c <alt_iic_isr_register+0xb4>
    dd78:	e0bff817 	ldw	r2,-32(fp)
    dd7c:	100b883a 	mov	r5,r2
    dd80:	e13ffc17 	ldw	r4,-16(fp)
    dd84:	000db780 	call	db78 <alt_ic_irq_enable>
    dd88:	00000406 	br	dd9c <alt_iic_isr_register+0xc4>
    dd8c:	e0bff817 	ldw	r2,-32(fp)
    dd90:	100b883a 	mov	r5,r2
    dd94:	e13ffc17 	ldw	r4,-16(fp)
    dd98:	000dc000 	call	dc00 <alt_ic_irq_disable>
    dd9c:	e0bff715 	stw	r2,-36(fp)
    dda0:	e0bffa17 	ldw	r2,-24(fp)
    dda4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dda8:	e0bff917 	ldw	r2,-28(fp)
    ddac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    ddb0:	e0bff717 	ldw	r2,-36(fp)
}
    ddb4:	e037883a 	mov	sp,fp
    ddb8:	dfc00117 	ldw	ra,4(sp)
    ddbc:	df000017 	ldw	fp,0(sp)
    ddc0:	dec00204 	addi	sp,sp,8
    ddc4:	f800283a 	ret

0000ddc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ddc8:	defffe04 	addi	sp,sp,-8
    ddcc:	dfc00115 	stw	ra,4(sp)
    ddd0:	df000015 	stw	fp,0(sp)
    ddd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ddd8:	d0a00b17 	ldw	r2,-32724(gp)
    dddc:	10000326 	beq	r2,zero,ddec <alt_get_errno+0x24>
    dde0:	d0a00b17 	ldw	r2,-32724(gp)
    dde4:	103ee83a 	callr	r2
    dde8:	00000106 	br	ddf0 <alt_get_errno+0x28>
    ddec:	d0a6d804 	addi	r2,gp,-25760
}
    ddf0:	e037883a 	mov	sp,fp
    ddf4:	dfc00117 	ldw	ra,4(sp)
    ddf8:	df000017 	ldw	fp,0(sp)
    ddfc:	dec00204 	addi	sp,sp,8
    de00:	f800283a 	ret

0000de04 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    de04:	deffed04 	addi	sp,sp,-76
    de08:	dfc01215 	stw	ra,72(sp)
    de0c:	df001115 	stw	fp,68(sp)
    de10:	df001104 	addi	fp,sp,68
    de14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de18:	e0bfff17 	ldw	r2,-4(fp)
    de1c:	10000816 	blt	r2,zero,de40 <isatty+0x3c>
    de20:	01400304 	movi	r5,12
    de24:	e13fff17 	ldw	r4,-4(fp)
    de28:	000b0280 	call	b028 <__mulsi3>
    de2c:	1007883a 	mov	r3,r2
    de30:	00800074 	movhi	r2,1
    de34:	10830d04 	addi	r2,r2,3124
    de38:	1885883a 	add	r2,r3,r2
    de3c:	00000106 	br	de44 <isatty+0x40>
    de40:	0005883a 	mov	r2,zero
    de44:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    de48:	e0bfef17 	ldw	r2,-68(fp)
    de4c:	10000e26 	beq	r2,zero,de88 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    de50:	e0bfef17 	ldw	r2,-68(fp)
    de54:	10800017 	ldw	r2,0(r2)
    de58:	10800817 	ldw	r2,32(r2)
    de5c:	1000021e 	bne	r2,zero,de68 <isatty+0x64>
    {
      return 1;
    de60:	00800044 	movi	r2,1
    de64:	00000d06 	br	de9c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    de68:	e0bff004 	addi	r2,fp,-64
    de6c:	100b883a 	mov	r5,r2
    de70:	e13fff17 	ldw	r4,-4(fp)
    de74:	000da700 	call	da70 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    de78:	e0bff117 	ldw	r2,-60(fp)
    de7c:	10880020 	cmpeqi	r2,r2,8192
    de80:	10803fcc 	andi	r2,r2,255
    de84:	00000506 	br	de9c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    de88:	000ddc80 	call	ddc8 <alt_get_errno>
    de8c:	1007883a 	mov	r3,r2
    de90:	00801444 	movi	r2,81
    de94:	18800015 	stw	r2,0(r3)
    return 0;
    de98:	0005883a 	mov	r2,zero
  }
}
    de9c:	e037883a 	mov	sp,fp
    dea0:	dfc00117 	ldw	ra,4(sp)
    dea4:	df000017 	ldw	fp,0(sp)
    dea8:	dec00204 	addi	sp,sp,8
    deac:	f800283a 	ret

0000deb0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    deb0:	defffc04 	addi	sp,sp,-16
    deb4:	df000315 	stw	fp,12(sp)
    deb8:	df000304 	addi	fp,sp,12
    debc:	e13ffd15 	stw	r4,-12(fp)
    dec0:	e17ffe15 	stw	r5,-8(fp)
    dec4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    dec8:	e0fffe17 	ldw	r3,-8(fp)
    decc:	e0bffd17 	ldw	r2,-12(fp)
    ded0:	18800c26 	beq	r3,r2,df04 <alt_load_section+0x54>
  {
    while( to != end )
    ded4:	00000806 	br	def8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    ded8:	e0bffe17 	ldw	r2,-8(fp)
    dedc:	10c00104 	addi	r3,r2,4
    dee0:	e0fffe15 	stw	r3,-8(fp)
    dee4:	e0fffd17 	ldw	r3,-12(fp)
    dee8:	19000104 	addi	r4,r3,4
    deec:	e13ffd15 	stw	r4,-12(fp)
    def0:	18c00017 	ldw	r3,0(r3)
    def4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    def8:	e0fffe17 	ldw	r3,-8(fp)
    defc:	e0bfff17 	ldw	r2,-4(fp)
    df00:	18bff51e 	bne	r3,r2,ded8 <__alt_data_end+0xfffeead8>
    {
      *to++ = *from++;
    }
  }
}
    df04:	0001883a 	nop
    df08:	e037883a 	mov	sp,fp
    df0c:	df000017 	ldw	fp,0(sp)
    df10:	dec00104 	addi	sp,sp,4
    df14:	f800283a 	ret

0000df18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    df18:	defffe04 	addi	sp,sp,-8
    df1c:	dfc00115 	stw	ra,4(sp)
    df20:	df000015 	stw	fp,0(sp)
    df24:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    df28:	01800074 	movhi	r6,1
    df2c:	31879504 	addi	r6,r6,7764
    df30:	01400074 	movhi	r5,1
    df34:	2940da04 	addi	r5,r5,872
    df38:	01000074 	movhi	r4,1
    df3c:	21079504 	addi	r4,r4,7764
    df40:	000deb00 	call	deb0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    df44:	01800034 	movhi	r6,0
    df48:	31807004 	addi	r6,r6,448
    df4c:	01400034 	movhi	r5,0
    df50:	29400804 	addi	r5,r5,32
    df54:	01000034 	movhi	r4,0
    df58:	21000804 	addi	r4,r4,32
    df5c:	000deb00 	call	deb0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    df60:	01800074 	movhi	r6,1
    df64:	3180da04 	addi	r6,r6,872
    df68:	01400074 	movhi	r5,1
    df6c:	297ffe04 	addi	r5,r5,-8
    df70:	01000074 	movhi	r4,1
    df74:	213ffe04 	addi	r4,r4,-8
    df78:	000deb00 	call	deb0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    df7c:	000f27c0 	call	f27c <alt_dcache_flush_all>
  alt_icache_flush_all();
    df80:	000f43c0 	call	f43c <alt_icache_flush_all>
}
    df84:	0001883a 	nop
    df88:	e037883a 	mov	sp,fp
    df8c:	dfc00117 	ldw	ra,4(sp)
    df90:	df000017 	ldw	fp,0(sp)
    df94:	dec00204 	addi	sp,sp,8
    df98:	f800283a 	ret

0000df9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    df9c:	defffe04 	addi	sp,sp,-8
    dfa0:	dfc00115 	stw	ra,4(sp)
    dfa4:	df000015 	stw	fp,0(sp)
    dfa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dfac:	d0a00b17 	ldw	r2,-32724(gp)
    dfb0:	10000326 	beq	r2,zero,dfc0 <alt_get_errno+0x24>
    dfb4:	d0a00b17 	ldw	r2,-32724(gp)
    dfb8:	103ee83a 	callr	r2
    dfbc:	00000106 	br	dfc4 <alt_get_errno+0x28>
    dfc0:	d0a6d804 	addi	r2,gp,-25760
}
    dfc4:	e037883a 	mov	sp,fp
    dfc8:	dfc00117 	ldw	ra,4(sp)
    dfcc:	df000017 	ldw	fp,0(sp)
    dfd0:	dec00204 	addi	sp,sp,8
    dfd4:	f800283a 	ret

0000dfd8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    dfd8:	defff904 	addi	sp,sp,-28
    dfdc:	dfc00615 	stw	ra,24(sp)
    dfe0:	df000515 	stw	fp,20(sp)
    dfe4:	df000504 	addi	fp,sp,20
    dfe8:	e13ffd15 	stw	r4,-12(fp)
    dfec:	e17ffe15 	stw	r5,-8(fp)
    dff0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    dff4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dff8:	e0bffd17 	ldw	r2,-12(fp)
    dffc:	10000816 	blt	r2,zero,e020 <lseek+0x48>
    e000:	01400304 	movi	r5,12
    e004:	e13ffd17 	ldw	r4,-12(fp)
    e008:	000b0280 	call	b028 <__mulsi3>
    e00c:	1007883a 	mov	r3,r2
    e010:	00800074 	movhi	r2,1
    e014:	10830d04 	addi	r2,r2,3124
    e018:	1885883a 	add	r2,r3,r2
    e01c:	00000106 	br	e024 <lseek+0x4c>
    e020:	0005883a 	mov	r2,zero
    e024:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e028:	e0bffc17 	ldw	r2,-16(fp)
    e02c:	10001026 	beq	r2,zero,e070 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e030:	e0bffc17 	ldw	r2,-16(fp)
    e034:	10800017 	ldw	r2,0(r2)
    e038:	10800717 	ldw	r2,28(r2)
    e03c:	10000926 	beq	r2,zero,e064 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e040:	e0bffc17 	ldw	r2,-16(fp)
    e044:	10800017 	ldw	r2,0(r2)
    e048:	10800717 	ldw	r2,28(r2)
    e04c:	e1bfff17 	ldw	r6,-4(fp)
    e050:	e17ffe17 	ldw	r5,-8(fp)
    e054:	e13ffc17 	ldw	r4,-16(fp)
    e058:	103ee83a 	callr	r2
    e05c:	e0bffb15 	stw	r2,-20(fp)
    e060:	00000506 	br	e078 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e064:	00bfde84 	movi	r2,-134
    e068:	e0bffb15 	stw	r2,-20(fp)
    e06c:	00000206 	br	e078 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    e070:	00bfebc4 	movi	r2,-81
    e074:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e078:	e0bffb17 	ldw	r2,-20(fp)
    e07c:	1000070e 	bge	r2,zero,e09c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    e080:	000df9c0 	call	df9c <alt_get_errno>
    e084:	1007883a 	mov	r3,r2
    e088:	e0bffb17 	ldw	r2,-20(fp)
    e08c:	0085c83a 	sub	r2,zero,r2
    e090:	18800015 	stw	r2,0(r3)
    rc = -1;
    e094:	00bfffc4 	movi	r2,-1
    e098:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e09c:	e0bffb17 	ldw	r2,-20(fp)
}
    e0a0:	e037883a 	mov	sp,fp
    e0a4:	dfc00117 	ldw	ra,4(sp)
    e0a8:	df000017 	ldw	fp,0(sp)
    e0ac:	dec00204 	addi	sp,sp,8
    e0b0:	f800283a 	ret

0000e0b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e0b4:	defffd04 	addi	sp,sp,-12
    e0b8:	dfc00215 	stw	ra,8(sp)
    e0bc:	df000115 	stw	fp,4(sp)
    e0c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e0c4:	0009883a 	mov	r4,zero
    e0c8:	000e55c0 	call	e55c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e0cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e0d0:	000e5940 	call	e594 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e0d4:	01800074 	movhi	r6,1
    e0d8:	3180d004 	addi	r6,r6,832
    e0dc:	01400074 	movhi	r5,1
    e0e0:	2940d004 	addi	r5,r5,832
    e0e4:	01000074 	movhi	r4,1
    e0e8:	2100d004 	addi	r4,r4,832
    e0ec:	000f5400 	call	f540 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e0f0:	000f37c0 	call	f37c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e0f4:	01000074 	movhi	r4,1
    e0f8:	213cf704 	addi	r4,r4,-3108
    e0fc:	000fc640 	call	fc64 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e100:	d0a6da17 	ldw	r2,-25752(gp)
    e104:	d0e6db17 	ldw	r3,-25748(gp)
    e108:	d126dc17 	ldw	r4,-25744(gp)
    e10c:	200d883a 	mov	r6,r4
    e110:	180b883a 	mov	r5,r3
    e114:	1009883a 	mov	r4,r2
    e118:	00009980 	call	998 <main>
    e11c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e120:	01000044 	movi	r4,1
    e124:	000d9300 	call	d930 <close>
  exit (result);
    e128:	e13fff17 	ldw	r4,-4(fp)
    e12c:	000fc780 	call	fc78 <exit>

0000e130 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e130:	defffe04 	addi	sp,sp,-8
    e134:	df000115 	stw	fp,4(sp)
    e138:	df000104 	addi	fp,sp,4
    e13c:	e13fff15 	stw	r4,-4(fp)
}
    e140:	0001883a 	nop
    e144:	e037883a 	mov	sp,fp
    e148:	df000017 	ldw	fp,0(sp)
    e14c:	dec00104 	addi	sp,sp,4
    e150:	f800283a 	ret

0000e154 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e154:	defffe04 	addi	sp,sp,-8
    e158:	df000115 	stw	fp,4(sp)
    e15c:	df000104 	addi	fp,sp,4
    e160:	e13fff15 	stw	r4,-4(fp)
}
    e164:	0001883a 	nop
    e168:	e037883a 	mov	sp,fp
    e16c:	df000017 	ldw	fp,0(sp)
    e170:	dec00104 	addi	sp,sp,4
    e174:	f800283a 	ret

0000e178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e178:	defffe04 	addi	sp,sp,-8
    e17c:	dfc00115 	stw	ra,4(sp)
    e180:	df000015 	stw	fp,0(sp)
    e184:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e188:	d0a00b17 	ldw	r2,-32724(gp)
    e18c:	10000326 	beq	r2,zero,e19c <alt_get_errno+0x24>
    e190:	d0a00b17 	ldw	r2,-32724(gp)
    e194:	103ee83a 	callr	r2
    e198:	00000106 	br	e1a0 <alt_get_errno+0x28>
    e19c:	d0a6d804 	addi	r2,gp,-25760
}
    e1a0:	e037883a 	mov	sp,fp
    e1a4:	dfc00117 	ldw	ra,4(sp)
    e1a8:	df000017 	ldw	fp,0(sp)
    e1ac:	dec00204 	addi	sp,sp,8
    e1b0:	f800283a 	ret

0000e1b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e1b4:	defff904 	addi	sp,sp,-28
    e1b8:	dfc00615 	stw	ra,24(sp)
    e1bc:	df000515 	stw	fp,20(sp)
    e1c0:	df000504 	addi	fp,sp,20
    e1c4:	e13ffd15 	stw	r4,-12(fp)
    e1c8:	e17ffe15 	stw	r5,-8(fp)
    e1cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e1d0:	e0bffd17 	ldw	r2,-12(fp)
    e1d4:	10000816 	blt	r2,zero,e1f8 <read+0x44>
    e1d8:	01400304 	movi	r5,12
    e1dc:	e13ffd17 	ldw	r4,-12(fp)
    e1e0:	000b0280 	call	b028 <__mulsi3>
    e1e4:	1007883a 	mov	r3,r2
    e1e8:	00800074 	movhi	r2,1
    e1ec:	10830d04 	addi	r2,r2,3124
    e1f0:	1885883a 	add	r2,r3,r2
    e1f4:	00000106 	br	e1fc <read+0x48>
    e1f8:	0005883a 	mov	r2,zero
    e1fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e200:	e0bffb17 	ldw	r2,-20(fp)
    e204:	10002226 	beq	r2,zero,e290 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e208:	e0bffb17 	ldw	r2,-20(fp)
    e20c:	10800217 	ldw	r2,8(r2)
    e210:	108000cc 	andi	r2,r2,3
    e214:	10800060 	cmpeqi	r2,r2,1
    e218:	1000181e 	bne	r2,zero,e27c <read+0xc8>
        (fd->dev->read))
    e21c:	e0bffb17 	ldw	r2,-20(fp)
    e220:	10800017 	ldw	r2,0(r2)
    e224:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e228:	10001426 	beq	r2,zero,e27c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e22c:	e0bffb17 	ldw	r2,-20(fp)
    e230:	10800017 	ldw	r2,0(r2)
    e234:	10800517 	ldw	r2,20(r2)
    e238:	e0ffff17 	ldw	r3,-4(fp)
    e23c:	180d883a 	mov	r6,r3
    e240:	e17ffe17 	ldw	r5,-8(fp)
    e244:	e13ffb17 	ldw	r4,-20(fp)
    e248:	103ee83a 	callr	r2
    e24c:	e0bffc15 	stw	r2,-16(fp)
    e250:	e0bffc17 	ldw	r2,-16(fp)
    e254:	1000070e 	bge	r2,zero,e274 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    e258:	000e1780 	call	e178 <alt_get_errno>
    e25c:	1007883a 	mov	r3,r2
    e260:	e0bffc17 	ldw	r2,-16(fp)
    e264:	0085c83a 	sub	r2,zero,r2
    e268:	18800015 	stw	r2,0(r3)
          return -1;
    e26c:	00bfffc4 	movi	r2,-1
    e270:	00000c06 	br	e2a4 <read+0xf0>
        }
        return rval;
    e274:	e0bffc17 	ldw	r2,-16(fp)
    e278:	00000a06 	br	e2a4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e27c:	000e1780 	call	e178 <alt_get_errno>
    e280:	1007883a 	mov	r3,r2
    e284:	00800344 	movi	r2,13
    e288:	18800015 	stw	r2,0(r3)
    e28c:	00000406 	br	e2a0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e290:	000e1780 	call	e178 <alt_get_errno>
    e294:	1007883a 	mov	r3,r2
    e298:	00801444 	movi	r2,81
    e29c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e2a0:	00bfffc4 	movi	r2,-1
}
    e2a4:	e037883a 	mov	sp,fp
    e2a8:	dfc00117 	ldw	ra,4(sp)
    e2ac:	df000017 	ldw	fp,0(sp)
    e2b0:	dec00204 	addi	sp,sp,8
    e2b4:	f800283a 	ret

0000e2b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e2b8:	defffc04 	addi	sp,sp,-16
    e2bc:	dfc00315 	stw	ra,12(sp)
    e2c0:	df000215 	stw	fp,8(sp)
    e2c4:	dc000115 	stw	r16,4(sp)
    e2c8:	df000204 	addi	fp,sp,8
    e2cc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    e2d0:	e0bffe17 	ldw	r2,-8(fp)
    e2d4:	108000d0 	cmplti	r2,r2,3
    e2d8:	1000111e 	bne	r2,zero,e320 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    e2dc:	04000074 	movhi	r16,1
    e2e0:	84030d04 	addi	r16,r16,3124
    e2e4:	e0bffe17 	ldw	r2,-8(fp)
    e2e8:	01400304 	movi	r5,12
    e2ec:	1009883a 	mov	r4,r2
    e2f0:	000b0280 	call	b028 <__mulsi3>
    e2f4:	8085883a 	add	r2,r16,r2
    e2f8:	10800204 	addi	r2,r2,8
    e2fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e300:	04000074 	movhi	r16,1
    e304:	84030d04 	addi	r16,r16,3124
    e308:	e0bffe17 	ldw	r2,-8(fp)
    e30c:	01400304 	movi	r5,12
    e310:	1009883a 	mov	r4,r2
    e314:	000b0280 	call	b028 <__mulsi3>
    e318:	8085883a 	add	r2,r16,r2
    e31c:	10000015 	stw	zero,0(r2)
  }
}
    e320:	0001883a 	nop
    e324:	e6ffff04 	addi	sp,fp,-4
    e328:	dfc00217 	ldw	ra,8(sp)
    e32c:	df000117 	ldw	fp,4(sp)
    e330:	dc000017 	ldw	r16,0(sp)
    e334:	dec00304 	addi	sp,sp,12
    e338:	f800283a 	ret

0000e33c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e33c:	defff904 	addi	sp,sp,-28
    e340:	df000615 	stw	fp,24(sp)
    e344:	df000604 	addi	fp,sp,24
    e348:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e34c:	0005303a 	rdctl	r2,status
    e350:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e354:	e0fffe17 	ldw	r3,-8(fp)
    e358:	00bfff84 	movi	r2,-2
    e35c:	1884703a 	and	r2,r3,r2
    e360:	1001703a 	wrctl	status,r2
  
  return context;
    e364:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e368:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e36c:	d0a00d17 	ldw	r2,-32716(gp)
    e370:	10c000c4 	addi	r3,r2,3
    e374:	00bfff04 	movi	r2,-4
    e378:	1884703a 	and	r2,r3,r2
    e37c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e380:	d0e00d17 	ldw	r3,-32716(gp)
    e384:	e0bfff17 	ldw	r2,-4(fp)
    e388:	1887883a 	add	r3,r3,r2
    e38c:	008000b4 	movhi	r2,2
    e390:	10bd0004 	addi	r2,r2,-3072
    e394:	10c0062e 	bgeu	r2,r3,e3b0 <sbrk+0x74>
    e398:	e0bffb17 	ldw	r2,-20(fp)
    e39c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e3a0:	e0bffa17 	ldw	r2,-24(fp)
    e3a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e3a8:	00bfffc4 	movi	r2,-1
    e3ac:	00000b06 	br	e3dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e3b0:	d0a00d17 	ldw	r2,-32716(gp)
    e3b4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e3b8:	d0e00d17 	ldw	r3,-32716(gp)
    e3bc:	e0bfff17 	ldw	r2,-4(fp)
    e3c0:	1885883a 	add	r2,r3,r2
    e3c4:	d0a00d15 	stw	r2,-32716(gp)
    e3c8:	e0bffb17 	ldw	r2,-20(fp)
    e3cc:	e0bffc15 	stw	r2,-16(fp)
    e3d0:	e0bffc17 	ldw	r2,-16(fp)
    e3d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e3d8:	e0bffd17 	ldw	r2,-12(fp)
} 
    e3dc:	e037883a 	mov	sp,fp
    e3e0:	df000017 	ldw	fp,0(sp)
    e3e4:	dec00104 	addi	sp,sp,4
    e3e8:	f800283a 	ret

0000e3ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e3ec:	defffe04 	addi	sp,sp,-8
    e3f0:	dfc00115 	stw	ra,4(sp)
    e3f4:	df000015 	stw	fp,0(sp)
    e3f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e3fc:	d0a00b17 	ldw	r2,-32724(gp)
    e400:	10000326 	beq	r2,zero,e410 <alt_get_errno+0x24>
    e404:	d0a00b17 	ldw	r2,-32724(gp)
    e408:	103ee83a 	callr	r2
    e40c:	00000106 	br	e414 <alt_get_errno+0x28>
    e410:	d0a6d804 	addi	r2,gp,-25760
}
    e414:	e037883a 	mov	sp,fp
    e418:	dfc00117 	ldw	ra,4(sp)
    e41c:	df000017 	ldw	fp,0(sp)
    e420:	dec00204 	addi	sp,sp,8
    e424:	f800283a 	ret

0000e428 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e428:	defff904 	addi	sp,sp,-28
    e42c:	dfc00615 	stw	ra,24(sp)
    e430:	df000515 	stw	fp,20(sp)
    e434:	df000504 	addi	fp,sp,20
    e438:	e13ffd15 	stw	r4,-12(fp)
    e43c:	e17ffe15 	stw	r5,-8(fp)
    e440:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e444:	e0bffd17 	ldw	r2,-12(fp)
    e448:	10000816 	blt	r2,zero,e46c <write+0x44>
    e44c:	01400304 	movi	r5,12
    e450:	e13ffd17 	ldw	r4,-12(fp)
    e454:	000b0280 	call	b028 <__mulsi3>
    e458:	1007883a 	mov	r3,r2
    e45c:	00800074 	movhi	r2,1
    e460:	10830d04 	addi	r2,r2,3124
    e464:	1885883a 	add	r2,r3,r2
    e468:	00000106 	br	e470 <write+0x48>
    e46c:	0005883a 	mov	r2,zero
    e470:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e474:	e0bffb17 	ldw	r2,-20(fp)
    e478:	10002126 	beq	r2,zero,e500 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e47c:	e0bffb17 	ldw	r2,-20(fp)
    e480:	10800217 	ldw	r2,8(r2)
    e484:	108000cc 	andi	r2,r2,3
    e488:	10001826 	beq	r2,zero,e4ec <write+0xc4>
    e48c:	e0bffb17 	ldw	r2,-20(fp)
    e490:	10800017 	ldw	r2,0(r2)
    e494:	10800617 	ldw	r2,24(r2)
    e498:	10001426 	beq	r2,zero,e4ec <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e49c:	e0bffb17 	ldw	r2,-20(fp)
    e4a0:	10800017 	ldw	r2,0(r2)
    e4a4:	10800617 	ldw	r2,24(r2)
    e4a8:	e0ffff17 	ldw	r3,-4(fp)
    e4ac:	180d883a 	mov	r6,r3
    e4b0:	e17ffe17 	ldw	r5,-8(fp)
    e4b4:	e13ffb17 	ldw	r4,-20(fp)
    e4b8:	103ee83a 	callr	r2
    e4bc:	e0bffc15 	stw	r2,-16(fp)
    e4c0:	e0bffc17 	ldw	r2,-16(fp)
    e4c4:	1000070e 	bge	r2,zero,e4e4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e4c8:	000e3ec0 	call	e3ec <alt_get_errno>
    e4cc:	1007883a 	mov	r3,r2
    e4d0:	e0bffc17 	ldw	r2,-16(fp)
    e4d4:	0085c83a 	sub	r2,zero,r2
    e4d8:	18800015 	stw	r2,0(r3)
        return -1;
    e4dc:	00bfffc4 	movi	r2,-1
    e4e0:	00000c06 	br	e514 <write+0xec>
      }
      return rval;
    e4e4:	e0bffc17 	ldw	r2,-16(fp)
    e4e8:	00000a06 	br	e514 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e4ec:	000e3ec0 	call	e3ec <alt_get_errno>
    e4f0:	1007883a 	mov	r3,r2
    e4f4:	00800344 	movi	r2,13
    e4f8:	18800015 	stw	r2,0(r3)
    e4fc:	00000406 	br	e510 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e500:	000e3ec0 	call	e3ec <alt_get_errno>
    e504:	1007883a 	mov	r3,r2
    e508:	00801444 	movi	r2,81
    e50c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e510:	00bfffc4 	movi	r2,-1
}
    e514:	e037883a 	mov	sp,fp
    e518:	dfc00117 	ldw	ra,4(sp)
    e51c:	df000017 	ldw	fp,0(sp)
    e520:	dec00204 	addi	sp,sp,8
    e524:	f800283a 	ret

0000e528 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e528:	defffd04 	addi	sp,sp,-12
    e52c:	dfc00215 	stw	ra,8(sp)
    e530:	df000115 	stw	fp,4(sp)
    e534:	df000104 	addi	fp,sp,4
    e538:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e53c:	d1600804 	addi	r5,gp,-32736
    e540:	e13fff17 	ldw	r4,-4(fp)
    e544:	000f2d80 	call	f2d8 <alt_dev_llist_insert>
}
    e548:	e037883a 	mov	sp,fp
    e54c:	dfc00117 	ldw	ra,4(sp)
    e550:	df000017 	ldw	fp,0(sp)
    e554:	dec00204 	addi	sp,sp,8
    e558:	f800283a 	ret

0000e55c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e55c:	defffd04 	addi	sp,sp,-12
    e560:	dfc00215 	stw	ra,8(sp)
    e564:	df000115 	stw	fp,4(sp)
    e568:	df000104 	addi	fp,sp,4
    e56c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    e570:	000f9e40 	call	f9e4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e574:	00800044 	movi	r2,1
    e578:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e57c:	0001883a 	nop
    e580:	e037883a 	mov	sp,fp
    e584:	dfc00117 	ldw	ra,4(sp)
    e588:	df000017 	ldw	fp,0(sp)
    e58c:	dec00204 	addi	sp,sp,8
    e590:	f800283a 	ret

0000e594 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e594:	defffe04 	addi	sp,sp,-8
    e598:	dfc00115 	stw	ra,4(sp)
    e59c:	df000015 	stw	fp,0(sp)
    e5a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    e5a4:	01c0fa04 	movi	r7,1000
    e5a8:	01800104 	movi	r6,4
    e5ac:	000b883a 	mov	r5,zero
    e5b0:	010000b4 	movhi	r4,2
    e5b4:	21040004 	addi	r4,r4,4096
    e5b8:	000f0d40 	call	f0d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e5bc:	01800144 	movi	r6,5
    e5c0:	000b883a 	mov	r5,zero
    e5c4:	01000074 	movhi	r4,1
    e5c8:	21037704 	addi	r4,r4,3548
    e5cc:	000e7580 	call	e758 <altera_avalon_jtag_uart_init>
    e5d0:	01000074 	movhi	r4,1
    e5d4:	21036d04 	addi	r4,r4,3508
    e5d8:	000e5280 	call	e528 <alt_dev_reg>
}
    e5dc:	0001883a 	nop
    e5e0:	e037883a 	mov	sp,fp
    e5e4:	dfc00117 	ldw	ra,4(sp)
    e5e8:	df000017 	ldw	fp,0(sp)
    e5ec:	dec00204 	addi	sp,sp,8
    e5f0:	f800283a 	ret

0000e5f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e5f4:	defffa04 	addi	sp,sp,-24
    e5f8:	dfc00515 	stw	ra,20(sp)
    e5fc:	df000415 	stw	fp,16(sp)
    e600:	df000404 	addi	fp,sp,16
    e604:	e13ffd15 	stw	r4,-12(fp)
    e608:	e17ffe15 	stw	r5,-8(fp)
    e60c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e610:	e0bffd17 	ldw	r2,-12(fp)
    e614:	10800017 	ldw	r2,0(r2)
    e618:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e61c:	e0bffc17 	ldw	r2,-16(fp)
    e620:	10c00a04 	addi	r3,r2,40
    e624:	e0bffd17 	ldw	r2,-12(fp)
    e628:	10800217 	ldw	r2,8(r2)
    e62c:	100f883a 	mov	r7,r2
    e630:	e1bfff17 	ldw	r6,-4(fp)
    e634:	e17ffe17 	ldw	r5,-8(fp)
    e638:	1809883a 	mov	r4,r3
    e63c:	000ec1c0 	call	ec1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e640:	e037883a 	mov	sp,fp
    e644:	dfc00117 	ldw	ra,4(sp)
    e648:	df000017 	ldw	fp,0(sp)
    e64c:	dec00204 	addi	sp,sp,8
    e650:	f800283a 	ret

0000e654 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e654:	defffa04 	addi	sp,sp,-24
    e658:	dfc00515 	stw	ra,20(sp)
    e65c:	df000415 	stw	fp,16(sp)
    e660:	df000404 	addi	fp,sp,16
    e664:	e13ffd15 	stw	r4,-12(fp)
    e668:	e17ffe15 	stw	r5,-8(fp)
    e66c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e670:	e0bffd17 	ldw	r2,-12(fp)
    e674:	10800017 	ldw	r2,0(r2)
    e678:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e67c:	e0bffc17 	ldw	r2,-16(fp)
    e680:	10c00a04 	addi	r3,r2,40
    e684:	e0bffd17 	ldw	r2,-12(fp)
    e688:	10800217 	ldw	r2,8(r2)
    e68c:	100f883a 	mov	r7,r2
    e690:	e1bfff17 	ldw	r6,-4(fp)
    e694:	e17ffe17 	ldw	r5,-8(fp)
    e698:	1809883a 	mov	r4,r3
    e69c:	000ee380 	call	ee38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e6a0:	e037883a 	mov	sp,fp
    e6a4:	dfc00117 	ldw	ra,4(sp)
    e6a8:	df000017 	ldw	fp,0(sp)
    e6ac:	dec00204 	addi	sp,sp,8
    e6b0:	f800283a 	ret

0000e6b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e6b4:	defffc04 	addi	sp,sp,-16
    e6b8:	dfc00315 	stw	ra,12(sp)
    e6bc:	df000215 	stw	fp,8(sp)
    e6c0:	df000204 	addi	fp,sp,8
    e6c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e6c8:	e0bfff17 	ldw	r2,-4(fp)
    e6cc:	10800017 	ldw	r2,0(r2)
    e6d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e6d4:	e0bffe17 	ldw	r2,-8(fp)
    e6d8:	10c00a04 	addi	r3,r2,40
    e6dc:	e0bfff17 	ldw	r2,-4(fp)
    e6e0:	10800217 	ldw	r2,8(r2)
    e6e4:	100b883a 	mov	r5,r2
    e6e8:	1809883a 	mov	r4,r3
    e6ec:	000eac40 	call	eac4 <altera_avalon_jtag_uart_close>
}
    e6f0:	e037883a 	mov	sp,fp
    e6f4:	dfc00117 	ldw	ra,4(sp)
    e6f8:	df000017 	ldw	fp,0(sp)
    e6fc:	dec00204 	addi	sp,sp,8
    e700:	f800283a 	ret

0000e704 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e704:	defffa04 	addi	sp,sp,-24
    e708:	dfc00515 	stw	ra,20(sp)
    e70c:	df000415 	stw	fp,16(sp)
    e710:	df000404 	addi	fp,sp,16
    e714:	e13ffd15 	stw	r4,-12(fp)
    e718:	e17ffe15 	stw	r5,-8(fp)
    e71c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e720:	e0bffd17 	ldw	r2,-12(fp)
    e724:	10800017 	ldw	r2,0(r2)
    e728:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e72c:	e0bffc17 	ldw	r2,-16(fp)
    e730:	10800a04 	addi	r2,r2,40
    e734:	e1bfff17 	ldw	r6,-4(fp)
    e738:	e17ffe17 	ldw	r5,-8(fp)
    e73c:	1009883a 	mov	r4,r2
    e740:	000eb2c0 	call	eb2c <altera_avalon_jtag_uart_ioctl>
}
    e744:	e037883a 	mov	sp,fp
    e748:	dfc00117 	ldw	ra,4(sp)
    e74c:	df000017 	ldw	fp,0(sp)
    e750:	dec00204 	addi	sp,sp,8
    e754:	f800283a 	ret

0000e758 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e758:	defffa04 	addi	sp,sp,-24
    e75c:	dfc00515 	stw	ra,20(sp)
    e760:	df000415 	stw	fp,16(sp)
    e764:	df000404 	addi	fp,sp,16
    e768:	e13ffd15 	stw	r4,-12(fp)
    e76c:	e17ffe15 	stw	r5,-8(fp)
    e770:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e774:	e0bffd17 	ldw	r2,-12(fp)
    e778:	00c00044 	movi	r3,1
    e77c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e780:	e0bffd17 	ldw	r2,-12(fp)
    e784:	10800017 	ldw	r2,0(r2)
    e788:	10800104 	addi	r2,r2,4
    e78c:	1007883a 	mov	r3,r2
    e790:	e0bffd17 	ldw	r2,-12(fp)
    e794:	10800817 	ldw	r2,32(r2)
    e798:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e79c:	e0bffe17 	ldw	r2,-8(fp)
    e7a0:	e0ffff17 	ldw	r3,-4(fp)
    e7a4:	d8000015 	stw	zero,0(sp)
    e7a8:	e1fffd17 	ldw	r7,-12(fp)
    e7ac:	01800074 	movhi	r6,1
    e7b0:	31ba0604 	addi	r6,r6,-6120
    e7b4:	180b883a 	mov	r5,r3
    e7b8:	1009883a 	mov	r4,r2
    e7bc:	000db280 	call	db28 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e7c0:	e0bffd17 	ldw	r2,-12(fp)
    e7c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e7c8:	e0bffd17 	ldw	r2,-12(fp)
    e7cc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e7d0:	d0e6dd17 	ldw	r3,-25740(gp)
    e7d4:	e1fffd17 	ldw	r7,-12(fp)
    e7d8:	01800074 	movhi	r6,1
    e7dc:	31ba8904 	addi	r6,r6,-5596
    e7e0:	180b883a 	mov	r5,r3
    e7e4:	1009883a 	mov	r4,r2
    e7e8:	000f1500 	call	f150 <alt_alarm_start>
    e7ec:	1000040e 	bge	r2,zero,e800 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e7f0:	e0fffd17 	ldw	r3,-12(fp)
    e7f4:	00a00034 	movhi	r2,32768
    e7f8:	10bfffc4 	addi	r2,r2,-1
    e7fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e800:	0001883a 	nop
    e804:	e037883a 	mov	sp,fp
    e808:	dfc00117 	ldw	ra,4(sp)
    e80c:	df000017 	ldw	fp,0(sp)
    e810:	dec00204 	addi	sp,sp,8
    e814:	f800283a 	ret

0000e818 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e818:	defff804 	addi	sp,sp,-32
    e81c:	df000715 	stw	fp,28(sp)
    e820:	df000704 	addi	fp,sp,28
    e824:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e828:	e0bfff17 	ldw	r2,-4(fp)
    e82c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e830:	e0bffb17 	ldw	r2,-20(fp)
    e834:	10800017 	ldw	r2,0(r2)
    e838:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e83c:	e0bffc17 	ldw	r2,-16(fp)
    e840:	10800104 	addi	r2,r2,4
    e844:	10800037 	ldwio	r2,0(r2)
    e848:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e84c:	e0bffd17 	ldw	r2,-12(fp)
    e850:	1080c00c 	andi	r2,r2,768
    e854:	10006d26 	beq	r2,zero,ea0c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e858:	e0bffd17 	ldw	r2,-12(fp)
    e85c:	1080400c 	andi	r2,r2,256
    e860:	10003526 	beq	r2,zero,e938 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e864:	00800074 	movhi	r2,1
    e868:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e86c:	e0bffb17 	ldw	r2,-20(fp)
    e870:	10800a17 	ldw	r2,40(r2)
    e874:	10800044 	addi	r2,r2,1
    e878:	1081ffcc 	andi	r2,r2,2047
    e87c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e880:	e0bffb17 	ldw	r2,-20(fp)
    e884:	10c00b17 	ldw	r3,44(r2)
    e888:	e0bffe17 	ldw	r2,-8(fp)
    e88c:	18801526 	beq	r3,r2,e8e4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e890:	e0bffc17 	ldw	r2,-16(fp)
    e894:	10800037 	ldwio	r2,0(r2)
    e898:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e89c:	e0bff917 	ldw	r2,-28(fp)
    e8a0:	10a0000c 	andi	r2,r2,32768
    e8a4:	10001126 	beq	r2,zero,e8ec <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e8a8:	e0bffb17 	ldw	r2,-20(fp)
    e8ac:	10800a17 	ldw	r2,40(r2)
    e8b0:	e0fff917 	ldw	r3,-28(fp)
    e8b4:	1809883a 	mov	r4,r3
    e8b8:	e0fffb17 	ldw	r3,-20(fp)
    e8bc:	1885883a 	add	r2,r3,r2
    e8c0:	10800e04 	addi	r2,r2,56
    e8c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e8c8:	e0bffb17 	ldw	r2,-20(fp)
    e8cc:	10800a17 	ldw	r2,40(r2)
    e8d0:	10800044 	addi	r2,r2,1
    e8d4:	10c1ffcc 	andi	r3,r2,2047
    e8d8:	e0bffb17 	ldw	r2,-20(fp)
    e8dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e8e0:	003fe206 	br	e86c <__alt_data_end+0xfffef46c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e8e4:	0001883a 	nop
    e8e8:	00000106 	br	e8f0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e8ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e8f0:	e0bff917 	ldw	r2,-28(fp)
    e8f4:	10bfffec 	andhi	r2,r2,65535
    e8f8:	10000f26 	beq	r2,zero,e938 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e8fc:	e0bffb17 	ldw	r2,-20(fp)
    e900:	10c00817 	ldw	r3,32(r2)
    e904:	00bfff84 	movi	r2,-2
    e908:	1886703a 	and	r3,r3,r2
    e90c:	e0bffb17 	ldw	r2,-20(fp)
    e910:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e914:	e0bffc17 	ldw	r2,-16(fp)
    e918:	10800104 	addi	r2,r2,4
    e91c:	1007883a 	mov	r3,r2
    e920:	e0bffb17 	ldw	r2,-20(fp)
    e924:	10800817 	ldw	r2,32(r2)
    e928:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e92c:	e0bffc17 	ldw	r2,-16(fp)
    e930:	10800104 	addi	r2,r2,4
    e934:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e938:	e0bffd17 	ldw	r2,-12(fp)
    e93c:	1080800c 	andi	r2,r2,512
    e940:	103fbe26 	beq	r2,zero,e83c <__alt_data_end+0xfffef43c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e944:	e0bffd17 	ldw	r2,-12(fp)
    e948:	1004d43a 	srli	r2,r2,16
    e94c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e950:	00001406 	br	e9a4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e954:	e0bffc17 	ldw	r2,-16(fp)
    e958:	e0fffb17 	ldw	r3,-20(fp)
    e95c:	18c00d17 	ldw	r3,52(r3)
    e960:	e13ffb17 	ldw	r4,-20(fp)
    e964:	20c7883a 	add	r3,r4,r3
    e968:	18c20e04 	addi	r3,r3,2104
    e96c:	18c00003 	ldbu	r3,0(r3)
    e970:	18c03fcc 	andi	r3,r3,255
    e974:	18c0201c 	xori	r3,r3,128
    e978:	18ffe004 	addi	r3,r3,-128
    e97c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e980:	e0bffb17 	ldw	r2,-20(fp)
    e984:	10800d17 	ldw	r2,52(r2)
    e988:	10800044 	addi	r2,r2,1
    e98c:	10c1ffcc 	andi	r3,r2,2047
    e990:	e0bffb17 	ldw	r2,-20(fp)
    e994:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e998:	e0bffa17 	ldw	r2,-24(fp)
    e99c:	10bfffc4 	addi	r2,r2,-1
    e9a0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e9a4:	e0bffa17 	ldw	r2,-24(fp)
    e9a8:	10000526 	beq	r2,zero,e9c0 <altera_avalon_jtag_uart_irq+0x1a8>
    e9ac:	e0bffb17 	ldw	r2,-20(fp)
    e9b0:	10c00d17 	ldw	r3,52(r2)
    e9b4:	e0bffb17 	ldw	r2,-20(fp)
    e9b8:	10800c17 	ldw	r2,48(r2)
    e9bc:	18bfe51e 	bne	r3,r2,e954 <__alt_data_end+0xfffef554>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e9c0:	e0bffa17 	ldw	r2,-24(fp)
    e9c4:	103f9d26 	beq	r2,zero,e83c <__alt_data_end+0xfffef43c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e9c8:	e0bffb17 	ldw	r2,-20(fp)
    e9cc:	10c00817 	ldw	r3,32(r2)
    e9d0:	00bfff44 	movi	r2,-3
    e9d4:	1886703a 	and	r3,r3,r2
    e9d8:	e0bffb17 	ldw	r2,-20(fp)
    e9dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e9e0:	e0bffb17 	ldw	r2,-20(fp)
    e9e4:	10800017 	ldw	r2,0(r2)
    e9e8:	10800104 	addi	r2,r2,4
    e9ec:	1007883a 	mov	r3,r2
    e9f0:	e0bffb17 	ldw	r2,-20(fp)
    e9f4:	10800817 	ldw	r2,32(r2)
    e9f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e9fc:	e0bffc17 	ldw	r2,-16(fp)
    ea00:	10800104 	addi	r2,r2,4
    ea04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ea08:	003f8c06 	br	e83c <__alt_data_end+0xfffef43c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    ea0c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    ea10:	0001883a 	nop
    ea14:	e037883a 	mov	sp,fp
    ea18:	df000017 	ldw	fp,0(sp)
    ea1c:	dec00104 	addi	sp,sp,4
    ea20:	f800283a 	ret

0000ea24 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ea24:	defff804 	addi	sp,sp,-32
    ea28:	df000715 	stw	fp,28(sp)
    ea2c:	df000704 	addi	fp,sp,28
    ea30:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ea34:	e0bffb17 	ldw	r2,-20(fp)
    ea38:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ea3c:	e0bff917 	ldw	r2,-28(fp)
    ea40:	10800017 	ldw	r2,0(r2)
    ea44:	10800104 	addi	r2,r2,4
    ea48:	10800037 	ldwio	r2,0(r2)
    ea4c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ea50:	e0bffa17 	ldw	r2,-24(fp)
    ea54:	1081000c 	andi	r2,r2,1024
    ea58:	10000b26 	beq	r2,zero,ea88 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ea5c:	e0bff917 	ldw	r2,-28(fp)
    ea60:	10800017 	ldw	r2,0(r2)
    ea64:	10800104 	addi	r2,r2,4
    ea68:	1007883a 	mov	r3,r2
    ea6c:	e0bff917 	ldw	r2,-28(fp)
    ea70:	10800817 	ldw	r2,32(r2)
    ea74:	10810014 	ori	r2,r2,1024
    ea78:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    ea7c:	e0bff917 	ldw	r2,-28(fp)
    ea80:	10000915 	stw	zero,36(r2)
    ea84:	00000a06 	br	eab0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ea88:	e0bff917 	ldw	r2,-28(fp)
    ea8c:	10c00917 	ldw	r3,36(r2)
    ea90:	00a00034 	movhi	r2,32768
    ea94:	10bfff04 	addi	r2,r2,-4
    ea98:	10c00536 	bltu	r2,r3,eab0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    ea9c:	e0bff917 	ldw	r2,-28(fp)
    eaa0:	10800917 	ldw	r2,36(r2)
    eaa4:	10c00044 	addi	r3,r2,1
    eaa8:	e0bff917 	ldw	r2,-28(fp)
    eaac:	10c00915 	stw	r3,36(r2)
    eab0:	d0a6dd17 	ldw	r2,-25740(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    eab4:	e037883a 	mov	sp,fp
    eab8:	df000017 	ldw	fp,0(sp)
    eabc:	dec00104 	addi	sp,sp,4
    eac0:	f800283a 	ret

0000eac4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    eac4:	defffd04 	addi	sp,sp,-12
    eac8:	df000215 	stw	fp,8(sp)
    eacc:	df000204 	addi	fp,sp,8
    ead0:	e13ffe15 	stw	r4,-8(fp)
    ead4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ead8:	00000506 	br	eaf0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    eadc:	e0bfff17 	ldw	r2,-4(fp)
    eae0:	1090000c 	andi	r2,r2,16384
    eae4:	10000226 	beq	r2,zero,eaf0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    eae8:	00bffd44 	movi	r2,-11
    eaec:	00000b06 	br	eb1c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eaf0:	e0bffe17 	ldw	r2,-8(fp)
    eaf4:	10c00d17 	ldw	r3,52(r2)
    eaf8:	e0bffe17 	ldw	r2,-8(fp)
    eafc:	10800c17 	ldw	r2,48(r2)
    eb00:	18800526 	beq	r3,r2,eb18 <altera_avalon_jtag_uart_close+0x54>
    eb04:	e0bffe17 	ldw	r2,-8(fp)
    eb08:	10c00917 	ldw	r3,36(r2)
    eb0c:	e0bffe17 	ldw	r2,-8(fp)
    eb10:	10800117 	ldw	r2,4(r2)
    eb14:	18bff136 	bltu	r3,r2,eadc <__alt_data_end+0xfffef6dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    eb18:	0005883a 	mov	r2,zero
}
    eb1c:	e037883a 	mov	sp,fp
    eb20:	df000017 	ldw	fp,0(sp)
    eb24:	dec00104 	addi	sp,sp,4
    eb28:	f800283a 	ret

0000eb2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    eb2c:	defffa04 	addi	sp,sp,-24
    eb30:	df000515 	stw	fp,20(sp)
    eb34:	df000504 	addi	fp,sp,20
    eb38:	e13ffd15 	stw	r4,-12(fp)
    eb3c:	e17ffe15 	stw	r5,-8(fp)
    eb40:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    eb44:	00bff9c4 	movi	r2,-25
    eb48:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    eb4c:	e0bffe17 	ldw	r2,-8(fp)
    eb50:	10da8060 	cmpeqi	r3,r2,27137
    eb54:	1800031e 	bne	r3,zero,eb64 <altera_avalon_jtag_uart_ioctl+0x38>
    eb58:	109a80a0 	cmpeqi	r2,r2,27138
    eb5c:	1000181e 	bne	r2,zero,ebc0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    eb60:	00002906 	br	ec08 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    eb64:	e0bffd17 	ldw	r2,-12(fp)
    eb68:	10c00117 	ldw	r3,4(r2)
    eb6c:	00a00034 	movhi	r2,32768
    eb70:	10bfffc4 	addi	r2,r2,-1
    eb74:	18802126 	beq	r3,r2,ebfc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    eb78:	e0bfff17 	ldw	r2,-4(fp)
    eb7c:	10800017 	ldw	r2,0(r2)
    eb80:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    eb84:	e0bffc17 	ldw	r2,-16(fp)
    eb88:	10800090 	cmplti	r2,r2,2
    eb8c:	1000061e 	bne	r2,zero,eba8 <altera_avalon_jtag_uart_ioctl+0x7c>
    eb90:	e0fffc17 	ldw	r3,-16(fp)
    eb94:	00a00034 	movhi	r2,32768
    eb98:	10bfffc4 	addi	r2,r2,-1
    eb9c:	18800226 	beq	r3,r2,eba8 <altera_avalon_jtag_uart_ioctl+0x7c>
    eba0:	e0bffc17 	ldw	r2,-16(fp)
    eba4:	00000206 	br	ebb0 <altera_avalon_jtag_uart_ioctl+0x84>
    eba8:	00a00034 	movhi	r2,32768
    ebac:	10bfff84 	addi	r2,r2,-2
    ebb0:	e0fffd17 	ldw	r3,-12(fp)
    ebb4:	18800115 	stw	r2,4(r3)
      rc = 0;
    ebb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ebbc:	00000f06 	br	ebfc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ebc0:	e0bffd17 	ldw	r2,-12(fp)
    ebc4:	10c00117 	ldw	r3,4(r2)
    ebc8:	00a00034 	movhi	r2,32768
    ebcc:	10bfffc4 	addi	r2,r2,-1
    ebd0:	18800c26 	beq	r3,r2,ec04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ebd4:	e0bffd17 	ldw	r2,-12(fp)
    ebd8:	10c00917 	ldw	r3,36(r2)
    ebdc:	e0bffd17 	ldw	r2,-12(fp)
    ebe0:	10800117 	ldw	r2,4(r2)
    ebe4:	1885803a 	cmpltu	r2,r3,r2
    ebe8:	10c03fcc 	andi	r3,r2,255
    ebec:	e0bfff17 	ldw	r2,-4(fp)
    ebf0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    ebf4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    ebf8:	00000206 	br	ec04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    ebfc:	0001883a 	nop
    ec00:	00000106 	br	ec08 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    ec04:	0001883a 	nop

  default:
    break;
  }

  return rc;
    ec08:	e0bffb17 	ldw	r2,-20(fp)
}
    ec0c:	e037883a 	mov	sp,fp
    ec10:	df000017 	ldw	fp,0(sp)
    ec14:	dec00104 	addi	sp,sp,4
    ec18:	f800283a 	ret

0000ec1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ec1c:	defff304 	addi	sp,sp,-52
    ec20:	dfc00c15 	stw	ra,48(sp)
    ec24:	df000b15 	stw	fp,44(sp)
    ec28:	df000b04 	addi	fp,sp,44
    ec2c:	e13ffc15 	stw	r4,-16(fp)
    ec30:	e17ffd15 	stw	r5,-12(fp)
    ec34:	e1bffe15 	stw	r6,-8(fp)
    ec38:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    ec3c:	e0bffd17 	ldw	r2,-12(fp)
    ec40:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ec44:	00004706 	br	ed64 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ec48:	e0bffc17 	ldw	r2,-16(fp)
    ec4c:	10800a17 	ldw	r2,40(r2)
    ec50:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ec54:	e0bffc17 	ldw	r2,-16(fp)
    ec58:	10800b17 	ldw	r2,44(r2)
    ec5c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    ec60:	e0fff717 	ldw	r3,-36(fp)
    ec64:	e0bff817 	ldw	r2,-32(fp)
    ec68:	18800536 	bltu	r3,r2,ec80 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ec6c:	e0fff717 	ldw	r3,-36(fp)
    ec70:	e0bff817 	ldw	r2,-32(fp)
    ec74:	1885c83a 	sub	r2,r3,r2
    ec78:	e0bff615 	stw	r2,-40(fp)
    ec7c:	00000406 	br	ec90 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ec80:	00c20004 	movi	r3,2048
    ec84:	e0bff817 	ldw	r2,-32(fp)
    ec88:	1885c83a 	sub	r2,r3,r2
    ec8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ec90:	e0bff617 	ldw	r2,-40(fp)
    ec94:	10001e26 	beq	r2,zero,ed10 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ec98:	e0fffe17 	ldw	r3,-8(fp)
    ec9c:	e0bff617 	ldw	r2,-40(fp)
    eca0:	1880022e 	bgeu	r3,r2,ecac <altera_avalon_jtag_uart_read+0x90>
        n = space;
    eca4:	e0bffe17 	ldw	r2,-8(fp)
    eca8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ecac:	e0bffc17 	ldw	r2,-16(fp)
    ecb0:	10c00e04 	addi	r3,r2,56
    ecb4:	e0bff817 	ldw	r2,-32(fp)
    ecb8:	1885883a 	add	r2,r3,r2
    ecbc:	e1bff617 	ldw	r6,-40(fp)
    ecc0:	100b883a 	mov	r5,r2
    ecc4:	e13ff517 	ldw	r4,-44(fp)
    ecc8:	00060480 	call	6048 <memcpy>
      ptr   += n;
    eccc:	e0fff517 	ldw	r3,-44(fp)
    ecd0:	e0bff617 	ldw	r2,-40(fp)
    ecd4:	1885883a 	add	r2,r3,r2
    ecd8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    ecdc:	e0fffe17 	ldw	r3,-8(fp)
    ece0:	e0bff617 	ldw	r2,-40(fp)
    ece4:	1885c83a 	sub	r2,r3,r2
    ece8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ecec:	e0fff817 	ldw	r3,-32(fp)
    ecf0:	e0bff617 	ldw	r2,-40(fp)
    ecf4:	1885883a 	add	r2,r3,r2
    ecf8:	10c1ffcc 	andi	r3,r2,2047
    ecfc:	e0bffc17 	ldw	r2,-16(fp)
    ed00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    ed04:	e0bffe17 	ldw	r2,-8(fp)
    ed08:	00bfcf16 	blt	zero,r2,ec48 <__alt_data_end+0xfffef848>
    ed0c:	00000106 	br	ed14 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    ed10:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    ed14:	e0fff517 	ldw	r3,-44(fp)
    ed18:	e0bffd17 	ldw	r2,-12(fp)
    ed1c:	1880141e 	bne	r3,r2,ed70 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ed20:	e0bfff17 	ldw	r2,-4(fp)
    ed24:	1090000c 	andi	r2,r2,16384
    ed28:	1000131e 	bne	r2,zero,ed78 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    ed2c:	0001883a 	nop
    ed30:	e0bffc17 	ldw	r2,-16(fp)
    ed34:	10c00a17 	ldw	r3,40(r2)
    ed38:	e0bff717 	ldw	r2,-36(fp)
    ed3c:	1880051e 	bne	r3,r2,ed54 <altera_avalon_jtag_uart_read+0x138>
    ed40:	e0bffc17 	ldw	r2,-16(fp)
    ed44:	10c00917 	ldw	r3,36(r2)
    ed48:	e0bffc17 	ldw	r2,-16(fp)
    ed4c:	10800117 	ldw	r2,4(r2)
    ed50:	18bff736 	bltu	r3,r2,ed30 <__alt_data_end+0xfffef930>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ed54:	e0bffc17 	ldw	r2,-16(fp)
    ed58:	10c00a17 	ldw	r3,40(r2)
    ed5c:	e0bff717 	ldw	r2,-36(fp)
    ed60:	18800726 	beq	r3,r2,ed80 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ed64:	e0bffe17 	ldw	r2,-8(fp)
    ed68:	00bfb716 	blt	zero,r2,ec48 <__alt_data_end+0xfffef848>
    ed6c:	00000506 	br	ed84 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ed70:	0001883a 	nop
    ed74:	00000306 	br	ed84 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    ed78:	0001883a 	nop
    ed7c:	00000106 	br	ed84 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ed80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ed84:	e0fff517 	ldw	r3,-44(fp)
    ed88:	e0bffd17 	ldw	r2,-12(fp)
    ed8c:	18801826 	beq	r3,r2,edf0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed90:	0005303a 	rdctl	r2,status
    ed94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed98:	e0fffb17 	ldw	r3,-20(fp)
    ed9c:	00bfff84 	movi	r2,-2
    eda0:	1884703a 	and	r2,r3,r2
    eda4:	1001703a 	wrctl	status,r2
  
  return context;
    eda8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    edac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    edb0:	e0bffc17 	ldw	r2,-16(fp)
    edb4:	10800817 	ldw	r2,32(r2)
    edb8:	10c00054 	ori	r3,r2,1
    edbc:	e0bffc17 	ldw	r2,-16(fp)
    edc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    edc4:	e0bffc17 	ldw	r2,-16(fp)
    edc8:	10800017 	ldw	r2,0(r2)
    edcc:	10800104 	addi	r2,r2,4
    edd0:	1007883a 	mov	r3,r2
    edd4:	e0bffc17 	ldw	r2,-16(fp)
    edd8:	10800817 	ldw	r2,32(r2)
    eddc:	18800035 	stwio	r2,0(r3)
    ede0:	e0bffa17 	ldw	r2,-24(fp)
    ede4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ede8:	e0bff917 	ldw	r2,-28(fp)
    edec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    edf0:	e0fff517 	ldw	r3,-44(fp)
    edf4:	e0bffd17 	ldw	r2,-12(fp)
    edf8:	18800426 	beq	r3,r2,ee0c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    edfc:	e0fff517 	ldw	r3,-44(fp)
    ee00:	e0bffd17 	ldw	r2,-12(fp)
    ee04:	1885c83a 	sub	r2,r3,r2
    ee08:	00000606 	br	ee24 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    ee0c:	e0bfff17 	ldw	r2,-4(fp)
    ee10:	1090000c 	andi	r2,r2,16384
    ee14:	10000226 	beq	r2,zero,ee20 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ee18:	00bffd44 	movi	r2,-11
    ee1c:	00000106 	br	ee24 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    ee20:	00bffec4 	movi	r2,-5
}
    ee24:	e037883a 	mov	sp,fp
    ee28:	dfc00117 	ldw	ra,4(sp)
    ee2c:	df000017 	ldw	fp,0(sp)
    ee30:	dec00204 	addi	sp,sp,8
    ee34:	f800283a 	ret

0000ee38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ee38:	defff304 	addi	sp,sp,-52
    ee3c:	dfc00c15 	stw	ra,48(sp)
    ee40:	df000b15 	stw	fp,44(sp)
    ee44:	df000b04 	addi	fp,sp,44
    ee48:	e13ffc15 	stw	r4,-16(fp)
    ee4c:	e17ffd15 	stw	r5,-12(fp)
    ee50:	e1bffe15 	stw	r6,-8(fp)
    ee54:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ee58:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ee5c:	e0bffd17 	ldw	r2,-12(fp)
    ee60:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ee64:	00003706 	br	ef44 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ee68:	e0bffc17 	ldw	r2,-16(fp)
    ee6c:	10800c17 	ldw	r2,48(r2)
    ee70:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    ee74:	e0bffc17 	ldw	r2,-16(fp)
    ee78:	10800d17 	ldw	r2,52(r2)
    ee7c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    ee80:	e0fff917 	ldw	r3,-28(fp)
    ee84:	e0bff517 	ldw	r2,-44(fp)
    ee88:	1880062e 	bgeu	r3,r2,eea4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    ee8c:	e0fff517 	ldw	r3,-44(fp)
    ee90:	e0bff917 	ldw	r2,-28(fp)
    ee94:	1885c83a 	sub	r2,r3,r2
    ee98:	10bfffc4 	addi	r2,r2,-1
    ee9c:	e0bff615 	stw	r2,-40(fp)
    eea0:	00000b06 	br	eed0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    eea4:	e0bff517 	ldw	r2,-44(fp)
    eea8:	10000526 	beq	r2,zero,eec0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    eeac:	00c20004 	movi	r3,2048
    eeb0:	e0bff917 	ldw	r2,-28(fp)
    eeb4:	1885c83a 	sub	r2,r3,r2
    eeb8:	e0bff615 	stw	r2,-40(fp)
    eebc:	00000406 	br	eed0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    eec0:	00c1ffc4 	movi	r3,2047
    eec4:	e0bff917 	ldw	r2,-28(fp)
    eec8:	1885c83a 	sub	r2,r3,r2
    eecc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    eed0:	e0bff617 	ldw	r2,-40(fp)
    eed4:	10001e26 	beq	r2,zero,ef50 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    eed8:	e0fffe17 	ldw	r3,-8(fp)
    eedc:	e0bff617 	ldw	r2,-40(fp)
    eee0:	1880022e 	bgeu	r3,r2,eeec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    eee4:	e0bffe17 	ldw	r2,-8(fp)
    eee8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    eeec:	e0bffc17 	ldw	r2,-16(fp)
    eef0:	10c20e04 	addi	r3,r2,2104
    eef4:	e0bff917 	ldw	r2,-28(fp)
    eef8:	1885883a 	add	r2,r3,r2
    eefc:	e1bff617 	ldw	r6,-40(fp)
    ef00:	e17ffd17 	ldw	r5,-12(fp)
    ef04:	1009883a 	mov	r4,r2
    ef08:	00060480 	call	6048 <memcpy>
      ptr   += n;
    ef0c:	e0fffd17 	ldw	r3,-12(fp)
    ef10:	e0bff617 	ldw	r2,-40(fp)
    ef14:	1885883a 	add	r2,r3,r2
    ef18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    ef1c:	e0fffe17 	ldw	r3,-8(fp)
    ef20:	e0bff617 	ldw	r2,-40(fp)
    ef24:	1885c83a 	sub	r2,r3,r2
    ef28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ef2c:	e0fff917 	ldw	r3,-28(fp)
    ef30:	e0bff617 	ldw	r2,-40(fp)
    ef34:	1885883a 	add	r2,r3,r2
    ef38:	10c1ffcc 	andi	r3,r2,2047
    ef3c:	e0bffc17 	ldw	r2,-16(fp)
    ef40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ef44:	e0bffe17 	ldw	r2,-8(fp)
    ef48:	00bfc716 	blt	zero,r2,ee68 <__alt_data_end+0xfffefa68>
    ef4c:	00000106 	br	ef54 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    ef50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef54:	0005303a 	rdctl	r2,status
    ef58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef5c:	e0fffb17 	ldw	r3,-20(fp)
    ef60:	00bfff84 	movi	r2,-2
    ef64:	1884703a 	and	r2,r3,r2
    ef68:	1001703a 	wrctl	status,r2
  
  return context;
    ef6c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ef70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ef74:	e0bffc17 	ldw	r2,-16(fp)
    ef78:	10800817 	ldw	r2,32(r2)
    ef7c:	10c00094 	ori	r3,r2,2
    ef80:	e0bffc17 	ldw	r2,-16(fp)
    ef84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ef88:	e0bffc17 	ldw	r2,-16(fp)
    ef8c:	10800017 	ldw	r2,0(r2)
    ef90:	10800104 	addi	r2,r2,4
    ef94:	1007883a 	mov	r3,r2
    ef98:	e0bffc17 	ldw	r2,-16(fp)
    ef9c:	10800817 	ldw	r2,32(r2)
    efa0:	18800035 	stwio	r2,0(r3)
    efa4:	e0bffa17 	ldw	r2,-24(fp)
    efa8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    efac:	e0bff817 	ldw	r2,-32(fp)
    efb0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    efb4:	e0bffe17 	ldw	r2,-8(fp)
    efb8:	0080100e 	bge	zero,r2,effc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    efbc:	e0bfff17 	ldw	r2,-4(fp)
    efc0:	1090000c 	andi	r2,r2,16384
    efc4:	1000101e 	bne	r2,zero,f008 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    efc8:	0001883a 	nop
    efcc:	e0bffc17 	ldw	r2,-16(fp)
    efd0:	10c00d17 	ldw	r3,52(r2)
    efd4:	e0bff517 	ldw	r2,-44(fp)
    efd8:	1880051e 	bne	r3,r2,eff0 <altera_avalon_jtag_uart_write+0x1b8>
    efdc:	e0bffc17 	ldw	r2,-16(fp)
    efe0:	10c00917 	ldw	r3,36(r2)
    efe4:	e0bffc17 	ldw	r2,-16(fp)
    efe8:	10800117 	ldw	r2,4(r2)
    efec:	18bff736 	bltu	r3,r2,efcc <__alt_data_end+0xfffefbcc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    eff0:	e0bffc17 	ldw	r2,-16(fp)
    eff4:	10800917 	ldw	r2,36(r2)
    eff8:	1000051e 	bne	r2,zero,f010 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    effc:	e0bffe17 	ldw	r2,-8(fp)
    f000:	00bfd016 	blt	zero,r2,ef44 <__alt_data_end+0xfffefb44>
    f004:	00000306 	br	f014 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f008:	0001883a 	nop
    f00c:	00000106 	br	f014 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f010:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f014:	e0fffd17 	ldw	r3,-12(fp)
    f018:	e0bff717 	ldw	r2,-36(fp)
    f01c:	18800426 	beq	r3,r2,f030 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f020:	e0fffd17 	ldw	r3,-12(fp)
    f024:	e0bff717 	ldw	r2,-36(fp)
    f028:	1885c83a 	sub	r2,r3,r2
    f02c:	00000606 	br	f048 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f030:	e0bfff17 	ldw	r2,-4(fp)
    f034:	1090000c 	andi	r2,r2,16384
    f038:	10000226 	beq	r2,zero,f044 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f03c:	00bffd44 	movi	r2,-11
    f040:	00000106 	br	f048 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f044:	00bffec4 	movi	r2,-5
}
    f048:	e037883a 	mov	sp,fp
    f04c:	dfc00117 	ldw	ra,4(sp)
    f050:	df000017 	ldw	fp,0(sp)
    f054:	dec00204 	addi	sp,sp,8
    f058:	f800283a 	ret

0000f05c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f05c:	defffa04 	addi	sp,sp,-24
    f060:	dfc00515 	stw	ra,20(sp)
    f064:	df000415 	stw	fp,16(sp)
    f068:	df000404 	addi	fp,sp,16
    f06c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f070:	0007883a 	mov	r3,zero
    f074:	e0bfff17 	ldw	r2,-4(fp)
    f078:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f07c:	e0bfff17 	ldw	r2,-4(fp)
    f080:	10800104 	addi	r2,r2,4
    f084:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f088:	0005303a 	rdctl	r2,status
    f08c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f090:	e0fffd17 	ldw	r3,-12(fp)
    f094:	00bfff84 	movi	r2,-2
    f098:	1884703a 	and	r2,r3,r2
    f09c:	1001703a 	wrctl	status,r2
  
  return context;
    f0a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    f0a4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    f0a8:	000f8dc0 	call	f8dc <alt_tick>
    f0ac:	e0bffc17 	ldw	r2,-16(fp)
    f0b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0b4:	e0bffe17 	ldw	r2,-8(fp)
    f0b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    f0bc:	0001883a 	nop
    f0c0:	e037883a 	mov	sp,fp
    f0c4:	dfc00117 	ldw	ra,4(sp)
    f0c8:	df000017 	ldw	fp,0(sp)
    f0cc:	dec00204 	addi	sp,sp,8
    f0d0:	f800283a 	ret

0000f0d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f0d4:	defff804 	addi	sp,sp,-32
    f0d8:	dfc00715 	stw	ra,28(sp)
    f0dc:	df000615 	stw	fp,24(sp)
    f0e0:	df000604 	addi	fp,sp,24
    f0e4:	e13ffc15 	stw	r4,-16(fp)
    f0e8:	e17ffd15 	stw	r5,-12(fp)
    f0ec:	e1bffe15 	stw	r6,-8(fp)
    f0f0:	e1ffff15 	stw	r7,-4(fp)
    f0f4:	e0bfff17 	ldw	r2,-4(fp)
    f0f8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f0fc:	d0a6dd17 	ldw	r2,-25740(gp)
    f100:	1000021e 	bne	r2,zero,f10c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    f104:	e0bffb17 	ldw	r2,-20(fp)
    f108:	d0a6dd15 	stw	r2,-25740(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f10c:	e0bffc17 	ldw	r2,-16(fp)
    f110:	10800104 	addi	r2,r2,4
    f114:	00c001c4 	movi	r3,7
    f118:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f11c:	d8000015 	stw	zero,0(sp)
    f120:	e1fffc17 	ldw	r7,-16(fp)
    f124:	01800074 	movhi	r6,1
    f128:	31bc1704 	addi	r6,r6,-4004
    f12c:	e17ffe17 	ldw	r5,-8(fp)
    f130:	e13ffd17 	ldw	r4,-12(fp)
    f134:	000db280 	call	db28 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f138:	0001883a 	nop
    f13c:	e037883a 	mov	sp,fp
    f140:	dfc00117 	ldw	ra,4(sp)
    f144:	df000017 	ldw	fp,0(sp)
    f148:	dec00204 	addi	sp,sp,8
    f14c:	f800283a 	ret

0000f150 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f150:	defff504 	addi	sp,sp,-44
    f154:	df000a15 	stw	fp,40(sp)
    f158:	df000a04 	addi	fp,sp,40
    f15c:	e13ffc15 	stw	r4,-16(fp)
    f160:	e17ffd15 	stw	r5,-12(fp)
    f164:	e1bffe15 	stw	r6,-8(fp)
    f168:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f16c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f170:	d0a6dd17 	ldw	r2,-25740(gp)
  
  if (alt_ticks_per_second ())
    f174:	10003c26 	beq	r2,zero,f268 <alt_alarm_start+0x118>
  {
    if (alarm)
    f178:	e0bffc17 	ldw	r2,-16(fp)
    f17c:	10003826 	beq	r2,zero,f260 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    f180:	e0bffc17 	ldw	r2,-16(fp)
    f184:	e0fffe17 	ldw	r3,-8(fp)
    f188:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f18c:	e0bffc17 	ldw	r2,-16(fp)
    f190:	e0ffff17 	ldw	r3,-4(fp)
    f194:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f198:	0005303a 	rdctl	r2,status
    f19c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1a0:	e0fff917 	ldw	r3,-28(fp)
    f1a4:	00bfff84 	movi	r2,-2
    f1a8:	1884703a 	and	r2,r3,r2
    f1ac:	1001703a 	wrctl	status,r2
  
  return context;
    f1b0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    f1b4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f1b8:	d0a6de17 	ldw	r2,-25736(gp)
      
      current_nticks = alt_nticks();
    f1bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f1c0:	e0fffd17 	ldw	r3,-12(fp)
    f1c4:	e0bff617 	ldw	r2,-40(fp)
    f1c8:	1885883a 	add	r2,r3,r2
    f1cc:	10c00044 	addi	r3,r2,1
    f1d0:	e0bffc17 	ldw	r2,-16(fp)
    f1d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f1d8:	e0bffc17 	ldw	r2,-16(fp)
    f1dc:	10c00217 	ldw	r3,8(r2)
    f1e0:	e0bff617 	ldw	r2,-40(fp)
    f1e4:	1880042e 	bgeu	r3,r2,f1f8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    f1e8:	e0bffc17 	ldw	r2,-16(fp)
    f1ec:	00c00044 	movi	r3,1
    f1f0:	10c00405 	stb	r3,16(r2)
    f1f4:	00000206 	br	f200 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    f1f8:	e0bffc17 	ldw	r2,-16(fp)
    f1fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f200:	e0bffc17 	ldw	r2,-16(fp)
    f204:	d0e00e04 	addi	r3,gp,-32712
    f208:	e0fffa15 	stw	r3,-24(fp)
    f20c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f210:	e0bffb17 	ldw	r2,-20(fp)
    f214:	e0fffa17 	ldw	r3,-24(fp)
    f218:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f21c:	e0bffa17 	ldw	r2,-24(fp)
    f220:	10c00017 	ldw	r3,0(r2)
    f224:	e0bffb17 	ldw	r2,-20(fp)
    f228:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f22c:	e0bffa17 	ldw	r2,-24(fp)
    f230:	10800017 	ldw	r2,0(r2)
    f234:	e0fffb17 	ldw	r3,-20(fp)
    f238:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f23c:	e0bffa17 	ldw	r2,-24(fp)
    f240:	e0fffb17 	ldw	r3,-20(fp)
    f244:	10c00015 	stw	r3,0(r2)
    f248:	e0bff817 	ldw	r2,-32(fp)
    f24c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f250:	e0bff717 	ldw	r2,-36(fp)
    f254:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    f258:	0005883a 	mov	r2,zero
    f25c:	00000306 	br	f26c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    f260:	00bffa84 	movi	r2,-22
    f264:	00000106 	br	f26c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    f268:	00bfde84 	movi	r2,-134
  }
}
    f26c:	e037883a 	mov	sp,fp
    f270:	df000017 	ldw	fp,0(sp)
    f274:	dec00104 	addi	sp,sp,4
    f278:	f800283a 	ret

0000f27c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f27c:	deffff04 	addi	sp,sp,-4
    f280:	df000015 	stw	fp,0(sp)
    f284:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f288:	0001883a 	nop
    f28c:	e037883a 	mov	sp,fp
    f290:	df000017 	ldw	fp,0(sp)
    f294:	dec00104 	addi	sp,sp,4
    f298:	f800283a 	ret

0000f29c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f29c:	defffe04 	addi	sp,sp,-8
    f2a0:	dfc00115 	stw	ra,4(sp)
    f2a4:	df000015 	stw	fp,0(sp)
    f2a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2ac:	d0a00b17 	ldw	r2,-32724(gp)
    f2b0:	10000326 	beq	r2,zero,f2c0 <alt_get_errno+0x24>
    f2b4:	d0a00b17 	ldw	r2,-32724(gp)
    f2b8:	103ee83a 	callr	r2
    f2bc:	00000106 	br	f2c4 <alt_get_errno+0x28>
    f2c0:	d0a6d804 	addi	r2,gp,-25760
}
    f2c4:	e037883a 	mov	sp,fp
    f2c8:	dfc00117 	ldw	ra,4(sp)
    f2cc:	df000017 	ldw	fp,0(sp)
    f2d0:	dec00204 	addi	sp,sp,8
    f2d4:	f800283a 	ret

0000f2d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f2d8:	defffa04 	addi	sp,sp,-24
    f2dc:	dfc00515 	stw	ra,20(sp)
    f2e0:	df000415 	stw	fp,16(sp)
    f2e4:	df000404 	addi	fp,sp,16
    f2e8:	e13ffe15 	stw	r4,-8(fp)
    f2ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f2f0:	e0bffe17 	ldw	r2,-8(fp)
    f2f4:	10000326 	beq	r2,zero,f304 <alt_dev_llist_insert+0x2c>
    f2f8:	e0bffe17 	ldw	r2,-8(fp)
    f2fc:	10800217 	ldw	r2,8(r2)
    f300:	1000061e 	bne	r2,zero,f31c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f304:	000f29c0 	call	f29c <alt_get_errno>
    f308:	1007883a 	mov	r3,r2
    f30c:	00800584 	movi	r2,22
    f310:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f314:	00bffa84 	movi	r2,-22
    f318:	00001306 	br	f368 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f31c:	e0bffe17 	ldw	r2,-8(fp)
    f320:	e0ffff17 	ldw	r3,-4(fp)
    f324:	e0fffc15 	stw	r3,-16(fp)
    f328:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f32c:	e0bffd17 	ldw	r2,-12(fp)
    f330:	e0fffc17 	ldw	r3,-16(fp)
    f334:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f338:	e0bffc17 	ldw	r2,-16(fp)
    f33c:	10c00017 	ldw	r3,0(r2)
    f340:	e0bffd17 	ldw	r2,-12(fp)
    f344:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f348:	e0bffc17 	ldw	r2,-16(fp)
    f34c:	10800017 	ldw	r2,0(r2)
    f350:	e0fffd17 	ldw	r3,-12(fp)
    f354:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f358:	e0bffc17 	ldw	r2,-16(fp)
    f35c:	e0fffd17 	ldw	r3,-12(fp)
    f360:	10c00015 	stw	r3,0(r2)

  return 0;  
    f364:	0005883a 	mov	r2,zero
}
    f368:	e037883a 	mov	sp,fp
    f36c:	dfc00117 	ldw	ra,4(sp)
    f370:	df000017 	ldw	fp,0(sp)
    f374:	dec00204 	addi	sp,sp,8
    f378:	f800283a 	ret

0000f37c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f37c:	defffd04 	addi	sp,sp,-12
    f380:	dfc00215 	stw	ra,8(sp)
    f384:	df000115 	stw	fp,4(sp)
    f388:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f38c:	00800074 	movhi	r2,1
    f390:	10bffd04 	addi	r2,r2,-12
    f394:	e0bfff15 	stw	r2,-4(fp)
    f398:	00000606 	br	f3b4 <_do_ctors+0x38>
        (*ctor) (); 
    f39c:	e0bfff17 	ldw	r2,-4(fp)
    f3a0:	10800017 	ldw	r2,0(r2)
    f3a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f3a8:	e0bfff17 	ldw	r2,-4(fp)
    f3ac:	10bfff04 	addi	r2,r2,-4
    f3b0:	e0bfff15 	stw	r2,-4(fp)
    f3b4:	e0ffff17 	ldw	r3,-4(fp)
    f3b8:	00800074 	movhi	r2,1
    f3bc:	10bffe04 	addi	r2,r2,-8
    f3c0:	18bff62e 	bgeu	r3,r2,f39c <__alt_data_end+0xfffeff9c>
        (*ctor) (); 
}
    f3c4:	0001883a 	nop
    f3c8:	e037883a 	mov	sp,fp
    f3cc:	dfc00117 	ldw	ra,4(sp)
    f3d0:	df000017 	ldw	fp,0(sp)
    f3d4:	dec00204 	addi	sp,sp,8
    f3d8:	f800283a 	ret

0000f3dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f3dc:	defffd04 	addi	sp,sp,-12
    f3e0:	dfc00215 	stw	ra,8(sp)
    f3e4:	df000115 	stw	fp,4(sp)
    f3e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f3ec:	00800074 	movhi	r2,1
    f3f0:	10bffd04 	addi	r2,r2,-12
    f3f4:	e0bfff15 	stw	r2,-4(fp)
    f3f8:	00000606 	br	f414 <_do_dtors+0x38>
        (*dtor) (); 
    f3fc:	e0bfff17 	ldw	r2,-4(fp)
    f400:	10800017 	ldw	r2,0(r2)
    f404:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f408:	e0bfff17 	ldw	r2,-4(fp)
    f40c:	10bfff04 	addi	r2,r2,-4
    f410:	e0bfff15 	stw	r2,-4(fp)
    f414:	e0ffff17 	ldw	r3,-4(fp)
    f418:	00800074 	movhi	r2,1
    f41c:	10bffe04 	addi	r2,r2,-8
    f420:	18bff62e 	bgeu	r3,r2,f3fc <__alt_data_end+0xfffefffc>
        (*dtor) (); 
}
    f424:	0001883a 	nop
    f428:	e037883a 	mov	sp,fp
    f42c:	dfc00117 	ldw	ra,4(sp)
    f430:	df000017 	ldw	fp,0(sp)
    f434:	dec00204 	addi	sp,sp,8
    f438:	f800283a 	ret

0000f43c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f43c:	deffff04 	addi	sp,sp,-4
    f440:	df000015 	stw	fp,0(sp)
    f444:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    f448:	0001883a 	nop
    f44c:	e037883a 	mov	sp,fp
    f450:	df000017 	ldw	fp,0(sp)
    f454:	dec00104 	addi	sp,sp,4
    f458:	f800283a 	ret

0000f45c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f45c:	defff804 	addi	sp,sp,-32
    f460:	dfc00715 	stw	ra,28(sp)
    f464:	df000615 	stw	fp,24(sp)
    f468:	dc000515 	stw	r16,20(sp)
    f46c:	df000604 	addi	fp,sp,24
    f470:	e13ffb15 	stw	r4,-20(fp)
    f474:	e17ffc15 	stw	r5,-16(fp)
    f478:	e1bffd15 	stw	r6,-12(fp)
    f47c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    f480:	e1bffe17 	ldw	r6,-8(fp)
    f484:	e17ffd17 	ldw	r5,-12(fp)
    f488:	e13ffc17 	ldw	r4,-16(fp)
    f48c:	000f6e40 	call	f6e4 <open>
    f490:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    f494:	e0bffa17 	ldw	r2,-24(fp)
    f498:	10002216 	blt	r2,zero,f524 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    f49c:	04000074 	movhi	r16,1
    f4a0:	84030d04 	addi	r16,r16,3124
    f4a4:	e0bffa17 	ldw	r2,-24(fp)
    f4a8:	01400304 	movi	r5,12
    f4ac:	1009883a 	mov	r4,r2
    f4b0:	000b0280 	call	b028 <__mulsi3>
    f4b4:	8085883a 	add	r2,r16,r2
    f4b8:	10c00017 	ldw	r3,0(r2)
    f4bc:	e0bffb17 	ldw	r2,-20(fp)
    f4c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f4c4:	04000074 	movhi	r16,1
    f4c8:	84030d04 	addi	r16,r16,3124
    f4cc:	e0bffa17 	ldw	r2,-24(fp)
    f4d0:	01400304 	movi	r5,12
    f4d4:	1009883a 	mov	r4,r2
    f4d8:	000b0280 	call	b028 <__mulsi3>
    f4dc:	8085883a 	add	r2,r16,r2
    f4e0:	10800104 	addi	r2,r2,4
    f4e4:	10c00017 	ldw	r3,0(r2)
    f4e8:	e0bffb17 	ldw	r2,-20(fp)
    f4ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f4f0:	04000074 	movhi	r16,1
    f4f4:	84030d04 	addi	r16,r16,3124
    f4f8:	e0bffa17 	ldw	r2,-24(fp)
    f4fc:	01400304 	movi	r5,12
    f500:	1009883a 	mov	r4,r2
    f504:	000b0280 	call	b028 <__mulsi3>
    f508:	8085883a 	add	r2,r16,r2
    f50c:	10800204 	addi	r2,r2,8
    f510:	10c00017 	ldw	r3,0(r2)
    f514:	e0bffb17 	ldw	r2,-20(fp)
    f518:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f51c:	e13ffa17 	ldw	r4,-24(fp)
    f520:	000e2b80 	call	e2b8 <alt_release_fd>
  }
} 
    f524:	0001883a 	nop
    f528:	e6ffff04 	addi	sp,fp,-4
    f52c:	dfc00217 	ldw	ra,8(sp)
    f530:	df000117 	ldw	fp,4(sp)
    f534:	dc000017 	ldw	r16,0(sp)
    f538:	dec00304 	addi	sp,sp,12
    f53c:	f800283a 	ret

0000f540 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f540:	defffb04 	addi	sp,sp,-20
    f544:	dfc00415 	stw	ra,16(sp)
    f548:	df000315 	stw	fp,12(sp)
    f54c:	df000304 	addi	fp,sp,12
    f550:	e13ffd15 	stw	r4,-12(fp)
    f554:	e17ffe15 	stw	r5,-8(fp)
    f558:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f55c:	01c07fc4 	movi	r7,511
    f560:	01800044 	movi	r6,1
    f564:	e17ffd17 	ldw	r5,-12(fp)
    f568:	01000074 	movhi	r4,1
    f56c:	21031004 	addi	r4,r4,3136
    f570:	000f45c0 	call	f45c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f574:	01c07fc4 	movi	r7,511
    f578:	000d883a 	mov	r6,zero
    f57c:	e17ffe17 	ldw	r5,-8(fp)
    f580:	01000074 	movhi	r4,1
    f584:	21030d04 	addi	r4,r4,3124
    f588:	000f45c0 	call	f45c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f58c:	01c07fc4 	movi	r7,511
    f590:	01800044 	movi	r6,1
    f594:	e17fff17 	ldw	r5,-4(fp)
    f598:	01000074 	movhi	r4,1
    f59c:	21031304 	addi	r4,r4,3148
    f5a0:	000f45c0 	call	f45c <alt_open_fd>
}  
    f5a4:	0001883a 	nop
    f5a8:	e037883a 	mov	sp,fp
    f5ac:	dfc00117 	ldw	ra,4(sp)
    f5b0:	df000017 	ldw	fp,0(sp)
    f5b4:	dec00204 	addi	sp,sp,8
    f5b8:	f800283a 	ret

0000f5bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f5bc:	defffe04 	addi	sp,sp,-8
    f5c0:	dfc00115 	stw	ra,4(sp)
    f5c4:	df000015 	stw	fp,0(sp)
    f5c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f5cc:	d0a00b17 	ldw	r2,-32724(gp)
    f5d0:	10000326 	beq	r2,zero,f5e0 <alt_get_errno+0x24>
    f5d4:	d0a00b17 	ldw	r2,-32724(gp)
    f5d8:	103ee83a 	callr	r2
    f5dc:	00000106 	br	f5e4 <alt_get_errno+0x28>
    f5e0:	d0a6d804 	addi	r2,gp,-25760
}
    f5e4:	e037883a 	mov	sp,fp
    f5e8:	dfc00117 	ldw	ra,4(sp)
    f5ec:	df000017 	ldw	fp,0(sp)
    f5f0:	dec00204 	addi	sp,sp,8
    f5f4:	f800283a 	ret

0000f5f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f5f8:	defffb04 	addi	sp,sp,-20
    f5fc:	dfc00415 	stw	ra,16(sp)
    f600:	df000315 	stw	fp,12(sp)
    f604:	dc000215 	stw	r16,8(sp)
    f608:	df000304 	addi	fp,sp,12
    f60c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f610:	e0bffe17 	ldw	r2,-8(fp)
    f614:	10800217 	ldw	r2,8(r2)
    f618:	10d00034 	orhi	r3,r2,16384
    f61c:	e0bffe17 	ldw	r2,-8(fp)
    f620:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f624:	e03ffd15 	stw	zero,-12(fp)
    f628:	00002306 	br	f6b8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f62c:	04000074 	movhi	r16,1
    f630:	84030d04 	addi	r16,r16,3124
    f634:	e0bffd17 	ldw	r2,-12(fp)
    f638:	01400304 	movi	r5,12
    f63c:	1009883a 	mov	r4,r2
    f640:	000b0280 	call	b028 <__mulsi3>
    f644:	8085883a 	add	r2,r16,r2
    f648:	10c00017 	ldw	r3,0(r2)
    f64c:	e0bffe17 	ldw	r2,-8(fp)
    f650:	10800017 	ldw	r2,0(r2)
    f654:	1880151e 	bne	r3,r2,f6ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f658:	04000074 	movhi	r16,1
    f65c:	84030d04 	addi	r16,r16,3124
    f660:	e0bffd17 	ldw	r2,-12(fp)
    f664:	01400304 	movi	r5,12
    f668:	1009883a 	mov	r4,r2
    f66c:	000b0280 	call	b028 <__mulsi3>
    f670:	8085883a 	add	r2,r16,r2
    f674:	10800204 	addi	r2,r2,8
    f678:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f67c:	10000b0e 	bge	r2,zero,f6ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f680:	01400304 	movi	r5,12
    f684:	e13ffd17 	ldw	r4,-12(fp)
    f688:	000b0280 	call	b028 <__mulsi3>
    f68c:	1007883a 	mov	r3,r2
    f690:	00800074 	movhi	r2,1
    f694:	10830d04 	addi	r2,r2,3124
    f698:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f69c:	e0bffe17 	ldw	r2,-8(fp)
    f6a0:	18800226 	beq	r3,r2,f6ac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f6a4:	00bffcc4 	movi	r2,-13
    f6a8:	00000806 	br	f6cc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f6ac:	e0bffd17 	ldw	r2,-12(fp)
    f6b0:	10800044 	addi	r2,r2,1
    f6b4:	e0bffd15 	stw	r2,-12(fp)
    f6b8:	d0a00a17 	ldw	r2,-32728(gp)
    f6bc:	1007883a 	mov	r3,r2
    f6c0:	e0bffd17 	ldw	r2,-12(fp)
    f6c4:	18bfd92e 	bgeu	r3,r2,f62c <__alt_data_end+0xffff022c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f6c8:	0005883a 	mov	r2,zero
}
    f6cc:	e6ffff04 	addi	sp,fp,-4
    f6d0:	dfc00217 	ldw	ra,8(sp)
    f6d4:	df000117 	ldw	fp,4(sp)
    f6d8:	dc000017 	ldw	r16,0(sp)
    f6dc:	dec00304 	addi	sp,sp,12
    f6e0:	f800283a 	ret

0000f6e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f6e4:	defff604 	addi	sp,sp,-40
    f6e8:	dfc00915 	stw	ra,36(sp)
    f6ec:	df000815 	stw	fp,32(sp)
    f6f0:	df000804 	addi	fp,sp,32
    f6f4:	e13ffd15 	stw	r4,-12(fp)
    f6f8:	e17ffe15 	stw	r5,-8(fp)
    f6fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f700:	00bfffc4 	movi	r2,-1
    f704:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f708:	00bffb44 	movi	r2,-19
    f70c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f710:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f714:	d1600804 	addi	r5,gp,-32736
    f718:	e13ffd17 	ldw	r4,-12(fp)
    f71c:	000fa080 	call	fa08 <alt_find_dev>
    f720:	e0bff815 	stw	r2,-32(fp)
    f724:	e0bff817 	ldw	r2,-32(fp)
    f728:	1000051e 	bne	r2,zero,f740 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f72c:	e13ffd17 	ldw	r4,-12(fp)
    f730:	000fa980 	call	fa98 <alt_find_file>
    f734:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f738:	00800044 	movi	r2,1
    f73c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f740:	e0bff817 	ldw	r2,-32(fp)
    f744:	10002b26 	beq	r2,zero,f7f4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f748:	e13ff817 	ldw	r4,-32(fp)
    f74c:	000fba00 	call	fba0 <alt_get_fd>
    f750:	e0bff915 	stw	r2,-28(fp)
    f754:	e0bff917 	ldw	r2,-28(fp)
    f758:	1000030e 	bge	r2,zero,f768 <open+0x84>
    {
      status = index;
    f75c:	e0bff917 	ldw	r2,-28(fp)
    f760:	e0bffa15 	stw	r2,-24(fp)
    f764:	00002506 	br	f7fc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    f768:	01400304 	movi	r5,12
    f76c:	e13ff917 	ldw	r4,-28(fp)
    f770:	000b0280 	call	b028 <__mulsi3>
    f774:	1007883a 	mov	r3,r2
    f778:	00800074 	movhi	r2,1
    f77c:	10830d04 	addi	r2,r2,3124
    f780:	1885883a 	add	r2,r3,r2
    f784:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f788:	e0fffe17 	ldw	r3,-8(fp)
    f78c:	00900034 	movhi	r2,16384
    f790:	10bfffc4 	addi	r2,r2,-1
    f794:	1886703a 	and	r3,r3,r2
    f798:	e0bffc17 	ldw	r2,-16(fp)
    f79c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f7a0:	e0bffb17 	ldw	r2,-20(fp)
    f7a4:	1000051e 	bne	r2,zero,f7bc <open+0xd8>
    f7a8:	e13ffc17 	ldw	r4,-16(fp)
    f7ac:	000f5f80 	call	f5f8 <alt_file_locked>
    f7b0:	e0bffa15 	stw	r2,-24(fp)
    f7b4:	e0bffa17 	ldw	r2,-24(fp)
    f7b8:	10001016 	blt	r2,zero,f7fc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f7bc:	e0bff817 	ldw	r2,-32(fp)
    f7c0:	10800317 	ldw	r2,12(r2)
    f7c4:	10000826 	beq	r2,zero,f7e8 <open+0x104>
    f7c8:	e0bff817 	ldw	r2,-32(fp)
    f7cc:	10800317 	ldw	r2,12(r2)
    f7d0:	e1ffff17 	ldw	r7,-4(fp)
    f7d4:	e1bffe17 	ldw	r6,-8(fp)
    f7d8:	e17ffd17 	ldw	r5,-12(fp)
    f7dc:	e13ffc17 	ldw	r4,-16(fp)
    f7e0:	103ee83a 	callr	r2
    f7e4:	00000106 	br	f7ec <open+0x108>
    f7e8:	0005883a 	mov	r2,zero
    f7ec:	e0bffa15 	stw	r2,-24(fp)
    f7f0:	00000206 	br	f7fc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f7f4:	00bffb44 	movi	r2,-19
    f7f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f7fc:	e0bffa17 	ldw	r2,-24(fp)
    f800:	1000090e 	bge	r2,zero,f828 <open+0x144>
  {
    alt_release_fd (index);  
    f804:	e13ff917 	ldw	r4,-28(fp)
    f808:	000e2b80 	call	e2b8 <alt_release_fd>
    ALT_ERRNO = -status;
    f80c:	000f5bc0 	call	f5bc <alt_get_errno>
    f810:	1007883a 	mov	r3,r2
    f814:	e0bffa17 	ldw	r2,-24(fp)
    f818:	0085c83a 	sub	r2,zero,r2
    f81c:	18800015 	stw	r2,0(r3)
    return -1;
    f820:	00bfffc4 	movi	r2,-1
    f824:	00000106 	br	f82c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    f828:	e0bff917 	ldw	r2,-28(fp)
}
    f82c:	e037883a 	mov	sp,fp
    f830:	dfc00117 	ldw	ra,4(sp)
    f834:	df000017 	ldw	fp,0(sp)
    f838:	dec00204 	addi	sp,sp,8
    f83c:	f800283a 	ret

0000f840 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f840:	defffa04 	addi	sp,sp,-24
    f844:	df000515 	stw	fp,20(sp)
    f848:	df000504 	addi	fp,sp,20
    f84c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f850:	0005303a 	rdctl	r2,status
    f854:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f858:	e0fffc17 	ldw	r3,-16(fp)
    f85c:	00bfff84 	movi	r2,-2
    f860:	1884703a 	and	r2,r3,r2
    f864:	1001703a 	wrctl	status,r2
  
  return context;
    f868:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f86c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f870:	e0bfff17 	ldw	r2,-4(fp)
    f874:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f878:	e0bffd17 	ldw	r2,-12(fp)
    f87c:	10800017 	ldw	r2,0(r2)
    f880:	e0fffd17 	ldw	r3,-12(fp)
    f884:	18c00117 	ldw	r3,4(r3)
    f888:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f88c:	e0bffd17 	ldw	r2,-12(fp)
    f890:	10800117 	ldw	r2,4(r2)
    f894:	e0fffd17 	ldw	r3,-12(fp)
    f898:	18c00017 	ldw	r3,0(r3)
    f89c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f8a0:	e0bffd17 	ldw	r2,-12(fp)
    f8a4:	e0fffd17 	ldw	r3,-12(fp)
    f8a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f8ac:	e0bffd17 	ldw	r2,-12(fp)
    f8b0:	e0fffd17 	ldw	r3,-12(fp)
    f8b4:	10c00015 	stw	r3,0(r2)
    f8b8:	e0bffb17 	ldw	r2,-20(fp)
    f8bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f8c0:	e0bffe17 	ldw	r2,-8(fp)
    f8c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f8c8:	0001883a 	nop
    f8cc:	e037883a 	mov	sp,fp
    f8d0:	df000017 	ldw	fp,0(sp)
    f8d4:	dec00104 	addi	sp,sp,4
    f8d8:	f800283a 	ret

0000f8dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f8dc:	defffb04 	addi	sp,sp,-20
    f8e0:	dfc00415 	stw	ra,16(sp)
    f8e4:	df000315 	stw	fp,12(sp)
    f8e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f8ec:	d0a00e17 	ldw	r2,-32712(gp)
    f8f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f8f4:	d0a6de17 	ldw	r2,-25736(gp)
    f8f8:	10800044 	addi	r2,r2,1
    f8fc:	d0a6de15 	stw	r2,-25736(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f900:	00002e06 	br	f9bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f904:	e0bffd17 	ldw	r2,-12(fp)
    f908:	10800017 	ldw	r2,0(r2)
    f90c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f910:	e0bffd17 	ldw	r2,-12(fp)
    f914:	10800403 	ldbu	r2,16(r2)
    f918:	10803fcc 	andi	r2,r2,255
    f91c:	10000426 	beq	r2,zero,f930 <alt_tick+0x54>
    f920:	d0a6de17 	ldw	r2,-25736(gp)
    f924:	1000021e 	bne	r2,zero,f930 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f928:	e0bffd17 	ldw	r2,-12(fp)
    f92c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f930:	e0bffd17 	ldw	r2,-12(fp)
    f934:	10800217 	ldw	r2,8(r2)
    f938:	d0e6de17 	ldw	r3,-25736(gp)
    f93c:	18801d36 	bltu	r3,r2,f9b4 <alt_tick+0xd8>
    f940:	e0bffd17 	ldw	r2,-12(fp)
    f944:	10800403 	ldbu	r2,16(r2)
    f948:	10803fcc 	andi	r2,r2,255
    f94c:	1000191e 	bne	r2,zero,f9b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f950:	e0bffd17 	ldw	r2,-12(fp)
    f954:	10800317 	ldw	r2,12(r2)
    f958:	e0fffd17 	ldw	r3,-12(fp)
    f95c:	18c00517 	ldw	r3,20(r3)
    f960:	1809883a 	mov	r4,r3
    f964:	103ee83a 	callr	r2
    f968:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f96c:	e0bfff17 	ldw	r2,-4(fp)
    f970:	1000031e 	bne	r2,zero,f980 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f974:	e13ffd17 	ldw	r4,-12(fp)
    f978:	000f8400 	call	f840 <alt_alarm_stop>
    f97c:	00000d06 	br	f9b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f980:	e0bffd17 	ldw	r2,-12(fp)
    f984:	10c00217 	ldw	r3,8(r2)
    f988:	e0bfff17 	ldw	r2,-4(fp)
    f98c:	1887883a 	add	r3,r3,r2
    f990:	e0bffd17 	ldw	r2,-12(fp)
    f994:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f998:	e0bffd17 	ldw	r2,-12(fp)
    f99c:	10c00217 	ldw	r3,8(r2)
    f9a0:	d0a6de17 	ldw	r2,-25736(gp)
    f9a4:	1880032e 	bgeu	r3,r2,f9b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f9a8:	e0bffd17 	ldw	r2,-12(fp)
    f9ac:	00c00044 	movi	r3,1
    f9b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f9b4:	e0bffe17 	ldw	r2,-8(fp)
    f9b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f9bc:	e0fffd17 	ldw	r3,-12(fp)
    f9c0:	d0a00e04 	addi	r2,gp,-32712
    f9c4:	18bfcf1e 	bne	r3,r2,f904 <__alt_data_end+0xffff0504>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f9c8:	0001883a 	nop
}
    f9cc:	0001883a 	nop
    f9d0:	e037883a 	mov	sp,fp
    f9d4:	dfc00117 	ldw	ra,4(sp)
    f9d8:	df000017 	ldw	fp,0(sp)
    f9dc:	dec00204 	addi	sp,sp,8
    f9e0:	f800283a 	ret

0000f9e4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    f9e4:	deffff04 	addi	sp,sp,-4
    f9e8:	df000015 	stw	fp,0(sp)
    f9ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f9f0:	000170fa 	wrctl	ienable,zero
}
    f9f4:	0001883a 	nop
    f9f8:	e037883a 	mov	sp,fp
    f9fc:	df000017 	ldw	fp,0(sp)
    fa00:	dec00104 	addi	sp,sp,4
    fa04:	f800283a 	ret

0000fa08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fa08:	defffa04 	addi	sp,sp,-24
    fa0c:	dfc00515 	stw	ra,20(sp)
    fa10:	df000415 	stw	fp,16(sp)
    fa14:	df000404 	addi	fp,sp,16
    fa18:	e13ffe15 	stw	r4,-8(fp)
    fa1c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    fa20:	e0bfff17 	ldw	r2,-4(fp)
    fa24:	10800017 	ldw	r2,0(r2)
    fa28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    fa2c:	e13ffe17 	ldw	r4,-8(fp)
    fa30:	00076500 	call	7650 <strlen>
    fa34:	10800044 	addi	r2,r2,1
    fa38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fa3c:	00000d06 	br	fa74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fa40:	e0bffc17 	ldw	r2,-16(fp)
    fa44:	10800217 	ldw	r2,8(r2)
    fa48:	e0fffd17 	ldw	r3,-12(fp)
    fa4c:	180d883a 	mov	r6,r3
    fa50:	e17ffe17 	ldw	r5,-8(fp)
    fa54:	1009883a 	mov	r4,r2
    fa58:	000fcb00 	call	fcb0 <memcmp>
    fa5c:	1000021e 	bne	r2,zero,fa68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    fa60:	e0bffc17 	ldw	r2,-16(fp)
    fa64:	00000706 	br	fa84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    fa68:	e0bffc17 	ldw	r2,-16(fp)
    fa6c:	10800017 	ldw	r2,0(r2)
    fa70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fa74:	e0fffc17 	ldw	r3,-16(fp)
    fa78:	e0bfff17 	ldw	r2,-4(fp)
    fa7c:	18bff01e 	bne	r3,r2,fa40 <__alt_data_end+0xffff0640>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fa80:	0005883a 	mov	r2,zero
}
    fa84:	e037883a 	mov	sp,fp
    fa88:	dfc00117 	ldw	ra,4(sp)
    fa8c:	df000017 	ldw	fp,0(sp)
    fa90:	dec00204 	addi	sp,sp,8
    fa94:	f800283a 	ret

0000fa98 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fa98:	defffb04 	addi	sp,sp,-20
    fa9c:	dfc00415 	stw	ra,16(sp)
    faa0:	df000315 	stw	fp,12(sp)
    faa4:	df000304 	addi	fp,sp,12
    faa8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    faac:	d0a00617 	ldw	r2,-32744(gp)
    fab0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fab4:	00003106 	br	fb7c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    fab8:	e0bffd17 	ldw	r2,-12(fp)
    fabc:	10800217 	ldw	r2,8(r2)
    fac0:	1009883a 	mov	r4,r2
    fac4:	00076500 	call	7650 <strlen>
    fac8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    facc:	e0bffd17 	ldw	r2,-12(fp)
    fad0:	10c00217 	ldw	r3,8(r2)
    fad4:	e0bffe17 	ldw	r2,-8(fp)
    fad8:	10bfffc4 	addi	r2,r2,-1
    fadc:	1885883a 	add	r2,r3,r2
    fae0:	10800003 	ldbu	r2,0(r2)
    fae4:	10803fcc 	andi	r2,r2,255
    fae8:	1080201c 	xori	r2,r2,128
    faec:	10bfe004 	addi	r2,r2,-128
    faf0:	10800bd8 	cmpnei	r2,r2,47
    faf4:	1000031e 	bne	r2,zero,fb04 <alt_find_file+0x6c>
    {
      len -= 1;
    faf8:	e0bffe17 	ldw	r2,-8(fp)
    fafc:	10bfffc4 	addi	r2,r2,-1
    fb00:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fb04:	e0bffe17 	ldw	r2,-8(fp)
    fb08:	e0ffff17 	ldw	r3,-4(fp)
    fb0c:	1885883a 	add	r2,r3,r2
    fb10:	10800003 	ldbu	r2,0(r2)
    fb14:	10803fcc 	andi	r2,r2,255
    fb18:	1080201c 	xori	r2,r2,128
    fb1c:	10bfe004 	addi	r2,r2,-128
    fb20:	10800be0 	cmpeqi	r2,r2,47
    fb24:	1000081e 	bne	r2,zero,fb48 <alt_find_file+0xb0>
    fb28:	e0bffe17 	ldw	r2,-8(fp)
    fb2c:	e0ffff17 	ldw	r3,-4(fp)
    fb30:	1885883a 	add	r2,r3,r2
    fb34:	10800003 	ldbu	r2,0(r2)
    fb38:	10803fcc 	andi	r2,r2,255
    fb3c:	1080201c 	xori	r2,r2,128
    fb40:	10bfe004 	addi	r2,r2,-128
    fb44:	10000a1e 	bne	r2,zero,fb70 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    fb48:	e0bffd17 	ldw	r2,-12(fp)
    fb4c:	10800217 	ldw	r2,8(r2)
    fb50:	e0fffe17 	ldw	r3,-8(fp)
    fb54:	180d883a 	mov	r6,r3
    fb58:	e17fff17 	ldw	r5,-4(fp)
    fb5c:	1009883a 	mov	r4,r2
    fb60:	000fcb00 	call	fcb0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fb64:	1000021e 	bne	r2,zero,fb70 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    fb68:	e0bffd17 	ldw	r2,-12(fp)
    fb6c:	00000706 	br	fb8c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    fb70:	e0bffd17 	ldw	r2,-12(fp)
    fb74:	10800017 	ldw	r2,0(r2)
    fb78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fb7c:	e0fffd17 	ldw	r3,-12(fp)
    fb80:	d0a00604 	addi	r2,gp,-32744
    fb84:	18bfcc1e 	bne	r3,r2,fab8 <__alt_data_end+0xffff06b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fb88:	0005883a 	mov	r2,zero
}
    fb8c:	e037883a 	mov	sp,fp
    fb90:	dfc00117 	ldw	ra,4(sp)
    fb94:	df000017 	ldw	fp,0(sp)
    fb98:	dec00204 	addi	sp,sp,8
    fb9c:	f800283a 	ret

0000fba0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fba0:	defffa04 	addi	sp,sp,-24
    fba4:	dfc00515 	stw	ra,20(sp)
    fba8:	df000415 	stw	fp,16(sp)
    fbac:	dc000315 	stw	r16,12(sp)
    fbb0:	df000404 	addi	fp,sp,16
    fbb4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    fbb8:	00bffa04 	movi	r2,-24
    fbbc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fbc0:	e03ffc15 	stw	zero,-16(fp)
    fbc4:	00001d06 	br	fc3c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    fbc8:	04000074 	movhi	r16,1
    fbcc:	84030d04 	addi	r16,r16,3124
    fbd0:	e0bffc17 	ldw	r2,-16(fp)
    fbd4:	01400304 	movi	r5,12
    fbd8:	1009883a 	mov	r4,r2
    fbdc:	000b0280 	call	b028 <__mulsi3>
    fbe0:	8085883a 	add	r2,r16,r2
    fbe4:	10800017 	ldw	r2,0(r2)
    fbe8:	1000111e 	bne	r2,zero,fc30 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    fbec:	04000074 	movhi	r16,1
    fbf0:	84030d04 	addi	r16,r16,3124
    fbf4:	e0bffc17 	ldw	r2,-16(fp)
    fbf8:	01400304 	movi	r5,12
    fbfc:	1009883a 	mov	r4,r2
    fc00:	000b0280 	call	b028 <__mulsi3>
    fc04:	8085883a 	add	r2,r16,r2
    fc08:	e0fffe17 	ldw	r3,-8(fp)
    fc0c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    fc10:	d0e00a17 	ldw	r3,-32728(gp)
    fc14:	e0bffc17 	ldw	r2,-16(fp)
    fc18:	1880020e 	bge	r3,r2,fc24 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    fc1c:	e0bffc17 	ldw	r2,-16(fp)
    fc20:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    fc24:	e0bffc17 	ldw	r2,-16(fp)
    fc28:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    fc2c:	00000606 	br	fc48 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fc30:	e0bffc17 	ldw	r2,-16(fp)
    fc34:	10800044 	addi	r2,r2,1
    fc38:	e0bffc15 	stw	r2,-16(fp)
    fc3c:	e0bffc17 	ldw	r2,-16(fp)
    fc40:	10800810 	cmplti	r2,r2,32
    fc44:	103fe01e 	bne	r2,zero,fbc8 <__alt_data_end+0xffff07c8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    fc48:	e0bffd17 	ldw	r2,-12(fp)
}
    fc4c:	e6ffff04 	addi	sp,fp,-4
    fc50:	dfc00217 	ldw	ra,8(sp)
    fc54:	df000117 	ldw	fp,4(sp)
    fc58:	dc000017 	ldw	r16,0(sp)
    fc5c:	dec00304 	addi	sp,sp,12
    fc60:	f800283a 	ret

0000fc64 <atexit>:
    fc64:	200b883a 	mov	r5,r4
    fc68:	000f883a 	mov	r7,zero
    fc6c:	000d883a 	mov	r6,zero
    fc70:	0009883a 	mov	r4,zero
    fc74:	000fd2c1 	jmpi	fd2c <__register_exitproc>

0000fc78 <exit>:
    fc78:	defffe04 	addi	sp,sp,-8
    fc7c:	000b883a 	mov	r5,zero
    fc80:	dc000015 	stw	r16,0(sp)
    fc84:	dfc00115 	stw	ra,4(sp)
    fc88:	2021883a 	mov	r16,r4
    fc8c:	000fe440 	call	fe44 <__call_exitprocs>
    fc90:	00800074 	movhi	r2,1
    fc94:	10878504 	addi	r2,r2,7700
    fc98:	11000017 	ldw	r4,0(r2)
    fc9c:	20800f17 	ldw	r2,60(r4)
    fca0:	10000126 	beq	r2,zero,fca8 <exit+0x30>
    fca4:	103ee83a 	callr	r2
    fca8:	8009883a 	mov	r4,r16
    fcac:	000ffc40 	call	ffc4 <_exit>

0000fcb0 <memcmp>:
    fcb0:	01c000c4 	movi	r7,3
    fcb4:	3980192e 	bgeu	r7,r6,fd1c <memcmp+0x6c>
    fcb8:	2144b03a 	or	r2,r4,r5
    fcbc:	11c4703a 	and	r2,r2,r7
    fcc0:	10000f26 	beq	r2,zero,fd00 <memcmp+0x50>
    fcc4:	20800003 	ldbu	r2,0(r4)
    fcc8:	28c00003 	ldbu	r3,0(r5)
    fccc:	10c0151e 	bne	r2,r3,fd24 <memcmp+0x74>
    fcd0:	31bfff84 	addi	r6,r6,-2
    fcd4:	01ffffc4 	movi	r7,-1
    fcd8:	00000406 	br	fcec <memcmp+0x3c>
    fcdc:	20800003 	ldbu	r2,0(r4)
    fce0:	28c00003 	ldbu	r3,0(r5)
    fce4:	31bfffc4 	addi	r6,r6,-1
    fce8:	10c00e1e 	bne	r2,r3,fd24 <memcmp+0x74>
    fcec:	21000044 	addi	r4,r4,1
    fcf0:	29400044 	addi	r5,r5,1
    fcf4:	31fff91e 	bne	r6,r7,fcdc <__alt_data_end+0xffff08dc>
    fcf8:	0005883a 	mov	r2,zero
    fcfc:	f800283a 	ret
    fd00:	20c00017 	ldw	r3,0(r4)
    fd04:	28800017 	ldw	r2,0(r5)
    fd08:	18bfee1e 	bne	r3,r2,fcc4 <__alt_data_end+0xffff08c4>
    fd0c:	31bfff04 	addi	r6,r6,-4
    fd10:	21000104 	addi	r4,r4,4
    fd14:	29400104 	addi	r5,r5,4
    fd18:	39bff936 	bltu	r7,r6,fd00 <__alt_data_end+0xffff0900>
    fd1c:	303fe91e 	bne	r6,zero,fcc4 <__alt_data_end+0xffff08c4>
    fd20:	003ff506 	br	fcf8 <__alt_data_end+0xffff08f8>
    fd24:	10c5c83a 	sub	r2,r2,r3
    fd28:	f800283a 	ret

0000fd2c <__register_exitproc>:
    fd2c:	defffa04 	addi	sp,sp,-24
    fd30:	dc000315 	stw	r16,12(sp)
    fd34:	04000074 	movhi	r16,1
    fd38:	84078504 	addi	r16,r16,7700
    fd3c:	80c00017 	ldw	r3,0(r16)
    fd40:	dc400415 	stw	r17,16(sp)
    fd44:	dfc00515 	stw	ra,20(sp)
    fd48:	18805217 	ldw	r2,328(r3)
    fd4c:	2023883a 	mov	r17,r4
    fd50:	10003726 	beq	r2,zero,fe30 <__register_exitproc+0x104>
    fd54:	10c00117 	ldw	r3,4(r2)
    fd58:	010007c4 	movi	r4,31
    fd5c:	20c00e16 	blt	r4,r3,fd98 <__register_exitproc+0x6c>
    fd60:	1a000044 	addi	r8,r3,1
    fd64:	8800221e 	bne	r17,zero,fdf0 <__register_exitproc+0xc4>
    fd68:	18c00084 	addi	r3,r3,2
    fd6c:	18c7883a 	add	r3,r3,r3
    fd70:	18c7883a 	add	r3,r3,r3
    fd74:	12000115 	stw	r8,4(r2)
    fd78:	10c7883a 	add	r3,r2,r3
    fd7c:	19400015 	stw	r5,0(r3)
    fd80:	0005883a 	mov	r2,zero
    fd84:	dfc00517 	ldw	ra,20(sp)
    fd88:	dc400417 	ldw	r17,16(sp)
    fd8c:	dc000317 	ldw	r16,12(sp)
    fd90:	dec00604 	addi	sp,sp,24
    fd94:	f800283a 	ret
    fd98:	00800034 	movhi	r2,0
    fd9c:	10800004 	addi	r2,r2,0
    fda0:	10002626 	beq	r2,zero,fe3c <__register_exitproc+0x110>
    fda4:	01006404 	movi	r4,400
    fda8:	d9400015 	stw	r5,0(sp)
    fdac:	d9800115 	stw	r6,4(sp)
    fdb0:	d9c00215 	stw	r7,8(sp)
    fdb4:	00000000 	call	0 <__reset>
    fdb8:	d9400017 	ldw	r5,0(sp)
    fdbc:	d9800117 	ldw	r6,4(sp)
    fdc0:	d9c00217 	ldw	r7,8(sp)
    fdc4:	10001d26 	beq	r2,zero,fe3c <__register_exitproc+0x110>
    fdc8:	81000017 	ldw	r4,0(r16)
    fdcc:	10000115 	stw	zero,4(r2)
    fdd0:	02000044 	movi	r8,1
    fdd4:	22405217 	ldw	r9,328(r4)
    fdd8:	0007883a 	mov	r3,zero
    fddc:	12400015 	stw	r9,0(r2)
    fde0:	20805215 	stw	r2,328(r4)
    fde4:	10006215 	stw	zero,392(r2)
    fde8:	10006315 	stw	zero,396(r2)
    fdec:	883fde26 	beq	r17,zero,fd68 <__alt_data_end+0xffff0968>
    fdf0:	18c9883a 	add	r4,r3,r3
    fdf4:	2109883a 	add	r4,r4,r4
    fdf8:	1109883a 	add	r4,r2,r4
    fdfc:	21802215 	stw	r6,136(r4)
    fe00:	01800044 	movi	r6,1
    fe04:	12406217 	ldw	r9,392(r2)
    fe08:	30cc983a 	sll	r6,r6,r3
    fe0c:	4992b03a 	or	r9,r9,r6
    fe10:	12406215 	stw	r9,392(r2)
    fe14:	21c04215 	stw	r7,264(r4)
    fe18:	01000084 	movi	r4,2
    fe1c:	893fd21e 	bne	r17,r4,fd68 <__alt_data_end+0xffff0968>
    fe20:	11006317 	ldw	r4,396(r2)
    fe24:	218cb03a 	or	r6,r4,r6
    fe28:	11806315 	stw	r6,396(r2)
    fe2c:	003fce06 	br	fd68 <__alt_data_end+0xffff0968>
    fe30:	18805304 	addi	r2,r3,332
    fe34:	18805215 	stw	r2,328(r3)
    fe38:	003fc606 	br	fd54 <__alt_data_end+0xffff0954>
    fe3c:	00bfffc4 	movi	r2,-1
    fe40:	003fd006 	br	fd84 <__alt_data_end+0xffff0984>

0000fe44 <__call_exitprocs>:
    fe44:	defff504 	addi	sp,sp,-44
    fe48:	df000915 	stw	fp,36(sp)
    fe4c:	dd400615 	stw	r21,24(sp)
    fe50:	dc800315 	stw	r18,12(sp)
    fe54:	dfc00a15 	stw	ra,40(sp)
    fe58:	ddc00815 	stw	r23,32(sp)
    fe5c:	dd800715 	stw	r22,28(sp)
    fe60:	dd000515 	stw	r20,20(sp)
    fe64:	dcc00415 	stw	r19,16(sp)
    fe68:	dc400215 	stw	r17,8(sp)
    fe6c:	dc000115 	stw	r16,4(sp)
    fe70:	d9000015 	stw	r4,0(sp)
    fe74:	2839883a 	mov	fp,r5
    fe78:	04800044 	movi	r18,1
    fe7c:	057fffc4 	movi	r21,-1
    fe80:	00800074 	movhi	r2,1
    fe84:	10878504 	addi	r2,r2,7700
    fe88:	12000017 	ldw	r8,0(r2)
    fe8c:	45005217 	ldw	r20,328(r8)
    fe90:	44c05204 	addi	r19,r8,328
    fe94:	a0001c26 	beq	r20,zero,ff08 <__call_exitprocs+0xc4>
    fe98:	a0800117 	ldw	r2,4(r20)
    fe9c:	15ffffc4 	addi	r23,r2,-1
    fea0:	b8000d16 	blt	r23,zero,fed8 <__call_exitprocs+0x94>
    fea4:	14000044 	addi	r16,r2,1
    fea8:	8421883a 	add	r16,r16,r16
    feac:	8421883a 	add	r16,r16,r16
    feb0:	84402004 	addi	r17,r16,128
    feb4:	a463883a 	add	r17,r20,r17
    feb8:	a421883a 	add	r16,r20,r16
    febc:	e0001e26 	beq	fp,zero,ff38 <__call_exitprocs+0xf4>
    fec0:	80804017 	ldw	r2,256(r16)
    fec4:	e0801c26 	beq	fp,r2,ff38 <__call_exitprocs+0xf4>
    fec8:	bdffffc4 	addi	r23,r23,-1
    fecc:	843fff04 	addi	r16,r16,-4
    fed0:	8c7fff04 	addi	r17,r17,-4
    fed4:	bd7ff91e 	bne	r23,r21,febc <__alt_data_end+0xffff0abc>
    fed8:	00800034 	movhi	r2,0
    fedc:	10800004 	addi	r2,r2,0
    fee0:	10000926 	beq	r2,zero,ff08 <__call_exitprocs+0xc4>
    fee4:	a0800117 	ldw	r2,4(r20)
    fee8:	1000301e 	bne	r2,zero,ffac <__call_exitprocs+0x168>
    feec:	a0800017 	ldw	r2,0(r20)
    fef0:	10003226 	beq	r2,zero,ffbc <__call_exitprocs+0x178>
    fef4:	a009883a 	mov	r4,r20
    fef8:	98800015 	stw	r2,0(r19)
    fefc:	00000000 	call	0 <__reset>
    ff00:	9d000017 	ldw	r20,0(r19)
    ff04:	a03fe41e 	bne	r20,zero,fe98 <__alt_data_end+0xffff0a98>
    ff08:	dfc00a17 	ldw	ra,40(sp)
    ff0c:	df000917 	ldw	fp,36(sp)
    ff10:	ddc00817 	ldw	r23,32(sp)
    ff14:	dd800717 	ldw	r22,28(sp)
    ff18:	dd400617 	ldw	r21,24(sp)
    ff1c:	dd000517 	ldw	r20,20(sp)
    ff20:	dcc00417 	ldw	r19,16(sp)
    ff24:	dc800317 	ldw	r18,12(sp)
    ff28:	dc400217 	ldw	r17,8(sp)
    ff2c:	dc000117 	ldw	r16,4(sp)
    ff30:	dec00b04 	addi	sp,sp,44
    ff34:	f800283a 	ret
    ff38:	a0800117 	ldw	r2,4(r20)
    ff3c:	80c00017 	ldw	r3,0(r16)
    ff40:	10bfffc4 	addi	r2,r2,-1
    ff44:	15c01426 	beq	r2,r23,ff98 <__call_exitprocs+0x154>
    ff48:	80000015 	stw	zero,0(r16)
    ff4c:	183fde26 	beq	r3,zero,fec8 <__alt_data_end+0xffff0ac8>
    ff50:	95c8983a 	sll	r4,r18,r23
    ff54:	a0806217 	ldw	r2,392(r20)
    ff58:	a5800117 	ldw	r22,4(r20)
    ff5c:	2084703a 	and	r2,r4,r2
    ff60:	10000b26 	beq	r2,zero,ff90 <__call_exitprocs+0x14c>
    ff64:	a0806317 	ldw	r2,396(r20)
    ff68:	2088703a 	and	r4,r4,r2
    ff6c:	20000c1e 	bne	r4,zero,ffa0 <__call_exitprocs+0x15c>
    ff70:	89400017 	ldw	r5,0(r17)
    ff74:	d9000017 	ldw	r4,0(sp)
    ff78:	183ee83a 	callr	r3
    ff7c:	a0800117 	ldw	r2,4(r20)
    ff80:	15bfbf1e 	bne	r2,r22,fe80 <__alt_data_end+0xffff0a80>
    ff84:	98800017 	ldw	r2,0(r19)
    ff88:	153fcf26 	beq	r2,r20,fec8 <__alt_data_end+0xffff0ac8>
    ff8c:	003fbc06 	br	fe80 <__alt_data_end+0xffff0a80>
    ff90:	183ee83a 	callr	r3
    ff94:	003ff906 	br	ff7c <__alt_data_end+0xffff0b7c>
    ff98:	a5c00115 	stw	r23,4(r20)
    ff9c:	003feb06 	br	ff4c <__alt_data_end+0xffff0b4c>
    ffa0:	89000017 	ldw	r4,0(r17)
    ffa4:	183ee83a 	callr	r3
    ffa8:	003ff406 	br	ff7c <__alt_data_end+0xffff0b7c>
    ffac:	a0800017 	ldw	r2,0(r20)
    ffb0:	a027883a 	mov	r19,r20
    ffb4:	1029883a 	mov	r20,r2
    ffb8:	003fb606 	br	fe94 <__alt_data_end+0xffff0a94>
    ffbc:	0005883a 	mov	r2,zero
    ffc0:	003ffb06 	br	ffb0 <__alt_data_end+0xffff0bb0>

0000ffc4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ffc4:	defffd04 	addi	sp,sp,-12
    ffc8:	df000215 	stw	fp,8(sp)
    ffcc:	df000204 	addi	fp,sp,8
    ffd0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ffd4:	0001883a 	nop
    ffd8:	e0bfff17 	ldw	r2,-4(fp)
    ffdc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    ffe0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ffe4:	10000226 	beq	r2,zero,fff0 <_exit+0x2c>
    ALT_SIM_FAIL();
    ffe8:	002af070 	cmpltui	zero,zero,43969
    ffec:	00000106 	br	fff4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    fff0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    fff4:	003fff06 	br	fff4 <__alt_data_end+0xffff0bf4>
