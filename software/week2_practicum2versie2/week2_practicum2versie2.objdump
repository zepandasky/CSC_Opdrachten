
week2_practicum2versie2.elf:     file format elf32-littlenios2
week2_practicum2versie2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00018714 memsz 0x00018714 flags r-x
    LOAD off    0x00019734 vaddr 0x00098734 paddr 0x0009a2ac align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x0001be24 vaddr 0x0009be24 paddr 0x0009be24 align 2**12
         filesz 0x00000000 memsz 0x00003414 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000180e8  000801c0  000801c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000048c  000982a8  000982a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  00098734  0009a2ac  00019734  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00003414  0009be24  0009be24  0001be24  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0009f238  0009f238  0001b2ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001b2ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001010  00000000  00000000  0001b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d0ac  00000000  00000000  0001c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aa82  00000000  00000000  0004938c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000dc03  00000000  00000000  00053e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000031ac  00000000  00000000  00061a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000047b2  00000000  00000000  00064bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001788b  00000000  00000000  00069372  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00080c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018b0  00000000  00000000  00080c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00086f46  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00086f4c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00086f58  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00086f59  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00086f5a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00086f65  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00086f70  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  00086f7b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004c  00000000  00000000  00086f8a  2**0
                  CONTENTS, READONLY
 26 .jdi          00005497  00000000  00000000  00086fd6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00037d55  00000000  00000000  0008c46d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801c0 l    d  .text	00000000 .text
000982a8 l    d  .rodata	00000000 .rodata
00098734 l    d  .rwdata	00000000 .rwdata
0009be24 l    d  .bss	00000000 .bss
0009f238 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../week2_practicum2versie2_bsp//obj/HAL/src/crt0.o
000801f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
0009be2c l     O .bss	00000006 hexadecimalnum.3350
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 vfprintf.c
00098356 l     O .rodata	00000010 zeroes.4404
00083a40 l     F .text	000000bc __sbprintf
00098366 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083c50 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000857a8 l     F .text	00000008 __fp_unlock
000857bc l     F .text	0000019c __sinit.part.1
00085958 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00098b3c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00098f80 l     O .rwdata	00000020 lc_ctype_charset
00098f60 l     O .rwdata	00000020 lc_message_charset
00098fa0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00098398 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00087a00 l     F .text	000000fc __sprint_r.part.0
000984bc l     O .rodata	00000010 zeroes.4349
0008903c l     F .text	000000bc __sbprintf
000984cc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008da58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008db6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008db98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008df2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008e014 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008e100 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0008e2d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0009a224 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008e548 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0009a228 l     O .rwdata	00000004 lockid
0009be84 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0009a22c l     O .rwdata	00000004 lockid
0009be8c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0008ff80 l     F .text	00000048 OS_InitMisc
0008ffc8 l     F .text	0000006c OS_InitRdyList
00090134 l     F .text	000000e4 OS_InitTCBList
0008fea0 l     F .text	000000e0 OS_InitEventList
00090034 l     F .text	00000080 OS_InitTaskIdle
000900b4 l     F .text	00000080 OS_InitTaskStat
000903a4 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000920b4 l     F .text	000000f4 OS_FlagTaskRdy
00091e74 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0009618c l     F .text	00000034 alt_dev_reg
00099180 l     O .rwdata	0000106c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00096504 l     F .text	000002a4 altera_avalon_jtag_uart_irq
000967a8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00096f84 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000971c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00097384 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000974e4 l     F .text	0000003c alt_get_errno
00097520 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00087640 g     F .text	00000074 _mprec_log10
0009a27a g     O .rwdata	00000002 OSTaskNameSize
0008772c g     F .text	0000008c __any_on
00089ab8 g     F .text	00000054 _isatty_r
000983a4 g     O .rodata	00000028 __mprec_tinytens
0008e218 g     F .text	000000bc alt_main
0009bf14 g     O .bss	00000100 alt_irq
00089b0c g     F .text	00000060 _lseek_r
000928d4 g     F .text	000000d8 OS_MemInit
0009a2ac g       *ABS*	00000000 __flash_rwdata_start
0009612c g     F .text	00000060 OSTimeSet
0008c430 g     F .text	00000088 .hidden __eqdf2
0008ebf4 g     F .text	00000610 OSEventPendMulti
0009f238 g       *ABS*	00000000 __alt_heap_start
00097b5c g     F .text	00000024 OSTaskCreateHook
00081524 g     F .text	0000003c printf
0009a252 g     O .rwdata	00000002 OSMboxEn
0008f25c g     F .text	0000004c OSIntEnter
0008a3e4 g     F .text	0000009c _wcrtomb_r
00087904 g     F .text	0000005c __sseek
00085b08 g     F .text	00000010 __sinit
0008a28c g     F .text	00000140 __swbuf_r
0009a262 g     O .rwdata	00000002 OSQEn
00086114 g     F .text	0000007c _setlocale_r
00085960 g     F .text	00000078 __sfmoreglue
0008e8c8 g     F .text	000000cc __malloc_unlock
00097bc4 g     F .text	00000020 OSTaskStatHook
0009be94 g     O .bss	00000001 OSLockNesting
0009a2a0 g     O .rwdata	00000002 OSDataSize
0009be95 g     O .bss	00000001 OSRunning
00089b6c g     F .text	0000015c memmove
00097c04 g     F .text	00000020 OSInitHookBegin
0009a298 g     O .rwdata	00000002 OSTmrSize
00085af0 g     F .text	00000018 _cleanup
00086700 g     F .text	000000a8 _Balloc
0009be98 g     O .bss	00000004 OSIdleCtr
0008c4b8 g     F .text	000000dc .hidden __gtdf2
000979dc g       .text	00000000 OSStartTsk
000906d4 g     F .text	000002d4 OS_TCBInit
00080000 g     F .entry	0000000c __reset
0009be28 g     O .bss	00000004 int1sCounter
0009a29e g     O .rwdata	00000002 OSTmrWheelTblSize
00080020 g       *ABS*	00000000 __flash_exceptions_start
0009a23e g     O .rwdata	00000002 OSEventSize
0009be9c g     O .bss	00000001 OSPrioHighRdy
00089594 g     F .text	0000005c _fstat_r
00097b80 g     F .text	00000024 OSTaskDelHook
0009be60 g     O .bss	00000004 errno
00087880 g     F .text	00000008 __seofread
000979bc g       .text	00000000 OSStartHighRdy
00094bac g     F .text	000001e4 OSTaskCreateExt
000919bc g     F .text	00000060 OSFlagPendGetFlagsRdy
0009a27e g     O .rwdata	00000002 OSTaskStatStkSize
00090b38 g     F .text	00000308 OSFlagAccept
00092f18 g     F .text	000000b8 OSQFlush
000929ac g     F .text	00000140 OSQAccept
0009be7c g     O .bss	00000004 alt_argv
000a21ec g       *ABS*	00000000 _gp
00094a00 g     F .text	000001ac OSTaskCreate
00094510 g     F .text	000004f0 OSTaskChangePrio
0009be90 g     O .bss	00000004 alt_heapsem
000909a8 g     F .text	00000190 OSDebugInit
00094d90 g     F .text	00000344 OSTaskDel
00099000 g     O .rwdata	00000180 alt_fd_list
0009c014 g     O .bss	00000370 OSFlagTbl
0008fc80 g     F .text	000000b8 OS_EventTaskRemove
00097c88 g     F .text	00000090 alt_find_dev
00086490 g     F .text	00000148 memcpy
0009a268 g     O .rwdata	00000002 OSRdyTblSize
000857b0 g     F .text	0000000c _cleanup_r
0008d870 g     F .text	000000dc .hidden __floatsidf
00097468 g     F .text	0000007c alt_io_redirect
0008c594 g     F .text	000000f4 .hidden __ltdf2
000982a8 g       *ABS*	00000000 __DTOR_END__
0008e994 g     F .text	00000120 OSEventNameGet
0009a24c g     O .rwdata	00000002 OSFlagMax
000877b8 g     F .text	00000074 __fpclassifyd
0008759c g     F .text	000000a4 __ratio
0008f2a8 g     F .text	000000f8 OSIntExit
00089020 g     F .text	0000001c __vfiprintf_internal
0009a286 g     O .rwdata	00000002 OSTCBSize
0009be9d g     O .bss	00000001 OSPrioCur
00096a04 g     F .text	000002bc altera_avalon_jtag_uart_read
00080cc0 g     F .text	00000014 malloc
000814f4 g     F .text	00000030 _printf_r
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00080c04 g     F .text	00000064 .hidden __udivsi3
0008df68 g     F .text	000000ac isatty
0009a26c g     O .rwdata	00000002 OSStkWidth
00080558 g     F .text	000000ac checkStatus
00080690 g     F .text	000000d0 taskWriteHex0_3
000983f4 g     O .rodata	000000c8 __mprec_tens
0009a260 g     O .rwdata	00000002 OSPtrSize
00086190 g     F .text	0000000c __locale_charset
0009a240 g     O .rwdata	00000002 OSEventTblSize
00097930 g       .text	00000000 OSCtxSw
0009be5c g     O .bss	00000004 __malloc_top_pad
0009bea0 g     O .bss	00000004 OSTCBList
0009be70 g     O .bss	00000004 alt_fd_list_lock
0009a200 g     O .rwdata	00000004 __mb_cur_max
000861c0 g     F .text	0000000c _localeconv_r
000895f0 g     F .text	000004c8 __sfvwrite_r
00086b34 g     F .text	0000003c __i2b
0009c384 g     O .bss	00000c30 OSMemTbl
0009bea4 g     O .bss	00000001 OSTickStepState
00081560 g     F .text	00000054 _sbrk_r
0009a264 g     O .rwdata	00000002 OSQMax
0009cfb4 g     O .bss	00000800 OSTaskStatStk
00092510 g     F .text	000000f0 OSMemNameGet
0009a244 g     O .rwdata	00000002 OSFlagEn
00089cc8 g     F .text	00000060 _read_r
0009a28a g     O .rwdata	00000002 OSTimeTickHookEn
000933c8 g     F .text	00000168 OSQPost
000921a8 g     F .text	000000a4 OS_FlagUnlink
0009a218 g     O .rwdata	00000004 alt_max_fd
0009026c g     F .text	00000068 OS_MemCopy
000902d4 g     F .text	000000d0 OS_Sched
00089288 g     F .text	000000f0 _fclose_r
00092420 g     F .text	000000f0 OSMemGet
000953bc g     F .text	000001b4 OSTaskNameSet
00085778 g     F .text	00000030 fflush
0009be58 g     O .bss	00000004 __malloc_max_sbrked_mem
0009bea8 g     O .bss	00000004 OSCtxSwCtr
00097be4 g     F .text	00000020 OSTimeTickHook
0009a24e g     O .rwdata	00000002 OSFlagNameSize
0008fd38 g     F .text	00000100 OS_EventTaskRemoveMulti
0008b1b4 g     F .text	000008ac .hidden __adddf3
0009be34 g     O .bss	00000004 noPara1
0008fb30 g     F .text	00000150 OS_EventTaskWaitMulti
00087344 g     F .text	0000010c __b2d
0009a266 g     O .rwdata	00000002 OSQSize
0008abc8 g     F .text	000005c4 .hidden __umoddi3
0008e13c g     F .text	000000dc lseek
00093e78 g     F .text	0000020c OSSemPend
0009a1f8 g     O .rwdata	00000004 _global_impure_ptr
0009be38 g     O .bss	00000004 flags1
00089d28 g     F .text	00000564 _realloc_r
0009a250 g     O .rwdata	00000002 OSLowestPrio
0009f238 g       *ABS*	00000000 __bss_end
0008de3c g     F .text	000000f0 alt_iic_isr_register
00097c64 g     F .text	00000024 OSTCBInitHook
0009a296 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00097804 g     F .text	00000108 alt_tick
0008a5cc g     F .text	000005fc .hidden __udivdi3
000894f0 g     F .text	00000024 _fputwc_r
0009a238 g     O .rwdata	00000002 OSEventEn
000983cc g     O .rodata	00000028 __mprec_bigtens
00086918 g     F .text	00000104 __s2b
0009a292 g     O .rwdata	00000002 OSTmrCfgNameSize
0008d94c g     F .text	000000a8 .hidden __floatunsidf
00087084 g     F .text	00000060 __mcmp
00085b28 g     F .text	00000018 __fp_lock_all
0008ddf0 g     F .text	0000004c alt_ic_irq_enabled
00091fd4 g     F .text	000000e0 OS_FlagInit
00097768 g     F .text	0000009c alt_alarm_stop
0009a274 g     O .rwdata	00000002 OSTaskIdleStkSize
0009be74 g     O .bss	00000004 alt_irq_active
00093ab0 g     F .text	000000b0 OSSemAccept
00092714 g     F .text	000000d8 OSMemPut
0009224c g     F .text	000001d4 OSMemCreate
0009beac g     O .bss	00000004 OSIdleCtrMax
000800ec g     F .exceptions	000000d4 alt_irq_handler
00098fd8 g     O .rwdata	00000028 alt_dev_null
0009a288 g     O .rwdata	00000002 OSTicksPerSec
000801fc g     F .text	0000012c charToInt
00097930 g       .text	00000000 OSIntCtxSw
000971a4 g     F .text	00000020 alt_dcache_flush_all
00086a1c g     F .text	00000068 __hi0bits
0008d7f0 g     F .text	00000080 .hidden __fixdfsi
0009beb0 g     O .bss	00000004 OSTCBFreeList
0009a2ac g       *ABS*	00000000 __ram_rwdata_end
00094084 g     F .text	0000016c OSSemPendAbort
0009a210 g     O .rwdata	00000008 alt_dev_list
0008e584 g     F .text	00000100 write
0009a28c g     O .rwdata	00000002 OSVersionNbr
00098734 g       *ABS*	00000000 __ram_rodata_end
0008dbd4 g     F .text	000000b8 fstat
0008c594 g     F .text	000000f4 .hidden __ledf2
0009a234 g     O .rwdata	00000004 OSEndiannessTest
00086dfc g     F .text	00000140 __pow5mult
00087b14 g     F .text	0000150c ___vfiprintf_internal_r
0009be6c g     O .bss	00000004 __nlocale_changed
00080c68 g     F .text	00000058 .hidden __umodsi3
0008042c g     F .text	0000012c init_interrupt
0009a246 g     O .rwdata	00000002 OSFlagGrpSize
0009f238 g       *ABS*	00000000 end
0009be3c g     O .bss	00000004 taskWriteHex4_5_stk
00080604 g     F .text	0000008c counterInterrupt
000963bc g     F .text	00000148 altera_avalon_jtag_uart_init
0009053c g     F .text	000000cc OS_TaskStat
000982a8 g       *ABS*	00000000 __CTOR_LIST__
000be800 g       *ABS*	00000000 __alt_stack_pointer
00096ffc g     F .text	0000007c alt_avalon_timer_sc_init
0008d9f4 g     F .text	00000064 .hidden __clzsi2
00096cc0 g     F .text	000002c4 altera_avalon_jtag_uart_write
00085b18 g     F .text	00000004 __sfp_lock_acquire
000863ac g     F .text	000000e4 memchr
00090218 g     F .text	00000054 OS_MemClr
00081748 g     F .text	000022dc ___vfprintf_internal_r
00097a00 g     F .text	0000015c OSTaskStkInit
00085c7c g     F .text	00000310 _free_r
0008619c g     F .text	00000010 __locale_mb_cur_max
0008f888 g     F .text	00000198 OS_EventTaskRdy
000980f4 g     F .text	00000180 __call_exitprocs
0009beb4 g     O .bss	00000001 OSCPUUsage
0009be68 g     O .bss	00000004 __mlocale_changed
0009a1f0 g     O .rwdata	00000004 __malloc_sbrk_base
000801c0 g     F .text	0000003c _start
0009bee4 g     O .bss	00000004 _alt_tick_rate
00092fd0 g     F .text	0000028c OSQPend
00095c7c g     F .text	00000104 OSTimeDly
00080824 g     F .text	000000ec jtagInterrupt
00086f3c g     F .text	00000148 __lshift
0009bee8 g     O .bss	00000004 _alt_nticks
0008e310 g     F .text	00000104 read
000961f8 g     F .text	00000060 alt_sys_init
00097fdc g     F .text	00000118 __register_exitproc
0009beb5 g     O .bss	00000001 OSTaskCtr
00095d80 g     F .text	0000017c OSTimeDlyHMSM
00086b70 g     F .text	0000028c __multiply
000968ac g     F .text	00000068 altera_avalon_jtag_uart_close
00080328 g     F .text	00000104 dec2ToHex
0008b18c g     F .text	00000028 .hidden __mulsi3
00098734 g       *ABS*	00000000 __ram_rwdata_start
000982a8 g       *ABS*	00000000 __ram_rodata_start
0009beec g     O .bss	00000028 __malloc_current_mallinfo
0009a23a g     O .rwdata	00000002 OSEventMax
00087450 g     F .text	0000014c __d2b
000941f0 g     F .text	00000110 OSSemPost
0008f42c g     F .text	000000dc OSSchedUnlock
0009be24 g     O .bss	00000004 intCounter
00096258 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00097e20 g     F .text	000000f4 alt_get_fd
0009beb8 g     O .bss	00000004 OSMemFreeList
0008f578 g     F .text	000000b0 OSStatInit
0009be40 g     O .bss	00000004 taskWriteHex0_3_stk
00091db0 g     F .text	000000c4 OSFlagQuery
0009a270 g     O .rwdata	00000002 OSTaskCreateExtEn
00089158 g     F .text	00000054 _close_r
00097f60 g     F .text	0000007c memcmp
0008f868 g     F .text	00000020 OS_Dummy
00096318 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0009f238 g       *ABS*	00000000 __alt_stack_base
00096368 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083afc g     F .text	00000154 __swsetup_r
0009d7b4 g     O .bss	000001e0 OSQTbl
0008ba60 g     F .text	000009d0 .hidden __divdf3
000859d8 g     F .text	00000118 __sfp
00081690 g     F .text	000000b8 strncat
000876b4 g     F .text	00000078 __copybits
00098734 g     O .rwdata	00000408 __malloc_av_
00085b24 g     F .text	00000004 __sinit_lock_release
0009bebc g     O .bss	00000004 OSTCBHighRdy
0008c688 g     F .text	0000086c .hidden __muldf3
0008782c g     F .text	00000054 __sread
0009bec0 g     O .bss	00000004 OSQFreeList
00097d18 g     F .text	00000108 alt_find_file
00097200 g     F .text	000000a4 alt_dev_llist_insert
0008e7a8 g     F .text	00000120 __malloc_lock
0008e498 g     F .text	000000b0 sbrk
0008eab4 g     F .text	00000140 OSEventNameSet
0008571c g     F .text	0000005c _fflush_r
000891ac g     F .text	000000dc _calloc_r
0009bec4 g     O .bss	00000001 OSRdyGrp
0009be24 g       *ABS*	00000000 __bss_start
000865d8 g     F .text	00000128 memset
00080a38 g     F .text	000000d4 main
0009be80 g     O .bss	00000004 alt_envp
0009be54 g     O .bss	00000004 __malloc_max_total_mem
000962b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008a3cc g     F .text	00000018 __swbuf
000985fc g     O .rodata	00000100 OSUnMapTbl
0009a26a g     O .rwdata	00000002 OSSemEn
00091a1c g     F .text	00000394 OSFlagPost
00087960 g     F .text	00000008 __sclose
000be800 g       *ABS*	00000000 __alt_heap_limit
00089378 g     F .text	00000014 fclose
0008fa20 g     F .text	00000110 OS_EventTaskWait
00090608 g     F .text	000000cc OS_TaskStatStkChk
000950d4 g     F .text	00000150 OSTaskDelReq
00083e78 g     F .text	00001688 _dtoa_r
00080ce8 g     F .text	0000080c _malloc_r
0008a540 g     F .text	00000030 __ascii_wctomb
0009a21c g     O .rwdata	00000004 alt_errno
0008f508 g     F .text	00000070 OSStart
0008e748 g     F .text	00000060 __env_unlock
00085f8c g     F .text	000000c4 _fwalk
00095570 g     F .text	000001d4 OSTaskResume
000927ec g     F .text	000000e8 OSMemQuery
0009a27c g     O .rwdata	00000002 OSTaskStatEn
0009a256 g     O .rwdata	00000002 OSMemMax
00093530 g     F .text	00000170 OSQPostFront
00080b0c g     F .text	00000084 .hidden __divsi3
0009bec5 g     O .bss	00000003 OSRdyTbl
0009a230 g     O .rwdata	00000002 OSDebugEn
00085b58 g     F .text	00000124 _malloc_trim_r
000982a8 g       *ABS*	00000000 __CTOR_END__
0009a248 g     O .rwdata	00000002 OSFlagNodeSize
0009a290 g     O .rwdata	00000002 OSTmrCfgMax
000815b4 g     F .text	000000dc strcmp
00092aec g     F .text	000001ac OSQCreate
00095224 g     F .text	00000198 OSTaskNameGet
000982a8 g       *ABS*	00000000 __flash_rodata_start
000936a0 g     F .text	0000020c OSQPostOpt
0008f628 g     F .text	00000220 OSTimeTick
0009a278 g     O .rwdata	00000002 OSTaskMax
000982a8 g       *ABS*	00000000 __DTOR_LIST__
00093b60 g     F .text	000000d8 OSSemCreate
0009a29c g     O .rwdata	00000002 OSTmrWheelSize
00080760 g     F .text	000000c4 taskWriteHex4_5
0008c430 g     F .text	00000088 .hidden __nedf2
0009a272 g     O .rwdata	00000002 OSTaskDelEn
00094300 g     F .text	00000110 OSSemQuery
00092c98 g     F .text	00000280 OSQDel
0009325c g     F .text	0000016c OSQPendAbort
000961c0 g     F .text	00000038 alt_irq_init
0008e414 g     F .text	00000084 alt_release_fd
000984dc g     O .rodata	00000100 .hidden __clz_tab
0009be64 g     O .bss	00000004 _PathLocale
00097f14 g     F .text	00000014 atexit
000890f8 g     F .text	00000060 _write_r
0008f3a0 g     F .text	0000008c OSSchedLock
000861cc g     F .text	00000018 setlocale
00090e40 g     F .text	00000108 OSFlagCreate
0009a1fc g     O .rwdata	00000004 _impure_ptr
0009be78 g     O .bss	00000004 alt_argc
00085500 g     F .text	0000021c __sflush_r
00097304 g     F .text	00000060 _do_dtors
000861b8 g     F .text	00000008 __locale_cjk_lang
0009a242 g     O .rwdata	00000002 OSEventMultiEn
00090f48 g     F .text	00000248 OSFlagDel
0009bec8 g     O .bss	00000004 OSEventFreeList
00080020 g       .exceptions	00000000 alt_irq_entry
000872e0 g     F .text	00000064 __ulp
00091404 g     F .text	000005b8 OSFlagPend
0009a28e g     O .rwdata	00000002 OSTmrEn
00085b40 g     F .text	00000018 __fp_unlock_all
0009a208 g     O .rwdata	00000008 alt_fs_list
00090418 g     F .text	00000074 OS_StrCopy
0009a258 g     O .rwdata	00000002 OSMemNameSize
00097c24 g     F .text	00000020 OSInitHookEnd
00080020 g       *ABS*	00000000 __ram_exceptions_start
0009a284 g     O .rwdata	00000002 OSTCBPrioTblMax
000861e4 g     F .text	0000000c localeconv
0009a280 g     O .rwdata	00000002 OSTaskStatStkChkEn
0008dc8c g     F .text	00000050 alt_ic_isr_register
0009a254 g     O .rwdata	00000002 OSMemEn
0009a25e g     O .rwdata	00000002 OSMutexEn
0009a2ac g       *ABS*	00000000 _edata
0009f238 g       *ABS*	00000000 _end
0009becc g     O .bss	00000001 OSIntNesting
0009be44 g     O .bss	00000004 noPara
0008938c g     F .text	00000164 __fputwc
000801c0 g       *ABS*	00000000 __ram_exceptions_end
00096914 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00095efc g     F .text	000001d4 OSTimeDlyResume
000912b8 g     F .text	0000014c OSFlagNameSet
00095744 g     F .text	000001c0 OSTaskStkChk
0008dd64 g     F .text	0000008c alt_ic_irq_disable
0009a25a g     O .rwdata	00000002 OSMemSize
00087888 g     F .text	0000007c __swrite
0009a1f4 g     O .rwdata	00000004 __malloc_trim_threshold
0009790c g     F .text	00000024 altera_nios2_qsys_irq_init
000861ac g     F .text	0000000c __locale_msgcharset
0009bed0 g     O .bss	00000004 OSTCBCur
0009be48 g     O .bss	00000004 hex0_3Counter
00097f28 g     F .text	00000038 exit
0009be4c g     O .bss	00000004 flags
0009a25c g     O .rwdata	00000002 OSMemTblSize
00086050 g     F .text	000000c4 _fwalk_reent
000870e4 g     F .text	000001fc __mdiff
00080b90 g     F .text	00000074 .hidden __modsi3
000be800 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00085b1c g     F .text	00000004 __sfp_lock_release
0008f204 g     F .text	00000058 OSInit
00095ae8 g     F .text	00000124 OSTaskQuery
00093a08 g     F .text	000000a8 OS_QInit
0009048c g     F .text	00000054 OS_StrLen
00092600 g     F .text	00000114 OSMemNameSet
0009a276 g     O .rwdata	00000002 OSTaskProfileEn
0009bed4 g     O .bss	00000004 OSTime
0009d994 g     O .bss	00000800 OSTaskIdleStk
00098274 g     F .text	00000034 _exit
00097078 g     F .text	0000012c alt_alarm_start
00091190 g     F .text	00000128 OSFlagNameGet
000960d0 g     F .text	0000005c OSTimeGet
000861f0 g     F .text	000001bc __smakebuf_r
00087968 g     F .text	00000098 strlen
00097ba4 g     F .text	00000020 OSTaskSwHook
0009760c g     F .text	0000015c open
0009e194 g     O .bss	00000b40 OSEventTbl
0008c4b8 g     F .text	000000dc .hidden __gedf2
0009ecd4 g     O .bss	00000510 OSTCBTbl
00094410 g     F .text	00000100 OSSemSet
0009a204 g     O .rwdata	00000004 __wctomb
00087afc g     F .text	00000018 __sprint_r
00097364 g     F .text	00000020 alt_icache_flush_all
0009a220 g     O .rwdata	00000004 alt_priority_mask
00093c38 g     F .text	00000240 OSSemDel
0009bed8 g     O .bss	00000004 OSFlagFreeList
0008dcdc g     F .text	00000088 alt_ic_irq_enable
0009a23c g     O .rwdata	00000002 OSEventNameSize
00083a24 g     F .text	0000001c __vfprintf_internal
0009bedc g     O .bss	00000001 OSStatRdy
0009f1e4 g     O .bss	00000054 OSTCBPrioTbl
0008a570 g     F .text	0000005c _wctomb_r
0008e684 g     F .text	000000c4 __env_lock
0009a282 g     O .rwdata	00000002 OSTaskSwHookEn
0008cef4 g     F .text	000008fc .hidden __subdf3
00086a84 g     F .text	000000b0 __lo0bits
0009be50 g     O .bss	00000004 hex4_5Counter
0009a2a4 g     O .rwdata	00000008 alt_alarm_list
0009a24a g     O .rwdata	00000002 OSFlagWidth
000972a4 g     F .text	00000060 _do_ctors
0008a480 g     F .text	000000c0 wcrtomb
0008da94 g     F .text	000000d8 close
0009be88 g     O .bss	00000004 alt_envsem
0009bee0 g     O .bss	00000004 OSIdleCtrRun
00080910 g     F .text	00000128 write7SegDisplay
0009a1ec g     O .rwdata	00000004 runTimer
0008f848 g     F .text	00000020 OSVersion
0009a294 g     O .rwdata	00000002 OSTmrCfgWheelSize
0008e07c g     F .text	00000084 alt_load
00095c0c g     F .text	00000070 OS_TaskStkClr
0009a26e g     O .rwdata	00000002 OSTaskCreateEn
0008fe38 g     F .text	00000068 OS_EventWaitListInit
00089514 g     F .text	00000080 fputwc
00097c44 g     F .text	00000020 OSTaskIdleHook
00080cd4 g     F .text	00000014 free
00085b20 g     F .text	00000004 __sinit_lock_acquire
000867d0 g     F .text	00000148 __multadd
000867a8 g     F .text	00000028 _Bfree
00095904 g     F .text	000001e4 OSTaskSuspend
000904e0 g     F .text	0000005c OS_TaskIdle
0009a29a g     O .rwdata	00000002 OSTmrTblSize
000938ac g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08407014 	ori	at,at,448
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	008f25c0 	call	8f25c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001426 	beq	r2,zero,8017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	008002b4 	movhi	r2,10
   80130:	10afc504 	addi	r2,r2,-16620
   80134:	e0fffd17 	ldw	r3,-12(fp)
   80138:	180690fa 	slli	r3,r3,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	008002b4 	movhi	r2,10
   80148:	10afc504 	addi	r2,r2,-16620
   8014c:	e13ffd17 	ldw	r4,-12(fp)
   80150:	200890fa 	slli	r4,r4,3
   80154:	1105883a 	add	r2,r2,r4
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	00000706 	br	80198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8017c:	e0bffc17 	ldw	r2,-16(fp)
   80180:	1085883a 	add	r2,r2,r2
   80184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80188:	e0bffd17 	ldw	r2,-12(fp)
   8018c:	10800044 	addi	r2,r2,1
   80190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   80194:	003fe106 	br	8011c <__alt_data_end+0xfffc191c>

    active = alt_irq_pending ();
   80198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8019c:	e0bffb17 	ldw	r2,-20(fp)
   801a0:	103fdb1e 	bne	r2,zero,80110 <__alt_data_end+0xfffc1910>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801a4:	008f2a80 	call	8f2a8 <OSIntExit>
}
   801a8:	0001883a 	nop
   801ac:	e037883a 	mov	sp,fp
   801b0:	dfc00117 	ldw	ra,4(sp)
   801b4:	df000017 	ldw	fp,0(sp)
   801b8:	dec00204 	addi	sp,sp,8
   801bc:	f800283a 	ret

Disassembly of section .text:

000801c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801c0:	06c002f4 	movhi	sp,11
    ori sp, sp, %lo(__alt_stack_pointer)
   801c4:	defa0014 	ori	sp,sp,59392
    movhi gp, %hi(_gp)
   801c8:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   801cc:	d6887b14 	ori	gp,gp,8684
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801d0:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801d4:	10af8914 	ori	r2,r2,48676

    movhi r3, %hi(__bss_end)
   801d8:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801dc:	18fc8e14 	ori	r3,r3,62008

    beq r2, r3, 1f
   801e0:	10c00326 	beq	r2,r3,801f0 <_start+0x30>

0:
    stw zero, (r2)
   801e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801ec:	10fffd36 	bltu	r2,r3,801e4 <__alt_data_end+0xfffc19e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801f0:	008e07c0 	call	8e07c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801f4:	008e2180 	call	8e218 <alt_main>

000801f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f8:	003fff06 	br	801f8 <__alt_data_end+0xfffc19f8>

000801fc <charToInt>:

volatile int runTimer = 1;	// AANPASSEN

//Convert a char hexadecimal character to its corresponding int value
int charToInt(char convert)
{
   801fc:	defffe04 	addi	sp,sp,-8
   80200:	df000115 	stw	fp,4(sp)
   80204:	df000104 	addi	fp,sp,4
   80208:	2005883a 	mov	r2,r4
   8020c:	e0bfff05 	stb	r2,-4(fp)
	switch(convert){
   80210:	e0bfff07 	ldb	r2,-4(fp)
   80214:	10bff404 	addi	r2,r2,-48
   80218:	10c005e8 	cmpgeui	r3,r2,23
   8021c:	18003d1e 	bne	r3,zero,80314 <charToInt+0x118>
   80220:	100690ba 	slli	r3,r2,2
   80224:	00800234 	movhi	r2,8
   80228:	10808e04 	addi	r2,r2,568
   8022c:	1885883a 	add	r2,r3,r2
   80230:	10800017 	ldw	r2,0(r2)
   80234:	1000683a 	jmp	r2
   80238:	00080294 	movui	zero,8202
   8023c:	0008029c 	xori	zero,zero,8202
   80240:	000802a4 	muli	zero,zero,8202
   80244:	000802ac 	andhi	zero,zero,8202
   80248:	000802b4 	movhi	zero,8202
   8024c:	000802bc 	xorhi	zero,zero,8202
   80250:	000802c4 	movi	zero,8203
   80254:	000802cc 	andi	zero,zero,8203
   80258:	000802d4 	movui	zero,8203
   8025c:	000802dc 	xori	zero,zero,8203
   80260:	00080314 	movui	zero,8204
   80264:	00080314 	movui	zero,8204
   80268:	00080314 	movui	zero,8204
   8026c:	00080314 	movui	zero,8204
   80270:	00080314 	movui	zero,8204
   80274:	00080314 	movui	zero,8204
   80278:	00080314 	movui	zero,8204
   8027c:	000802e4 	muli	zero,zero,8203
   80280:	000802ec 	andhi	zero,zero,8203
   80284:	000802f4 	movhi	zero,8203
   80288:	000802fc 	xorhi	zero,zero,8203
   8028c:	00080304 	movi	zero,8204
   80290:	0008030c 	andi	zero,zero,8204
        case '0' : return 0; break;
   80294:	0005883a 	mov	r2,zero
   80298:	00001f06 	br	80318 <charToInt+0x11c>
        case '1' : return 1; break;
   8029c:	00800044 	movi	r2,1
   802a0:	00001d06 	br	80318 <charToInt+0x11c>
        case '2' : return 2; break;
   802a4:	00800084 	movi	r2,2
   802a8:	00001b06 	br	80318 <charToInt+0x11c>
        case '3' : return 3; break;
   802ac:	008000c4 	movi	r2,3
   802b0:	00001906 	br	80318 <charToInt+0x11c>
        case '4' : return 4; break;
   802b4:	00800104 	movi	r2,4
   802b8:	00001706 	br	80318 <charToInt+0x11c>
        case '5' : return 5; break;
   802bc:	00800144 	movi	r2,5
   802c0:	00001506 	br	80318 <charToInt+0x11c>
        case '6' : return 6; break;
   802c4:	00800184 	movi	r2,6
   802c8:	00001306 	br	80318 <charToInt+0x11c>
        case '7' : return 7; break;
   802cc:	008001c4 	movi	r2,7
   802d0:	00001106 	br	80318 <charToInt+0x11c>
        case '8' : return 8; break;
   802d4:	00800204 	movi	r2,8
   802d8:	00000f06 	br	80318 <charToInt+0x11c>
        case '9' : return 9; break;
   802dc:	00800244 	movi	r2,9
   802e0:	00000d06 	br	80318 <charToInt+0x11c>
        case 'A' : return 10; break;
   802e4:	00800284 	movi	r2,10
   802e8:	00000b06 	br	80318 <charToInt+0x11c>
        case 'B' : return 11; break;
   802ec:	008002c4 	movi	r2,11
   802f0:	00000906 	br	80318 <charToInt+0x11c>
        case 'C' : return 12; break;
   802f4:	00800304 	movi	r2,12
   802f8:	00000706 	br	80318 <charToInt+0x11c>
        case 'D' : return 13; break;
   802fc:	00800344 	movi	r2,13
   80300:	00000506 	br	80318 <charToInt+0x11c>
        case 'E' : return 14; break;
   80304:	00800384 	movi	r2,14
   80308:	00000306 	br	80318 <charToInt+0x11c>
        case 'F' : return 15; break;
   8030c:	008003c4 	movi	r2,15
   80310:	00000106 	br	80318 <charToInt+0x11c>
        default  : return 0;
   80314:	0005883a 	mov	r2,zero
    }
}
   80318:	e037883a 	mov	sp,fp
   8031c:	df000017 	ldw	fp,0(sp)
   80320:	dec00104 	addi	sp,sp,4
   80324:	f800283a 	ret

00080328 <dec2ToHex>:

char* dec2ToHex(int decimalnum)
{
   80328:	defffa04 	addi	sp,sp,-24
   8032c:	df000515 	stw	fp,20(sp)
   80330:	df000504 	addi	fp,sp,20
   80334:	e13fff15 	stw	r4,-4(fp)
    int quotient, remainder;
    int j = 0;
   80338:	e03ffc15 	stw	zero,-16(fp)
    static char hexadecimalnum[MAX_HEX_SIZE];

    for(int i = 0; i < MAX_HEX_SIZE; i++)
   8033c:	e03ffd15 	stw	zero,-12(fp)
   80340:	00000806 	br	80364 <dec2ToHex+0x3c>
        hexadecimalnum[i] = '0';
   80344:	e0fffd17 	ldw	r3,-12(fp)
   80348:	d0a71004 	addi	r2,gp,-25536
   8034c:	1885883a 	add	r2,r3,r2
   80350:	00c00c04 	movi	r3,48
   80354:	10c00005 	stb	r3,0(r2)
{
    int quotient, remainder;
    int j = 0;
    static char hexadecimalnum[MAX_HEX_SIZE];

    for(int i = 0; i < MAX_HEX_SIZE; i++)
   80358:	e0bffd17 	ldw	r2,-12(fp)
   8035c:	10800044 	addi	r2,r2,1
   80360:	e0bffd15 	stw	r2,-12(fp)
   80364:	e0bffd17 	ldw	r2,-12(fp)
   80368:	10800190 	cmplti	r2,r2,6
   8036c:	103ff51e 	bne	r2,zero,80344 <__alt_data_end+0xfffc1b44>
        hexadecimalnum[i] = '0';

    quotient = decimalnum;
   80370:	e0bfff17 	ldw	r2,-4(fp)
   80374:	e0bffb15 	stw	r2,-20(fp)

    while (quotient != 0)
   80378:	00002506 	br	80410 <dec2ToHex+0xe8>
    {
        remainder = quotient % 16;
   8037c:	e0fffb17 	ldw	r3,-20(fp)
   80380:	00a00034 	movhi	r2,32768
   80384:	108003c4 	addi	r2,r2,15
   80388:	1884703a 	and	r2,r3,r2
   8038c:	1000040e 	bge	r2,zero,803a0 <dec2ToHex+0x78>
   80390:	10bfffc4 	addi	r2,r2,-1
   80394:	00fffc04 	movi	r3,-16
   80398:	10c4b03a 	or	r2,r2,r3
   8039c:	10800044 	addi	r2,r2,1
   803a0:	e0bffe15 	stw	r2,-8(fp)
        if (remainder < 10)
   803a4:	e0bffe17 	ldw	r2,-8(fp)
   803a8:	10800288 	cmpgei	r2,r2,10
   803ac:	10000a1e 	bne	r2,zero,803d8 <dec2ToHex+0xb0>
            hexadecimalnum[j++] = 48 + remainder;
   803b0:	e0bffc17 	ldw	r2,-16(fp)
   803b4:	10c00044 	addi	r3,r2,1
   803b8:	e0fffc15 	stw	r3,-16(fp)
   803bc:	e0fffe17 	ldw	r3,-8(fp)
   803c0:	18c00c04 	addi	r3,r3,48
   803c4:	1809883a 	mov	r4,r3
   803c8:	d0e71004 	addi	r3,gp,-25536
   803cc:	10c5883a 	add	r2,r2,r3
   803d0:	11000005 	stb	r4,0(r2)
   803d4:	00000906 	br	803fc <dec2ToHex+0xd4>
        else
            hexadecimalnum[j++] = 55 + remainder;
   803d8:	e0bffc17 	ldw	r2,-16(fp)
   803dc:	10c00044 	addi	r3,r2,1
   803e0:	e0fffc15 	stw	r3,-16(fp)
   803e4:	e0fffe17 	ldw	r3,-8(fp)
   803e8:	18c00dc4 	addi	r3,r3,55
   803ec:	1809883a 	mov	r4,r3
   803f0:	d0e71004 	addi	r3,gp,-25536
   803f4:	10c5883a 	add	r2,r2,r3
   803f8:	11000005 	stb	r4,0(r2)
        quotient = quotient / 16;
   803fc:	e0bffb17 	ldw	r2,-20(fp)
   80400:	1000010e 	bge	r2,zero,80408 <dec2ToHex+0xe0>
   80404:	108003c4 	addi	r2,r2,15
   80408:	1005d13a 	srai	r2,r2,4
   8040c:	e0bffb15 	stw	r2,-20(fp)
    for(int i = 0; i < MAX_HEX_SIZE; i++)
        hexadecimalnum[i] = '0';

    quotient = decimalnum;

    while (quotient != 0)
   80410:	e0bffb17 	ldw	r2,-20(fp)
   80414:	103fd91e 	bne	r2,zero,8037c <__alt_data_end+0xfffc1b7c>
            hexadecimalnum[j++] = 48 + remainder;
        else
            hexadecimalnum[j++] = 55 + remainder;
        quotient = quotient / 16;
    }
    return hexadecimalnum;
   80418:	d0a71004 	addi	r2,gp,-25536
}
   8041c:	e037883a 	mov	sp,fp
   80420:	df000017 	ldw	fp,0(sp)
   80424:	dec00104 	addi	sp,sp,4
   80428:	f800283a 	ret

0008042c <init_interrupt>:

void init_interrupt(){
   8042c:	defff804 	addi	sp,sp,-32
   80430:	dfc00715 	stw	ra,28(sp)
   80434:	df000615 	stw	fp,24(sp)
   80438:	df000604 	addi	fp,sp,24
		/*Set interrupt for interval timer*/
		int counter	= 50000;	// 1/(50MHz) x (50000) = 1msec
   8043c:	00b0d414 	movui	r2,50000
   80440:	e0bffb15 	stw	r2,-20(fp)
		IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, counter & 0xFFFF);
   80444:	e0bffb17 	ldw	r2,-20(fp)
   80448:	10ffffcc 	andi	r3,r2,65535
   8044c:	00800134 	movhi	r2,4
   80450:	10800a04 	addi	r2,r2,40
   80454:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, (counter >> 16) & 0xFFFF);
   80458:	e0bffb17 	ldw	r2,-20(fp)
   8045c:	1004d43a 	srli	r2,r2,16
   80460:	1007883a 	mov	r3,r2
   80464:	00800134 	movhi	r2,4
   80468:	10800b04 	addi	r2,r2,44
   8046c:	10c00035 	stwio	r3,0(r2)

		//Set control register bits
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x7);
   80470:	00c001c4 	movi	r3,7
   80474:	00800134 	movhi	r2,4
   80478:	10800904 	addi	r2,r2,36
   8047c:	10c00035 	stwio	r3,0(r2)
		//Set control register bits, enable Write interrupts
		IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_0_BASE, 0x2);
   80480:	00c00084 	movi	r3,2
   80484:	00800134 	movhi	r2,4
   80488:	10801304 	addi	r2,r2,76
   8048c:	10c00035 	stwio	r3,0(r2)

		void* isrPara  = (void *) &noPara;
   80490:	d0a71604 	addi	r2,gp,-25512
   80494:	e0bffc15 	stw	r2,-16(fp)
		void* noFlags  = (void *) &flags;
   80498:	d0a71804 	addi	r2,gp,-25504
   8049c:	e0bffd15 	stw	r2,-12(fp)
		void* isrPara1 = (void *) &noPara1;
   804a0:	d0a71204 	addi	r2,gp,-25528
   804a4:	e0bffe15 	stw	r2,-8(fp)
		void* noFlags1 = (void *) &flags1;
   804a8:	d0a71304 	addi	r2,gp,-25524
   804ac:	e0bfff15 	stw	r2,-4(fp)
		//uitzoeken wat void isr_context moet zijn en de flags
		if(alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ, counterInterrupt, isrPara, noFlags) != 0){
   804b0:	e0bffd17 	ldw	r2,-12(fp)
   804b4:	d8800015 	stw	r2,0(sp)
   804b8:	e1fffc17 	ldw	r7,-16(fp)
   804bc:	01800234 	movhi	r6,8
   804c0:	31818104 	addi	r6,r6,1540
   804c4:	01400144 	movi	r5,5
   804c8:	0009883a 	mov	r4,zero
   804cc:	008dc8c0 	call	8dc8c <alt_ic_isr_register>
   804d0:	10000326 	beq	r2,zero,804e0 <init_interrupt+0xb4>
			printf("Error in initializing interval timer interrupt");
   804d4:	010002b4 	movhi	r4,10
   804d8:	2120aa04 	addi	r4,r4,-32088
   804dc:	00815240 	call	81524 <printf>
		}
		/*Set jtag_uart interrupt */
		if(alt_ic_isr_register(JTAG_UART_0_IRQ_INTERRUPT_CONTROLLER_ID,JTAG_UART_0_IRQ, jtagInterrupt, isrPara1, noFlags1) != 0){
   804e0:	e0bfff17 	ldw	r2,-4(fp)
   804e4:	d8800015 	stw	r2,0(sp)
   804e8:	e1fffe17 	ldw	r7,-8(fp)
   804ec:	01800234 	movhi	r6,8
   804f0:	31820904 	addi	r6,r6,2084
   804f4:	01400184 	movi	r5,6
   804f8:	0009883a 	mov	r4,zero
   804fc:	008dc8c0 	call	8dc8c <alt_ic_isr_register>
   80500:	10000326 	beq	r2,zero,80510 <init_interrupt+0xe4>
			printf("Error in initializing jtag_uart interrupt");
   80504:	010002b4 	movhi	r4,10
   80508:	2120b604 	addi	r4,r4,-32040
   8050c:	00815240 	call	81524 <printf>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80510:	00800044 	movi	r2,1
   80514:	1001703a 	wrctl	status,r2
		}

		alt_irq_cpu_enable_interrupts();
		alt_ic_irq_enable(JTAG_UART_0_IRQ_INTERRUPT_CONTROLLER_ID,jtagInterrupt);
   80518:	00800234 	movhi	r2,8
   8051c:	10820904 	addi	r2,r2,2084
   80520:	100b883a 	mov	r5,r2
   80524:	0009883a 	mov	r4,zero
   80528:	008dcdc0 	call	8dcdc <alt_ic_irq_enable>
		alt_ic_irq_enable(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, counterInterrupt);
   8052c:	00800234 	movhi	r2,8
   80530:	10818104 	addi	r2,r2,1540
   80534:	100b883a 	mov	r5,r2
   80538:	0009883a 	mov	r4,zero
   8053c:	008dcdc0 	call	8dcdc <alt_ic_irq_enable>
}
   80540:	0001883a 	nop
   80544:	e037883a 	mov	sp,fp
   80548:	dfc00117 	ldw	ra,4(sp)
   8054c:	df000017 	ldw	fp,0(sp)
   80550:	dec00204 	addi	sp,sp,8
   80554:	f800283a 	ret

00080558 <checkStatus>:



void checkStatus(){
   80558:	deffdd04 	addi	sp,sp,-140
   8055c:	dfc02215 	stw	ra,136(sp)
   80560:	df002115 	stw	fp,132(sp)
   80564:	df002104 	addi	fp,sp,132
	INT8U err;
	INT32U stk_size;
	void *pext;
	INT8U status;

	err = OSTaskQuery(taskWriteHex0_3Priority, &task_data);
   80568:	e0bfe304 	addi	r2,fp,-116
   8056c:	100b883a 	mov	r5,r2
   80570:	010003c4 	movi	r4,15
   80574:	0095ae80 	call	95ae8 <OSTaskQuery>
   80578:	e0bfdf05 	stb	r2,-132(fp)
	if(err == OS_NO_ERR){
   8057c:	e0bfdf03 	ldbu	r2,-132(fp)
   80580:	1000041e 	bne	r2,zero,80594 <checkStatus+0x3c>
		pext = task_data.OSTCBExtPtr;
   80584:	e0bfe417 	ldw	r2,-112(fp)
   80588:	e0bfe015 	stw	r2,-128(fp)
		status = task_data.OSTCBStat;
   8058c:	e0bfef03 	ldbu	r2,-68(fp)
   80590:	e0bfe105 	stb	r2,-124(fp)
	}
	err = OSTaskQuery(taskWriteHex4_5Priority, &task_data);
   80594:	e0bfe304 	addi	r2,fp,-116
   80598:	100b883a 	mov	r5,r2
   8059c:	01000384 	movi	r4,14
   805a0:	0095ae80 	call	95ae8 <OSTaskQuery>
   805a4:	e0bfdf05 	stb	r2,-132(fp)
	if(err == OS_NO_ERR){
   805a8:	e0bfdf03 	ldbu	r2,-132(fp)
   805ac:	1000041e 	bne	r2,zero,805c0 <checkStatus+0x68>
		pext = task_data.OSTCBExtPtr;
   805b0:	e0bfe417 	ldw	r2,-112(fp)
   805b4:	e0bfe015 	stw	r2,-128(fp)
		status = task_data.OSTCBStat;
   805b8:	e0bfef03 	ldbu	r2,-68(fp)
   805bc:	e0bfe105 	stb	r2,-124(fp)
	}
	err = OSTaskStkChk(taskWriteHex0_3Priority, &stk_data);
   805c0:	e0bffe04 	addi	r2,fp,-8
   805c4:	100b883a 	mov	r5,r2
   805c8:	010003c4 	movi	r4,15
   805cc:	00957440 	call	95744 <OSTaskStkChk>
   805d0:	e0bfdf05 	stb	r2,-132(fp)
	if(err == OS_NO_ERR){
   805d4:	e0bfdf03 	ldbu	r2,-132(fp)
   805d8:	1000041e 	bne	r2,zero,805ec <checkStatus+0x94>
		stk_size = stk_data.OSFree;
   805dc:	e0bffe17 	ldw	r2,-8(fp)
   805e0:	e0bfe215 	stw	r2,-120(fp)
		stk_size = stk_data.OSUsed;
   805e4:	e0bfff17 	ldw	r2,-4(fp)
   805e8:	e0bfe215 	stw	r2,-120(fp)
	}

}
   805ec:	0001883a 	nop
   805f0:	e037883a 	mov	sp,fp
   805f4:	dfc00117 	ldw	ra,4(sp)
   805f8:	df000017 	ldw	fp,0(sp)
   805fc:	dec00204 	addi	sp,sp,8
   80600:	f800283a 	ret

00080604 <counterInterrupt>:
void counterInterrupt(void* pdata){
   80604:	defffd04 	addi	sp,sp,-12
   80608:	dfc00215 	stw	ra,8(sp)
   8060c:	df000115 	stw	fp,4(sp)
   80610:	df000104 	addi	fp,sp,4
   80614:	e13fff15 	stw	r4,-4(fp)
	checkStatus();
   80618:	00805580 	call	80558 <checkStatus>
	if(runTimer == 1){
   8061c:	d0a00017 	ldw	r2,-32768(gp)
   80620:	10800058 	cmpnei	r2,r2,1
   80624:	1000141e 	bne	r2,zero,80678 <counterInterrupt+0x74>
		if(((intCounter % 1000) == 0) && intCounter != 0){
   80628:	d0a70e17 	ldw	r2,-25544(gp)
   8062c:	0140fa04 	movi	r5,1000
   80630:	1009883a 	mov	r4,r2
   80634:	0080b900 	call	80b90 <__modsi3>
   80638:	10000b1e 	bne	r2,zero,80668 <counterInterrupt+0x64>
   8063c:	d0a70e17 	ldw	r2,-25544(gp)
   80640:	10000926 	beq	r2,zero,80668 <counterInterrupt+0x64>
			hex4_5Counter = ++int1sCounter;
   80644:	d0a70f17 	ldw	r2,-25540(gp)
   80648:	10800044 	addi	r2,r2,1
   8064c:	d0a70f15 	stw	r2,-25540(gp)
   80650:	d0a71915 	stw	r2,-25500(gp)
			OSTaskSuspend(taskWriteHex0_3Priority);
   80654:	010003c4 	movi	r4,15
   80658:	00959040 	call	95904 <OSTaskSuspend>
			OSTaskResume(taskWriteHex4_5Priority);
   8065c:	01000384 	movi	r4,14
   80660:	00955700 	call	95570 <OSTaskResume>
	}else{
//		//sleep the threads so they cant increase counter;
//		OSTaskSuspend(taskWriteHex0_3Priority);
//		OSTaskSuspend(taskWriteHex4_5Priority);
	}
}
   80664:	00000406 	br	80678 <counterInterrupt+0x74>
		if(((intCounter % 1000) == 0) && intCounter != 0){
			hex4_5Counter = ++int1sCounter;
			OSTaskSuspend(taskWriteHex0_3Priority);
			OSTaskResume(taskWriteHex4_5Priority);
		}else{
			OSTaskSuspend(taskWriteHex4_5Priority);
   80668:	01000384 	movi	r4,14
   8066c:	00959040 	call	95904 <OSTaskSuspend>
			OSTaskResume(taskWriteHex0_3Priority);
   80670:	010003c4 	movi	r4,15
   80674:	00955700 	call	95570 <OSTaskResume>
	}else{
//		//sleep the threads so they cant increase counter;
//		OSTaskSuspend(taskWriteHex0_3Priority);
//		OSTaskSuspend(taskWriteHex4_5Priority);
	}
}
   80678:	0001883a 	nop
   8067c:	e037883a 	mov	sp,fp
   80680:	dfc00117 	ldw	ra,4(sp)
   80684:	df000017 	ldw	fp,0(sp)
   80688:	dec00204 	addi	sp,sp,8
   8068c:	f800283a 	ret

00080690 <taskWriteHex0_3>:


void taskWriteHex0_3(void* pdata){
   80690:	defff904 	addi	sp,sp,-28
   80694:	dfc00615 	stw	ra,24(sp)
   80698:	df000515 	stw	fp,20(sp)
   8069c:	df000504 	addi	fp,sp,20
   806a0:	e13fff15 	stw	r4,-4(fp)
	int displaySelector = 0;
   806a4:	e03ffb15 	stw	zero,-20(fp)
	while(1){
		displaySelector = 0;
   806a8:	e03ffb15 	stw	zero,-20(fp)
		if(runTimer == 1){
   806ac:	d0a00017 	ldw	r2,-32768(gp)
   806b0:	10800058 	cmpnei	r2,r2,1
   806b4:	1000271e 	bne	r2,zero,80754 <taskWriteHex0_3+0xc4>
			char *intCounterHex;
			volatile int * interval_timer_ptr = (int *)TIMER_0_BASE;
   806b8:	00800134 	movhi	r2,4
   806bc:	10800804 	addi	r2,r2,32
   806c0:	e0bffd15 	stw	r2,-12(fp)
			*(interval_timer_ptr) = 0;
   806c4:	e0bffd17 	ldw	r2,-12(fp)
   806c8:	10000015 	stw	zero,0(r2)

			intCounter++;
   806cc:	d0a70e17 	ldw	r2,-25544(gp)
   806d0:	10800044 	addi	r2,r2,1
   806d4:	d0a70e15 	stw	r2,-25544(gp)
			if(intCounter > 65535) intCounter = 0;
   806d8:	d0a70e17 	ldw	r2,-25544(gp)
   806dc:	00ffffd4 	movui	r3,65535
   806e0:	1880010e 	bge	r3,r2,806e8 <taskWriteHex0_3+0x58>
   806e4:	d0270e15 	stw	zero,-25544(gp)
			hex0_3Counter = intCounter;
   806e8:	d0a70e17 	ldw	r2,-25544(gp)
   806ec:	d0a71715 	stw	r2,-25508(gp)
			intCounterHex = dec2ToHex(intCounter);
   806f0:	d0a70e17 	ldw	r2,-25544(gp)
   806f4:	1009883a 	mov	r4,r2
   806f8:	00803280 	call	80328 <dec2ToHex>
   806fc:	e0bffe15 	stw	r2,-8(fp)


			for(int i = 0; i < 4; i++){
   80700:	e03ffc15 	stw	zero,-16(fp)
   80704:	00001006 	br	80748 <taskWriteHex0_3+0xb8>
				write7SegDisplay(intCounterHex[i], displaySelector);
   80708:	e0bffc17 	ldw	r2,-16(fp)
   8070c:	e0fffe17 	ldw	r3,-8(fp)
   80710:	1885883a 	add	r2,r3,r2
   80714:	10800003 	ldbu	r2,0(r2)
   80718:	10803fcc 	andi	r2,r2,255
   8071c:	1080201c 	xori	r2,r2,128
   80720:	10bfe004 	addi	r2,r2,-128
   80724:	e17ffb17 	ldw	r5,-20(fp)
   80728:	1009883a 	mov	r4,r2
   8072c:	00809100 	call	80910 <write7SegDisplay>
				displaySelector++;
   80730:	e0bffb17 	ldw	r2,-20(fp)
   80734:	10800044 	addi	r2,r2,1
   80738:	e0bffb15 	stw	r2,-20(fp)
			if(intCounter > 65535) intCounter = 0;
			hex0_3Counter = intCounter;
			intCounterHex = dec2ToHex(intCounter);


			for(int i = 0; i < 4; i++){
   8073c:	e0bffc17 	ldw	r2,-16(fp)
   80740:	10800044 	addi	r2,r2,1
   80744:	e0bffc15 	stw	r2,-16(fp)
   80748:	e0bffc17 	ldw	r2,-16(fp)
   8074c:	10800110 	cmplti	r2,r2,4
   80750:	103fed1e 	bne	r2,zero,80708 <__alt_data_end+0xfffc1f08>
				write7SegDisplay(intCounterHex[i], displaySelector);
				displaySelector++;
			}
		}
		OSTaskSuspend(OS_PRIO_SELF);
   80754:	01003fc4 	movi	r4,255
   80758:	00959040 	call	95904 <OSTaskSuspend>
	}
   8075c:	003fd206 	br	806a8 <__alt_data_end+0xfffc1ea8>

00080760 <taskWriteHex4_5>:
}

void taskWriteHex4_5(void* pdata){
   80760:	defff904 	addi	sp,sp,-28
   80764:	dfc00615 	stw	ra,24(sp)
   80768:	df000515 	stw	fp,20(sp)
   8076c:	df000504 	addi	fp,sp,20
   80770:	e13fff15 	stw	r4,-4(fp)
	int displaySelector = 4;
   80774:	00800104 	movi	r2,4
   80778:	e0bffb15 	stw	r2,-20(fp)
	while(1){
		displaySelector = 4;
   8077c:	00800104 	movi	r2,4
   80780:	e0bffb15 	stw	r2,-20(fp)
		if(runTimer == 1){
   80784:	d0a00017 	ldw	r2,-32768(gp)
   80788:	10800058 	cmpnei	r2,r2,1
   8078c:	1000221e 	bne	r2,zero,80818 <taskWriteHex4_5+0xb8>
			char *intCounterHex;
			volatile int * interval_timer_ptr = (int *)TIMER_0_BASE;
   80790:	00800134 	movhi	r2,4
   80794:	10800804 	addi	r2,r2,32
   80798:	e0bffd15 	stw	r2,-12(fp)
			*(interval_timer_ptr) = 0;
   8079c:	e0bffd17 	ldw	r2,-12(fp)
   807a0:	10000015 	stw	zero,0(r2)

			if(int1sCounter > 255) int1sCounter = 0;
   807a4:	d0a70f17 	ldw	r2,-25540(gp)
   807a8:	10804010 	cmplti	r2,r2,256
   807ac:	1000011e 	bne	r2,zero,807b4 <taskWriteHex4_5+0x54>
   807b0:	d0270f15 	stw	zero,-25540(gp)
			intCounterHex = dec2ToHex(int1sCounter);
   807b4:	d0a70f17 	ldw	r2,-25540(gp)
   807b8:	1009883a 	mov	r4,r2
   807bc:	00803280 	call	80328 <dec2ToHex>
   807c0:	e0bffe15 	stw	r2,-8(fp)

			for(int i = 0; i < 2; i++){
   807c4:	e03ffc15 	stw	zero,-16(fp)
   807c8:	00001006 	br	8080c <taskWriteHex4_5+0xac>
				write7SegDisplay(intCounterHex[i], displaySelector);
   807cc:	e0bffc17 	ldw	r2,-16(fp)
   807d0:	e0fffe17 	ldw	r3,-8(fp)
   807d4:	1885883a 	add	r2,r3,r2
   807d8:	10800003 	ldbu	r2,0(r2)
   807dc:	10803fcc 	andi	r2,r2,255
   807e0:	1080201c 	xori	r2,r2,128
   807e4:	10bfe004 	addi	r2,r2,-128
   807e8:	e17ffb17 	ldw	r5,-20(fp)
   807ec:	1009883a 	mov	r4,r2
   807f0:	00809100 	call	80910 <write7SegDisplay>
				displaySelector++;
   807f4:	e0bffb17 	ldw	r2,-20(fp)
   807f8:	10800044 	addi	r2,r2,1
   807fc:	e0bffb15 	stw	r2,-20(fp)
			*(interval_timer_ptr) = 0;

			if(int1sCounter > 255) int1sCounter = 0;
			intCounterHex = dec2ToHex(int1sCounter);

			for(int i = 0; i < 2; i++){
   80800:	e0bffc17 	ldw	r2,-16(fp)
   80804:	10800044 	addi	r2,r2,1
   80808:	e0bffc15 	stw	r2,-16(fp)
   8080c:	e0bffc17 	ldw	r2,-16(fp)
   80810:	10800090 	cmplti	r2,r2,2
   80814:	103fed1e 	bne	r2,zero,807cc <__alt_data_end+0xfffc1fcc>
				write7SegDisplay(intCounterHex[i], displaySelector);
				displaySelector++;
			}
		}
		OSTaskSuspend(OS_PRIO_SELF);
   80818:	01003fc4 	movi	r4,255
   8081c:	00959040 	call	95904 <OSTaskSuspend>
	}
   80820:	003fd606 	br	8077c <__alt_data_end+0xfffc1f7c>

00080824 <jtagInterrupt>:
}

void jtagInterrupt(void* isr_context){
   80824:	defffa04 	addi	sp,sp,-24
   80828:	dfc00515 	stw	ra,20(sp)
   8082c:	df000415 	stw	fp,16(sp)
   80830:	df000404 	addi	fp,sp,16
   80834:	e13fff15 	stw	r4,-4(fp)
	char data;
	char completeData[10] = "";
   80838:	e03ffc45 	stb	zero,-15(fp)
   8083c:	e03ffc85 	stb	zero,-14(fp)
   80840:	e03ffcc5 	stb	zero,-13(fp)
   80844:	e03ffd05 	stb	zero,-12(fp)
   80848:	e03ffd45 	stb	zero,-11(fp)
   8084c:	e03ffd85 	stb	zero,-10(fp)
   80850:	e03ffdc5 	stb	zero,-9(fp)
   80854:	e03ffe05 	stb	zero,-8(fp)
   80858:	e03ffe45 	stb	zero,-7(fp)
   8085c:	e03ffe85 	stb	zero,-6(fp)

	do{
		data = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE);
   80860:	00800134 	movhi	r2,4
   80864:	10801204 	addi	r2,r2,72
   80868:	10800037 	ldwio	r2,0(r2)
   8086c:	e0bffc05 	stb	r2,-16(fp)
		if(data == '\n')
   80870:	e0bffc03 	ldbu	r2,-16(fp)
   80874:	10803fcc 	andi	r2,r2,255
   80878:	1080201c 	xori	r2,r2,128
   8087c:	10bfe004 	addi	r2,r2,-128
   80880:	10800298 	cmpnei	r2,r2,10
   80884:	10000c26 	beq	r2,zero,808b8 <jtagInterrupt+0x94>
			break;
		strncat(completeData,&data,1);
   80888:	e0bffc44 	addi	r2,fp,-15
   8088c:	01800044 	movi	r6,1
   80890:	e17ffc04 	addi	r5,fp,-16
   80894:	1009883a 	mov	r4,r2
   80898:	00816900 	call	81690 <strncat>
	}while(data != '\n');
   8089c:	e0bffc03 	ldbu	r2,-16(fp)
   808a0:	10803fcc 	andi	r2,r2,255
   808a4:	1080201c 	xori	r2,r2,128
   808a8:	10bfe004 	addi	r2,r2,-128
   808ac:	10800298 	cmpnei	r2,r2,10
   808b0:	103feb1e 	bne	r2,zero,80860 <__alt_data_end+0xfffc2060>
   808b4:	00000106 	br	808bc <jtagInterrupt+0x98>
	char completeData[10] = "";

	do{
		data = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE);
		if(data == '\n')
			break;
   808b8:	0001883a 	nop
		strncat(completeData,&data,1);
	}while(data != '\n');

	if(!(strcmp (completeData,"start"))) //strcmp returns zero on succes
   808bc:	e0bffc44 	addi	r2,fp,-15
   808c0:	014002b4 	movhi	r5,10
   808c4:	2960c104 	addi	r5,r5,-31996
   808c8:	1009883a 	mov	r4,r2
   808cc:	00815b40 	call	815b4 <strcmp>
   808d0:	1000021e 	bne	r2,zero,808dc <jtagInterrupt+0xb8>
		runTimer = 1;
   808d4:	00800044 	movi	r2,1
   808d8:	d0a00015 	stw	r2,-32768(gp)
	if(!(strcmp (completeData,"stop")))
   808dc:	e0bffc44 	addi	r2,fp,-15
   808e0:	014002b4 	movhi	r5,10
   808e4:	2960c304 	addi	r5,r5,-31988
   808e8:	1009883a 	mov	r4,r2
   808ec:	00815b40 	call	815b4 <strcmp>
   808f0:	1000011e 	bne	r2,zero,808f8 <jtagInterrupt+0xd4>
		runTimer = 0;
   808f4:	d0200015 	stw	zero,-32768(gp)
}
   808f8:	0001883a 	nop
   808fc:	e037883a 	mov	sp,fp
   80900:	dfc00117 	ldw	ra,4(sp)
   80904:	df000017 	ldw	fp,0(sp)
   80908:	dec00204 	addi	sp,sp,8
   8090c:	f800283a 	ret

00080910 <write7SegDisplay>:

void write7SegDisplay(char displayValue, int displayNumber)
{
   80910:	defff904 	addi	sp,sp,-28
   80914:	dfc00615 	stw	ra,24(sp)
   80918:	df000515 	stw	fp,20(sp)
   8091c:	df000504 	addi	fp,sp,20
   80920:	2005883a 	mov	r2,r4
   80924:	e17fff15 	stw	r5,-4(fp)
   80928:	e0bffe05 	stb	r2,-8(fp)
    int decNumber = charToInt(displayValue);
   8092c:	e0bffe07 	ldb	r2,-8(fp)
   80930:	1009883a 	mov	r4,r2
   80934:	00801fc0 	call	801fc <charToInt>
   80938:	e0bffb15 	stw	r2,-20(fp)

    volatile int* hexDisplay = (int *) REG32_AVALON_INTERFACE_0_AVALON_SLAVE_0_1_BASE;
   8093c:	00800134 	movhi	r2,4
   80940:	10801504 	addi	r2,r2,84
   80944:	e0bffc15 	stw	r2,-16(fp)
    volatile int* hexDisplay4_5 = (int *) REG32_AVALON_INTERFACE_0_AVALON_SLAVE_0_2_BASE;
   80948:	00800134 	movhi	r2,4
   8094c:	10801404 	addi	r2,r2,80
   80950:	e0bffd15 	stw	r2,-12(fp)

    //Write to the correct adress for a given display
    if(displayNumber == 0)
   80954:	e0bfff17 	ldw	r2,-4(fp)
   80958:	1000031e 	bne	r2,zero,80968 <write7SegDisplay+0x58>
    	*(hexDisplay) = decNumber;
   8095c:	e0bffc17 	ldw	r2,-16(fp)
   80960:	e0fffb17 	ldw	r3,-20(fp)
   80964:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 1)
   80968:	e0bfff17 	ldw	r2,-4(fp)
   8096c:	10800058 	cmpnei	r2,r2,1
   80970:	1000071e 	bne	r2,zero,80990 <write7SegDisplay+0x80>
    	*(hexDisplay) = (decNumber << 4) | *(hexDisplay);
   80974:	e0bffb17 	ldw	r2,-20(fp)
   80978:	1006913a 	slli	r3,r2,4
   8097c:	e0bffc17 	ldw	r2,-16(fp)
   80980:	10800017 	ldw	r2,0(r2)
   80984:	1886b03a 	or	r3,r3,r2
   80988:	e0bffc17 	ldw	r2,-16(fp)
   8098c:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 2)
   80990:	e0bfff17 	ldw	r2,-4(fp)
   80994:	10800098 	cmpnei	r2,r2,2
   80998:	1000071e 	bne	r2,zero,809b8 <write7SegDisplay+0xa8>
    	*(hexDisplay) = (decNumber << 8) | *(hexDisplay);
   8099c:	e0bffb17 	ldw	r2,-20(fp)
   809a0:	1006923a 	slli	r3,r2,8
   809a4:	e0bffc17 	ldw	r2,-16(fp)
   809a8:	10800017 	ldw	r2,0(r2)
   809ac:	1886b03a 	or	r3,r3,r2
   809b0:	e0bffc17 	ldw	r2,-16(fp)
   809b4:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 3)
   809b8:	e0bfff17 	ldw	r2,-4(fp)
   809bc:	108000d8 	cmpnei	r2,r2,3
   809c0:	1000071e 	bne	r2,zero,809e0 <write7SegDisplay+0xd0>
    	*(hexDisplay) = (decNumber << 12) | *(hexDisplay);
   809c4:	e0bffb17 	ldw	r2,-20(fp)
   809c8:	1006933a 	slli	r3,r2,12
   809cc:	e0bffc17 	ldw	r2,-16(fp)
   809d0:	10800017 	ldw	r2,0(r2)
   809d4:	1886b03a 	or	r3,r3,r2
   809d8:	e0bffc17 	ldw	r2,-16(fp)
   809dc:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 4)
   809e0:	e0bfff17 	ldw	r2,-4(fp)
   809e4:	10800118 	cmpnei	r2,r2,4
   809e8:	1000031e 	bne	r2,zero,809f8 <write7SegDisplay+0xe8>
    	*(hexDisplay4_5) = (decNumber);
   809ec:	e0bffd17 	ldw	r2,-12(fp)
   809f0:	e0fffb17 	ldw	r3,-20(fp)
   809f4:	10c00015 	stw	r3,0(r2)
    if(displayNumber == 5)
   809f8:	e0bfff17 	ldw	r2,-4(fp)
   809fc:	10800158 	cmpnei	r2,r2,5
   80a00:	1000071e 	bne	r2,zero,80a20 <write7SegDisplay+0x110>
    	*(hexDisplay4_5) = (decNumber << 4) | *(hexDisplay4_5);
   80a04:	e0bffb17 	ldw	r2,-20(fp)
   80a08:	1006913a 	slli	r3,r2,4
   80a0c:	e0bffd17 	ldw	r2,-12(fp)
   80a10:	10800017 	ldw	r2,0(r2)
   80a14:	1886b03a 	or	r3,r3,r2
   80a18:	e0bffd17 	ldw	r2,-12(fp)
   80a1c:	10c00015 	stw	r3,0(r2)
}
   80a20:	0001883a 	nop
   80a24:	e037883a 	mov	sp,fp
   80a28:	dfc00117 	ldw	ra,4(sp)
   80a2c:	df000017 	ldw	fp,0(sp)
   80a30:	dec00204 	addi	sp,sp,8
   80a34:	f800283a 	ret

00080a38 <main>:




int main()
{
   80a38:	defff804 	addi	sp,sp,-32
   80a3c:	dfc00715 	stw	ra,28(sp)
   80a40:	df000615 	stw	fp,24(sp)
   80a44:	df000604 	addi	fp,sp,24
  INT8U err;
  OSInit();
   80a48:	008f2040 	call	8f204 <OSInit>

  taskWriteHex0_3_stk = (OS_STK *) malloc(TASK_STACKSIZE);
   80a4c:	01000074 	movhi	r4,1
   80a50:	0080cc00 	call	80cc0 <malloc>
   80a54:	d0a71515 	stw	r2,-25516(gp)
  taskWriteHex4_5_stk = (OS_STK *) malloc(TASK_STACKSIZE);
   80a58:	01000074 	movhi	r4,1
   80a5c:	0080cc00 	call	80cc0 <malloc>
   80a60:	d0a71415 	stw	r2,-25520(gp)

  OSTaskCreateExt(taskWriteHex0_3,
   80a64:	d0e71517 	ldw	r3,-25516(gp)
   80a68:	00800134 	movhi	r2,4
   80a6c:	10bfff04 	addi	r2,r2,-4
   80a70:	1889883a 	add	r4,r3,r2
   80a74:	d0a71517 	ldw	r2,-25516(gp)
   80a78:	00c00044 	movi	r3,1
   80a7c:	d8c00415 	stw	r3,16(sp)
   80a80:	d8000315 	stw	zero,12(sp)
   80a84:	00c00074 	movhi	r3,1
   80a88:	d8c00215 	stw	r3,8(sp)
   80a8c:	d8800115 	stw	r2,4(sp)
   80a90:	008003c4 	movi	r2,15
   80a94:	d8800015 	stw	r2,0(sp)
   80a98:	01c003c4 	movi	r7,15
   80a9c:	200d883a 	mov	r6,r4
   80aa0:	000b883a 	mov	r5,zero
   80aa4:	01000234 	movhi	r4,8
   80aa8:	2101a404 	addi	r4,r4,1680
   80aac:	0094bac0 	call	94bac <OSTaskCreateExt>
				  taskWriteHex0_3Priority,
				  &taskWriteHex0_3_stk[0],
				  TASK_STACKSIZE,
				  NULL,
				  OS_TASK_OPT_STK_CHK);
  err = OSTaskCreateExt(taskWriteHex4_5,
   80ab0:	d0e71417 	ldw	r3,-25520(gp)
   80ab4:	00800134 	movhi	r2,4
   80ab8:	10bfff04 	addi	r2,r2,-4
   80abc:	1889883a 	add	r4,r3,r2
   80ac0:	d0a71417 	ldw	r2,-25520(gp)
   80ac4:	00c00044 	movi	r3,1
   80ac8:	d8c00415 	stw	r3,16(sp)
   80acc:	d8000315 	stw	zero,12(sp)
   80ad0:	00c00074 	movhi	r3,1
   80ad4:	d8c00215 	stw	r3,8(sp)
   80ad8:	d8800115 	stw	r2,4(sp)
   80adc:	00800384 	movi	r2,14
   80ae0:	d8800015 	stw	r2,0(sp)
   80ae4:	01c00384 	movi	r7,14
   80ae8:	200d883a 	mov	r6,r4
   80aec:	000b883a 	mov	r5,zero
   80af0:	01000234 	movhi	r4,8
   80af4:	2101d804 	addi	r4,r4,1888
   80af8:	0094bac0 	call	94bac <OSTaskCreateExt>
   80afc:	e0bfff05 	stb	r2,-4(fp)
				  taskWriteHex4_5Priority,
				  &taskWriteHex4_5_stk[0],
  				  TASK_STACKSIZE,
  				  NULL,
				  OS_TASK_OPT_STK_CHK);
  init_interrupt();
   80b00:	008042c0 	call	8042c <init_interrupt>
  OSStart();
   80b04:	008f5080 	call	8f508 <OSStart>
  while(1);
   80b08:	003fff06 	br	80b08 <__alt_data_end+0xfffc2308>

00080b0c <__divsi3>:
   80b0c:	20001b16 	blt	r4,zero,80b7c <__divsi3+0x70>
   80b10:	000f883a 	mov	r7,zero
   80b14:	28001616 	blt	r5,zero,80b70 <__divsi3+0x64>
   80b18:	200d883a 	mov	r6,r4
   80b1c:	29001a2e 	bgeu	r5,r4,80b88 <__divsi3+0x7c>
   80b20:	00800804 	movi	r2,32
   80b24:	00c00044 	movi	r3,1
   80b28:	00000106 	br	80b30 <__divsi3+0x24>
   80b2c:	10000d26 	beq	r2,zero,80b64 <__divsi3+0x58>
   80b30:	294b883a 	add	r5,r5,r5
   80b34:	10bfffc4 	addi	r2,r2,-1
   80b38:	18c7883a 	add	r3,r3,r3
   80b3c:	293ffb36 	bltu	r5,r4,80b2c <__alt_data_end+0xfffc232c>
   80b40:	0005883a 	mov	r2,zero
   80b44:	18000726 	beq	r3,zero,80b64 <__divsi3+0x58>
   80b48:	0005883a 	mov	r2,zero
   80b4c:	31400236 	bltu	r6,r5,80b58 <__divsi3+0x4c>
   80b50:	314dc83a 	sub	r6,r6,r5
   80b54:	10c4b03a 	or	r2,r2,r3
   80b58:	1806d07a 	srli	r3,r3,1
   80b5c:	280ad07a 	srli	r5,r5,1
   80b60:	183ffa1e 	bne	r3,zero,80b4c <__alt_data_end+0xfffc234c>
   80b64:	38000126 	beq	r7,zero,80b6c <__divsi3+0x60>
   80b68:	0085c83a 	sub	r2,zero,r2
   80b6c:	f800283a 	ret
   80b70:	014bc83a 	sub	r5,zero,r5
   80b74:	39c0005c 	xori	r7,r7,1
   80b78:	003fe706 	br	80b18 <__alt_data_end+0xfffc2318>
   80b7c:	0109c83a 	sub	r4,zero,r4
   80b80:	01c00044 	movi	r7,1
   80b84:	003fe306 	br	80b14 <__alt_data_end+0xfffc2314>
   80b88:	00c00044 	movi	r3,1
   80b8c:	003fee06 	br	80b48 <__alt_data_end+0xfffc2348>

00080b90 <__modsi3>:
   80b90:	20001716 	blt	r4,zero,80bf0 <__modsi3+0x60>
   80b94:	000f883a 	mov	r7,zero
   80b98:	2005883a 	mov	r2,r4
   80b9c:	28001216 	blt	r5,zero,80be8 <__modsi3+0x58>
   80ba0:	2900162e 	bgeu	r5,r4,80bfc <__modsi3+0x6c>
   80ba4:	01800804 	movi	r6,32
   80ba8:	00c00044 	movi	r3,1
   80bac:	00000106 	br	80bb4 <__modsi3+0x24>
   80bb0:	30000a26 	beq	r6,zero,80bdc <__modsi3+0x4c>
   80bb4:	294b883a 	add	r5,r5,r5
   80bb8:	31bfffc4 	addi	r6,r6,-1
   80bbc:	18c7883a 	add	r3,r3,r3
   80bc0:	293ffb36 	bltu	r5,r4,80bb0 <__alt_data_end+0xfffc23b0>
   80bc4:	18000526 	beq	r3,zero,80bdc <__modsi3+0x4c>
   80bc8:	1806d07a 	srli	r3,r3,1
   80bcc:	11400136 	bltu	r2,r5,80bd4 <__modsi3+0x44>
   80bd0:	1145c83a 	sub	r2,r2,r5
   80bd4:	280ad07a 	srli	r5,r5,1
   80bd8:	183ffb1e 	bne	r3,zero,80bc8 <__alt_data_end+0xfffc23c8>
   80bdc:	38000126 	beq	r7,zero,80be4 <__modsi3+0x54>
   80be0:	0085c83a 	sub	r2,zero,r2
   80be4:	f800283a 	ret
   80be8:	014bc83a 	sub	r5,zero,r5
   80bec:	003fec06 	br	80ba0 <__alt_data_end+0xfffc23a0>
   80bf0:	0109c83a 	sub	r4,zero,r4
   80bf4:	01c00044 	movi	r7,1
   80bf8:	003fe706 	br	80b98 <__alt_data_end+0xfffc2398>
   80bfc:	00c00044 	movi	r3,1
   80c00:	003ff106 	br	80bc8 <__alt_data_end+0xfffc23c8>

00080c04 <__udivsi3>:
   80c04:	200d883a 	mov	r6,r4
   80c08:	2900152e 	bgeu	r5,r4,80c60 <__udivsi3+0x5c>
   80c0c:	28001416 	blt	r5,zero,80c60 <__udivsi3+0x5c>
   80c10:	00800804 	movi	r2,32
   80c14:	00c00044 	movi	r3,1
   80c18:	00000206 	br	80c24 <__udivsi3+0x20>
   80c1c:	10000e26 	beq	r2,zero,80c58 <__udivsi3+0x54>
   80c20:	28000516 	blt	r5,zero,80c38 <__udivsi3+0x34>
   80c24:	294b883a 	add	r5,r5,r5
   80c28:	10bfffc4 	addi	r2,r2,-1
   80c2c:	18c7883a 	add	r3,r3,r3
   80c30:	293ffa36 	bltu	r5,r4,80c1c <__alt_data_end+0xfffc241c>
   80c34:	18000826 	beq	r3,zero,80c58 <__udivsi3+0x54>
   80c38:	0005883a 	mov	r2,zero
   80c3c:	31400236 	bltu	r6,r5,80c48 <__udivsi3+0x44>
   80c40:	314dc83a 	sub	r6,r6,r5
   80c44:	10c4b03a 	or	r2,r2,r3
   80c48:	1806d07a 	srli	r3,r3,1
   80c4c:	280ad07a 	srli	r5,r5,1
   80c50:	183ffa1e 	bne	r3,zero,80c3c <__alt_data_end+0xfffc243c>
   80c54:	f800283a 	ret
   80c58:	0005883a 	mov	r2,zero
   80c5c:	f800283a 	ret
   80c60:	00c00044 	movi	r3,1
   80c64:	003ff406 	br	80c38 <__alt_data_end+0xfffc2438>

00080c68 <__umodsi3>:
   80c68:	2005883a 	mov	r2,r4
   80c6c:	2900122e 	bgeu	r5,r4,80cb8 <__umodsi3+0x50>
   80c70:	28001116 	blt	r5,zero,80cb8 <__umodsi3+0x50>
   80c74:	01800804 	movi	r6,32
   80c78:	00c00044 	movi	r3,1
   80c7c:	00000206 	br	80c88 <__umodsi3+0x20>
   80c80:	30000c26 	beq	r6,zero,80cb4 <__umodsi3+0x4c>
   80c84:	28000516 	blt	r5,zero,80c9c <__umodsi3+0x34>
   80c88:	294b883a 	add	r5,r5,r5
   80c8c:	31bfffc4 	addi	r6,r6,-1
   80c90:	18c7883a 	add	r3,r3,r3
   80c94:	293ffa36 	bltu	r5,r4,80c80 <__alt_data_end+0xfffc2480>
   80c98:	18000626 	beq	r3,zero,80cb4 <__umodsi3+0x4c>
   80c9c:	1806d07a 	srli	r3,r3,1
   80ca0:	11400136 	bltu	r2,r5,80ca8 <__umodsi3+0x40>
   80ca4:	1145c83a 	sub	r2,r2,r5
   80ca8:	280ad07a 	srli	r5,r5,1
   80cac:	183ffb1e 	bne	r3,zero,80c9c <__alt_data_end+0xfffc249c>
   80cb0:	f800283a 	ret
   80cb4:	f800283a 	ret
   80cb8:	00c00044 	movi	r3,1
   80cbc:	003ff706 	br	80c9c <__alt_data_end+0xfffc249c>

00080cc0 <malloc>:
   80cc0:	008002b4 	movhi	r2,10
   80cc4:	10a87f04 	addi	r2,r2,-24068
   80cc8:	200b883a 	mov	r5,r4
   80ccc:	11000017 	ldw	r4,0(r2)
   80cd0:	0080ce81 	jmpi	80ce8 <_malloc_r>

00080cd4 <free>:
   80cd4:	008002b4 	movhi	r2,10
   80cd8:	10a87f04 	addi	r2,r2,-24068
   80cdc:	200b883a 	mov	r5,r4
   80ce0:	11000017 	ldw	r4,0(r2)
   80ce4:	0085c7c1 	jmpi	85c7c <_free_r>

00080ce8 <_malloc_r>:
   80ce8:	defff504 	addi	sp,sp,-44
   80cec:	dc800315 	stw	r18,12(sp)
   80cf0:	dfc00a15 	stw	ra,40(sp)
   80cf4:	df000915 	stw	fp,36(sp)
   80cf8:	ddc00815 	stw	r23,32(sp)
   80cfc:	dd800715 	stw	r22,28(sp)
   80d00:	dd400615 	stw	r21,24(sp)
   80d04:	dd000515 	stw	r20,20(sp)
   80d08:	dcc00415 	stw	r19,16(sp)
   80d0c:	dc400215 	stw	r17,8(sp)
   80d10:	dc000115 	stw	r16,4(sp)
   80d14:	288002c4 	addi	r2,r5,11
   80d18:	00c00584 	movi	r3,22
   80d1c:	2025883a 	mov	r18,r4
   80d20:	18807f2e 	bgeu	r3,r2,80f20 <_malloc_r+0x238>
   80d24:	047ffe04 	movi	r17,-8
   80d28:	1462703a 	and	r17,r2,r17
   80d2c:	8800a316 	blt	r17,zero,80fbc <_malloc_r+0x2d4>
   80d30:	8940a236 	bltu	r17,r5,80fbc <_malloc_r+0x2d4>
   80d34:	008e7a80 	call	8e7a8 <__malloc_lock>
   80d38:	00807dc4 	movi	r2,503
   80d3c:	1441e92e 	bgeu	r2,r17,814e4 <_malloc_r+0x7fc>
   80d40:	8804d27a 	srli	r2,r17,9
   80d44:	1000a126 	beq	r2,zero,80fcc <_malloc_r+0x2e4>
   80d48:	00c00104 	movi	r3,4
   80d4c:	18811e36 	bltu	r3,r2,811c8 <_malloc_r+0x4e0>
   80d50:	8804d1ba 	srli	r2,r17,6
   80d54:	12000e44 	addi	r8,r2,57
   80d58:	11c00e04 	addi	r7,r2,56
   80d5c:	4209883a 	add	r4,r8,r8
   80d60:	04c002b4 	movhi	r19,10
   80d64:	2109883a 	add	r4,r4,r4
   80d68:	9ce1cd04 	addi	r19,r19,-30924
   80d6c:	2109883a 	add	r4,r4,r4
   80d70:	9909883a 	add	r4,r19,r4
   80d74:	24000117 	ldw	r16,4(r4)
   80d78:	213ffe04 	addi	r4,r4,-8
   80d7c:	24009726 	beq	r4,r16,80fdc <_malloc_r+0x2f4>
   80d80:	80800117 	ldw	r2,4(r16)
   80d84:	01bfff04 	movi	r6,-4
   80d88:	014003c4 	movi	r5,15
   80d8c:	1184703a 	and	r2,r2,r6
   80d90:	1447c83a 	sub	r3,r2,r17
   80d94:	28c00716 	blt	r5,r3,80db4 <_malloc_r+0xcc>
   80d98:	1800920e 	bge	r3,zero,80fe4 <_malloc_r+0x2fc>
   80d9c:	84000317 	ldw	r16,12(r16)
   80da0:	24008e26 	beq	r4,r16,80fdc <_malloc_r+0x2f4>
   80da4:	80800117 	ldw	r2,4(r16)
   80da8:	1184703a 	and	r2,r2,r6
   80dac:	1447c83a 	sub	r3,r2,r17
   80db0:	28fff90e 	bge	r5,r3,80d98 <__alt_data_end+0xfffc2598>
   80db4:	3809883a 	mov	r4,r7
   80db8:	018002b4 	movhi	r6,10
   80dbc:	9c000417 	ldw	r16,16(r19)
   80dc0:	31a1cd04 	addi	r6,r6,-30924
   80dc4:	32000204 	addi	r8,r6,8
   80dc8:	82013426 	beq	r16,r8,8129c <_malloc_r+0x5b4>
   80dcc:	80c00117 	ldw	r3,4(r16)
   80dd0:	00bfff04 	movi	r2,-4
   80dd4:	188e703a 	and	r7,r3,r2
   80dd8:	3c45c83a 	sub	r2,r7,r17
   80ddc:	00c003c4 	movi	r3,15
   80de0:	18811f16 	blt	r3,r2,81260 <_malloc_r+0x578>
   80de4:	32000515 	stw	r8,20(r6)
   80de8:	32000415 	stw	r8,16(r6)
   80dec:	10007f0e 	bge	r2,zero,80fec <_malloc_r+0x304>
   80df0:	00807fc4 	movi	r2,511
   80df4:	11c0fd36 	bltu	r2,r7,811ec <_malloc_r+0x504>
   80df8:	3806d0fa 	srli	r3,r7,3
   80dfc:	01c00044 	movi	r7,1
   80e00:	30800117 	ldw	r2,4(r6)
   80e04:	19400044 	addi	r5,r3,1
   80e08:	294b883a 	add	r5,r5,r5
   80e0c:	1807d0ba 	srai	r3,r3,2
   80e10:	294b883a 	add	r5,r5,r5
   80e14:	294b883a 	add	r5,r5,r5
   80e18:	298b883a 	add	r5,r5,r6
   80e1c:	38c6983a 	sll	r3,r7,r3
   80e20:	29c00017 	ldw	r7,0(r5)
   80e24:	2a7ffe04 	addi	r9,r5,-8
   80e28:	1886b03a 	or	r3,r3,r2
   80e2c:	82400315 	stw	r9,12(r16)
   80e30:	81c00215 	stw	r7,8(r16)
   80e34:	30c00115 	stw	r3,4(r6)
   80e38:	2c000015 	stw	r16,0(r5)
   80e3c:	3c000315 	stw	r16,12(r7)
   80e40:	2005d0ba 	srai	r2,r4,2
   80e44:	01400044 	movi	r5,1
   80e48:	288a983a 	sll	r5,r5,r2
   80e4c:	19406f36 	bltu	r3,r5,8100c <_malloc_r+0x324>
   80e50:	28c4703a 	and	r2,r5,r3
   80e54:	10000a1e 	bne	r2,zero,80e80 <_malloc_r+0x198>
   80e58:	00bfff04 	movi	r2,-4
   80e5c:	294b883a 	add	r5,r5,r5
   80e60:	2088703a 	and	r4,r4,r2
   80e64:	28c4703a 	and	r2,r5,r3
   80e68:	21000104 	addi	r4,r4,4
   80e6c:	1000041e 	bne	r2,zero,80e80 <_malloc_r+0x198>
   80e70:	294b883a 	add	r5,r5,r5
   80e74:	28c4703a 	and	r2,r5,r3
   80e78:	21000104 	addi	r4,r4,4
   80e7c:	103ffc26 	beq	r2,zero,80e70 <__alt_data_end+0xfffc2670>
   80e80:	02bfff04 	movi	r10,-4
   80e84:	024003c4 	movi	r9,15
   80e88:	21800044 	addi	r6,r4,1
   80e8c:	318d883a 	add	r6,r6,r6
   80e90:	318d883a 	add	r6,r6,r6
   80e94:	318d883a 	add	r6,r6,r6
   80e98:	998d883a 	add	r6,r19,r6
   80e9c:	333ffe04 	addi	r12,r6,-8
   80ea0:	2017883a 	mov	r11,r4
   80ea4:	31800104 	addi	r6,r6,4
   80ea8:	34000017 	ldw	r16,0(r6)
   80eac:	31fffd04 	addi	r7,r6,-12
   80eb0:	81c0041e 	bne	r16,r7,80ec4 <_malloc_r+0x1dc>
   80eb4:	0000fb06 	br	812a4 <_malloc_r+0x5bc>
   80eb8:	1801030e 	bge	r3,zero,812c8 <_malloc_r+0x5e0>
   80ebc:	84000317 	ldw	r16,12(r16)
   80ec0:	81c0f826 	beq	r16,r7,812a4 <_malloc_r+0x5bc>
   80ec4:	80800117 	ldw	r2,4(r16)
   80ec8:	1284703a 	and	r2,r2,r10
   80ecc:	1447c83a 	sub	r3,r2,r17
   80ed0:	48fff90e 	bge	r9,r3,80eb8 <__alt_data_end+0xfffc26b8>
   80ed4:	80800317 	ldw	r2,12(r16)
   80ed8:	81000217 	ldw	r4,8(r16)
   80edc:	89400054 	ori	r5,r17,1
   80ee0:	81400115 	stw	r5,4(r16)
   80ee4:	20800315 	stw	r2,12(r4)
   80ee8:	11000215 	stw	r4,8(r2)
   80eec:	8463883a 	add	r17,r16,r17
   80ef0:	9c400515 	stw	r17,20(r19)
   80ef4:	9c400415 	stw	r17,16(r19)
   80ef8:	18800054 	ori	r2,r3,1
   80efc:	88800115 	stw	r2,4(r17)
   80f00:	8a000315 	stw	r8,12(r17)
   80f04:	8a000215 	stw	r8,8(r17)
   80f08:	88e3883a 	add	r17,r17,r3
   80f0c:	88c00015 	stw	r3,0(r17)
   80f10:	9009883a 	mov	r4,r18
   80f14:	008e8c80 	call	8e8c8 <__malloc_unlock>
   80f18:	80800204 	addi	r2,r16,8
   80f1c:	00001b06 	br	80f8c <_malloc_r+0x2a4>
   80f20:	04400404 	movi	r17,16
   80f24:	89402536 	bltu	r17,r5,80fbc <_malloc_r+0x2d4>
   80f28:	008e7a80 	call	8e7a8 <__malloc_lock>
   80f2c:	00800184 	movi	r2,6
   80f30:	01000084 	movi	r4,2
   80f34:	04c002b4 	movhi	r19,10
   80f38:	1085883a 	add	r2,r2,r2
   80f3c:	9ce1cd04 	addi	r19,r19,-30924
   80f40:	1085883a 	add	r2,r2,r2
   80f44:	9885883a 	add	r2,r19,r2
   80f48:	14000117 	ldw	r16,4(r2)
   80f4c:	10fffe04 	addi	r3,r2,-8
   80f50:	80c0d926 	beq	r16,r3,812b8 <_malloc_r+0x5d0>
   80f54:	80c00117 	ldw	r3,4(r16)
   80f58:	81000317 	ldw	r4,12(r16)
   80f5c:	00bfff04 	movi	r2,-4
   80f60:	1884703a 	and	r2,r3,r2
   80f64:	81400217 	ldw	r5,8(r16)
   80f68:	8085883a 	add	r2,r16,r2
   80f6c:	10c00117 	ldw	r3,4(r2)
   80f70:	29000315 	stw	r4,12(r5)
   80f74:	21400215 	stw	r5,8(r4)
   80f78:	18c00054 	ori	r3,r3,1
   80f7c:	10c00115 	stw	r3,4(r2)
   80f80:	9009883a 	mov	r4,r18
   80f84:	008e8c80 	call	8e8c8 <__malloc_unlock>
   80f88:	80800204 	addi	r2,r16,8
   80f8c:	dfc00a17 	ldw	ra,40(sp)
   80f90:	df000917 	ldw	fp,36(sp)
   80f94:	ddc00817 	ldw	r23,32(sp)
   80f98:	dd800717 	ldw	r22,28(sp)
   80f9c:	dd400617 	ldw	r21,24(sp)
   80fa0:	dd000517 	ldw	r20,20(sp)
   80fa4:	dcc00417 	ldw	r19,16(sp)
   80fa8:	dc800317 	ldw	r18,12(sp)
   80fac:	dc400217 	ldw	r17,8(sp)
   80fb0:	dc000117 	ldw	r16,4(sp)
   80fb4:	dec00b04 	addi	sp,sp,44
   80fb8:	f800283a 	ret
   80fbc:	00800304 	movi	r2,12
   80fc0:	90800015 	stw	r2,0(r18)
   80fc4:	0005883a 	mov	r2,zero
   80fc8:	003ff006 	br	80f8c <__alt_data_end+0xfffc278c>
   80fcc:	01002004 	movi	r4,128
   80fd0:	02001004 	movi	r8,64
   80fd4:	01c00fc4 	movi	r7,63
   80fd8:	003f6106 	br	80d60 <__alt_data_end+0xfffc2560>
   80fdc:	4009883a 	mov	r4,r8
   80fe0:	003f7506 	br	80db8 <__alt_data_end+0xfffc25b8>
   80fe4:	81000317 	ldw	r4,12(r16)
   80fe8:	003fde06 	br	80f64 <__alt_data_end+0xfffc2764>
   80fec:	81c5883a 	add	r2,r16,r7
   80ff0:	11400117 	ldw	r5,4(r2)
   80ff4:	9009883a 	mov	r4,r18
   80ff8:	29400054 	ori	r5,r5,1
   80ffc:	11400115 	stw	r5,4(r2)
   81000:	008e8c80 	call	8e8c8 <__malloc_unlock>
   81004:	80800204 	addi	r2,r16,8
   81008:	003fe006 	br	80f8c <__alt_data_end+0xfffc278c>
   8100c:	9c000217 	ldw	r16,8(r19)
   81010:	00bfff04 	movi	r2,-4
   81014:	85800117 	ldw	r22,4(r16)
   81018:	b0ac703a 	and	r22,r22,r2
   8101c:	b4400336 	bltu	r22,r17,8102c <_malloc_r+0x344>
   81020:	b445c83a 	sub	r2,r22,r17
   81024:	00c003c4 	movi	r3,15
   81028:	18805d16 	blt	r3,r2,811a0 <_malloc_r+0x4b8>
   8102c:	05c002b4 	movhi	r23,10
   81030:	008002b4 	movhi	r2,10
   81034:	10af9704 	addi	r2,r2,-16804
   81038:	bde87c04 	addi	r23,r23,-24080
   8103c:	15400017 	ldw	r21,0(r2)
   81040:	b8c00017 	ldw	r3,0(r23)
   81044:	00bfffc4 	movi	r2,-1
   81048:	858d883a 	add	r6,r16,r22
   8104c:	8d6b883a 	add	r21,r17,r21
   81050:	1880ea26 	beq	r3,r2,813fc <_malloc_r+0x714>
   81054:	ad4403c4 	addi	r21,r21,4111
   81058:	00bc0004 	movi	r2,-4096
   8105c:	a8aa703a 	and	r21,r21,r2
   81060:	a80b883a 	mov	r5,r21
   81064:	9009883a 	mov	r4,r18
   81068:	d9800015 	stw	r6,0(sp)
   8106c:	00815600 	call	81560 <_sbrk_r>
   81070:	1029883a 	mov	r20,r2
   81074:	00bfffc4 	movi	r2,-1
   81078:	d9800017 	ldw	r6,0(sp)
   8107c:	a080e826 	beq	r20,r2,81420 <_malloc_r+0x738>
   81080:	a180a636 	bltu	r20,r6,8131c <_malloc_r+0x634>
   81084:	070002b4 	movhi	fp,10
   81088:	e72fbb04 	addi	fp,fp,-16660
   8108c:	e0800017 	ldw	r2,0(fp)
   81090:	a887883a 	add	r3,r21,r2
   81094:	e0c00015 	stw	r3,0(fp)
   81098:	3500e626 	beq	r6,r20,81434 <_malloc_r+0x74c>
   8109c:	b9000017 	ldw	r4,0(r23)
   810a0:	00bfffc4 	movi	r2,-1
   810a4:	2080ee26 	beq	r4,r2,81460 <_malloc_r+0x778>
   810a8:	a185c83a 	sub	r2,r20,r6
   810ac:	10c5883a 	add	r2,r2,r3
   810b0:	e0800015 	stw	r2,0(fp)
   810b4:	a0c001cc 	andi	r3,r20,7
   810b8:	1800bc26 	beq	r3,zero,813ac <_malloc_r+0x6c4>
   810bc:	a0e9c83a 	sub	r20,r20,r3
   810c0:	00840204 	movi	r2,4104
   810c4:	a5000204 	addi	r20,r20,8
   810c8:	10c7c83a 	sub	r3,r2,r3
   810cc:	a545883a 	add	r2,r20,r21
   810d0:	1083ffcc 	andi	r2,r2,4095
   810d4:	18abc83a 	sub	r21,r3,r2
   810d8:	a80b883a 	mov	r5,r21
   810dc:	9009883a 	mov	r4,r18
   810e0:	00815600 	call	81560 <_sbrk_r>
   810e4:	00ffffc4 	movi	r3,-1
   810e8:	10c0e126 	beq	r2,r3,81470 <_malloc_r+0x788>
   810ec:	1505c83a 	sub	r2,r2,r20
   810f0:	1545883a 	add	r2,r2,r21
   810f4:	10800054 	ori	r2,r2,1
   810f8:	e0c00017 	ldw	r3,0(fp)
   810fc:	9d000215 	stw	r20,8(r19)
   81100:	a0800115 	stw	r2,4(r20)
   81104:	a8c7883a 	add	r3,r21,r3
   81108:	e0c00015 	stw	r3,0(fp)
   8110c:	84c00e26 	beq	r16,r19,81148 <_malloc_r+0x460>
   81110:	018003c4 	movi	r6,15
   81114:	3580a72e 	bgeu	r6,r22,813b4 <_malloc_r+0x6cc>
   81118:	81400117 	ldw	r5,4(r16)
   8111c:	013ffe04 	movi	r4,-8
   81120:	b0bffd04 	addi	r2,r22,-12
   81124:	1104703a 	and	r2,r2,r4
   81128:	2900004c 	andi	r4,r5,1
   8112c:	2088b03a 	or	r4,r4,r2
   81130:	81000115 	stw	r4,4(r16)
   81134:	01400144 	movi	r5,5
   81138:	8089883a 	add	r4,r16,r2
   8113c:	21400115 	stw	r5,4(r4)
   81140:	21400215 	stw	r5,8(r4)
   81144:	3080cd36 	bltu	r6,r2,8147c <_malloc_r+0x794>
   81148:	008002b4 	movhi	r2,10
   8114c:	10af9604 	addi	r2,r2,-16808
   81150:	11000017 	ldw	r4,0(r2)
   81154:	20c0012e 	bgeu	r4,r3,8115c <_malloc_r+0x474>
   81158:	10c00015 	stw	r3,0(r2)
   8115c:	008002b4 	movhi	r2,10
   81160:	10af9504 	addi	r2,r2,-16812
   81164:	11000017 	ldw	r4,0(r2)
   81168:	9c000217 	ldw	r16,8(r19)
   8116c:	20c0012e 	bgeu	r4,r3,81174 <_malloc_r+0x48c>
   81170:	10c00015 	stw	r3,0(r2)
   81174:	80c00117 	ldw	r3,4(r16)
   81178:	00bfff04 	movi	r2,-4
   8117c:	1886703a 	and	r3,r3,r2
   81180:	1c45c83a 	sub	r2,r3,r17
   81184:	1c400236 	bltu	r3,r17,81190 <_malloc_r+0x4a8>
   81188:	00c003c4 	movi	r3,15
   8118c:	18800416 	blt	r3,r2,811a0 <_malloc_r+0x4b8>
   81190:	9009883a 	mov	r4,r18
   81194:	008e8c80 	call	8e8c8 <__malloc_unlock>
   81198:	0005883a 	mov	r2,zero
   8119c:	003f7b06 	br	80f8c <__alt_data_end+0xfffc278c>
   811a0:	88c00054 	ori	r3,r17,1
   811a4:	80c00115 	stw	r3,4(r16)
   811a8:	8463883a 	add	r17,r16,r17
   811ac:	10800054 	ori	r2,r2,1
   811b0:	9c400215 	stw	r17,8(r19)
   811b4:	88800115 	stw	r2,4(r17)
   811b8:	9009883a 	mov	r4,r18
   811bc:	008e8c80 	call	8e8c8 <__malloc_unlock>
   811c0:	80800204 	addi	r2,r16,8
   811c4:	003f7106 	br	80f8c <__alt_data_end+0xfffc278c>
   811c8:	00c00504 	movi	r3,20
   811cc:	18804a2e 	bgeu	r3,r2,812f8 <_malloc_r+0x610>
   811d0:	00c01504 	movi	r3,84
   811d4:	18806e36 	bltu	r3,r2,81390 <_malloc_r+0x6a8>
   811d8:	8804d33a 	srli	r2,r17,12
   811dc:	12001bc4 	addi	r8,r2,111
   811e0:	11c01b84 	addi	r7,r2,110
   811e4:	4209883a 	add	r4,r8,r8
   811e8:	003edd06 	br	80d60 <__alt_data_end+0xfffc2560>
   811ec:	3804d27a 	srli	r2,r7,9
   811f0:	00c00104 	movi	r3,4
   811f4:	1880442e 	bgeu	r3,r2,81308 <_malloc_r+0x620>
   811f8:	00c00504 	movi	r3,20
   811fc:	18808136 	bltu	r3,r2,81404 <_malloc_r+0x71c>
   81200:	11401704 	addi	r5,r2,92
   81204:	10c016c4 	addi	r3,r2,91
   81208:	294b883a 	add	r5,r5,r5
   8120c:	294b883a 	add	r5,r5,r5
   81210:	294b883a 	add	r5,r5,r5
   81214:	994b883a 	add	r5,r19,r5
   81218:	28800017 	ldw	r2,0(r5)
   8121c:	018002b4 	movhi	r6,10
   81220:	297ffe04 	addi	r5,r5,-8
   81224:	31a1cd04 	addi	r6,r6,-30924
   81228:	28806526 	beq	r5,r2,813c0 <_malloc_r+0x6d8>
   8122c:	01bfff04 	movi	r6,-4
   81230:	10c00117 	ldw	r3,4(r2)
   81234:	1986703a 	and	r3,r3,r6
   81238:	38c0022e 	bgeu	r7,r3,81244 <_malloc_r+0x55c>
   8123c:	10800217 	ldw	r2,8(r2)
   81240:	28bffb1e 	bne	r5,r2,81230 <__alt_data_end+0xfffc2a30>
   81244:	11400317 	ldw	r5,12(r2)
   81248:	98c00117 	ldw	r3,4(r19)
   8124c:	81400315 	stw	r5,12(r16)
   81250:	80800215 	stw	r2,8(r16)
   81254:	2c000215 	stw	r16,8(r5)
   81258:	14000315 	stw	r16,12(r2)
   8125c:	003ef806 	br	80e40 <__alt_data_end+0xfffc2640>
   81260:	88c00054 	ori	r3,r17,1
   81264:	80c00115 	stw	r3,4(r16)
   81268:	8463883a 	add	r17,r16,r17
   8126c:	34400515 	stw	r17,20(r6)
   81270:	34400415 	stw	r17,16(r6)
   81274:	10c00054 	ori	r3,r2,1
   81278:	8a000315 	stw	r8,12(r17)
   8127c:	8a000215 	stw	r8,8(r17)
   81280:	88c00115 	stw	r3,4(r17)
   81284:	88a3883a 	add	r17,r17,r2
   81288:	88800015 	stw	r2,0(r17)
   8128c:	9009883a 	mov	r4,r18
   81290:	008e8c80 	call	8e8c8 <__malloc_unlock>
   81294:	80800204 	addi	r2,r16,8
   81298:	003f3c06 	br	80f8c <__alt_data_end+0xfffc278c>
   8129c:	30c00117 	ldw	r3,4(r6)
   812a0:	003ee706 	br	80e40 <__alt_data_end+0xfffc2640>
   812a4:	5ac00044 	addi	r11,r11,1
   812a8:	588000cc 	andi	r2,r11,3
   812ac:	31800204 	addi	r6,r6,8
   812b0:	103efd1e 	bne	r2,zero,80ea8 <__alt_data_end+0xfffc26a8>
   812b4:	00002406 	br	81348 <_malloc_r+0x660>
   812b8:	14000317 	ldw	r16,12(r2)
   812bc:	143f251e 	bne	r2,r16,80f54 <__alt_data_end+0xfffc2754>
   812c0:	21000084 	addi	r4,r4,2
   812c4:	003ebc06 	br	80db8 <__alt_data_end+0xfffc25b8>
   812c8:	8085883a 	add	r2,r16,r2
   812cc:	10c00117 	ldw	r3,4(r2)
   812d0:	81000317 	ldw	r4,12(r16)
   812d4:	81400217 	ldw	r5,8(r16)
   812d8:	18c00054 	ori	r3,r3,1
   812dc:	10c00115 	stw	r3,4(r2)
   812e0:	29000315 	stw	r4,12(r5)
   812e4:	21400215 	stw	r5,8(r4)
   812e8:	9009883a 	mov	r4,r18
   812ec:	008e8c80 	call	8e8c8 <__malloc_unlock>
   812f0:	80800204 	addi	r2,r16,8
   812f4:	003f2506 	br	80f8c <__alt_data_end+0xfffc278c>
   812f8:	12001704 	addi	r8,r2,92
   812fc:	11c016c4 	addi	r7,r2,91
   81300:	4209883a 	add	r4,r8,r8
   81304:	003e9606 	br	80d60 <__alt_data_end+0xfffc2560>
   81308:	3804d1ba 	srli	r2,r7,6
   8130c:	11400e44 	addi	r5,r2,57
   81310:	10c00e04 	addi	r3,r2,56
   81314:	294b883a 	add	r5,r5,r5
   81318:	003fbc06 	br	8120c <__alt_data_end+0xfffc2a0c>
   8131c:	84ff5926 	beq	r16,r19,81084 <__alt_data_end+0xfffc2884>
   81320:	008002b4 	movhi	r2,10
   81324:	10a1cd04 	addi	r2,r2,-30924
   81328:	14000217 	ldw	r16,8(r2)
   8132c:	00bfff04 	movi	r2,-4
   81330:	80c00117 	ldw	r3,4(r16)
   81334:	1886703a 	and	r3,r3,r2
   81338:	003f9106 	br	81180 <__alt_data_end+0xfffc2980>
   8133c:	60800217 	ldw	r2,8(r12)
   81340:	213fffc4 	addi	r4,r4,-1
   81344:	1300651e 	bne	r2,r12,814dc <_malloc_r+0x7f4>
   81348:	208000cc 	andi	r2,r4,3
   8134c:	633ffe04 	addi	r12,r12,-8
   81350:	103ffa1e 	bne	r2,zero,8133c <__alt_data_end+0xfffc2b3c>
   81354:	98800117 	ldw	r2,4(r19)
   81358:	0146303a 	nor	r3,zero,r5
   8135c:	1884703a 	and	r2,r3,r2
   81360:	98800115 	stw	r2,4(r19)
   81364:	294b883a 	add	r5,r5,r5
   81368:	117f2836 	bltu	r2,r5,8100c <__alt_data_end+0xfffc280c>
   8136c:	283f2726 	beq	r5,zero,8100c <__alt_data_end+0xfffc280c>
   81370:	2886703a 	and	r3,r5,r2
   81374:	5809883a 	mov	r4,r11
   81378:	183ec31e 	bne	r3,zero,80e88 <__alt_data_end+0xfffc2688>
   8137c:	294b883a 	add	r5,r5,r5
   81380:	2886703a 	and	r3,r5,r2
   81384:	21000104 	addi	r4,r4,4
   81388:	183ffc26 	beq	r3,zero,8137c <__alt_data_end+0xfffc2b7c>
   8138c:	003ebe06 	br	80e88 <__alt_data_end+0xfffc2688>
   81390:	00c05504 	movi	r3,340
   81394:	18801236 	bltu	r3,r2,813e0 <_malloc_r+0x6f8>
   81398:	8804d3fa 	srli	r2,r17,15
   8139c:	12001e04 	addi	r8,r2,120
   813a0:	11c01dc4 	addi	r7,r2,119
   813a4:	4209883a 	add	r4,r8,r8
   813a8:	003e6d06 	br	80d60 <__alt_data_end+0xfffc2560>
   813ac:	00c40004 	movi	r3,4096
   813b0:	003f4606 	br	810cc <__alt_data_end+0xfffc28cc>
   813b4:	00800044 	movi	r2,1
   813b8:	a0800115 	stw	r2,4(r20)
   813bc:	003f7406 	br	81190 <__alt_data_end+0xfffc2990>
   813c0:	1805d0ba 	srai	r2,r3,2
   813c4:	01c00044 	movi	r7,1
   813c8:	30c00117 	ldw	r3,4(r6)
   813cc:	388e983a 	sll	r7,r7,r2
   813d0:	2805883a 	mov	r2,r5
   813d4:	38c6b03a 	or	r3,r7,r3
   813d8:	30c00115 	stw	r3,4(r6)
   813dc:	003f9b06 	br	8124c <__alt_data_end+0xfffc2a4c>
   813e0:	00c15504 	movi	r3,1364
   813e4:	18801a36 	bltu	r3,r2,81450 <_malloc_r+0x768>
   813e8:	8804d4ba 	srli	r2,r17,18
   813ec:	12001f44 	addi	r8,r2,125
   813f0:	11c01f04 	addi	r7,r2,124
   813f4:	4209883a 	add	r4,r8,r8
   813f8:	003e5906 	br	80d60 <__alt_data_end+0xfffc2560>
   813fc:	ad400404 	addi	r21,r21,16
   81400:	003f1706 	br	81060 <__alt_data_end+0xfffc2860>
   81404:	00c01504 	movi	r3,84
   81408:	18802336 	bltu	r3,r2,81498 <_malloc_r+0x7b0>
   8140c:	3804d33a 	srli	r2,r7,12
   81410:	11401bc4 	addi	r5,r2,111
   81414:	10c01b84 	addi	r3,r2,110
   81418:	294b883a 	add	r5,r5,r5
   8141c:	003f7b06 	br	8120c <__alt_data_end+0xfffc2a0c>
   81420:	9c000217 	ldw	r16,8(r19)
   81424:	00bfff04 	movi	r2,-4
   81428:	80c00117 	ldw	r3,4(r16)
   8142c:	1886703a 	and	r3,r3,r2
   81430:	003f5306 	br	81180 <__alt_data_end+0xfffc2980>
   81434:	3083ffcc 	andi	r2,r6,4095
   81438:	103f181e 	bne	r2,zero,8109c <__alt_data_end+0xfffc289c>
   8143c:	99000217 	ldw	r4,8(r19)
   81440:	b545883a 	add	r2,r22,r21
   81444:	10800054 	ori	r2,r2,1
   81448:	20800115 	stw	r2,4(r4)
   8144c:	003f3e06 	br	81148 <__alt_data_end+0xfffc2948>
   81450:	01003f84 	movi	r4,254
   81454:	02001fc4 	movi	r8,127
   81458:	01c01f84 	movi	r7,126
   8145c:	003e4006 	br	80d60 <__alt_data_end+0xfffc2560>
   81460:	008002b4 	movhi	r2,10
   81464:	10a87c04 	addi	r2,r2,-24080
   81468:	15000015 	stw	r20,0(r2)
   8146c:	003f1106 	br	810b4 <__alt_data_end+0xfffc28b4>
   81470:	00800044 	movi	r2,1
   81474:	002b883a 	mov	r21,zero
   81478:	003f1f06 	br	810f8 <__alt_data_end+0xfffc28f8>
   8147c:	81400204 	addi	r5,r16,8
   81480:	9009883a 	mov	r4,r18
   81484:	0085c7c0 	call	85c7c <_free_r>
   81488:	008002b4 	movhi	r2,10
   8148c:	10afbb04 	addi	r2,r2,-16660
   81490:	10c00017 	ldw	r3,0(r2)
   81494:	003f2c06 	br	81148 <__alt_data_end+0xfffc2948>
   81498:	00c05504 	movi	r3,340
   8149c:	18800536 	bltu	r3,r2,814b4 <_malloc_r+0x7cc>
   814a0:	3804d3fa 	srli	r2,r7,15
   814a4:	11401e04 	addi	r5,r2,120
   814a8:	10c01dc4 	addi	r3,r2,119
   814ac:	294b883a 	add	r5,r5,r5
   814b0:	003f5606 	br	8120c <__alt_data_end+0xfffc2a0c>
   814b4:	00c15504 	movi	r3,1364
   814b8:	18800536 	bltu	r3,r2,814d0 <_malloc_r+0x7e8>
   814bc:	3804d4ba 	srli	r2,r7,18
   814c0:	11401f44 	addi	r5,r2,125
   814c4:	10c01f04 	addi	r3,r2,124
   814c8:	294b883a 	add	r5,r5,r5
   814cc:	003f4f06 	br	8120c <__alt_data_end+0xfffc2a0c>
   814d0:	01403f84 	movi	r5,254
   814d4:	00c01f84 	movi	r3,126
   814d8:	003f4c06 	br	8120c <__alt_data_end+0xfffc2a0c>
   814dc:	98800117 	ldw	r2,4(r19)
   814e0:	003fa006 	br	81364 <__alt_data_end+0xfffc2b64>
   814e4:	8808d0fa 	srli	r4,r17,3
   814e8:	20800044 	addi	r2,r4,1
   814ec:	1085883a 	add	r2,r2,r2
   814f0:	003e9006 	br	80f34 <__alt_data_end+0xfffc2734>

000814f4 <_printf_r>:
   814f4:	defffd04 	addi	sp,sp,-12
   814f8:	2805883a 	mov	r2,r5
   814fc:	dfc00015 	stw	ra,0(sp)
   81500:	d9800115 	stw	r6,4(sp)
   81504:	d9c00215 	stw	r7,8(sp)
   81508:	21400217 	ldw	r5,8(r4)
   8150c:	d9c00104 	addi	r7,sp,4
   81510:	100d883a 	mov	r6,r2
   81514:	00817480 	call	81748 <___vfprintf_internal_r>
   81518:	dfc00017 	ldw	ra,0(sp)
   8151c:	dec00304 	addi	sp,sp,12
   81520:	f800283a 	ret

00081524 <printf>:
   81524:	defffc04 	addi	sp,sp,-16
   81528:	dfc00015 	stw	ra,0(sp)
   8152c:	d9400115 	stw	r5,4(sp)
   81530:	d9800215 	stw	r6,8(sp)
   81534:	d9c00315 	stw	r7,12(sp)
   81538:	008002b4 	movhi	r2,10
   8153c:	10a87f04 	addi	r2,r2,-24068
   81540:	10800017 	ldw	r2,0(r2)
   81544:	200b883a 	mov	r5,r4
   81548:	d9800104 	addi	r6,sp,4
   8154c:	11000217 	ldw	r4,8(r2)
   81550:	0083a240 	call	83a24 <__vfprintf_internal>
   81554:	dfc00017 	ldw	ra,0(sp)
   81558:	dec00404 	addi	sp,sp,16
   8155c:	f800283a 	ret

00081560 <_sbrk_r>:
   81560:	defffd04 	addi	sp,sp,-12
   81564:	dc000015 	stw	r16,0(sp)
   81568:	040002b4 	movhi	r16,10
   8156c:	dc400115 	stw	r17,4(sp)
   81570:	842f9804 	addi	r16,r16,-16800
   81574:	2023883a 	mov	r17,r4
   81578:	2809883a 	mov	r4,r5
   8157c:	dfc00215 	stw	ra,8(sp)
   81580:	80000015 	stw	zero,0(r16)
   81584:	008e4980 	call	8e498 <sbrk>
   81588:	00ffffc4 	movi	r3,-1
   8158c:	10c00526 	beq	r2,r3,815a4 <_sbrk_r+0x44>
   81590:	dfc00217 	ldw	ra,8(sp)
   81594:	dc400117 	ldw	r17,4(sp)
   81598:	dc000017 	ldw	r16,0(sp)
   8159c:	dec00304 	addi	sp,sp,12
   815a0:	f800283a 	ret
   815a4:	80c00017 	ldw	r3,0(r16)
   815a8:	183ff926 	beq	r3,zero,81590 <__alt_data_end+0xfffc2d90>
   815ac:	88c00015 	stw	r3,0(r17)
   815b0:	003ff706 	br	81590 <__alt_data_end+0xfffc2d90>

000815b4 <strcmp>:
   815b4:	2144b03a 	or	r2,r4,r5
   815b8:	108000cc 	andi	r2,r2,3
   815bc:	1000171e 	bne	r2,zero,8161c <strcmp+0x68>
   815c0:	20800017 	ldw	r2,0(r4)
   815c4:	28c00017 	ldw	r3,0(r5)
   815c8:	10c0141e 	bne	r2,r3,8161c <strcmp+0x68>
   815cc:	027fbff4 	movhi	r9,65279
   815d0:	4a7fbfc4 	addi	r9,r9,-257
   815d4:	0086303a 	nor	r3,zero,r2
   815d8:	02202074 	movhi	r8,32897
   815dc:	1245883a 	add	r2,r2,r9
   815e0:	42202004 	addi	r8,r8,-32640
   815e4:	10c4703a 	and	r2,r2,r3
   815e8:	1204703a 	and	r2,r2,r8
   815ec:	10000226 	beq	r2,zero,815f8 <strcmp+0x44>
   815f0:	00002306 	br	81680 <strcmp+0xcc>
   815f4:	1000221e 	bne	r2,zero,81680 <strcmp+0xcc>
   815f8:	21000104 	addi	r4,r4,4
   815fc:	20c00017 	ldw	r3,0(r4)
   81600:	29400104 	addi	r5,r5,4
   81604:	29800017 	ldw	r6,0(r5)
   81608:	1a4f883a 	add	r7,r3,r9
   8160c:	00c4303a 	nor	r2,zero,r3
   81610:	3884703a 	and	r2,r7,r2
   81614:	1204703a 	and	r2,r2,r8
   81618:	19bff626 	beq	r3,r6,815f4 <__alt_data_end+0xfffc2df4>
   8161c:	20800003 	ldbu	r2,0(r4)
   81620:	10c03fcc 	andi	r3,r2,255
   81624:	18c0201c 	xori	r3,r3,128
   81628:	18ffe004 	addi	r3,r3,-128
   8162c:	18000c26 	beq	r3,zero,81660 <strcmp+0xac>
   81630:	29800007 	ldb	r6,0(r5)
   81634:	19800326 	beq	r3,r6,81644 <strcmp+0x90>
   81638:	00001306 	br	81688 <strcmp+0xd4>
   8163c:	29800007 	ldb	r6,0(r5)
   81640:	11800b1e 	bne	r2,r6,81670 <strcmp+0xbc>
   81644:	21000044 	addi	r4,r4,1
   81648:	20c00003 	ldbu	r3,0(r4)
   8164c:	29400044 	addi	r5,r5,1
   81650:	18803fcc 	andi	r2,r3,255
   81654:	1080201c 	xori	r2,r2,128
   81658:	10bfe004 	addi	r2,r2,-128
   8165c:	103ff71e 	bne	r2,zero,8163c <__alt_data_end+0xfffc2e3c>
   81660:	0007883a 	mov	r3,zero
   81664:	28800003 	ldbu	r2,0(r5)
   81668:	1885c83a 	sub	r2,r3,r2
   8166c:	f800283a 	ret
   81670:	28800003 	ldbu	r2,0(r5)
   81674:	18c03fcc 	andi	r3,r3,255
   81678:	1885c83a 	sub	r2,r3,r2
   8167c:	f800283a 	ret
   81680:	0005883a 	mov	r2,zero
   81684:	f800283a 	ret
   81688:	10c03fcc 	andi	r3,r2,255
   8168c:	003ff506 	br	81664 <__alt_data_end+0xfffc2e64>

00081690 <strncat>:
   81690:	20c000cc 	andi	r3,r4,3
   81694:	2005883a 	mov	r2,r4
   81698:	1800271e 	bne	r3,zero,81738 <strncat+0xa8>
   8169c:	21000017 	ldw	r4,0(r4)
   816a0:	02bfbff4 	movhi	r10,65279
   816a4:	52bfbfc4 	addi	r10,r10,-257
   816a8:	0106303a 	nor	r3,zero,r4
   816ac:	02602074 	movhi	r9,32897
   816b0:	2289883a 	add	r4,r4,r10
   816b4:	20c8703a 	and	r4,r4,r3
   816b8:	4a602004 	addi	r9,r9,-32640
   816bc:	2248703a 	and	r4,r4,r9
   816c0:	1007883a 	mov	r3,r2
   816c4:	2000071e 	bne	r4,zero,816e4 <strncat+0x54>
   816c8:	18c00104 	addi	r3,r3,4
   816cc:	19c00017 	ldw	r7,0(r3)
   816d0:	3a91883a 	add	r8,r7,r10
   816d4:	01ce303a 	nor	r7,zero,r7
   816d8:	41ce703a 	and	r7,r8,r7
   816dc:	3a4e703a 	and	r7,r7,r9
   816e0:	383ff926 	beq	r7,zero,816c8 <__alt_data_end+0xfffc2ec8>
   816e4:	19000007 	ldb	r4,0(r3)
   816e8:	20000326 	beq	r4,zero,816f8 <strncat+0x68>
   816ec:	18c00044 	addi	r3,r3,1
   816f0:	19c00007 	ldb	r7,0(r3)
   816f4:	383ffd1e 	bne	r7,zero,816ec <__alt_data_end+0xfffc2eec>
   816f8:	1811883a 	mov	r8,r3
   816fc:	1993883a 	add	r9,r3,r6
   81700:	00000a06 	br	8172c <strncat+0x9c>
   81704:	29c00003 	ldbu	r7,0(r5)
   81708:	18c00044 	addi	r3,r3,1
   8170c:	29400044 	addi	r5,r5,1
   81710:	41c00005 	stb	r7,0(r8)
   81714:	39c03fcc 	andi	r7,r7,255
   81718:	39c0201c 	xori	r7,r7,128
   8171c:	39ffe004 	addi	r7,r7,-128
   81720:	38000426 	beq	r7,zero,81734 <strncat+0xa4>
   81724:	30000626 	beq	r6,zero,81740 <strncat+0xb0>
   81728:	42000044 	addi	r8,r8,1
   8172c:	31bfffc4 	addi	r6,r6,-1
   81730:	1a7ff41e 	bne	r3,r9,81704 <__alt_data_end+0xfffc2f04>
   81734:	f800283a 	ret
   81738:	2007883a 	mov	r3,r4
   8173c:	003fe906 	br	816e4 <__alt_data_end+0xfffc2ee4>
   81740:	18000005 	stb	zero,0(r3)
   81744:	003ff806 	br	81728 <__alt_data_end+0xfffc2f28>

00081748 <___vfprintf_internal_r>:
   81748:	deffb804 	addi	sp,sp,-288
   8174c:	dfc04715 	stw	ra,284(sp)
   81750:	ddc04515 	stw	r23,276(sp)
   81754:	dd404315 	stw	r21,268(sp)
   81758:	d9002d15 	stw	r4,180(sp)
   8175c:	282f883a 	mov	r23,r5
   81760:	302b883a 	mov	r21,r6
   81764:	d9c02e15 	stw	r7,184(sp)
   81768:	df004615 	stw	fp,280(sp)
   8176c:	dd804415 	stw	r22,272(sp)
   81770:	dd004215 	stw	r20,264(sp)
   81774:	dcc04115 	stw	r19,260(sp)
   81778:	dc804015 	stw	r18,256(sp)
   8177c:	dc403f15 	stw	r17,252(sp)
   81780:	dc003e15 	stw	r16,248(sp)
   81784:	00861c00 	call	861c0 <_localeconv_r>
   81788:	10800017 	ldw	r2,0(r2)
   8178c:	1009883a 	mov	r4,r2
   81790:	d8803415 	stw	r2,208(sp)
   81794:	00879680 	call	87968 <strlen>
   81798:	d8803715 	stw	r2,220(sp)
   8179c:	d8802d17 	ldw	r2,180(sp)
   817a0:	10000226 	beq	r2,zero,817ac <___vfprintf_internal_r+0x64>
   817a4:	10800e17 	ldw	r2,56(r2)
   817a8:	1000fb26 	beq	r2,zero,81b98 <___vfprintf_internal_r+0x450>
   817ac:	b880030b 	ldhu	r2,12(r23)
   817b0:	10c8000c 	andi	r3,r2,8192
   817b4:	1800061e 	bne	r3,zero,817d0 <___vfprintf_internal_r+0x88>
   817b8:	b9001917 	ldw	r4,100(r23)
   817bc:	00f7ffc4 	movi	r3,-8193
   817c0:	10880014 	ori	r2,r2,8192
   817c4:	20c6703a 	and	r3,r4,r3
   817c8:	b880030d 	sth	r2,12(r23)
   817cc:	b8c01915 	stw	r3,100(r23)
   817d0:	10c0020c 	andi	r3,r2,8
   817d4:	1800c326 	beq	r3,zero,81ae4 <___vfprintf_internal_r+0x39c>
   817d8:	b8c00417 	ldw	r3,16(r23)
   817dc:	1800c126 	beq	r3,zero,81ae4 <___vfprintf_internal_r+0x39c>
   817e0:	1080068c 	andi	r2,r2,26
   817e4:	00c00284 	movi	r3,10
   817e8:	10c0c626 	beq	r2,r3,81b04 <___vfprintf_internal_r+0x3bc>
   817ec:	d8c00404 	addi	r3,sp,16
   817f0:	050002b4 	movhi	r20,10
   817f4:	d9001e04 	addi	r4,sp,120
   817f8:	a520d584 	addi	r20,r20,-31914
   817fc:	d8c01e15 	stw	r3,120(sp)
   81800:	d8002015 	stw	zero,128(sp)
   81804:	d8001f15 	stw	zero,124(sp)
   81808:	d8003315 	stw	zero,204(sp)
   8180c:	d8003615 	stw	zero,216(sp)
   81810:	d8003815 	stw	zero,224(sp)
   81814:	1811883a 	mov	r8,r3
   81818:	d8003915 	stw	zero,228(sp)
   8181c:	d8003a15 	stw	zero,232(sp)
   81820:	d8002f15 	stw	zero,188(sp)
   81824:	d9002815 	stw	r4,160(sp)
   81828:	a8800007 	ldb	r2,0(r21)
   8182c:	10028b26 	beq	r2,zero,8225c <___vfprintf_internal_r+0xb14>
   81830:	00c00944 	movi	r3,37
   81834:	a823883a 	mov	r17,r21
   81838:	10c0021e 	bne	r2,r3,81844 <___vfprintf_internal_r+0xfc>
   8183c:	00001406 	br	81890 <___vfprintf_internal_r+0x148>
   81840:	10c00326 	beq	r2,r3,81850 <___vfprintf_internal_r+0x108>
   81844:	8c400044 	addi	r17,r17,1
   81848:	88800007 	ldb	r2,0(r17)
   8184c:	103ffc1e 	bne	r2,zero,81840 <__alt_data_end+0xfffc3040>
   81850:	8d61c83a 	sub	r16,r17,r21
   81854:	80000e26 	beq	r16,zero,81890 <___vfprintf_internal_r+0x148>
   81858:	d8c02017 	ldw	r3,128(sp)
   8185c:	d8801f17 	ldw	r2,124(sp)
   81860:	45400015 	stw	r21,0(r8)
   81864:	1c07883a 	add	r3,r3,r16
   81868:	10800044 	addi	r2,r2,1
   8186c:	d8c02015 	stw	r3,128(sp)
   81870:	44000115 	stw	r16,4(r8)
   81874:	d8801f15 	stw	r2,124(sp)
   81878:	00c001c4 	movi	r3,7
   8187c:	1880a916 	blt	r3,r2,81b24 <___vfprintf_internal_r+0x3dc>
   81880:	42000204 	addi	r8,r8,8
   81884:	d9402f17 	ldw	r5,188(sp)
   81888:	2c0b883a 	add	r5,r5,r16
   8188c:	d9402f15 	stw	r5,188(sp)
   81890:	88800007 	ldb	r2,0(r17)
   81894:	1000aa26 	beq	r2,zero,81b40 <___vfprintf_internal_r+0x3f8>
   81898:	8d400044 	addi	r21,r17,1
   8189c:	8c400047 	ldb	r17,1(r17)
   818a0:	0021883a 	mov	r16,zero
   818a4:	00bfffc4 	movi	r2,-1
   818a8:	0025883a 	mov	r18,zero
   818ac:	dc002905 	stb	r16,164(sp)
   818b0:	d8002785 	stb	zero,158(sp)
   818b4:	d8002b05 	stb	zero,172(sp)
   818b8:	d8802a15 	stw	r2,168(sp)
   818bc:	d8003115 	stw	zero,196(sp)
   818c0:	04c01604 	movi	r19,88
   818c4:	05800244 	movi	r22,9
   818c8:	9021883a 	mov	r16,r18
   818cc:	4039883a 	mov	fp,r8
   818d0:	ad400044 	addi	r21,r21,1
   818d4:	88bff804 	addi	r2,r17,-32
   818d8:	98833236 	bltu	r19,r2,825a4 <___vfprintf_internal_r+0xe5c>
   818dc:	100490ba 	slli	r2,r2,2
   818e0:	00c00234 	movhi	r3,8
   818e4:	18c63d04 	addi	r3,r3,6388
   818e8:	10c5883a 	add	r2,r2,r3
   818ec:	10800017 	ldw	r2,0(r2)
   818f0:	1000683a 	jmp	r2
   818f4:	0008249c 	xori	zero,zero,8338
   818f8:	000825a4 	muli	zero,zero,8342
   818fc:	000825a4 	muli	zero,zero,8342
   81900:	000824bc 	xorhi	zero,zero,8338
   81904:	000825a4 	muli	zero,zero,8342
   81908:	000825a4 	muli	zero,zero,8342
   8190c:	000825a4 	muli	zero,zero,8342
   81910:	000825a4 	muli	zero,zero,8342
   81914:	000825a4 	muli	zero,zero,8342
   81918:	000825a4 	muli	zero,zero,8342
   8191c:	00081ba4 	muli	zero,zero,8302
   81920:	000823ac 	andhi	zero,zero,8334
   81924:	000825a4 	muli	zero,zero,8342
   81928:	00081a68 	cmpgeui	zero,zero,8297
   8192c:	00081bc8 	cmpgei	zero,zero,8303
   81930:	000825a4 	muli	zero,zero,8342
   81934:	00081c18 	cmpnei	zero,zero,8304
   81938:	00081c24 	muli	zero,zero,8304
   8193c:	00081c24 	muli	zero,zero,8304
   81940:	00081c24 	muli	zero,zero,8304
   81944:	00081c24 	muli	zero,zero,8304
   81948:	00081c24 	muli	zero,zero,8304
   8194c:	00081c24 	muli	zero,zero,8304
   81950:	00081c24 	muli	zero,zero,8304
   81954:	00081c24 	muli	zero,zero,8304
   81958:	00081c24 	muli	zero,zero,8304
   8195c:	000825a4 	muli	zero,zero,8342
   81960:	000825a4 	muli	zero,zero,8342
   81964:	000825a4 	muli	zero,zero,8342
   81968:	000825a4 	muli	zero,zero,8342
   8196c:	000825a4 	muli	zero,zero,8342
   81970:	000825a4 	muli	zero,zero,8342
   81974:	000825a4 	muli	zero,zero,8342
   81978:	000825a4 	muli	zero,zero,8342
   8197c:	000825a4 	muli	zero,zero,8342
   81980:	000825a4 	muli	zero,zero,8342
   81984:	00081c60 	cmpeqi	zero,zero,8305
   81988:	00081d28 	cmpgeui	zero,zero,8308
   8198c:	000825a4 	muli	zero,zero,8342
   81990:	00081d28 	cmpgeui	zero,zero,8308
   81994:	000825a4 	muli	zero,zero,8342
   81998:	000825a4 	muli	zero,zero,8342
   8199c:	000825a4 	muli	zero,zero,8342
   819a0:	000825a4 	muli	zero,zero,8342
   819a4:	00081dd4 	movui	zero,8311
   819a8:	000825a4 	muli	zero,zero,8342
   819ac:	000825a4 	muli	zero,zero,8342
   819b0:	00081de0 	cmpeqi	zero,zero,8311
   819b4:	000825a4 	muli	zero,zero,8342
   819b8:	000825a4 	muli	zero,zero,8342
   819bc:	000825a4 	muli	zero,zero,8342
   819c0:	000825a4 	muli	zero,zero,8342
   819c4:	000825a4 	muli	zero,zero,8342
   819c8:	00082264 	muli	zero,zero,8329
   819cc:	000825a4 	muli	zero,zero,8342
   819d0:	000825a4 	muli	zero,zero,8342
   819d4:	000822d0 	cmplti	zero,zero,8331
   819d8:	000825a4 	muli	zero,zero,8342
   819dc:	000825a4 	muli	zero,zero,8342
   819e0:	000825a4 	muli	zero,zero,8342
   819e4:	000825a4 	muli	zero,zero,8342
   819e8:	000825a4 	muli	zero,zero,8342
   819ec:	000825a4 	muli	zero,zero,8342
   819f0:	000825a4 	muli	zero,zero,8342
   819f4:	000825a4 	muli	zero,zero,8342
   819f8:	000825a4 	muli	zero,zero,8342
   819fc:	000825a4 	muli	zero,zero,8342
   81a00:	00082548 	cmpgei	zero,zero,8341
   81a04:	000824c8 	cmpgei	zero,zero,8339
   81a08:	00081d28 	cmpgeui	zero,zero,8308
   81a0c:	00081d28 	cmpgeui	zero,zero,8308
   81a10:	00081d28 	cmpgeui	zero,zero,8308
   81a14:	000824e8 	cmpgeui	zero,zero,8339
   81a18:	000824c8 	cmpgei	zero,zero,8339
   81a1c:	000825a4 	muli	zero,zero,8342
   81a20:	000825a4 	muli	zero,zero,8342
   81a24:	000824f4 	movhi	zero,8339
   81a28:	000825a4 	muli	zero,zero,8342
   81a2c:	00082508 	cmpgei	zero,zero,8340
   81a30:	0008238c 	andi	zero,zero,8334
   81a34:	00081a74 	movhi	zero,8297
   81a38:	000823c4 	movi	zero,8335
   81a3c:	000825a4 	muli	zero,zero,8342
   81a40:	000823d0 	cmplti	zero,zero,8335
   81a44:	000825a4 	muli	zero,zero,8342
   81a48:	00082434 	movhi	zero,8336
   81a4c:	000825a4 	muli	zero,zero,8342
   81a50:	000825a4 	muli	zero,zero,8342
   81a54:	00082454 	movui	zero,8337
   81a58:	d8c03117 	ldw	r3,196(sp)
   81a5c:	d8802e15 	stw	r2,184(sp)
   81a60:	00c7c83a 	sub	r3,zero,r3
   81a64:	d8c03115 	stw	r3,196(sp)
   81a68:	84000114 	ori	r16,r16,4
   81a6c:	ac400007 	ldb	r17,0(r21)
   81a70:	003f9706 	br	818d0 <__alt_data_end+0xfffc30d0>
   81a74:	00800c04 	movi	r2,48
   81a78:	d8802705 	stb	r2,156(sp)
   81a7c:	00801e04 	movi	r2,120
   81a80:	d8802745 	stb	r2,157(sp)
   81a84:	d9002a17 	ldw	r4,168(sp)
   81a88:	d8802e17 	ldw	r2,184(sp)
   81a8c:	d8002785 	stb	zero,158(sp)
   81a90:	e011883a 	mov	r8,fp
   81a94:	10c00104 	addi	r3,r2,4
   81a98:	14c00017 	ldw	r19,0(r2)
   81a9c:	002d883a 	mov	r22,zero
   81aa0:	80800094 	ori	r2,r16,2
   81aa4:	2002ca16 	blt	r4,zero,825d0 <___vfprintf_internal_r+0xe88>
   81aa8:	00bfdfc4 	movi	r2,-129
   81aac:	80a4703a 	and	r18,r16,r2
   81ab0:	d8c02e15 	stw	r3,184(sp)
   81ab4:	94800094 	ori	r18,r18,2
   81ab8:	9802b41e 	bne	r19,zero,8258c <___vfprintf_internal_r+0xe44>
   81abc:	014002b4 	movhi	r5,10
   81ac0:	2960ce04 	addi	r5,r5,-31944
   81ac4:	d9403915 	stw	r5,228(sp)
   81ac8:	04401e04 	movi	r17,120
   81acc:	d8802a17 	ldw	r2,168(sp)
   81ad0:	0039883a 	mov	fp,zero
   81ad4:	1001fa26 	beq	r2,zero,822c0 <___vfprintf_internal_r+0xb78>
   81ad8:	0027883a 	mov	r19,zero
   81adc:	002d883a 	mov	r22,zero
   81ae0:	00021906 	br	82348 <___vfprintf_internal_r+0xc00>
   81ae4:	d9002d17 	ldw	r4,180(sp)
   81ae8:	b80b883a 	mov	r5,r23
   81aec:	0083afc0 	call	83afc <__swsetup_r>
   81af0:	1005dc1e 	bne	r2,zero,83264 <___vfprintf_internal_r+0x1b1c>
   81af4:	b880030b 	ldhu	r2,12(r23)
   81af8:	00c00284 	movi	r3,10
   81afc:	1080068c 	andi	r2,r2,26
   81b00:	10ff3a1e 	bne	r2,r3,817ec <__alt_data_end+0xfffc2fec>
   81b04:	b880038f 	ldh	r2,14(r23)
   81b08:	103f3816 	blt	r2,zero,817ec <__alt_data_end+0xfffc2fec>
   81b0c:	d9c02e17 	ldw	r7,184(sp)
   81b10:	d9002d17 	ldw	r4,180(sp)
   81b14:	a80d883a 	mov	r6,r21
   81b18:	b80b883a 	mov	r5,r23
   81b1c:	0083a400 	call	83a40 <__sbprintf>
   81b20:	00001106 	br	81b68 <___vfprintf_internal_r+0x420>
   81b24:	d9002d17 	ldw	r4,180(sp)
   81b28:	d9801e04 	addi	r6,sp,120
   81b2c:	b80b883a 	mov	r5,r23
   81b30:	0087afc0 	call	87afc <__sprint_r>
   81b34:	1000081e 	bne	r2,zero,81b58 <___vfprintf_internal_r+0x410>
   81b38:	da000404 	addi	r8,sp,16
   81b3c:	003f5106 	br	81884 <__alt_data_end+0xfffc3084>
   81b40:	d8802017 	ldw	r2,128(sp)
   81b44:	10000426 	beq	r2,zero,81b58 <___vfprintf_internal_r+0x410>
   81b48:	d9002d17 	ldw	r4,180(sp)
   81b4c:	d9801e04 	addi	r6,sp,120
   81b50:	b80b883a 	mov	r5,r23
   81b54:	0087afc0 	call	87afc <__sprint_r>
   81b58:	b880030b 	ldhu	r2,12(r23)
   81b5c:	1080100c 	andi	r2,r2,64
   81b60:	1005c01e 	bne	r2,zero,83264 <___vfprintf_internal_r+0x1b1c>
   81b64:	d8802f17 	ldw	r2,188(sp)
   81b68:	dfc04717 	ldw	ra,284(sp)
   81b6c:	df004617 	ldw	fp,280(sp)
   81b70:	ddc04517 	ldw	r23,276(sp)
   81b74:	dd804417 	ldw	r22,272(sp)
   81b78:	dd404317 	ldw	r21,268(sp)
   81b7c:	dd004217 	ldw	r20,264(sp)
   81b80:	dcc04117 	ldw	r19,260(sp)
   81b84:	dc804017 	ldw	r18,256(sp)
   81b88:	dc403f17 	ldw	r17,252(sp)
   81b8c:	dc003e17 	ldw	r16,248(sp)
   81b90:	dec04804 	addi	sp,sp,288
   81b94:	f800283a 	ret
   81b98:	d9002d17 	ldw	r4,180(sp)
   81b9c:	0085b080 	call	85b08 <__sinit>
   81ba0:	003f0206 	br	817ac <__alt_data_end+0xfffc2fac>
   81ba4:	d9002e17 	ldw	r4,184(sp)
   81ba8:	d9402e17 	ldw	r5,184(sp)
   81bac:	21000017 	ldw	r4,0(r4)
   81bb0:	28800104 	addi	r2,r5,4
   81bb4:	d9003115 	stw	r4,196(sp)
   81bb8:	203fa716 	blt	r4,zero,81a58 <__alt_data_end+0xfffc3258>
   81bbc:	d8802e15 	stw	r2,184(sp)
   81bc0:	ac400007 	ldb	r17,0(r21)
   81bc4:	003f4206 	br	818d0 <__alt_data_end+0xfffc30d0>
   81bc8:	ac400007 	ldb	r17,0(r21)
   81bcc:	01000a84 	movi	r4,42
   81bd0:	a8c00044 	addi	r3,r21,1
   81bd4:	89075826 	beq	r17,r4,83938 <___vfprintf_internal_r+0x21f0>
   81bd8:	8cbff404 	addi	r18,r17,-48
   81bdc:	b486ae36 	bltu	r22,r18,83698 <___vfprintf_internal_r+0x1f50>
   81be0:	0009883a 	mov	r4,zero
   81be4:	1823883a 	mov	r17,r3
   81be8:	01400284 	movi	r5,10
   81bec:	008b18c0 	call	8b18c <__mulsi3>
   81bf0:	88c00007 	ldb	r3,0(r17)
   81bf4:	1489883a 	add	r4,r2,r18
   81bf8:	8d400044 	addi	r21,r17,1
   81bfc:	1cbff404 	addi	r18,r3,-48
   81c00:	a823883a 	mov	r17,r21
   81c04:	b4bff82e 	bgeu	r22,r18,81be8 <__alt_data_end+0xfffc33e8>
   81c08:	1823883a 	mov	r17,r3
   81c0c:	2005f616 	blt	r4,zero,833e8 <___vfprintf_internal_r+0x1ca0>
   81c10:	d9002a15 	stw	r4,168(sp)
   81c14:	003f2f06 	br	818d4 <__alt_data_end+0xfffc30d4>
   81c18:	84002014 	ori	r16,r16,128
   81c1c:	ac400007 	ldb	r17,0(r21)
   81c20:	003f2b06 	br	818d0 <__alt_data_end+0xfffc30d0>
   81c24:	8cbff404 	addi	r18,r17,-48
   81c28:	d8003115 	stw	zero,196(sp)
   81c2c:	0009883a 	mov	r4,zero
   81c30:	a823883a 	mov	r17,r21
   81c34:	01400284 	movi	r5,10
   81c38:	008b18c0 	call	8b18c <__mulsi3>
   81c3c:	88c00007 	ldb	r3,0(r17)
   81c40:	9089883a 	add	r4,r18,r2
   81c44:	ad400044 	addi	r21,r21,1
   81c48:	1cbff404 	addi	r18,r3,-48
   81c4c:	a823883a 	mov	r17,r21
   81c50:	b4bff82e 	bgeu	r22,r18,81c34 <__alt_data_end+0xfffc3434>
   81c54:	1823883a 	mov	r17,r3
   81c58:	d9003115 	stw	r4,196(sp)
   81c5c:	003f1d06 	br	818d4 <__alt_data_end+0xfffc30d4>
   81c60:	8025883a 	mov	r18,r16
   81c64:	dc002903 	ldbu	r16,164(sp)
   81c68:	e011883a 	mov	r8,fp
   81c6c:	84003fcc 	andi	r16,r16,255
   81c70:	8007531e 	bne	r16,zero,839c0 <___vfprintf_internal_r+0x2278>
   81c74:	94800414 	ori	r18,r18,16
   81c78:	9080080c 	andi	r2,r18,32
   81c7c:	1003a326 	beq	r2,zero,82b0c <___vfprintf_internal_r+0x13c4>
   81c80:	d9002e17 	ldw	r4,184(sp)
   81c84:	20800117 	ldw	r2,4(r4)
   81c88:	24c00017 	ldw	r19,0(r4)
   81c8c:	21000204 	addi	r4,r4,8
   81c90:	d9002e15 	stw	r4,184(sp)
   81c94:	102d883a 	mov	r22,r2
   81c98:	10047316 	blt	r2,zero,82e68 <___vfprintf_internal_r+0x1720>
   81c9c:	d9002a17 	ldw	r4,168(sp)
   81ca0:	df002783 	ldbu	fp,158(sp)
   81ca4:	2003e416 	blt	r4,zero,82c38 <___vfprintf_internal_r+0x14f0>
   81ca8:	00ffdfc4 	movi	r3,-129
   81cac:	9d84b03a 	or	r2,r19,r22
   81cb0:	90e4703a 	and	r18,r18,r3
   81cb4:	10018026 	beq	r2,zero,822b8 <___vfprintf_internal_r+0xb70>
   81cb8:	b003ab26 	beq	r22,zero,82b68 <___vfprintf_internal_r+0x1420>
   81cbc:	dc402915 	stw	r17,164(sp)
   81cc0:	dc001e04 	addi	r16,sp,120
   81cc4:	b023883a 	mov	r17,r22
   81cc8:	402d883a 	mov	r22,r8
   81ccc:	9809883a 	mov	r4,r19
   81cd0:	880b883a 	mov	r5,r17
   81cd4:	01800284 	movi	r6,10
   81cd8:	000f883a 	mov	r7,zero
   81cdc:	008abc80 	call	8abc8 <__umoddi3>
   81ce0:	10800c04 	addi	r2,r2,48
   81ce4:	843fffc4 	addi	r16,r16,-1
   81ce8:	9809883a 	mov	r4,r19
   81cec:	880b883a 	mov	r5,r17
   81cf0:	80800005 	stb	r2,0(r16)
   81cf4:	01800284 	movi	r6,10
   81cf8:	000f883a 	mov	r7,zero
   81cfc:	008a5cc0 	call	8a5cc <__udivdi3>
   81d00:	1027883a 	mov	r19,r2
   81d04:	10c4b03a 	or	r2,r2,r3
   81d08:	1823883a 	mov	r17,r3
   81d0c:	103fef1e 	bne	r2,zero,81ccc <__alt_data_end+0xfffc34cc>
   81d10:	d8c02817 	ldw	r3,160(sp)
   81d14:	dc402917 	ldw	r17,164(sp)
   81d18:	b011883a 	mov	r8,r22
   81d1c:	1c07c83a 	sub	r3,r3,r16
   81d20:	d8c02b15 	stw	r3,172(sp)
   81d24:	00005f06 	br	81ea4 <___vfprintf_internal_r+0x75c>
   81d28:	8025883a 	mov	r18,r16
   81d2c:	dc002903 	ldbu	r16,164(sp)
   81d30:	e011883a 	mov	r8,fp
   81d34:	84003fcc 	andi	r16,r16,255
   81d38:	80071e1e 	bne	r16,zero,839b4 <___vfprintf_internal_r+0x226c>
   81d3c:	9080020c 	andi	r2,r18,8
   81d40:	1004af26 	beq	r2,zero,83000 <___vfprintf_internal_r+0x18b8>
   81d44:	d9002e17 	ldw	r4,184(sp)
   81d48:	d9402e17 	ldw	r5,184(sp)
   81d4c:	d8802e17 	ldw	r2,184(sp)
   81d50:	21000017 	ldw	r4,0(r4)
   81d54:	29400117 	ldw	r5,4(r5)
   81d58:	10800204 	addi	r2,r2,8
   81d5c:	d9003615 	stw	r4,216(sp)
   81d60:	d9403815 	stw	r5,224(sp)
   81d64:	d8802e15 	stw	r2,184(sp)
   81d68:	d9003617 	ldw	r4,216(sp)
   81d6c:	d9403817 	ldw	r5,224(sp)
   81d70:	da003d15 	stw	r8,244(sp)
   81d74:	04000044 	movi	r16,1
   81d78:	00877b80 	call	877b8 <__fpclassifyd>
   81d7c:	da003d17 	ldw	r8,244(sp)
   81d80:	1404441e 	bne	r2,r16,82e94 <___vfprintf_internal_r+0x174c>
   81d84:	d9003617 	ldw	r4,216(sp)
   81d88:	d9403817 	ldw	r5,224(sp)
   81d8c:	000d883a 	mov	r6,zero
   81d90:	000f883a 	mov	r7,zero
   81d94:	008c5940 	call	8c594 <__ledf2>
   81d98:	da003d17 	ldw	r8,244(sp)
   81d9c:	1005e316 	blt	r2,zero,8352c <___vfprintf_internal_r+0x1de4>
   81da0:	df002783 	ldbu	fp,158(sp)
   81da4:	008011c4 	movi	r2,71
   81da8:	1445580e 	bge	r2,r17,8330c <___vfprintf_internal_r+0x1bc4>
   81dac:	040002b4 	movhi	r16,10
   81db0:	8420c604 	addi	r16,r16,-31976
   81db4:	00c000c4 	movi	r3,3
   81db8:	00bfdfc4 	movi	r2,-129
   81dbc:	d8c02915 	stw	r3,164(sp)
   81dc0:	90a4703a 	and	r18,r18,r2
   81dc4:	d8c02b15 	stw	r3,172(sp)
   81dc8:	d8002a15 	stw	zero,168(sp)
   81dcc:	d8003215 	stw	zero,200(sp)
   81dd0:	00003a06 	br	81ebc <___vfprintf_internal_r+0x774>
   81dd4:	84000214 	ori	r16,r16,8
   81dd8:	ac400007 	ldb	r17,0(r21)
   81ddc:	003ebc06 	br	818d0 <__alt_data_end+0xfffc30d0>
   81de0:	8025883a 	mov	r18,r16
   81de4:	dc002903 	ldbu	r16,164(sp)
   81de8:	e011883a 	mov	r8,fp
   81dec:	84003fcc 	andi	r16,r16,255
   81df0:	8007001e 	bne	r16,zero,839f4 <___vfprintf_internal_r+0x22ac>
   81df4:	94800414 	ori	r18,r18,16
   81df8:	9080080c 	andi	r2,r18,32
   81dfc:	1002fa26 	beq	r2,zero,829e8 <___vfprintf_internal_r+0x12a0>
   81e00:	d9002e17 	ldw	r4,184(sp)
   81e04:	d9402a17 	ldw	r5,168(sp)
   81e08:	d8002785 	stb	zero,158(sp)
   81e0c:	20800204 	addi	r2,r4,8
   81e10:	24c00017 	ldw	r19,0(r4)
   81e14:	25800117 	ldw	r22,4(r4)
   81e18:	2804b116 	blt	r5,zero,830e0 <___vfprintf_internal_r+0x1998>
   81e1c:	013fdfc4 	movi	r4,-129
   81e20:	9d86b03a 	or	r3,r19,r22
   81e24:	d8802e15 	stw	r2,184(sp)
   81e28:	9124703a 	and	r18,r18,r4
   81e2c:	1802fb1e 	bne	r3,zero,82a1c <___vfprintf_internal_r+0x12d4>
   81e30:	d8c02a17 	ldw	r3,168(sp)
   81e34:	0039883a 	mov	fp,zero
   81e38:	1805e526 	beq	r3,zero,835d0 <___vfprintf_internal_r+0x1e88>
   81e3c:	0027883a 	mov	r19,zero
   81e40:	002d883a 	mov	r22,zero
   81e44:	dc001e04 	addi	r16,sp,120
   81e48:	9806d0fa 	srli	r3,r19,3
   81e4c:	b008977a 	slli	r4,r22,29
   81e50:	b02cd0fa 	srli	r22,r22,3
   81e54:	9cc001cc 	andi	r19,r19,7
   81e58:	98800c04 	addi	r2,r19,48
   81e5c:	843fffc4 	addi	r16,r16,-1
   81e60:	20e6b03a 	or	r19,r4,r3
   81e64:	80800005 	stb	r2,0(r16)
   81e68:	9d86b03a 	or	r3,r19,r22
   81e6c:	183ff61e 	bne	r3,zero,81e48 <__alt_data_end+0xfffc3648>
   81e70:	90c0004c 	andi	r3,r18,1
   81e74:	18014126 	beq	r3,zero,8237c <___vfprintf_internal_r+0xc34>
   81e78:	10803fcc 	andi	r2,r2,255
   81e7c:	1080201c 	xori	r2,r2,128
   81e80:	10bfe004 	addi	r2,r2,-128
   81e84:	00c00c04 	movi	r3,48
   81e88:	10c13c26 	beq	r2,r3,8237c <___vfprintf_internal_r+0xc34>
   81e8c:	80ffffc5 	stb	r3,-1(r16)
   81e90:	d8c02817 	ldw	r3,160(sp)
   81e94:	80bfffc4 	addi	r2,r16,-1
   81e98:	1021883a 	mov	r16,r2
   81e9c:	1887c83a 	sub	r3,r3,r2
   81ea0:	d8c02b15 	stw	r3,172(sp)
   81ea4:	d8802b17 	ldw	r2,172(sp)
   81ea8:	d9002a17 	ldw	r4,168(sp)
   81eac:	1100010e 	bge	r2,r4,81eb4 <___vfprintf_internal_r+0x76c>
   81eb0:	2005883a 	mov	r2,r4
   81eb4:	d8802915 	stw	r2,164(sp)
   81eb8:	d8003215 	stw	zero,200(sp)
   81ebc:	e7003fcc 	andi	fp,fp,255
   81ec0:	e700201c 	xori	fp,fp,128
   81ec4:	e73fe004 	addi	fp,fp,-128
   81ec8:	e0000326 	beq	fp,zero,81ed8 <___vfprintf_internal_r+0x790>
   81ecc:	d8c02917 	ldw	r3,164(sp)
   81ed0:	18c00044 	addi	r3,r3,1
   81ed4:	d8c02915 	stw	r3,164(sp)
   81ed8:	90c0008c 	andi	r3,r18,2
   81edc:	d8c02c15 	stw	r3,176(sp)
   81ee0:	18000326 	beq	r3,zero,81ef0 <___vfprintf_internal_r+0x7a8>
   81ee4:	d8c02917 	ldw	r3,164(sp)
   81ee8:	18c00084 	addi	r3,r3,2
   81eec:	d8c02915 	stw	r3,164(sp)
   81ef0:	90c0210c 	andi	r3,r18,132
   81ef4:	d8c03015 	stw	r3,192(sp)
   81ef8:	1801c51e 	bne	r3,zero,82610 <___vfprintf_internal_r+0xec8>
   81efc:	d9003117 	ldw	r4,196(sp)
   81f00:	d8c02917 	ldw	r3,164(sp)
   81f04:	20e7c83a 	sub	r19,r4,r3
   81f08:	04c1c10e 	bge	zero,r19,82610 <___vfprintf_internal_r+0xec8>
   81f0c:	02400404 	movi	r9,16
   81f10:	d8c02017 	ldw	r3,128(sp)
   81f14:	d8801f17 	ldw	r2,124(sp)
   81f18:	4cc52f0e 	bge	r9,r19,833d8 <___vfprintf_internal_r+0x1c90>
   81f1c:	014002b4 	movhi	r5,10
   81f20:	2960d984 	addi	r5,r5,-31898
   81f24:	dc403b15 	stw	r17,236(sp)
   81f28:	d9403515 	stw	r5,212(sp)
   81f2c:	9823883a 	mov	r17,r19
   81f30:	482d883a 	mov	r22,r9
   81f34:	9027883a 	mov	r19,r18
   81f38:	070001c4 	movi	fp,7
   81f3c:	8025883a 	mov	r18,r16
   81f40:	dc002d17 	ldw	r16,180(sp)
   81f44:	00000306 	br	81f54 <___vfprintf_internal_r+0x80c>
   81f48:	8c7ffc04 	addi	r17,r17,-16
   81f4c:	42000204 	addi	r8,r8,8
   81f50:	b440130e 	bge	r22,r17,81fa0 <___vfprintf_internal_r+0x858>
   81f54:	010002b4 	movhi	r4,10
   81f58:	18c00404 	addi	r3,r3,16
   81f5c:	10800044 	addi	r2,r2,1
   81f60:	2120d984 	addi	r4,r4,-31898
   81f64:	41000015 	stw	r4,0(r8)
   81f68:	45800115 	stw	r22,4(r8)
   81f6c:	d8c02015 	stw	r3,128(sp)
   81f70:	d8801f15 	stw	r2,124(sp)
   81f74:	e0bff40e 	bge	fp,r2,81f48 <__alt_data_end+0xfffc3748>
   81f78:	d9801e04 	addi	r6,sp,120
   81f7c:	b80b883a 	mov	r5,r23
   81f80:	8009883a 	mov	r4,r16
   81f84:	0087afc0 	call	87afc <__sprint_r>
   81f88:	103ef31e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   81f8c:	8c7ffc04 	addi	r17,r17,-16
   81f90:	d8c02017 	ldw	r3,128(sp)
   81f94:	d8801f17 	ldw	r2,124(sp)
   81f98:	da000404 	addi	r8,sp,16
   81f9c:	b47fed16 	blt	r22,r17,81f54 <__alt_data_end+0xfffc3754>
   81fa0:	9021883a 	mov	r16,r18
   81fa4:	9825883a 	mov	r18,r19
   81fa8:	8827883a 	mov	r19,r17
   81fac:	dc403b17 	ldw	r17,236(sp)
   81fb0:	d9403517 	ldw	r5,212(sp)
   81fb4:	98c7883a 	add	r3,r19,r3
   81fb8:	10800044 	addi	r2,r2,1
   81fbc:	41400015 	stw	r5,0(r8)
   81fc0:	44c00115 	stw	r19,4(r8)
   81fc4:	d8c02015 	stw	r3,128(sp)
   81fc8:	d8801f15 	stw	r2,124(sp)
   81fcc:	010001c4 	movi	r4,7
   81fd0:	2082c516 	blt	r4,r2,82ae8 <___vfprintf_internal_r+0x13a0>
   81fd4:	df002787 	ldb	fp,158(sp)
   81fd8:	42000204 	addi	r8,r8,8
   81fdc:	e0000c26 	beq	fp,zero,82010 <___vfprintf_internal_r+0x8c8>
   81fe0:	d8801f17 	ldw	r2,124(sp)
   81fe4:	d9002784 	addi	r4,sp,158
   81fe8:	18c00044 	addi	r3,r3,1
   81fec:	10800044 	addi	r2,r2,1
   81ff0:	41000015 	stw	r4,0(r8)
   81ff4:	01000044 	movi	r4,1
   81ff8:	41000115 	stw	r4,4(r8)
   81ffc:	d8c02015 	stw	r3,128(sp)
   82000:	d8801f15 	stw	r2,124(sp)
   82004:	010001c4 	movi	r4,7
   82008:	20825e16 	blt	r4,r2,82984 <___vfprintf_internal_r+0x123c>
   8200c:	42000204 	addi	r8,r8,8
   82010:	d8802c17 	ldw	r2,176(sp)
   82014:	10000c26 	beq	r2,zero,82048 <___vfprintf_internal_r+0x900>
   82018:	d8801f17 	ldw	r2,124(sp)
   8201c:	d9002704 	addi	r4,sp,156
   82020:	18c00084 	addi	r3,r3,2
   82024:	10800044 	addi	r2,r2,1
   82028:	41000015 	stw	r4,0(r8)
   8202c:	01000084 	movi	r4,2
   82030:	41000115 	stw	r4,4(r8)
   82034:	d8c02015 	stw	r3,128(sp)
   82038:	d8801f15 	stw	r2,124(sp)
   8203c:	010001c4 	movi	r4,7
   82040:	20825816 	blt	r4,r2,829a4 <___vfprintf_internal_r+0x125c>
   82044:	42000204 	addi	r8,r8,8
   82048:	d9003017 	ldw	r4,192(sp)
   8204c:	00802004 	movi	r2,128
   82050:	2081bb26 	beq	r4,r2,82740 <___vfprintf_internal_r+0xff8>
   82054:	d9402a17 	ldw	r5,168(sp)
   82058:	d8802b17 	ldw	r2,172(sp)
   8205c:	28adc83a 	sub	r22,r5,r2
   82060:	0580310e 	bge	zero,r22,82128 <___vfprintf_internal_r+0x9e0>
   82064:	07000404 	movi	fp,16
   82068:	d8801f17 	ldw	r2,124(sp)
   8206c:	e584360e 	bge	fp,r22,83148 <___vfprintf_internal_r+0x1a00>
   82070:	014002b4 	movhi	r5,10
   82074:	2960d584 	addi	r5,r5,-31914
   82078:	dc402a15 	stw	r17,168(sp)
   8207c:	d9402c15 	stw	r5,176(sp)
   82080:	b023883a 	mov	r17,r22
   82084:	04c001c4 	movi	r19,7
   82088:	a82d883a 	mov	r22,r21
   8208c:	902b883a 	mov	r21,r18
   82090:	8025883a 	mov	r18,r16
   82094:	dc002d17 	ldw	r16,180(sp)
   82098:	00000306 	br	820a8 <___vfprintf_internal_r+0x960>
   8209c:	8c7ffc04 	addi	r17,r17,-16
   820a0:	42000204 	addi	r8,r8,8
   820a4:	e440110e 	bge	fp,r17,820ec <___vfprintf_internal_r+0x9a4>
   820a8:	18c00404 	addi	r3,r3,16
   820ac:	10800044 	addi	r2,r2,1
   820b0:	45000015 	stw	r20,0(r8)
   820b4:	47000115 	stw	fp,4(r8)
   820b8:	d8c02015 	stw	r3,128(sp)
   820bc:	d8801f15 	stw	r2,124(sp)
   820c0:	98bff60e 	bge	r19,r2,8209c <__alt_data_end+0xfffc389c>
   820c4:	d9801e04 	addi	r6,sp,120
   820c8:	b80b883a 	mov	r5,r23
   820cc:	8009883a 	mov	r4,r16
   820d0:	0087afc0 	call	87afc <__sprint_r>
   820d4:	103ea01e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   820d8:	8c7ffc04 	addi	r17,r17,-16
   820dc:	d8c02017 	ldw	r3,128(sp)
   820e0:	d8801f17 	ldw	r2,124(sp)
   820e4:	da000404 	addi	r8,sp,16
   820e8:	e47fef16 	blt	fp,r17,820a8 <__alt_data_end+0xfffc38a8>
   820ec:	9021883a 	mov	r16,r18
   820f0:	a825883a 	mov	r18,r21
   820f4:	b02b883a 	mov	r21,r22
   820f8:	882d883a 	mov	r22,r17
   820fc:	dc402a17 	ldw	r17,168(sp)
   82100:	d9002c17 	ldw	r4,176(sp)
   82104:	1d87883a 	add	r3,r3,r22
   82108:	10800044 	addi	r2,r2,1
   8210c:	41000015 	stw	r4,0(r8)
   82110:	45800115 	stw	r22,4(r8)
   82114:	d8c02015 	stw	r3,128(sp)
   82118:	d8801f15 	stw	r2,124(sp)
   8211c:	010001c4 	movi	r4,7
   82120:	20821016 	blt	r4,r2,82964 <___vfprintf_internal_r+0x121c>
   82124:	42000204 	addi	r8,r8,8
   82128:	9080400c 	andi	r2,r18,256
   8212c:	10013a1e 	bne	r2,zero,82618 <___vfprintf_internal_r+0xed0>
   82130:	d9402b17 	ldw	r5,172(sp)
   82134:	d8801f17 	ldw	r2,124(sp)
   82138:	44000015 	stw	r16,0(r8)
   8213c:	1947883a 	add	r3,r3,r5
   82140:	10800044 	addi	r2,r2,1
   82144:	41400115 	stw	r5,4(r8)
   82148:	d8c02015 	stw	r3,128(sp)
   8214c:	d8801f15 	stw	r2,124(sp)
   82150:	010001c4 	movi	r4,7
   82154:	2081f516 	blt	r4,r2,8292c <___vfprintf_internal_r+0x11e4>
   82158:	42000204 	addi	r8,r8,8
   8215c:	9480010c 	andi	r18,r18,4
   82160:	90003226 	beq	r18,zero,8222c <___vfprintf_internal_r+0xae4>
   82164:	d9403117 	ldw	r5,196(sp)
   82168:	d8802917 	ldw	r2,164(sp)
   8216c:	28a1c83a 	sub	r16,r5,r2
   82170:	04002e0e 	bge	zero,r16,8222c <___vfprintf_internal_r+0xae4>
   82174:	04400404 	movi	r17,16
   82178:	d8801f17 	ldw	r2,124(sp)
   8217c:	8c04c40e 	bge	r17,r16,83490 <___vfprintf_internal_r+0x1d48>
   82180:	014002b4 	movhi	r5,10
   82184:	2960d984 	addi	r5,r5,-31898
   82188:	d9403515 	stw	r5,212(sp)
   8218c:	048001c4 	movi	r18,7
   82190:	dcc02d17 	ldw	r19,180(sp)
   82194:	00000306 	br	821a4 <___vfprintf_internal_r+0xa5c>
   82198:	843ffc04 	addi	r16,r16,-16
   8219c:	42000204 	addi	r8,r8,8
   821a0:	8c00130e 	bge	r17,r16,821f0 <___vfprintf_internal_r+0xaa8>
   821a4:	010002b4 	movhi	r4,10
   821a8:	18c00404 	addi	r3,r3,16
   821ac:	10800044 	addi	r2,r2,1
   821b0:	2120d984 	addi	r4,r4,-31898
   821b4:	41000015 	stw	r4,0(r8)
   821b8:	44400115 	stw	r17,4(r8)
   821bc:	d8c02015 	stw	r3,128(sp)
   821c0:	d8801f15 	stw	r2,124(sp)
   821c4:	90bff40e 	bge	r18,r2,82198 <__alt_data_end+0xfffc3998>
   821c8:	d9801e04 	addi	r6,sp,120
   821cc:	b80b883a 	mov	r5,r23
   821d0:	9809883a 	mov	r4,r19
   821d4:	0087afc0 	call	87afc <__sprint_r>
   821d8:	103e5f1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   821dc:	843ffc04 	addi	r16,r16,-16
   821e0:	d8c02017 	ldw	r3,128(sp)
   821e4:	d8801f17 	ldw	r2,124(sp)
   821e8:	da000404 	addi	r8,sp,16
   821ec:	8c3fed16 	blt	r17,r16,821a4 <__alt_data_end+0xfffc39a4>
   821f0:	d9403517 	ldw	r5,212(sp)
   821f4:	1c07883a 	add	r3,r3,r16
   821f8:	10800044 	addi	r2,r2,1
   821fc:	41400015 	stw	r5,0(r8)
   82200:	44000115 	stw	r16,4(r8)
   82204:	d8c02015 	stw	r3,128(sp)
   82208:	d8801f15 	stw	r2,124(sp)
   8220c:	010001c4 	movi	r4,7
   82210:	2080060e 	bge	r4,r2,8222c <___vfprintf_internal_r+0xae4>
   82214:	d9002d17 	ldw	r4,180(sp)
   82218:	d9801e04 	addi	r6,sp,120
   8221c:	b80b883a 	mov	r5,r23
   82220:	0087afc0 	call	87afc <__sprint_r>
   82224:	103e4c1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82228:	d8c02017 	ldw	r3,128(sp)
   8222c:	d8803117 	ldw	r2,196(sp)
   82230:	d9002917 	ldw	r4,164(sp)
   82234:	1100010e 	bge	r2,r4,8223c <___vfprintf_internal_r+0xaf4>
   82238:	2005883a 	mov	r2,r4
   8223c:	d9402f17 	ldw	r5,188(sp)
   82240:	288b883a 	add	r5,r5,r2
   82244:	d9402f15 	stw	r5,188(sp)
   82248:	1801c01e 	bne	r3,zero,8294c <___vfprintf_internal_r+0x1204>
   8224c:	a8800007 	ldb	r2,0(r21)
   82250:	d8001f15 	stw	zero,124(sp)
   82254:	da000404 	addi	r8,sp,16
   82258:	103d751e 	bne	r2,zero,81830 <__alt_data_end+0xfffc3030>
   8225c:	a823883a 	mov	r17,r21
   82260:	003d8b06 	br	81890 <__alt_data_end+0xfffc3090>
   82264:	8025883a 	mov	r18,r16
   82268:	dc002903 	ldbu	r16,164(sp)
   8226c:	e011883a 	mov	r8,fp
   82270:	84003fcc 	andi	r16,r16,255
   82274:	8005e51e 	bne	r16,zero,83a0c <___vfprintf_internal_r+0x22c4>
   82278:	94800414 	ori	r18,r18,16
   8227c:	9080080c 	andi	r2,r18,32
   82280:	10022b26 	beq	r2,zero,82b30 <___vfprintf_internal_r+0x13e8>
   82284:	d9002e17 	ldw	r4,184(sp)
   82288:	d9402a17 	ldw	r5,168(sp)
   8228c:	d8002785 	stb	zero,158(sp)
   82290:	20c00204 	addi	r3,r4,8
   82294:	24c00017 	ldw	r19,0(r4)
   82298:	25800117 	ldw	r22,4(r4)
   8229c:	28042e16 	blt	r5,zero,83358 <___vfprintf_internal_r+0x1c10>
   822a0:	013fdfc4 	movi	r4,-129
   822a4:	9d84b03a 	or	r2,r19,r22
   822a8:	d8c02e15 	stw	r3,184(sp)
   822ac:	9124703a 	and	r18,r18,r4
   822b0:	0039883a 	mov	fp,zero
   822b4:	103e801e 	bne	r2,zero,81cb8 <__alt_data_end+0xfffc34b8>
   822b8:	d9002a17 	ldw	r4,168(sp)
   822bc:	2002e01e 	bne	r4,zero,82e40 <___vfprintf_internal_r+0x16f8>
   822c0:	d8002a15 	stw	zero,168(sp)
   822c4:	d8002b15 	stw	zero,172(sp)
   822c8:	dc001e04 	addi	r16,sp,120
   822cc:	003ef506 	br	81ea4 <__alt_data_end+0xfffc36a4>
   822d0:	8025883a 	mov	r18,r16
   822d4:	dc002903 	ldbu	r16,164(sp)
   822d8:	e011883a 	mov	r8,fp
   822dc:	84003fcc 	andi	r16,r16,255
   822e0:	8005ba1e 	bne	r16,zero,839cc <___vfprintf_internal_r+0x2284>
   822e4:	010002b4 	movhi	r4,10
   822e8:	2120c904 	addi	r4,r4,-31964
   822ec:	d9003915 	stw	r4,228(sp)
   822f0:	9080080c 	andi	r2,r18,32
   822f4:	10006126 	beq	r2,zero,8247c <___vfprintf_internal_r+0xd34>
   822f8:	d9402e17 	ldw	r5,184(sp)
   822fc:	2cc00017 	ldw	r19,0(r5)
   82300:	2d800117 	ldw	r22,4(r5)
   82304:	29400204 	addi	r5,r5,8
   82308:	d9402e15 	stw	r5,184(sp)
   8230c:	9080004c 	andi	r2,r18,1
   82310:	1001ac26 	beq	r2,zero,829c4 <___vfprintf_internal_r+0x127c>
   82314:	9d84b03a 	or	r2,r19,r22
   82318:	10038526 	beq	r2,zero,83130 <___vfprintf_internal_r+0x19e8>
   8231c:	d8c02a17 	ldw	r3,168(sp)
   82320:	00800c04 	movi	r2,48
   82324:	d8802705 	stb	r2,156(sp)
   82328:	dc402745 	stb	r17,157(sp)
   8232c:	d8002785 	stb	zero,158(sp)
   82330:	90800094 	ori	r2,r18,2
   82334:	18047916 	blt	r3,zero,8351c <___vfprintf_internal_r+0x1dd4>
   82338:	00bfdfc4 	movi	r2,-129
   8233c:	90a4703a 	and	r18,r18,r2
   82340:	94800094 	ori	r18,r18,2
   82344:	0039883a 	mov	fp,zero
   82348:	d9003917 	ldw	r4,228(sp)
   8234c:	dc001e04 	addi	r16,sp,120
   82350:	988003cc 	andi	r2,r19,15
   82354:	b006973a 	slli	r3,r22,28
   82358:	2085883a 	add	r2,r4,r2
   8235c:	9826d13a 	srli	r19,r19,4
   82360:	10800003 	ldbu	r2,0(r2)
   82364:	b02cd13a 	srli	r22,r22,4
   82368:	843fffc4 	addi	r16,r16,-1
   8236c:	1ce6b03a 	or	r19,r3,r19
   82370:	80800005 	stb	r2,0(r16)
   82374:	9d84b03a 	or	r2,r19,r22
   82378:	103ff51e 	bne	r2,zero,82350 <__alt_data_end+0xfffc3b50>
   8237c:	d8c02817 	ldw	r3,160(sp)
   82380:	1c07c83a 	sub	r3,r3,r16
   82384:	d8c02b15 	stw	r3,172(sp)
   82388:	003ec606 	br	81ea4 <__alt_data_end+0xfffc36a4>
   8238c:	8025883a 	mov	r18,r16
   82390:	dc002903 	ldbu	r16,164(sp)
   82394:	e011883a 	mov	r8,fp
   82398:	84003fcc 	andi	r16,r16,255
   8239c:	803e9626 	beq	r16,zero,81df8 <__alt_data_end+0xfffc35f8>
   823a0:	d8c02b03 	ldbu	r3,172(sp)
   823a4:	d8c02785 	stb	r3,158(sp)
   823a8:	003e9306 	br	81df8 <__alt_data_end+0xfffc35f8>
   823ac:	00c00044 	movi	r3,1
   823b0:	d8c02905 	stb	r3,164(sp)
   823b4:	00c00ac4 	movi	r3,43
   823b8:	d8c02b05 	stb	r3,172(sp)
   823bc:	ac400007 	ldb	r17,0(r21)
   823c0:	003d4306 	br	818d0 <__alt_data_end+0xfffc30d0>
   823c4:	84000814 	ori	r16,r16,32
   823c8:	ac400007 	ldb	r17,0(r21)
   823cc:	003d4006 	br	818d0 <__alt_data_end+0xfffc30d0>
   823d0:	d8802e17 	ldw	r2,184(sp)
   823d4:	8025883a 	mov	r18,r16
   823d8:	d8002785 	stb	zero,158(sp)
   823dc:	14000017 	ldw	r16,0(r2)
   823e0:	e011883a 	mov	r8,fp
   823e4:	14c00104 	addi	r19,r2,4
   823e8:	80042d26 	beq	r16,zero,834a0 <___vfprintf_internal_r+0x1d58>
   823ec:	d8c02a17 	ldw	r3,168(sp)
   823f0:	1803e416 	blt	r3,zero,83384 <___vfprintf_internal_r+0x1c3c>
   823f4:	180d883a 	mov	r6,r3
   823f8:	000b883a 	mov	r5,zero
   823fc:	8009883a 	mov	r4,r16
   82400:	df003d15 	stw	fp,244(sp)
   82404:	00863ac0 	call	863ac <memchr>
   82408:	da003d17 	ldw	r8,244(sp)
   8240c:	10046826 	beq	r2,zero,835b0 <___vfprintf_internal_r+0x1e68>
   82410:	1405c83a 	sub	r2,r2,r16
   82414:	d8802b15 	stw	r2,172(sp)
   82418:	1003e016 	blt	r2,zero,8339c <___vfprintf_internal_r+0x1c54>
   8241c:	df002783 	ldbu	fp,158(sp)
   82420:	d8802915 	stw	r2,164(sp)
   82424:	dcc02e15 	stw	r19,184(sp)
   82428:	d8002a15 	stw	zero,168(sp)
   8242c:	d8003215 	stw	zero,200(sp)
   82430:	003ea206 	br	81ebc <__alt_data_end+0xfffc36bc>
   82434:	8025883a 	mov	r18,r16
   82438:	dc002903 	ldbu	r16,164(sp)
   8243c:	e011883a 	mov	r8,fp
   82440:	84003fcc 	andi	r16,r16,255
   82444:	803f8d26 	beq	r16,zero,8227c <__alt_data_end+0xfffc3a7c>
   82448:	d8c02b03 	ldbu	r3,172(sp)
   8244c:	d8c02785 	stb	r3,158(sp)
   82450:	003f8a06 	br	8227c <__alt_data_end+0xfffc3a7c>
   82454:	8025883a 	mov	r18,r16
   82458:	dc002903 	ldbu	r16,164(sp)
   8245c:	e011883a 	mov	r8,fp
   82460:	84003fcc 	andi	r16,r16,255
   82464:	8005661e 	bne	r16,zero,83a00 <___vfprintf_internal_r+0x22b8>
   82468:	010002b4 	movhi	r4,10
   8246c:	2120ce04 	addi	r4,r4,-31944
   82470:	d9003915 	stw	r4,228(sp)
   82474:	9080080c 	andi	r2,r18,32
   82478:	103f9f1e 	bne	r2,zero,822f8 <__alt_data_end+0xfffc3af8>
   8247c:	9080040c 	andi	r2,r18,16
   82480:	1002eb26 	beq	r2,zero,83030 <___vfprintf_internal_r+0x18e8>
   82484:	d8802e17 	ldw	r2,184(sp)
   82488:	002d883a 	mov	r22,zero
   8248c:	14c00017 	ldw	r19,0(r2)
   82490:	10800104 	addi	r2,r2,4
   82494:	d8802e15 	stw	r2,184(sp)
   82498:	003f9c06 	br	8230c <__alt_data_end+0xfffc3b0c>
   8249c:	d8802b07 	ldb	r2,172(sp)
   824a0:	1002e11e 	bne	r2,zero,83028 <___vfprintf_internal_r+0x18e0>
   824a4:	00c00044 	movi	r3,1
   824a8:	d8c02905 	stb	r3,164(sp)
   824ac:	00c00804 	movi	r3,32
   824b0:	d8c02b05 	stb	r3,172(sp)
   824b4:	ac400007 	ldb	r17,0(r21)
   824b8:	003d0506 	br	818d0 <__alt_data_end+0xfffc30d0>
   824bc:	84000054 	ori	r16,r16,1
   824c0:	ac400007 	ldb	r17,0(r21)
   824c4:	003d0206 	br	818d0 <__alt_data_end+0xfffc30d0>
   824c8:	8025883a 	mov	r18,r16
   824cc:	dc002903 	ldbu	r16,164(sp)
   824d0:	e011883a 	mov	r8,fp
   824d4:	84003fcc 	andi	r16,r16,255
   824d8:	803de726 	beq	r16,zero,81c78 <__alt_data_end+0xfffc3478>
   824dc:	d8c02b03 	ldbu	r3,172(sp)
   824e0:	d8c02785 	stb	r3,158(sp)
   824e4:	003de406 	br	81c78 <__alt_data_end+0xfffc3478>
   824e8:	84001014 	ori	r16,r16,64
   824ec:	ac400007 	ldb	r17,0(r21)
   824f0:	003cf706 	br	818d0 <__alt_data_end+0xfffc30d0>
   824f4:	ac400007 	ldb	r17,0(r21)
   824f8:	00801b04 	movi	r2,108
   824fc:	88838f26 	beq	r17,r2,8333c <___vfprintf_internal_r+0x1bf4>
   82500:	84000414 	ori	r16,r16,16
   82504:	003cf206 	br	818d0 <__alt_data_end+0xfffc30d0>
   82508:	8025883a 	mov	r18,r16
   8250c:	dc002903 	ldbu	r16,164(sp)
   82510:	e011883a 	mov	r8,fp
   82514:	84003fcc 	andi	r16,r16,255
   82518:	80053f1e 	bne	r16,zero,83a18 <___vfprintf_internal_r+0x22d0>
   8251c:	9080080c 	andi	r2,r18,32
   82520:	1002d226 	beq	r2,zero,8306c <___vfprintf_internal_r+0x1924>
   82524:	d9002e17 	ldw	r4,184(sp)
   82528:	d9402f17 	ldw	r5,188(sp)
   8252c:	20800017 	ldw	r2,0(r4)
   82530:	2807d7fa 	srai	r3,r5,31
   82534:	21000104 	addi	r4,r4,4
   82538:	d9002e15 	stw	r4,184(sp)
   8253c:	11400015 	stw	r5,0(r2)
   82540:	10c00115 	stw	r3,4(r2)
   82544:	003cb806 	br	81828 <__alt_data_end+0xfffc3028>
   82548:	d8c02e17 	ldw	r3,184(sp)
   8254c:	d9002e17 	ldw	r4,184(sp)
   82550:	8025883a 	mov	r18,r16
   82554:	18800017 	ldw	r2,0(r3)
   82558:	21000104 	addi	r4,r4,4
   8255c:	00c00044 	movi	r3,1
   82560:	e011883a 	mov	r8,fp
   82564:	d8c02915 	stw	r3,164(sp)
   82568:	d8002785 	stb	zero,158(sp)
   8256c:	d8801405 	stb	r2,80(sp)
   82570:	d9002e15 	stw	r4,184(sp)
   82574:	d8c02b15 	stw	r3,172(sp)
   82578:	d8002a15 	stw	zero,168(sp)
   8257c:	d8003215 	stw	zero,200(sp)
   82580:	dc001404 	addi	r16,sp,80
   82584:	0039883a 	mov	fp,zero
   82588:	003e5306 	br	81ed8 <__alt_data_end+0xfffc36d8>
   8258c:	010002b4 	movhi	r4,10
   82590:	2120ce04 	addi	r4,r4,-31944
   82594:	0039883a 	mov	fp,zero
   82598:	d9003915 	stw	r4,228(sp)
   8259c:	04401e04 	movi	r17,120
   825a0:	003f6906 	br	82348 <__alt_data_end+0xfffc3b48>
   825a4:	8025883a 	mov	r18,r16
   825a8:	dc002903 	ldbu	r16,164(sp)
   825ac:	e011883a 	mov	r8,fp
   825b0:	84003fcc 	andi	r16,r16,255
   825b4:	8005081e 	bne	r16,zero,839d8 <___vfprintf_internal_r+0x2290>
   825b8:	883d6126 	beq	r17,zero,81b40 <__alt_data_end+0xfffc3340>
   825bc:	00c00044 	movi	r3,1
   825c0:	d8c02915 	stw	r3,164(sp)
   825c4:	dc401405 	stb	r17,80(sp)
   825c8:	d8002785 	stb	zero,158(sp)
   825cc:	003fe906 	br	82574 <__alt_data_end+0xfffc3d74>
   825d0:	014002b4 	movhi	r5,10
   825d4:	2960ce04 	addi	r5,r5,-31944
   825d8:	d9403915 	stw	r5,228(sp)
   825dc:	d8c02e15 	stw	r3,184(sp)
   825e0:	1025883a 	mov	r18,r2
   825e4:	04401e04 	movi	r17,120
   825e8:	9d84b03a 	or	r2,r19,r22
   825ec:	1000fc1e 	bne	r2,zero,829e0 <___vfprintf_internal_r+0x1298>
   825f0:	0039883a 	mov	fp,zero
   825f4:	00800084 	movi	r2,2
   825f8:	10803fcc 	andi	r2,r2,255
   825fc:	00c00044 	movi	r3,1
   82600:	10c20f26 	beq	r2,r3,82e40 <___vfprintf_internal_r+0x16f8>
   82604:	00c00084 	movi	r3,2
   82608:	10fd3326 	beq	r2,r3,81ad8 <__alt_data_end+0xfffc32d8>
   8260c:	003e0b06 	br	81e3c <__alt_data_end+0xfffc363c>
   82610:	d8c02017 	ldw	r3,128(sp)
   82614:	003e7106 	br	81fdc <__alt_data_end+0xfffc37dc>
   82618:	00801944 	movi	r2,101
   8261c:	14407e0e 	bge	r2,r17,82818 <___vfprintf_internal_r+0x10d0>
   82620:	d9003617 	ldw	r4,216(sp)
   82624:	d9403817 	ldw	r5,224(sp)
   82628:	000d883a 	mov	r6,zero
   8262c:	000f883a 	mov	r7,zero
   82630:	d8c03c15 	stw	r3,240(sp)
   82634:	da003d15 	stw	r8,244(sp)
   82638:	008c4300 	call	8c430 <__eqdf2>
   8263c:	d8c03c17 	ldw	r3,240(sp)
   82640:	da003d17 	ldw	r8,244(sp)
   82644:	1000f71e 	bne	r2,zero,82a24 <___vfprintf_internal_r+0x12dc>
   82648:	d8801f17 	ldw	r2,124(sp)
   8264c:	010002b4 	movhi	r4,10
   82650:	2120d504 	addi	r4,r4,-31916
   82654:	18c00044 	addi	r3,r3,1
   82658:	10800044 	addi	r2,r2,1
   8265c:	41000015 	stw	r4,0(r8)
   82660:	01000044 	movi	r4,1
   82664:	41000115 	stw	r4,4(r8)
   82668:	d8c02015 	stw	r3,128(sp)
   8266c:	d8801f15 	stw	r2,124(sp)
   82670:	010001c4 	movi	r4,7
   82674:	2082b816 	blt	r4,r2,83158 <___vfprintf_internal_r+0x1a10>
   82678:	42000204 	addi	r8,r8,8
   8267c:	d8802617 	ldw	r2,152(sp)
   82680:	d9403317 	ldw	r5,204(sp)
   82684:	11400216 	blt	r2,r5,82690 <___vfprintf_internal_r+0xf48>
   82688:	9080004c 	andi	r2,r18,1
   8268c:	103eb326 	beq	r2,zero,8215c <__alt_data_end+0xfffc395c>
   82690:	d8803717 	ldw	r2,220(sp)
   82694:	d9003417 	ldw	r4,208(sp)
   82698:	d9403717 	ldw	r5,220(sp)
   8269c:	1887883a 	add	r3,r3,r2
   826a0:	d8801f17 	ldw	r2,124(sp)
   826a4:	41000015 	stw	r4,0(r8)
   826a8:	41400115 	stw	r5,4(r8)
   826ac:	10800044 	addi	r2,r2,1
   826b0:	d8c02015 	stw	r3,128(sp)
   826b4:	d8801f15 	stw	r2,124(sp)
   826b8:	010001c4 	movi	r4,7
   826bc:	20832916 	blt	r4,r2,83364 <___vfprintf_internal_r+0x1c1c>
   826c0:	42000204 	addi	r8,r8,8
   826c4:	d8803317 	ldw	r2,204(sp)
   826c8:	143fffc4 	addi	r16,r2,-1
   826cc:	043ea30e 	bge	zero,r16,8215c <__alt_data_end+0xfffc395c>
   826d0:	04400404 	movi	r17,16
   826d4:	d8801f17 	ldw	r2,124(sp)
   826d8:	8c00880e 	bge	r17,r16,828fc <___vfprintf_internal_r+0x11b4>
   826dc:	014002b4 	movhi	r5,10
   826e0:	2960d584 	addi	r5,r5,-31914
   826e4:	d9402c15 	stw	r5,176(sp)
   826e8:	058001c4 	movi	r22,7
   826ec:	dcc02d17 	ldw	r19,180(sp)
   826f0:	00000306 	br	82700 <___vfprintf_internal_r+0xfb8>
   826f4:	42000204 	addi	r8,r8,8
   826f8:	843ffc04 	addi	r16,r16,-16
   826fc:	8c00820e 	bge	r17,r16,82908 <___vfprintf_internal_r+0x11c0>
   82700:	18c00404 	addi	r3,r3,16
   82704:	10800044 	addi	r2,r2,1
   82708:	45000015 	stw	r20,0(r8)
   8270c:	44400115 	stw	r17,4(r8)
   82710:	d8c02015 	stw	r3,128(sp)
   82714:	d8801f15 	stw	r2,124(sp)
   82718:	b0bff60e 	bge	r22,r2,826f4 <__alt_data_end+0xfffc3ef4>
   8271c:	d9801e04 	addi	r6,sp,120
   82720:	b80b883a 	mov	r5,r23
   82724:	9809883a 	mov	r4,r19
   82728:	0087afc0 	call	87afc <__sprint_r>
   8272c:	103d0a1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82730:	d8c02017 	ldw	r3,128(sp)
   82734:	d8801f17 	ldw	r2,124(sp)
   82738:	da000404 	addi	r8,sp,16
   8273c:	003fee06 	br	826f8 <__alt_data_end+0xfffc3ef8>
   82740:	d9403117 	ldw	r5,196(sp)
   82744:	d8802917 	ldw	r2,164(sp)
   82748:	28adc83a 	sub	r22,r5,r2
   8274c:	05be410e 	bge	zero,r22,82054 <__alt_data_end+0xfffc3854>
   82750:	07000404 	movi	fp,16
   82754:	d8801f17 	ldw	r2,124(sp)
   82758:	e5838f0e 	bge	fp,r22,83598 <___vfprintf_internal_r+0x1e50>
   8275c:	014002b4 	movhi	r5,10
   82760:	2960d584 	addi	r5,r5,-31914
   82764:	dc403015 	stw	r17,192(sp)
   82768:	d9402c15 	stw	r5,176(sp)
   8276c:	b023883a 	mov	r17,r22
   82770:	04c001c4 	movi	r19,7
   82774:	a82d883a 	mov	r22,r21
   82778:	902b883a 	mov	r21,r18
   8277c:	8025883a 	mov	r18,r16
   82780:	dc002d17 	ldw	r16,180(sp)
   82784:	00000306 	br	82794 <___vfprintf_internal_r+0x104c>
   82788:	8c7ffc04 	addi	r17,r17,-16
   8278c:	42000204 	addi	r8,r8,8
   82790:	e440110e 	bge	fp,r17,827d8 <___vfprintf_internal_r+0x1090>
   82794:	18c00404 	addi	r3,r3,16
   82798:	10800044 	addi	r2,r2,1
   8279c:	45000015 	stw	r20,0(r8)
   827a0:	47000115 	stw	fp,4(r8)
   827a4:	d8c02015 	stw	r3,128(sp)
   827a8:	d8801f15 	stw	r2,124(sp)
   827ac:	98bff60e 	bge	r19,r2,82788 <__alt_data_end+0xfffc3f88>
   827b0:	d9801e04 	addi	r6,sp,120
   827b4:	b80b883a 	mov	r5,r23
   827b8:	8009883a 	mov	r4,r16
   827bc:	0087afc0 	call	87afc <__sprint_r>
   827c0:	103ce51e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   827c4:	8c7ffc04 	addi	r17,r17,-16
   827c8:	d8c02017 	ldw	r3,128(sp)
   827cc:	d8801f17 	ldw	r2,124(sp)
   827d0:	da000404 	addi	r8,sp,16
   827d4:	e47fef16 	blt	fp,r17,82794 <__alt_data_end+0xfffc3f94>
   827d8:	9021883a 	mov	r16,r18
   827dc:	a825883a 	mov	r18,r21
   827e0:	b02b883a 	mov	r21,r22
   827e4:	882d883a 	mov	r22,r17
   827e8:	dc403017 	ldw	r17,192(sp)
   827ec:	d9002c17 	ldw	r4,176(sp)
   827f0:	1d87883a 	add	r3,r3,r22
   827f4:	10800044 	addi	r2,r2,1
   827f8:	41000015 	stw	r4,0(r8)
   827fc:	45800115 	stw	r22,4(r8)
   82800:	d8c02015 	stw	r3,128(sp)
   82804:	d8801f15 	stw	r2,124(sp)
   82808:	010001c4 	movi	r4,7
   8280c:	20818e16 	blt	r4,r2,82e48 <___vfprintf_internal_r+0x1700>
   82810:	42000204 	addi	r8,r8,8
   82814:	003e0f06 	br	82054 <__alt_data_end+0xfffc3854>
   82818:	d9403317 	ldw	r5,204(sp)
   8281c:	00800044 	movi	r2,1
   82820:	18c00044 	addi	r3,r3,1
   82824:	1141530e 	bge	r2,r5,82d74 <___vfprintf_internal_r+0x162c>
   82828:	dc401f17 	ldw	r17,124(sp)
   8282c:	00800044 	movi	r2,1
   82830:	40800115 	stw	r2,4(r8)
   82834:	8c400044 	addi	r17,r17,1
   82838:	44000015 	stw	r16,0(r8)
   8283c:	d8c02015 	stw	r3,128(sp)
   82840:	dc401f15 	stw	r17,124(sp)
   82844:	008001c4 	movi	r2,7
   82848:	14416b16 	blt	r2,r17,82df8 <___vfprintf_internal_r+0x16b0>
   8284c:	42000204 	addi	r8,r8,8
   82850:	d8803717 	ldw	r2,220(sp)
   82854:	d9003417 	ldw	r4,208(sp)
   82858:	8c400044 	addi	r17,r17,1
   8285c:	10c7883a 	add	r3,r2,r3
   82860:	40800115 	stw	r2,4(r8)
   82864:	41000015 	stw	r4,0(r8)
   82868:	d8c02015 	stw	r3,128(sp)
   8286c:	dc401f15 	stw	r17,124(sp)
   82870:	008001c4 	movi	r2,7
   82874:	14416916 	blt	r2,r17,82e1c <___vfprintf_internal_r+0x16d4>
   82878:	45800204 	addi	r22,r8,8
   8287c:	d9003617 	ldw	r4,216(sp)
   82880:	d9403817 	ldw	r5,224(sp)
   82884:	000d883a 	mov	r6,zero
   82888:	000f883a 	mov	r7,zero
   8288c:	d8c03c15 	stw	r3,240(sp)
   82890:	008c4300 	call	8c430 <__eqdf2>
   82894:	d8c03c17 	ldw	r3,240(sp)
   82898:	1000bc26 	beq	r2,zero,82b8c <___vfprintf_internal_r+0x1444>
   8289c:	d9403317 	ldw	r5,204(sp)
   828a0:	84000044 	addi	r16,r16,1
   828a4:	8c400044 	addi	r17,r17,1
   828a8:	28bfffc4 	addi	r2,r5,-1
   828ac:	1887883a 	add	r3,r3,r2
   828b0:	b0800115 	stw	r2,4(r22)
   828b4:	b4000015 	stw	r16,0(r22)
   828b8:	d8c02015 	stw	r3,128(sp)
   828bc:	dc401f15 	stw	r17,124(sp)
   828c0:	008001c4 	movi	r2,7
   828c4:	14414316 	blt	r2,r17,82dd4 <___vfprintf_internal_r+0x168c>
   828c8:	b5800204 	addi	r22,r22,8
   828cc:	d9003a17 	ldw	r4,232(sp)
   828d0:	df0022c4 	addi	fp,sp,139
   828d4:	8c400044 	addi	r17,r17,1
   828d8:	20c7883a 	add	r3,r4,r3
   828dc:	b7000015 	stw	fp,0(r22)
   828e0:	b1000115 	stw	r4,4(r22)
   828e4:	d8c02015 	stw	r3,128(sp)
   828e8:	dc401f15 	stw	r17,124(sp)
   828ec:	008001c4 	movi	r2,7
   828f0:	14400e16 	blt	r2,r17,8292c <___vfprintf_internal_r+0x11e4>
   828f4:	b2000204 	addi	r8,r22,8
   828f8:	003e1806 	br	8215c <__alt_data_end+0xfffc395c>
   828fc:	010002b4 	movhi	r4,10
   82900:	2120d584 	addi	r4,r4,-31914
   82904:	d9002c15 	stw	r4,176(sp)
   82908:	d9002c17 	ldw	r4,176(sp)
   8290c:	1c07883a 	add	r3,r3,r16
   82910:	44000115 	stw	r16,4(r8)
   82914:	41000015 	stw	r4,0(r8)
   82918:	10800044 	addi	r2,r2,1
   8291c:	d8c02015 	stw	r3,128(sp)
   82920:	d8801f15 	stw	r2,124(sp)
   82924:	010001c4 	movi	r4,7
   82928:	20be0b0e 	bge	r4,r2,82158 <__alt_data_end+0xfffc3958>
   8292c:	d9002d17 	ldw	r4,180(sp)
   82930:	d9801e04 	addi	r6,sp,120
   82934:	b80b883a 	mov	r5,r23
   82938:	0087afc0 	call	87afc <__sprint_r>
   8293c:	103c861e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82940:	d8c02017 	ldw	r3,128(sp)
   82944:	da000404 	addi	r8,sp,16
   82948:	003e0406 	br	8215c <__alt_data_end+0xfffc395c>
   8294c:	d9002d17 	ldw	r4,180(sp)
   82950:	d9801e04 	addi	r6,sp,120
   82954:	b80b883a 	mov	r5,r23
   82958:	0087afc0 	call	87afc <__sprint_r>
   8295c:	103e3b26 	beq	r2,zero,8224c <__alt_data_end+0xfffc3a4c>
   82960:	003c7d06 	br	81b58 <__alt_data_end+0xfffc3358>
   82964:	d9002d17 	ldw	r4,180(sp)
   82968:	d9801e04 	addi	r6,sp,120
   8296c:	b80b883a 	mov	r5,r23
   82970:	0087afc0 	call	87afc <__sprint_r>
   82974:	103c781e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82978:	d8c02017 	ldw	r3,128(sp)
   8297c:	da000404 	addi	r8,sp,16
   82980:	003de906 	br	82128 <__alt_data_end+0xfffc3928>
   82984:	d9002d17 	ldw	r4,180(sp)
   82988:	d9801e04 	addi	r6,sp,120
   8298c:	b80b883a 	mov	r5,r23
   82990:	0087afc0 	call	87afc <__sprint_r>
   82994:	103c701e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82998:	d8c02017 	ldw	r3,128(sp)
   8299c:	da000404 	addi	r8,sp,16
   829a0:	003d9b06 	br	82010 <__alt_data_end+0xfffc3810>
   829a4:	d9002d17 	ldw	r4,180(sp)
   829a8:	d9801e04 	addi	r6,sp,120
   829ac:	b80b883a 	mov	r5,r23
   829b0:	0087afc0 	call	87afc <__sprint_r>
   829b4:	103c681e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   829b8:	d8c02017 	ldw	r3,128(sp)
   829bc:	da000404 	addi	r8,sp,16
   829c0:	003da106 	br	82048 <__alt_data_end+0xfffc3848>
   829c4:	d9402a17 	ldw	r5,168(sp)
   829c8:	d8002785 	stb	zero,158(sp)
   829cc:	283f0616 	blt	r5,zero,825e8 <__alt_data_end+0xfffc3de8>
   829d0:	00ffdfc4 	movi	r3,-129
   829d4:	9d84b03a 	or	r2,r19,r22
   829d8:	90e4703a 	and	r18,r18,r3
   829dc:	103c3b26 	beq	r2,zero,81acc <__alt_data_end+0xfffc32cc>
   829e0:	0039883a 	mov	fp,zero
   829e4:	003e5806 	br	82348 <__alt_data_end+0xfffc3b48>
   829e8:	9080040c 	andi	r2,r18,16
   829ec:	1001b326 	beq	r2,zero,830bc <___vfprintf_internal_r+0x1974>
   829f0:	d8c02e17 	ldw	r3,184(sp)
   829f4:	d9002a17 	ldw	r4,168(sp)
   829f8:	d8002785 	stb	zero,158(sp)
   829fc:	18800104 	addi	r2,r3,4
   82a00:	1cc00017 	ldw	r19,0(r3)
   82a04:	002d883a 	mov	r22,zero
   82a08:	2001b516 	blt	r4,zero,830e0 <___vfprintf_internal_r+0x1998>
   82a0c:	00ffdfc4 	movi	r3,-129
   82a10:	d8802e15 	stw	r2,184(sp)
   82a14:	90e4703a 	and	r18,r18,r3
   82a18:	983d0526 	beq	r19,zero,81e30 <__alt_data_end+0xfffc3630>
   82a1c:	0039883a 	mov	fp,zero
   82a20:	003d0806 	br	81e44 <__alt_data_end+0xfffc3644>
   82a24:	dc402617 	ldw	r17,152(sp)
   82a28:	0441d30e 	bge	zero,r17,83178 <___vfprintf_internal_r+0x1a30>
   82a2c:	dc403217 	ldw	r17,200(sp)
   82a30:	d8803317 	ldw	r2,204(sp)
   82a34:	1440010e 	bge	r2,r17,82a3c <___vfprintf_internal_r+0x12f4>
   82a38:	1023883a 	mov	r17,r2
   82a3c:	04400a0e 	bge	zero,r17,82a68 <___vfprintf_internal_r+0x1320>
   82a40:	d8801f17 	ldw	r2,124(sp)
   82a44:	1c47883a 	add	r3,r3,r17
   82a48:	44000015 	stw	r16,0(r8)
   82a4c:	10800044 	addi	r2,r2,1
   82a50:	44400115 	stw	r17,4(r8)
   82a54:	d8c02015 	stw	r3,128(sp)
   82a58:	d8801f15 	stw	r2,124(sp)
   82a5c:	010001c4 	movi	r4,7
   82a60:	20826516 	blt	r4,r2,833f8 <___vfprintf_internal_r+0x1cb0>
   82a64:	42000204 	addi	r8,r8,8
   82a68:	88026116 	blt	r17,zero,833f0 <___vfprintf_internal_r+0x1ca8>
   82a6c:	d9003217 	ldw	r4,200(sp)
   82a70:	2463c83a 	sub	r17,r4,r17
   82a74:	04407b0e 	bge	zero,r17,82c64 <___vfprintf_internal_r+0x151c>
   82a78:	05800404 	movi	r22,16
   82a7c:	d8801f17 	ldw	r2,124(sp)
   82a80:	b4419d0e 	bge	r22,r17,830f8 <___vfprintf_internal_r+0x19b0>
   82a84:	010002b4 	movhi	r4,10
   82a88:	2120d584 	addi	r4,r4,-31914
   82a8c:	d9002c15 	stw	r4,176(sp)
   82a90:	070001c4 	movi	fp,7
   82a94:	dcc02d17 	ldw	r19,180(sp)
   82a98:	00000306 	br	82aa8 <___vfprintf_internal_r+0x1360>
   82a9c:	42000204 	addi	r8,r8,8
   82aa0:	8c7ffc04 	addi	r17,r17,-16
   82aa4:	b441970e 	bge	r22,r17,83104 <___vfprintf_internal_r+0x19bc>
   82aa8:	18c00404 	addi	r3,r3,16
   82aac:	10800044 	addi	r2,r2,1
   82ab0:	45000015 	stw	r20,0(r8)
   82ab4:	45800115 	stw	r22,4(r8)
   82ab8:	d8c02015 	stw	r3,128(sp)
   82abc:	d8801f15 	stw	r2,124(sp)
   82ac0:	e0bff60e 	bge	fp,r2,82a9c <__alt_data_end+0xfffc429c>
   82ac4:	d9801e04 	addi	r6,sp,120
   82ac8:	b80b883a 	mov	r5,r23
   82acc:	9809883a 	mov	r4,r19
   82ad0:	0087afc0 	call	87afc <__sprint_r>
   82ad4:	103c201e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82ad8:	d8c02017 	ldw	r3,128(sp)
   82adc:	d8801f17 	ldw	r2,124(sp)
   82ae0:	da000404 	addi	r8,sp,16
   82ae4:	003fee06 	br	82aa0 <__alt_data_end+0xfffc42a0>
   82ae8:	d9002d17 	ldw	r4,180(sp)
   82aec:	d9801e04 	addi	r6,sp,120
   82af0:	b80b883a 	mov	r5,r23
   82af4:	0087afc0 	call	87afc <__sprint_r>
   82af8:	103c171e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82afc:	d8c02017 	ldw	r3,128(sp)
   82b00:	df002787 	ldb	fp,158(sp)
   82b04:	da000404 	addi	r8,sp,16
   82b08:	003d3406 	br	81fdc <__alt_data_end+0xfffc37dc>
   82b0c:	9080040c 	andi	r2,r18,16
   82b10:	10016126 	beq	r2,zero,83098 <___vfprintf_internal_r+0x1950>
   82b14:	d9402e17 	ldw	r5,184(sp)
   82b18:	2cc00017 	ldw	r19,0(r5)
   82b1c:	29400104 	addi	r5,r5,4
   82b20:	d9402e15 	stw	r5,184(sp)
   82b24:	982dd7fa 	srai	r22,r19,31
   82b28:	b005883a 	mov	r2,r22
   82b2c:	003c5a06 	br	81c98 <__alt_data_end+0xfffc3498>
   82b30:	9080040c 	andi	r2,r18,16
   82b34:	10003526 	beq	r2,zero,82c0c <___vfprintf_internal_r+0x14c4>
   82b38:	d8c02e17 	ldw	r3,184(sp)
   82b3c:	d9002a17 	ldw	r4,168(sp)
   82b40:	d8002785 	stb	zero,158(sp)
   82b44:	18800104 	addi	r2,r3,4
   82b48:	1cc00017 	ldw	r19,0(r3)
   82b4c:	002d883a 	mov	r22,zero
   82b50:	20003716 	blt	r4,zero,82c30 <___vfprintf_internal_r+0x14e8>
   82b54:	00ffdfc4 	movi	r3,-129
   82b58:	d8802e15 	stw	r2,184(sp)
   82b5c:	90e4703a 	and	r18,r18,r3
   82b60:	0039883a 	mov	fp,zero
   82b64:	983dd426 	beq	r19,zero,822b8 <__alt_data_end+0xfffc3ab8>
   82b68:	00800244 	movi	r2,9
   82b6c:	14fc5336 	bltu	r2,r19,81cbc <__alt_data_end+0xfffc34bc>
   82b70:	d8c02817 	ldw	r3,160(sp)
   82b74:	dc001dc4 	addi	r16,sp,119
   82b78:	9cc00c04 	addi	r19,r19,48
   82b7c:	1c07c83a 	sub	r3,r3,r16
   82b80:	dcc01dc5 	stb	r19,119(sp)
   82b84:	d8c02b15 	stw	r3,172(sp)
   82b88:	003cc606 	br	81ea4 <__alt_data_end+0xfffc36a4>
   82b8c:	d8803317 	ldw	r2,204(sp)
   82b90:	143fffc4 	addi	r16,r2,-1
   82b94:	043f4d0e 	bge	zero,r16,828cc <__alt_data_end+0xfffc40cc>
   82b98:	07000404 	movi	fp,16
   82b9c:	e400810e 	bge	fp,r16,82da4 <___vfprintf_internal_r+0x165c>
   82ba0:	014002b4 	movhi	r5,10
   82ba4:	2960d584 	addi	r5,r5,-31914
   82ba8:	d9402c15 	stw	r5,176(sp)
   82bac:	01c001c4 	movi	r7,7
   82bb0:	dcc02d17 	ldw	r19,180(sp)
   82bb4:	00000306 	br	82bc4 <___vfprintf_internal_r+0x147c>
   82bb8:	b5800204 	addi	r22,r22,8
   82bbc:	843ffc04 	addi	r16,r16,-16
   82bc0:	e4007b0e 	bge	fp,r16,82db0 <___vfprintf_internal_r+0x1668>
   82bc4:	18c00404 	addi	r3,r3,16
   82bc8:	8c400044 	addi	r17,r17,1
   82bcc:	b5000015 	stw	r20,0(r22)
   82bd0:	b7000115 	stw	fp,4(r22)
   82bd4:	d8c02015 	stw	r3,128(sp)
   82bd8:	dc401f15 	stw	r17,124(sp)
   82bdc:	3c7ff60e 	bge	r7,r17,82bb8 <__alt_data_end+0xfffc43b8>
   82be0:	d9801e04 	addi	r6,sp,120
   82be4:	b80b883a 	mov	r5,r23
   82be8:	9809883a 	mov	r4,r19
   82bec:	d9c03c15 	stw	r7,240(sp)
   82bf0:	0087afc0 	call	87afc <__sprint_r>
   82bf4:	d9c03c17 	ldw	r7,240(sp)
   82bf8:	103bd71e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82bfc:	d8c02017 	ldw	r3,128(sp)
   82c00:	dc401f17 	ldw	r17,124(sp)
   82c04:	dd800404 	addi	r22,sp,16
   82c08:	003fec06 	br	82bbc <__alt_data_end+0xfffc43bc>
   82c0c:	9080100c 	andi	r2,r18,64
   82c10:	d8002785 	stb	zero,158(sp)
   82c14:	10010e26 	beq	r2,zero,83050 <___vfprintf_internal_r+0x1908>
   82c18:	d9402e17 	ldw	r5,184(sp)
   82c1c:	d8c02a17 	ldw	r3,168(sp)
   82c20:	002d883a 	mov	r22,zero
   82c24:	28800104 	addi	r2,r5,4
   82c28:	2cc0000b 	ldhu	r19,0(r5)
   82c2c:	183fc90e 	bge	r3,zero,82b54 <__alt_data_end+0xfffc4354>
   82c30:	d8802e15 	stw	r2,184(sp)
   82c34:	0039883a 	mov	fp,zero
   82c38:	9d84b03a 	or	r2,r19,r22
   82c3c:	103c1e1e 	bne	r2,zero,81cb8 <__alt_data_end+0xfffc34b8>
   82c40:	00800044 	movi	r2,1
   82c44:	003e6c06 	br	825f8 <__alt_data_end+0xfffc3df8>
   82c48:	d9002d17 	ldw	r4,180(sp)
   82c4c:	d9801e04 	addi	r6,sp,120
   82c50:	b80b883a 	mov	r5,r23
   82c54:	0087afc0 	call	87afc <__sprint_r>
   82c58:	103bbf1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82c5c:	d8c02017 	ldw	r3,128(sp)
   82c60:	da000404 	addi	r8,sp,16
   82c64:	d9003217 	ldw	r4,200(sp)
   82c68:	d8802617 	ldw	r2,152(sp)
   82c6c:	d9403317 	ldw	r5,204(sp)
   82c70:	8123883a 	add	r17,r16,r4
   82c74:	11400216 	blt	r2,r5,82c80 <___vfprintf_internal_r+0x1538>
   82c78:	9100004c 	andi	r4,r18,1
   82c7c:	20000d26 	beq	r4,zero,82cb4 <___vfprintf_internal_r+0x156c>
   82c80:	d9003717 	ldw	r4,220(sp)
   82c84:	d9403417 	ldw	r5,208(sp)
   82c88:	1907883a 	add	r3,r3,r4
   82c8c:	d9001f17 	ldw	r4,124(sp)
   82c90:	41400015 	stw	r5,0(r8)
   82c94:	d9403717 	ldw	r5,220(sp)
   82c98:	21000044 	addi	r4,r4,1
   82c9c:	d8c02015 	stw	r3,128(sp)
   82ca0:	41400115 	stw	r5,4(r8)
   82ca4:	d9001f15 	stw	r4,124(sp)
   82ca8:	014001c4 	movi	r5,7
   82cac:	2901e816 	blt	r5,r4,83450 <___vfprintf_internal_r+0x1d08>
   82cb0:	42000204 	addi	r8,r8,8
   82cb4:	d9003317 	ldw	r4,204(sp)
   82cb8:	8121883a 	add	r16,r16,r4
   82cbc:	2085c83a 	sub	r2,r4,r2
   82cc0:	8461c83a 	sub	r16,r16,r17
   82cc4:	1400010e 	bge	r2,r16,82ccc <___vfprintf_internal_r+0x1584>
   82cc8:	1021883a 	mov	r16,r2
   82ccc:	04000a0e 	bge	zero,r16,82cf8 <___vfprintf_internal_r+0x15b0>
   82cd0:	d9001f17 	ldw	r4,124(sp)
   82cd4:	1c07883a 	add	r3,r3,r16
   82cd8:	44400015 	stw	r17,0(r8)
   82cdc:	21000044 	addi	r4,r4,1
   82ce0:	44000115 	stw	r16,4(r8)
   82ce4:	d8c02015 	stw	r3,128(sp)
   82ce8:	d9001f15 	stw	r4,124(sp)
   82cec:	014001c4 	movi	r5,7
   82cf0:	2901fb16 	blt	r5,r4,834e0 <___vfprintf_internal_r+0x1d98>
   82cf4:	42000204 	addi	r8,r8,8
   82cf8:	8001f716 	blt	r16,zero,834d8 <___vfprintf_internal_r+0x1d90>
   82cfc:	1421c83a 	sub	r16,r2,r16
   82d00:	043d160e 	bge	zero,r16,8215c <__alt_data_end+0xfffc395c>
   82d04:	04400404 	movi	r17,16
   82d08:	d8801f17 	ldw	r2,124(sp)
   82d0c:	8c3efb0e 	bge	r17,r16,828fc <__alt_data_end+0xfffc40fc>
   82d10:	014002b4 	movhi	r5,10
   82d14:	2960d584 	addi	r5,r5,-31914
   82d18:	d9402c15 	stw	r5,176(sp)
   82d1c:	058001c4 	movi	r22,7
   82d20:	dcc02d17 	ldw	r19,180(sp)
   82d24:	00000306 	br	82d34 <___vfprintf_internal_r+0x15ec>
   82d28:	42000204 	addi	r8,r8,8
   82d2c:	843ffc04 	addi	r16,r16,-16
   82d30:	8c3ef50e 	bge	r17,r16,82908 <__alt_data_end+0xfffc4108>
   82d34:	18c00404 	addi	r3,r3,16
   82d38:	10800044 	addi	r2,r2,1
   82d3c:	45000015 	stw	r20,0(r8)
   82d40:	44400115 	stw	r17,4(r8)
   82d44:	d8c02015 	stw	r3,128(sp)
   82d48:	d8801f15 	stw	r2,124(sp)
   82d4c:	b0bff60e 	bge	r22,r2,82d28 <__alt_data_end+0xfffc4528>
   82d50:	d9801e04 	addi	r6,sp,120
   82d54:	b80b883a 	mov	r5,r23
   82d58:	9809883a 	mov	r4,r19
   82d5c:	0087afc0 	call	87afc <__sprint_r>
   82d60:	103b7d1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82d64:	d8c02017 	ldw	r3,128(sp)
   82d68:	d8801f17 	ldw	r2,124(sp)
   82d6c:	da000404 	addi	r8,sp,16
   82d70:	003fee06 	br	82d2c <__alt_data_end+0xfffc452c>
   82d74:	9088703a 	and	r4,r18,r2
   82d78:	203eab1e 	bne	r4,zero,82828 <__alt_data_end+0xfffc4028>
   82d7c:	dc401f17 	ldw	r17,124(sp)
   82d80:	40800115 	stw	r2,4(r8)
   82d84:	44000015 	stw	r16,0(r8)
   82d88:	8c400044 	addi	r17,r17,1
   82d8c:	d8c02015 	stw	r3,128(sp)
   82d90:	dc401f15 	stw	r17,124(sp)
   82d94:	008001c4 	movi	r2,7
   82d98:	14400e16 	blt	r2,r17,82dd4 <___vfprintf_internal_r+0x168c>
   82d9c:	45800204 	addi	r22,r8,8
   82da0:	003eca06 	br	828cc <__alt_data_end+0xfffc40cc>
   82da4:	010002b4 	movhi	r4,10
   82da8:	2120d584 	addi	r4,r4,-31914
   82dac:	d9002c15 	stw	r4,176(sp)
   82db0:	d8802c17 	ldw	r2,176(sp)
   82db4:	1c07883a 	add	r3,r3,r16
   82db8:	8c400044 	addi	r17,r17,1
   82dbc:	b0800015 	stw	r2,0(r22)
   82dc0:	b4000115 	stw	r16,4(r22)
   82dc4:	d8c02015 	stw	r3,128(sp)
   82dc8:	dc401f15 	stw	r17,124(sp)
   82dcc:	008001c4 	movi	r2,7
   82dd0:	147ebd0e 	bge	r2,r17,828c8 <__alt_data_end+0xfffc40c8>
   82dd4:	d9002d17 	ldw	r4,180(sp)
   82dd8:	d9801e04 	addi	r6,sp,120
   82ddc:	b80b883a 	mov	r5,r23
   82de0:	0087afc0 	call	87afc <__sprint_r>
   82de4:	103b5c1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82de8:	d8c02017 	ldw	r3,128(sp)
   82dec:	dc401f17 	ldw	r17,124(sp)
   82df0:	dd800404 	addi	r22,sp,16
   82df4:	003eb506 	br	828cc <__alt_data_end+0xfffc40cc>
   82df8:	d9002d17 	ldw	r4,180(sp)
   82dfc:	d9801e04 	addi	r6,sp,120
   82e00:	b80b883a 	mov	r5,r23
   82e04:	0087afc0 	call	87afc <__sprint_r>
   82e08:	103b531e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82e0c:	d8c02017 	ldw	r3,128(sp)
   82e10:	dc401f17 	ldw	r17,124(sp)
   82e14:	da000404 	addi	r8,sp,16
   82e18:	003e8d06 	br	82850 <__alt_data_end+0xfffc4050>
   82e1c:	d9002d17 	ldw	r4,180(sp)
   82e20:	d9801e04 	addi	r6,sp,120
   82e24:	b80b883a 	mov	r5,r23
   82e28:	0087afc0 	call	87afc <__sprint_r>
   82e2c:	103b4a1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82e30:	d8c02017 	ldw	r3,128(sp)
   82e34:	dc401f17 	ldw	r17,124(sp)
   82e38:	dd800404 	addi	r22,sp,16
   82e3c:	003e8f06 	br	8287c <__alt_data_end+0xfffc407c>
   82e40:	0027883a 	mov	r19,zero
   82e44:	003f4a06 	br	82b70 <__alt_data_end+0xfffc4370>
   82e48:	d9002d17 	ldw	r4,180(sp)
   82e4c:	d9801e04 	addi	r6,sp,120
   82e50:	b80b883a 	mov	r5,r23
   82e54:	0087afc0 	call	87afc <__sprint_r>
   82e58:	103b3f1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   82e5c:	d8c02017 	ldw	r3,128(sp)
   82e60:	da000404 	addi	r8,sp,16
   82e64:	003c7b06 	br	82054 <__alt_data_end+0xfffc3854>
   82e68:	d9402a17 	ldw	r5,168(sp)
   82e6c:	04e7c83a 	sub	r19,zero,r19
   82e70:	07000b44 	movi	fp,45
   82e74:	9804c03a 	cmpne	r2,r19,zero
   82e78:	05adc83a 	sub	r22,zero,r22
   82e7c:	df002785 	stb	fp,158(sp)
   82e80:	b0adc83a 	sub	r22,r22,r2
   82e84:	28017b16 	blt	r5,zero,83474 <___vfprintf_internal_r+0x1d2c>
   82e88:	00bfdfc4 	movi	r2,-129
   82e8c:	90a4703a 	and	r18,r18,r2
   82e90:	003b8906 	br	81cb8 <__alt_data_end+0xfffc34b8>
   82e94:	d9003617 	ldw	r4,216(sp)
   82e98:	d9403817 	ldw	r5,224(sp)
   82e9c:	da003d15 	stw	r8,244(sp)
   82ea0:	00877b80 	call	877b8 <__fpclassifyd>
   82ea4:	da003d17 	ldw	r8,244(sp)
   82ea8:	1000f026 	beq	r2,zero,8326c <___vfprintf_internal_r+0x1b24>
   82eac:	d9002a17 	ldw	r4,168(sp)
   82eb0:	05bff7c4 	movi	r22,-33
   82eb4:	00bfffc4 	movi	r2,-1
   82eb8:	8dac703a 	and	r22,r17,r22
   82ebc:	20820026 	beq	r4,r2,836c0 <___vfprintf_internal_r+0x1f78>
   82ec0:	008011c4 	movi	r2,71
   82ec4:	b081f726 	beq	r22,r2,836a4 <___vfprintf_internal_r+0x1f5c>
   82ec8:	d9003817 	ldw	r4,224(sp)
   82ecc:	90c04014 	ori	r3,r18,256
   82ed0:	d8c02c15 	stw	r3,176(sp)
   82ed4:	20021516 	blt	r4,zero,8372c <___vfprintf_internal_r+0x1fe4>
   82ed8:	dcc03817 	ldw	r19,224(sp)
   82edc:	d8002905 	stb	zero,164(sp)
   82ee0:	00801984 	movi	r2,102
   82ee4:	8881f926 	beq	r17,r2,836cc <___vfprintf_internal_r+0x1f84>
   82ee8:	00801184 	movi	r2,70
   82eec:	88821c26 	beq	r17,r2,83760 <___vfprintf_internal_r+0x2018>
   82ef0:	00801144 	movi	r2,69
   82ef4:	b081ef26 	beq	r22,r2,836b4 <___vfprintf_internal_r+0x1f6c>
   82ef8:	d8c02a17 	ldw	r3,168(sp)
   82efc:	d8802104 	addi	r2,sp,132
   82f00:	d8800315 	stw	r2,12(sp)
   82f04:	d9403617 	ldw	r5,216(sp)
   82f08:	d8802504 	addi	r2,sp,148
   82f0c:	d9002d17 	ldw	r4,180(sp)
   82f10:	d8800215 	stw	r2,8(sp)
   82f14:	d8802604 	addi	r2,sp,152
   82f18:	d8c00015 	stw	r3,0(sp)
   82f1c:	d8800115 	stw	r2,4(sp)
   82f20:	01c00084 	movi	r7,2
   82f24:	980d883a 	mov	r6,r19
   82f28:	d8c03c15 	stw	r3,240(sp)
   82f2c:	da003d15 	stw	r8,244(sp)
   82f30:	0083e780 	call	83e78 <_dtoa_r>
   82f34:	1021883a 	mov	r16,r2
   82f38:	008019c4 	movi	r2,103
   82f3c:	d8c03c17 	ldw	r3,240(sp)
   82f40:	da003d17 	ldw	r8,244(sp)
   82f44:	88817126 	beq	r17,r2,8350c <___vfprintf_internal_r+0x1dc4>
   82f48:	008011c4 	movi	r2,71
   82f4c:	88829126 	beq	r17,r2,83994 <___vfprintf_internal_r+0x224c>
   82f50:	80f9883a 	add	fp,r16,r3
   82f54:	d9003617 	ldw	r4,216(sp)
   82f58:	000d883a 	mov	r6,zero
   82f5c:	000f883a 	mov	r7,zero
   82f60:	980b883a 	mov	r5,r19
   82f64:	da003d15 	stw	r8,244(sp)
   82f68:	008c4300 	call	8c430 <__eqdf2>
   82f6c:	da003d17 	ldw	r8,244(sp)
   82f70:	10018d26 	beq	r2,zero,835a8 <___vfprintf_internal_r+0x1e60>
   82f74:	d8802117 	ldw	r2,132(sp)
   82f78:	1700062e 	bgeu	r2,fp,82f94 <___vfprintf_internal_r+0x184c>
   82f7c:	01000c04 	movi	r4,48
   82f80:	10c00044 	addi	r3,r2,1
   82f84:	d8c02115 	stw	r3,132(sp)
   82f88:	11000005 	stb	r4,0(r2)
   82f8c:	d8802117 	ldw	r2,132(sp)
   82f90:	173ffb36 	bltu	r2,fp,82f80 <__alt_data_end+0xfffc4780>
   82f94:	1405c83a 	sub	r2,r2,r16
   82f98:	d8803315 	stw	r2,204(sp)
   82f9c:	008011c4 	movi	r2,71
   82fa0:	b0817626 	beq	r22,r2,8357c <___vfprintf_internal_r+0x1e34>
   82fa4:	00801944 	movi	r2,101
   82fa8:	1442800e 	bge	r2,r17,839ac <___vfprintf_internal_r+0x2264>
   82fac:	d8c02617 	ldw	r3,152(sp)
   82fb0:	00801984 	movi	r2,102
   82fb4:	d8c03215 	stw	r3,200(sp)
   82fb8:	8881fe26 	beq	r17,r2,837b4 <___vfprintf_internal_r+0x206c>
   82fbc:	d8c03217 	ldw	r3,200(sp)
   82fc0:	d9003317 	ldw	r4,204(sp)
   82fc4:	1901dd16 	blt	r3,r4,8373c <___vfprintf_internal_r+0x1ff4>
   82fc8:	9480004c 	andi	r18,r18,1
   82fcc:	90022b1e 	bne	r18,zero,8387c <___vfprintf_internal_r+0x2134>
   82fd0:	1805883a 	mov	r2,r3
   82fd4:	18028316 	blt	r3,zero,839e4 <___vfprintf_internal_r+0x229c>
   82fd8:	d8c03217 	ldw	r3,200(sp)
   82fdc:	044019c4 	movi	r17,103
   82fe0:	d8c02b15 	stw	r3,172(sp)
   82fe4:	df002907 	ldb	fp,164(sp)
   82fe8:	e001531e 	bne	fp,zero,83538 <___vfprintf_internal_r+0x1df0>
   82fec:	df002783 	ldbu	fp,158(sp)
   82ff0:	d8802915 	stw	r2,164(sp)
   82ff4:	dc802c17 	ldw	r18,176(sp)
   82ff8:	d8002a15 	stw	zero,168(sp)
   82ffc:	003baf06 	br	81ebc <__alt_data_end+0xfffc36bc>
   83000:	d8c02e17 	ldw	r3,184(sp)
   83004:	d9002e17 	ldw	r4,184(sp)
   83008:	d9402e17 	ldw	r5,184(sp)
   8300c:	18c00017 	ldw	r3,0(r3)
   83010:	21000117 	ldw	r4,4(r4)
   83014:	29400204 	addi	r5,r5,8
   83018:	d8c03615 	stw	r3,216(sp)
   8301c:	d9003815 	stw	r4,224(sp)
   83020:	d9402e15 	stw	r5,184(sp)
   83024:	003b5006 	br	81d68 <__alt_data_end+0xfffc3568>
   83028:	ac400007 	ldb	r17,0(r21)
   8302c:	003a2806 	br	818d0 <__alt_data_end+0xfffc30d0>
   83030:	9080100c 	andi	r2,r18,64
   83034:	1000a826 	beq	r2,zero,832d8 <___vfprintf_internal_r+0x1b90>
   83038:	d8c02e17 	ldw	r3,184(sp)
   8303c:	002d883a 	mov	r22,zero
   83040:	1cc0000b 	ldhu	r19,0(r3)
   83044:	18c00104 	addi	r3,r3,4
   83048:	d8c02e15 	stw	r3,184(sp)
   8304c:	003caf06 	br	8230c <__alt_data_end+0xfffc3b0c>
   83050:	d9002e17 	ldw	r4,184(sp)
   83054:	d9402a17 	ldw	r5,168(sp)
   83058:	002d883a 	mov	r22,zero
   8305c:	20800104 	addi	r2,r4,4
   83060:	24c00017 	ldw	r19,0(r4)
   83064:	283ebb0e 	bge	r5,zero,82b54 <__alt_data_end+0xfffc4354>
   83068:	003ef106 	br	82c30 <__alt_data_end+0xfffc4430>
   8306c:	9080040c 	andi	r2,r18,16
   83070:	1000921e 	bne	r2,zero,832bc <___vfprintf_internal_r+0x1b74>
   83074:	9480100c 	andi	r18,r18,64
   83078:	90013926 	beq	r18,zero,83560 <___vfprintf_internal_r+0x1e18>
   8307c:	d9402e17 	ldw	r5,184(sp)
   83080:	d8c02f17 	ldw	r3,188(sp)
   83084:	28800017 	ldw	r2,0(r5)
   83088:	29400104 	addi	r5,r5,4
   8308c:	d9402e15 	stw	r5,184(sp)
   83090:	10c0000d 	sth	r3,0(r2)
   83094:	0039e406 	br	81828 <__alt_data_end+0xfffc3028>
   83098:	9080100c 	andi	r2,r18,64
   8309c:	10008026 	beq	r2,zero,832a0 <___vfprintf_internal_r+0x1b58>
   830a0:	d8802e17 	ldw	r2,184(sp)
   830a4:	14c0000f 	ldh	r19,0(r2)
   830a8:	10800104 	addi	r2,r2,4
   830ac:	d8802e15 	stw	r2,184(sp)
   830b0:	982dd7fa 	srai	r22,r19,31
   830b4:	b005883a 	mov	r2,r22
   830b8:	003af706 	br	81c98 <__alt_data_end+0xfffc3498>
   830bc:	9080100c 	andi	r2,r18,64
   830c0:	d8002785 	stb	zero,158(sp)
   830c4:	10008a1e 	bne	r2,zero,832f0 <___vfprintf_internal_r+0x1ba8>
   830c8:	d9002e17 	ldw	r4,184(sp)
   830cc:	d9402a17 	ldw	r5,168(sp)
   830d0:	002d883a 	mov	r22,zero
   830d4:	20800104 	addi	r2,r4,4
   830d8:	24c00017 	ldw	r19,0(r4)
   830dc:	283e4b0e 	bge	r5,zero,82a0c <__alt_data_end+0xfffc420c>
   830e0:	9d86b03a 	or	r3,r19,r22
   830e4:	d8802e15 	stw	r2,184(sp)
   830e8:	183e4c1e 	bne	r3,zero,82a1c <__alt_data_end+0xfffc421c>
   830ec:	0039883a 	mov	fp,zero
   830f0:	0005883a 	mov	r2,zero
   830f4:	003d4006 	br	825f8 <__alt_data_end+0xfffc3df8>
   830f8:	014002b4 	movhi	r5,10
   830fc:	2960d584 	addi	r5,r5,-31914
   83100:	d9402c15 	stw	r5,176(sp)
   83104:	d9402c17 	ldw	r5,176(sp)
   83108:	1c47883a 	add	r3,r3,r17
   8310c:	10800044 	addi	r2,r2,1
   83110:	41400015 	stw	r5,0(r8)
   83114:	44400115 	stw	r17,4(r8)
   83118:	d8c02015 	stw	r3,128(sp)
   8311c:	d8801f15 	stw	r2,124(sp)
   83120:	010001c4 	movi	r4,7
   83124:	20bec816 	blt	r4,r2,82c48 <__alt_data_end+0xfffc4448>
   83128:	42000204 	addi	r8,r8,8
   8312c:	003ecd06 	br	82c64 <__alt_data_end+0xfffc4464>
   83130:	d9002a17 	ldw	r4,168(sp)
   83134:	d8002785 	stb	zero,158(sp)
   83138:	203d2d16 	blt	r4,zero,825f0 <__alt_data_end+0xfffc3df0>
   8313c:	00bfdfc4 	movi	r2,-129
   83140:	90a4703a 	and	r18,r18,r2
   83144:	003a6106 	br	81acc <__alt_data_end+0xfffc32cc>
   83148:	010002b4 	movhi	r4,10
   8314c:	2120d584 	addi	r4,r4,-31914
   83150:	d9002c15 	stw	r4,176(sp)
   83154:	003bea06 	br	82100 <__alt_data_end+0xfffc3900>
   83158:	d9002d17 	ldw	r4,180(sp)
   8315c:	d9801e04 	addi	r6,sp,120
   83160:	b80b883a 	mov	r5,r23
   83164:	0087afc0 	call	87afc <__sprint_r>
   83168:	103a7b1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   8316c:	d8c02017 	ldw	r3,128(sp)
   83170:	da000404 	addi	r8,sp,16
   83174:	003d4106 	br	8267c <__alt_data_end+0xfffc3e7c>
   83178:	d8801f17 	ldw	r2,124(sp)
   8317c:	014002b4 	movhi	r5,10
   83180:	01000044 	movi	r4,1
   83184:	18c00044 	addi	r3,r3,1
   83188:	10800044 	addi	r2,r2,1
   8318c:	2960d504 	addi	r5,r5,-31916
   83190:	41000115 	stw	r4,4(r8)
   83194:	41400015 	stw	r5,0(r8)
   83198:	d8c02015 	stw	r3,128(sp)
   8319c:	d8801f15 	stw	r2,124(sp)
   831a0:	010001c4 	movi	r4,7
   831a4:	20805c16 	blt	r4,r2,83318 <___vfprintf_internal_r+0x1bd0>
   831a8:	42000204 	addi	r8,r8,8
   831ac:	8800041e 	bne	r17,zero,831c0 <___vfprintf_internal_r+0x1a78>
   831b0:	d8803317 	ldw	r2,204(sp)
   831b4:	1000021e 	bne	r2,zero,831c0 <___vfprintf_internal_r+0x1a78>
   831b8:	9080004c 	andi	r2,r18,1
   831bc:	103be726 	beq	r2,zero,8215c <__alt_data_end+0xfffc395c>
   831c0:	d9003717 	ldw	r4,220(sp)
   831c4:	d8801f17 	ldw	r2,124(sp)
   831c8:	d9403417 	ldw	r5,208(sp)
   831cc:	20c7883a 	add	r3,r4,r3
   831d0:	10800044 	addi	r2,r2,1
   831d4:	41000115 	stw	r4,4(r8)
   831d8:	41400015 	stw	r5,0(r8)
   831dc:	d8c02015 	stw	r3,128(sp)
   831e0:	d8801f15 	stw	r2,124(sp)
   831e4:	010001c4 	movi	r4,7
   831e8:	20812116 	blt	r4,r2,83670 <___vfprintf_internal_r+0x1f28>
   831ec:	42000204 	addi	r8,r8,8
   831f0:	0463c83a 	sub	r17,zero,r17
   831f4:	0440730e 	bge	zero,r17,833c4 <___vfprintf_internal_r+0x1c7c>
   831f8:	05800404 	movi	r22,16
   831fc:	b440860e 	bge	r22,r17,83418 <___vfprintf_internal_r+0x1cd0>
   83200:	014002b4 	movhi	r5,10
   83204:	2960d584 	addi	r5,r5,-31914
   83208:	d9402c15 	stw	r5,176(sp)
   8320c:	070001c4 	movi	fp,7
   83210:	dcc02d17 	ldw	r19,180(sp)
   83214:	00000306 	br	83224 <___vfprintf_internal_r+0x1adc>
   83218:	42000204 	addi	r8,r8,8
   8321c:	8c7ffc04 	addi	r17,r17,-16
   83220:	b440800e 	bge	r22,r17,83424 <___vfprintf_internal_r+0x1cdc>
   83224:	18c00404 	addi	r3,r3,16
   83228:	10800044 	addi	r2,r2,1
   8322c:	45000015 	stw	r20,0(r8)
   83230:	45800115 	stw	r22,4(r8)
   83234:	d8c02015 	stw	r3,128(sp)
   83238:	d8801f15 	stw	r2,124(sp)
   8323c:	e0bff60e 	bge	fp,r2,83218 <__alt_data_end+0xfffc4a18>
   83240:	d9801e04 	addi	r6,sp,120
   83244:	b80b883a 	mov	r5,r23
   83248:	9809883a 	mov	r4,r19
   8324c:	0087afc0 	call	87afc <__sprint_r>
   83250:	103a411e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   83254:	d8c02017 	ldw	r3,128(sp)
   83258:	d8801f17 	ldw	r2,124(sp)
   8325c:	da000404 	addi	r8,sp,16
   83260:	003fee06 	br	8321c <__alt_data_end+0xfffc4a1c>
   83264:	00bfffc4 	movi	r2,-1
   83268:	003a3f06 	br	81b68 <__alt_data_end+0xfffc3368>
   8326c:	008011c4 	movi	r2,71
   83270:	1440b816 	blt	r2,r17,83554 <___vfprintf_internal_r+0x1e0c>
   83274:	040002b4 	movhi	r16,10
   83278:	8420c704 	addi	r16,r16,-31972
   8327c:	00c000c4 	movi	r3,3
   83280:	00bfdfc4 	movi	r2,-129
   83284:	d8c02915 	stw	r3,164(sp)
   83288:	90a4703a 	and	r18,r18,r2
   8328c:	df002783 	ldbu	fp,158(sp)
   83290:	d8c02b15 	stw	r3,172(sp)
   83294:	d8002a15 	stw	zero,168(sp)
   83298:	d8003215 	stw	zero,200(sp)
   8329c:	003b0706 	br	81ebc <__alt_data_end+0xfffc36bc>
   832a0:	d8c02e17 	ldw	r3,184(sp)
   832a4:	1cc00017 	ldw	r19,0(r3)
   832a8:	18c00104 	addi	r3,r3,4
   832ac:	d8c02e15 	stw	r3,184(sp)
   832b0:	982dd7fa 	srai	r22,r19,31
   832b4:	b005883a 	mov	r2,r22
   832b8:	003a7706 	br	81c98 <__alt_data_end+0xfffc3498>
   832bc:	d8c02e17 	ldw	r3,184(sp)
   832c0:	d9002f17 	ldw	r4,188(sp)
   832c4:	18800017 	ldw	r2,0(r3)
   832c8:	18c00104 	addi	r3,r3,4
   832cc:	d8c02e15 	stw	r3,184(sp)
   832d0:	11000015 	stw	r4,0(r2)
   832d4:	00395406 	br	81828 <__alt_data_end+0xfffc3028>
   832d8:	d9002e17 	ldw	r4,184(sp)
   832dc:	002d883a 	mov	r22,zero
   832e0:	24c00017 	ldw	r19,0(r4)
   832e4:	21000104 	addi	r4,r4,4
   832e8:	d9002e15 	stw	r4,184(sp)
   832ec:	003c0706 	br	8230c <__alt_data_end+0xfffc3b0c>
   832f0:	d9402e17 	ldw	r5,184(sp)
   832f4:	d8c02a17 	ldw	r3,168(sp)
   832f8:	002d883a 	mov	r22,zero
   832fc:	28800104 	addi	r2,r5,4
   83300:	2cc0000b 	ldhu	r19,0(r5)
   83304:	183dc10e 	bge	r3,zero,82a0c <__alt_data_end+0xfffc420c>
   83308:	003f7506 	br	830e0 <__alt_data_end+0xfffc48e0>
   8330c:	040002b4 	movhi	r16,10
   83310:	8420c504 	addi	r16,r16,-31980
   83314:	003aa706 	br	81db4 <__alt_data_end+0xfffc35b4>
   83318:	d9002d17 	ldw	r4,180(sp)
   8331c:	d9801e04 	addi	r6,sp,120
   83320:	b80b883a 	mov	r5,r23
   83324:	0087afc0 	call	87afc <__sprint_r>
   83328:	103a0b1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   8332c:	dc402617 	ldw	r17,152(sp)
   83330:	d8c02017 	ldw	r3,128(sp)
   83334:	da000404 	addi	r8,sp,16
   83338:	003f9c06 	br	831ac <__alt_data_end+0xfffc49ac>
   8333c:	ac400043 	ldbu	r17,1(r21)
   83340:	84000814 	ori	r16,r16,32
   83344:	ad400044 	addi	r21,r21,1
   83348:	8c403fcc 	andi	r17,r17,255
   8334c:	8c40201c 	xori	r17,r17,128
   83350:	8c7fe004 	addi	r17,r17,-128
   83354:	00395e06 	br	818d0 <__alt_data_end+0xfffc30d0>
   83358:	d8c02e15 	stw	r3,184(sp)
   8335c:	0039883a 	mov	fp,zero
   83360:	003e3506 	br	82c38 <__alt_data_end+0xfffc4438>
   83364:	d9002d17 	ldw	r4,180(sp)
   83368:	d9801e04 	addi	r6,sp,120
   8336c:	b80b883a 	mov	r5,r23
   83370:	0087afc0 	call	87afc <__sprint_r>
   83374:	1039f81e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   83378:	d8c02017 	ldw	r3,128(sp)
   8337c:	da000404 	addi	r8,sp,16
   83380:	003cd006 	br	826c4 <__alt_data_end+0xfffc3ec4>
   83384:	8009883a 	mov	r4,r16
   83388:	df003d15 	stw	fp,244(sp)
   8338c:	00879680 	call	87968 <strlen>
   83390:	d8802b15 	stw	r2,172(sp)
   83394:	da003d17 	ldw	r8,244(sp)
   83398:	103c200e 	bge	r2,zero,8241c <__alt_data_end+0xfffc3c1c>
   8339c:	0005883a 	mov	r2,zero
   833a0:	003c1e06 	br	8241c <__alt_data_end+0xfffc3c1c>
   833a4:	d9002d17 	ldw	r4,180(sp)
   833a8:	d9801e04 	addi	r6,sp,120
   833ac:	b80b883a 	mov	r5,r23
   833b0:	0087afc0 	call	87afc <__sprint_r>
   833b4:	1039e81e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   833b8:	d8c02017 	ldw	r3,128(sp)
   833bc:	d8801f17 	ldw	r2,124(sp)
   833c0:	da000404 	addi	r8,sp,16
   833c4:	d9403317 	ldw	r5,204(sp)
   833c8:	10800044 	addi	r2,r2,1
   833cc:	44000015 	stw	r16,0(r8)
   833d0:	28c7883a 	add	r3,r5,r3
   833d4:	003b5b06 	br	82144 <__alt_data_end+0xfffc3944>
   833d8:	010002b4 	movhi	r4,10
   833dc:	2120d984 	addi	r4,r4,-31898
   833e0:	d9003515 	stw	r4,212(sp)
   833e4:	003af206 	br	81fb0 <__alt_data_end+0xfffc37b0>
   833e8:	013fffc4 	movi	r4,-1
   833ec:	003a0806 	br	81c10 <__alt_data_end+0xfffc3410>
   833f0:	0023883a 	mov	r17,zero
   833f4:	003d9d06 	br	82a6c <__alt_data_end+0xfffc426c>
   833f8:	d9002d17 	ldw	r4,180(sp)
   833fc:	d9801e04 	addi	r6,sp,120
   83400:	b80b883a 	mov	r5,r23
   83404:	0087afc0 	call	87afc <__sprint_r>
   83408:	1039d31e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   8340c:	d8c02017 	ldw	r3,128(sp)
   83410:	da000404 	addi	r8,sp,16
   83414:	003d9406 	br	82a68 <__alt_data_end+0xfffc4268>
   83418:	010002b4 	movhi	r4,10
   8341c:	2120d584 	addi	r4,r4,-31914
   83420:	d9002c15 	stw	r4,176(sp)
   83424:	d9002c17 	ldw	r4,176(sp)
   83428:	1c47883a 	add	r3,r3,r17
   8342c:	10800044 	addi	r2,r2,1
   83430:	41000015 	stw	r4,0(r8)
   83434:	44400115 	stw	r17,4(r8)
   83438:	d8c02015 	stw	r3,128(sp)
   8343c:	d8801f15 	stw	r2,124(sp)
   83440:	010001c4 	movi	r4,7
   83444:	20bfd716 	blt	r4,r2,833a4 <__alt_data_end+0xfffc4ba4>
   83448:	42000204 	addi	r8,r8,8
   8344c:	003fdd06 	br	833c4 <__alt_data_end+0xfffc4bc4>
   83450:	d9002d17 	ldw	r4,180(sp)
   83454:	d9801e04 	addi	r6,sp,120
   83458:	b80b883a 	mov	r5,r23
   8345c:	0087afc0 	call	87afc <__sprint_r>
   83460:	1039bd1e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   83464:	d8802617 	ldw	r2,152(sp)
   83468:	d8c02017 	ldw	r3,128(sp)
   8346c:	da000404 	addi	r8,sp,16
   83470:	003e1006 	br	82cb4 <__alt_data_end+0xfffc44b4>
   83474:	00800044 	movi	r2,1
   83478:	10803fcc 	andi	r2,r2,255
   8347c:	00c00044 	movi	r3,1
   83480:	10fa0d26 	beq	r2,r3,81cb8 <__alt_data_end+0xfffc34b8>
   83484:	00c00084 	movi	r3,2
   83488:	10fbaf26 	beq	r2,r3,82348 <__alt_data_end+0xfffc3b48>
   8348c:	003a6d06 	br	81e44 <__alt_data_end+0xfffc3644>
   83490:	010002b4 	movhi	r4,10
   83494:	2120d984 	addi	r4,r4,-31898
   83498:	d9003515 	stw	r4,212(sp)
   8349c:	003b5406 	br	821f0 <__alt_data_end+0xfffc39f0>
   834a0:	d8802a17 	ldw	r2,168(sp)
   834a4:	00c00184 	movi	r3,6
   834a8:	1880012e 	bgeu	r3,r2,834b0 <___vfprintf_internal_r+0x1d68>
   834ac:	1805883a 	mov	r2,r3
   834b0:	d8802b15 	stw	r2,172(sp)
   834b4:	1000ef16 	blt	r2,zero,83874 <___vfprintf_internal_r+0x212c>
   834b8:	040002b4 	movhi	r16,10
   834bc:	d8802915 	stw	r2,164(sp)
   834c0:	dcc02e15 	stw	r19,184(sp)
   834c4:	d8002a15 	stw	zero,168(sp)
   834c8:	d8003215 	stw	zero,200(sp)
   834cc:	8420d304 	addi	r16,r16,-31924
   834d0:	0039883a 	mov	fp,zero
   834d4:	003a8006 	br	81ed8 <__alt_data_end+0xfffc36d8>
   834d8:	0021883a 	mov	r16,zero
   834dc:	003e0706 	br	82cfc <__alt_data_end+0xfffc44fc>
   834e0:	d9002d17 	ldw	r4,180(sp)
   834e4:	d9801e04 	addi	r6,sp,120
   834e8:	b80b883a 	mov	r5,r23
   834ec:	0087afc0 	call	87afc <__sprint_r>
   834f0:	1039991e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   834f4:	d8802617 	ldw	r2,152(sp)
   834f8:	d9403317 	ldw	r5,204(sp)
   834fc:	d8c02017 	ldw	r3,128(sp)
   83500:	da000404 	addi	r8,sp,16
   83504:	2885c83a 	sub	r2,r5,r2
   83508:	003dfb06 	br	82cf8 <__alt_data_end+0xfffc44f8>
   8350c:	9080004c 	andi	r2,r18,1
   83510:	103e8f1e 	bne	r2,zero,82f50 <__alt_data_end+0xfffc4750>
   83514:	d8802117 	ldw	r2,132(sp)
   83518:	003e9e06 	br	82f94 <__alt_data_end+0xfffc4794>
   8351c:	1025883a 	mov	r18,r2
   83520:	0039883a 	mov	fp,zero
   83524:	00800084 	movi	r2,2
   83528:	003fd306 	br	83478 <__alt_data_end+0xfffc4c78>
   8352c:	07000b44 	movi	fp,45
   83530:	df002785 	stb	fp,158(sp)
   83534:	003a1b06 	br	81da4 <__alt_data_end+0xfffc35a4>
   83538:	00c00b44 	movi	r3,45
   8353c:	d8c02785 	stb	r3,158(sp)
   83540:	d8802915 	stw	r2,164(sp)
   83544:	dc802c17 	ldw	r18,176(sp)
   83548:	d8002a15 	stw	zero,168(sp)
   8354c:	07000b44 	movi	fp,45
   83550:	003a5e06 	br	81ecc <__alt_data_end+0xfffc36cc>
   83554:	040002b4 	movhi	r16,10
   83558:	8420c804 	addi	r16,r16,-31968
   8355c:	003f4706 	br	8327c <__alt_data_end+0xfffc4a7c>
   83560:	d9002e17 	ldw	r4,184(sp)
   83564:	d9402f17 	ldw	r5,188(sp)
   83568:	20800017 	ldw	r2,0(r4)
   8356c:	21000104 	addi	r4,r4,4
   83570:	d9002e15 	stw	r4,184(sp)
   83574:	11400015 	stw	r5,0(r2)
   83578:	0038ab06 	br	81828 <__alt_data_end+0xfffc3028>
   8357c:	dd802617 	ldw	r22,152(sp)
   83580:	00bfff44 	movi	r2,-3
   83584:	b0801c16 	blt	r22,r2,835f8 <___vfprintf_internal_r+0x1eb0>
   83588:	d9402a17 	ldw	r5,168(sp)
   8358c:	2d801a16 	blt	r5,r22,835f8 <___vfprintf_internal_r+0x1eb0>
   83590:	dd803215 	stw	r22,200(sp)
   83594:	003e8906 	br	82fbc <__alt_data_end+0xfffc47bc>
   83598:	010002b4 	movhi	r4,10
   8359c:	2120d584 	addi	r4,r4,-31914
   835a0:	d9002c15 	stw	r4,176(sp)
   835a4:	003c9106 	br	827ec <__alt_data_end+0xfffc3fec>
   835a8:	e005883a 	mov	r2,fp
   835ac:	003e7906 	br	82f94 <__alt_data_end+0xfffc4794>
   835b0:	d9002a17 	ldw	r4,168(sp)
   835b4:	df002783 	ldbu	fp,158(sp)
   835b8:	dcc02e15 	stw	r19,184(sp)
   835bc:	d9002915 	stw	r4,164(sp)
   835c0:	d9002b15 	stw	r4,172(sp)
   835c4:	d8002a15 	stw	zero,168(sp)
   835c8:	d8003215 	stw	zero,200(sp)
   835cc:	003a3b06 	br	81ebc <__alt_data_end+0xfffc36bc>
   835d0:	9080004c 	andi	r2,r18,1
   835d4:	0039883a 	mov	fp,zero
   835d8:	10000426 	beq	r2,zero,835ec <___vfprintf_internal_r+0x1ea4>
   835dc:	00800c04 	movi	r2,48
   835e0:	dc001dc4 	addi	r16,sp,119
   835e4:	d8801dc5 	stb	r2,119(sp)
   835e8:	003b6406 	br	8237c <__alt_data_end+0xfffc3b7c>
   835ec:	d8002b15 	stw	zero,172(sp)
   835f0:	dc001e04 	addi	r16,sp,120
   835f4:	003a2b06 	br	81ea4 <__alt_data_end+0xfffc36a4>
   835f8:	8c7fff84 	addi	r17,r17,-2
   835fc:	b5bfffc4 	addi	r22,r22,-1
   83600:	dd802615 	stw	r22,152(sp)
   83604:	dc4022c5 	stb	r17,139(sp)
   83608:	b000bf16 	blt	r22,zero,83908 <___vfprintf_internal_r+0x21c0>
   8360c:	00800ac4 	movi	r2,43
   83610:	d8802305 	stb	r2,140(sp)
   83614:	00800244 	movi	r2,9
   83618:	15807016 	blt	r2,r22,837dc <___vfprintf_internal_r+0x2094>
   8361c:	00800c04 	movi	r2,48
   83620:	b5800c04 	addi	r22,r22,48
   83624:	d8802345 	stb	r2,141(sp)
   83628:	dd802385 	stb	r22,142(sp)
   8362c:	d88023c4 	addi	r2,sp,143
   83630:	df0022c4 	addi	fp,sp,139
   83634:	d8c03317 	ldw	r3,204(sp)
   83638:	1739c83a 	sub	fp,r2,fp
   8363c:	d9003317 	ldw	r4,204(sp)
   83640:	e0c7883a 	add	r3,fp,r3
   83644:	df003a15 	stw	fp,232(sp)
   83648:	d8c02b15 	stw	r3,172(sp)
   8364c:	00800044 	movi	r2,1
   83650:	1100b30e 	bge	r2,r4,83920 <___vfprintf_internal_r+0x21d8>
   83654:	d8c02b17 	ldw	r3,172(sp)
   83658:	18c00044 	addi	r3,r3,1
   8365c:	d8c02b15 	stw	r3,172(sp)
   83660:	1805883a 	mov	r2,r3
   83664:	1800ac16 	blt	r3,zero,83918 <___vfprintf_internal_r+0x21d0>
   83668:	d8003215 	stw	zero,200(sp)
   8366c:	003e5d06 	br	82fe4 <__alt_data_end+0xfffc47e4>
   83670:	d9002d17 	ldw	r4,180(sp)
   83674:	d9801e04 	addi	r6,sp,120
   83678:	b80b883a 	mov	r5,r23
   8367c:	0087afc0 	call	87afc <__sprint_r>
   83680:	1039351e 	bne	r2,zero,81b58 <__alt_data_end+0xfffc3358>
   83684:	dc402617 	ldw	r17,152(sp)
   83688:	d8c02017 	ldw	r3,128(sp)
   8368c:	d8801f17 	ldw	r2,124(sp)
   83690:	da000404 	addi	r8,sp,16
   83694:	003ed606 	br	831f0 <__alt_data_end+0xfffc49f0>
   83698:	182b883a 	mov	r21,r3
   8369c:	d8002a15 	stw	zero,168(sp)
   836a0:	00388c06 	br	818d4 <__alt_data_end+0xfffc30d4>
   836a4:	d8802a17 	ldw	r2,168(sp)
   836a8:	103e071e 	bne	r2,zero,82ec8 <__alt_data_end+0xfffc46c8>
   836ac:	dc002a15 	stw	r16,168(sp)
   836b0:	003e0506 	br	82ec8 <__alt_data_end+0xfffc46c8>
   836b4:	d9002a17 	ldw	r4,168(sp)
   836b8:	20c00044 	addi	r3,r4,1
   836bc:	003e0f06 	br	82efc <__alt_data_end+0xfffc46fc>
   836c0:	01400184 	movi	r5,6
   836c4:	d9402a15 	stw	r5,168(sp)
   836c8:	003dff06 	br	82ec8 <__alt_data_end+0xfffc46c8>
   836cc:	d8802104 	addi	r2,sp,132
   836d0:	d8800315 	stw	r2,12(sp)
   836d4:	d8802504 	addi	r2,sp,148
   836d8:	d8800215 	stw	r2,8(sp)
   836dc:	d8802604 	addi	r2,sp,152
   836e0:	d8800115 	stw	r2,4(sp)
   836e4:	d8802a17 	ldw	r2,168(sp)
   836e8:	d9403617 	ldw	r5,216(sp)
   836ec:	d9002d17 	ldw	r4,180(sp)
   836f0:	d8800015 	stw	r2,0(sp)
   836f4:	01c000c4 	movi	r7,3
   836f8:	980d883a 	mov	r6,r19
   836fc:	da003d15 	stw	r8,244(sp)
   83700:	0083e780 	call	83e78 <_dtoa_r>
   83704:	d8c02a17 	ldw	r3,168(sp)
   83708:	da003d17 	ldw	r8,244(sp)
   8370c:	1021883a 	mov	r16,r2
   83710:	10f9883a 	add	fp,r2,r3
   83714:	81000007 	ldb	r4,0(r16)
   83718:	00800c04 	movi	r2,48
   8371c:	20805e26 	beq	r4,r2,83898 <___vfprintf_internal_r+0x2150>
   83720:	d8c02617 	ldw	r3,152(sp)
   83724:	e0f9883a 	add	fp,fp,r3
   83728:	003e0a06 	br	82f54 <__alt_data_end+0xfffc4754>
   8372c:	00c00b44 	movi	r3,45
   83730:	24e0003c 	xorhi	r19,r4,32768
   83734:	d8c02905 	stb	r3,164(sp)
   83738:	003de906 	br	82ee0 <__alt_data_end+0xfffc46e0>
   8373c:	d8c03217 	ldw	r3,200(sp)
   83740:	00c07a0e 	bge	zero,r3,8392c <___vfprintf_internal_r+0x21e4>
   83744:	00800044 	movi	r2,1
   83748:	d9003317 	ldw	r4,204(sp)
   8374c:	1105883a 	add	r2,r2,r4
   83750:	d8802b15 	stw	r2,172(sp)
   83754:	10004e16 	blt	r2,zero,83890 <___vfprintf_internal_r+0x2148>
   83758:	044019c4 	movi	r17,103
   8375c:	003e2106 	br	82fe4 <__alt_data_end+0xfffc47e4>
   83760:	d9002a17 	ldw	r4,168(sp)
   83764:	d8802104 	addi	r2,sp,132
   83768:	d8800315 	stw	r2,12(sp)
   8376c:	d9000015 	stw	r4,0(sp)
   83770:	d8802504 	addi	r2,sp,148
   83774:	d9403617 	ldw	r5,216(sp)
   83778:	d9002d17 	ldw	r4,180(sp)
   8377c:	d8800215 	stw	r2,8(sp)
   83780:	d8802604 	addi	r2,sp,152
   83784:	d8800115 	stw	r2,4(sp)
   83788:	01c000c4 	movi	r7,3
   8378c:	980d883a 	mov	r6,r19
   83790:	da003d15 	stw	r8,244(sp)
   83794:	0083e780 	call	83e78 <_dtoa_r>
   83798:	d8c02a17 	ldw	r3,168(sp)
   8379c:	da003d17 	ldw	r8,244(sp)
   837a0:	1021883a 	mov	r16,r2
   837a4:	00801184 	movi	r2,70
   837a8:	80f9883a 	add	fp,r16,r3
   837ac:	88bfd926 	beq	r17,r2,83714 <__alt_data_end+0xfffc4f14>
   837b0:	003de806 	br	82f54 <__alt_data_end+0xfffc4754>
   837b4:	d9002a17 	ldw	r4,168(sp)
   837b8:	00c04d0e 	bge	zero,r3,838f0 <___vfprintf_internal_r+0x21a8>
   837bc:	2000441e 	bne	r4,zero,838d0 <___vfprintf_internal_r+0x2188>
   837c0:	9480004c 	andi	r18,r18,1
   837c4:	9000421e 	bne	r18,zero,838d0 <___vfprintf_internal_r+0x2188>
   837c8:	1805883a 	mov	r2,r3
   837cc:	18006f16 	blt	r3,zero,8398c <___vfprintf_internal_r+0x2244>
   837d0:	d8c03217 	ldw	r3,200(sp)
   837d4:	d8c02b15 	stw	r3,172(sp)
   837d8:	003e0206 	br	82fe4 <__alt_data_end+0xfffc47e4>
   837dc:	df0022c4 	addi	fp,sp,139
   837e0:	dc002a15 	stw	r16,168(sp)
   837e4:	4027883a 	mov	r19,r8
   837e8:	e021883a 	mov	r16,fp
   837ec:	b009883a 	mov	r4,r22
   837f0:	01400284 	movi	r5,10
   837f4:	0080b900 	call	80b90 <__modsi3>
   837f8:	10800c04 	addi	r2,r2,48
   837fc:	843fffc4 	addi	r16,r16,-1
   83800:	b009883a 	mov	r4,r22
   83804:	01400284 	movi	r5,10
   83808:	80800005 	stb	r2,0(r16)
   8380c:	0080b0c0 	call	80b0c <__divsi3>
   83810:	102d883a 	mov	r22,r2
   83814:	00800244 	movi	r2,9
   83818:	15bff416 	blt	r2,r22,837ec <__alt_data_end+0xfffc4fec>
   8381c:	9811883a 	mov	r8,r19
   83820:	b0800c04 	addi	r2,r22,48
   83824:	8027883a 	mov	r19,r16
   83828:	997fffc4 	addi	r5,r19,-1
   8382c:	98bfffc5 	stb	r2,-1(r19)
   83830:	dc002a17 	ldw	r16,168(sp)
   83834:	2f006d2e 	bgeu	r5,fp,839ec <___vfprintf_internal_r+0x22a4>
   83838:	d9c02384 	addi	r7,sp,142
   8383c:	3ccfc83a 	sub	r7,r7,r19
   83840:	d9002344 	addi	r4,sp,141
   83844:	e1cf883a 	add	r7,fp,r7
   83848:	00000106 	br	83850 <___vfprintf_internal_r+0x2108>
   8384c:	28800003 	ldbu	r2,0(r5)
   83850:	20800005 	stb	r2,0(r4)
   83854:	21000044 	addi	r4,r4,1
   83858:	29400044 	addi	r5,r5,1
   8385c:	393ffb1e 	bne	r7,r4,8384c <__alt_data_end+0xfffc504c>
   83860:	d8802304 	addi	r2,sp,140
   83864:	14c5c83a 	sub	r2,r2,r19
   83868:	d8c02344 	addi	r3,sp,141
   8386c:	1885883a 	add	r2,r3,r2
   83870:	003f7006 	br	83634 <__alt_data_end+0xfffc4e34>
   83874:	0005883a 	mov	r2,zero
   83878:	003f0f06 	br	834b8 <__alt_data_end+0xfffc4cb8>
   8387c:	d8c03217 	ldw	r3,200(sp)
   83880:	18c00044 	addi	r3,r3,1
   83884:	d8c02b15 	stw	r3,172(sp)
   83888:	1805883a 	mov	r2,r3
   8388c:	183fb20e 	bge	r3,zero,83758 <__alt_data_end+0xfffc4f58>
   83890:	0005883a 	mov	r2,zero
   83894:	003fb006 	br	83758 <__alt_data_end+0xfffc4f58>
   83898:	d9003617 	ldw	r4,216(sp)
   8389c:	000d883a 	mov	r6,zero
   838a0:	000f883a 	mov	r7,zero
   838a4:	980b883a 	mov	r5,r19
   838a8:	d8c03c15 	stw	r3,240(sp)
   838ac:	da003d15 	stw	r8,244(sp)
   838b0:	008c4300 	call	8c430 <__eqdf2>
   838b4:	d8c03c17 	ldw	r3,240(sp)
   838b8:	da003d17 	ldw	r8,244(sp)
   838bc:	103f9826 	beq	r2,zero,83720 <__alt_data_end+0xfffc4f20>
   838c0:	00800044 	movi	r2,1
   838c4:	10c7c83a 	sub	r3,r2,r3
   838c8:	d8c02615 	stw	r3,152(sp)
   838cc:	003f9506 	br	83724 <__alt_data_end+0xfffc4f24>
   838d0:	d9002a17 	ldw	r4,168(sp)
   838d4:	d8c03217 	ldw	r3,200(sp)
   838d8:	20800044 	addi	r2,r4,1
   838dc:	1885883a 	add	r2,r3,r2
   838e0:	d8802b15 	stw	r2,172(sp)
   838e4:	103dbf0e 	bge	r2,zero,82fe4 <__alt_data_end+0xfffc47e4>
   838e8:	0005883a 	mov	r2,zero
   838ec:	003dbd06 	br	82fe4 <__alt_data_end+0xfffc47e4>
   838f0:	2000201e 	bne	r4,zero,83974 <___vfprintf_internal_r+0x222c>
   838f4:	9480004c 	andi	r18,r18,1
   838f8:	90001e1e 	bne	r18,zero,83974 <___vfprintf_internal_r+0x222c>
   838fc:	00800044 	movi	r2,1
   83900:	d8802b15 	stw	r2,172(sp)
   83904:	003db706 	br	82fe4 <__alt_data_end+0xfffc47e4>
   83908:	00800b44 	movi	r2,45
   8390c:	05adc83a 	sub	r22,zero,r22
   83910:	d8802305 	stb	r2,140(sp)
   83914:	003f3f06 	br	83614 <__alt_data_end+0xfffc4e14>
   83918:	0005883a 	mov	r2,zero
   8391c:	003f5206 	br	83668 <__alt_data_end+0xfffc4e68>
   83920:	90a4703a 	and	r18,r18,r2
   83924:	903f4e26 	beq	r18,zero,83660 <__alt_data_end+0xfffc4e60>
   83928:	003f4a06 	br	83654 <__alt_data_end+0xfffc4e54>
   8392c:	00800084 	movi	r2,2
   83930:	10c5c83a 	sub	r2,r2,r3
   83934:	003f8406 	br	83748 <__alt_data_end+0xfffc4f48>
   83938:	d9402e17 	ldw	r5,184(sp)
   8393c:	d9002e17 	ldw	r4,184(sp)
   83940:	ac400043 	ldbu	r17,1(r21)
   83944:	29400017 	ldw	r5,0(r5)
   83948:	20800104 	addi	r2,r4,4
   8394c:	d8802e15 	stw	r2,184(sp)
   83950:	d9402a15 	stw	r5,168(sp)
   83954:	182b883a 	mov	r21,r3
   83958:	283e7b0e 	bge	r5,zero,83348 <__alt_data_end+0xfffc4b48>
   8395c:	8c403fcc 	andi	r17,r17,255
   83960:	017fffc4 	movi	r5,-1
   83964:	8c40201c 	xori	r17,r17,128
   83968:	d9402a15 	stw	r5,168(sp)
   8396c:	8c7fe004 	addi	r17,r17,-128
   83970:	0037d706 	br	818d0 <__alt_data_end+0xfffc30d0>
   83974:	d8c02a17 	ldw	r3,168(sp)
   83978:	18c00084 	addi	r3,r3,2
   8397c:	d8c02b15 	stw	r3,172(sp)
   83980:	1805883a 	mov	r2,r3
   83984:	183d970e 	bge	r3,zero,82fe4 <__alt_data_end+0xfffc47e4>
   83988:	003fd706 	br	838e8 <__alt_data_end+0xfffc50e8>
   8398c:	0005883a 	mov	r2,zero
   83990:	003f8f06 	br	837d0 <__alt_data_end+0xfffc4fd0>
   83994:	9080004c 	andi	r2,r18,1
   83998:	103f821e 	bne	r2,zero,837a4 <__alt_data_end+0xfffc4fa4>
   8399c:	d8802117 	ldw	r2,132(sp)
   839a0:	1405c83a 	sub	r2,r2,r16
   839a4:	d8803315 	stw	r2,204(sp)
   839a8:	b47ef426 	beq	r22,r17,8357c <__alt_data_end+0xfffc4d7c>
   839ac:	dd802617 	ldw	r22,152(sp)
   839b0:	003f1206 	br	835fc <__alt_data_end+0xfffc4dfc>
   839b4:	d8c02b03 	ldbu	r3,172(sp)
   839b8:	d8c02785 	stb	r3,158(sp)
   839bc:	0038df06 	br	81d3c <__alt_data_end+0xfffc353c>
   839c0:	d8c02b03 	ldbu	r3,172(sp)
   839c4:	d8c02785 	stb	r3,158(sp)
   839c8:	0038aa06 	br	81c74 <__alt_data_end+0xfffc3474>
   839cc:	d8c02b03 	ldbu	r3,172(sp)
   839d0:	d8c02785 	stb	r3,158(sp)
   839d4:	003a4306 	br	822e4 <__alt_data_end+0xfffc3ae4>
   839d8:	d8c02b03 	ldbu	r3,172(sp)
   839dc:	d8c02785 	stb	r3,158(sp)
   839e0:	003af506 	br	825b8 <__alt_data_end+0xfffc3db8>
   839e4:	0005883a 	mov	r2,zero
   839e8:	003d7b06 	br	82fd8 <__alt_data_end+0xfffc47d8>
   839ec:	d8802344 	addi	r2,sp,141
   839f0:	003f1006 	br	83634 <__alt_data_end+0xfffc4e34>
   839f4:	d8c02b03 	ldbu	r3,172(sp)
   839f8:	d8c02785 	stb	r3,158(sp)
   839fc:	0038fd06 	br	81df4 <__alt_data_end+0xfffc35f4>
   83a00:	d8c02b03 	ldbu	r3,172(sp)
   83a04:	d8c02785 	stb	r3,158(sp)
   83a08:	003a9706 	br	82468 <__alt_data_end+0xfffc3c68>
   83a0c:	d8c02b03 	ldbu	r3,172(sp)
   83a10:	d8c02785 	stb	r3,158(sp)
   83a14:	003a1806 	br	82278 <__alt_data_end+0xfffc3a78>
   83a18:	d8c02b03 	ldbu	r3,172(sp)
   83a1c:	d8c02785 	stb	r3,158(sp)
   83a20:	003abe06 	br	8251c <__alt_data_end+0xfffc3d1c>

00083a24 <__vfprintf_internal>:
   83a24:	008002b4 	movhi	r2,10
   83a28:	10a87f04 	addi	r2,r2,-24068
   83a2c:	300f883a 	mov	r7,r6
   83a30:	280d883a 	mov	r6,r5
   83a34:	200b883a 	mov	r5,r4
   83a38:	11000017 	ldw	r4,0(r2)
   83a3c:	00817481 	jmpi	81748 <___vfprintf_internal_r>

00083a40 <__sbprintf>:
   83a40:	2880030b 	ldhu	r2,12(r5)
   83a44:	2ac01917 	ldw	r11,100(r5)
   83a48:	2a80038b 	ldhu	r10,14(r5)
   83a4c:	2a400717 	ldw	r9,28(r5)
   83a50:	2a000917 	ldw	r8,36(r5)
   83a54:	defee204 	addi	sp,sp,-1144
   83a58:	00c10004 	movi	r3,1024
   83a5c:	dc011a15 	stw	r16,1128(sp)
   83a60:	10bfff4c 	andi	r2,r2,65533
   83a64:	2821883a 	mov	r16,r5
   83a68:	d8cb883a 	add	r5,sp,r3
   83a6c:	dc811c15 	stw	r18,1136(sp)
   83a70:	dc411b15 	stw	r17,1132(sp)
   83a74:	dfc11d15 	stw	ra,1140(sp)
   83a78:	2025883a 	mov	r18,r4
   83a7c:	d881030d 	sth	r2,1036(sp)
   83a80:	dac11915 	stw	r11,1124(sp)
   83a84:	da81038d 	sth	r10,1038(sp)
   83a88:	da410715 	stw	r9,1052(sp)
   83a8c:	da010915 	stw	r8,1060(sp)
   83a90:	dec10015 	stw	sp,1024(sp)
   83a94:	dec10415 	stw	sp,1040(sp)
   83a98:	d8c10215 	stw	r3,1032(sp)
   83a9c:	d8c10515 	stw	r3,1044(sp)
   83aa0:	d8010615 	stw	zero,1048(sp)
   83aa4:	00817480 	call	81748 <___vfprintf_internal_r>
   83aa8:	1023883a 	mov	r17,r2
   83aac:	10000416 	blt	r2,zero,83ac0 <__sbprintf+0x80>
   83ab0:	d9410004 	addi	r5,sp,1024
   83ab4:	9009883a 	mov	r4,r18
   83ab8:	008571c0 	call	8571c <_fflush_r>
   83abc:	10000d1e 	bne	r2,zero,83af4 <__sbprintf+0xb4>
   83ac0:	d881030b 	ldhu	r2,1036(sp)
   83ac4:	1080100c 	andi	r2,r2,64
   83ac8:	10000326 	beq	r2,zero,83ad8 <__sbprintf+0x98>
   83acc:	8080030b 	ldhu	r2,12(r16)
   83ad0:	10801014 	ori	r2,r2,64
   83ad4:	8080030d 	sth	r2,12(r16)
   83ad8:	8805883a 	mov	r2,r17
   83adc:	dfc11d17 	ldw	ra,1140(sp)
   83ae0:	dc811c17 	ldw	r18,1136(sp)
   83ae4:	dc411b17 	ldw	r17,1132(sp)
   83ae8:	dc011a17 	ldw	r16,1128(sp)
   83aec:	dec11e04 	addi	sp,sp,1144
   83af0:	f800283a 	ret
   83af4:	047fffc4 	movi	r17,-1
   83af8:	003ff106 	br	83ac0 <__alt_data_end+0xfffc52c0>

00083afc <__swsetup_r>:
   83afc:	008002b4 	movhi	r2,10
   83b00:	defffd04 	addi	sp,sp,-12
   83b04:	10a87f04 	addi	r2,r2,-24068
   83b08:	dc400115 	stw	r17,4(sp)
   83b0c:	2023883a 	mov	r17,r4
   83b10:	11000017 	ldw	r4,0(r2)
   83b14:	dc000015 	stw	r16,0(sp)
   83b18:	dfc00215 	stw	ra,8(sp)
   83b1c:	2821883a 	mov	r16,r5
   83b20:	20000226 	beq	r4,zero,83b2c <__swsetup_r+0x30>
   83b24:	20800e17 	ldw	r2,56(r4)
   83b28:	10003126 	beq	r2,zero,83bf0 <__swsetup_r+0xf4>
   83b2c:	8080030b 	ldhu	r2,12(r16)
   83b30:	10c0020c 	andi	r3,r2,8
   83b34:	1009883a 	mov	r4,r2
   83b38:	18000f26 	beq	r3,zero,83b78 <__swsetup_r+0x7c>
   83b3c:	80c00417 	ldw	r3,16(r16)
   83b40:	18001526 	beq	r3,zero,83b98 <__swsetup_r+0x9c>
   83b44:	1100004c 	andi	r4,r2,1
   83b48:	20001c1e 	bne	r4,zero,83bbc <__swsetup_r+0xc0>
   83b4c:	1080008c 	andi	r2,r2,2
   83b50:	1000291e 	bne	r2,zero,83bf8 <__swsetup_r+0xfc>
   83b54:	80800517 	ldw	r2,20(r16)
   83b58:	80800215 	stw	r2,8(r16)
   83b5c:	18001c26 	beq	r3,zero,83bd0 <__swsetup_r+0xd4>
   83b60:	0005883a 	mov	r2,zero
   83b64:	dfc00217 	ldw	ra,8(sp)
   83b68:	dc400117 	ldw	r17,4(sp)
   83b6c:	dc000017 	ldw	r16,0(sp)
   83b70:	dec00304 	addi	sp,sp,12
   83b74:	f800283a 	ret
   83b78:	2080040c 	andi	r2,r4,16
   83b7c:	10002e26 	beq	r2,zero,83c38 <__swsetup_r+0x13c>
   83b80:	2080010c 	andi	r2,r4,4
   83b84:	10001e1e 	bne	r2,zero,83c00 <__swsetup_r+0x104>
   83b88:	80c00417 	ldw	r3,16(r16)
   83b8c:	20800214 	ori	r2,r4,8
   83b90:	8080030d 	sth	r2,12(r16)
   83b94:	183feb1e 	bne	r3,zero,83b44 <__alt_data_end+0xfffc5344>
   83b98:	1100a00c 	andi	r4,r2,640
   83b9c:	01408004 	movi	r5,512
   83ba0:	217fe826 	beq	r4,r5,83b44 <__alt_data_end+0xfffc5344>
   83ba4:	800b883a 	mov	r5,r16
   83ba8:	8809883a 	mov	r4,r17
   83bac:	00861f00 	call	861f0 <__smakebuf_r>
   83bb0:	8080030b 	ldhu	r2,12(r16)
   83bb4:	80c00417 	ldw	r3,16(r16)
   83bb8:	003fe206 	br	83b44 <__alt_data_end+0xfffc5344>
   83bbc:	80800517 	ldw	r2,20(r16)
   83bc0:	80000215 	stw	zero,8(r16)
   83bc4:	0085c83a 	sub	r2,zero,r2
   83bc8:	80800615 	stw	r2,24(r16)
   83bcc:	183fe41e 	bne	r3,zero,83b60 <__alt_data_end+0xfffc5360>
   83bd0:	80c0030b 	ldhu	r3,12(r16)
   83bd4:	0005883a 	mov	r2,zero
   83bd8:	1900200c 	andi	r4,r3,128
   83bdc:	203fe126 	beq	r4,zero,83b64 <__alt_data_end+0xfffc5364>
   83be0:	18c01014 	ori	r3,r3,64
   83be4:	80c0030d 	sth	r3,12(r16)
   83be8:	00bfffc4 	movi	r2,-1
   83bec:	003fdd06 	br	83b64 <__alt_data_end+0xfffc5364>
   83bf0:	0085b080 	call	85b08 <__sinit>
   83bf4:	003fcd06 	br	83b2c <__alt_data_end+0xfffc532c>
   83bf8:	0005883a 	mov	r2,zero
   83bfc:	003fd606 	br	83b58 <__alt_data_end+0xfffc5358>
   83c00:	81400c17 	ldw	r5,48(r16)
   83c04:	28000626 	beq	r5,zero,83c20 <__swsetup_r+0x124>
   83c08:	80801004 	addi	r2,r16,64
   83c0c:	28800326 	beq	r5,r2,83c1c <__swsetup_r+0x120>
   83c10:	8809883a 	mov	r4,r17
   83c14:	0085c7c0 	call	85c7c <_free_r>
   83c18:	8100030b 	ldhu	r4,12(r16)
   83c1c:	80000c15 	stw	zero,48(r16)
   83c20:	80c00417 	ldw	r3,16(r16)
   83c24:	00bff6c4 	movi	r2,-37
   83c28:	1108703a 	and	r4,r2,r4
   83c2c:	80000115 	stw	zero,4(r16)
   83c30:	80c00015 	stw	r3,0(r16)
   83c34:	003fd506 	br	83b8c <__alt_data_end+0xfffc538c>
   83c38:	00800244 	movi	r2,9
   83c3c:	88800015 	stw	r2,0(r17)
   83c40:	20801014 	ori	r2,r4,64
   83c44:	8080030d 	sth	r2,12(r16)
   83c48:	00bfffc4 	movi	r2,-1
   83c4c:	003fc506 	br	83b64 <__alt_data_end+0xfffc5364>

00083c50 <quorem>:
   83c50:	defff204 	addi	sp,sp,-56
   83c54:	ddc00b15 	stw	r23,44(sp)
   83c58:	20800417 	ldw	r2,16(r4)
   83c5c:	2dc00417 	ldw	r23,16(r5)
   83c60:	dfc00d15 	stw	ra,52(sp)
   83c64:	df000c15 	stw	fp,48(sp)
   83c68:	dd800a15 	stw	r22,40(sp)
   83c6c:	dd400915 	stw	r21,36(sp)
   83c70:	dd000815 	stw	r20,32(sp)
   83c74:	dcc00715 	stw	r19,28(sp)
   83c78:	dc800615 	stw	r18,24(sp)
   83c7c:	dc400515 	stw	r17,20(sp)
   83c80:	dc000415 	stw	r16,16(sp)
   83c84:	15c07a16 	blt	r2,r23,83e70 <quorem+0x220>
   83c88:	bdffffc4 	addi	r23,r23,-1
   83c8c:	bde9883a 	add	r20,r23,r23
   83c90:	28c00504 	addi	r3,r5,20
   83c94:	a529883a 	add	r20,r20,r20
   83c98:	1d39883a 	add	fp,r3,r20
   83c9c:	24c00504 	addi	r19,r4,20
   83ca0:	d9400215 	stw	r5,8(sp)
   83ca4:	9d29883a 	add	r20,r19,r20
   83ca8:	e1400017 	ldw	r5,0(fp)
   83cac:	d9000015 	stw	r4,0(sp)
   83cb0:	a1000017 	ldw	r4,0(r20)
   83cb4:	29400044 	addi	r5,r5,1
   83cb8:	d8c00115 	stw	r3,4(sp)
   83cbc:	dd000315 	stw	r20,12(sp)
   83cc0:	0080c040 	call	80c04 <__udivsi3>
   83cc4:	1025883a 	mov	r18,r2
   83cc8:	10003026 	beq	r2,zero,83d8c <quorem+0x13c>
   83ccc:	dc400117 	ldw	r17,4(sp)
   83cd0:	9829883a 	mov	r20,r19
   83cd4:	002d883a 	mov	r22,zero
   83cd8:	0021883a 	mov	r16,zero
   83cdc:	8d400017 	ldw	r21,0(r17)
   83ce0:	900b883a 	mov	r5,r18
   83ce4:	8c400104 	addi	r17,r17,4
   83ce8:	a93fffcc 	andi	r4,r21,65535
   83cec:	008b18c0 	call	8b18c <__mulsi3>
   83cf0:	a808d43a 	srli	r4,r21,16
   83cf4:	900b883a 	mov	r5,r18
   83cf8:	15ad883a 	add	r22,r2,r22
   83cfc:	008b18c0 	call	8b18c <__mulsi3>
   83d00:	a1000017 	ldw	r4,0(r20)
   83d04:	b00cd43a 	srli	r6,r22,16
   83d08:	b0ffffcc 	andi	r3,r22,65535
   83d0c:	217fffcc 	andi	r5,r4,65535
   83d10:	2c21883a 	add	r16,r5,r16
   83d14:	80c7c83a 	sub	r3,r16,r3
   83d18:	2008d43a 	srli	r4,r4,16
   83d1c:	1185883a 	add	r2,r2,r6
   83d20:	1821d43a 	srai	r16,r3,16
   83d24:	117fffcc 	andi	r5,r2,65535
   83d28:	2149c83a 	sub	r4,r4,r5
   83d2c:	2421883a 	add	r16,r4,r16
   83d30:	8008943a 	slli	r4,r16,16
   83d34:	18ffffcc 	andi	r3,r3,65535
   83d38:	102cd43a 	srli	r22,r2,16
   83d3c:	20c8b03a 	or	r4,r4,r3
   83d40:	a1000015 	stw	r4,0(r20)
   83d44:	8021d43a 	srai	r16,r16,16
   83d48:	a5000104 	addi	r20,r20,4
   83d4c:	e47fe32e 	bgeu	fp,r17,83cdc <__alt_data_end+0xfffc54dc>
   83d50:	d8c00317 	ldw	r3,12(sp)
   83d54:	18800017 	ldw	r2,0(r3)
   83d58:	10000c1e 	bne	r2,zero,83d8c <quorem+0x13c>
   83d5c:	18bfff04 	addi	r2,r3,-4
   83d60:	9880082e 	bgeu	r19,r2,83d84 <quorem+0x134>
   83d64:	18ffff17 	ldw	r3,-4(r3)
   83d68:	18000326 	beq	r3,zero,83d78 <quorem+0x128>
   83d6c:	00000506 	br	83d84 <quorem+0x134>
   83d70:	10c00017 	ldw	r3,0(r2)
   83d74:	1800031e 	bne	r3,zero,83d84 <quorem+0x134>
   83d78:	10bfff04 	addi	r2,r2,-4
   83d7c:	bdffffc4 	addi	r23,r23,-1
   83d80:	98bffb36 	bltu	r19,r2,83d70 <__alt_data_end+0xfffc5570>
   83d84:	d8c00017 	ldw	r3,0(sp)
   83d88:	1dc00415 	stw	r23,16(r3)
   83d8c:	d9400217 	ldw	r5,8(sp)
   83d90:	d9000017 	ldw	r4,0(sp)
   83d94:	00870840 	call	87084 <__mcmp>
   83d98:	10002816 	blt	r2,zero,83e3c <quorem+0x1ec>
   83d9c:	dc400117 	ldw	r17,4(sp)
   83da0:	94800044 	addi	r18,r18,1
   83da4:	980d883a 	mov	r6,r19
   83da8:	0007883a 	mov	r3,zero
   83dac:	31000017 	ldw	r4,0(r6)
   83db0:	89400017 	ldw	r5,0(r17)
   83db4:	31800104 	addi	r6,r6,4
   83db8:	20bfffcc 	andi	r2,r4,65535
   83dbc:	10c7883a 	add	r3,r2,r3
   83dc0:	28bfffcc 	andi	r2,r5,65535
   83dc4:	1885c83a 	sub	r2,r3,r2
   83dc8:	280ad43a 	srli	r5,r5,16
   83dcc:	2008d43a 	srli	r4,r4,16
   83dd0:	1007d43a 	srai	r3,r2,16
   83dd4:	10bfffcc 	andi	r2,r2,65535
   83dd8:	2149c83a 	sub	r4,r4,r5
   83ddc:	20c9883a 	add	r4,r4,r3
   83de0:	200a943a 	slli	r5,r4,16
   83de4:	8c400104 	addi	r17,r17,4
   83de8:	2007d43a 	srai	r3,r4,16
   83dec:	2884b03a 	or	r2,r5,r2
   83df0:	30bfff15 	stw	r2,-4(r6)
   83df4:	e47fed2e 	bgeu	fp,r17,83dac <__alt_data_end+0xfffc55ac>
   83df8:	bdc5883a 	add	r2,r23,r23
   83dfc:	1085883a 	add	r2,r2,r2
   83e00:	9887883a 	add	r3,r19,r2
   83e04:	18800017 	ldw	r2,0(r3)
   83e08:	10000c1e 	bne	r2,zero,83e3c <quorem+0x1ec>
   83e0c:	18bfff04 	addi	r2,r3,-4
   83e10:	9880082e 	bgeu	r19,r2,83e34 <quorem+0x1e4>
   83e14:	18ffff17 	ldw	r3,-4(r3)
   83e18:	18000326 	beq	r3,zero,83e28 <quorem+0x1d8>
   83e1c:	00000506 	br	83e34 <quorem+0x1e4>
   83e20:	10c00017 	ldw	r3,0(r2)
   83e24:	1800031e 	bne	r3,zero,83e34 <quorem+0x1e4>
   83e28:	10bfff04 	addi	r2,r2,-4
   83e2c:	bdffffc4 	addi	r23,r23,-1
   83e30:	98bffb36 	bltu	r19,r2,83e20 <__alt_data_end+0xfffc5620>
   83e34:	d8c00017 	ldw	r3,0(sp)
   83e38:	1dc00415 	stw	r23,16(r3)
   83e3c:	9005883a 	mov	r2,r18
   83e40:	dfc00d17 	ldw	ra,52(sp)
   83e44:	df000c17 	ldw	fp,48(sp)
   83e48:	ddc00b17 	ldw	r23,44(sp)
   83e4c:	dd800a17 	ldw	r22,40(sp)
   83e50:	dd400917 	ldw	r21,36(sp)
   83e54:	dd000817 	ldw	r20,32(sp)
   83e58:	dcc00717 	ldw	r19,28(sp)
   83e5c:	dc800617 	ldw	r18,24(sp)
   83e60:	dc400517 	ldw	r17,20(sp)
   83e64:	dc000417 	ldw	r16,16(sp)
   83e68:	dec00e04 	addi	sp,sp,56
   83e6c:	f800283a 	ret
   83e70:	0005883a 	mov	r2,zero
   83e74:	003ff206 	br	83e40 <__alt_data_end+0xfffc5640>

00083e78 <_dtoa_r>:
   83e78:	20801017 	ldw	r2,64(r4)
   83e7c:	deffde04 	addi	sp,sp,-136
   83e80:	df002015 	stw	fp,128(sp)
   83e84:	dcc01b15 	stw	r19,108(sp)
   83e88:	dc801a15 	stw	r18,104(sp)
   83e8c:	dc401915 	stw	r17,100(sp)
   83e90:	dc001815 	stw	r16,96(sp)
   83e94:	dfc02115 	stw	ra,132(sp)
   83e98:	ddc01f15 	stw	r23,124(sp)
   83e9c:	dd801e15 	stw	r22,120(sp)
   83ea0:	dd401d15 	stw	r21,116(sp)
   83ea4:	dd001c15 	stw	r20,112(sp)
   83ea8:	d9c00315 	stw	r7,12(sp)
   83eac:	2039883a 	mov	fp,r4
   83eb0:	3023883a 	mov	r17,r6
   83eb4:	2825883a 	mov	r18,r5
   83eb8:	dc002417 	ldw	r16,144(sp)
   83ebc:	3027883a 	mov	r19,r6
   83ec0:	10000826 	beq	r2,zero,83ee4 <_dtoa_r+0x6c>
   83ec4:	21801117 	ldw	r6,68(r4)
   83ec8:	00c00044 	movi	r3,1
   83ecc:	100b883a 	mov	r5,r2
   83ed0:	1986983a 	sll	r3,r3,r6
   83ed4:	11800115 	stw	r6,4(r2)
   83ed8:	10c00215 	stw	r3,8(r2)
   83edc:	00867a80 	call	867a8 <_Bfree>
   83ee0:	e0001015 	stw	zero,64(fp)
   83ee4:	88002e16 	blt	r17,zero,83fa0 <_dtoa_r+0x128>
   83ee8:	80000015 	stw	zero,0(r16)
   83eec:	889ffc2c 	andhi	r2,r17,32752
   83ef0:	00dffc34 	movhi	r3,32752
   83ef4:	10c01c26 	beq	r2,r3,83f68 <_dtoa_r+0xf0>
   83ef8:	000d883a 	mov	r6,zero
   83efc:	000f883a 	mov	r7,zero
   83f00:	9009883a 	mov	r4,r18
   83f04:	980b883a 	mov	r5,r19
   83f08:	008c4300 	call	8c430 <__eqdf2>
   83f0c:	10002b1e 	bne	r2,zero,83fbc <_dtoa_r+0x144>
   83f10:	d9c02317 	ldw	r7,140(sp)
   83f14:	00800044 	movi	r2,1
   83f18:	38800015 	stw	r2,0(r7)
   83f1c:	d8802517 	ldw	r2,148(sp)
   83f20:	10019e26 	beq	r2,zero,8459c <_dtoa_r+0x724>
   83f24:	d8c02517 	ldw	r3,148(sp)
   83f28:	008002b4 	movhi	r2,10
   83f2c:	10a0d544 	addi	r2,r2,-31915
   83f30:	18800015 	stw	r2,0(r3)
   83f34:	10bfffc4 	addi	r2,r2,-1
   83f38:	dfc02117 	ldw	ra,132(sp)
   83f3c:	df002017 	ldw	fp,128(sp)
   83f40:	ddc01f17 	ldw	r23,124(sp)
   83f44:	dd801e17 	ldw	r22,120(sp)
   83f48:	dd401d17 	ldw	r21,116(sp)
   83f4c:	dd001c17 	ldw	r20,112(sp)
   83f50:	dcc01b17 	ldw	r19,108(sp)
   83f54:	dc801a17 	ldw	r18,104(sp)
   83f58:	dc401917 	ldw	r17,100(sp)
   83f5c:	dc001817 	ldw	r16,96(sp)
   83f60:	dec02204 	addi	sp,sp,136
   83f64:	f800283a 	ret
   83f68:	d8c02317 	ldw	r3,140(sp)
   83f6c:	0089c3c4 	movi	r2,9999
   83f70:	18800015 	stw	r2,0(r3)
   83f74:	90017726 	beq	r18,zero,84554 <_dtoa_r+0x6dc>
   83f78:	008002b4 	movhi	r2,10
   83f7c:	10a0e104 	addi	r2,r2,-31868
   83f80:	d9002517 	ldw	r4,148(sp)
   83f84:	203fec26 	beq	r4,zero,83f38 <__alt_data_end+0xfffc5738>
   83f88:	10c000c7 	ldb	r3,3(r2)
   83f8c:	1801781e 	bne	r3,zero,84570 <_dtoa_r+0x6f8>
   83f90:	10c000c4 	addi	r3,r2,3
   83f94:	d9802517 	ldw	r6,148(sp)
   83f98:	30c00015 	stw	r3,0(r6)
   83f9c:	003fe606 	br	83f38 <__alt_data_end+0xfffc5738>
   83fa0:	04e00034 	movhi	r19,32768
   83fa4:	9cffffc4 	addi	r19,r19,-1
   83fa8:	00800044 	movi	r2,1
   83fac:	8ce6703a 	and	r19,r17,r19
   83fb0:	80800015 	stw	r2,0(r16)
   83fb4:	9823883a 	mov	r17,r19
   83fb8:	003fcc06 	br	83eec <__alt_data_end+0xfffc56ec>
   83fbc:	d8800204 	addi	r2,sp,8
   83fc0:	d8800015 	stw	r2,0(sp)
   83fc4:	d9c00104 	addi	r7,sp,4
   83fc8:	900b883a 	mov	r5,r18
   83fcc:	980d883a 	mov	r6,r19
   83fd0:	e009883a 	mov	r4,fp
   83fd4:	8820d53a 	srli	r16,r17,20
   83fd8:	00874500 	call	87450 <__d2b>
   83fdc:	d8800915 	stw	r2,36(sp)
   83fe0:	8001651e 	bne	r16,zero,84578 <_dtoa_r+0x700>
   83fe4:	dd800217 	ldw	r22,8(sp)
   83fe8:	dc000117 	ldw	r16,4(sp)
   83fec:	00800804 	movi	r2,32
   83ff0:	b421883a 	add	r16,r22,r16
   83ff4:	80c10c84 	addi	r3,r16,1074
   83ff8:	10c2d10e 	bge	r2,r3,84b40 <_dtoa_r+0xcc8>
   83ffc:	00801004 	movi	r2,64
   84000:	81010484 	addi	r4,r16,1042
   84004:	10c7c83a 	sub	r3,r2,r3
   84008:	9108d83a 	srl	r4,r18,r4
   8400c:	88e2983a 	sll	r17,r17,r3
   84010:	2448b03a 	or	r4,r4,r17
   84014:	008d94c0 	call	8d94c <__floatunsidf>
   84018:	017f8434 	movhi	r5,65040
   8401c:	01800044 	movi	r6,1
   84020:	1009883a 	mov	r4,r2
   84024:	194b883a 	add	r5,r3,r5
   84028:	843fffc4 	addi	r16,r16,-1
   8402c:	d9801115 	stw	r6,68(sp)
   84030:	000d883a 	mov	r6,zero
   84034:	01cffe34 	movhi	r7,16376
   84038:	008cef40 	call	8cef4 <__subdf3>
   8403c:	0198dbf4 	movhi	r6,25455
   84040:	01cff4f4 	movhi	r7,16339
   84044:	3190d844 	addi	r6,r6,17249
   84048:	39e1e9c4 	addi	r7,r7,-30809
   8404c:	1009883a 	mov	r4,r2
   84050:	180b883a 	mov	r5,r3
   84054:	008c6880 	call	8c688 <__muldf3>
   84058:	01a2d874 	movhi	r6,35681
   8405c:	01cff1f4 	movhi	r7,16327
   84060:	31b22cc4 	addi	r6,r6,-14157
   84064:	39e28a04 	addi	r7,r7,-30168
   84068:	180b883a 	mov	r5,r3
   8406c:	1009883a 	mov	r4,r2
   84070:	008b1b40 	call	8b1b4 <__adddf3>
   84074:	8009883a 	mov	r4,r16
   84078:	1029883a 	mov	r20,r2
   8407c:	1823883a 	mov	r17,r3
   84080:	008d8700 	call	8d870 <__floatsidf>
   84084:	019427f4 	movhi	r6,20639
   84088:	01cff4f4 	movhi	r7,16339
   8408c:	319e7ec4 	addi	r6,r6,31227
   84090:	39d104c4 	addi	r7,r7,17427
   84094:	1009883a 	mov	r4,r2
   84098:	180b883a 	mov	r5,r3
   8409c:	008c6880 	call	8c688 <__muldf3>
   840a0:	100d883a 	mov	r6,r2
   840a4:	180f883a 	mov	r7,r3
   840a8:	a009883a 	mov	r4,r20
   840ac:	880b883a 	mov	r5,r17
   840b0:	008b1b40 	call	8b1b4 <__adddf3>
   840b4:	1009883a 	mov	r4,r2
   840b8:	180b883a 	mov	r5,r3
   840bc:	1029883a 	mov	r20,r2
   840c0:	1823883a 	mov	r17,r3
   840c4:	008d7f00 	call	8d7f0 <__fixdfsi>
   840c8:	000d883a 	mov	r6,zero
   840cc:	000f883a 	mov	r7,zero
   840d0:	a009883a 	mov	r4,r20
   840d4:	880b883a 	mov	r5,r17
   840d8:	d8800515 	stw	r2,20(sp)
   840dc:	008c5940 	call	8c594 <__ledf2>
   840e0:	10028716 	blt	r2,zero,84b00 <_dtoa_r+0xc88>
   840e4:	d8c00517 	ldw	r3,20(sp)
   840e8:	00800584 	movi	r2,22
   840ec:	10c27536 	bltu	r2,r3,84ac4 <_dtoa_r+0xc4c>
   840f0:	180490fa 	slli	r2,r3,3
   840f4:	00c002b4 	movhi	r3,10
   840f8:	18e0fd04 	addi	r3,r3,-31756
   840fc:	1885883a 	add	r2,r3,r2
   84100:	11000017 	ldw	r4,0(r2)
   84104:	11400117 	ldw	r5,4(r2)
   84108:	900d883a 	mov	r6,r18
   8410c:	980f883a 	mov	r7,r19
   84110:	008c4b80 	call	8c4b8 <__gedf2>
   84114:	00828d0e 	bge	zero,r2,84b4c <_dtoa_r+0xcd4>
   84118:	d9000517 	ldw	r4,20(sp)
   8411c:	d8000e15 	stw	zero,56(sp)
   84120:	213fffc4 	addi	r4,r4,-1
   84124:	d9000515 	stw	r4,20(sp)
   84128:	b42dc83a 	sub	r22,r22,r16
   8412c:	b5bfffc4 	addi	r22,r22,-1
   84130:	b0026f16 	blt	r22,zero,84af0 <_dtoa_r+0xc78>
   84134:	d8000815 	stw	zero,32(sp)
   84138:	d9c00517 	ldw	r7,20(sp)
   8413c:	38026416 	blt	r7,zero,84ad0 <_dtoa_r+0xc58>
   84140:	b1ed883a 	add	r22,r22,r7
   84144:	d9c00d15 	stw	r7,52(sp)
   84148:	d8000a15 	stw	zero,40(sp)
   8414c:	d9800317 	ldw	r6,12(sp)
   84150:	00800244 	movi	r2,9
   84154:	11811436 	bltu	r2,r6,845a8 <_dtoa_r+0x730>
   84158:	00800144 	movi	r2,5
   8415c:	1184e10e 	bge	r2,r6,854e4 <_dtoa_r+0x166c>
   84160:	31bfff04 	addi	r6,r6,-4
   84164:	d9800315 	stw	r6,12(sp)
   84168:	0023883a 	mov	r17,zero
   8416c:	d9800317 	ldw	r6,12(sp)
   84170:	008000c4 	movi	r2,3
   84174:	30836726 	beq	r6,r2,84f14 <_dtoa_r+0x109c>
   84178:	1183410e 	bge	r2,r6,84e80 <_dtoa_r+0x1008>
   8417c:	d9c00317 	ldw	r7,12(sp)
   84180:	00800104 	movi	r2,4
   84184:	38827c26 	beq	r7,r2,84b78 <_dtoa_r+0xd00>
   84188:	00800144 	movi	r2,5
   8418c:	3884c41e 	bne	r7,r2,854a0 <_dtoa_r+0x1628>
   84190:	00800044 	movi	r2,1
   84194:	d8800b15 	stw	r2,44(sp)
   84198:	d8c00517 	ldw	r3,20(sp)
   8419c:	d9002217 	ldw	r4,136(sp)
   841a0:	1907883a 	add	r3,r3,r4
   841a4:	19800044 	addi	r6,r3,1
   841a8:	d8c00c15 	stw	r3,48(sp)
   841ac:	d9800615 	stw	r6,24(sp)
   841b0:	0183a40e 	bge	zero,r6,85044 <_dtoa_r+0x11cc>
   841b4:	d9800617 	ldw	r6,24(sp)
   841b8:	3021883a 	mov	r16,r6
   841bc:	e0001115 	stw	zero,68(fp)
   841c0:	008005c4 	movi	r2,23
   841c4:	1184c92e 	bgeu	r2,r6,854ec <_dtoa_r+0x1674>
   841c8:	00c00044 	movi	r3,1
   841cc:	00800104 	movi	r2,4
   841d0:	1085883a 	add	r2,r2,r2
   841d4:	11000504 	addi	r4,r2,20
   841d8:	180b883a 	mov	r5,r3
   841dc:	18c00044 	addi	r3,r3,1
   841e0:	313ffb2e 	bgeu	r6,r4,841d0 <__alt_data_end+0xfffc59d0>
   841e4:	e1401115 	stw	r5,68(fp)
   841e8:	e009883a 	mov	r4,fp
   841ec:	00867000 	call	86700 <_Balloc>
   841f0:	d8800715 	stw	r2,28(sp)
   841f4:	e0801015 	stw	r2,64(fp)
   841f8:	00800384 	movi	r2,14
   841fc:	1400f736 	bltu	r2,r16,845dc <_dtoa_r+0x764>
   84200:	8800f626 	beq	r17,zero,845dc <_dtoa_r+0x764>
   84204:	d9c00517 	ldw	r7,20(sp)
   84208:	01c39a0e 	bge	zero,r7,85074 <_dtoa_r+0x11fc>
   8420c:	388003cc 	andi	r2,r7,15
   84210:	100490fa 	slli	r2,r2,3
   84214:	382bd13a 	srai	r21,r7,4
   84218:	00c002b4 	movhi	r3,10
   8421c:	18e0fd04 	addi	r3,r3,-31756
   84220:	1885883a 	add	r2,r3,r2
   84224:	a8c0040c 	andi	r3,r21,16
   84228:	12400017 	ldw	r9,0(r2)
   8422c:	12000117 	ldw	r8,4(r2)
   84230:	18037926 	beq	r3,zero,85018 <_dtoa_r+0x11a0>
   84234:	008002b4 	movhi	r2,10
   84238:	10a0f304 	addi	r2,r2,-31796
   8423c:	11800817 	ldw	r6,32(r2)
   84240:	11c00917 	ldw	r7,36(r2)
   84244:	9009883a 	mov	r4,r18
   84248:	980b883a 	mov	r5,r19
   8424c:	da001715 	stw	r8,92(sp)
   84250:	da401615 	stw	r9,88(sp)
   84254:	008ba600 	call	8ba60 <__divdf3>
   84258:	da001717 	ldw	r8,92(sp)
   8425c:	da401617 	ldw	r9,88(sp)
   84260:	ad4003cc 	andi	r21,r21,15
   84264:	040000c4 	movi	r16,3
   84268:	1023883a 	mov	r17,r2
   8426c:	1829883a 	mov	r20,r3
   84270:	a8001126 	beq	r21,zero,842b8 <_dtoa_r+0x440>
   84274:	05c002b4 	movhi	r23,10
   84278:	bde0f304 	addi	r23,r23,-31796
   8427c:	4805883a 	mov	r2,r9
   84280:	4007883a 	mov	r3,r8
   84284:	a980004c 	andi	r6,r21,1
   84288:	1009883a 	mov	r4,r2
   8428c:	a82bd07a 	srai	r21,r21,1
   84290:	180b883a 	mov	r5,r3
   84294:	30000426 	beq	r6,zero,842a8 <_dtoa_r+0x430>
   84298:	b9800017 	ldw	r6,0(r23)
   8429c:	b9c00117 	ldw	r7,4(r23)
   842a0:	84000044 	addi	r16,r16,1
   842a4:	008c6880 	call	8c688 <__muldf3>
   842a8:	bdc00204 	addi	r23,r23,8
   842ac:	a83ff51e 	bne	r21,zero,84284 <__alt_data_end+0xfffc5a84>
   842b0:	1013883a 	mov	r9,r2
   842b4:	1811883a 	mov	r8,r3
   842b8:	480d883a 	mov	r6,r9
   842bc:	400f883a 	mov	r7,r8
   842c0:	8809883a 	mov	r4,r17
   842c4:	a00b883a 	mov	r5,r20
   842c8:	008ba600 	call	8ba60 <__divdf3>
   842cc:	d8800f15 	stw	r2,60(sp)
   842d0:	d8c01015 	stw	r3,64(sp)
   842d4:	d8c00e17 	ldw	r3,56(sp)
   842d8:	18000626 	beq	r3,zero,842f4 <_dtoa_r+0x47c>
   842dc:	d9000f17 	ldw	r4,60(sp)
   842e0:	d9401017 	ldw	r5,64(sp)
   842e4:	000d883a 	mov	r6,zero
   842e8:	01cffc34 	movhi	r7,16368
   842ec:	008c5940 	call	8c594 <__ledf2>
   842f0:	10040b16 	blt	r2,zero,85320 <_dtoa_r+0x14a8>
   842f4:	8009883a 	mov	r4,r16
   842f8:	008d8700 	call	8d870 <__floatsidf>
   842fc:	d9800f17 	ldw	r6,60(sp)
   84300:	d9c01017 	ldw	r7,64(sp)
   84304:	1009883a 	mov	r4,r2
   84308:	180b883a 	mov	r5,r3
   8430c:	008c6880 	call	8c688 <__muldf3>
   84310:	000d883a 	mov	r6,zero
   84314:	01d00734 	movhi	r7,16412
   84318:	1009883a 	mov	r4,r2
   8431c:	180b883a 	mov	r5,r3
   84320:	008b1b40 	call	8b1b4 <__adddf3>
   84324:	1021883a 	mov	r16,r2
   84328:	d8800617 	ldw	r2,24(sp)
   8432c:	047f3034 	movhi	r17,64704
   84330:	1c63883a 	add	r17,r3,r17
   84334:	10031826 	beq	r2,zero,84f98 <_dtoa_r+0x1120>
   84338:	d8c00517 	ldw	r3,20(sp)
   8433c:	db000617 	ldw	r12,24(sp)
   84340:	d8c01315 	stw	r3,76(sp)
   84344:	d9000b17 	ldw	r4,44(sp)
   84348:	20038f26 	beq	r4,zero,85188 <_dtoa_r+0x1310>
   8434c:	60bfffc4 	addi	r2,r12,-1
   84350:	100490fa 	slli	r2,r2,3
   84354:	00c002b4 	movhi	r3,10
   84358:	18e0fd04 	addi	r3,r3,-31756
   8435c:	1885883a 	add	r2,r3,r2
   84360:	11800017 	ldw	r6,0(r2)
   84364:	11c00117 	ldw	r7,4(r2)
   84368:	d8800717 	ldw	r2,28(sp)
   8436c:	0009883a 	mov	r4,zero
   84370:	014ff834 	movhi	r5,16352
   84374:	db001615 	stw	r12,88(sp)
   84378:	15c00044 	addi	r23,r2,1
   8437c:	008ba600 	call	8ba60 <__divdf3>
   84380:	800d883a 	mov	r6,r16
   84384:	880f883a 	mov	r7,r17
   84388:	1009883a 	mov	r4,r2
   8438c:	180b883a 	mov	r5,r3
   84390:	008cef40 	call	8cef4 <__subdf3>
   84394:	d9401017 	ldw	r5,64(sp)
   84398:	d9000f17 	ldw	r4,60(sp)
   8439c:	102b883a 	mov	r21,r2
   843a0:	d8c01215 	stw	r3,72(sp)
   843a4:	008d7f00 	call	8d7f0 <__fixdfsi>
   843a8:	1009883a 	mov	r4,r2
   843ac:	1029883a 	mov	r20,r2
   843b0:	008d8700 	call	8d870 <__floatsidf>
   843b4:	d9000f17 	ldw	r4,60(sp)
   843b8:	d9401017 	ldw	r5,64(sp)
   843bc:	100d883a 	mov	r6,r2
   843c0:	180f883a 	mov	r7,r3
   843c4:	008cef40 	call	8cef4 <__subdf3>
   843c8:	1823883a 	mov	r17,r3
   843cc:	d8c00717 	ldw	r3,28(sp)
   843d0:	d9401217 	ldw	r5,72(sp)
   843d4:	a2000c04 	addi	r8,r20,48
   843d8:	1021883a 	mov	r16,r2
   843dc:	1a000005 	stb	r8,0(r3)
   843e0:	800d883a 	mov	r6,r16
   843e4:	880f883a 	mov	r7,r17
   843e8:	a809883a 	mov	r4,r21
   843ec:	4029883a 	mov	r20,r8
   843f0:	008c4b80 	call	8c4b8 <__gedf2>
   843f4:	00841d16 	blt	zero,r2,8546c <_dtoa_r+0x15f4>
   843f8:	800d883a 	mov	r6,r16
   843fc:	880f883a 	mov	r7,r17
   84400:	0009883a 	mov	r4,zero
   84404:	014ffc34 	movhi	r5,16368
   84408:	008cef40 	call	8cef4 <__subdf3>
   8440c:	d9401217 	ldw	r5,72(sp)
   84410:	100d883a 	mov	r6,r2
   84414:	180f883a 	mov	r7,r3
   84418:	a809883a 	mov	r4,r21
   8441c:	008c4b80 	call	8c4b8 <__gedf2>
   84420:	db001617 	ldw	r12,88(sp)
   84424:	00840e16 	blt	zero,r2,85460 <_dtoa_r+0x15e8>
   84428:	00800044 	movi	r2,1
   8442c:	13006b0e 	bge	r2,r12,845dc <_dtoa_r+0x764>
   84430:	d9000717 	ldw	r4,28(sp)
   84434:	dd800f15 	stw	r22,60(sp)
   84438:	dcc01015 	stw	r19,64(sp)
   8443c:	2319883a 	add	r12,r4,r12
   84440:	dcc01217 	ldw	r19,72(sp)
   84444:	602d883a 	mov	r22,r12
   84448:	dc801215 	stw	r18,72(sp)
   8444c:	b825883a 	mov	r18,r23
   84450:	00000906 	br	84478 <_dtoa_r+0x600>
   84454:	008cef40 	call	8cef4 <__subdf3>
   84458:	a80d883a 	mov	r6,r21
   8445c:	980f883a 	mov	r7,r19
   84460:	1009883a 	mov	r4,r2
   84464:	180b883a 	mov	r5,r3
   84468:	008c5940 	call	8c594 <__ledf2>
   8446c:	1003e816 	blt	r2,zero,85410 <_dtoa_r+0x1598>
   84470:	b825883a 	mov	r18,r23
   84474:	bd83e926 	beq	r23,r22,8541c <_dtoa_r+0x15a4>
   84478:	a809883a 	mov	r4,r21
   8447c:	980b883a 	mov	r5,r19
   84480:	000d883a 	mov	r6,zero
   84484:	01d00934 	movhi	r7,16420
   84488:	008c6880 	call	8c688 <__muldf3>
   8448c:	000d883a 	mov	r6,zero
   84490:	01d00934 	movhi	r7,16420
   84494:	8009883a 	mov	r4,r16
   84498:	880b883a 	mov	r5,r17
   8449c:	102b883a 	mov	r21,r2
   844a0:	1827883a 	mov	r19,r3
   844a4:	008c6880 	call	8c688 <__muldf3>
   844a8:	180b883a 	mov	r5,r3
   844ac:	1009883a 	mov	r4,r2
   844b0:	1821883a 	mov	r16,r3
   844b4:	1023883a 	mov	r17,r2
   844b8:	008d7f00 	call	8d7f0 <__fixdfsi>
   844bc:	1009883a 	mov	r4,r2
   844c0:	1029883a 	mov	r20,r2
   844c4:	008d8700 	call	8d870 <__floatsidf>
   844c8:	8809883a 	mov	r4,r17
   844cc:	800b883a 	mov	r5,r16
   844d0:	100d883a 	mov	r6,r2
   844d4:	180f883a 	mov	r7,r3
   844d8:	008cef40 	call	8cef4 <__subdf3>
   844dc:	a5000c04 	addi	r20,r20,48
   844e0:	a80d883a 	mov	r6,r21
   844e4:	980f883a 	mov	r7,r19
   844e8:	1009883a 	mov	r4,r2
   844ec:	180b883a 	mov	r5,r3
   844f0:	95000005 	stb	r20,0(r18)
   844f4:	1021883a 	mov	r16,r2
   844f8:	1823883a 	mov	r17,r3
   844fc:	008c5940 	call	8c594 <__ledf2>
   84500:	bdc00044 	addi	r23,r23,1
   84504:	800d883a 	mov	r6,r16
   84508:	880f883a 	mov	r7,r17
   8450c:	0009883a 	mov	r4,zero
   84510:	014ffc34 	movhi	r5,16368
   84514:	103fcf0e 	bge	r2,zero,84454 <__alt_data_end+0xfffc5c54>
   84518:	d8c01317 	ldw	r3,76(sp)
   8451c:	d8c00515 	stw	r3,20(sp)
   84520:	d9400917 	ldw	r5,36(sp)
   84524:	e009883a 	mov	r4,fp
   84528:	00867a80 	call	867a8 <_Bfree>
   8452c:	d9000517 	ldw	r4,20(sp)
   84530:	d9802317 	ldw	r6,140(sp)
   84534:	d9c02517 	ldw	r7,148(sp)
   84538:	b8000005 	stb	zero,0(r23)
   8453c:	20800044 	addi	r2,r4,1
   84540:	30800015 	stw	r2,0(r6)
   84544:	3802aa26 	beq	r7,zero,84ff0 <_dtoa_r+0x1178>
   84548:	3dc00015 	stw	r23,0(r7)
   8454c:	d8800717 	ldw	r2,28(sp)
   84550:	003e7906 	br	83f38 <__alt_data_end+0xfffc5738>
   84554:	00800434 	movhi	r2,16
   84558:	10bfffc4 	addi	r2,r2,-1
   8455c:	88a2703a 	and	r17,r17,r2
   84560:	883e851e 	bne	r17,zero,83f78 <__alt_data_end+0xfffc5778>
   84564:	008002b4 	movhi	r2,10
   84568:	10a0de04 	addi	r2,r2,-31880
   8456c:	003e8406 	br	83f80 <__alt_data_end+0xfffc5780>
   84570:	10c00204 	addi	r3,r2,8
   84574:	003e8706 	br	83f94 <__alt_data_end+0xfffc5794>
   84578:	01400434 	movhi	r5,16
   8457c:	297fffc4 	addi	r5,r5,-1
   84580:	994a703a 	and	r5,r19,r5
   84584:	9009883a 	mov	r4,r18
   84588:	843f0044 	addi	r16,r16,-1023
   8458c:	294ffc34 	orhi	r5,r5,16368
   84590:	dd800217 	ldw	r22,8(sp)
   84594:	d8001115 	stw	zero,68(sp)
   84598:	003ea506 	br	84030 <__alt_data_end+0xfffc5830>
   8459c:	008002b4 	movhi	r2,10
   845a0:	10a0d504 	addi	r2,r2,-31916
   845a4:	003e6406 	br	83f38 <__alt_data_end+0xfffc5738>
   845a8:	e0001115 	stw	zero,68(fp)
   845ac:	000b883a 	mov	r5,zero
   845b0:	e009883a 	mov	r4,fp
   845b4:	00867000 	call	86700 <_Balloc>
   845b8:	01bfffc4 	movi	r6,-1
   845bc:	01c00044 	movi	r7,1
   845c0:	d8800715 	stw	r2,28(sp)
   845c4:	d9800c15 	stw	r6,48(sp)
   845c8:	e0801015 	stw	r2,64(fp)
   845cc:	d8000315 	stw	zero,12(sp)
   845d0:	d9c00b15 	stw	r7,44(sp)
   845d4:	d9800615 	stw	r6,24(sp)
   845d8:	d8002215 	stw	zero,136(sp)
   845dc:	d8800117 	ldw	r2,4(sp)
   845e0:	10008916 	blt	r2,zero,84808 <_dtoa_r+0x990>
   845e4:	d9000517 	ldw	r4,20(sp)
   845e8:	00c00384 	movi	r3,14
   845ec:	19008616 	blt	r3,r4,84808 <_dtoa_r+0x990>
   845f0:	200490fa 	slli	r2,r4,3
   845f4:	00c002b4 	movhi	r3,10
   845f8:	d9802217 	ldw	r6,136(sp)
   845fc:	18e0fd04 	addi	r3,r3,-31756
   84600:	1885883a 	add	r2,r3,r2
   84604:	14000017 	ldw	r16,0(r2)
   84608:	14400117 	ldw	r17,4(r2)
   8460c:	30016316 	blt	r6,zero,84b9c <_dtoa_r+0xd24>
   84610:	800d883a 	mov	r6,r16
   84614:	880f883a 	mov	r7,r17
   84618:	9009883a 	mov	r4,r18
   8461c:	980b883a 	mov	r5,r19
   84620:	008ba600 	call	8ba60 <__divdf3>
   84624:	180b883a 	mov	r5,r3
   84628:	1009883a 	mov	r4,r2
   8462c:	008d7f00 	call	8d7f0 <__fixdfsi>
   84630:	1009883a 	mov	r4,r2
   84634:	102b883a 	mov	r21,r2
   84638:	008d8700 	call	8d870 <__floatsidf>
   8463c:	800d883a 	mov	r6,r16
   84640:	880f883a 	mov	r7,r17
   84644:	1009883a 	mov	r4,r2
   84648:	180b883a 	mov	r5,r3
   8464c:	008c6880 	call	8c688 <__muldf3>
   84650:	100d883a 	mov	r6,r2
   84654:	180f883a 	mov	r7,r3
   84658:	9009883a 	mov	r4,r18
   8465c:	980b883a 	mov	r5,r19
   84660:	008cef40 	call	8cef4 <__subdf3>
   84664:	d9c00717 	ldw	r7,28(sp)
   84668:	1009883a 	mov	r4,r2
   8466c:	a8800c04 	addi	r2,r21,48
   84670:	38800005 	stb	r2,0(r7)
   84674:	3dc00044 	addi	r23,r7,1
   84678:	d9c00617 	ldw	r7,24(sp)
   8467c:	01800044 	movi	r6,1
   84680:	180b883a 	mov	r5,r3
   84684:	2005883a 	mov	r2,r4
   84688:	39803826 	beq	r7,r6,8476c <_dtoa_r+0x8f4>
   8468c:	000d883a 	mov	r6,zero
   84690:	01d00934 	movhi	r7,16420
   84694:	008c6880 	call	8c688 <__muldf3>
   84698:	000d883a 	mov	r6,zero
   8469c:	000f883a 	mov	r7,zero
   846a0:	1009883a 	mov	r4,r2
   846a4:	180b883a 	mov	r5,r3
   846a8:	1025883a 	mov	r18,r2
   846ac:	1827883a 	mov	r19,r3
   846b0:	008c4300 	call	8c430 <__eqdf2>
   846b4:	103f9a26 	beq	r2,zero,84520 <__alt_data_end+0xfffc5d20>
   846b8:	d9c00617 	ldw	r7,24(sp)
   846bc:	d8c00717 	ldw	r3,28(sp)
   846c0:	b829883a 	mov	r20,r23
   846c4:	38bfffc4 	addi	r2,r7,-1
   846c8:	18ad883a 	add	r22,r3,r2
   846cc:	00000a06 	br	846f8 <_dtoa_r+0x880>
   846d0:	008c6880 	call	8c688 <__muldf3>
   846d4:	000d883a 	mov	r6,zero
   846d8:	000f883a 	mov	r7,zero
   846dc:	1009883a 	mov	r4,r2
   846e0:	180b883a 	mov	r5,r3
   846e4:	1025883a 	mov	r18,r2
   846e8:	1827883a 	mov	r19,r3
   846ec:	b829883a 	mov	r20,r23
   846f0:	008c4300 	call	8c430 <__eqdf2>
   846f4:	103f8a26 	beq	r2,zero,84520 <__alt_data_end+0xfffc5d20>
   846f8:	800d883a 	mov	r6,r16
   846fc:	880f883a 	mov	r7,r17
   84700:	9009883a 	mov	r4,r18
   84704:	980b883a 	mov	r5,r19
   84708:	008ba600 	call	8ba60 <__divdf3>
   8470c:	180b883a 	mov	r5,r3
   84710:	1009883a 	mov	r4,r2
   84714:	008d7f00 	call	8d7f0 <__fixdfsi>
   84718:	1009883a 	mov	r4,r2
   8471c:	102b883a 	mov	r21,r2
   84720:	008d8700 	call	8d870 <__floatsidf>
   84724:	800d883a 	mov	r6,r16
   84728:	880f883a 	mov	r7,r17
   8472c:	1009883a 	mov	r4,r2
   84730:	180b883a 	mov	r5,r3
   84734:	008c6880 	call	8c688 <__muldf3>
   84738:	100d883a 	mov	r6,r2
   8473c:	180f883a 	mov	r7,r3
   84740:	9009883a 	mov	r4,r18
   84744:	980b883a 	mov	r5,r19
   84748:	008cef40 	call	8cef4 <__subdf3>
   8474c:	aa000c04 	addi	r8,r21,48
   84750:	a2000005 	stb	r8,0(r20)
   84754:	000d883a 	mov	r6,zero
   84758:	01d00934 	movhi	r7,16420
   8475c:	1009883a 	mov	r4,r2
   84760:	180b883a 	mov	r5,r3
   84764:	a5c00044 	addi	r23,r20,1
   84768:	b53fd91e 	bne	r22,r20,846d0 <__alt_data_end+0xfffc5ed0>
   8476c:	100d883a 	mov	r6,r2
   84770:	180f883a 	mov	r7,r3
   84774:	1009883a 	mov	r4,r2
   84778:	180b883a 	mov	r5,r3
   8477c:	008b1b40 	call	8b1b4 <__adddf3>
   84780:	100d883a 	mov	r6,r2
   84784:	180f883a 	mov	r7,r3
   84788:	8009883a 	mov	r4,r16
   8478c:	880b883a 	mov	r5,r17
   84790:	1027883a 	mov	r19,r2
   84794:	1825883a 	mov	r18,r3
   84798:	008c5940 	call	8c594 <__ledf2>
   8479c:	10000816 	blt	r2,zero,847c0 <_dtoa_r+0x948>
   847a0:	980d883a 	mov	r6,r19
   847a4:	900f883a 	mov	r7,r18
   847a8:	8009883a 	mov	r4,r16
   847ac:	880b883a 	mov	r5,r17
   847b0:	008c4300 	call	8c430 <__eqdf2>
   847b4:	103f5a1e 	bne	r2,zero,84520 <__alt_data_end+0xfffc5d20>
   847b8:	ad40004c 	andi	r21,r21,1
   847bc:	a83f5826 	beq	r21,zero,84520 <__alt_data_end+0xfffc5d20>
   847c0:	bd3fffc3 	ldbu	r20,-1(r23)
   847c4:	b8bfffc4 	addi	r2,r23,-1
   847c8:	1007883a 	mov	r3,r2
   847cc:	01400e44 	movi	r5,57
   847d0:	d9800717 	ldw	r6,28(sp)
   847d4:	00000506 	br	847ec <_dtoa_r+0x974>
   847d8:	18ffffc4 	addi	r3,r3,-1
   847dc:	11824726 	beq	r2,r6,850fc <_dtoa_r+0x1284>
   847e0:	1d000003 	ldbu	r20,0(r3)
   847e4:	102f883a 	mov	r23,r2
   847e8:	10bfffc4 	addi	r2,r2,-1
   847ec:	a1003fcc 	andi	r4,r20,255
   847f0:	2100201c 	xori	r4,r4,128
   847f4:	213fe004 	addi	r4,r4,-128
   847f8:	217ff726 	beq	r4,r5,847d8 <__alt_data_end+0xfffc5fd8>
   847fc:	a2000044 	addi	r8,r20,1
   84800:	12000005 	stb	r8,0(r2)
   84804:	003f4606 	br	84520 <__alt_data_end+0xfffc5d20>
   84808:	d9000b17 	ldw	r4,44(sp)
   8480c:	2000c826 	beq	r4,zero,84b30 <_dtoa_r+0xcb8>
   84810:	d9800317 	ldw	r6,12(sp)
   84814:	00c00044 	movi	r3,1
   84818:	1980f90e 	bge	r3,r6,84c00 <_dtoa_r+0xd88>
   8481c:	d8800617 	ldw	r2,24(sp)
   84820:	d8c00a17 	ldw	r3,40(sp)
   84824:	157fffc4 	addi	r21,r2,-1
   84828:	1d41f316 	blt	r3,r21,84ff8 <_dtoa_r+0x1180>
   8482c:	1d6bc83a 	sub	r21,r3,r21
   84830:	d9c00617 	ldw	r7,24(sp)
   84834:	3802aa16 	blt	r7,zero,852e0 <_dtoa_r+0x1468>
   84838:	dd000817 	ldw	r20,32(sp)
   8483c:	d8800617 	ldw	r2,24(sp)
   84840:	d8c00817 	ldw	r3,32(sp)
   84844:	01400044 	movi	r5,1
   84848:	e009883a 	mov	r4,fp
   8484c:	1887883a 	add	r3,r3,r2
   84850:	d8c00815 	stw	r3,32(sp)
   84854:	b0ad883a 	add	r22,r22,r2
   84858:	0086b340 	call	86b34 <__i2b>
   8485c:	1023883a 	mov	r17,r2
   84860:	a0000826 	beq	r20,zero,84884 <_dtoa_r+0xa0c>
   84864:	0580070e 	bge	zero,r22,84884 <_dtoa_r+0xa0c>
   84868:	a005883a 	mov	r2,r20
   8486c:	b500b916 	blt	r22,r20,84b54 <_dtoa_r+0xcdc>
   84870:	d9000817 	ldw	r4,32(sp)
   84874:	a0a9c83a 	sub	r20,r20,r2
   84878:	b0adc83a 	sub	r22,r22,r2
   8487c:	2089c83a 	sub	r4,r4,r2
   84880:	d9000815 	stw	r4,32(sp)
   84884:	d9800a17 	ldw	r6,40(sp)
   84888:	0181810e 	bge	zero,r6,84e90 <_dtoa_r+0x1018>
   8488c:	d9c00b17 	ldw	r7,44(sp)
   84890:	3800b326 	beq	r7,zero,84b60 <_dtoa_r+0xce8>
   84894:	a800b226 	beq	r21,zero,84b60 <_dtoa_r+0xce8>
   84898:	880b883a 	mov	r5,r17
   8489c:	a80d883a 	mov	r6,r21
   848a0:	e009883a 	mov	r4,fp
   848a4:	0086dfc0 	call	86dfc <__pow5mult>
   848a8:	d9800917 	ldw	r6,36(sp)
   848ac:	100b883a 	mov	r5,r2
   848b0:	e009883a 	mov	r4,fp
   848b4:	1023883a 	mov	r17,r2
   848b8:	0086b700 	call	86b70 <__multiply>
   848bc:	1021883a 	mov	r16,r2
   848c0:	d8800a17 	ldw	r2,40(sp)
   848c4:	d9400917 	ldw	r5,36(sp)
   848c8:	e009883a 	mov	r4,fp
   848cc:	1545c83a 	sub	r2,r2,r21
   848d0:	d8800a15 	stw	r2,40(sp)
   848d4:	00867a80 	call	867a8 <_Bfree>
   848d8:	d8c00a17 	ldw	r3,40(sp)
   848dc:	18009f1e 	bne	r3,zero,84b5c <_dtoa_r+0xce4>
   848e0:	05c00044 	movi	r23,1
   848e4:	e009883a 	mov	r4,fp
   848e8:	b80b883a 	mov	r5,r23
   848ec:	0086b340 	call	86b34 <__i2b>
   848f0:	d9000d17 	ldw	r4,52(sp)
   848f4:	102b883a 	mov	r21,r2
   848f8:	2000ce26 	beq	r4,zero,84c34 <_dtoa_r+0xdbc>
   848fc:	200d883a 	mov	r6,r4
   84900:	100b883a 	mov	r5,r2
   84904:	e009883a 	mov	r4,fp
   84908:	0086dfc0 	call	86dfc <__pow5mult>
   8490c:	d9800317 	ldw	r6,12(sp)
   84910:	102b883a 	mov	r21,r2
   84914:	b981810e 	bge	r23,r6,84f1c <_dtoa_r+0x10a4>
   84918:	0027883a 	mov	r19,zero
   8491c:	a8800417 	ldw	r2,16(r21)
   84920:	05c00804 	movi	r23,32
   84924:	10800104 	addi	r2,r2,4
   84928:	1085883a 	add	r2,r2,r2
   8492c:	1085883a 	add	r2,r2,r2
   84930:	a885883a 	add	r2,r21,r2
   84934:	11000017 	ldw	r4,0(r2)
   84938:	0086a1c0 	call	86a1c <__hi0bits>
   8493c:	b885c83a 	sub	r2,r23,r2
   84940:	1585883a 	add	r2,r2,r22
   84944:	108007cc 	andi	r2,r2,31
   84948:	1000b326 	beq	r2,zero,84c18 <_dtoa_r+0xda0>
   8494c:	00c00804 	movi	r3,32
   84950:	1887c83a 	sub	r3,r3,r2
   84954:	01000104 	movi	r4,4
   84958:	20c2cd0e 	bge	r4,r3,85490 <_dtoa_r+0x1618>
   8495c:	00c00704 	movi	r3,28
   84960:	1885c83a 	sub	r2,r3,r2
   84964:	d8c00817 	ldw	r3,32(sp)
   84968:	a0a9883a 	add	r20,r20,r2
   8496c:	b0ad883a 	add	r22,r22,r2
   84970:	1887883a 	add	r3,r3,r2
   84974:	d8c00815 	stw	r3,32(sp)
   84978:	d9800817 	ldw	r6,32(sp)
   8497c:	0180040e 	bge	zero,r6,84990 <_dtoa_r+0xb18>
   84980:	800b883a 	mov	r5,r16
   84984:	e009883a 	mov	r4,fp
   84988:	0086f3c0 	call	86f3c <__lshift>
   8498c:	1021883a 	mov	r16,r2
   84990:	0580050e 	bge	zero,r22,849a8 <_dtoa_r+0xb30>
   84994:	a80b883a 	mov	r5,r21
   84998:	b00d883a 	mov	r6,r22
   8499c:	e009883a 	mov	r4,fp
   849a0:	0086f3c0 	call	86f3c <__lshift>
   849a4:	102b883a 	mov	r21,r2
   849a8:	d9c00e17 	ldw	r7,56(sp)
   849ac:	3801211e 	bne	r7,zero,84e34 <_dtoa_r+0xfbc>
   849b0:	d9800617 	ldw	r6,24(sp)
   849b4:	0181380e 	bge	zero,r6,84e98 <_dtoa_r+0x1020>
   849b8:	d8c00b17 	ldw	r3,44(sp)
   849bc:	1800ab1e 	bne	r3,zero,84c6c <_dtoa_r+0xdf4>
   849c0:	dc800717 	ldw	r18,28(sp)
   849c4:	dcc00617 	ldw	r19,24(sp)
   849c8:	9029883a 	mov	r20,r18
   849cc:	00000206 	br	849d8 <_dtoa_r+0xb60>
   849d0:	00867d00 	call	867d0 <__multadd>
   849d4:	1021883a 	mov	r16,r2
   849d8:	a80b883a 	mov	r5,r21
   849dc:	8009883a 	mov	r4,r16
   849e0:	0083c500 	call	83c50 <quorem>
   849e4:	10800c04 	addi	r2,r2,48
   849e8:	90800005 	stb	r2,0(r18)
   849ec:	94800044 	addi	r18,r18,1
   849f0:	9507c83a 	sub	r3,r18,r20
   849f4:	000f883a 	mov	r7,zero
   849f8:	01800284 	movi	r6,10
   849fc:	800b883a 	mov	r5,r16
   84a00:	e009883a 	mov	r4,fp
   84a04:	1cfff216 	blt	r3,r19,849d0 <__alt_data_end+0xfffc61d0>
   84a08:	1011883a 	mov	r8,r2
   84a0c:	d8800617 	ldw	r2,24(sp)
   84a10:	0082370e 	bge	zero,r2,852f0 <_dtoa_r+0x1478>
   84a14:	d9000717 	ldw	r4,28(sp)
   84a18:	0025883a 	mov	r18,zero
   84a1c:	20af883a 	add	r23,r4,r2
   84a20:	01800044 	movi	r6,1
   84a24:	800b883a 	mov	r5,r16
   84a28:	e009883a 	mov	r4,fp
   84a2c:	da001715 	stw	r8,92(sp)
   84a30:	0086f3c0 	call	86f3c <__lshift>
   84a34:	a80b883a 	mov	r5,r21
   84a38:	1009883a 	mov	r4,r2
   84a3c:	d8800915 	stw	r2,36(sp)
   84a40:	00870840 	call	87084 <__mcmp>
   84a44:	da001717 	ldw	r8,92(sp)
   84a48:	0081800e 	bge	zero,r2,8504c <_dtoa_r+0x11d4>
   84a4c:	b93fffc3 	ldbu	r4,-1(r23)
   84a50:	b8bfffc4 	addi	r2,r23,-1
   84a54:	1007883a 	mov	r3,r2
   84a58:	01800e44 	movi	r6,57
   84a5c:	d9c00717 	ldw	r7,28(sp)
   84a60:	00000506 	br	84a78 <_dtoa_r+0xc00>
   84a64:	18ffffc4 	addi	r3,r3,-1
   84a68:	11c12326 	beq	r2,r7,84ef8 <_dtoa_r+0x1080>
   84a6c:	19000003 	ldbu	r4,0(r3)
   84a70:	102f883a 	mov	r23,r2
   84a74:	10bfffc4 	addi	r2,r2,-1
   84a78:	21403fcc 	andi	r5,r4,255
   84a7c:	2940201c 	xori	r5,r5,128
   84a80:	297fe004 	addi	r5,r5,-128
   84a84:	29bff726 	beq	r5,r6,84a64 <__alt_data_end+0xfffc6264>
   84a88:	21000044 	addi	r4,r4,1
   84a8c:	11000005 	stb	r4,0(r2)
   84a90:	a80b883a 	mov	r5,r21
   84a94:	e009883a 	mov	r4,fp
   84a98:	00867a80 	call	867a8 <_Bfree>
   84a9c:	883ea026 	beq	r17,zero,84520 <__alt_data_end+0xfffc5d20>
   84aa0:	90000426 	beq	r18,zero,84ab4 <_dtoa_r+0xc3c>
   84aa4:	94400326 	beq	r18,r17,84ab4 <_dtoa_r+0xc3c>
   84aa8:	900b883a 	mov	r5,r18
   84aac:	e009883a 	mov	r4,fp
   84ab0:	00867a80 	call	867a8 <_Bfree>
   84ab4:	880b883a 	mov	r5,r17
   84ab8:	e009883a 	mov	r4,fp
   84abc:	00867a80 	call	867a8 <_Bfree>
   84ac0:	003e9706 	br	84520 <__alt_data_end+0xfffc5d20>
   84ac4:	01800044 	movi	r6,1
   84ac8:	d9800e15 	stw	r6,56(sp)
   84acc:	003d9606 	br	84128 <__alt_data_end+0xfffc5928>
   84ad0:	d8800817 	ldw	r2,32(sp)
   84ad4:	d8c00517 	ldw	r3,20(sp)
   84ad8:	d8000d15 	stw	zero,52(sp)
   84adc:	10c5c83a 	sub	r2,r2,r3
   84ae0:	00c9c83a 	sub	r4,zero,r3
   84ae4:	d8800815 	stw	r2,32(sp)
   84ae8:	d9000a15 	stw	r4,40(sp)
   84aec:	003d9706 	br	8414c <__alt_data_end+0xfffc594c>
   84af0:	05adc83a 	sub	r22,zero,r22
   84af4:	dd800815 	stw	r22,32(sp)
   84af8:	002d883a 	mov	r22,zero
   84afc:	003d8e06 	br	84138 <__alt_data_end+0xfffc5938>
   84b00:	d9000517 	ldw	r4,20(sp)
   84b04:	008d8700 	call	8d870 <__floatsidf>
   84b08:	100d883a 	mov	r6,r2
   84b0c:	180f883a 	mov	r7,r3
   84b10:	a009883a 	mov	r4,r20
   84b14:	880b883a 	mov	r5,r17
   84b18:	008c4300 	call	8c430 <__eqdf2>
   84b1c:	103d7126 	beq	r2,zero,840e4 <__alt_data_end+0xfffc58e4>
   84b20:	d9c00517 	ldw	r7,20(sp)
   84b24:	39ffffc4 	addi	r7,r7,-1
   84b28:	d9c00515 	stw	r7,20(sp)
   84b2c:	003d6d06 	br	840e4 <__alt_data_end+0xfffc58e4>
   84b30:	dd400a17 	ldw	r21,40(sp)
   84b34:	dd000817 	ldw	r20,32(sp)
   84b38:	0023883a 	mov	r17,zero
   84b3c:	003f4806 	br	84860 <__alt_data_end+0xfffc6060>
   84b40:	10e3c83a 	sub	r17,r2,r3
   84b44:	9448983a 	sll	r4,r18,r17
   84b48:	003d3206 	br	84014 <__alt_data_end+0xfffc5814>
   84b4c:	d8000e15 	stw	zero,56(sp)
   84b50:	003d7506 	br	84128 <__alt_data_end+0xfffc5928>
   84b54:	b005883a 	mov	r2,r22
   84b58:	003f4506 	br	84870 <__alt_data_end+0xfffc6070>
   84b5c:	dc000915 	stw	r16,36(sp)
   84b60:	d9800a17 	ldw	r6,40(sp)
   84b64:	d9400917 	ldw	r5,36(sp)
   84b68:	e009883a 	mov	r4,fp
   84b6c:	0086dfc0 	call	86dfc <__pow5mult>
   84b70:	1021883a 	mov	r16,r2
   84b74:	003f5a06 	br	848e0 <__alt_data_end+0xfffc60e0>
   84b78:	01c00044 	movi	r7,1
   84b7c:	d9c00b15 	stw	r7,44(sp)
   84b80:	d8802217 	ldw	r2,136(sp)
   84b84:	0081280e 	bge	zero,r2,85028 <_dtoa_r+0x11b0>
   84b88:	100d883a 	mov	r6,r2
   84b8c:	1021883a 	mov	r16,r2
   84b90:	d8800c15 	stw	r2,48(sp)
   84b94:	d8800615 	stw	r2,24(sp)
   84b98:	003d8806 	br	841bc <__alt_data_end+0xfffc59bc>
   84b9c:	d8800617 	ldw	r2,24(sp)
   84ba0:	00be9b16 	blt	zero,r2,84610 <__alt_data_end+0xfffc5e10>
   84ba4:	10010f1e 	bne	r2,zero,84fe4 <_dtoa_r+0x116c>
   84ba8:	880b883a 	mov	r5,r17
   84bac:	000d883a 	mov	r6,zero
   84bb0:	01d00534 	movhi	r7,16404
   84bb4:	8009883a 	mov	r4,r16
   84bb8:	008c6880 	call	8c688 <__muldf3>
   84bbc:	900d883a 	mov	r6,r18
   84bc0:	980f883a 	mov	r7,r19
   84bc4:	1009883a 	mov	r4,r2
   84bc8:	180b883a 	mov	r5,r3
   84bcc:	008c4b80 	call	8c4b8 <__gedf2>
   84bd0:	002b883a 	mov	r21,zero
   84bd4:	0023883a 	mov	r17,zero
   84bd8:	1000bf16 	blt	r2,zero,84ed8 <_dtoa_r+0x1060>
   84bdc:	d9802217 	ldw	r6,136(sp)
   84be0:	ddc00717 	ldw	r23,28(sp)
   84be4:	018c303a 	nor	r6,zero,r6
   84be8:	d9800515 	stw	r6,20(sp)
   84bec:	a80b883a 	mov	r5,r21
   84bf0:	e009883a 	mov	r4,fp
   84bf4:	00867a80 	call	867a8 <_Bfree>
   84bf8:	883e4926 	beq	r17,zero,84520 <__alt_data_end+0xfffc5d20>
   84bfc:	003fad06 	br	84ab4 <__alt_data_end+0xfffc62b4>
   84c00:	d9c01117 	ldw	r7,68(sp)
   84c04:	3801bc26 	beq	r7,zero,852f8 <_dtoa_r+0x1480>
   84c08:	10810cc4 	addi	r2,r2,1075
   84c0c:	dd400a17 	ldw	r21,40(sp)
   84c10:	dd000817 	ldw	r20,32(sp)
   84c14:	003f0a06 	br	84840 <__alt_data_end+0xfffc6040>
   84c18:	00800704 	movi	r2,28
   84c1c:	d9000817 	ldw	r4,32(sp)
   84c20:	a0a9883a 	add	r20,r20,r2
   84c24:	b0ad883a 	add	r22,r22,r2
   84c28:	2089883a 	add	r4,r4,r2
   84c2c:	d9000815 	stw	r4,32(sp)
   84c30:	003f5106 	br	84978 <__alt_data_end+0xfffc6178>
   84c34:	d8c00317 	ldw	r3,12(sp)
   84c38:	b8c1fc0e 	bge	r23,r3,8542c <_dtoa_r+0x15b4>
   84c3c:	0027883a 	mov	r19,zero
   84c40:	b805883a 	mov	r2,r23
   84c44:	003f3e06 	br	84940 <__alt_data_end+0xfffc6140>
   84c48:	880b883a 	mov	r5,r17
   84c4c:	e009883a 	mov	r4,fp
   84c50:	000f883a 	mov	r7,zero
   84c54:	01800284 	movi	r6,10
   84c58:	00867d00 	call	867d0 <__multadd>
   84c5c:	d9000c17 	ldw	r4,48(sp)
   84c60:	1023883a 	mov	r17,r2
   84c64:	0102040e 	bge	zero,r4,85478 <_dtoa_r+0x1600>
   84c68:	d9000615 	stw	r4,24(sp)
   84c6c:	0500050e 	bge	zero,r20,84c84 <_dtoa_r+0xe0c>
   84c70:	880b883a 	mov	r5,r17
   84c74:	a00d883a 	mov	r6,r20
   84c78:	e009883a 	mov	r4,fp
   84c7c:	0086f3c0 	call	86f3c <__lshift>
   84c80:	1023883a 	mov	r17,r2
   84c84:	9801241e 	bne	r19,zero,85118 <_dtoa_r+0x12a0>
   84c88:	8829883a 	mov	r20,r17
   84c8c:	d9000617 	ldw	r4,24(sp)
   84c90:	dcc00717 	ldw	r19,28(sp)
   84c94:	9480004c 	andi	r18,r18,1
   84c98:	20bfffc4 	addi	r2,r4,-1
   84c9c:	9885883a 	add	r2,r19,r2
   84ca0:	d8800415 	stw	r2,16(sp)
   84ca4:	dc800615 	stw	r18,24(sp)
   84ca8:	a80b883a 	mov	r5,r21
   84cac:	8009883a 	mov	r4,r16
   84cb0:	0083c500 	call	83c50 <quorem>
   84cb4:	880b883a 	mov	r5,r17
   84cb8:	8009883a 	mov	r4,r16
   84cbc:	102f883a 	mov	r23,r2
   84cc0:	00870840 	call	87084 <__mcmp>
   84cc4:	a80b883a 	mov	r5,r21
   84cc8:	a00d883a 	mov	r6,r20
   84ccc:	e009883a 	mov	r4,fp
   84cd0:	102d883a 	mov	r22,r2
   84cd4:	00870e40 	call	870e4 <__mdiff>
   84cd8:	1007883a 	mov	r3,r2
   84cdc:	10800317 	ldw	r2,12(r2)
   84ce0:	bc800c04 	addi	r18,r23,48
   84ce4:	180b883a 	mov	r5,r3
   84ce8:	10004e1e 	bne	r2,zero,84e24 <_dtoa_r+0xfac>
   84cec:	8009883a 	mov	r4,r16
   84cf0:	d8c01615 	stw	r3,88(sp)
   84cf4:	00870840 	call	87084 <__mcmp>
   84cf8:	d8c01617 	ldw	r3,88(sp)
   84cfc:	e009883a 	mov	r4,fp
   84d00:	d8801615 	stw	r2,88(sp)
   84d04:	180b883a 	mov	r5,r3
   84d08:	00867a80 	call	867a8 <_Bfree>
   84d0c:	d8801617 	ldw	r2,88(sp)
   84d10:	1000041e 	bne	r2,zero,84d24 <_dtoa_r+0xeac>
   84d14:	d9800317 	ldw	r6,12(sp)
   84d18:	3000021e 	bne	r6,zero,84d24 <_dtoa_r+0xeac>
   84d1c:	d8c00617 	ldw	r3,24(sp)
   84d20:	18003726 	beq	r3,zero,84e00 <_dtoa_r+0xf88>
   84d24:	b0002016 	blt	r22,zero,84da8 <_dtoa_r+0xf30>
   84d28:	b000041e 	bne	r22,zero,84d3c <_dtoa_r+0xec4>
   84d2c:	d9000317 	ldw	r4,12(sp)
   84d30:	2000021e 	bne	r4,zero,84d3c <_dtoa_r+0xec4>
   84d34:	d8c00617 	ldw	r3,24(sp)
   84d38:	18001b26 	beq	r3,zero,84da8 <_dtoa_r+0xf30>
   84d3c:	00810716 	blt	zero,r2,8515c <_dtoa_r+0x12e4>
   84d40:	d8c00417 	ldw	r3,16(sp)
   84d44:	9d800044 	addi	r22,r19,1
   84d48:	9c800005 	stb	r18,0(r19)
   84d4c:	b02f883a 	mov	r23,r22
   84d50:	98c10626 	beq	r19,r3,8516c <_dtoa_r+0x12f4>
   84d54:	800b883a 	mov	r5,r16
   84d58:	000f883a 	mov	r7,zero
   84d5c:	01800284 	movi	r6,10
   84d60:	e009883a 	mov	r4,fp
   84d64:	00867d00 	call	867d0 <__multadd>
   84d68:	1021883a 	mov	r16,r2
   84d6c:	000f883a 	mov	r7,zero
   84d70:	01800284 	movi	r6,10
   84d74:	880b883a 	mov	r5,r17
   84d78:	e009883a 	mov	r4,fp
   84d7c:	8d002526 	beq	r17,r20,84e14 <_dtoa_r+0xf9c>
   84d80:	00867d00 	call	867d0 <__multadd>
   84d84:	a00b883a 	mov	r5,r20
   84d88:	000f883a 	mov	r7,zero
   84d8c:	01800284 	movi	r6,10
   84d90:	e009883a 	mov	r4,fp
   84d94:	1023883a 	mov	r17,r2
   84d98:	00867d00 	call	867d0 <__multadd>
   84d9c:	1029883a 	mov	r20,r2
   84da0:	b027883a 	mov	r19,r22
   84da4:	003fc006 	br	84ca8 <__alt_data_end+0xfffc64a8>
   84da8:	9011883a 	mov	r8,r18
   84dac:	00800e0e 	bge	zero,r2,84de8 <_dtoa_r+0xf70>
   84db0:	800b883a 	mov	r5,r16
   84db4:	01800044 	movi	r6,1
   84db8:	e009883a 	mov	r4,fp
   84dbc:	da001715 	stw	r8,92(sp)
   84dc0:	0086f3c0 	call	86f3c <__lshift>
   84dc4:	a80b883a 	mov	r5,r21
   84dc8:	1009883a 	mov	r4,r2
   84dcc:	1021883a 	mov	r16,r2
   84dd0:	00870840 	call	87084 <__mcmp>
   84dd4:	da001717 	ldw	r8,92(sp)
   84dd8:	0081960e 	bge	zero,r2,85434 <_dtoa_r+0x15bc>
   84ddc:	00800e44 	movi	r2,57
   84de0:	40817026 	beq	r8,r2,853a4 <_dtoa_r+0x152c>
   84de4:	ba000c44 	addi	r8,r23,49
   84de8:	8825883a 	mov	r18,r17
   84dec:	9dc00044 	addi	r23,r19,1
   84df0:	9a000005 	stb	r8,0(r19)
   84df4:	a023883a 	mov	r17,r20
   84df8:	dc000915 	stw	r16,36(sp)
   84dfc:	003f2406 	br	84a90 <__alt_data_end+0xfffc6290>
   84e00:	00800e44 	movi	r2,57
   84e04:	9011883a 	mov	r8,r18
   84e08:	90816626 	beq	r18,r2,853a4 <_dtoa_r+0x152c>
   84e0c:	05bff516 	blt	zero,r22,84de4 <__alt_data_end+0xfffc65e4>
   84e10:	003ff506 	br	84de8 <__alt_data_end+0xfffc65e8>
   84e14:	00867d00 	call	867d0 <__multadd>
   84e18:	1023883a 	mov	r17,r2
   84e1c:	1029883a 	mov	r20,r2
   84e20:	003fdf06 	br	84da0 <__alt_data_end+0xfffc65a0>
   84e24:	e009883a 	mov	r4,fp
   84e28:	00867a80 	call	867a8 <_Bfree>
   84e2c:	00800044 	movi	r2,1
   84e30:	003fbc06 	br	84d24 <__alt_data_end+0xfffc6524>
   84e34:	a80b883a 	mov	r5,r21
   84e38:	8009883a 	mov	r4,r16
   84e3c:	00870840 	call	87084 <__mcmp>
   84e40:	103edb0e 	bge	r2,zero,849b0 <__alt_data_end+0xfffc61b0>
   84e44:	800b883a 	mov	r5,r16
   84e48:	000f883a 	mov	r7,zero
   84e4c:	01800284 	movi	r6,10
   84e50:	e009883a 	mov	r4,fp
   84e54:	00867d00 	call	867d0 <__multadd>
   84e58:	1021883a 	mov	r16,r2
   84e5c:	d8800517 	ldw	r2,20(sp)
   84e60:	d8c00b17 	ldw	r3,44(sp)
   84e64:	10bfffc4 	addi	r2,r2,-1
   84e68:	d8800515 	stw	r2,20(sp)
   84e6c:	183f761e 	bne	r3,zero,84c48 <__alt_data_end+0xfffc6448>
   84e70:	d9000c17 	ldw	r4,48(sp)
   84e74:	0101730e 	bge	zero,r4,85444 <_dtoa_r+0x15cc>
   84e78:	d9000615 	stw	r4,24(sp)
   84e7c:	003ed006 	br	849c0 <__alt_data_end+0xfffc61c0>
   84e80:	00800084 	movi	r2,2
   84e84:	3081861e 	bne	r6,r2,854a0 <_dtoa_r+0x1628>
   84e88:	d8000b15 	stw	zero,44(sp)
   84e8c:	003f3c06 	br	84b80 <__alt_data_end+0xfffc6380>
   84e90:	dc000917 	ldw	r16,36(sp)
   84e94:	003e9206 	br	848e0 <__alt_data_end+0xfffc60e0>
   84e98:	d9c00317 	ldw	r7,12(sp)
   84e9c:	00800084 	movi	r2,2
   84ea0:	11fec50e 	bge	r2,r7,849b8 <__alt_data_end+0xfffc61b8>
   84ea4:	d9000617 	ldw	r4,24(sp)
   84ea8:	20013c1e 	bne	r4,zero,8539c <_dtoa_r+0x1524>
   84eac:	a80b883a 	mov	r5,r21
   84eb0:	000f883a 	mov	r7,zero
   84eb4:	01800144 	movi	r6,5
   84eb8:	e009883a 	mov	r4,fp
   84ebc:	00867d00 	call	867d0 <__multadd>
   84ec0:	100b883a 	mov	r5,r2
   84ec4:	8009883a 	mov	r4,r16
   84ec8:	102b883a 	mov	r21,r2
   84ecc:	00870840 	call	87084 <__mcmp>
   84ed0:	dc000915 	stw	r16,36(sp)
   84ed4:	00bf410e 	bge	zero,r2,84bdc <__alt_data_end+0xfffc63dc>
   84ed8:	d9c00717 	ldw	r7,28(sp)
   84edc:	00800c44 	movi	r2,49
   84ee0:	38800005 	stb	r2,0(r7)
   84ee4:	d8800517 	ldw	r2,20(sp)
   84ee8:	3dc00044 	addi	r23,r7,1
   84eec:	10800044 	addi	r2,r2,1
   84ef0:	d8800515 	stw	r2,20(sp)
   84ef4:	003f3d06 	br	84bec <__alt_data_end+0xfffc63ec>
   84ef8:	d9800517 	ldw	r6,20(sp)
   84efc:	d9c00717 	ldw	r7,28(sp)
   84f00:	00800c44 	movi	r2,49
   84f04:	31800044 	addi	r6,r6,1
   84f08:	d9800515 	stw	r6,20(sp)
   84f0c:	38800005 	stb	r2,0(r7)
   84f10:	003edf06 	br	84a90 <__alt_data_end+0xfffc6290>
   84f14:	d8000b15 	stw	zero,44(sp)
   84f18:	003c9f06 	br	84198 <__alt_data_end+0xfffc5998>
   84f1c:	903e7e1e 	bne	r18,zero,84918 <__alt_data_end+0xfffc6118>
   84f20:	00800434 	movhi	r2,16
   84f24:	10bfffc4 	addi	r2,r2,-1
   84f28:	9884703a 	and	r2,r19,r2
   84f2c:	1000ea1e 	bne	r2,zero,852d8 <_dtoa_r+0x1460>
   84f30:	9cdffc2c 	andhi	r19,r19,32752
   84f34:	9800e826 	beq	r19,zero,852d8 <_dtoa_r+0x1460>
   84f38:	d9c00817 	ldw	r7,32(sp)
   84f3c:	b5800044 	addi	r22,r22,1
   84f40:	04c00044 	movi	r19,1
   84f44:	39c00044 	addi	r7,r7,1
   84f48:	d9c00815 	stw	r7,32(sp)
   84f4c:	d8800d17 	ldw	r2,52(sp)
   84f50:	103e721e 	bne	r2,zero,8491c <__alt_data_end+0xfffc611c>
   84f54:	00800044 	movi	r2,1
   84f58:	003e7906 	br	84940 <__alt_data_end+0xfffc6140>
   84f5c:	8009883a 	mov	r4,r16
   84f60:	008d8700 	call	8d870 <__floatsidf>
   84f64:	d9800f17 	ldw	r6,60(sp)
   84f68:	d9c01017 	ldw	r7,64(sp)
   84f6c:	1009883a 	mov	r4,r2
   84f70:	180b883a 	mov	r5,r3
   84f74:	008c6880 	call	8c688 <__muldf3>
   84f78:	000d883a 	mov	r6,zero
   84f7c:	01d00734 	movhi	r7,16412
   84f80:	1009883a 	mov	r4,r2
   84f84:	180b883a 	mov	r5,r3
   84f88:	008b1b40 	call	8b1b4 <__adddf3>
   84f8c:	047f3034 	movhi	r17,64704
   84f90:	1021883a 	mov	r16,r2
   84f94:	1c63883a 	add	r17,r3,r17
   84f98:	d9000f17 	ldw	r4,60(sp)
   84f9c:	d9401017 	ldw	r5,64(sp)
   84fa0:	000d883a 	mov	r6,zero
   84fa4:	01d00534 	movhi	r7,16404
   84fa8:	008cef40 	call	8cef4 <__subdf3>
   84fac:	800d883a 	mov	r6,r16
   84fb0:	880f883a 	mov	r7,r17
   84fb4:	1009883a 	mov	r4,r2
   84fb8:	180b883a 	mov	r5,r3
   84fbc:	102b883a 	mov	r21,r2
   84fc0:	1829883a 	mov	r20,r3
   84fc4:	008c4b80 	call	8c4b8 <__gedf2>
   84fc8:	00806c16 	blt	zero,r2,8517c <_dtoa_r+0x1304>
   84fcc:	89e0003c 	xorhi	r7,r17,32768
   84fd0:	800d883a 	mov	r6,r16
   84fd4:	a809883a 	mov	r4,r21
   84fd8:	a00b883a 	mov	r5,r20
   84fdc:	008c5940 	call	8c594 <__ledf2>
   84fe0:	103d7e0e 	bge	r2,zero,845dc <__alt_data_end+0xfffc5ddc>
   84fe4:	002b883a 	mov	r21,zero
   84fe8:	0023883a 	mov	r17,zero
   84fec:	003efb06 	br	84bdc <__alt_data_end+0xfffc63dc>
   84ff0:	d8800717 	ldw	r2,28(sp)
   84ff4:	003bd006 	br	83f38 <__alt_data_end+0xfffc5738>
   84ff8:	d9000a17 	ldw	r4,40(sp)
   84ffc:	d9800d17 	ldw	r6,52(sp)
   85000:	dd400a15 	stw	r21,40(sp)
   85004:	a905c83a 	sub	r2,r21,r4
   85008:	308d883a 	add	r6,r6,r2
   8500c:	d9800d15 	stw	r6,52(sp)
   85010:	002b883a 	mov	r21,zero
   85014:	003e0606 	br	84830 <__alt_data_end+0xfffc6030>
   85018:	9023883a 	mov	r17,r18
   8501c:	9829883a 	mov	r20,r19
   85020:	04000084 	movi	r16,2
   85024:	003c9206 	br	84270 <__alt_data_end+0xfffc5a70>
   85028:	04000044 	movi	r16,1
   8502c:	dc000c15 	stw	r16,48(sp)
   85030:	dc000615 	stw	r16,24(sp)
   85034:	dc002215 	stw	r16,136(sp)
   85038:	e0001115 	stw	zero,68(fp)
   8503c:	000b883a 	mov	r5,zero
   85040:	003c6906 	br	841e8 <__alt_data_end+0xfffc59e8>
   85044:	3021883a 	mov	r16,r6
   85048:	003ffb06 	br	85038 <__alt_data_end+0xfffc6838>
   8504c:	1000021e 	bne	r2,zero,85058 <_dtoa_r+0x11e0>
   85050:	4200004c 	andi	r8,r8,1
   85054:	403e7d1e 	bne	r8,zero,84a4c <__alt_data_end+0xfffc624c>
   85058:	01000c04 	movi	r4,48
   8505c:	00000106 	br	85064 <_dtoa_r+0x11ec>
   85060:	102f883a 	mov	r23,r2
   85064:	b8bfffc4 	addi	r2,r23,-1
   85068:	10c00007 	ldb	r3,0(r2)
   8506c:	193ffc26 	beq	r3,r4,85060 <__alt_data_end+0xfffc6860>
   85070:	003e8706 	br	84a90 <__alt_data_end+0xfffc6290>
   85074:	d8800517 	ldw	r2,20(sp)
   85078:	00a3c83a 	sub	r17,zero,r2
   8507c:	8800a426 	beq	r17,zero,85310 <_dtoa_r+0x1498>
   85080:	888003cc 	andi	r2,r17,15
   85084:	100490fa 	slli	r2,r2,3
   85088:	00c002b4 	movhi	r3,10
   8508c:	18e0fd04 	addi	r3,r3,-31756
   85090:	1885883a 	add	r2,r3,r2
   85094:	11800017 	ldw	r6,0(r2)
   85098:	11c00117 	ldw	r7,4(r2)
   8509c:	9009883a 	mov	r4,r18
   850a0:	980b883a 	mov	r5,r19
   850a4:	8823d13a 	srai	r17,r17,4
   850a8:	008c6880 	call	8c688 <__muldf3>
   850ac:	d8800f15 	stw	r2,60(sp)
   850b0:	d8c01015 	stw	r3,64(sp)
   850b4:	8800e826 	beq	r17,zero,85458 <_dtoa_r+0x15e0>
   850b8:	050002b4 	movhi	r20,10
   850bc:	a520f304 	addi	r20,r20,-31796
   850c0:	04000084 	movi	r16,2
   850c4:	8980004c 	andi	r6,r17,1
   850c8:	1009883a 	mov	r4,r2
   850cc:	8823d07a 	srai	r17,r17,1
   850d0:	180b883a 	mov	r5,r3
   850d4:	30000426 	beq	r6,zero,850e8 <_dtoa_r+0x1270>
   850d8:	a1800017 	ldw	r6,0(r20)
   850dc:	a1c00117 	ldw	r7,4(r20)
   850e0:	84000044 	addi	r16,r16,1
   850e4:	008c6880 	call	8c688 <__muldf3>
   850e8:	a5000204 	addi	r20,r20,8
   850ec:	883ff51e 	bne	r17,zero,850c4 <__alt_data_end+0xfffc68c4>
   850f0:	d8800f15 	stw	r2,60(sp)
   850f4:	d8c01015 	stw	r3,64(sp)
   850f8:	003c7606 	br	842d4 <__alt_data_end+0xfffc5ad4>
   850fc:	00c00c04 	movi	r3,48
   85100:	10c00005 	stb	r3,0(r2)
   85104:	d8c00517 	ldw	r3,20(sp)
   85108:	bd3fffc3 	ldbu	r20,-1(r23)
   8510c:	18c00044 	addi	r3,r3,1
   85110:	d8c00515 	stw	r3,20(sp)
   85114:	003db906 	br	847fc <__alt_data_end+0xfffc5ffc>
   85118:	89400117 	ldw	r5,4(r17)
   8511c:	e009883a 	mov	r4,fp
   85120:	00867000 	call	86700 <_Balloc>
   85124:	89800417 	ldw	r6,16(r17)
   85128:	89400304 	addi	r5,r17,12
   8512c:	11000304 	addi	r4,r2,12
   85130:	31800084 	addi	r6,r6,2
   85134:	318d883a 	add	r6,r6,r6
   85138:	318d883a 	add	r6,r6,r6
   8513c:	1027883a 	mov	r19,r2
   85140:	00864900 	call	86490 <memcpy>
   85144:	01800044 	movi	r6,1
   85148:	980b883a 	mov	r5,r19
   8514c:	e009883a 	mov	r4,fp
   85150:	0086f3c0 	call	86f3c <__lshift>
   85154:	1029883a 	mov	r20,r2
   85158:	003ecc06 	br	84c8c <__alt_data_end+0xfffc648c>
   8515c:	00800e44 	movi	r2,57
   85160:	90809026 	beq	r18,r2,853a4 <_dtoa_r+0x152c>
   85164:	92000044 	addi	r8,r18,1
   85168:	003f1f06 	br	84de8 <__alt_data_end+0xfffc65e8>
   8516c:	9011883a 	mov	r8,r18
   85170:	8825883a 	mov	r18,r17
   85174:	a023883a 	mov	r17,r20
   85178:	003e2906 	br	84a20 <__alt_data_end+0xfffc6220>
   8517c:	002b883a 	mov	r21,zero
   85180:	0023883a 	mov	r17,zero
   85184:	003f5406 	br	84ed8 <__alt_data_end+0xfffc66d8>
   85188:	61bfffc4 	addi	r6,r12,-1
   8518c:	300490fa 	slli	r2,r6,3
   85190:	00c002b4 	movhi	r3,10
   85194:	18e0fd04 	addi	r3,r3,-31756
   85198:	1885883a 	add	r2,r3,r2
   8519c:	11000017 	ldw	r4,0(r2)
   851a0:	11400117 	ldw	r5,4(r2)
   851a4:	d8800717 	ldw	r2,28(sp)
   851a8:	880f883a 	mov	r7,r17
   851ac:	d9801215 	stw	r6,72(sp)
   851b0:	800d883a 	mov	r6,r16
   851b4:	db001615 	stw	r12,88(sp)
   851b8:	15c00044 	addi	r23,r2,1
   851bc:	008c6880 	call	8c688 <__muldf3>
   851c0:	d9401017 	ldw	r5,64(sp)
   851c4:	d9000f17 	ldw	r4,60(sp)
   851c8:	d8c01515 	stw	r3,84(sp)
   851cc:	d8801415 	stw	r2,80(sp)
   851d0:	008d7f00 	call	8d7f0 <__fixdfsi>
   851d4:	1009883a 	mov	r4,r2
   851d8:	1021883a 	mov	r16,r2
   851dc:	008d8700 	call	8d870 <__floatsidf>
   851e0:	d9000f17 	ldw	r4,60(sp)
   851e4:	d9401017 	ldw	r5,64(sp)
   851e8:	100d883a 	mov	r6,r2
   851ec:	180f883a 	mov	r7,r3
   851f0:	008cef40 	call	8cef4 <__subdf3>
   851f4:	1829883a 	mov	r20,r3
   851f8:	d8c00717 	ldw	r3,28(sp)
   851fc:	84000c04 	addi	r16,r16,48
   85200:	1023883a 	mov	r17,r2
   85204:	1c000005 	stb	r16,0(r3)
   85208:	db001617 	ldw	r12,88(sp)
   8520c:	00800044 	movi	r2,1
   85210:	60802226 	beq	r12,r2,8529c <_dtoa_r+0x1424>
   85214:	d9c00717 	ldw	r7,28(sp)
   85218:	8805883a 	mov	r2,r17
   8521c:	b82b883a 	mov	r21,r23
   85220:	3b19883a 	add	r12,r7,r12
   85224:	6023883a 	mov	r17,r12
   85228:	a007883a 	mov	r3,r20
   8522c:	dc800f15 	stw	r18,60(sp)
   85230:	000d883a 	mov	r6,zero
   85234:	01d00934 	movhi	r7,16420
   85238:	1009883a 	mov	r4,r2
   8523c:	180b883a 	mov	r5,r3
   85240:	008c6880 	call	8c688 <__muldf3>
   85244:	180b883a 	mov	r5,r3
   85248:	1009883a 	mov	r4,r2
   8524c:	1829883a 	mov	r20,r3
   85250:	1025883a 	mov	r18,r2
   85254:	008d7f00 	call	8d7f0 <__fixdfsi>
   85258:	1009883a 	mov	r4,r2
   8525c:	1021883a 	mov	r16,r2
   85260:	008d8700 	call	8d870 <__floatsidf>
   85264:	100d883a 	mov	r6,r2
   85268:	180f883a 	mov	r7,r3
   8526c:	9009883a 	mov	r4,r18
   85270:	a00b883a 	mov	r5,r20
   85274:	84000c04 	addi	r16,r16,48
   85278:	008cef40 	call	8cef4 <__subdf3>
   8527c:	ad400044 	addi	r21,r21,1
   85280:	ac3fffc5 	stb	r16,-1(r21)
   85284:	ac7fea1e 	bne	r21,r17,85230 <__alt_data_end+0xfffc6a30>
   85288:	1023883a 	mov	r17,r2
   8528c:	d8801217 	ldw	r2,72(sp)
   85290:	dc800f17 	ldw	r18,60(sp)
   85294:	1829883a 	mov	r20,r3
   85298:	b8af883a 	add	r23,r23,r2
   8529c:	d9001417 	ldw	r4,80(sp)
   852a0:	d9401517 	ldw	r5,84(sp)
   852a4:	000d883a 	mov	r6,zero
   852a8:	01cff834 	movhi	r7,16352
   852ac:	008b1b40 	call	8b1b4 <__adddf3>
   852b0:	880d883a 	mov	r6,r17
   852b4:	a00f883a 	mov	r7,r20
   852b8:	1009883a 	mov	r4,r2
   852bc:	180b883a 	mov	r5,r3
   852c0:	008c5940 	call	8c594 <__ledf2>
   852c4:	10003e0e 	bge	r2,zero,853c0 <_dtoa_r+0x1548>
   852c8:	d9001317 	ldw	r4,76(sp)
   852cc:	bd3fffc3 	ldbu	r20,-1(r23)
   852d0:	d9000515 	stw	r4,20(sp)
   852d4:	003d3b06 	br	847c4 <__alt_data_end+0xfffc5fc4>
   852d8:	0027883a 	mov	r19,zero
   852dc:	003f1b06 	br	84f4c <__alt_data_end+0xfffc674c>
   852e0:	d8800817 	ldw	r2,32(sp)
   852e4:	11e9c83a 	sub	r20,r2,r7
   852e8:	0005883a 	mov	r2,zero
   852ec:	003d5406 	br	84840 <__alt_data_end+0xfffc6040>
   852f0:	00800044 	movi	r2,1
   852f4:	003dc706 	br	84a14 <__alt_data_end+0xfffc6214>
   852f8:	d8c00217 	ldw	r3,8(sp)
   852fc:	00800d84 	movi	r2,54
   85300:	dd400a17 	ldw	r21,40(sp)
   85304:	10c5c83a 	sub	r2,r2,r3
   85308:	dd000817 	ldw	r20,32(sp)
   8530c:	003d4c06 	br	84840 <__alt_data_end+0xfffc6040>
   85310:	dc800f15 	stw	r18,60(sp)
   85314:	dcc01015 	stw	r19,64(sp)
   85318:	04000084 	movi	r16,2
   8531c:	003bed06 	br	842d4 <__alt_data_end+0xfffc5ad4>
   85320:	d9000617 	ldw	r4,24(sp)
   85324:	203f0d26 	beq	r4,zero,84f5c <__alt_data_end+0xfffc675c>
   85328:	d9800c17 	ldw	r6,48(sp)
   8532c:	01bcab0e 	bge	zero,r6,845dc <__alt_data_end+0xfffc5ddc>
   85330:	d9401017 	ldw	r5,64(sp)
   85334:	d9000f17 	ldw	r4,60(sp)
   85338:	000d883a 	mov	r6,zero
   8533c:	01d00934 	movhi	r7,16420
   85340:	008c6880 	call	8c688 <__muldf3>
   85344:	81000044 	addi	r4,r16,1
   85348:	d8800f15 	stw	r2,60(sp)
   8534c:	d8c01015 	stw	r3,64(sp)
   85350:	008d8700 	call	8d870 <__floatsidf>
   85354:	d9800f17 	ldw	r6,60(sp)
   85358:	d9c01017 	ldw	r7,64(sp)
   8535c:	1009883a 	mov	r4,r2
   85360:	180b883a 	mov	r5,r3
   85364:	008c6880 	call	8c688 <__muldf3>
   85368:	01d00734 	movhi	r7,16412
   8536c:	000d883a 	mov	r6,zero
   85370:	1009883a 	mov	r4,r2
   85374:	180b883a 	mov	r5,r3
   85378:	008b1b40 	call	8b1b4 <__adddf3>
   8537c:	d9c00517 	ldw	r7,20(sp)
   85380:	047f3034 	movhi	r17,64704
   85384:	1021883a 	mov	r16,r2
   85388:	39ffffc4 	addi	r7,r7,-1
   8538c:	d9c01315 	stw	r7,76(sp)
   85390:	1c63883a 	add	r17,r3,r17
   85394:	db000c17 	ldw	r12,48(sp)
   85398:	003bea06 	br	84344 <__alt_data_end+0xfffc5b44>
   8539c:	dc000915 	stw	r16,36(sp)
   853a0:	003e0e06 	br	84bdc <__alt_data_end+0xfffc63dc>
   853a4:	01000e44 	movi	r4,57
   853a8:	8825883a 	mov	r18,r17
   853ac:	9dc00044 	addi	r23,r19,1
   853b0:	99000005 	stb	r4,0(r19)
   853b4:	a023883a 	mov	r17,r20
   853b8:	dc000915 	stw	r16,36(sp)
   853bc:	003da406 	br	84a50 <__alt_data_end+0xfffc6250>
   853c0:	d9801417 	ldw	r6,80(sp)
   853c4:	d9c01517 	ldw	r7,84(sp)
   853c8:	0009883a 	mov	r4,zero
   853cc:	014ff834 	movhi	r5,16352
   853d0:	008cef40 	call	8cef4 <__subdf3>
   853d4:	880d883a 	mov	r6,r17
   853d8:	a00f883a 	mov	r7,r20
   853dc:	1009883a 	mov	r4,r2
   853e0:	180b883a 	mov	r5,r3
   853e4:	008c4b80 	call	8c4b8 <__gedf2>
   853e8:	00bc7c0e 	bge	zero,r2,845dc <__alt_data_end+0xfffc5ddc>
   853ec:	01000c04 	movi	r4,48
   853f0:	00000106 	br	853f8 <_dtoa_r+0x1580>
   853f4:	102f883a 	mov	r23,r2
   853f8:	b8bfffc4 	addi	r2,r23,-1
   853fc:	10c00007 	ldb	r3,0(r2)
   85400:	193ffc26 	beq	r3,r4,853f4 <__alt_data_end+0xfffc6bf4>
   85404:	d9801317 	ldw	r6,76(sp)
   85408:	d9800515 	stw	r6,20(sp)
   8540c:	003c4406 	br	84520 <__alt_data_end+0xfffc5d20>
   85410:	d9801317 	ldw	r6,76(sp)
   85414:	d9800515 	stw	r6,20(sp)
   85418:	003cea06 	br	847c4 <__alt_data_end+0xfffc5fc4>
   8541c:	dd800f17 	ldw	r22,60(sp)
   85420:	dcc01017 	ldw	r19,64(sp)
   85424:	dc801217 	ldw	r18,72(sp)
   85428:	003c6c06 	br	845dc <__alt_data_end+0xfffc5ddc>
   8542c:	903e031e 	bne	r18,zero,84c3c <__alt_data_end+0xfffc643c>
   85430:	003ebb06 	br	84f20 <__alt_data_end+0xfffc6720>
   85434:	103e6c1e 	bne	r2,zero,84de8 <__alt_data_end+0xfffc65e8>
   85438:	4080004c 	andi	r2,r8,1
   8543c:	103e6a26 	beq	r2,zero,84de8 <__alt_data_end+0xfffc65e8>
   85440:	003e6606 	br	84ddc <__alt_data_end+0xfffc65dc>
   85444:	d8c00317 	ldw	r3,12(sp)
   85448:	00800084 	movi	r2,2
   8544c:	10c02916 	blt	r2,r3,854f4 <_dtoa_r+0x167c>
   85450:	d9000c17 	ldw	r4,48(sp)
   85454:	003e8806 	br	84e78 <__alt_data_end+0xfffc6678>
   85458:	04000084 	movi	r16,2
   8545c:	003b9d06 	br	842d4 <__alt_data_end+0xfffc5ad4>
   85460:	d9001317 	ldw	r4,76(sp)
   85464:	d9000515 	stw	r4,20(sp)
   85468:	003cd606 	br	847c4 <__alt_data_end+0xfffc5fc4>
   8546c:	d8801317 	ldw	r2,76(sp)
   85470:	d8800515 	stw	r2,20(sp)
   85474:	003c2a06 	br	84520 <__alt_data_end+0xfffc5d20>
   85478:	d9800317 	ldw	r6,12(sp)
   8547c:	00800084 	movi	r2,2
   85480:	11801516 	blt	r2,r6,854d8 <_dtoa_r+0x1660>
   85484:	d9c00c17 	ldw	r7,48(sp)
   85488:	d9c00615 	stw	r7,24(sp)
   8548c:	003df706 	br	84c6c <__alt_data_end+0xfffc646c>
   85490:	193d3926 	beq	r3,r4,84978 <__alt_data_end+0xfffc6178>
   85494:	00c00f04 	movi	r3,60
   85498:	1885c83a 	sub	r2,r3,r2
   8549c:	003ddf06 	br	84c1c <__alt_data_end+0xfffc641c>
   854a0:	e009883a 	mov	r4,fp
   854a4:	e0001115 	stw	zero,68(fp)
   854a8:	000b883a 	mov	r5,zero
   854ac:	00867000 	call	86700 <_Balloc>
   854b0:	d8800715 	stw	r2,28(sp)
   854b4:	d8c00717 	ldw	r3,28(sp)
   854b8:	00bfffc4 	movi	r2,-1
   854bc:	01000044 	movi	r4,1
   854c0:	d8800c15 	stw	r2,48(sp)
   854c4:	e0c01015 	stw	r3,64(fp)
   854c8:	d9000b15 	stw	r4,44(sp)
   854cc:	d8800615 	stw	r2,24(sp)
   854d0:	d8002215 	stw	zero,136(sp)
   854d4:	003c4106 	br	845dc <__alt_data_end+0xfffc5ddc>
   854d8:	d8c00c17 	ldw	r3,48(sp)
   854dc:	d8c00615 	stw	r3,24(sp)
   854e0:	003e7006 	br	84ea4 <__alt_data_end+0xfffc66a4>
   854e4:	04400044 	movi	r17,1
   854e8:	003b2006 	br	8416c <__alt_data_end+0xfffc596c>
   854ec:	000b883a 	mov	r5,zero
   854f0:	003b3d06 	br	841e8 <__alt_data_end+0xfffc59e8>
   854f4:	d8800c17 	ldw	r2,48(sp)
   854f8:	d8800615 	stw	r2,24(sp)
   854fc:	003e6906 	br	84ea4 <__alt_data_end+0xfffc66a4>

00085500 <__sflush_r>:
   85500:	2880030b 	ldhu	r2,12(r5)
   85504:	defffb04 	addi	sp,sp,-20
   85508:	dcc00315 	stw	r19,12(sp)
   8550c:	dc400115 	stw	r17,4(sp)
   85510:	dfc00415 	stw	ra,16(sp)
   85514:	dc800215 	stw	r18,8(sp)
   85518:	dc000015 	stw	r16,0(sp)
   8551c:	10c0020c 	andi	r3,r2,8
   85520:	2823883a 	mov	r17,r5
   85524:	2027883a 	mov	r19,r4
   85528:	1800311e 	bne	r3,zero,855f0 <__sflush_r+0xf0>
   8552c:	28c00117 	ldw	r3,4(r5)
   85530:	10820014 	ori	r2,r2,2048
   85534:	2880030d 	sth	r2,12(r5)
   85538:	00c04b0e 	bge	zero,r3,85668 <__sflush_r+0x168>
   8553c:	8a000a17 	ldw	r8,40(r17)
   85540:	40002326 	beq	r8,zero,855d0 <__sflush_r+0xd0>
   85544:	9c000017 	ldw	r16,0(r19)
   85548:	10c4000c 	andi	r3,r2,4096
   8554c:	98000015 	stw	zero,0(r19)
   85550:	18004826 	beq	r3,zero,85674 <__sflush_r+0x174>
   85554:	89801417 	ldw	r6,80(r17)
   85558:	10c0010c 	andi	r3,r2,4
   8555c:	18000626 	beq	r3,zero,85578 <__sflush_r+0x78>
   85560:	88c00117 	ldw	r3,4(r17)
   85564:	88800c17 	ldw	r2,48(r17)
   85568:	30cdc83a 	sub	r6,r6,r3
   8556c:	10000226 	beq	r2,zero,85578 <__sflush_r+0x78>
   85570:	88800f17 	ldw	r2,60(r17)
   85574:	308dc83a 	sub	r6,r6,r2
   85578:	89400717 	ldw	r5,28(r17)
   8557c:	000f883a 	mov	r7,zero
   85580:	9809883a 	mov	r4,r19
   85584:	403ee83a 	callr	r8
   85588:	00ffffc4 	movi	r3,-1
   8558c:	10c04426 	beq	r2,r3,856a0 <__sflush_r+0x1a0>
   85590:	88c0030b 	ldhu	r3,12(r17)
   85594:	89000417 	ldw	r4,16(r17)
   85598:	88000115 	stw	zero,4(r17)
   8559c:	197dffcc 	andi	r5,r3,63487
   855a0:	8940030d 	sth	r5,12(r17)
   855a4:	89000015 	stw	r4,0(r17)
   855a8:	18c4000c 	andi	r3,r3,4096
   855ac:	18002c1e 	bne	r3,zero,85660 <__sflush_r+0x160>
   855b0:	89400c17 	ldw	r5,48(r17)
   855b4:	9c000015 	stw	r16,0(r19)
   855b8:	28000526 	beq	r5,zero,855d0 <__sflush_r+0xd0>
   855bc:	88801004 	addi	r2,r17,64
   855c0:	28800226 	beq	r5,r2,855cc <__sflush_r+0xcc>
   855c4:	9809883a 	mov	r4,r19
   855c8:	0085c7c0 	call	85c7c <_free_r>
   855cc:	88000c15 	stw	zero,48(r17)
   855d0:	0005883a 	mov	r2,zero
   855d4:	dfc00417 	ldw	ra,16(sp)
   855d8:	dcc00317 	ldw	r19,12(sp)
   855dc:	dc800217 	ldw	r18,8(sp)
   855e0:	dc400117 	ldw	r17,4(sp)
   855e4:	dc000017 	ldw	r16,0(sp)
   855e8:	dec00504 	addi	sp,sp,20
   855ec:	f800283a 	ret
   855f0:	2c800417 	ldw	r18,16(r5)
   855f4:	903ff626 	beq	r18,zero,855d0 <__alt_data_end+0xfffc6dd0>
   855f8:	2c000017 	ldw	r16,0(r5)
   855fc:	108000cc 	andi	r2,r2,3
   85600:	2c800015 	stw	r18,0(r5)
   85604:	84a1c83a 	sub	r16,r16,r18
   85608:	1000131e 	bne	r2,zero,85658 <__sflush_r+0x158>
   8560c:	28800517 	ldw	r2,20(r5)
   85610:	88800215 	stw	r2,8(r17)
   85614:	04000316 	blt	zero,r16,85624 <__sflush_r+0x124>
   85618:	003fed06 	br	855d0 <__alt_data_end+0xfffc6dd0>
   8561c:	90a5883a 	add	r18,r18,r2
   85620:	043feb0e 	bge	zero,r16,855d0 <__alt_data_end+0xfffc6dd0>
   85624:	88800917 	ldw	r2,36(r17)
   85628:	89400717 	ldw	r5,28(r17)
   8562c:	800f883a 	mov	r7,r16
   85630:	900d883a 	mov	r6,r18
   85634:	9809883a 	mov	r4,r19
   85638:	103ee83a 	callr	r2
   8563c:	80a1c83a 	sub	r16,r16,r2
   85640:	00bff616 	blt	zero,r2,8561c <__alt_data_end+0xfffc6e1c>
   85644:	88c0030b 	ldhu	r3,12(r17)
   85648:	00bfffc4 	movi	r2,-1
   8564c:	18c01014 	ori	r3,r3,64
   85650:	88c0030d 	sth	r3,12(r17)
   85654:	003fdf06 	br	855d4 <__alt_data_end+0xfffc6dd4>
   85658:	0005883a 	mov	r2,zero
   8565c:	003fec06 	br	85610 <__alt_data_end+0xfffc6e10>
   85660:	88801415 	stw	r2,80(r17)
   85664:	003fd206 	br	855b0 <__alt_data_end+0xfffc6db0>
   85668:	28c00f17 	ldw	r3,60(r5)
   8566c:	00ffb316 	blt	zero,r3,8553c <__alt_data_end+0xfffc6d3c>
   85670:	003fd706 	br	855d0 <__alt_data_end+0xfffc6dd0>
   85674:	89400717 	ldw	r5,28(r17)
   85678:	000d883a 	mov	r6,zero
   8567c:	01c00044 	movi	r7,1
   85680:	9809883a 	mov	r4,r19
   85684:	403ee83a 	callr	r8
   85688:	100d883a 	mov	r6,r2
   8568c:	00bfffc4 	movi	r2,-1
   85690:	30801426 	beq	r6,r2,856e4 <__sflush_r+0x1e4>
   85694:	8880030b 	ldhu	r2,12(r17)
   85698:	8a000a17 	ldw	r8,40(r17)
   8569c:	003fae06 	br	85558 <__alt_data_end+0xfffc6d58>
   856a0:	98c00017 	ldw	r3,0(r19)
   856a4:	183fba26 	beq	r3,zero,85590 <__alt_data_end+0xfffc6d90>
   856a8:	01000744 	movi	r4,29
   856ac:	19000626 	beq	r3,r4,856c8 <__sflush_r+0x1c8>
   856b0:	01000584 	movi	r4,22
   856b4:	19000426 	beq	r3,r4,856c8 <__sflush_r+0x1c8>
   856b8:	88c0030b 	ldhu	r3,12(r17)
   856bc:	18c01014 	ori	r3,r3,64
   856c0:	88c0030d 	sth	r3,12(r17)
   856c4:	003fc306 	br	855d4 <__alt_data_end+0xfffc6dd4>
   856c8:	8880030b 	ldhu	r2,12(r17)
   856cc:	88c00417 	ldw	r3,16(r17)
   856d0:	88000115 	stw	zero,4(r17)
   856d4:	10bdffcc 	andi	r2,r2,63487
   856d8:	8880030d 	sth	r2,12(r17)
   856dc:	88c00015 	stw	r3,0(r17)
   856e0:	003fb306 	br	855b0 <__alt_data_end+0xfffc6db0>
   856e4:	98800017 	ldw	r2,0(r19)
   856e8:	103fea26 	beq	r2,zero,85694 <__alt_data_end+0xfffc6e94>
   856ec:	00c00744 	movi	r3,29
   856f0:	10c00226 	beq	r2,r3,856fc <__sflush_r+0x1fc>
   856f4:	00c00584 	movi	r3,22
   856f8:	10c0031e 	bne	r2,r3,85708 <__sflush_r+0x208>
   856fc:	9c000015 	stw	r16,0(r19)
   85700:	0005883a 	mov	r2,zero
   85704:	003fb306 	br	855d4 <__alt_data_end+0xfffc6dd4>
   85708:	88c0030b 	ldhu	r3,12(r17)
   8570c:	3005883a 	mov	r2,r6
   85710:	18c01014 	ori	r3,r3,64
   85714:	88c0030d 	sth	r3,12(r17)
   85718:	003fae06 	br	855d4 <__alt_data_end+0xfffc6dd4>

0008571c <_fflush_r>:
   8571c:	defffd04 	addi	sp,sp,-12
   85720:	dc000115 	stw	r16,4(sp)
   85724:	dfc00215 	stw	ra,8(sp)
   85728:	2021883a 	mov	r16,r4
   8572c:	20000226 	beq	r4,zero,85738 <_fflush_r+0x1c>
   85730:	20800e17 	ldw	r2,56(r4)
   85734:	10000c26 	beq	r2,zero,85768 <_fflush_r+0x4c>
   85738:	2880030f 	ldh	r2,12(r5)
   8573c:	1000051e 	bne	r2,zero,85754 <_fflush_r+0x38>
   85740:	0005883a 	mov	r2,zero
   85744:	dfc00217 	ldw	ra,8(sp)
   85748:	dc000117 	ldw	r16,4(sp)
   8574c:	dec00304 	addi	sp,sp,12
   85750:	f800283a 	ret
   85754:	8009883a 	mov	r4,r16
   85758:	dfc00217 	ldw	ra,8(sp)
   8575c:	dc000117 	ldw	r16,4(sp)
   85760:	dec00304 	addi	sp,sp,12
   85764:	00855001 	jmpi	85500 <__sflush_r>
   85768:	d9400015 	stw	r5,0(sp)
   8576c:	0085b080 	call	85b08 <__sinit>
   85770:	d9400017 	ldw	r5,0(sp)
   85774:	003ff006 	br	85738 <__alt_data_end+0xfffc6f38>

00085778 <fflush>:
   85778:	20000526 	beq	r4,zero,85790 <fflush+0x18>
   8577c:	008002b4 	movhi	r2,10
   85780:	10a87f04 	addi	r2,r2,-24068
   85784:	200b883a 	mov	r5,r4
   85788:	11000017 	ldw	r4,0(r2)
   8578c:	008571c1 	jmpi	8571c <_fflush_r>
   85790:	008002b4 	movhi	r2,10
   85794:	10a87e04 	addi	r2,r2,-24072
   85798:	11000017 	ldw	r4,0(r2)
   8579c:	01400234 	movhi	r5,8
   857a0:	2955c704 	addi	r5,r5,22300
   857a4:	00860501 	jmpi	86050 <_fwalk_reent>

000857a8 <__fp_unlock>:
   857a8:	0005883a 	mov	r2,zero
   857ac:	f800283a 	ret

000857b0 <_cleanup_r>:
   857b0:	01400274 	movhi	r5,9
   857b4:	2964a204 	addi	r5,r5,-28024
   857b8:	00860501 	jmpi	86050 <_fwalk_reent>

000857bc <__sinit.part.1>:
   857bc:	defff704 	addi	sp,sp,-36
   857c0:	00c00234 	movhi	r3,8
   857c4:	dfc00815 	stw	ra,32(sp)
   857c8:	ddc00715 	stw	r23,28(sp)
   857cc:	dd800615 	stw	r22,24(sp)
   857d0:	dd400515 	stw	r21,20(sp)
   857d4:	dd000415 	stw	r20,16(sp)
   857d8:	dcc00315 	stw	r19,12(sp)
   857dc:	dc800215 	stw	r18,8(sp)
   857e0:	dc400115 	stw	r17,4(sp)
   857e4:	dc000015 	stw	r16,0(sp)
   857e8:	18d5ec04 	addi	r3,r3,22448
   857ec:	24000117 	ldw	r16,4(r4)
   857f0:	20c00f15 	stw	r3,60(r4)
   857f4:	2080bb04 	addi	r2,r4,748
   857f8:	00c000c4 	movi	r3,3
   857fc:	20c0b915 	stw	r3,740(r4)
   85800:	2080ba15 	stw	r2,744(r4)
   85804:	2000b815 	stw	zero,736(r4)
   85808:	05c00204 	movi	r23,8
   8580c:	00800104 	movi	r2,4
   85810:	2025883a 	mov	r18,r4
   85814:	b80d883a 	mov	r6,r23
   85818:	81001704 	addi	r4,r16,92
   8581c:	000b883a 	mov	r5,zero
   85820:	80000015 	stw	zero,0(r16)
   85824:	80000115 	stw	zero,4(r16)
   85828:	80000215 	stw	zero,8(r16)
   8582c:	8080030d 	sth	r2,12(r16)
   85830:	80001915 	stw	zero,100(r16)
   85834:	8000038d 	sth	zero,14(r16)
   85838:	80000415 	stw	zero,16(r16)
   8583c:	80000515 	stw	zero,20(r16)
   85840:	80000615 	stw	zero,24(r16)
   85844:	00865d80 	call	865d8 <memset>
   85848:	05800234 	movhi	r22,8
   8584c:	94400217 	ldw	r17,8(r18)
   85850:	05400234 	movhi	r21,8
   85854:	05000234 	movhi	r20,8
   85858:	04c00234 	movhi	r19,8
   8585c:	b59e0b04 	addi	r22,r22,30764
   85860:	ad5e2204 	addi	r21,r21,30856
   85864:	a51e4104 	addi	r20,r20,30980
   85868:	9cde5804 	addi	r19,r19,31072
   8586c:	85800815 	stw	r22,32(r16)
   85870:	85400915 	stw	r21,36(r16)
   85874:	85000a15 	stw	r20,40(r16)
   85878:	84c00b15 	stw	r19,44(r16)
   8587c:	84000715 	stw	r16,28(r16)
   85880:	00800284 	movi	r2,10
   85884:	8880030d 	sth	r2,12(r17)
   85888:	00800044 	movi	r2,1
   8588c:	b80d883a 	mov	r6,r23
   85890:	89001704 	addi	r4,r17,92
   85894:	000b883a 	mov	r5,zero
   85898:	88000015 	stw	zero,0(r17)
   8589c:	88000115 	stw	zero,4(r17)
   858a0:	88000215 	stw	zero,8(r17)
   858a4:	88001915 	stw	zero,100(r17)
   858a8:	8880038d 	sth	r2,14(r17)
   858ac:	88000415 	stw	zero,16(r17)
   858b0:	88000515 	stw	zero,20(r17)
   858b4:	88000615 	stw	zero,24(r17)
   858b8:	00865d80 	call	865d8 <memset>
   858bc:	94000317 	ldw	r16,12(r18)
   858c0:	00800484 	movi	r2,18
   858c4:	8c400715 	stw	r17,28(r17)
   858c8:	8d800815 	stw	r22,32(r17)
   858cc:	8d400915 	stw	r21,36(r17)
   858d0:	8d000a15 	stw	r20,40(r17)
   858d4:	8cc00b15 	stw	r19,44(r17)
   858d8:	8080030d 	sth	r2,12(r16)
   858dc:	00800084 	movi	r2,2
   858e0:	80000015 	stw	zero,0(r16)
   858e4:	80000115 	stw	zero,4(r16)
   858e8:	80000215 	stw	zero,8(r16)
   858ec:	80001915 	stw	zero,100(r16)
   858f0:	8080038d 	sth	r2,14(r16)
   858f4:	80000415 	stw	zero,16(r16)
   858f8:	80000515 	stw	zero,20(r16)
   858fc:	80000615 	stw	zero,24(r16)
   85900:	b80d883a 	mov	r6,r23
   85904:	000b883a 	mov	r5,zero
   85908:	81001704 	addi	r4,r16,92
   8590c:	00865d80 	call	865d8 <memset>
   85910:	00800044 	movi	r2,1
   85914:	84000715 	stw	r16,28(r16)
   85918:	85800815 	stw	r22,32(r16)
   8591c:	85400915 	stw	r21,36(r16)
   85920:	85000a15 	stw	r20,40(r16)
   85924:	84c00b15 	stw	r19,44(r16)
   85928:	90800e15 	stw	r2,56(r18)
   8592c:	dfc00817 	ldw	ra,32(sp)
   85930:	ddc00717 	ldw	r23,28(sp)
   85934:	dd800617 	ldw	r22,24(sp)
   85938:	dd400517 	ldw	r21,20(sp)
   8593c:	dd000417 	ldw	r20,16(sp)
   85940:	dcc00317 	ldw	r19,12(sp)
   85944:	dc800217 	ldw	r18,8(sp)
   85948:	dc400117 	ldw	r17,4(sp)
   8594c:	dc000017 	ldw	r16,0(sp)
   85950:	dec00904 	addi	sp,sp,36
   85954:	f800283a 	ret

00085958 <__fp_lock>:
   85958:	0005883a 	mov	r2,zero
   8595c:	f800283a 	ret

00085960 <__sfmoreglue>:
   85960:	defffc04 	addi	sp,sp,-16
   85964:	dc800215 	stw	r18,8(sp)
   85968:	2825883a 	mov	r18,r5
   8596c:	dc000015 	stw	r16,0(sp)
   85970:	01401a04 	movi	r5,104
   85974:	2021883a 	mov	r16,r4
   85978:	913fffc4 	addi	r4,r18,-1
   8597c:	dfc00315 	stw	ra,12(sp)
   85980:	dc400115 	stw	r17,4(sp)
   85984:	008b18c0 	call	8b18c <__mulsi3>
   85988:	8009883a 	mov	r4,r16
   8598c:	11401d04 	addi	r5,r2,116
   85990:	1023883a 	mov	r17,r2
   85994:	0080ce80 	call	80ce8 <_malloc_r>
   85998:	1021883a 	mov	r16,r2
   8599c:	10000726 	beq	r2,zero,859bc <__sfmoreglue+0x5c>
   859a0:	11000304 	addi	r4,r2,12
   859a4:	10000015 	stw	zero,0(r2)
   859a8:	14800115 	stw	r18,4(r2)
   859ac:	11000215 	stw	r4,8(r2)
   859b0:	89801a04 	addi	r6,r17,104
   859b4:	000b883a 	mov	r5,zero
   859b8:	00865d80 	call	865d8 <memset>
   859bc:	8005883a 	mov	r2,r16
   859c0:	dfc00317 	ldw	ra,12(sp)
   859c4:	dc800217 	ldw	r18,8(sp)
   859c8:	dc400117 	ldw	r17,4(sp)
   859cc:	dc000017 	ldw	r16,0(sp)
   859d0:	dec00404 	addi	sp,sp,16
   859d4:	f800283a 	ret

000859d8 <__sfp>:
   859d8:	defffb04 	addi	sp,sp,-20
   859dc:	dc000015 	stw	r16,0(sp)
   859e0:	040002b4 	movhi	r16,10
   859e4:	84287e04 	addi	r16,r16,-24072
   859e8:	dcc00315 	stw	r19,12(sp)
   859ec:	2027883a 	mov	r19,r4
   859f0:	81000017 	ldw	r4,0(r16)
   859f4:	dfc00415 	stw	ra,16(sp)
   859f8:	dc800215 	stw	r18,8(sp)
   859fc:	20800e17 	ldw	r2,56(r4)
   85a00:	dc400115 	stw	r17,4(sp)
   85a04:	1000021e 	bne	r2,zero,85a10 <__sfp+0x38>
   85a08:	00857bc0 	call	857bc <__sinit.part.1>
   85a0c:	81000017 	ldw	r4,0(r16)
   85a10:	2480b804 	addi	r18,r4,736
   85a14:	047fffc4 	movi	r17,-1
   85a18:	91000117 	ldw	r4,4(r18)
   85a1c:	94000217 	ldw	r16,8(r18)
   85a20:	213fffc4 	addi	r4,r4,-1
   85a24:	20000a16 	blt	r4,zero,85a50 <__sfp+0x78>
   85a28:	8080030f 	ldh	r2,12(r16)
   85a2c:	10000c26 	beq	r2,zero,85a60 <__sfp+0x88>
   85a30:	80c01d04 	addi	r3,r16,116
   85a34:	00000206 	br	85a40 <__sfp+0x68>
   85a38:	18bfe60f 	ldh	r2,-104(r3)
   85a3c:	10000826 	beq	r2,zero,85a60 <__sfp+0x88>
   85a40:	213fffc4 	addi	r4,r4,-1
   85a44:	1c3ffd04 	addi	r16,r3,-12
   85a48:	18c01a04 	addi	r3,r3,104
   85a4c:	247ffa1e 	bne	r4,r17,85a38 <__alt_data_end+0xfffc7238>
   85a50:	90800017 	ldw	r2,0(r18)
   85a54:	10001d26 	beq	r2,zero,85acc <__sfp+0xf4>
   85a58:	1025883a 	mov	r18,r2
   85a5c:	003fee06 	br	85a18 <__alt_data_end+0xfffc7218>
   85a60:	00bfffc4 	movi	r2,-1
   85a64:	8080038d 	sth	r2,14(r16)
   85a68:	00800044 	movi	r2,1
   85a6c:	8080030d 	sth	r2,12(r16)
   85a70:	80001915 	stw	zero,100(r16)
   85a74:	80000015 	stw	zero,0(r16)
   85a78:	80000215 	stw	zero,8(r16)
   85a7c:	80000115 	stw	zero,4(r16)
   85a80:	80000415 	stw	zero,16(r16)
   85a84:	80000515 	stw	zero,20(r16)
   85a88:	80000615 	stw	zero,24(r16)
   85a8c:	01800204 	movi	r6,8
   85a90:	000b883a 	mov	r5,zero
   85a94:	81001704 	addi	r4,r16,92
   85a98:	00865d80 	call	865d8 <memset>
   85a9c:	8005883a 	mov	r2,r16
   85aa0:	80000c15 	stw	zero,48(r16)
   85aa4:	80000d15 	stw	zero,52(r16)
   85aa8:	80001115 	stw	zero,68(r16)
   85aac:	80001215 	stw	zero,72(r16)
   85ab0:	dfc00417 	ldw	ra,16(sp)
   85ab4:	dcc00317 	ldw	r19,12(sp)
   85ab8:	dc800217 	ldw	r18,8(sp)
   85abc:	dc400117 	ldw	r17,4(sp)
   85ac0:	dc000017 	ldw	r16,0(sp)
   85ac4:	dec00504 	addi	sp,sp,20
   85ac8:	f800283a 	ret
   85acc:	01400104 	movi	r5,4
   85ad0:	9809883a 	mov	r4,r19
   85ad4:	00859600 	call	85960 <__sfmoreglue>
   85ad8:	90800015 	stw	r2,0(r18)
   85adc:	103fde1e 	bne	r2,zero,85a58 <__alt_data_end+0xfffc7258>
   85ae0:	00800304 	movi	r2,12
   85ae4:	98800015 	stw	r2,0(r19)
   85ae8:	0005883a 	mov	r2,zero
   85aec:	003ff006 	br	85ab0 <__alt_data_end+0xfffc72b0>

00085af0 <_cleanup>:
   85af0:	008002b4 	movhi	r2,10
   85af4:	10a87e04 	addi	r2,r2,-24072
   85af8:	11000017 	ldw	r4,0(r2)
   85afc:	01400274 	movhi	r5,9
   85b00:	2964a204 	addi	r5,r5,-28024
   85b04:	00860501 	jmpi	86050 <_fwalk_reent>

00085b08 <__sinit>:
   85b08:	20800e17 	ldw	r2,56(r4)
   85b0c:	10000126 	beq	r2,zero,85b14 <__sinit+0xc>
   85b10:	f800283a 	ret
   85b14:	00857bc1 	jmpi	857bc <__sinit.part.1>

00085b18 <__sfp_lock_acquire>:
   85b18:	f800283a 	ret

00085b1c <__sfp_lock_release>:
   85b1c:	f800283a 	ret

00085b20 <__sinit_lock_acquire>:
   85b20:	f800283a 	ret

00085b24 <__sinit_lock_release>:
   85b24:	f800283a 	ret

00085b28 <__fp_lock_all>:
   85b28:	008002b4 	movhi	r2,10
   85b2c:	10a87f04 	addi	r2,r2,-24068
   85b30:	11000017 	ldw	r4,0(r2)
   85b34:	01400234 	movhi	r5,8
   85b38:	29565604 	addi	r5,r5,22872
   85b3c:	0085f8c1 	jmpi	85f8c <_fwalk>

00085b40 <__fp_unlock_all>:
   85b40:	008002b4 	movhi	r2,10
   85b44:	10a87f04 	addi	r2,r2,-24068
   85b48:	11000017 	ldw	r4,0(r2)
   85b4c:	01400234 	movhi	r5,8
   85b50:	2955ea04 	addi	r5,r5,22440
   85b54:	0085f8c1 	jmpi	85f8c <_fwalk>

00085b58 <_malloc_trim_r>:
   85b58:	defffb04 	addi	sp,sp,-20
   85b5c:	dcc00315 	stw	r19,12(sp)
   85b60:	04c002b4 	movhi	r19,10
   85b64:	dc800215 	stw	r18,8(sp)
   85b68:	dc400115 	stw	r17,4(sp)
   85b6c:	dc000015 	stw	r16,0(sp)
   85b70:	dfc00415 	stw	ra,16(sp)
   85b74:	2821883a 	mov	r16,r5
   85b78:	9ce1cd04 	addi	r19,r19,-30924
   85b7c:	2025883a 	mov	r18,r4
   85b80:	008e7a80 	call	8e7a8 <__malloc_lock>
   85b84:	98800217 	ldw	r2,8(r19)
   85b88:	14400117 	ldw	r17,4(r2)
   85b8c:	00bfff04 	movi	r2,-4
   85b90:	88a2703a 	and	r17,r17,r2
   85b94:	8c21c83a 	sub	r16,r17,r16
   85b98:	8403fbc4 	addi	r16,r16,4079
   85b9c:	8020d33a 	srli	r16,r16,12
   85ba0:	0083ffc4 	movi	r2,4095
   85ba4:	843fffc4 	addi	r16,r16,-1
   85ba8:	8020933a 	slli	r16,r16,12
   85bac:	1400060e 	bge	r2,r16,85bc8 <_malloc_trim_r+0x70>
   85bb0:	000b883a 	mov	r5,zero
   85bb4:	9009883a 	mov	r4,r18
   85bb8:	00815600 	call	81560 <_sbrk_r>
   85bbc:	98c00217 	ldw	r3,8(r19)
   85bc0:	1c47883a 	add	r3,r3,r17
   85bc4:	10c00a26 	beq	r2,r3,85bf0 <_malloc_trim_r+0x98>
   85bc8:	9009883a 	mov	r4,r18
   85bcc:	008e8c80 	call	8e8c8 <__malloc_unlock>
   85bd0:	0005883a 	mov	r2,zero
   85bd4:	dfc00417 	ldw	ra,16(sp)
   85bd8:	dcc00317 	ldw	r19,12(sp)
   85bdc:	dc800217 	ldw	r18,8(sp)
   85be0:	dc400117 	ldw	r17,4(sp)
   85be4:	dc000017 	ldw	r16,0(sp)
   85be8:	dec00504 	addi	sp,sp,20
   85bec:	f800283a 	ret
   85bf0:	040bc83a 	sub	r5,zero,r16
   85bf4:	9009883a 	mov	r4,r18
   85bf8:	00815600 	call	81560 <_sbrk_r>
   85bfc:	00ffffc4 	movi	r3,-1
   85c00:	10c00d26 	beq	r2,r3,85c38 <_malloc_trim_r+0xe0>
   85c04:	00c002b4 	movhi	r3,10
   85c08:	18efbb04 	addi	r3,r3,-16660
   85c0c:	18800017 	ldw	r2,0(r3)
   85c10:	99000217 	ldw	r4,8(r19)
   85c14:	8c23c83a 	sub	r17,r17,r16
   85c18:	8c400054 	ori	r17,r17,1
   85c1c:	1421c83a 	sub	r16,r2,r16
   85c20:	24400115 	stw	r17,4(r4)
   85c24:	9009883a 	mov	r4,r18
   85c28:	1c000015 	stw	r16,0(r3)
   85c2c:	008e8c80 	call	8e8c8 <__malloc_unlock>
   85c30:	00800044 	movi	r2,1
   85c34:	003fe706 	br	85bd4 <__alt_data_end+0xfffc73d4>
   85c38:	000b883a 	mov	r5,zero
   85c3c:	9009883a 	mov	r4,r18
   85c40:	00815600 	call	81560 <_sbrk_r>
   85c44:	99000217 	ldw	r4,8(r19)
   85c48:	014003c4 	movi	r5,15
   85c4c:	1107c83a 	sub	r3,r2,r4
   85c50:	28ffdd0e 	bge	r5,r3,85bc8 <__alt_data_end+0xfffc73c8>
   85c54:	014002b4 	movhi	r5,10
   85c58:	29687c04 	addi	r5,r5,-24080
   85c5c:	29400017 	ldw	r5,0(r5)
   85c60:	18c00054 	ori	r3,r3,1
   85c64:	20c00115 	stw	r3,4(r4)
   85c68:	00c002b4 	movhi	r3,10
   85c6c:	1145c83a 	sub	r2,r2,r5
   85c70:	18efbb04 	addi	r3,r3,-16660
   85c74:	18800015 	stw	r2,0(r3)
   85c78:	003fd306 	br	85bc8 <__alt_data_end+0xfffc73c8>

00085c7c <_free_r>:
   85c7c:	28004126 	beq	r5,zero,85d84 <_free_r+0x108>
   85c80:	defffd04 	addi	sp,sp,-12
   85c84:	dc400115 	stw	r17,4(sp)
   85c88:	dc000015 	stw	r16,0(sp)
   85c8c:	2023883a 	mov	r17,r4
   85c90:	2821883a 	mov	r16,r5
   85c94:	dfc00215 	stw	ra,8(sp)
   85c98:	008e7a80 	call	8e7a8 <__malloc_lock>
   85c9c:	81ffff17 	ldw	r7,-4(r16)
   85ca0:	00bfff84 	movi	r2,-2
   85ca4:	010002b4 	movhi	r4,10
   85ca8:	81bffe04 	addi	r6,r16,-8
   85cac:	3884703a 	and	r2,r7,r2
   85cb0:	2121cd04 	addi	r4,r4,-30924
   85cb4:	308b883a 	add	r5,r6,r2
   85cb8:	2a400117 	ldw	r9,4(r5)
   85cbc:	22000217 	ldw	r8,8(r4)
   85cc0:	00ffff04 	movi	r3,-4
   85cc4:	48c6703a 	and	r3,r9,r3
   85cc8:	2a005726 	beq	r5,r8,85e28 <_free_r+0x1ac>
   85ccc:	28c00115 	stw	r3,4(r5)
   85cd0:	39c0004c 	andi	r7,r7,1
   85cd4:	3800091e 	bne	r7,zero,85cfc <_free_r+0x80>
   85cd8:	823ffe17 	ldw	r8,-8(r16)
   85cdc:	22400204 	addi	r9,r4,8
   85ce0:	320dc83a 	sub	r6,r6,r8
   85ce4:	31c00217 	ldw	r7,8(r6)
   85ce8:	1205883a 	add	r2,r2,r8
   85cec:	3a406526 	beq	r7,r9,85e84 <_free_r+0x208>
   85cf0:	32000317 	ldw	r8,12(r6)
   85cf4:	3a000315 	stw	r8,12(r7)
   85cf8:	41c00215 	stw	r7,8(r8)
   85cfc:	28cf883a 	add	r7,r5,r3
   85d00:	39c00117 	ldw	r7,4(r7)
   85d04:	39c0004c 	andi	r7,r7,1
   85d08:	38003a26 	beq	r7,zero,85df4 <_free_r+0x178>
   85d0c:	10c00054 	ori	r3,r2,1
   85d10:	30c00115 	stw	r3,4(r6)
   85d14:	3087883a 	add	r3,r6,r2
   85d18:	18800015 	stw	r2,0(r3)
   85d1c:	00c07fc4 	movi	r3,511
   85d20:	18801936 	bltu	r3,r2,85d88 <_free_r+0x10c>
   85d24:	1004d0fa 	srli	r2,r2,3
   85d28:	01c00044 	movi	r7,1
   85d2c:	21400117 	ldw	r5,4(r4)
   85d30:	10c00044 	addi	r3,r2,1
   85d34:	18c7883a 	add	r3,r3,r3
   85d38:	1005d0ba 	srai	r2,r2,2
   85d3c:	18c7883a 	add	r3,r3,r3
   85d40:	18c7883a 	add	r3,r3,r3
   85d44:	1907883a 	add	r3,r3,r4
   85d48:	3884983a 	sll	r2,r7,r2
   85d4c:	19c00017 	ldw	r7,0(r3)
   85d50:	1a3ffe04 	addi	r8,r3,-8
   85d54:	1144b03a 	or	r2,r2,r5
   85d58:	32000315 	stw	r8,12(r6)
   85d5c:	31c00215 	stw	r7,8(r6)
   85d60:	20800115 	stw	r2,4(r4)
   85d64:	19800015 	stw	r6,0(r3)
   85d68:	39800315 	stw	r6,12(r7)
   85d6c:	8809883a 	mov	r4,r17
   85d70:	dfc00217 	ldw	ra,8(sp)
   85d74:	dc400117 	ldw	r17,4(sp)
   85d78:	dc000017 	ldw	r16,0(sp)
   85d7c:	dec00304 	addi	sp,sp,12
   85d80:	008e8c81 	jmpi	8e8c8 <__malloc_unlock>
   85d84:	f800283a 	ret
   85d88:	100ad27a 	srli	r5,r2,9
   85d8c:	00c00104 	movi	r3,4
   85d90:	19404a36 	bltu	r3,r5,85ebc <_free_r+0x240>
   85d94:	100ad1ba 	srli	r5,r2,6
   85d98:	28c00e44 	addi	r3,r5,57
   85d9c:	18c7883a 	add	r3,r3,r3
   85da0:	29400e04 	addi	r5,r5,56
   85da4:	18c7883a 	add	r3,r3,r3
   85da8:	18c7883a 	add	r3,r3,r3
   85dac:	1909883a 	add	r4,r3,r4
   85db0:	20c00017 	ldw	r3,0(r4)
   85db4:	01c002b4 	movhi	r7,10
   85db8:	213ffe04 	addi	r4,r4,-8
   85dbc:	39e1cd04 	addi	r7,r7,-30924
   85dc0:	20c04426 	beq	r4,r3,85ed4 <_free_r+0x258>
   85dc4:	01ffff04 	movi	r7,-4
   85dc8:	19400117 	ldw	r5,4(r3)
   85dcc:	29ca703a 	and	r5,r5,r7
   85dd0:	1140022e 	bgeu	r2,r5,85ddc <_free_r+0x160>
   85dd4:	18c00217 	ldw	r3,8(r3)
   85dd8:	20fffb1e 	bne	r4,r3,85dc8 <__alt_data_end+0xfffc75c8>
   85ddc:	19000317 	ldw	r4,12(r3)
   85de0:	31000315 	stw	r4,12(r6)
   85de4:	30c00215 	stw	r3,8(r6)
   85de8:	21800215 	stw	r6,8(r4)
   85dec:	19800315 	stw	r6,12(r3)
   85df0:	003fde06 	br	85d6c <__alt_data_end+0xfffc756c>
   85df4:	29c00217 	ldw	r7,8(r5)
   85df8:	10c5883a 	add	r2,r2,r3
   85dfc:	00c002b4 	movhi	r3,10
   85e00:	18e1cf04 	addi	r3,r3,-30916
   85e04:	38c03b26 	beq	r7,r3,85ef4 <_free_r+0x278>
   85e08:	2a000317 	ldw	r8,12(r5)
   85e0c:	11400054 	ori	r5,r2,1
   85e10:	3087883a 	add	r3,r6,r2
   85e14:	3a000315 	stw	r8,12(r7)
   85e18:	41c00215 	stw	r7,8(r8)
   85e1c:	31400115 	stw	r5,4(r6)
   85e20:	18800015 	stw	r2,0(r3)
   85e24:	003fbd06 	br	85d1c <__alt_data_end+0xfffc751c>
   85e28:	39c0004c 	andi	r7,r7,1
   85e2c:	10c5883a 	add	r2,r2,r3
   85e30:	3800071e 	bne	r7,zero,85e50 <_free_r+0x1d4>
   85e34:	81fffe17 	ldw	r7,-8(r16)
   85e38:	31cdc83a 	sub	r6,r6,r7
   85e3c:	30c00317 	ldw	r3,12(r6)
   85e40:	31400217 	ldw	r5,8(r6)
   85e44:	11c5883a 	add	r2,r2,r7
   85e48:	28c00315 	stw	r3,12(r5)
   85e4c:	19400215 	stw	r5,8(r3)
   85e50:	10c00054 	ori	r3,r2,1
   85e54:	30c00115 	stw	r3,4(r6)
   85e58:	00c002b4 	movhi	r3,10
   85e5c:	18e87d04 	addi	r3,r3,-24076
   85e60:	18c00017 	ldw	r3,0(r3)
   85e64:	21800215 	stw	r6,8(r4)
   85e68:	10ffc036 	bltu	r2,r3,85d6c <__alt_data_end+0xfffc756c>
   85e6c:	008002b4 	movhi	r2,10
   85e70:	10af9704 	addi	r2,r2,-16804
   85e74:	11400017 	ldw	r5,0(r2)
   85e78:	8809883a 	mov	r4,r17
   85e7c:	0085b580 	call	85b58 <_malloc_trim_r>
   85e80:	003fba06 	br	85d6c <__alt_data_end+0xfffc756c>
   85e84:	28c9883a 	add	r4,r5,r3
   85e88:	21000117 	ldw	r4,4(r4)
   85e8c:	2100004c 	andi	r4,r4,1
   85e90:	2000391e 	bne	r4,zero,85f78 <_free_r+0x2fc>
   85e94:	29c00217 	ldw	r7,8(r5)
   85e98:	29000317 	ldw	r4,12(r5)
   85e9c:	1885883a 	add	r2,r3,r2
   85ea0:	10c00054 	ori	r3,r2,1
   85ea4:	39000315 	stw	r4,12(r7)
   85ea8:	21c00215 	stw	r7,8(r4)
   85eac:	30c00115 	stw	r3,4(r6)
   85eb0:	308d883a 	add	r6,r6,r2
   85eb4:	30800015 	stw	r2,0(r6)
   85eb8:	003fac06 	br	85d6c <__alt_data_end+0xfffc756c>
   85ebc:	00c00504 	movi	r3,20
   85ec0:	19401536 	bltu	r3,r5,85f18 <_free_r+0x29c>
   85ec4:	28c01704 	addi	r3,r5,92
   85ec8:	18c7883a 	add	r3,r3,r3
   85ecc:	294016c4 	addi	r5,r5,91
   85ed0:	003fb406 	br	85da4 <__alt_data_end+0xfffc75a4>
   85ed4:	280bd0ba 	srai	r5,r5,2
   85ed8:	00c00044 	movi	r3,1
   85edc:	38800117 	ldw	r2,4(r7)
   85ee0:	194a983a 	sll	r5,r3,r5
   85ee4:	2007883a 	mov	r3,r4
   85ee8:	2884b03a 	or	r2,r5,r2
   85eec:	38800115 	stw	r2,4(r7)
   85ef0:	003fbb06 	br	85de0 <__alt_data_end+0xfffc75e0>
   85ef4:	21800515 	stw	r6,20(r4)
   85ef8:	21800415 	stw	r6,16(r4)
   85efc:	10c00054 	ori	r3,r2,1
   85f00:	31c00315 	stw	r7,12(r6)
   85f04:	31c00215 	stw	r7,8(r6)
   85f08:	30c00115 	stw	r3,4(r6)
   85f0c:	308d883a 	add	r6,r6,r2
   85f10:	30800015 	stw	r2,0(r6)
   85f14:	003f9506 	br	85d6c <__alt_data_end+0xfffc756c>
   85f18:	00c01504 	movi	r3,84
   85f1c:	19400536 	bltu	r3,r5,85f34 <_free_r+0x2b8>
   85f20:	100ad33a 	srli	r5,r2,12
   85f24:	28c01bc4 	addi	r3,r5,111
   85f28:	18c7883a 	add	r3,r3,r3
   85f2c:	29401b84 	addi	r5,r5,110
   85f30:	003f9c06 	br	85da4 <__alt_data_end+0xfffc75a4>
   85f34:	00c05504 	movi	r3,340
   85f38:	19400536 	bltu	r3,r5,85f50 <_free_r+0x2d4>
   85f3c:	100ad3fa 	srli	r5,r2,15
   85f40:	28c01e04 	addi	r3,r5,120
   85f44:	18c7883a 	add	r3,r3,r3
   85f48:	29401dc4 	addi	r5,r5,119
   85f4c:	003f9506 	br	85da4 <__alt_data_end+0xfffc75a4>
   85f50:	00c15504 	movi	r3,1364
   85f54:	19400536 	bltu	r3,r5,85f6c <_free_r+0x2f0>
   85f58:	100ad4ba 	srli	r5,r2,18
   85f5c:	28c01f44 	addi	r3,r5,125
   85f60:	18c7883a 	add	r3,r3,r3
   85f64:	29401f04 	addi	r5,r5,124
   85f68:	003f8e06 	br	85da4 <__alt_data_end+0xfffc75a4>
   85f6c:	00c03f84 	movi	r3,254
   85f70:	01401f84 	movi	r5,126
   85f74:	003f8b06 	br	85da4 <__alt_data_end+0xfffc75a4>
   85f78:	10c00054 	ori	r3,r2,1
   85f7c:	30c00115 	stw	r3,4(r6)
   85f80:	308d883a 	add	r6,r6,r2
   85f84:	30800015 	stw	r2,0(r6)
   85f88:	003f7806 	br	85d6c <__alt_data_end+0xfffc756c>

00085f8c <_fwalk>:
   85f8c:	defff704 	addi	sp,sp,-36
   85f90:	dd000415 	stw	r20,16(sp)
   85f94:	dfc00815 	stw	ra,32(sp)
   85f98:	ddc00715 	stw	r23,28(sp)
   85f9c:	dd800615 	stw	r22,24(sp)
   85fa0:	dd400515 	stw	r21,20(sp)
   85fa4:	dcc00315 	stw	r19,12(sp)
   85fa8:	dc800215 	stw	r18,8(sp)
   85fac:	dc400115 	stw	r17,4(sp)
   85fb0:	dc000015 	stw	r16,0(sp)
   85fb4:	2500b804 	addi	r20,r4,736
   85fb8:	a0002326 	beq	r20,zero,86048 <_fwalk+0xbc>
   85fbc:	282b883a 	mov	r21,r5
   85fc0:	002f883a 	mov	r23,zero
   85fc4:	05800044 	movi	r22,1
   85fc8:	04ffffc4 	movi	r19,-1
   85fcc:	a4400117 	ldw	r17,4(r20)
   85fd0:	a4800217 	ldw	r18,8(r20)
   85fd4:	8c7fffc4 	addi	r17,r17,-1
   85fd8:	88000d16 	blt	r17,zero,86010 <_fwalk+0x84>
   85fdc:	94000304 	addi	r16,r18,12
   85fe0:	94800384 	addi	r18,r18,14
   85fe4:	8080000b 	ldhu	r2,0(r16)
   85fe8:	8c7fffc4 	addi	r17,r17,-1
   85fec:	813ffd04 	addi	r4,r16,-12
   85ff0:	b080042e 	bgeu	r22,r2,86004 <_fwalk+0x78>
   85ff4:	9080000f 	ldh	r2,0(r18)
   85ff8:	14c00226 	beq	r2,r19,86004 <_fwalk+0x78>
   85ffc:	a83ee83a 	callr	r21
   86000:	b8aeb03a 	or	r23,r23,r2
   86004:	84001a04 	addi	r16,r16,104
   86008:	94801a04 	addi	r18,r18,104
   8600c:	8cfff51e 	bne	r17,r19,85fe4 <__alt_data_end+0xfffc77e4>
   86010:	a5000017 	ldw	r20,0(r20)
   86014:	a03fed1e 	bne	r20,zero,85fcc <__alt_data_end+0xfffc77cc>
   86018:	b805883a 	mov	r2,r23
   8601c:	dfc00817 	ldw	ra,32(sp)
   86020:	ddc00717 	ldw	r23,28(sp)
   86024:	dd800617 	ldw	r22,24(sp)
   86028:	dd400517 	ldw	r21,20(sp)
   8602c:	dd000417 	ldw	r20,16(sp)
   86030:	dcc00317 	ldw	r19,12(sp)
   86034:	dc800217 	ldw	r18,8(sp)
   86038:	dc400117 	ldw	r17,4(sp)
   8603c:	dc000017 	ldw	r16,0(sp)
   86040:	dec00904 	addi	sp,sp,36
   86044:	f800283a 	ret
   86048:	002f883a 	mov	r23,zero
   8604c:	003ff206 	br	86018 <__alt_data_end+0xfffc7818>

00086050 <_fwalk_reent>:
   86050:	defff704 	addi	sp,sp,-36
   86054:	dd000415 	stw	r20,16(sp)
   86058:	dfc00815 	stw	ra,32(sp)
   8605c:	ddc00715 	stw	r23,28(sp)
   86060:	dd800615 	stw	r22,24(sp)
   86064:	dd400515 	stw	r21,20(sp)
   86068:	dcc00315 	stw	r19,12(sp)
   8606c:	dc800215 	stw	r18,8(sp)
   86070:	dc400115 	stw	r17,4(sp)
   86074:	dc000015 	stw	r16,0(sp)
   86078:	2500b804 	addi	r20,r4,736
   8607c:	a0002326 	beq	r20,zero,8610c <_fwalk_reent+0xbc>
   86080:	282b883a 	mov	r21,r5
   86084:	2027883a 	mov	r19,r4
   86088:	002f883a 	mov	r23,zero
   8608c:	05800044 	movi	r22,1
   86090:	04bfffc4 	movi	r18,-1
   86094:	a4400117 	ldw	r17,4(r20)
   86098:	a4000217 	ldw	r16,8(r20)
   8609c:	8c7fffc4 	addi	r17,r17,-1
   860a0:	88000c16 	blt	r17,zero,860d4 <_fwalk_reent+0x84>
   860a4:	84000304 	addi	r16,r16,12
   860a8:	8080000b 	ldhu	r2,0(r16)
   860ac:	8c7fffc4 	addi	r17,r17,-1
   860b0:	817ffd04 	addi	r5,r16,-12
   860b4:	b080052e 	bgeu	r22,r2,860cc <_fwalk_reent+0x7c>
   860b8:	8080008f 	ldh	r2,2(r16)
   860bc:	9809883a 	mov	r4,r19
   860c0:	14800226 	beq	r2,r18,860cc <_fwalk_reent+0x7c>
   860c4:	a83ee83a 	callr	r21
   860c8:	b8aeb03a 	or	r23,r23,r2
   860cc:	84001a04 	addi	r16,r16,104
   860d0:	8cbff51e 	bne	r17,r18,860a8 <__alt_data_end+0xfffc78a8>
   860d4:	a5000017 	ldw	r20,0(r20)
   860d8:	a03fee1e 	bne	r20,zero,86094 <__alt_data_end+0xfffc7894>
   860dc:	b805883a 	mov	r2,r23
   860e0:	dfc00817 	ldw	ra,32(sp)
   860e4:	ddc00717 	ldw	r23,28(sp)
   860e8:	dd800617 	ldw	r22,24(sp)
   860ec:	dd400517 	ldw	r21,20(sp)
   860f0:	dd000417 	ldw	r20,16(sp)
   860f4:	dcc00317 	ldw	r19,12(sp)
   860f8:	dc800217 	ldw	r18,8(sp)
   860fc:	dc400117 	ldw	r17,4(sp)
   86100:	dc000017 	ldw	r16,0(sp)
   86104:	dec00904 	addi	sp,sp,36
   86108:	f800283a 	ret
   8610c:	002f883a 	mov	r23,zero
   86110:	003ff206 	br	860dc <__alt_data_end+0xfffc78dc>

00086114 <_setlocale_r>:
   86114:	30001b26 	beq	r6,zero,86184 <_setlocale_r+0x70>
   86118:	014002b4 	movhi	r5,10
   8611c:	defffe04 	addi	sp,sp,-8
   86120:	2960e304 	addi	r5,r5,-31860
   86124:	3009883a 	mov	r4,r6
   86128:	dc000015 	stw	r16,0(sp)
   8612c:	dfc00115 	stw	ra,4(sp)
   86130:	3021883a 	mov	r16,r6
   86134:	00815b40 	call	815b4 <strcmp>
   86138:	1000061e 	bne	r2,zero,86154 <_setlocale_r+0x40>
   8613c:	008002b4 	movhi	r2,10
   86140:	10a0e204 	addi	r2,r2,-31864
   86144:	dfc00117 	ldw	ra,4(sp)
   86148:	dc000017 	ldw	r16,0(sp)
   8614c:	dec00204 	addi	sp,sp,8
   86150:	f800283a 	ret
   86154:	014002b4 	movhi	r5,10
   86158:	2960e204 	addi	r5,r5,-31864
   8615c:	8009883a 	mov	r4,r16
   86160:	00815b40 	call	815b4 <strcmp>
   86164:	103ff526 	beq	r2,zero,8613c <__alt_data_end+0xfffc793c>
   86168:	014002b4 	movhi	r5,10
   8616c:	2960cd04 	addi	r5,r5,-31948
   86170:	8009883a 	mov	r4,r16
   86174:	00815b40 	call	815b4 <strcmp>
   86178:	103ff026 	beq	r2,zero,8613c <__alt_data_end+0xfffc793c>
   8617c:	0005883a 	mov	r2,zero
   86180:	003ff006 	br	86144 <__alt_data_end+0xfffc7944>
   86184:	008002b4 	movhi	r2,10
   86188:	10a0e204 	addi	r2,r2,-31864
   8618c:	f800283a 	ret

00086190 <__locale_charset>:
   86190:	008002b4 	movhi	r2,10
   86194:	10a3e004 	addi	r2,r2,-28800
   86198:	f800283a 	ret

0008619c <__locale_mb_cur_max>:
   8619c:	008002b4 	movhi	r2,10
   861a0:	10a88004 	addi	r2,r2,-24064
   861a4:	10800017 	ldw	r2,0(r2)
   861a8:	f800283a 	ret

000861ac <__locale_msgcharset>:
   861ac:	008002b4 	movhi	r2,10
   861b0:	10a3d804 	addi	r2,r2,-28832
   861b4:	f800283a 	ret

000861b8 <__locale_cjk_lang>:
   861b8:	0005883a 	mov	r2,zero
   861bc:	f800283a 	ret

000861c0 <_localeconv_r>:
   861c0:	008002b4 	movhi	r2,10
   861c4:	10a3e804 	addi	r2,r2,-28768
   861c8:	f800283a 	ret

000861cc <setlocale>:
   861cc:	008002b4 	movhi	r2,10
   861d0:	10a87f04 	addi	r2,r2,-24068
   861d4:	280d883a 	mov	r6,r5
   861d8:	200b883a 	mov	r5,r4
   861dc:	11000017 	ldw	r4,0(r2)
   861e0:	00861141 	jmpi	86114 <_setlocale_r>

000861e4 <localeconv>:
   861e4:	008002b4 	movhi	r2,10
   861e8:	10a3e804 	addi	r2,r2,-28768
   861ec:	f800283a 	ret

000861f0 <__smakebuf_r>:
   861f0:	2880030b 	ldhu	r2,12(r5)
   861f4:	10c0008c 	andi	r3,r2,2
   861f8:	1800411e 	bne	r3,zero,86300 <__smakebuf_r+0x110>
   861fc:	deffec04 	addi	sp,sp,-80
   86200:	dc000f15 	stw	r16,60(sp)
   86204:	2821883a 	mov	r16,r5
   86208:	2940038f 	ldh	r5,14(r5)
   8620c:	dc401015 	stw	r17,64(sp)
   86210:	dfc01315 	stw	ra,76(sp)
   86214:	dcc01215 	stw	r19,72(sp)
   86218:	dc801115 	stw	r18,68(sp)
   8621c:	2023883a 	mov	r17,r4
   86220:	28001c16 	blt	r5,zero,86294 <__smakebuf_r+0xa4>
   86224:	d80d883a 	mov	r6,sp
   86228:	00895940 	call	89594 <_fstat_r>
   8622c:	10001816 	blt	r2,zero,86290 <__smakebuf_r+0xa0>
   86230:	d8800117 	ldw	r2,4(sp)
   86234:	00e00014 	movui	r3,32768
   86238:	10bc000c 	andi	r2,r2,61440
   8623c:	14c80020 	cmpeqi	r19,r2,8192
   86240:	10c03726 	beq	r2,r3,86320 <__smakebuf_r+0x130>
   86244:	80c0030b 	ldhu	r3,12(r16)
   86248:	18c20014 	ori	r3,r3,2048
   8624c:	80c0030d 	sth	r3,12(r16)
   86250:	00c80004 	movi	r3,8192
   86254:	10c0521e 	bne	r2,r3,863a0 <__smakebuf_r+0x1b0>
   86258:	8140038f 	ldh	r5,14(r16)
   8625c:	8809883a 	mov	r4,r17
   86260:	0089ab80 	call	89ab8 <_isatty_r>
   86264:	10004c26 	beq	r2,zero,86398 <__smakebuf_r+0x1a8>
   86268:	8080030b 	ldhu	r2,12(r16)
   8626c:	80c010c4 	addi	r3,r16,67
   86270:	80c00015 	stw	r3,0(r16)
   86274:	10800054 	ori	r2,r2,1
   86278:	8080030d 	sth	r2,12(r16)
   8627c:	00800044 	movi	r2,1
   86280:	80c00415 	stw	r3,16(r16)
   86284:	80800515 	stw	r2,20(r16)
   86288:	04810004 	movi	r18,1024
   8628c:	00000706 	br	862ac <__smakebuf_r+0xbc>
   86290:	8080030b 	ldhu	r2,12(r16)
   86294:	10c0200c 	andi	r3,r2,128
   86298:	18001f1e 	bne	r3,zero,86318 <__smakebuf_r+0x128>
   8629c:	04810004 	movi	r18,1024
   862a0:	10820014 	ori	r2,r2,2048
   862a4:	8080030d 	sth	r2,12(r16)
   862a8:	0027883a 	mov	r19,zero
   862ac:	900b883a 	mov	r5,r18
   862b0:	8809883a 	mov	r4,r17
   862b4:	0080ce80 	call	80ce8 <_malloc_r>
   862b8:	10002c26 	beq	r2,zero,8636c <__smakebuf_r+0x17c>
   862bc:	80c0030b 	ldhu	r3,12(r16)
   862c0:	01000234 	movhi	r4,8
   862c4:	2115ec04 	addi	r4,r4,22448
   862c8:	89000f15 	stw	r4,60(r17)
   862cc:	18c02014 	ori	r3,r3,128
   862d0:	80c0030d 	sth	r3,12(r16)
   862d4:	80800015 	stw	r2,0(r16)
   862d8:	80800415 	stw	r2,16(r16)
   862dc:	84800515 	stw	r18,20(r16)
   862e0:	98001a1e 	bne	r19,zero,8634c <__smakebuf_r+0x15c>
   862e4:	dfc01317 	ldw	ra,76(sp)
   862e8:	dcc01217 	ldw	r19,72(sp)
   862ec:	dc801117 	ldw	r18,68(sp)
   862f0:	dc401017 	ldw	r17,64(sp)
   862f4:	dc000f17 	ldw	r16,60(sp)
   862f8:	dec01404 	addi	sp,sp,80
   862fc:	f800283a 	ret
   86300:	288010c4 	addi	r2,r5,67
   86304:	28800015 	stw	r2,0(r5)
   86308:	28800415 	stw	r2,16(r5)
   8630c:	00800044 	movi	r2,1
   86310:	28800515 	stw	r2,20(r5)
   86314:	f800283a 	ret
   86318:	04801004 	movi	r18,64
   8631c:	003fe006 	br	862a0 <__alt_data_end+0xfffc7aa0>
   86320:	81000a17 	ldw	r4,40(r16)
   86324:	00c00234 	movhi	r3,8
   86328:	18de4104 	addi	r3,r3,30980
   8632c:	20ffc51e 	bne	r4,r3,86244 <__alt_data_end+0xfffc7a44>
   86330:	8080030b 	ldhu	r2,12(r16)
   86334:	04810004 	movi	r18,1024
   86338:	84801315 	stw	r18,76(r16)
   8633c:	1484b03a 	or	r2,r2,r18
   86340:	8080030d 	sth	r2,12(r16)
   86344:	0027883a 	mov	r19,zero
   86348:	003fd806 	br	862ac <__alt_data_end+0xfffc7aac>
   8634c:	8140038f 	ldh	r5,14(r16)
   86350:	8809883a 	mov	r4,r17
   86354:	0089ab80 	call	89ab8 <_isatty_r>
   86358:	103fe226 	beq	r2,zero,862e4 <__alt_data_end+0xfffc7ae4>
   8635c:	8080030b 	ldhu	r2,12(r16)
   86360:	10800054 	ori	r2,r2,1
   86364:	8080030d 	sth	r2,12(r16)
   86368:	003fde06 	br	862e4 <__alt_data_end+0xfffc7ae4>
   8636c:	8080030b 	ldhu	r2,12(r16)
   86370:	10c0800c 	andi	r3,r2,512
   86374:	183fdb1e 	bne	r3,zero,862e4 <__alt_data_end+0xfffc7ae4>
   86378:	10800094 	ori	r2,r2,2
   8637c:	80c010c4 	addi	r3,r16,67
   86380:	8080030d 	sth	r2,12(r16)
   86384:	00800044 	movi	r2,1
   86388:	80c00015 	stw	r3,0(r16)
   8638c:	80c00415 	stw	r3,16(r16)
   86390:	80800515 	stw	r2,20(r16)
   86394:	003fd306 	br	862e4 <__alt_data_end+0xfffc7ae4>
   86398:	04810004 	movi	r18,1024
   8639c:	003fc306 	br	862ac <__alt_data_end+0xfffc7aac>
   863a0:	0027883a 	mov	r19,zero
   863a4:	04810004 	movi	r18,1024
   863a8:	003fc006 	br	862ac <__alt_data_end+0xfffc7aac>

000863ac <memchr>:
   863ac:	208000cc 	andi	r2,r4,3
   863b0:	280f883a 	mov	r7,r5
   863b4:	10003426 	beq	r2,zero,86488 <memchr+0xdc>
   863b8:	30bfffc4 	addi	r2,r6,-1
   863bc:	30001a26 	beq	r6,zero,86428 <memchr+0x7c>
   863c0:	20c00003 	ldbu	r3,0(r4)
   863c4:	29803fcc 	andi	r6,r5,255
   863c8:	30c0051e 	bne	r6,r3,863e0 <memchr+0x34>
   863cc:	00001806 	br	86430 <memchr+0x84>
   863d0:	10001526 	beq	r2,zero,86428 <memchr+0x7c>
   863d4:	20c00003 	ldbu	r3,0(r4)
   863d8:	10bfffc4 	addi	r2,r2,-1
   863dc:	30c01426 	beq	r6,r3,86430 <memchr+0x84>
   863e0:	21000044 	addi	r4,r4,1
   863e4:	20c000cc 	andi	r3,r4,3
   863e8:	183ff91e 	bne	r3,zero,863d0 <__alt_data_end+0xfffc7bd0>
   863ec:	020000c4 	movi	r8,3
   863f0:	40801136 	bltu	r8,r2,86438 <memchr+0x8c>
   863f4:	10000c26 	beq	r2,zero,86428 <memchr+0x7c>
   863f8:	20c00003 	ldbu	r3,0(r4)
   863fc:	29403fcc 	andi	r5,r5,255
   86400:	28c00b26 	beq	r5,r3,86430 <memchr+0x84>
   86404:	20c00044 	addi	r3,r4,1
   86408:	39803fcc 	andi	r6,r7,255
   8640c:	2089883a 	add	r4,r4,r2
   86410:	00000306 	br	86420 <memchr+0x74>
   86414:	18c00044 	addi	r3,r3,1
   86418:	197fffc3 	ldbu	r5,-1(r3)
   8641c:	31400526 	beq	r6,r5,86434 <memchr+0x88>
   86420:	1805883a 	mov	r2,r3
   86424:	20fffb1e 	bne	r4,r3,86414 <__alt_data_end+0xfffc7c14>
   86428:	0005883a 	mov	r2,zero
   8642c:	f800283a 	ret
   86430:	2005883a 	mov	r2,r4
   86434:	f800283a 	ret
   86438:	28c03fcc 	andi	r3,r5,255
   8643c:	1812923a 	slli	r9,r3,8
   86440:	02ffbff4 	movhi	r11,65279
   86444:	02a02074 	movhi	r10,32897
   86448:	48d2b03a 	or	r9,r9,r3
   8644c:	4806943a 	slli	r3,r9,16
   86450:	5affbfc4 	addi	r11,r11,-257
   86454:	52a02004 	addi	r10,r10,-32640
   86458:	48d2b03a 	or	r9,r9,r3
   8645c:	20c00017 	ldw	r3,0(r4)
   86460:	48c6f03a 	xor	r3,r9,r3
   86464:	1acd883a 	add	r6,r3,r11
   86468:	00c6303a 	nor	r3,zero,r3
   8646c:	30c6703a 	and	r3,r6,r3
   86470:	1a86703a 	and	r3,r3,r10
   86474:	183fe01e 	bne	r3,zero,863f8 <__alt_data_end+0xfffc7bf8>
   86478:	10bfff04 	addi	r2,r2,-4
   8647c:	21000104 	addi	r4,r4,4
   86480:	40bff636 	bltu	r8,r2,8645c <__alt_data_end+0xfffc7c5c>
   86484:	003fdb06 	br	863f4 <__alt_data_end+0xfffc7bf4>
   86488:	3005883a 	mov	r2,r6
   8648c:	003fd706 	br	863ec <__alt_data_end+0xfffc7bec>

00086490 <memcpy>:
   86490:	defffd04 	addi	sp,sp,-12
   86494:	dfc00215 	stw	ra,8(sp)
   86498:	dc400115 	stw	r17,4(sp)
   8649c:	dc000015 	stw	r16,0(sp)
   864a0:	00c003c4 	movi	r3,15
   864a4:	2005883a 	mov	r2,r4
   864a8:	1980452e 	bgeu	r3,r6,865c0 <memcpy+0x130>
   864ac:	2906b03a 	or	r3,r5,r4
   864b0:	18c000cc 	andi	r3,r3,3
   864b4:	1800441e 	bne	r3,zero,865c8 <memcpy+0x138>
   864b8:	347ffc04 	addi	r17,r6,-16
   864bc:	8822d13a 	srli	r17,r17,4
   864c0:	28c00104 	addi	r3,r5,4
   864c4:	23400104 	addi	r13,r4,4
   864c8:	8820913a 	slli	r16,r17,4
   864cc:	2b000204 	addi	r12,r5,8
   864d0:	22c00204 	addi	r11,r4,8
   864d4:	84000504 	addi	r16,r16,20
   864d8:	2a800304 	addi	r10,r5,12
   864dc:	22400304 	addi	r9,r4,12
   864e0:	2c21883a 	add	r16,r5,r16
   864e4:	2811883a 	mov	r8,r5
   864e8:	200f883a 	mov	r7,r4
   864ec:	41000017 	ldw	r4,0(r8)
   864f0:	1fc00017 	ldw	ra,0(r3)
   864f4:	63c00017 	ldw	r15,0(r12)
   864f8:	39000015 	stw	r4,0(r7)
   864fc:	53800017 	ldw	r14,0(r10)
   86500:	6fc00015 	stw	ra,0(r13)
   86504:	5bc00015 	stw	r15,0(r11)
   86508:	4b800015 	stw	r14,0(r9)
   8650c:	18c00404 	addi	r3,r3,16
   86510:	39c00404 	addi	r7,r7,16
   86514:	42000404 	addi	r8,r8,16
   86518:	6b400404 	addi	r13,r13,16
   8651c:	63000404 	addi	r12,r12,16
   86520:	5ac00404 	addi	r11,r11,16
   86524:	52800404 	addi	r10,r10,16
   86528:	4a400404 	addi	r9,r9,16
   8652c:	1c3fef1e 	bne	r3,r16,864ec <__alt_data_end+0xfffc7cec>
   86530:	89c00044 	addi	r7,r17,1
   86534:	380e913a 	slli	r7,r7,4
   86538:	310003cc 	andi	r4,r6,15
   8653c:	02c000c4 	movi	r11,3
   86540:	11c7883a 	add	r3,r2,r7
   86544:	29cb883a 	add	r5,r5,r7
   86548:	5900212e 	bgeu	r11,r4,865d0 <memcpy+0x140>
   8654c:	1813883a 	mov	r9,r3
   86550:	2811883a 	mov	r8,r5
   86554:	200f883a 	mov	r7,r4
   86558:	42800017 	ldw	r10,0(r8)
   8655c:	4a400104 	addi	r9,r9,4
   86560:	39ffff04 	addi	r7,r7,-4
   86564:	4abfff15 	stw	r10,-4(r9)
   86568:	42000104 	addi	r8,r8,4
   8656c:	59fffa36 	bltu	r11,r7,86558 <__alt_data_end+0xfffc7d58>
   86570:	213fff04 	addi	r4,r4,-4
   86574:	2008d0ba 	srli	r4,r4,2
   86578:	318000cc 	andi	r6,r6,3
   8657c:	21000044 	addi	r4,r4,1
   86580:	2109883a 	add	r4,r4,r4
   86584:	2109883a 	add	r4,r4,r4
   86588:	1907883a 	add	r3,r3,r4
   8658c:	290b883a 	add	r5,r5,r4
   86590:	30000626 	beq	r6,zero,865ac <memcpy+0x11c>
   86594:	198d883a 	add	r6,r3,r6
   86598:	29c00003 	ldbu	r7,0(r5)
   8659c:	18c00044 	addi	r3,r3,1
   865a0:	29400044 	addi	r5,r5,1
   865a4:	19ffffc5 	stb	r7,-1(r3)
   865a8:	19bffb1e 	bne	r3,r6,86598 <__alt_data_end+0xfffc7d98>
   865ac:	dfc00217 	ldw	ra,8(sp)
   865b0:	dc400117 	ldw	r17,4(sp)
   865b4:	dc000017 	ldw	r16,0(sp)
   865b8:	dec00304 	addi	sp,sp,12
   865bc:	f800283a 	ret
   865c0:	2007883a 	mov	r3,r4
   865c4:	003ff206 	br	86590 <__alt_data_end+0xfffc7d90>
   865c8:	2007883a 	mov	r3,r4
   865cc:	003ff106 	br	86594 <__alt_data_end+0xfffc7d94>
   865d0:	200d883a 	mov	r6,r4
   865d4:	003fee06 	br	86590 <__alt_data_end+0xfffc7d90>

000865d8 <memset>:
   865d8:	20c000cc 	andi	r3,r4,3
   865dc:	2005883a 	mov	r2,r4
   865e0:	18004426 	beq	r3,zero,866f4 <memset+0x11c>
   865e4:	31ffffc4 	addi	r7,r6,-1
   865e8:	30004026 	beq	r6,zero,866ec <memset+0x114>
   865ec:	2813883a 	mov	r9,r5
   865f0:	200d883a 	mov	r6,r4
   865f4:	2007883a 	mov	r3,r4
   865f8:	00000406 	br	8660c <memset+0x34>
   865fc:	3a3fffc4 	addi	r8,r7,-1
   86600:	31800044 	addi	r6,r6,1
   86604:	38003926 	beq	r7,zero,866ec <memset+0x114>
   86608:	400f883a 	mov	r7,r8
   8660c:	18c00044 	addi	r3,r3,1
   86610:	32400005 	stb	r9,0(r6)
   86614:	1a0000cc 	andi	r8,r3,3
   86618:	403ff81e 	bne	r8,zero,865fc <__alt_data_end+0xfffc7dfc>
   8661c:	010000c4 	movi	r4,3
   86620:	21c02d2e 	bgeu	r4,r7,866d8 <memset+0x100>
   86624:	29003fcc 	andi	r4,r5,255
   86628:	200c923a 	slli	r6,r4,8
   8662c:	3108b03a 	or	r4,r6,r4
   86630:	200c943a 	slli	r6,r4,16
   86634:	218cb03a 	or	r6,r4,r6
   86638:	010003c4 	movi	r4,15
   8663c:	21c0182e 	bgeu	r4,r7,866a0 <memset+0xc8>
   86640:	3b3ffc04 	addi	r12,r7,-16
   86644:	6018d13a 	srli	r12,r12,4
   86648:	1a000104 	addi	r8,r3,4
   8664c:	1ac00204 	addi	r11,r3,8
   86650:	6008913a 	slli	r4,r12,4
   86654:	1a800304 	addi	r10,r3,12
   86658:	1813883a 	mov	r9,r3
   8665c:	21000504 	addi	r4,r4,20
   86660:	1909883a 	add	r4,r3,r4
   86664:	49800015 	stw	r6,0(r9)
   86668:	41800015 	stw	r6,0(r8)
   8666c:	59800015 	stw	r6,0(r11)
   86670:	51800015 	stw	r6,0(r10)
   86674:	42000404 	addi	r8,r8,16
   86678:	4a400404 	addi	r9,r9,16
   8667c:	5ac00404 	addi	r11,r11,16
   86680:	52800404 	addi	r10,r10,16
   86684:	413ff71e 	bne	r8,r4,86664 <__alt_data_end+0xfffc7e64>
   86688:	63000044 	addi	r12,r12,1
   8668c:	6018913a 	slli	r12,r12,4
   86690:	39c003cc 	andi	r7,r7,15
   86694:	010000c4 	movi	r4,3
   86698:	1b07883a 	add	r3,r3,r12
   8669c:	21c00e2e 	bgeu	r4,r7,866d8 <memset+0x100>
   866a0:	1813883a 	mov	r9,r3
   866a4:	3811883a 	mov	r8,r7
   866a8:	010000c4 	movi	r4,3
   866ac:	49800015 	stw	r6,0(r9)
   866b0:	423fff04 	addi	r8,r8,-4
   866b4:	4a400104 	addi	r9,r9,4
   866b8:	223ffc36 	bltu	r4,r8,866ac <__alt_data_end+0xfffc7eac>
   866bc:	393fff04 	addi	r4,r7,-4
   866c0:	2008d0ba 	srli	r4,r4,2
   866c4:	39c000cc 	andi	r7,r7,3
   866c8:	21000044 	addi	r4,r4,1
   866cc:	2109883a 	add	r4,r4,r4
   866d0:	2109883a 	add	r4,r4,r4
   866d4:	1907883a 	add	r3,r3,r4
   866d8:	38000526 	beq	r7,zero,866f0 <memset+0x118>
   866dc:	19cf883a 	add	r7,r3,r7
   866e0:	19400005 	stb	r5,0(r3)
   866e4:	18c00044 	addi	r3,r3,1
   866e8:	38fffd1e 	bne	r7,r3,866e0 <__alt_data_end+0xfffc7ee0>
   866ec:	f800283a 	ret
   866f0:	f800283a 	ret
   866f4:	2007883a 	mov	r3,r4
   866f8:	300f883a 	mov	r7,r6
   866fc:	003fc706 	br	8661c <__alt_data_end+0xfffc7e1c>

00086700 <_Balloc>:
   86700:	20801317 	ldw	r2,76(r4)
   86704:	defffc04 	addi	sp,sp,-16
   86708:	dc400115 	stw	r17,4(sp)
   8670c:	dc000015 	stw	r16,0(sp)
   86710:	dfc00315 	stw	ra,12(sp)
   86714:	dc800215 	stw	r18,8(sp)
   86718:	2023883a 	mov	r17,r4
   8671c:	2821883a 	mov	r16,r5
   86720:	10000f26 	beq	r2,zero,86760 <_Balloc+0x60>
   86724:	8407883a 	add	r3,r16,r16
   86728:	18c7883a 	add	r3,r3,r3
   8672c:	10c7883a 	add	r3,r2,r3
   86730:	18800017 	ldw	r2,0(r3)
   86734:	10001126 	beq	r2,zero,8677c <_Balloc+0x7c>
   86738:	11000017 	ldw	r4,0(r2)
   8673c:	19000015 	stw	r4,0(r3)
   86740:	10000415 	stw	zero,16(r2)
   86744:	10000315 	stw	zero,12(r2)
   86748:	dfc00317 	ldw	ra,12(sp)
   8674c:	dc800217 	ldw	r18,8(sp)
   86750:	dc400117 	ldw	r17,4(sp)
   86754:	dc000017 	ldw	r16,0(sp)
   86758:	dec00404 	addi	sp,sp,16
   8675c:	f800283a 	ret
   86760:	01800844 	movi	r6,33
   86764:	01400104 	movi	r5,4
   86768:	00891ac0 	call	891ac <_calloc_r>
   8676c:	88801315 	stw	r2,76(r17)
   86770:	103fec1e 	bne	r2,zero,86724 <__alt_data_end+0xfffc7f24>
   86774:	0005883a 	mov	r2,zero
   86778:	003ff306 	br	86748 <__alt_data_end+0xfffc7f48>
   8677c:	01400044 	movi	r5,1
   86780:	2c24983a 	sll	r18,r5,r16
   86784:	8809883a 	mov	r4,r17
   86788:	91800144 	addi	r6,r18,5
   8678c:	318d883a 	add	r6,r6,r6
   86790:	318d883a 	add	r6,r6,r6
   86794:	00891ac0 	call	891ac <_calloc_r>
   86798:	103ff626 	beq	r2,zero,86774 <__alt_data_end+0xfffc7f74>
   8679c:	14000115 	stw	r16,4(r2)
   867a0:	14800215 	stw	r18,8(r2)
   867a4:	003fe606 	br	86740 <__alt_data_end+0xfffc7f40>

000867a8 <_Bfree>:
   867a8:	28000826 	beq	r5,zero,867cc <_Bfree+0x24>
   867ac:	28c00117 	ldw	r3,4(r5)
   867b0:	20801317 	ldw	r2,76(r4)
   867b4:	18c7883a 	add	r3,r3,r3
   867b8:	18c7883a 	add	r3,r3,r3
   867bc:	10c5883a 	add	r2,r2,r3
   867c0:	10c00017 	ldw	r3,0(r2)
   867c4:	28c00015 	stw	r3,0(r5)
   867c8:	11400015 	stw	r5,0(r2)
   867cc:	f800283a 	ret

000867d0 <__multadd>:
   867d0:	defff704 	addi	sp,sp,-36
   867d4:	dc800215 	stw	r18,8(sp)
   867d8:	2c800417 	ldw	r18,16(r5)
   867dc:	dd800615 	stw	r22,24(sp)
   867e0:	dd400515 	stw	r21,20(sp)
   867e4:	dd000415 	stw	r20,16(sp)
   867e8:	dcc00315 	stw	r19,12(sp)
   867ec:	dc400115 	stw	r17,4(sp)
   867f0:	dc000015 	stw	r16,0(sp)
   867f4:	dfc00815 	stw	ra,32(sp)
   867f8:	ddc00715 	stw	r23,28(sp)
   867fc:	2827883a 	mov	r19,r5
   86800:	2029883a 	mov	r20,r4
   86804:	3023883a 	mov	r17,r6
   86808:	3821883a 	mov	r16,r7
   8680c:	2d400504 	addi	r21,r5,20
   86810:	002d883a 	mov	r22,zero
   86814:	adc00017 	ldw	r23,0(r21)
   86818:	880b883a 	mov	r5,r17
   8681c:	ad400104 	addi	r21,r21,4
   86820:	b93fffcc 	andi	r4,r23,65535
   86824:	008b18c0 	call	8b18c <__mulsi3>
   86828:	b808d43a 	srli	r4,r23,16
   8682c:	880b883a 	mov	r5,r17
   86830:	1421883a 	add	r16,r2,r16
   86834:	008b18c0 	call	8b18c <__mulsi3>
   86838:	800ed43a 	srli	r7,r16,16
   8683c:	80ffffcc 	andi	r3,r16,65535
   86840:	b5800044 	addi	r22,r22,1
   86844:	11c5883a 	add	r2,r2,r7
   86848:	100e943a 	slli	r7,r2,16
   8684c:	1020d43a 	srli	r16,r2,16
   86850:	38c7883a 	add	r3,r7,r3
   86854:	a8ffff15 	stw	r3,-4(r21)
   86858:	b4bfee16 	blt	r22,r18,86814 <__alt_data_end+0xfffc8014>
   8685c:	80000926 	beq	r16,zero,86884 <__multadd+0xb4>
   86860:	98800217 	ldw	r2,8(r19)
   86864:	9080130e 	bge	r18,r2,868b4 <__multadd+0xe4>
   86868:	90800144 	addi	r2,r18,5
   8686c:	1085883a 	add	r2,r2,r2
   86870:	1085883a 	add	r2,r2,r2
   86874:	9885883a 	add	r2,r19,r2
   86878:	14000015 	stw	r16,0(r2)
   8687c:	94800044 	addi	r18,r18,1
   86880:	9c800415 	stw	r18,16(r19)
   86884:	9805883a 	mov	r2,r19
   86888:	dfc00817 	ldw	ra,32(sp)
   8688c:	ddc00717 	ldw	r23,28(sp)
   86890:	dd800617 	ldw	r22,24(sp)
   86894:	dd400517 	ldw	r21,20(sp)
   86898:	dd000417 	ldw	r20,16(sp)
   8689c:	dcc00317 	ldw	r19,12(sp)
   868a0:	dc800217 	ldw	r18,8(sp)
   868a4:	dc400117 	ldw	r17,4(sp)
   868a8:	dc000017 	ldw	r16,0(sp)
   868ac:	dec00904 	addi	sp,sp,36
   868b0:	f800283a 	ret
   868b4:	99400117 	ldw	r5,4(r19)
   868b8:	a009883a 	mov	r4,r20
   868bc:	29400044 	addi	r5,r5,1
   868c0:	00867000 	call	86700 <_Balloc>
   868c4:	99800417 	ldw	r6,16(r19)
   868c8:	99400304 	addi	r5,r19,12
   868cc:	11000304 	addi	r4,r2,12
   868d0:	31800084 	addi	r6,r6,2
   868d4:	318d883a 	add	r6,r6,r6
   868d8:	318d883a 	add	r6,r6,r6
   868dc:	1023883a 	mov	r17,r2
   868e0:	00864900 	call	86490 <memcpy>
   868e4:	98000a26 	beq	r19,zero,86910 <__multadd+0x140>
   868e8:	98c00117 	ldw	r3,4(r19)
   868ec:	a0801317 	ldw	r2,76(r20)
   868f0:	18c7883a 	add	r3,r3,r3
   868f4:	18c7883a 	add	r3,r3,r3
   868f8:	10c5883a 	add	r2,r2,r3
   868fc:	10c00017 	ldw	r3,0(r2)
   86900:	98c00015 	stw	r3,0(r19)
   86904:	14c00015 	stw	r19,0(r2)
   86908:	8827883a 	mov	r19,r17
   8690c:	003fd606 	br	86868 <__alt_data_end+0xfffc8068>
   86910:	8827883a 	mov	r19,r17
   86914:	003fd406 	br	86868 <__alt_data_end+0xfffc8068>

00086918 <__s2b>:
   86918:	defff904 	addi	sp,sp,-28
   8691c:	dc400115 	stw	r17,4(sp)
   86920:	dc000015 	stw	r16,0(sp)
   86924:	2023883a 	mov	r17,r4
   86928:	2821883a 	mov	r16,r5
   8692c:	39000204 	addi	r4,r7,8
   86930:	01400244 	movi	r5,9
   86934:	dcc00315 	stw	r19,12(sp)
   86938:	dc800215 	stw	r18,8(sp)
   8693c:	dfc00615 	stw	ra,24(sp)
   86940:	dd400515 	stw	r21,20(sp)
   86944:	dd000415 	stw	r20,16(sp)
   86948:	3825883a 	mov	r18,r7
   8694c:	3027883a 	mov	r19,r6
   86950:	0080b0c0 	call	80b0c <__divsi3>
   86954:	00c00044 	movi	r3,1
   86958:	000b883a 	mov	r5,zero
   8695c:	1880030e 	bge	r3,r2,8696c <__s2b+0x54>
   86960:	18c7883a 	add	r3,r3,r3
   86964:	29400044 	addi	r5,r5,1
   86968:	18bffd16 	blt	r3,r2,86960 <__alt_data_end+0xfffc8160>
   8696c:	8809883a 	mov	r4,r17
   86970:	00867000 	call	86700 <_Balloc>
   86974:	d8c00717 	ldw	r3,28(sp)
   86978:	10c00515 	stw	r3,20(r2)
   8697c:	00c00044 	movi	r3,1
   86980:	10c00415 	stw	r3,16(r2)
   86984:	00c00244 	movi	r3,9
   86988:	1cc0210e 	bge	r3,r19,86a10 <__s2b+0xf8>
   8698c:	80eb883a 	add	r21,r16,r3
   86990:	a829883a 	mov	r20,r21
   86994:	84e1883a 	add	r16,r16,r19
   86998:	a1c00007 	ldb	r7,0(r20)
   8699c:	01800284 	movi	r6,10
   869a0:	a5000044 	addi	r20,r20,1
   869a4:	100b883a 	mov	r5,r2
   869a8:	39fff404 	addi	r7,r7,-48
   869ac:	8809883a 	mov	r4,r17
   869b0:	00867d00 	call	867d0 <__multadd>
   869b4:	a43ff81e 	bne	r20,r16,86998 <__alt_data_end+0xfffc8198>
   869b8:	ace1883a 	add	r16,r21,r19
   869bc:	843ffe04 	addi	r16,r16,-8
   869c0:	9c800a0e 	bge	r19,r18,869ec <__s2b+0xd4>
   869c4:	94e5c83a 	sub	r18,r18,r19
   869c8:	84a5883a 	add	r18,r16,r18
   869cc:	81c00007 	ldb	r7,0(r16)
   869d0:	01800284 	movi	r6,10
   869d4:	84000044 	addi	r16,r16,1
   869d8:	100b883a 	mov	r5,r2
   869dc:	39fff404 	addi	r7,r7,-48
   869e0:	8809883a 	mov	r4,r17
   869e4:	00867d00 	call	867d0 <__multadd>
   869e8:	84bff81e 	bne	r16,r18,869cc <__alt_data_end+0xfffc81cc>
   869ec:	dfc00617 	ldw	ra,24(sp)
   869f0:	dd400517 	ldw	r21,20(sp)
   869f4:	dd000417 	ldw	r20,16(sp)
   869f8:	dcc00317 	ldw	r19,12(sp)
   869fc:	dc800217 	ldw	r18,8(sp)
   86a00:	dc400117 	ldw	r17,4(sp)
   86a04:	dc000017 	ldw	r16,0(sp)
   86a08:	dec00704 	addi	sp,sp,28
   86a0c:	f800283a 	ret
   86a10:	84000284 	addi	r16,r16,10
   86a14:	1827883a 	mov	r19,r3
   86a18:	003fe906 	br	869c0 <__alt_data_end+0xfffc81c0>

00086a1c <__hi0bits>:
   86a1c:	20bfffec 	andhi	r2,r4,65535
   86a20:	1000141e 	bne	r2,zero,86a74 <__hi0bits+0x58>
   86a24:	2008943a 	slli	r4,r4,16
   86a28:	00800404 	movi	r2,16
   86a2c:	20ffc02c 	andhi	r3,r4,65280
   86a30:	1800021e 	bne	r3,zero,86a3c <__hi0bits+0x20>
   86a34:	2008923a 	slli	r4,r4,8
   86a38:	10800204 	addi	r2,r2,8
   86a3c:	20fc002c 	andhi	r3,r4,61440
   86a40:	1800021e 	bne	r3,zero,86a4c <__hi0bits+0x30>
   86a44:	2008913a 	slli	r4,r4,4
   86a48:	10800104 	addi	r2,r2,4
   86a4c:	20f0002c 	andhi	r3,r4,49152
   86a50:	1800031e 	bne	r3,zero,86a60 <__hi0bits+0x44>
   86a54:	2109883a 	add	r4,r4,r4
   86a58:	10800084 	addi	r2,r2,2
   86a5c:	2109883a 	add	r4,r4,r4
   86a60:	20000316 	blt	r4,zero,86a70 <__hi0bits+0x54>
   86a64:	2110002c 	andhi	r4,r4,16384
   86a68:	2000041e 	bne	r4,zero,86a7c <__hi0bits+0x60>
   86a6c:	00800804 	movi	r2,32
   86a70:	f800283a 	ret
   86a74:	0005883a 	mov	r2,zero
   86a78:	003fec06 	br	86a2c <__alt_data_end+0xfffc822c>
   86a7c:	10800044 	addi	r2,r2,1
   86a80:	f800283a 	ret

00086a84 <__lo0bits>:
   86a84:	20c00017 	ldw	r3,0(r4)
   86a88:	188001cc 	andi	r2,r3,7
   86a8c:	10000826 	beq	r2,zero,86ab0 <__lo0bits+0x2c>
   86a90:	1880004c 	andi	r2,r3,1
   86a94:	1000211e 	bne	r2,zero,86b1c <__lo0bits+0x98>
   86a98:	1880008c 	andi	r2,r3,2
   86a9c:	1000211e 	bne	r2,zero,86b24 <__lo0bits+0xa0>
   86aa0:	1806d0ba 	srli	r3,r3,2
   86aa4:	00800084 	movi	r2,2
   86aa8:	20c00015 	stw	r3,0(r4)
   86aac:	f800283a 	ret
   86ab0:	18bfffcc 	andi	r2,r3,65535
   86ab4:	10001326 	beq	r2,zero,86b04 <__lo0bits+0x80>
   86ab8:	0005883a 	mov	r2,zero
   86abc:	19403fcc 	andi	r5,r3,255
   86ac0:	2800021e 	bne	r5,zero,86acc <__lo0bits+0x48>
   86ac4:	1806d23a 	srli	r3,r3,8
   86ac8:	10800204 	addi	r2,r2,8
   86acc:	194003cc 	andi	r5,r3,15
   86ad0:	2800021e 	bne	r5,zero,86adc <__lo0bits+0x58>
   86ad4:	1806d13a 	srli	r3,r3,4
   86ad8:	10800104 	addi	r2,r2,4
   86adc:	194000cc 	andi	r5,r3,3
   86ae0:	2800021e 	bne	r5,zero,86aec <__lo0bits+0x68>
   86ae4:	1806d0ba 	srli	r3,r3,2
   86ae8:	10800084 	addi	r2,r2,2
   86aec:	1940004c 	andi	r5,r3,1
   86af0:	2800081e 	bne	r5,zero,86b14 <__lo0bits+0x90>
   86af4:	1806d07a 	srli	r3,r3,1
   86af8:	1800051e 	bne	r3,zero,86b10 <__lo0bits+0x8c>
   86afc:	00800804 	movi	r2,32
   86b00:	f800283a 	ret
   86b04:	1806d43a 	srli	r3,r3,16
   86b08:	00800404 	movi	r2,16
   86b0c:	003feb06 	br	86abc <__alt_data_end+0xfffc82bc>
   86b10:	10800044 	addi	r2,r2,1
   86b14:	20c00015 	stw	r3,0(r4)
   86b18:	f800283a 	ret
   86b1c:	0005883a 	mov	r2,zero
   86b20:	f800283a 	ret
   86b24:	1806d07a 	srli	r3,r3,1
   86b28:	00800044 	movi	r2,1
   86b2c:	20c00015 	stw	r3,0(r4)
   86b30:	f800283a 	ret

00086b34 <__i2b>:
   86b34:	defffd04 	addi	sp,sp,-12
   86b38:	dc000015 	stw	r16,0(sp)
   86b3c:	04000044 	movi	r16,1
   86b40:	dc400115 	stw	r17,4(sp)
   86b44:	2823883a 	mov	r17,r5
   86b48:	800b883a 	mov	r5,r16
   86b4c:	dfc00215 	stw	ra,8(sp)
   86b50:	00867000 	call	86700 <_Balloc>
   86b54:	14400515 	stw	r17,20(r2)
   86b58:	14000415 	stw	r16,16(r2)
   86b5c:	dfc00217 	ldw	ra,8(sp)
   86b60:	dc400117 	ldw	r17,4(sp)
   86b64:	dc000017 	ldw	r16,0(sp)
   86b68:	dec00304 	addi	sp,sp,12
   86b6c:	f800283a 	ret

00086b70 <__multiply>:
   86b70:	deffef04 	addi	sp,sp,-68
   86b74:	dc400815 	stw	r17,32(sp)
   86b78:	dc000715 	stw	r16,28(sp)
   86b7c:	34400417 	ldw	r17,16(r6)
   86b80:	2c000417 	ldw	r16,16(r5)
   86b84:	dd800d15 	stw	r22,52(sp)
   86b88:	dc800915 	stw	r18,36(sp)
   86b8c:	dfc01015 	stw	ra,64(sp)
   86b90:	df000f15 	stw	fp,60(sp)
   86b94:	ddc00e15 	stw	r23,56(sp)
   86b98:	dd400c15 	stw	r21,48(sp)
   86b9c:	dd000b15 	stw	r20,44(sp)
   86ba0:	dcc00a15 	stw	r19,40(sp)
   86ba4:	2825883a 	mov	r18,r5
   86ba8:	302d883a 	mov	r22,r6
   86bac:	8440050e 	bge	r16,r17,86bc4 <__multiply+0x54>
   86bb0:	8007883a 	mov	r3,r16
   86bb4:	3025883a 	mov	r18,r6
   86bb8:	8821883a 	mov	r16,r17
   86bbc:	282d883a 	mov	r22,r5
   86bc0:	1823883a 	mov	r17,r3
   86bc4:	90800217 	ldw	r2,8(r18)
   86bc8:	8447883a 	add	r3,r16,r17
   86bcc:	d8c00215 	stw	r3,8(sp)
   86bd0:	91400117 	ldw	r5,4(r18)
   86bd4:	10c0010e 	bge	r2,r3,86bdc <__multiply+0x6c>
   86bd8:	29400044 	addi	r5,r5,1
   86bdc:	00867000 	call	86700 <_Balloc>
   86be0:	d8c00217 	ldw	r3,8(sp)
   86be4:	d8800615 	stw	r2,24(sp)
   86be8:	18eb883a 	add	r21,r3,r3
   86bec:	ad6b883a 	add	r21,r21,r21
   86bf0:	10c00504 	addi	r3,r2,20
   86bf4:	1d6b883a 	add	r21,r3,r21
   86bf8:	d8c00115 	stw	r3,4(sp)
   86bfc:	dd400315 	stw	r21,12(sp)
   86c00:	1805883a 	mov	r2,r3
   86c04:	1d40042e 	bgeu	r3,r21,86c18 <__multiply+0xa8>
   86c08:	d8c00317 	ldw	r3,12(sp)
   86c0c:	10000015 	stw	zero,0(r2)
   86c10:	10800104 	addi	r2,r2,4
   86c14:	10fffc36 	bltu	r2,r3,86c08 <__alt_data_end+0xfffc8408>
   86c18:	8c63883a 	add	r17,r17,r17
   86c1c:	b5800504 	addi	r22,r22,20
   86c20:	8c63883a 	add	r17,r17,r17
   86c24:	94800504 	addi	r18,r18,20
   86c28:	8421883a 	add	r16,r16,r16
   86c2c:	b463883a 	add	r17,r22,r17
   86c30:	8421883a 	add	r16,r16,r16
   86c34:	dd800015 	stw	r22,0(sp)
   86c38:	dc800415 	stw	r18,16(sp)
   86c3c:	dc400515 	stw	r17,20(sp)
   86c40:	9429883a 	add	r20,r18,r16
   86c44:	b4404f2e 	bgeu	r22,r17,86d84 <__multiply+0x214>
   86c48:	d8c00017 	ldw	r3,0(sp)
   86c4c:	1c800017 	ldw	r18,0(r3)
   86c50:	947fffcc 	andi	r17,r18,65535
   86c54:	88001e26 	beq	r17,zero,86cd0 <__multiply+0x160>
   86c58:	dd800117 	ldw	r22,4(sp)
   86c5c:	dd400417 	ldw	r21,16(sp)
   86c60:	0027883a 	mov	r19,zero
   86c64:	ac800017 	ldw	r18,0(r21)
   86c68:	b4000017 	ldw	r16,0(r22)
   86c6c:	880b883a 	mov	r5,r17
   86c70:	913fffcc 	andi	r4,r18,65535
   86c74:	008b18c0 	call	8b18c <__mulsi3>
   86c78:	9008d43a 	srli	r4,r18,16
   86c7c:	84bfffcc 	andi	r18,r16,65535
   86c80:	1485883a 	add	r2,r2,r18
   86c84:	14e5883a 	add	r18,r2,r19
   86c88:	8020d43a 	srli	r16,r16,16
   86c8c:	9026d43a 	srli	r19,r18,16
   86c90:	880b883a 	mov	r5,r17
   86c94:	008b18c0 	call	8b18c <__mulsi3>
   86c98:	1405883a 	add	r2,r2,r16
   86c9c:	14e1883a 	add	r16,r2,r19
   86ca0:	90ffffcc 	andi	r3,r18,65535
   86ca4:	8024943a 	slli	r18,r16,16
   86ca8:	ad400104 	addi	r21,r21,4
   86cac:	b005883a 	mov	r2,r22
   86cb0:	90c6b03a 	or	r3,r18,r3
   86cb4:	b0c00015 	stw	r3,0(r22)
   86cb8:	8026d43a 	srli	r19,r16,16
   86cbc:	b5800104 	addi	r22,r22,4
   86cc0:	ad3fe836 	bltu	r21,r20,86c64 <__alt_data_end+0xfffc8464>
   86cc4:	d8c00017 	ldw	r3,0(sp)
   86cc8:	14c00115 	stw	r19,4(r2)
   86ccc:	1c800017 	ldw	r18,0(r3)
   86cd0:	9024d43a 	srli	r18,r18,16
   86cd4:	90002226 	beq	r18,zero,86d60 <__multiply+0x1f0>
   86cd8:	d8c00117 	ldw	r3,4(sp)
   86cdc:	dd800417 	ldw	r22,16(sp)
   86ce0:	002f883a 	mov	r23,zero
   86ce4:	1f000017 	ldw	fp,0(r3)
   86ce8:	1823883a 	mov	r17,r3
   86cec:	182b883a 	mov	r21,r3
   86cf0:	e021883a 	mov	r16,fp
   86cf4:	00000106 	br	86cfc <__multiply+0x18c>
   86cf8:	982b883a 	mov	r21,r19
   86cfc:	b100000b 	ldhu	r4,0(r22)
   86d00:	8020d43a 	srli	r16,r16,16
   86d04:	900b883a 	mov	r5,r18
   86d08:	008b18c0 	call	8b18c <__mulsi3>
   86d0c:	1405883a 	add	r2,r2,r16
   86d10:	15ef883a 	add	r23,r2,r23
   86d14:	b804943a 	slli	r2,r23,16
   86d18:	e0ffffcc 	andi	r3,fp,65535
   86d1c:	8c400104 	addi	r17,r17,4
   86d20:	10c6b03a 	or	r3,r2,r3
   86d24:	88ffff15 	stw	r3,-4(r17)
   86d28:	b5800104 	addi	r22,r22,4
   86d2c:	b13fff17 	ldw	r4,-4(r22)
   86d30:	acc00104 	addi	r19,r21,4
   86d34:	900b883a 	mov	r5,r18
   86d38:	2008d43a 	srli	r4,r4,16
   86d3c:	9c000017 	ldw	r16,0(r19)
   86d40:	008b18c0 	call	8b18c <__mulsi3>
   86d44:	b806d43a 	srli	r3,r23,16
   86d48:	813fffcc 	andi	r4,r16,65535
   86d4c:	1105883a 	add	r2,r2,r4
   86d50:	10f9883a 	add	fp,r2,r3
   86d54:	e02ed43a 	srli	r23,fp,16
   86d58:	b53fe736 	bltu	r22,r20,86cf8 <__alt_data_end+0xfffc84f8>
   86d5c:	af000115 	stw	fp,4(r21)
   86d60:	d8c00017 	ldw	r3,0(sp)
   86d64:	d9000517 	ldw	r4,20(sp)
   86d68:	18c00104 	addi	r3,r3,4
   86d6c:	d8c00015 	stw	r3,0(sp)
   86d70:	d8c00117 	ldw	r3,4(sp)
   86d74:	18c00104 	addi	r3,r3,4
   86d78:	d8c00115 	stw	r3,4(sp)
   86d7c:	d8c00017 	ldw	r3,0(sp)
   86d80:	193fb136 	bltu	r3,r4,86c48 <__alt_data_end+0xfffc8448>
   86d84:	d8c00217 	ldw	r3,8(sp)
   86d88:	00c00c0e 	bge	zero,r3,86dbc <__multiply+0x24c>
   86d8c:	d8c00317 	ldw	r3,12(sp)
   86d90:	18bfff17 	ldw	r2,-4(r3)
   86d94:	1d7fff04 	addi	r21,r3,-4
   86d98:	10000326 	beq	r2,zero,86da8 <__multiply+0x238>
   86d9c:	00000706 	br	86dbc <__multiply+0x24c>
   86da0:	a8800017 	ldw	r2,0(r21)
   86da4:	1000051e 	bne	r2,zero,86dbc <__multiply+0x24c>
   86da8:	d8c00217 	ldw	r3,8(sp)
   86dac:	ad7fff04 	addi	r21,r21,-4
   86db0:	18ffffc4 	addi	r3,r3,-1
   86db4:	d8c00215 	stw	r3,8(sp)
   86db8:	183ff91e 	bne	r3,zero,86da0 <__alt_data_end+0xfffc85a0>
   86dbc:	d8c00617 	ldw	r3,24(sp)
   86dc0:	d9000217 	ldw	r4,8(sp)
   86dc4:	1805883a 	mov	r2,r3
   86dc8:	19000415 	stw	r4,16(r3)
   86dcc:	dfc01017 	ldw	ra,64(sp)
   86dd0:	df000f17 	ldw	fp,60(sp)
   86dd4:	ddc00e17 	ldw	r23,56(sp)
   86dd8:	dd800d17 	ldw	r22,52(sp)
   86ddc:	dd400c17 	ldw	r21,48(sp)
   86de0:	dd000b17 	ldw	r20,44(sp)
   86de4:	dcc00a17 	ldw	r19,40(sp)
   86de8:	dc800917 	ldw	r18,36(sp)
   86dec:	dc400817 	ldw	r17,32(sp)
   86df0:	dc000717 	ldw	r16,28(sp)
   86df4:	dec01104 	addi	sp,sp,68
   86df8:	f800283a 	ret

00086dfc <__pow5mult>:
   86dfc:	defffa04 	addi	sp,sp,-24
   86e00:	dcc00315 	stw	r19,12(sp)
   86e04:	dc000015 	stw	r16,0(sp)
   86e08:	dfc00515 	stw	ra,20(sp)
   86e0c:	dd000415 	stw	r20,16(sp)
   86e10:	dc800215 	stw	r18,8(sp)
   86e14:	dc400115 	stw	r17,4(sp)
   86e18:	308000cc 	andi	r2,r6,3
   86e1c:	3021883a 	mov	r16,r6
   86e20:	2027883a 	mov	r19,r4
   86e24:	10002f1e 	bne	r2,zero,86ee4 <__pow5mult+0xe8>
   86e28:	2825883a 	mov	r18,r5
   86e2c:	8021d0ba 	srai	r16,r16,2
   86e30:	80001a26 	beq	r16,zero,86e9c <__pow5mult+0xa0>
   86e34:	9c401217 	ldw	r17,72(r19)
   86e38:	8800061e 	bne	r17,zero,86e54 <__pow5mult+0x58>
   86e3c:	00003406 	br	86f10 <__pow5mult+0x114>
   86e40:	8021d07a 	srai	r16,r16,1
   86e44:	80001526 	beq	r16,zero,86e9c <__pow5mult+0xa0>
   86e48:	88800017 	ldw	r2,0(r17)
   86e4c:	10001c26 	beq	r2,zero,86ec0 <__pow5mult+0xc4>
   86e50:	1023883a 	mov	r17,r2
   86e54:	8080004c 	andi	r2,r16,1
   86e58:	103ff926 	beq	r2,zero,86e40 <__alt_data_end+0xfffc8640>
   86e5c:	880d883a 	mov	r6,r17
   86e60:	900b883a 	mov	r5,r18
   86e64:	9809883a 	mov	r4,r19
   86e68:	0086b700 	call	86b70 <__multiply>
   86e6c:	90001b26 	beq	r18,zero,86edc <__pow5mult+0xe0>
   86e70:	91000117 	ldw	r4,4(r18)
   86e74:	98c01317 	ldw	r3,76(r19)
   86e78:	8021d07a 	srai	r16,r16,1
   86e7c:	2109883a 	add	r4,r4,r4
   86e80:	2109883a 	add	r4,r4,r4
   86e84:	1907883a 	add	r3,r3,r4
   86e88:	19000017 	ldw	r4,0(r3)
   86e8c:	91000015 	stw	r4,0(r18)
   86e90:	1c800015 	stw	r18,0(r3)
   86e94:	1025883a 	mov	r18,r2
   86e98:	803feb1e 	bne	r16,zero,86e48 <__alt_data_end+0xfffc8648>
   86e9c:	9005883a 	mov	r2,r18
   86ea0:	dfc00517 	ldw	ra,20(sp)
   86ea4:	dd000417 	ldw	r20,16(sp)
   86ea8:	dcc00317 	ldw	r19,12(sp)
   86eac:	dc800217 	ldw	r18,8(sp)
   86eb0:	dc400117 	ldw	r17,4(sp)
   86eb4:	dc000017 	ldw	r16,0(sp)
   86eb8:	dec00604 	addi	sp,sp,24
   86ebc:	f800283a 	ret
   86ec0:	880d883a 	mov	r6,r17
   86ec4:	880b883a 	mov	r5,r17
   86ec8:	9809883a 	mov	r4,r19
   86ecc:	0086b700 	call	86b70 <__multiply>
   86ed0:	88800015 	stw	r2,0(r17)
   86ed4:	10000015 	stw	zero,0(r2)
   86ed8:	003fdd06 	br	86e50 <__alt_data_end+0xfffc8650>
   86edc:	1025883a 	mov	r18,r2
   86ee0:	003fd706 	br	86e40 <__alt_data_end+0xfffc8640>
   86ee4:	10bfffc4 	addi	r2,r2,-1
   86ee8:	1085883a 	add	r2,r2,r2
   86eec:	00c002b4 	movhi	r3,10
   86ef0:	18e0e604 	addi	r3,r3,-31848
   86ef4:	1085883a 	add	r2,r2,r2
   86ef8:	1885883a 	add	r2,r3,r2
   86efc:	11800017 	ldw	r6,0(r2)
   86f00:	000f883a 	mov	r7,zero
   86f04:	00867d00 	call	867d0 <__multadd>
   86f08:	1025883a 	mov	r18,r2
   86f0c:	003fc706 	br	86e2c <__alt_data_end+0xfffc862c>
   86f10:	05000044 	movi	r20,1
   86f14:	a00b883a 	mov	r5,r20
   86f18:	9809883a 	mov	r4,r19
   86f1c:	00867000 	call	86700 <_Balloc>
   86f20:	1023883a 	mov	r17,r2
   86f24:	00809c44 	movi	r2,625
   86f28:	88800515 	stw	r2,20(r17)
   86f2c:	8d000415 	stw	r20,16(r17)
   86f30:	9c401215 	stw	r17,72(r19)
   86f34:	88000015 	stw	zero,0(r17)
   86f38:	003fc606 	br	86e54 <__alt_data_end+0xfffc8654>

00086f3c <__lshift>:
   86f3c:	defff904 	addi	sp,sp,-28
   86f40:	dd400515 	stw	r21,20(sp)
   86f44:	dcc00315 	stw	r19,12(sp)
   86f48:	302bd17a 	srai	r21,r6,5
   86f4c:	2cc00417 	ldw	r19,16(r5)
   86f50:	28800217 	ldw	r2,8(r5)
   86f54:	dd000415 	stw	r20,16(sp)
   86f58:	ace7883a 	add	r19,r21,r19
   86f5c:	dc800215 	stw	r18,8(sp)
   86f60:	dc400115 	stw	r17,4(sp)
   86f64:	dc000015 	stw	r16,0(sp)
   86f68:	dfc00615 	stw	ra,24(sp)
   86f6c:	9c000044 	addi	r16,r19,1
   86f70:	2823883a 	mov	r17,r5
   86f74:	3029883a 	mov	r20,r6
   86f78:	2025883a 	mov	r18,r4
   86f7c:	29400117 	ldw	r5,4(r5)
   86f80:	1400030e 	bge	r2,r16,86f90 <__lshift+0x54>
   86f84:	1085883a 	add	r2,r2,r2
   86f88:	29400044 	addi	r5,r5,1
   86f8c:	143ffd16 	blt	r2,r16,86f84 <__alt_data_end+0xfffc8784>
   86f90:	9009883a 	mov	r4,r18
   86f94:	00867000 	call	86700 <_Balloc>
   86f98:	10c00504 	addi	r3,r2,20
   86f9c:	0540070e 	bge	zero,r21,86fbc <__lshift+0x80>
   86fa0:	ad6b883a 	add	r21,r21,r21
   86fa4:	ad6b883a 	add	r21,r21,r21
   86fa8:	1809883a 	mov	r4,r3
   86fac:	1d47883a 	add	r3,r3,r21
   86fb0:	20000015 	stw	zero,0(r4)
   86fb4:	21000104 	addi	r4,r4,4
   86fb8:	193ffd1e 	bne	r3,r4,86fb0 <__alt_data_end+0xfffc87b0>
   86fbc:	8a000417 	ldw	r8,16(r17)
   86fc0:	89000504 	addi	r4,r17,20
   86fc4:	a18007cc 	andi	r6,r20,31
   86fc8:	4211883a 	add	r8,r8,r8
   86fcc:	4211883a 	add	r8,r8,r8
   86fd0:	2211883a 	add	r8,r4,r8
   86fd4:	30002326 	beq	r6,zero,87064 <__lshift+0x128>
   86fd8:	02400804 	movi	r9,32
   86fdc:	4993c83a 	sub	r9,r9,r6
   86fe0:	000b883a 	mov	r5,zero
   86fe4:	21c00017 	ldw	r7,0(r4)
   86fe8:	1815883a 	mov	r10,r3
   86fec:	18c00104 	addi	r3,r3,4
   86ff0:	398e983a 	sll	r7,r7,r6
   86ff4:	21000104 	addi	r4,r4,4
   86ff8:	394ab03a 	or	r5,r7,r5
   86ffc:	197fff15 	stw	r5,-4(r3)
   87000:	217fff17 	ldw	r5,-4(r4)
   87004:	2a4ad83a 	srl	r5,r5,r9
   87008:	223ff636 	bltu	r4,r8,86fe4 <__alt_data_end+0xfffc87e4>
   8700c:	51400115 	stw	r5,4(r10)
   87010:	28001a1e 	bne	r5,zero,8707c <__lshift+0x140>
   87014:	843fffc4 	addi	r16,r16,-1
   87018:	14000415 	stw	r16,16(r2)
   8701c:	88000826 	beq	r17,zero,87040 <__lshift+0x104>
   87020:	89000117 	ldw	r4,4(r17)
   87024:	90c01317 	ldw	r3,76(r18)
   87028:	2109883a 	add	r4,r4,r4
   8702c:	2109883a 	add	r4,r4,r4
   87030:	1907883a 	add	r3,r3,r4
   87034:	19000017 	ldw	r4,0(r3)
   87038:	89000015 	stw	r4,0(r17)
   8703c:	1c400015 	stw	r17,0(r3)
   87040:	dfc00617 	ldw	ra,24(sp)
   87044:	dd400517 	ldw	r21,20(sp)
   87048:	dd000417 	ldw	r20,16(sp)
   8704c:	dcc00317 	ldw	r19,12(sp)
   87050:	dc800217 	ldw	r18,8(sp)
   87054:	dc400117 	ldw	r17,4(sp)
   87058:	dc000017 	ldw	r16,0(sp)
   8705c:	dec00704 	addi	sp,sp,28
   87060:	f800283a 	ret
   87064:	21400017 	ldw	r5,0(r4)
   87068:	18c00104 	addi	r3,r3,4
   8706c:	21000104 	addi	r4,r4,4
   87070:	197fff15 	stw	r5,-4(r3)
   87074:	223ffb36 	bltu	r4,r8,87064 <__alt_data_end+0xfffc8864>
   87078:	003fe606 	br	87014 <__alt_data_end+0xfffc8814>
   8707c:	9c000084 	addi	r16,r19,2
   87080:	003fe406 	br	87014 <__alt_data_end+0xfffc8814>

00087084 <__mcmp>:
   87084:	20800417 	ldw	r2,16(r4)
   87088:	28c00417 	ldw	r3,16(r5)
   8708c:	10c5c83a 	sub	r2,r2,r3
   87090:	1000111e 	bne	r2,zero,870d8 <__mcmp+0x54>
   87094:	18c7883a 	add	r3,r3,r3
   87098:	18c7883a 	add	r3,r3,r3
   8709c:	21000504 	addi	r4,r4,20
   870a0:	29400504 	addi	r5,r5,20
   870a4:	20c5883a 	add	r2,r4,r3
   870a8:	28cb883a 	add	r5,r5,r3
   870ac:	00000106 	br	870b4 <__mcmp+0x30>
   870b0:	20800a2e 	bgeu	r4,r2,870dc <__mcmp+0x58>
   870b4:	10bfff04 	addi	r2,r2,-4
   870b8:	297fff04 	addi	r5,r5,-4
   870bc:	11800017 	ldw	r6,0(r2)
   870c0:	28c00017 	ldw	r3,0(r5)
   870c4:	30fffa26 	beq	r6,r3,870b0 <__alt_data_end+0xfffc88b0>
   870c8:	30c00236 	bltu	r6,r3,870d4 <__mcmp+0x50>
   870cc:	00800044 	movi	r2,1
   870d0:	f800283a 	ret
   870d4:	00bfffc4 	movi	r2,-1
   870d8:	f800283a 	ret
   870dc:	0005883a 	mov	r2,zero
   870e0:	f800283a 	ret

000870e4 <__mdiff>:
   870e4:	28c00417 	ldw	r3,16(r5)
   870e8:	30800417 	ldw	r2,16(r6)
   870ec:	defffa04 	addi	sp,sp,-24
   870f0:	dcc00315 	stw	r19,12(sp)
   870f4:	dc800215 	stw	r18,8(sp)
   870f8:	dfc00515 	stw	ra,20(sp)
   870fc:	dd000415 	stw	r20,16(sp)
   87100:	dc400115 	stw	r17,4(sp)
   87104:	dc000015 	stw	r16,0(sp)
   87108:	1887c83a 	sub	r3,r3,r2
   8710c:	2825883a 	mov	r18,r5
   87110:	3027883a 	mov	r19,r6
   87114:	1800141e 	bne	r3,zero,87168 <__mdiff+0x84>
   87118:	1085883a 	add	r2,r2,r2
   8711c:	1085883a 	add	r2,r2,r2
   87120:	2a000504 	addi	r8,r5,20
   87124:	34000504 	addi	r16,r6,20
   87128:	4087883a 	add	r3,r8,r2
   8712c:	8085883a 	add	r2,r16,r2
   87130:	00000106 	br	87138 <__mdiff+0x54>
   87134:	40c0592e 	bgeu	r8,r3,8729c <__mdiff+0x1b8>
   87138:	18ffff04 	addi	r3,r3,-4
   8713c:	10bfff04 	addi	r2,r2,-4
   87140:	19c00017 	ldw	r7,0(r3)
   87144:	11400017 	ldw	r5,0(r2)
   87148:	397ffa26 	beq	r7,r5,87134 <__alt_data_end+0xfffc8934>
   8714c:	3940592e 	bgeu	r7,r5,872b4 <__mdiff+0x1d0>
   87150:	9005883a 	mov	r2,r18
   87154:	4023883a 	mov	r17,r8
   87158:	9825883a 	mov	r18,r19
   8715c:	05000044 	movi	r20,1
   87160:	1027883a 	mov	r19,r2
   87164:	00000406 	br	87178 <__mdiff+0x94>
   87168:	18005616 	blt	r3,zero,872c4 <__mdiff+0x1e0>
   8716c:	34400504 	addi	r17,r6,20
   87170:	2c000504 	addi	r16,r5,20
   87174:	0029883a 	mov	r20,zero
   87178:	91400117 	ldw	r5,4(r18)
   8717c:	00867000 	call	86700 <_Balloc>
   87180:	92400417 	ldw	r9,16(r18)
   87184:	9b000417 	ldw	r12,16(r19)
   87188:	12c00504 	addi	r11,r2,20
   8718c:	4a51883a 	add	r8,r9,r9
   87190:	6319883a 	add	r12,r12,r12
   87194:	4211883a 	add	r8,r8,r8
   87198:	6319883a 	add	r12,r12,r12
   8719c:	15000315 	stw	r20,12(r2)
   871a0:	8211883a 	add	r8,r16,r8
   871a4:	8b19883a 	add	r12,r17,r12
   871a8:	0007883a 	mov	r3,zero
   871ac:	81400017 	ldw	r5,0(r16)
   871b0:	89c00017 	ldw	r7,0(r17)
   871b4:	59800104 	addi	r6,r11,4
   871b8:	293fffcc 	andi	r4,r5,65535
   871bc:	20c7883a 	add	r3,r4,r3
   871c0:	393fffcc 	andi	r4,r7,65535
   871c4:	1909c83a 	sub	r4,r3,r4
   871c8:	280ad43a 	srli	r5,r5,16
   871cc:	380ed43a 	srli	r7,r7,16
   871d0:	2007d43a 	srai	r3,r4,16
   871d4:	213fffcc 	andi	r4,r4,65535
   871d8:	29cbc83a 	sub	r5,r5,r7
   871dc:	28c7883a 	add	r3,r5,r3
   871e0:	180a943a 	slli	r5,r3,16
   871e4:	8c400104 	addi	r17,r17,4
   871e8:	84000104 	addi	r16,r16,4
   871ec:	2908b03a 	or	r4,r5,r4
   871f0:	59000015 	stw	r4,0(r11)
   871f4:	1807d43a 	srai	r3,r3,16
   871f8:	3015883a 	mov	r10,r6
   871fc:	3017883a 	mov	r11,r6
   87200:	8b3fea36 	bltu	r17,r12,871ac <__alt_data_end+0xfffc89ac>
   87204:	8200162e 	bgeu	r16,r8,87260 <__mdiff+0x17c>
   87208:	8017883a 	mov	r11,r16
   8720c:	59400017 	ldw	r5,0(r11)
   87210:	31800104 	addi	r6,r6,4
   87214:	5ac00104 	addi	r11,r11,4
   87218:	293fffcc 	andi	r4,r5,65535
   8721c:	20c7883a 	add	r3,r4,r3
   87220:	280ed43a 	srli	r7,r5,16
   87224:	180bd43a 	srai	r5,r3,16
   87228:	193fffcc 	andi	r4,r3,65535
   8722c:	3947883a 	add	r3,r7,r5
   87230:	180a943a 	slli	r5,r3,16
   87234:	1807d43a 	srai	r3,r3,16
   87238:	2908b03a 	or	r4,r5,r4
   8723c:	313fff15 	stw	r4,-4(r6)
   87240:	5a3ff236 	bltu	r11,r8,8720c <__alt_data_end+0xfffc8a0c>
   87244:	0406303a 	nor	r3,zero,r16
   87248:	1a07883a 	add	r3,r3,r8
   8724c:	1806d0ba 	srli	r3,r3,2
   87250:	18c00044 	addi	r3,r3,1
   87254:	18c7883a 	add	r3,r3,r3
   87258:	18c7883a 	add	r3,r3,r3
   8725c:	50d5883a 	add	r10,r10,r3
   87260:	50ffff04 	addi	r3,r10,-4
   87264:	2000041e 	bne	r4,zero,87278 <__mdiff+0x194>
   87268:	18ffff04 	addi	r3,r3,-4
   8726c:	19000017 	ldw	r4,0(r3)
   87270:	4a7fffc4 	addi	r9,r9,-1
   87274:	203ffc26 	beq	r4,zero,87268 <__alt_data_end+0xfffc8a68>
   87278:	12400415 	stw	r9,16(r2)
   8727c:	dfc00517 	ldw	ra,20(sp)
   87280:	dd000417 	ldw	r20,16(sp)
   87284:	dcc00317 	ldw	r19,12(sp)
   87288:	dc800217 	ldw	r18,8(sp)
   8728c:	dc400117 	ldw	r17,4(sp)
   87290:	dc000017 	ldw	r16,0(sp)
   87294:	dec00604 	addi	sp,sp,24
   87298:	f800283a 	ret
   8729c:	000b883a 	mov	r5,zero
   872a0:	00867000 	call	86700 <_Balloc>
   872a4:	00c00044 	movi	r3,1
   872a8:	10c00415 	stw	r3,16(r2)
   872ac:	10000515 	stw	zero,20(r2)
   872b0:	003ff206 	br	8727c <__alt_data_end+0xfffc8a7c>
   872b4:	8023883a 	mov	r17,r16
   872b8:	0029883a 	mov	r20,zero
   872bc:	4021883a 	mov	r16,r8
   872c0:	003fad06 	br	87178 <__alt_data_end+0xfffc8978>
   872c4:	9005883a 	mov	r2,r18
   872c8:	94400504 	addi	r17,r18,20
   872cc:	9c000504 	addi	r16,r19,20
   872d0:	9825883a 	mov	r18,r19
   872d4:	05000044 	movi	r20,1
   872d8:	1027883a 	mov	r19,r2
   872dc:	003fa606 	br	87178 <__alt_data_end+0xfffc8978>

000872e0 <__ulp>:
   872e0:	295ffc2c 	andhi	r5,r5,32752
   872e4:	00bf3034 	movhi	r2,64704
   872e8:	2887883a 	add	r3,r5,r2
   872ec:	00c0020e 	bge	zero,r3,872f8 <__ulp+0x18>
   872f0:	0005883a 	mov	r2,zero
   872f4:	f800283a 	ret
   872f8:	00c7c83a 	sub	r3,zero,r3
   872fc:	1807d53a 	srai	r3,r3,20
   87300:	008004c4 	movi	r2,19
   87304:	10c00b0e 	bge	r2,r3,87334 <__ulp+0x54>
   87308:	18bffb04 	addi	r2,r3,-20
   8730c:	01000784 	movi	r4,30
   87310:	0007883a 	mov	r3,zero
   87314:	20800516 	blt	r4,r2,8732c <__ulp+0x4c>
   87318:	010007c4 	movi	r4,31
   8731c:	2089c83a 	sub	r4,r4,r2
   87320:	00800044 	movi	r2,1
   87324:	1104983a 	sll	r2,r2,r4
   87328:	f800283a 	ret
   8732c:	00800044 	movi	r2,1
   87330:	f800283a 	ret
   87334:	01400234 	movhi	r5,8
   87338:	28c7d83a 	sra	r3,r5,r3
   8733c:	0005883a 	mov	r2,zero
   87340:	f800283a 	ret

00087344 <__b2d>:
   87344:	defffa04 	addi	sp,sp,-24
   87348:	dc000015 	stw	r16,0(sp)
   8734c:	24000417 	ldw	r16,16(r4)
   87350:	dc400115 	stw	r17,4(sp)
   87354:	24400504 	addi	r17,r4,20
   87358:	8421883a 	add	r16,r16,r16
   8735c:	8421883a 	add	r16,r16,r16
   87360:	8c21883a 	add	r16,r17,r16
   87364:	dc800215 	stw	r18,8(sp)
   87368:	84bfff17 	ldw	r18,-4(r16)
   8736c:	dd000415 	stw	r20,16(sp)
   87370:	dcc00315 	stw	r19,12(sp)
   87374:	9009883a 	mov	r4,r18
   87378:	2829883a 	mov	r20,r5
   8737c:	dfc00515 	stw	ra,20(sp)
   87380:	0086a1c0 	call	86a1c <__hi0bits>
   87384:	00c00804 	movi	r3,32
   87388:	1889c83a 	sub	r4,r3,r2
   8738c:	a1000015 	stw	r4,0(r20)
   87390:	01000284 	movi	r4,10
   87394:	84ffff04 	addi	r19,r16,-4
   87398:	20801216 	blt	r4,r2,873e4 <__b2d+0xa0>
   8739c:	018002c4 	movi	r6,11
   873a0:	308dc83a 	sub	r6,r6,r2
   873a4:	9186d83a 	srl	r3,r18,r6
   873a8:	18cffc34 	orhi	r3,r3,16368
   873ac:	8cc0212e 	bgeu	r17,r19,87434 <__b2d+0xf0>
   873b0:	813ffe17 	ldw	r4,-8(r16)
   873b4:	218cd83a 	srl	r6,r4,r6
   873b8:	10800544 	addi	r2,r2,21
   873bc:	9084983a 	sll	r2,r18,r2
   873c0:	1184b03a 	or	r2,r2,r6
   873c4:	dfc00517 	ldw	ra,20(sp)
   873c8:	dd000417 	ldw	r20,16(sp)
   873cc:	dcc00317 	ldw	r19,12(sp)
   873d0:	dc800217 	ldw	r18,8(sp)
   873d4:	dc400117 	ldw	r17,4(sp)
   873d8:	dc000017 	ldw	r16,0(sp)
   873dc:	dec00604 	addi	sp,sp,24
   873e0:	f800283a 	ret
   873e4:	8cc00f2e 	bgeu	r17,r19,87424 <__b2d+0xe0>
   873e8:	117ffd44 	addi	r5,r2,-11
   873ec:	80bffe17 	ldw	r2,-8(r16)
   873f0:	28000e26 	beq	r5,zero,8742c <__b2d+0xe8>
   873f4:	1949c83a 	sub	r4,r3,r5
   873f8:	9164983a 	sll	r18,r18,r5
   873fc:	1106d83a 	srl	r3,r2,r4
   87400:	81bffe04 	addi	r6,r16,-8
   87404:	948ffc34 	orhi	r18,r18,16368
   87408:	90c6b03a 	or	r3,r18,r3
   8740c:	89800e2e 	bgeu	r17,r6,87448 <__b2d+0x104>
   87410:	81bffd17 	ldw	r6,-12(r16)
   87414:	1144983a 	sll	r2,r2,r5
   87418:	310ad83a 	srl	r5,r6,r4
   8741c:	2884b03a 	or	r2,r5,r2
   87420:	003fe806 	br	873c4 <__alt_data_end+0xfffc8bc4>
   87424:	10bffd44 	addi	r2,r2,-11
   87428:	1000041e 	bne	r2,zero,8743c <__b2d+0xf8>
   8742c:	90cffc34 	orhi	r3,r18,16368
   87430:	003fe406 	br	873c4 <__alt_data_end+0xfffc8bc4>
   87434:	000d883a 	mov	r6,zero
   87438:	003fdf06 	br	873b8 <__alt_data_end+0xfffc8bb8>
   8743c:	90a4983a 	sll	r18,r18,r2
   87440:	0005883a 	mov	r2,zero
   87444:	003ff906 	br	8742c <__alt_data_end+0xfffc8c2c>
   87448:	1144983a 	sll	r2,r2,r5
   8744c:	003fdd06 	br	873c4 <__alt_data_end+0xfffc8bc4>

00087450 <__d2b>:
   87450:	defff804 	addi	sp,sp,-32
   87454:	dc000215 	stw	r16,8(sp)
   87458:	3021883a 	mov	r16,r6
   8745c:	dc400315 	stw	r17,12(sp)
   87460:	8022907a 	slli	r17,r16,1
   87464:	dd000615 	stw	r20,24(sp)
   87468:	2829883a 	mov	r20,r5
   8746c:	01400044 	movi	r5,1
   87470:	dcc00515 	stw	r19,20(sp)
   87474:	dc800415 	stw	r18,16(sp)
   87478:	dfc00715 	stw	ra,28(sp)
   8747c:	3825883a 	mov	r18,r7
   87480:	8822d57a 	srli	r17,r17,21
   87484:	00867000 	call	86700 <_Balloc>
   87488:	1027883a 	mov	r19,r2
   8748c:	00800434 	movhi	r2,16
   87490:	10bfffc4 	addi	r2,r2,-1
   87494:	808c703a 	and	r6,r16,r2
   87498:	88000126 	beq	r17,zero,874a0 <__d2b+0x50>
   8749c:	31800434 	orhi	r6,r6,16
   874a0:	d9800015 	stw	r6,0(sp)
   874a4:	a0002426 	beq	r20,zero,87538 <__d2b+0xe8>
   874a8:	d9000104 	addi	r4,sp,4
   874ac:	dd000115 	stw	r20,4(sp)
   874b0:	0086a840 	call	86a84 <__lo0bits>
   874b4:	d8c00017 	ldw	r3,0(sp)
   874b8:	10002f1e 	bne	r2,zero,87578 <__d2b+0x128>
   874bc:	d9000117 	ldw	r4,4(sp)
   874c0:	99000515 	stw	r4,20(r19)
   874c4:	1821003a 	cmpeq	r16,r3,zero
   874c8:	01000084 	movi	r4,2
   874cc:	2421c83a 	sub	r16,r4,r16
   874d0:	98c00615 	stw	r3,24(r19)
   874d4:	9c000415 	stw	r16,16(r19)
   874d8:	88001f1e 	bne	r17,zero,87558 <__d2b+0x108>
   874dc:	10bef384 	addi	r2,r2,-1074
   874e0:	90800015 	stw	r2,0(r18)
   874e4:	00900034 	movhi	r2,16384
   874e8:	10bfffc4 	addi	r2,r2,-1
   874ec:	8085883a 	add	r2,r16,r2
   874f0:	1085883a 	add	r2,r2,r2
   874f4:	1085883a 	add	r2,r2,r2
   874f8:	9885883a 	add	r2,r19,r2
   874fc:	11000517 	ldw	r4,20(r2)
   87500:	8020917a 	slli	r16,r16,5
   87504:	0086a1c0 	call	86a1c <__hi0bits>
   87508:	d8c00817 	ldw	r3,32(sp)
   8750c:	8085c83a 	sub	r2,r16,r2
   87510:	18800015 	stw	r2,0(r3)
   87514:	9805883a 	mov	r2,r19
   87518:	dfc00717 	ldw	ra,28(sp)
   8751c:	dd000617 	ldw	r20,24(sp)
   87520:	dcc00517 	ldw	r19,20(sp)
   87524:	dc800417 	ldw	r18,16(sp)
   87528:	dc400317 	ldw	r17,12(sp)
   8752c:	dc000217 	ldw	r16,8(sp)
   87530:	dec00804 	addi	sp,sp,32
   87534:	f800283a 	ret
   87538:	d809883a 	mov	r4,sp
   8753c:	0086a840 	call	86a84 <__lo0bits>
   87540:	d8c00017 	ldw	r3,0(sp)
   87544:	04000044 	movi	r16,1
   87548:	9c000415 	stw	r16,16(r19)
   8754c:	98c00515 	stw	r3,20(r19)
   87550:	10800804 	addi	r2,r2,32
   87554:	883fe126 	beq	r17,zero,874dc <__alt_data_end+0xfffc8cdc>
   87558:	00c00d44 	movi	r3,53
   8755c:	8c7ef344 	addi	r17,r17,-1075
   87560:	88a3883a 	add	r17,r17,r2
   87564:	1885c83a 	sub	r2,r3,r2
   87568:	d8c00817 	ldw	r3,32(sp)
   8756c:	94400015 	stw	r17,0(r18)
   87570:	18800015 	stw	r2,0(r3)
   87574:	003fe706 	br	87514 <__alt_data_end+0xfffc8d14>
   87578:	01000804 	movi	r4,32
   8757c:	2089c83a 	sub	r4,r4,r2
   87580:	1908983a 	sll	r4,r3,r4
   87584:	d9400117 	ldw	r5,4(sp)
   87588:	1886d83a 	srl	r3,r3,r2
   8758c:	2148b03a 	or	r4,r4,r5
   87590:	99000515 	stw	r4,20(r19)
   87594:	d8c00015 	stw	r3,0(sp)
   87598:	003fca06 	br	874c4 <__alt_data_end+0xfffc8cc4>

0008759c <__ratio>:
   8759c:	defff904 	addi	sp,sp,-28
   875a0:	dc400315 	stw	r17,12(sp)
   875a4:	2823883a 	mov	r17,r5
   875a8:	d9400104 	addi	r5,sp,4
   875ac:	dfc00615 	stw	ra,24(sp)
   875b0:	dcc00515 	stw	r19,20(sp)
   875b4:	dc800415 	stw	r18,16(sp)
   875b8:	2027883a 	mov	r19,r4
   875bc:	dc000215 	stw	r16,8(sp)
   875c0:	00873440 	call	87344 <__b2d>
   875c4:	d80b883a 	mov	r5,sp
   875c8:	8809883a 	mov	r4,r17
   875cc:	1025883a 	mov	r18,r2
   875d0:	1821883a 	mov	r16,r3
   875d4:	00873440 	call	87344 <__b2d>
   875d8:	8a000417 	ldw	r8,16(r17)
   875dc:	99000417 	ldw	r4,16(r19)
   875e0:	d9400117 	ldw	r5,4(sp)
   875e4:	2209c83a 	sub	r4,r4,r8
   875e8:	2010917a 	slli	r8,r4,5
   875ec:	d9000017 	ldw	r4,0(sp)
   875f0:	2909c83a 	sub	r4,r5,r4
   875f4:	4109883a 	add	r4,r8,r4
   875f8:	01000e0e 	bge	zero,r4,87634 <__ratio+0x98>
   875fc:	2008953a 	slli	r4,r4,20
   87600:	2421883a 	add	r16,r4,r16
   87604:	100d883a 	mov	r6,r2
   87608:	180f883a 	mov	r7,r3
   8760c:	9009883a 	mov	r4,r18
   87610:	800b883a 	mov	r5,r16
   87614:	008ba600 	call	8ba60 <__divdf3>
   87618:	dfc00617 	ldw	ra,24(sp)
   8761c:	dcc00517 	ldw	r19,20(sp)
   87620:	dc800417 	ldw	r18,16(sp)
   87624:	dc400317 	ldw	r17,12(sp)
   87628:	dc000217 	ldw	r16,8(sp)
   8762c:	dec00704 	addi	sp,sp,28
   87630:	f800283a 	ret
   87634:	2008953a 	slli	r4,r4,20
   87638:	1907c83a 	sub	r3,r3,r4
   8763c:	003ff106 	br	87604 <__alt_data_end+0xfffc8e04>

00087640 <_mprec_log10>:
   87640:	defffe04 	addi	sp,sp,-8
   87644:	dc000015 	stw	r16,0(sp)
   87648:	dfc00115 	stw	ra,4(sp)
   8764c:	008005c4 	movi	r2,23
   87650:	2021883a 	mov	r16,r4
   87654:	11000d0e 	bge	r2,r4,8768c <_mprec_log10+0x4c>
   87658:	0005883a 	mov	r2,zero
   8765c:	00cffc34 	movhi	r3,16368
   87660:	843fffc4 	addi	r16,r16,-1
   87664:	000d883a 	mov	r6,zero
   87668:	01d00934 	movhi	r7,16420
   8766c:	1009883a 	mov	r4,r2
   87670:	180b883a 	mov	r5,r3
   87674:	008c6880 	call	8c688 <__muldf3>
   87678:	803ff91e 	bne	r16,zero,87660 <__alt_data_end+0xfffc8e60>
   8767c:	dfc00117 	ldw	ra,4(sp)
   87680:	dc000017 	ldw	r16,0(sp)
   87684:	dec00204 	addi	sp,sp,8
   87688:	f800283a 	ret
   8768c:	202090fa 	slli	r16,r4,3
   87690:	008002b4 	movhi	r2,10
   87694:	10a0fd04 	addi	r2,r2,-31756
   87698:	1421883a 	add	r16,r2,r16
   8769c:	80800017 	ldw	r2,0(r16)
   876a0:	80c00117 	ldw	r3,4(r16)
   876a4:	dfc00117 	ldw	ra,4(sp)
   876a8:	dc000017 	ldw	r16,0(sp)
   876ac:	dec00204 	addi	sp,sp,8
   876b0:	f800283a 	ret

000876b4 <__copybits>:
   876b4:	297fffc4 	addi	r5,r5,-1
   876b8:	280fd17a 	srai	r7,r5,5
   876bc:	30c00417 	ldw	r3,16(r6)
   876c0:	30800504 	addi	r2,r6,20
   876c4:	39c00044 	addi	r7,r7,1
   876c8:	18c7883a 	add	r3,r3,r3
   876cc:	39cf883a 	add	r7,r7,r7
   876d0:	18c7883a 	add	r3,r3,r3
   876d4:	39cf883a 	add	r7,r7,r7
   876d8:	10c7883a 	add	r3,r2,r3
   876dc:	21cf883a 	add	r7,r4,r7
   876e0:	10c00d2e 	bgeu	r2,r3,87718 <__copybits+0x64>
   876e4:	200b883a 	mov	r5,r4
   876e8:	12000017 	ldw	r8,0(r2)
   876ec:	29400104 	addi	r5,r5,4
   876f0:	10800104 	addi	r2,r2,4
   876f4:	2a3fff15 	stw	r8,-4(r5)
   876f8:	10fffb36 	bltu	r2,r3,876e8 <__alt_data_end+0xfffc8ee8>
   876fc:	1985c83a 	sub	r2,r3,r6
   87700:	10bffac4 	addi	r2,r2,-21
   87704:	1004d0ba 	srli	r2,r2,2
   87708:	10800044 	addi	r2,r2,1
   8770c:	1085883a 	add	r2,r2,r2
   87710:	1085883a 	add	r2,r2,r2
   87714:	2089883a 	add	r4,r4,r2
   87718:	21c0032e 	bgeu	r4,r7,87728 <__copybits+0x74>
   8771c:	20000015 	stw	zero,0(r4)
   87720:	21000104 	addi	r4,r4,4
   87724:	21fffd36 	bltu	r4,r7,8771c <__alt_data_end+0xfffc8f1c>
   87728:	f800283a 	ret

0008772c <__any_on>:
   8772c:	20c00417 	ldw	r3,16(r4)
   87730:	2805d17a 	srai	r2,r5,5
   87734:	21000504 	addi	r4,r4,20
   87738:	18800d0e 	bge	r3,r2,87770 <__any_on+0x44>
   8773c:	18c7883a 	add	r3,r3,r3
   87740:	18c7883a 	add	r3,r3,r3
   87744:	20c7883a 	add	r3,r4,r3
   87748:	20c0192e 	bgeu	r4,r3,877b0 <__any_on+0x84>
   8774c:	18bfff17 	ldw	r2,-4(r3)
   87750:	18ffff04 	addi	r3,r3,-4
   87754:	1000041e 	bne	r2,zero,87768 <__any_on+0x3c>
   87758:	20c0142e 	bgeu	r4,r3,877ac <__any_on+0x80>
   8775c:	18ffff04 	addi	r3,r3,-4
   87760:	19400017 	ldw	r5,0(r3)
   87764:	283ffc26 	beq	r5,zero,87758 <__alt_data_end+0xfffc8f58>
   87768:	00800044 	movi	r2,1
   8776c:	f800283a 	ret
   87770:	10c00a0e 	bge	r2,r3,8779c <__any_on+0x70>
   87774:	1085883a 	add	r2,r2,r2
   87778:	1085883a 	add	r2,r2,r2
   8777c:	294007cc 	andi	r5,r5,31
   87780:	2087883a 	add	r3,r4,r2
   87784:	283ff026 	beq	r5,zero,87748 <__alt_data_end+0xfffc8f48>
   87788:	19800017 	ldw	r6,0(r3)
   8778c:	3144d83a 	srl	r2,r6,r5
   87790:	114a983a 	sll	r5,r2,r5
   87794:	317ff41e 	bne	r6,r5,87768 <__alt_data_end+0xfffc8f68>
   87798:	003feb06 	br	87748 <__alt_data_end+0xfffc8f48>
   8779c:	1085883a 	add	r2,r2,r2
   877a0:	1085883a 	add	r2,r2,r2
   877a4:	2087883a 	add	r3,r4,r2
   877a8:	003fe706 	br	87748 <__alt_data_end+0xfffc8f48>
   877ac:	f800283a 	ret
   877b0:	0005883a 	mov	r2,zero
   877b4:	f800283a 	ret

000877b8 <__fpclassifyd>:
   877b8:	00a00034 	movhi	r2,32768
   877bc:	10bfffc4 	addi	r2,r2,-1
   877c0:	2884703a 	and	r2,r5,r2
   877c4:	10000726 	beq	r2,zero,877e4 <__fpclassifyd+0x2c>
   877c8:	00fffc34 	movhi	r3,65520
   877cc:	019ff834 	movhi	r6,32736
   877d0:	28c7883a 	add	r3,r5,r3
   877d4:	31bfffc4 	addi	r6,r6,-1
   877d8:	30c00536 	bltu	r6,r3,877f0 <__fpclassifyd+0x38>
   877dc:	00800104 	movi	r2,4
   877e0:	f800283a 	ret
   877e4:	2000021e 	bne	r4,zero,877f0 <__fpclassifyd+0x38>
   877e8:	00800084 	movi	r2,2
   877ec:	f800283a 	ret
   877f0:	00dffc34 	movhi	r3,32752
   877f4:	019ff834 	movhi	r6,32736
   877f8:	28cb883a 	add	r5,r5,r3
   877fc:	31bfffc4 	addi	r6,r6,-1
   87800:	317ff62e 	bgeu	r6,r5,877dc <__alt_data_end+0xfffc8fdc>
   87804:	01400434 	movhi	r5,16
   87808:	297fffc4 	addi	r5,r5,-1
   8780c:	28800236 	bltu	r5,r2,87818 <__fpclassifyd+0x60>
   87810:	008000c4 	movi	r2,3
   87814:	f800283a 	ret
   87818:	10c00226 	beq	r2,r3,87824 <__fpclassifyd+0x6c>
   8781c:	0005883a 	mov	r2,zero
   87820:	f800283a 	ret
   87824:	2005003a 	cmpeq	r2,r4,zero
   87828:	f800283a 	ret

0008782c <__sread>:
   8782c:	defffe04 	addi	sp,sp,-8
   87830:	dc000015 	stw	r16,0(sp)
   87834:	2821883a 	mov	r16,r5
   87838:	2940038f 	ldh	r5,14(r5)
   8783c:	dfc00115 	stw	ra,4(sp)
   87840:	0089cc80 	call	89cc8 <_read_r>
   87844:	10000716 	blt	r2,zero,87864 <__sread+0x38>
   87848:	80c01417 	ldw	r3,80(r16)
   8784c:	1887883a 	add	r3,r3,r2
   87850:	80c01415 	stw	r3,80(r16)
   87854:	dfc00117 	ldw	ra,4(sp)
   87858:	dc000017 	ldw	r16,0(sp)
   8785c:	dec00204 	addi	sp,sp,8
   87860:	f800283a 	ret
   87864:	80c0030b 	ldhu	r3,12(r16)
   87868:	18fbffcc 	andi	r3,r3,61439
   8786c:	80c0030d 	sth	r3,12(r16)
   87870:	dfc00117 	ldw	ra,4(sp)
   87874:	dc000017 	ldw	r16,0(sp)
   87878:	dec00204 	addi	sp,sp,8
   8787c:	f800283a 	ret

00087880 <__seofread>:
   87880:	0005883a 	mov	r2,zero
   87884:	f800283a 	ret

00087888 <__swrite>:
   87888:	2880030b 	ldhu	r2,12(r5)
   8788c:	defffb04 	addi	sp,sp,-20
   87890:	dcc00315 	stw	r19,12(sp)
   87894:	dc800215 	stw	r18,8(sp)
   87898:	dc400115 	stw	r17,4(sp)
   8789c:	dc000015 	stw	r16,0(sp)
   878a0:	dfc00415 	stw	ra,16(sp)
   878a4:	10c0400c 	andi	r3,r2,256
   878a8:	2821883a 	mov	r16,r5
   878ac:	2023883a 	mov	r17,r4
   878b0:	3025883a 	mov	r18,r6
   878b4:	3827883a 	mov	r19,r7
   878b8:	18000526 	beq	r3,zero,878d0 <__swrite+0x48>
   878bc:	2940038f 	ldh	r5,14(r5)
   878c0:	01c00084 	movi	r7,2
   878c4:	000d883a 	mov	r6,zero
   878c8:	0089b0c0 	call	89b0c <_lseek_r>
   878cc:	8080030b 	ldhu	r2,12(r16)
   878d0:	8140038f 	ldh	r5,14(r16)
   878d4:	10bbffcc 	andi	r2,r2,61439
   878d8:	980f883a 	mov	r7,r19
   878dc:	900d883a 	mov	r6,r18
   878e0:	8809883a 	mov	r4,r17
   878e4:	8080030d 	sth	r2,12(r16)
   878e8:	dfc00417 	ldw	ra,16(sp)
   878ec:	dcc00317 	ldw	r19,12(sp)
   878f0:	dc800217 	ldw	r18,8(sp)
   878f4:	dc400117 	ldw	r17,4(sp)
   878f8:	dc000017 	ldw	r16,0(sp)
   878fc:	dec00504 	addi	sp,sp,20
   87900:	00890f81 	jmpi	890f8 <_write_r>

00087904 <__sseek>:
   87904:	defffe04 	addi	sp,sp,-8
   87908:	dc000015 	stw	r16,0(sp)
   8790c:	2821883a 	mov	r16,r5
   87910:	2940038f 	ldh	r5,14(r5)
   87914:	dfc00115 	stw	ra,4(sp)
   87918:	0089b0c0 	call	89b0c <_lseek_r>
   8791c:	00ffffc4 	movi	r3,-1
   87920:	10c00826 	beq	r2,r3,87944 <__sseek+0x40>
   87924:	80c0030b 	ldhu	r3,12(r16)
   87928:	80801415 	stw	r2,80(r16)
   8792c:	18c40014 	ori	r3,r3,4096
   87930:	80c0030d 	sth	r3,12(r16)
   87934:	dfc00117 	ldw	ra,4(sp)
   87938:	dc000017 	ldw	r16,0(sp)
   8793c:	dec00204 	addi	sp,sp,8
   87940:	f800283a 	ret
   87944:	80c0030b 	ldhu	r3,12(r16)
   87948:	18fbffcc 	andi	r3,r3,61439
   8794c:	80c0030d 	sth	r3,12(r16)
   87950:	dfc00117 	ldw	ra,4(sp)
   87954:	dc000017 	ldw	r16,0(sp)
   87958:	dec00204 	addi	sp,sp,8
   8795c:	f800283a 	ret

00087960 <__sclose>:
   87960:	2940038f 	ldh	r5,14(r5)
   87964:	00891581 	jmpi	89158 <_close_r>

00087968 <strlen>:
   87968:	208000cc 	andi	r2,r4,3
   8796c:	10002026 	beq	r2,zero,879f0 <strlen+0x88>
   87970:	20800007 	ldb	r2,0(r4)
   87974:	10002026 	beq	r2,zero,879f8 <strlen+0x90>
   87978:	2005883a 	mov	r2,r4
   8797c:	00000206 	br	87988 <strlen+0x20>
   87980:	10c00007 	ldb	r3,0(r2)
   87984:	18001826 	beq	r3,zero,879e8 <strlen+0x80>
   87988:	10800044 	addi	r2,r2,1
   8798c:	10c000cc 	andi	r3,r2,3
   87990:	183ffb1e 	bne	r3,zero,87980 <__alt_data_end+0xfffc9180>
   87994:	10c00017 	ldw	r3,0(r2)
   87998:	01ffbff4 	movhi	r7,65279
   8799c:	39ffbfc4 	addi	r7,r7,-257
   879a0:	00ca303a 	nor	r5,zero,r3
   879a4:	01a02074 	movhi	r6,32897
   879a8:	19c7883a 	add	r3,r3,r7
   879ac:	31a02004 	addi	r6,r6,-32640
   879b0:	1946703a 	and	r3,r3,r5
   879b4:	1986703a 	and	r3,r3,r6
   879b8:	1800091e 	bne	r3,zero,879e0 <strlen+0x78>
   879bc:	10800104 	addi	r2,r2,4
   879c0:	10c00017 	ldw	r3,0(r2)
   879c4:	19cb883a 	add	r5,r3,r7
   879c8:	00c6303a 	nor	r3,zero,r3
   879cc:	28c6703a 	and	r3,r5,r3
   879d0:	1986703a 	and	r3,r3,r6
   879d4:	183ff926 	beq	r3,zero,879bc <__alt_data_end+0xfffc91bc>
   879d8:	00000106 	br	879e0 <strlen+0x78>
   879dc:	10800044 	addi	r2,r2,1
   879e0:	10c00007 	ldb	r3,0(r2)
   879e4:	183ffd1e 	bne	r3,zero,879dc <__alt_data_end+0xfffc91dc>
   879e8:	1105c83a 	sub	r2,r2,r4
   879ec:	f800283a 	ret
   879f0:	2005883a 	mov	r2,r4
   879f4:	003fe706 	br	87994 <__alt_data_end+0xfffc9194>
   879f8:	0005883a 	mov	r2,zero
   879fc:	f800283a 	ret

00087a00 <__sprint_r.part.0>:
   87a00:	28801917 	ldw	r2,100(r5)
   87a04:	defff604 	addi	sp,sp,-40
   87a08:	dd400515 	stw	r21,20(sp)
   87a0c:	dfc00915 	stw	ra,36(sp)
   87a10:	df000815 	stw	fp,32(sp)
   87a14:	ddc00715 	stw	r23,28(sp)
   87a18:	dd800615 	stw	r22,24(sp)
   87a1c:	dd000415 	stw	r20,16(sp)
   87a20:	dcc00315 	stw	r19,12(sp)
   87a24:	dc800215 	stw	r18,8(sp)
   87a28:	dc400115 	stw	r17,4(sp)
   87a2c:	dc000015 	stw	r16,0(sp)
   87a30:	1088000c 	andi	r2,r2,8192
   87a34:	302b883a 	mov	r21,r6
   87a38:	10002e26 	beq	r2,zero,87af4 <__sprint_r.part.0+0xf4>
   87a3c:	30800217 	ldw	r2,8(r6)
   87a40:	35800017 	ldw	r22,0(r6)
   87a44:	10002926 	beq	r2,zero,87aec <__sprint_r.part.0+0xec>
   87a48:	2827883a 	mov	r19,r5
   87a4c:	2029883a 	mov	r20,r4
   87a50:	b5c00104 	addi	r23,r22,4
   87a54:	04bfffc4 	movi	r18,-1
   87a58:	bc400017 	ldw	r17,0(r23)
   87a5c:	b4000017 	ldw	r16,0(r22)
   87a60:	0039883a 	mov	fp,zero
   87a64:	8822d0ba 	srli	r17,r17,2
   87a68:	8800031e 	bne	r17,zero,87a78 <__sprint_r.part.0+0x78>
   87a6c:	00001806 	br	87ad0 <__sprint_r.part.0+0xd0>
   87a70:	84000104 	addi	r16,r16,4
   87a74:	8f001526 	beq	r17,fp,87acc <__sprint_r.part.0+0xcc>
   87a78:	81400017 	ldw	r5,0(r16)
   87a7c:	980d883a 	mov	r6,r19
   87a80:	a009883a 	mov	r4,r20
   87a84:	00894f00 	call	894f0 <_fputwc_r>
   87a88:	e7000044 	addi	fp,fp,1
   87a8c:	14bff81e 	bne	r2,r18,87a70 <__alt_data_end+0xfffc9270>
   87a90:	9005883a 	mov	r2,r18
   87a94:	a8000215 	stw	zero,8(r21)
   87a98:	a8000115 	stw	zero,4(r21)
   87a9c:	dfc00917 	ldw	ra,36(sp)
   87aa0:	df000817 	ldw	fp,32(sp)
   87aa4:	ddc00717 	ldw	r23,28(sp)
   87aa8:	dd800617 	ldw	r22,24(sp)
   87aac:	dd400517 	ldw	r21,20(sp)
   87ab0:	dd000417 	ldw	r20,16(sp)
   87ab4:	dcc00317 	ldw	r19,12(sp)
   87ab8:	dc800217 	ldw	r18,8(sp)
   87abc:	dc400117 	ldw	r17,4(sp)
   87ac0:	dc000017 	ldw	r16,0(sp)
   87ac4:	dec00a04 	addi	sp,sp,40
   87ac8:	f800283a 	ret
   87acc:	a8800217 	ldw	r2,8(r21)
   87ad0:	8c63883a 	add	r17,r17,r17
   87ad4:	8c63883a 	add	r17,r17,r17
   87ad8:	1445c83a 	sub	r2,r2,r17
   87adc:	a8800215 	stw	r2,8(r21)
   87ae0:	b5800204 	addi	r22,r22,8
   87ae4:	bdc00204 	addi	r23,r23,8
   87ae8:	103fdb1e 	bne	r2,zero,87a58 <__alt_data_end+0xfffc9258>
   87aec:	0005883a 	mov	r2,zero
   87af0:	003fe806 	br	87a94 <__alt_data_end+0xfffc9294>
   87af4:	00895f00 	call	895f0 <__sfvwrite_r>
   87af8:	003fe606 	br	87a94 <__alt_data_end+0xfffc9294>

00087afc <__sprint_r>:
   87afc:	30c00217 	ldw	r3,8(r6)
   87b00:	18000126 	beq	r3,zero,87b08 <__sprint_r+0xc>
   87b04:	0087a001 	jmpi	87a00 <__sprint_r.part.0>
   87b08:	30000115 	stw	zero,4(r6)
   87b0c:	0005883a 	mov	r2,zero
   87b10:	f800283a 	ret

00087b14 <___vfiprintf_internal_r>:
   87b14:	deffca04 	addi	sp,sp,-216
   87b18:	dd403115 	stw	r21,196(sp)
   87b1c:	dfc03515 	stw	ra,212(sp)
   87b20:	df003415 	stw	fp,208(sp)
   87b24:	ddc03315 	stw	r23,204(sp)
   87b28:	dd803215 	stw	r22,200(sp)
   87b2c:	dd003015 	stw	r20,192(sp)
   87b30:	dcc02f15 	stw	r19,188(sp)
   87b34:	dc802e15 	stw	r18,184(sp)
   87b38:	dc402d15 	stw	r17,180(sp)
   87b3c:	dc002c15 	stw	r16,176(sp)
   87b40:	d9002115 	stw	r4,132(sp)
   87b44:	d9402015 	stw	r5,128(sp)
   87b48:	d9c02215 	stw	r7,136(sp)
   87b4c:	302b883a 	mov	r21,r6
   87b50:	20000226 	beq	r4,zero,87b5c <___vfiprintf_internal_r+0x48>
   87b54:	20800e17 	ldw	r2,56(r4)
   87b58:	1000cf26 	beq	r2,zero,87e98 <___vfiprintf_internal_r+0x384>
   87b5c:	d8c02017 	ldw	r3,128(sp)
   87b60:	1880030b 	ldhu	r2,12(r3)
   87b64:	10c8000c 	andi	r3,r2,8192
   87b68:	1800071e 	bne	r3,zero,87b88 <___vfiprintf_internal_r+0x74>
   87b6c:	d9402017 	ldw	r5,128(sp)
   87b70:	00f7ffc4 	movi	r3,-8193
   87b74:	10880014 	ori	r2,r2,8192
   87b78:	29001917 	ldw	r4,100(r5)
   87b7c:	2880030d 	sth	r2,12(r5)
   87b80:	20c6703a 	and	r3,r4,r3
   87b84:	28c01915 	stw	r3,100(r5)
   87b88:	10c0020c 	andi	r3,r2,8
   87b8c:	1800a526 	beq	r3,zero,87e24 <___vfiprintf_internal_r+0x310>
   87b90:	d9002017 	ldw	r4,128(sp)
   87b94:	20c00417 	ldw	r3,16(r4)
   87b98:	1800a226 	beq	r3,zero,87e24 <___vfiprintf_internal_r+0x310>
   87b9c:	1080068c 	andi	r2,r2,26
   87ba0:	00c00284 	movi	r3,10
   87ba4:	10c0a826 	beq	r2,r3,87e48 <___vfiprintf_internal_r+0x334>
   87ba8:	d9001a04 	addi	r4,sp,104
   87bac:	d94019c4 	addi	r5,sp,103
   87bb0:	048002b4 	movhi	r18,10
   87bb4:	2145c83a 	sub	r2,r4,r5
   87bb8:	94a12f04 	addi	r18,r18,-31556
   87bbc:	d9001e15 	stw	r4,120(sp)
   87bc0:	d9401f15 	stw	r5,124(sp)
   87bc4:	dec01a15 	stw	sp,104(sp)
   87bc8:	d8001c15 	stw	zero,112(sp)
   87bcc:	d8001b15 	stw	zero,108(sp)
   87bd0:	d811883a 	mov	r8,sp
   87bd4:	d8002615 	stw	zero,152(sp)
   87bd8:	d8002415 	stw	zero,144(sp)
   87bdc:	d8802815 	stw	r2,160(sp)
   87be0:	a82d883a 	mov	r22,r21
   87be4:	b0800007 	ldb	r2,0(r22)
   87be8:	10040d26 	beq	r2,zero,88c20 <___vfiprintf_internal_r+0x110c>
   87bec:	00c00944 	movi	r3,37
   87bf0:	b029883a 	mov	r20,r22
   87bf4:	10c0021e 	bne	r2,r3,87c00 <___vfiprintf_internal_r+0xec>
   87bf8:	00001606 	br	87c54 <___vfiprintf_internal_r+0x140>
   87bfc:	10c00326 	beq	r2,r3,87c0c <___vfiprintf_internal_r+0xf8>
   87c00:	a5000044 	addi	r20,r20,1
   87c04:	a0800007 	ldb	r2,0(r20)
   87c08:	103ffc1e 	bne	r2,zero,87bfc <__alt_data_end+0xfffc93fc>
   87c0c:	a5a1c83a 	sub	r16,r20,r22
   87c10:	80001026 	beq	r16,zero,87c54 <___vfiprintf_internal_r+0x140>
   87c14:	d8c01c17 	ldw	r3,112(sp)
   87c18:	d8801b17 	ldw	r2,108(sp)
   87c1c:	45800015 	stw	r22,0(r8)
   87c20:	80c7883a 	add	r3,r16,r3
   87c24:	10800044 	addi	r2,r2,1
   87c28:	44000115 	stw	r16,4(r8)
   87c2c:	d8c01c15 	stw	r3,112(sp)
   87c30:	d8801b15 	stw	r2,108(sp)
   87c34:	010001c4 	movi	r4,7
   87c38:	2080750e 	bge	r4,r2,87e10 <___vfiprintf_internal_r+0x2fc>
   87c3c:	1803951e 	bne	r3,zero,88a94 <___vfiprintf_internal_r+0xf80>
   87c40:	d8c02417 	ldw	r3,144(sp)
   87c44:	d8001b15 	stw	zero,108(sp)
   87c48:	d811883a 	mov	r8,sp
   87c4c:	1c07883a 	add	r3,r3,r16
   87c50:	d8c02415 	stw	r3,144(sp)
   87c54:	a0800007 	ldb	r2,0(r20)
   87c58:	1002e026 	beq	r2,zero,887dc <___vfiprintf_internal_r+0xcc8>
   87c5c:	a5800044 	addi	r22,r20,1
   87c60:	a0c00047 	ldb	r3,1(r20)
   87c64:	d8001d85 	stb	zero,118(sp)
   87c68:	0027883a 	mov	r19,zero
   87c6c:	d8002305 	stb	zero,140(sp)
   87c70:	043fffc4 	movi	r16,-1
   87c74:	d8002515 	stw	zero,148(sp)
   87c78:	0023883a 	mov	r17,zero
   87c7c:	05001604 	movi	r20,88
   87c80:	05400244 	movi	r21,9
   87c84:	402f883a 	mov	r23,r8
   87c88:	b5800044 	addi	r22,r22,1
   87c8c:	18bff804 	addi	r2,r3,-32
   87c90:	a0827736 	bltu	r20,r2,88670 <___vfiprintf_internal_r+0xb5c>
   87c94:	100490ba 	slli	r2,r2,2
   87c98:	01000234 	movhi	r4,8
   87c9c:	211f2b04 	addi	r4,r4,31916
   87ca0:	1105883a 	add	r2,r2,r4
   87ca4:	10800017 	ldw	r2,0(r2)
   87ca8:	1000683a 	jmp	r2
   87cac:	00088370 	cmpltui	zero,zero,8717
   87cb0:	00088670 	cmpltui	zero,zero,8729
   87cb4:	00088670 	cmpltui	zero,zero,8729
   87cb8:	0008838c 	andi	zero,zero,8718
   87cbc:	00088670 	cmpltui	zero,zero,8729
   87cc0:	00088670 	cmpltui	zero,zero,8729
   87cc4:	00088670 	cmpltui	zero,zero,8729
   87cc8:	00088670 	cmpltui	zero,zero,8729
   87ccc:	00088670 	cmpltui	zero,zero,8729
   87cd0:	00088670 	cmpltui	zero,zero,8729
   87cd4:	00088594 	movui	zero,8726
   87cd8:	000885b8 	rdprs	zero,zero,8726
   87cdc:	00088670 	cmpltui	zero,zero,8729
   87ce0:	00087eb0 	cmpltui	zero,zero,8698
   87ce4:	000885cc 	andi	zero,zero,8727
   87ce8:	00088670 	cmpltui	zero,zero,8729
   87cec:	00088398 	cmpnei	zero,zero,8718
   87cf0:	000883a4 	muli	zero,zero,8718
   87cf4:	000883a4 	muli	zero,zero,8718
   87cf8:	000883a4 	muli	zero,zero,8718
   87cfc:	000883a4 	muli	zero,zero,8718
   87d00:	000883a4 	muli	zero,zero,8718
   87d04:	000883a4 	muli	zero,zero,8718
   87d08:	000883a4 	muli	zero,zero,8718
   87d0c:	000883a4 	muli	zero,zero,8718
   87d10:	000883a4 	muli	zero,zero,8718
   87d14:	00088670 	cmpltui	zero,zero,8729
   87d18:	00088670 	cmpltui	zero,zero,8729
   87d1c:	00088670 	cmpltui	zero,zero,8729
   87d20:	00088670 	cmpltui	zero,zero,8729
   87d24:	00088670 	cmpltui	zero,zero,8729
   87d28:	00088670 	cmpltui	zero,zero,8729
   87d2c:	00088670 	cmpltui	zero,zero,8729
   87d30:	00088670 	cmpltui	zero,zero,8729
   87d34:	00088670 	cmpltui	zero,zero,8729
   87d38:	00088670 	cmpltui	zero,zero,8729
   87d3c:	000883e4 	muli	zero,zero,8719
   87d40:	00088670 	cmpltui	zero,zero,8729
   87d44:	00088670 	cmpltui	zero,zero,8729
   87d48:	00088670 	cmpltui	zero,zero,8729
   87d4c:	00088670 	cmpltui	zero,zero,8729
   87d50:	00088670 	cmpltui	zero,zero,8729
   87d54:	00088670 	cmpltui	zero,zero,8729
   87d58:	00088670 	cmpltui	zero,zero,8729
   87d5c:	00088670 	cmpltui	zero,zero,8729
   87d60:	00088670 	cmpltui	zero,zero,8729
   87d64:	00088670 	cmpltui	zero,zero,8729
   87d68:	00088420 	cmpeqi	zero,zero,8720
   87d6c:	00088670 	cmpltui	zero,zero,8729
   87d70:	00088670 	cmpltui	zero,zero,8729
   87d74:	00088670 	cmpltui	zero,zero,8729
   87d78:	00088670 	cmpltui	zero,zero,8729
   87d7c:	00088670 	cmpltui	zero,zero,8729
   87d80:	0008847c 	xorhi	zero,zero,8721
   87d84:	00088670 	cmpltui	zero,zero,8729
   87d88:	00088670 	cmpltui	zero,zero,8729
   87d8c:	000884f0 	cmpltui	zero,zero,8723
   87d90:	00088670 	cmpltui	zero,zero,8729
   87d94:	00088670 	cmpltui	zero,zero,8729
   87d98:	00088670 	cmpltui	zero,zero,8729
   87d9c:	00088670 	cmpltui	zero,zero,8729
   87da0:	00088670 	cmpltui	zero,zero,8729
   87da4:	00088670 	cmpltui	zero,zero,8729
   87da8:	00088670 	cmpltui	zero,zero,8729
   87dac:	00088670 	cmpltui	zero,zero,8729
   87db0:	00088670 	cmpltui	zero,zero,8729
   87db4:	00088670 	cmpltui	zero,zero,8729
   87db8:	00088298 	cmpnei	zero,zero,8714
   87dbc:	000882c8 	cmpgei	zero,zero,8715
   87dc0:	00088670 	cmpltui	zero,zero,8729
   87dc4:	00088670 	cmpltui	zero,zero,8729
   87dc8:	00088670 	cmpltui	zero,zero,8729
   87dcc:	00088618 	cmpnei	zero,zero,8728
   87dd0:	000882c8 	cmpgei	zero,zero,8715
   87dd4:	00088670 	cmpltui	zero,zero,8729
   87dd8:	00088670 	cmpltui	zero,zero,8729
   87ddc:	00088170 	cmpltui	zero,zero,8709
   87de0:	00088670 	cmpltui	zero,zero,8729
   87de4:	00088184 	movi	zero,8710
   87de8:	000881bc 	xorhi	zero,zero,8710
   87dec:	00087ebc 	xorhi	zero,zero,8698
   87df0:	00088164 	muli	zero,zero,8709
   87df4:	00088670 	cmpltui	zero,zero,8729
   87df8:	00088530 	cmpltui	zero,zero,8724
   87dfc:	00088670 	cmpltui	zero,zero,8729
   87e00:	0008857c 	xorhi	zero,zero,8725
   87e04:	00088670 	cmpltui	zero,zero,8729
   87e08:	00088670 	cmpltui	zero,zero,8729
   87e0c:	00088240 	call	8824 <OSCtxSw_SWITCH_PC+0x87e4>
   87e10:	42000204 	addi	r8,r8,8
   87e14:	d8c02417 	ldw	r3,144(sp)
   87e18:	1c07883a 	add	r3,r3,r16
   87e1c:	d8c02415 	stw	r3,144(sp)
   87e20:	003f8c06 	br	87c54 <__alt_data_end+0xfffc9454>
   87e24:	d9402017 	ldw	r5,128(sp)
   87e28:	d9002117 	ldw	r4,132(sp)
   87e2c:	0083afc0 	call	83afc <__swsetup_r>
   87e30:	1003c11e 	bne	r2,zero,88d38 <___vfiprintf_internal_r+0x1224>
   87e34:	d9402017 	ldw	r5,128(sp)
   87e38:	00c00284 	movi	r3,10
   87e3c:	2880030b 	ldhu	r2,12(r5)
   87e40:	1080068c 	andi	r2,r2,26
   87e44:	10ff581e 	bne	r2,r3,87ba8 <__alt_data_end+0xfffc93a8>
   87e48:	d8c02017 	ldw	r3,128(sp)
   87e4c:	1880038f 	ldh	r2,14(r3)
   87e50:	103f5516 	blt	r2,zero,87ba8 <__alt_data_end+0xfffc93a8>
   87e54:	d9c02217 	ldw	r7,136(sp)
   87e58:	d9002117 	ldw	r4,132(sp)
   87e5c:	a80d883a 	mov	r6,r21
   87e60:	180b883a 	mov	r5,r3
   87e64:	008903c0 	call	8903c <__sbprintf>
   87e68:	dfc03517 	ldw	ra,212(sp)
   87e6c:	df003417 	ldw	fp,208(sp)
   87e70:	ddc03317 	ldw	r23,204(sp)
   87e74:	dd803217 	ldw	r22,200(sp)
   87e78:	dd403117 	ldw	r21,196(sp)
   87e7c:	dd003017 	ldw	r20,192(sp)
   87e80:	dcc02f17 	ldw	r19,188(sp)
   87e84:	dc802e17 	ldw	r18,184(sp)
   87e88:	dc402d17 	ldw	r17,180(sp)
   87e8c:	dc002c17 	ldw	r16,176(sp)
   87e90:	dec03604 	addi	sp,sp,216
   87e94:	f800283a 	ret
   87e98:	0085b080 	call	85b08 <__sinit>
   87e9c:	003f2f06 	br	87b5c <__alt_data_end+0xfffc935c>
   87ea0:	d8c02517 	ldw	r3,148(sp)
   87ea4:	d8802215 	stw	r2,136(sp)
   87ea8:	00c7c83a 	sub	r3,zero,r3
   87eac:	d8c02515 	stw	r3,148(sp)
   87eb0:	8c400114 	ori	r17,r17,4
   87eb4:	b0c00007 	ldb	r3,0(r22)
   87eb8:	003f7306 	br	87c88 <__alt_data_end+0xfffc9488>
   87ebc:	00800c04 	movi	r2,48
   87ec0:	d9402217 	ldw	r5,136(sp)
   87ec4:	d8801d05 	stb	r2,116(sp)
   87ec8:	00801e04 	movi	r2,120
   87ecc:	d8801d45 	stb	r2,117(sp)
   87ed0:	d8001d85 	stb	zero,118(sp)
   87ed4:	b811883a 	mov	r8,r23
   87ed8:	28c00104 	addi	r3,r5,4
   87edc:	2cc00017 	ldw	r19,0(r5)
   87ee0:	0029883a 	mov	r20,zero
   87ee4:	88800094 	ori	r2,r17,2
   87ee8:	80032516 	blt	r16,zero,88b80 <___vfiprintf_internal_r+0x106c>
   87eec:	00bfdfc4 	movi	r2,-129
   87ef0:	88a2703a 	and	r17,r17,r2
   87ef4:	d8c02215 	stw	r3,136(sp)
   87ef8:	8c400094 	ori	r17,r17,2
   87efc:	98032a1e 	bne	r19,zero,88ba8 <___vfiprintf_internal_r+0x1094>
   87f00:	008002b4 	movhi	r2,10
   87f04:	10a0ce04 	addi	r2,r2,-31944
   87f08:	d8802615 	stw	r2,152(sp)
   87f0c:	002b883a 	mov	r21,zero
   87f10:	8001741e 	bne	r16,zero,884e4 <___vfiprintf_internal_r+0x9d0>
   87f14:	0021883a 	mov	r16,zero
   87f18:	0029883a 	mov	r20,zero
   87f1c:	ddc01a04 	addi	r23,sp,104
   87f20:	8027883a 	mov	r19,r16
   87f24:	8500010e 	bge	r16,r20,87f2c <___vfiprintf_internal_r+0x418>
   87f28:	a027883a 	mov	r19,r20
   87f2c:	ad403fcc 	andi	r21,r21,255
   87f30:	ad40201c 	xori	r21,r21,128
   87f34:	ad7fe004 	addi	r21,r21,-128
   87f38:	a8000126 	beq	r21,zero,87f40 <___vfiprintf_internal_r+0x42c>
   87f3c:	9cc00044 	addi	r19,r19,1
   87f40:	89c0008c 	andi	r7,r17,2
   87f44:	38000126 	beq	r7,zero,87f4c <___vfiprintf_internal_r+0x438>
   87f48:	9cc00084 	addi	r19,r19,2
   87f4c:	88c0210c 	andi	r3,r17,132
   87f50:	1801dd1e 	bne	r3,zero,886c8 <___vfiprintf_internal_r+0xbb4>
   87f54:	d9402517 	ldw	r5,148(sp)
   87f58:	2cebc83a 	sub	r21,r5,r19
   87f5c:	0541da0e 	bge	zero,r21,886c8 <___vfiprintf_internal_r+0xbb4>
   87f60:	07000404 	movi	fp,16
   87f64:	d8801c17 	ldw	r2,112(sp)
   87f68:	e543be0e 	bge	fp,r21,88e64 <___vfiprintf_internal_r+0x1350>
   87f6c:	014002b4 	movhi	r5,10
   87f70:	29613304 	addi	r5,r5,-31540
   87f74:	dc002715 	stw	r16,156(sp)
   87f78:	d9801b17 	ldw	r6,108(sp)
   87f7c:	a821883a 	mov	r16,r21
   87f80:	d9402315 	stw	r5,140(sp)
   87f84:	028001c4 	movi	r10,7
   87f88:	d9c02915 	stw	r7,164(sp)
   87f8c:	182b883a 	mov	r21,r3
   87f90:	00000506 	br	87fa8 <___vfiprintf_internal_r+0x494>
   87f94:	31000084 	addi	r4,r6,2
   87f98:	42000204 	addi	r8,r8,8
   87f9c:	180d883a 	mov	r6,r3
   87fa0:	843ffc04 	addi	r16,r16,-16
   87fa4:	e4000f0e 	bge	fp,r16,87fe4 <___vfiprintf_internal_r+0x4d0>
   87fa8:	010002b4 	movhi	r4,10
   87fac:	10800404 	addi	r2,r2,16
   87fb0:	30c00044 	addi	r3,r6,1
   87fb4:	21213304 	addi	r4,r4,-31540
   87fb8:	41000015 	stw	r4,0(r8)
   87fbc:	47000115 	stw	fp,4(r8)
   87fc0:	d8801c15 	stw	r2,112(sp)
   87fc4:	d8c01b15 	stw	r3,108(sp)
   87fc8:	50fff20e 	bge	r10,r3,87f94 <__alt_data_end+0xfffc9794>
   87fcc:	1001b21e 	bne	r2,zero,88698 <___vfiprintf_internal_r+0xb84>
   87fd0:	843ffc04 	addi	r16,r16,-16
   87fd4:	000d883a 	mov	r6,zero
   87fd8:	01000044 	movi	r4,1
   87fdc:	d811883a 	mov	r8,sp
   87fe0:	e43ff116 	blt	fp,r16,87fa8 <__alt_data_end+0xfffc97a8>
   87fe4:	a807883a 	mov	r3,r21
   87fe8:	d9c02917 	ldw	r7,164(sp)
   87fec:	802b883a 	mov	r21,r16
   87ff0:	dc002717 	ldw	r16,156(sp)
   87ff4:	d9402317 	ldw	r5,140(sp)
   87ff8:	a885883a 	add	r2,r21,r2
   87ffc:	45400115 	stw	r21,4(r8)
   88000:	41400015 	stw	r5,0(r8)
   88004:	d8801c15 	stw	r2,112(sp)
   88008:	d9001b15 	stw	r4,108(sp)
   8800c:	014001c4 	movi	r5,7
   88010:	29026216 	blt	r5,r4,8899c <___vfiprintf_internal_r+0xe88>
   88014:	d9801d87 	ldb	r6,118(sp)
   88018:	42000204 	addi	r8,r8,8
   8801c:	21400044 	addi	r5,r4,1
   88020:	3001ae1e 	bne	r6,zero,886dc <___vfiprintf_internal_r+0xbc8>
   88024:	3801bb26 	beq	r7,zero,88714 <___vfiprintf_internal_r+0xc00>
   88028:	d9001d04 	addi	r4,sp,116
   8802c:	10800084 	addi	r2,r2,2
   88030:	41000015 	stw	r4,0(r8)
   88034:	01000084 	movi	r4,2
   88038:	41000115 	stw	r4,4(r8)
   8803c:	d8801c15 	stw	r2,112(sp)
   88040:	d9401b15 	stw	r5,108(sp)
   88044:	010001c4 	movi	r4,7
   88048:	2142680e 	bge	r4,r5,889ec <___vfiprintf_internal_r+0xed8>
   8804c:	1002b11e 	bne	r2,zero,88b14 <___vfiprintf_internal_r+0x1000>
   88050:	01802004 	movi	r6,128
   88054:	01400044 	movi	r5,1
   88058:	0009883a 	mov	r4,zero
   8805c:	d811883a 	mov	r8,sp
   88060:	1981ae1e 	bne	r3,r6,8871c <___vfiprintf_internal_r+0xc08>
   88064:	d8c02517 	ldw	r3,148(sp)
   88068:	1cf9c83a 	sub	fp,r3,r19
   8806c:	0701ab0e 	bge	zero,fp,8871c <___vfiprintf_internal_r+0xc08>
   88070:	05400404 	movi	r21,16
   88074:	af03a90e 	bge	r21,fp,88f1c <___vfiprintf_internal_r+0x1408>
   88078:	014002b4 	movhi	r5,10
   8807c:	29612f04 	addi	r5,r5,-31556
   88080:	d9402315 	stw	r5,140(sp)
   88084:	01c001c4 	movi	r7,7
   88088:	00000506 	br	880a0 <___vfiprintf_internal_r+0x58c>
   8808c:	21800084 	addi	r6,r4,2
   88090:	42000204 	addi	r8,r8,8
   88094:	1809883a 	mov	r4,r3
   88098:	e73ffc04 	addi	fp,fp,-16
   8809c:	af000d0e 	bge	r21,fp,880d4 <___vfiprintf_internal_r+0x5c0>
   880a0:	10800404 	addi	r2,r2,16
   880a4:	20c00044 	addi	r3,r4,1
   880a8:	44800015 	stw	r18,0(r8)
   880ac:	45400115 	stw	r21,4(r8)
   880b0:	d8801c15 	stw	r2,112(sp)
   880b4:	d8c01b15 	stw	r3,108(sp)
   880b8:	38fff40e 	bge	r7,r3,8808c <__alt_data_end+0xfffc988c>
   880bc:	10022b1e 	bne	r2,zero,8896c <___vfiprintf_internal_r+0xe58>
   880c0:	e73ffc04 	addi	fp,fp,-16
   880c4:	01800044 	movi	r6,1
   880c8:	0009883a 	mov	r4,zero
   880cc:	d811883a 	mov	r8,sp
   880d0:	af3ff316 	blt	r21,fp,880a0 <__alt_data_end+0xfffc98a0>
   880d4:	d8c02317 	ldw	r3,140(sp)
   880d8:	1705883a 	add	r2,r2,fp
   880dc:	47000115 	stw	fp,4(r8)
   880e0:	40c00015 	stw	r3,0(r8)
   880e4:	d8801c15 	stw	r2,112(sp)
   880e8:	d9801b15 	stw	r6,108(sp)
   880ec:	00c001c4 	movi	r3,7
   880f0:	19829416 	blt	r3,r6,88b44 <___vfiprintf_internal_r+0x1030>
   880f4:	8521c83a 	sub	r16,r16,r20
   880f8:	42000204 	addi	r8,r8,8
   880fc:	31400044 	addi	r5,r6,1
   88100:	3009883a 	mov	r4,r6
   88104:	04018716 	blt	zero,r16,88724 <___vfiprintf_internal_r+0xc10>
   88108:	a085883a 	add	r2,r20,r2
   8810c:	45c00015 	stw	r23,0(r8)
   88110:	45000115 	stw	r20,4(r8)
   88114:	d8801c15 	stw	r2,112(sp)
   88118:	d9401b15 	stw	r5,108(sp)
   8811c:	00c001c4 	movi	r3,7
   88120:	1941c20e 	bge	r3,r5,8882c <___vfiprintf_internal_r+0xd18>
   88124:	1002531e 	bne	r2,zero,88a74 <___vfiprintf_internal_r+0xf60>
   88128:	d8001b15 	stw	zero,108(sp)
   8812c:	8c40010c 	andi	r17,r17,4
   88130:	88023226 	beq	r17,zero,889fc <___vfiprintf_internal_r+0xee8>
   88134:	d9002517 	ldw	r4,148(sp)
   88138:	24e3c83a 	sub	r17,r4,r19
   8813c:	04432916 	blt	zero,r17,88de4 <___vfiprintf_internal_r+0x12d0>
   88140:	d8802517 	ldw	r2,148(sp)
   88144:	14c0010e 	bge	r2,r19,8814c <___vfiprintf_internal_r+0x638>
   88148:	9805883a 	mov	r2,r19
   8814c:	d8c02417 	ldw	r3,144(sp)
   88150:	1887883a 	add	r3,r3,r2
   88154:	d8c02415 	stw	r3,144(sp)
   88158:	d8001b15 	stw	zero,108(sp)
   8815c:	d811883a 	mov	r8,sp
   88160:	003ea006 	br	87be4 <__alt_data_end+0xfffc93e4>
   88164:	8c400814 	ori	r17,r17,32
   88168:	b0c00007 	ldb	r3,0(r22)
   8816c:	003ec606 	br	87c88 <__alt_data_end+0xfffc9488>
   88170:	b0c00007 	ldb	r3,0(r22)
   88174:	00801b04 	movi	r2,108
   88178:	18832026 	beq	r3,r2,88dfc <___vfiprintf_internal_r+0x12e8>
   8817c:	8c400414 	ori	r17,r17,16
   88180:	003ec106 	br	87c88 <__alt_data_end+0xfffc9488>
   88184:	9cc03fcc 	andi	r19,r19,255
   88188:	b811883a 	mov	r8,r23
   8818c:	9803981e 	bne	r19,zero,88ff0 <___vfiprintf_internal_r+0x14dc>
   88190:	8880080c 	andi	r2,r17,32
   88194:	1002be26 	beq	r2,zero,88c90 <___vfiprintf_internal_r+0x117c>
   88198:	d9002217 	ldw	r4,136(sp)
   8819c:	d9402417 	ldw	r5,144(sp)
   881a0:	20800017 	ldw	r2,0(r4)
   881a4:	2807d7fa 	srai	r3,r5,31
   881a8:	21000104 	addi	r4,r4,4
   881ac:	d9002215 	stw	r4,136(sp)
   881b0:	11400015 	stw	r5,0(r2)
   881b4:	10c00115 	stw	r3,4(r2)
   881b8:	003e8a06 	br	87be4 <__alt_data_end+0xfffc93e4>
   881bc:	9cc03fcc 	andi	r19,r19,255
   881c0:	b811883a 	mov	r8,r23
   881c4:	9803871e 	bne	r19,zero,88fe4 <___vfiprintf_internal_r+0x14d0>
   881c8:	8880080c 	andi	r2,r17,32
   881cc:	10009a26 	beq	r2,zero,88438 <___vfiprintf_internal_r+0x924>
   881d0:	d9002217 	ldw	r4,136(sp)
   881d4:	d8001d85 	stb	zero,118(sp)
   881d8:	20800204 	addi	r2,r4,8
   881dc:	24c00017 	ldw	r19,0(r4)
   881e0:	25000117 	ldw	r20,4(r4)
   881e4:	8002a416 	blt	r16,zero,88c78 <___vfiprintf_internal_r+0x1164>
   881e8:	013fdfc4 	movi	r4,-129
   881ec:	9d06b03a 	or	r3,r19,r20
   881f0:	d8802215 	stw	r2,136(sp)
   881f4:	8922703a 	and	r17,r17,r4
   881f8:	18009b26 	beq	r3,zero,88468 <___vfiprintf_internal_r+0x954>
   881fc:	002b883a 	mov	r21,zero
   88200:	ddc01a04 	addi	r23,sp,104
   88204:	9806d0fa 	srli	r3,r19,3
   88208:	a008977a 	slli	r4,r20,29
   8820c:	a028d0fa 	srli	r20,r20,3
   88210:	9cc001cc 	andi	r19,r19,7
   88214:	98800c04 	addi	r2,r19,48
   88218:	bdffffc4 	addi	r23,r23,-1
   8821c:	20e6b03a 	or	r19,r4,r3
   88220:	b8800005 	stb	r2,0(r23)
   88224:	9d06b03a 	or	r3,r19,r20
   88228:	183ff61e 	bne	r3,zero,88204 <__alt_data_end+0xfffc9a04>
   8822c:	88c0004c 	andi	r3,r17,1
   88230:	18021f1e 	bne	r3,zero,88ab0 <___vfiprintf_internal_r+0xf9c>
   88234:	d9401e17 	ldw	r5,120(sp)
   88238:	2de9c83a 	sub	r20,r5,r23
   8823c:	003f3806 	br	87f20 <__alt_data_end+0xfffc9720>
   88240:	9cc03fcc 	andi	r19,r19,255
   88244:	b811883a 	mov	r8,r23
   88248:	98034f1e 	bne	r19,zero,88f88 <___vfiprintf_internal_r+0x1474>
   8824c:	008002b4 	movhi	r2,10
   88250:	10a0ce04 	addi	r2,r2,-31944
   88254:	d8802615 	stw	r2,152(sp)
   88258:	8880080c 	andi	r2,r17,32
   8825c:	1000ac26 	beq	r2,zero,88510 <___vfiprintf_internal_r+0x9fc>
   88260:	d9002217 	ldw	r4,136(sp)
   88264:	24c00017 	ldw	r19,0(r4)
   88268:	25000117 	ldw	r20,4(r4)
   8826c:	21000204 	addi	r4,r4,8
   88270:	d9002215 	stw	r4,136(sp)
   88274:	8880004c 	andi	r2,r17,1
   88278:	1001e726 	beq	r2,zero,88a18 <___vfiprintf_internal_r+0xf04>
   8827c:	9d04b03a 	or	r2,r19,r20
   88280:	10025c1e 	bne	r2,zero,88bf4 <___vfiprintf_internal_r+0x10e0>
   88284:	d8001d85 	stb	zero,118(sp)
   88288:	80024416 	blt	r16,zero,88b9c <___vfiprintf_internal_r+0x1088>
   8828c:	00bfdfc4 	movi	r2,-129
   88290:	88a2703a 	and	r17,r17,r2
   88294:	003f1d06 	br	87f0c <__alt_data_end+0xfffc970c>
   88298:	d8c02217 	ldw	r3,136(sp)
   8829c:	04c00044 	movi	r19,1
   882a0:	b811883a 	mov	r8,r23
   882a4:	18800017 	ldw	r2,0(r3)
   882a8:	18c00104 	addi	r3,r3,4
   882ac:	d8001d85 	stb	zero,118(sp)
   882b0:	d8801005 	stb	r2,64(sp)
   882b4:	d8c02215 	stw	r3,136(sp)
   882b8:	9829883a 	mov	r20,r19
   882bc:	ddc01004 	addi	r23,sp,64
   882c0:	0021883a 	mov	r16,zero
   882c4:	003f1e06 	br	87f40 <__alt_data_end+0xfffc9740>
   882c8:	9cc03fcc 	andi	r19,r19,255
   882cc:	b811883a 	mov	r8,r23
   882d0:	9803331e 	bne	r19,zero,88fa0 <___vfiprintf_internal_r+0x148c>
   882d4:	8880080c 	andi	r2,r17,32
   882d8:	10004826 	beq	r2,zero,883fc <___vfiprintf_internal_r+0x8e8>
   882dc:	d9002217 	ldw	r4,136(sp)
   882e0:	20800117 	ldw	r2,4(r4)
   882e4:	24c00017 	ldw	r19,0(r4)
   882e8:	21000204 	addi	r4,r4,8
   882ec:	d9002215 	stw	r4,136(sp)
   882f0:	1029883a 	mov	r20,r2
   882f4:	10024c16 	blt	r2,zero,88c28 <___vfiprintf_internal_r+0x1114>
   882f8:	dd401d83 	ldbu	r21,118(sp)
   882fc:	80007116 	blt	r16,zero,884c4 <___vfiprintf_internal_r+0x9b0>
   88300:	00ffdfc4 	movi	r3,-129
   88304:	9d04b03a 	or	r2,r19,r20
   88308:	88e2703a 	and	r17,r17,r3
   8830c:	1000d126 	beq	r2,zero,88654 <___vfiprintf_internal_r+0xb40>
   88310:	a0023526 	beq	r20,zero,88be8 <___vfiprintf_internal_r+0x10d4>
   88314:	ddc01a04 	addi	r23,sp,104
   88318:	4039883a 	mov	fp,r8
   8831c:	9809883a 	mov	r4,r19
   88320:	a00b883a 	mov	r5,r20
   88324:	01800284 	movi	r6,10
   88328:	000f883a 	mov	r7,zero
   8832c:	008abc80 	call	8abc8 <__umoddi3>
   88330:	10800c04 	addi	r2,r2,48
   88334:	bdffffc4 	addi	r23,r23,-1
   88338:	9809883a 	mov	r4,r19
   8833c:	a00b883a 	mov	r5,r20
   88340:	b8800005 	stb	r2,0(r23)
   88344:	01800284 	movi	r6,10
   88348:	000f883a 	mov	r7,zero
   8834c:	008a5cc0 	call	8a5cc <__udivdi3>
   88350:	1027883a 	mov	r19,r2
   88354:	10c4b03a 	or	r2,r2,r3
   88358:	1829883a 	mov	r20,r3
   8835c:	103fef1e 	bne	r2,zero,8831c <__alt_data_end+0xfffc9b1c>
   88360:	d9001e17 	ldw	r4,120(sp)
   88364:	e011883a 	mov	r8,fp
   88368:	25e9c83a 	sub	r20,r4,r23
   8836c:	003eec06 	br	87f20 <__alt_data_end+0xfffc9720>
   88370:	d8802307 	ldb	r2,140(sp)
   88374:	1002361e 	bne	r2,zero,88c50 <___vfiprintf_internal_r+0x113c>
   88378:	00c00804 	movi	r3,32
   8837c:	d8c02305 	stb	r3,140(sp)
   88380:	04c00044 	movi	r19,1
   88384:	b0c00007 	ldb	r3,0(r22)
   88388:	003e3f06 	br	87c88 <__alt_data_end+0xfffc9488>
   8838c:	8c400054 	ori	r17,r17,1
   88390:	b0c00007 	ldb	r3,0(r22)
   88394:	003e3c06 	br	87c88 <__alt_data_end+0xfffc9488>
   88398:	8c402014 	ori	r17,r17,128
   8839c:	b0c00007 	ldb	r3,0(r22)
   883a0:	003e3906 	br	87c88 <__alt_data_end+0xfffc9488>
   883a4:	dc002715 	stw	r16,156(sp)
   883a8:	d8002515 	stw	zero,148(sp)
   883ac:	1f3ff404 	addi	fp,r3,-48
   883b0:	0009883a 	mov	r4,zero
   883b4:	b021883a 	mov	r16,r22
   883b8:	01400284 	movi	r5,10
   883bc:	008b18c0 	call	8b18c <__mulsi3>
   883c0:	80c00007 	ldb	r3,0(r16)
   883c4:	e089883a 	add	r4,fp,r2
   883c8:	b5800044 	addi	r22,r22,1
   883cc:	1f3ff404 	addi	fp,r3,-48
   883d0:	b021883a 	mov	r16,r22
   883d4:	af3ff82e 	bgeu	r21,fp,883b8 <__alt_data_end+0xfffc9bb8>
   883d8:	d9002515 	stw	r4,148(sp)
   883dc:	dc002717 	ldw	r16,156(sp)
   883e0:	003e2a06 	br	87c8c <__alt_data_end+0xfffc948c>
   883e4:	9cc03fcc 	andi	r19,r19,255
   883e8:	b811883a 	mov	r8,r23
   883ec:	9802e91e 	bne	r19,zero,88f94 <___vfiprintf_internal_r+0x1480>
   883f0:	8c400414 	ori	r17,r17,16
   883f4:	8880080c 	andi	r2,r17,32
   883f8:	103fb81e 	bne	r2,zero,882dc <__alt_data_end+0xfffc9adc>
   883fc:	8880040c 	andi	r2,r17,16
   88400:	10022e26 	beq	r2,zero,88cbc <___vfiprintf_internal_r+0x11a8>
   88404:	d9402217 	ldw	r5,136(sp)
   88408:	2cc00017 	ldw	r19,0(r5)
   8840c:	29400104 	addi	r5,r5,4
   88410:	d9402215 	stw	r5,136(sp)
   88414:	9829d7fa 	srai	r20,r19,31
   88418:	a005883a 	mov	r2,r20
   8841c:	003fb506 	br	882f4 <__alt_data_end+0xfffc9af4>
   88420:	9cc03fcc 	andi	r19,r19,255
   88424:	b811883a 	mov	r8,r23
   88428:	9802fa1e 	bne	r19,zero,89014 <___vfiprintf_internal_r+0x1500>
   8842c:	8c400414 	ori	r17,r17,16
   88430:	8880080c 	andi	r2,r17,32
   88434:	103f661e 	bne	r2,zero,881d0 <__alt_data_end+0xfffc99d0>
   88438:	8880040c 	andi	r2,r17,16
   8843c:	10020626 	beq	r2,zero,88c58 <___vfiprintf_internal_r+0x1144>
   88440:	d9402217 	ldw	r5,136(sp)
   88444:	d8001d85 	stb	zero,118(sp)
   88448:	0029883a 	mov	r20,zero
   8844c:	28800104 	addi	r2,r5,4
   88450:	2cc00017 	ldw	r19,0(r5)
   88454:	80020816 	blt	r16,zero,88c78 <___vfiprintf_internal_r+0x1164>
   88458:	00ffdfc4 	movi	r3,-129
   8845c:	d8802215 	stw	r2,136(sp)
   88460:	88e2703a 	and	r17,r17,r3
   88464:	983f651e 	bne	r19,zero,881fc <__alt_data_end+0xfffc99fc>
   88468:	002b883a 	mov	r21,zero
   8846c:	8002cf26 	beq	r16,zero,88fac <___vfiprintf_internal_r+0x1498>
   88470:	0027883a 	mov	r19,zero
   88474:	0029883a 	mov	r20,zero
   88478:	003f6106 	br	88200 <__alt_data_end+0xfffc9a00>
   8847c:	9cc03fcc 	andi	r19,r19,255
   88480:	b811883a 	mov	r8,r23
   88484:	9802e01e 	bne	r19,zero,89008 <___vfiprintf_internal_r+0x14f4>
   88488:	8c400414 	ori	r17,r17,16
   8848c:	8880080c 	andi	r2,r17,32
   88490:	1000641e 	bne	r2,zero,88624 <___vfiprintf_internal_r+0xb10>
   88494:	8880040c 	andi	r2,r17,16
   88498:	1001c81e 	bne	r2,zero,88bbc <___vfiprintf_internal_r+0x10a8>
   8849c:	8880100c 	andi	r2,r17,64
   884a0:	d8001d85 	stb	zero,118(sp)
   884a4:	1002281e 	bne	r2,zero,88d48 <___vfiprintf_internal_r+0x1234>
   884a8:	d9002217 	ldw	r4,136(sp)
   884ac:	0029883a 	mov	r20,zero
   884b0:	20800104 	addi	r2,r4,4
   884b4:	24c00017 	ldw	r19,0(r4)
   884b8:	8001c60e 	bge	r16,zero,88bd4 <___vfiprintf_internal_r+0x10c0>
   884bc:	d8802215 	stw	r2,136(sp)
   884c0:	002b883a 	mov	r21,zero
   884c4:	9d04b03a 	or	r2,r19,r20
   884c8:	103f911e 	bne	r2,zero,88310 <__alt_data_end+0xfffc9b10>
   884cc:	00800044 	movi	r2,1
   884d0:	10803fcc 	andi	r2,r2,255
   884d4:	00c00044 	movi	r3,1
   884d8:	10c05f26 	beq	r2,r3,88658 <___vfiprintf_internal_r+0xb44>
   884dc:	00c00084 	movi	r3,2
   884e0:	10ffe31e 	bne	r2,r3,88470 <__alt_data_end+0xfffc9c70>
   884e4:	0027883a 	mov	r19,zero
   884e8:	0029883a 	mov	r20,zero
   884ec:	00015106 	br	88a34 <___vfiprintf_internal_r+0xf20>
   884f0:	9cc03fcc 	andi	r19,r19,255
   884f4:	b811883a 	mov	r8,r23
   884f8:	9802c01e 	bne	r19,zero,88ffc <___vfiprintf_internal_r+0x14e8>
   884fc:	014002b4 	movhi	r5,10
   88500:	2960c904 	addi	r5,r5,-31964
   88504:	d9402615 	stw	r5,152(sp)
   88508:	8880080c 	andi	r2,r17,32
   8850c:	103f541e 	bne	r2,zero,88260 <__alt_data_end+0xfffc9a60>
   88510:	8880040c 	andi	r2,r17,16
   88514:	1001f226 	beq	r2,zero,88ce0 <___vfiprintf_internal_r+0x11cc>
   88518:	d9402217 	ldw	r5,136(sp)
   8851c:	0029883a 	mov	r20,zero
   88520:	2cc00017 	ldw	r19,0(r5)
   88524:	29400104 	addi	r5,r5,4
   88528:	d9402215 	stw	r5,136(sp)
   8852c:	003f5106 	br	88274 <__alt_data_end+0xfffc9a74>
   88530:	d8c02217 	ldw	r3,136(sp)
   88534:	b811883a 	mov	r8,r23
   88538:	d8001d85 	stb	zero,118(sp)
   8853c:	1dc00017 	ldw	r23,0(r3)
   88540:	1f000104 	addi	fp,r3,4
   88544:	b8025926 	beq	r23,zero,88eac <___vfiprintf_internal_r+0x1398>
   88548:	80023316 	blt	r16,zero,88e18 <___vfiprintf_internal_r+0x1304>
   8854c:	800d883a 	mov	r6,r16
   88550:	000b883a 	mov	r5,zero
   88554:	b809883a 	mov	r4,r23
   88558:	da002a15 	stw	r8,168(sp)
   8855c:	00863ac0 	call	863ac <memchr>
   88560:	da002a17 	ldw	r8,168(sp)
   88564:	10026826 	beq	r2,zero,88f08 <___vfiprintf_internal_r+0x13f4>
   88568:	15e9c83a 	sub	r20,r2,r23
   8856c:	dd401d83 	ldbu	r21,118(sp)
   88570:	df002215 	stw	fp,136(sp)
   88574:	0021883a 	mov	r16,zero
   88578:	003e6906 	br	87f20 <__alt_data_end+0xfffc9720>
   8857c:	9cc03fcc 	andi	r19,r19,255
   88580:	b811883a 	mov	r8,r23
   88584:	983fc126 	beq	r19,zero,8848c <__alt_data_end+0xfffc9c8c>
   88588:	d8c02303 	ldbu	r3,140(sp)
   8858c:	d8c01d85 	stb	r3,118(sp)
   88590:	003fbe06 	br	8848c <__alt_data_end+0xfffc9c8c>
   88594:	d9002217 	ldw	r4,136(sp)
   88598:	d9402217 	ldw	r5,136(sp)
   8859c:	21000017 	ldw	r4,0(r4)
   885a0:	28800104 	addi	r2,r5,4
   885a4:	d9002515 	stw	r4,148(sp)
   885a8:	203e3d16 	blt	r4,zero,87ea0 <__alt_data_end+0xfffc96a0>
   885ac:	d8802215 	stw	r2,136(sp)
   885b0:	b0c00007 	ldb	r3,0(r22)
   885b4:	003db406 	br	87c88 <__alt_data_end+0xfffc9488>
   885b8:	00c00ac4 	movi	r3,43
   885bc:	d8c02305 	stb	r3,140(sp)
   885c0:	04c00044 	movi	r19,1
   885c4:	b0c00007 	ldb	r3,0(r22)
   885c8:	003daf06 	br	87c88 <__alt_data_end+0xfffc9488>
   885cc:	b0c00007 	ldb	r3,0(r22)
   885d0:	01000a84 	movi	r4,42
   885d4:	b4000044 	addi	r16,r22,1
   885d8:	19025e26 	beq	r3,r4,88f54 <___vfiprintf_internal_r+0x1440>
   885dc:	1f3ff404 	addi	fp,r3,-48
   885e0:	0009883a 	mov	r4,zero
   885e4:	af025236 	bltu	r21,fp,88f30 <___vfiprintf_internal_r+0x141c>
   885e8:	01400284 	movi	r5,10
   885ec:	008b18c0 	call	8b18c <__mulsi3>
   885f0:	80c00007 	ldb	r3,0(r16)
   885f4:	1709883a 	add	r4,r2,fp
   885f8:	85800044 	addi	r22,r16,1
   885fc:	1f3ff404 	addi	fp,r3,-48
   88600:	b021883a 	mov	r16,r22
   88604:	af3ff82e 	bgeu	r21,fp,885e8 <__alt_data_end+0xfffc9de8>
   88608:	2021883a 	mov	r16,r4
   8860c:	203d9f0e 	bge	r4,zero,87c8c <__alt_data_end+0xfffc948c>
   88610:	043fffc4 	movi	r16,-1
   88614:	003d9d06 	br	87c8c <__alt_data_end+0xfffc948c>
   88618:	8c401014 	ori	r17,r17,64
   8861c:	b0c00007 	ldb	r3,0(r22)
   88620:	003d9906 	br	87c88 <__alt_data_end+0xfffc9488>
   88624:	d9002217 	ldw	r4,136(sp)
   88628:	d8001d85 	stb	zero,118(sp)
   8862c:	20c00204 	addi	r3,r4,8
   88630:	24c00017 	ldw	r19,0(r4)
   88634:	25000117 	ldw	r20,4(r4)
   88638:	8001e716 	blt	r16,zero,88dd8 <___vfiprintf_internal_r+0x12c4>
   8863c:	013fdfc4 	movi	r4,-129
   88640:	9d04b03a 	or	r2,r19,r20
   88644:	d8c02215 	stw	r3,136(sp)
   88648:	8922703a 	and	r17,r17,r4
   8864c:	002b883a 	mov	r21,zero
   88650:	103f2f1e 	bne	r2,zero,88310 <__alt_data_end+0xfffc9b10>
   88654:	803e2f26 	beq	r16,zero,87f14 <__alt_data_end+0xfffc9714>
   88658:	0027883a 	mov	r19,zero
   8865c:	9cc00c04 	addi	r19,r19,48
   88660:	dcc019c5 	stb	r19,103(sp)
   88664:	dd002817 	ldw	r20,160(sp)
   88668:	ddc019c4 	addi	r23,sp,103
   8866c:	003e2c06 	br	87f20 <__alt_data_end+0xfffc9720>
   88670:	9cc03fcc 	andi	r19,r19,255
   88674:	b811883a 	mov	r8,r23
   88678:	9802571e 	bne	r19,zero,88fd8 <___vfiprintf_internal_r+0x14c4>
   8867c:	18005726 	beq	r3,zero,887dc <___vfiprintf_internal_r+0xcc8>
   88680:	04c00044 	movi	r19,1
   88684:	d8c01005 	stb	r3,64(sp)
   88688:	d8001d85 	stb	zero,118(sp)
   8868c:	9829883a 	mov	r20,r19
   88690:	ddc01004 	addi	r23,sp,64
   88694:	003f0a06 	br	882c0 <__alt_data_end+0xfffc9ac0>
   88698:	d9402017 	ldw	r5,128(sp)
   8869c:	d9002117 	ldw	r4,132(sp)
   886a0:	d9801a04 	addi	r6,sp,104
   886a4:	da802a15 	stw	r10,168(sp)
   886a8:	0087a000 	call	87a00 <__sprint_r.part.0>
   886ac:	da802a17 	ldw	r10,168(sp)
   886b0:	1000501e 	bne	r2,zero,887f4 <___vfiprintf_internal_r+0xce0>
   886b4:	d9801b17 	ldw	r6,108(sp)
   886b8:	d8801c17 	ldw	r2,112(sp)
   886bc:	d811883a 	mov	r8,sp
   886c0:	31000044 	addi	r4,r6,1
   886c4:	003e3606 	br	87fa0 <__alt_data_end+0xfffc97a0>
   886c8:	d9001b17 	ldw	r4,108(sp)
   886cc:	d8801c17 	ldw	r2,112(sp)
   886d0:	21400044 	addi	r5,r4,1
   886d4:	d9801d87 	ldb	r6,118(sp)
   886d8:	303e5226 	beq	r6,zero,88024 <__alt_data_end+0xfffc9824>
   886dc:	01800044 	movi	r6,1
   886e0:	d9001d84 	addi	r4,sp,118
   886e4:	1185883a 	add	r2,r2,r6
   886e8:	41000015 	stw	r4,0(r8)
   886ec:	41800115 	stw	r6,4(r8)
   886f0:	d8801c15 	stw	r2,112(sp)
   886f4:	d9401b15 	stw	r5,108(sp)
   886f8:	010001c4 	movi	r4,7
   886fc:	2140b00e 	bge	r4,r5,889c0 <___vfiprintf_internal_r+0xeac>
   88700:	1000f61e 	bne	r2,zero,88adc <___vfiprintf_internal_r+0xfc8>
   88704:	3800b31e 	bne	r7,zero,889d4 <___vfiprintf_internal_r+0xec0>
   88708:	0009883a 	mov	r4,zero
   8870c:	300b883a 	mov	r5,r6
   88710:	d811883a 	mov	r8,sp
   88714:	01802004 	movi	r6,128
   88718:	19be5226 	beq	r3,r6,88064 <__alt_data_end+0xfffc9864>
   8871c:	8521c83a 	sub	r16,r16,r20
   88720:	043e790e 	bge	zero,r16,88108 <__alt_data_end+0xfffc9908>
   88724:	05400404 	movi	r21,16
   88728:	ac01b00e 	bge	r21,r16,88dec <___vfiprintf_internal_r+0x12d8>
   8872c:	014002b4 	movhi	r5,10
   88730:	29612f04 	addi	r5,r5,-31556
   88734:	d9402315 	stw	r5,140(sp)
   88738:	070001c4 	movi	fp,7
   8873c:	00000506 	br	88754 <___vfiprintf_internal_r+0xc40>
   88740:	21400084 	addi	r5,r4,2
   88744:	42000204 	addi	r8,r8,8
   88748:	1809883a 	mov	r4,r3
   8874c:	843ffc04 	addi	r16,r16,-16
   88750:	ac000d0e 	bge	r21,r16,88788 <___vfiprintf_internal_r+0xc74>
   88754:	10800404 	addi	r2,r2,16
   88758:	20c00044 	addi	r3,r4,1
   8875c:	44800015 	stw	r18,0(r8)
   88760:	45400115 	stw	r21,4(r8)
   88764:	d8801c15 	stw	r2,112(sp)
   88768:	d8c01b15 	stw	r3,108(sp)
   8876c:	e0fff40e 	bge	fp,r3,88740 <__alt_data_end+0xfffc9f40>
   88770:	1000101e 	bne	r2,zero,887b4 <___vfiprintf_internal_r+0xca0>
   88774:	843ffc04 	addi	r16,r16,-16
   88778:	01400044 	movi	r5,1
   8877c:	0009883a 	mov	r4,zero
   88780:	d811883a 	mov	r8,sp
   88784:	ac3ff316 	blt	r21,r16,88754 <__alt_data_end+0xfffc9f54>
   88788:	d8c02317 	ldw	r3,140(sp)
   8878c:	1405883a 	add	r2,r2,r16
   88790:	44000115 	stw	r16,4(r8)
   88794:	40c00015 	stw	r3,0(r8)
   88798:	d8801c15 	stw	r2,112(sp)
   8879c:	d9401b15 	stw	r5,108(sp)
   887a0:	00c001c4 	movi	r3,7
   887a4:	19401916 	blt	r3,r5,8880c <___vfiprintf_internal_r+0xcf8>
   887a8:	42000204 	addi	r8,r8,8
   887ac:	29400044 	addi	r5,r5,1
   887b0:	003e5506 	br	88108 <__alt_data_end+0xfffc9908>
   887b4:	d9402017 	ldw	r5,128(sp)
   887b8:	d9002117 	ldw	r4,132(sp)
   887bc:	d9801a04 	addi	r6,sp,104
   887c0:	0087a000 	call	87a00 <__sprint_r.part.0>
   887c4:	10000b1e 	bne	r2,zero,887f4 <___vfiprintf_internal_r+0xce0>
   887c8:	d9001b17 	ldw	r4,108(sp)
   887cc:	d8801c17 	ldw	r2,112(sp)
   887d0:	d811883a 	mov	r8,sp
   887d4:	21400044 	addi	r5,r4,1
   887d8:	003fdc06 	br	8874c <__alt_data_end+0xfffc9f4c>
   887dc:	d8801c17 	ldw	r2,112(sp)
   887e0:	10000426 	beq	r2,zero,887f4 <___vfiprintf_internal_r+0xce0>
   887e4:	d9402017 	ldw	r5,128(sp)
   887e8:	d9002117 	ldw	r4,132(sp)
   887ec:	d9801a04 	addi	r6,sp,104
   887f0:	0087a000 	call	87a00 <__sprint_r.part.0>
   887f4:	d9402017 	ldw	r5,128(sp)
   887f8:	2880030b 	ldhu	r2,12(r5)
   887fc:	1080100c 	andi	r2,r2,64
   88800:	10014d1e 	bne	r2,zero,88d38 <___vfiprintf_internal_r+0x1224>
   88804:	d8802417 	ldw	r2,144(sp)
   88808:	003d9706 	br	87e68 <__alt_data_end+0xfffc9668>
   8880c:	1000d21e 	bne	r2,zero,88b58 <___vfiprintf_internal_r+0x1044>
   88810:	00c00044 	movi	r3,1
   88814:	a005883a 	mov	r2,r20
   88818:	ddc00015 	stw	r23,0(sp)
   8881c:	dd000115 	stw	r20,4(sp)
   88820:	dd001c15 	stw	r20,112(sp)
   88824:	d8c01b15 	stw	r3,108(sp)
   88828:	d811883a 	mov	r8,sp
   8882c:	42000204 	addi	r8,r8,8
   88830:	8c40010c 	andi	r17,r17,4
   88834:	88004026 	beq	r17,zero,88938 <___vfiprintf_internal_r+0xe24>
   88838:	d9002517 	ldw	r4,148(sp)
   8883c:	24e3c83a 	sub	r17,r4,r19
   88840:	04403d0e 	bge	zero,r17,88938 <___vfiprintf_internal_r+0xe24>
   88844:	04000404 	movi	r16,16
   88848:	8441a90e 	bge	r16,r17,88ef0 <___vfiprintf_internal_r+0x13dc>
   8884c:	00c002b4 	movhi	r3,10
   88850:	18e13304 	addi	r3,r3,-31540
   88854:	d9001b17 	ldw	r4,108(sp)
   88858:	d8c02315 	stw	r3,140(sp)
   8885c:	050001c4 	movi	r20,7
   88860:	dd402117 	ldw	r21,132(sp)
   88864:	ddc02017 	ldw	r23,128(sp)
   88868:	00000506 	br	88880 <___vfiprintf_internal_r+0xd6c>
   8886c:	21400084 	addi	r5,r4,2
   88870:	42000204 	addi	r8,r8,8
   88874:	1809883a 	mov	r4,r3
   88878:	8c7ffc04 	addi	r17,r17,-16
   8887c:	84400f0e 	bge	r16,r17,888bc <___vfiprintf_internal_r+0xda8>
   88880:	014002b4 	movhi	r5,10
   88884:	10800404 	addi	r2,r2,16
   88888:	20c00044 	addi	r3,r4,1
   8888c:	29613304 	addi	r5,r5,-31540
   88890:	41400015 	stw	r5,0(r8)
   88894:	44000115 	stw	r16,4(r8)
   88898:	d8801c15 	stw	r2,112(sp)
   8889c:	d8c01b15 	stw	r3,108(sp)
   888a0:	a0fff20e 	bge	r20,r3,8886c <__alt_data_end+0xfffca06c>
   888a4:	1000141e 	bne	r2,zero,888f8 <___vfiprintf_internal_r+0xde4>
   888a8:	8c7ffc04 	addi	r17,r17,-16
   888ac:	01400044 	movi	r5,1
   888b0:	0009883a 	mov	r4,zero
   888b4:	d811883a 	mov	r8,sp
   888b8:	847ff116 	blt	r16,r17,88880 <__alt_data_end+0xfffca080>
   888bc:	d8c02317 	ldw	r3,140(sp)
   888c0:	1445883a 	add	r2,r2,r17
   888c4:	44400115 	stw	r17,4(r8)
   888c8:	40c00015 	stw	r3,0(r8)
   888cc:	d8801c15 	stw	r2,112(sp)
   888d0:	d9401b15 	stw	r5,108(sp)
   888d4:	00c001c4 	movi	r3,7
   888d8:	1940170e 	bge	r3,r5,88938 <___vfiprintf_internal_r+0xe24>
   888dc:	1000101e 	bne	r2,zero,88920 <___vfiprintf_internal_r+0xe0c>
   888e0:	d8802517 	ldw	r2,148(sp)
   888e4:	14c11616 	blt	r2,r19,88d40 <___vfiprintf_internal_r+0x122c>
   888e8:	d9002417 	ldw	r4,144(sp)
   888ec:	2089883a 	add	r4,r4,r2
   888f0:	d9002415 	stw	r4,144(sp)
   888f4:	003e1806 	br	88158 <__alt_data_end+0xfffc9958>
   888f8:	d9801a04 	addi	r6,sp,104
   888fc:	b80b883a 	mov	r5,r23
   88900:	a809883a 	mov	r4,r21
   88904:	0087a000 	call	87a00 <__sprint_r.part.0>
   88908:	103fba1e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   8890c:	d9001b17 	ldw	r4,108(sp)
   88910:	d8801c17 	ldw	r2,112(sp)
   88914:	d811883a 	mov	r8,sp
   88918:	21400044 	addi	r5,r4,1
   8891c:	003fd606 	br	88878 <__alt_data_end+0xfffca078>
   88920:	d9402017 	ldw	r5,128(sp)
   88924:	d9002117 	ldw	r4,132(sp)
   88928:	d9801a04 	addi	r6,sp,104
   8892c:	0087a000 	call	87a00 <__sprint_r.part.0>
   88930:	103fb01e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   88934:	d8801c17 	ldw	r2,112(sp)
   88938:	d8c02517 	ldw	r3,148(sp)
   8893c:	1cc0010e 	bge	r3,r19,88944 <___vfiprintf_internal_r+0xe30>
   88940:	9807883a 	mov	r3,r19
   88944:	d9002417 	ldw	r4,144(sp)
   88948:	20c9883a 	add	r4,r4,r3
   8894c:	d9002415 	stw	r4,144(sp)
   88950:	103e0126 	beq	r2,zero,88158 <__alt_data_end+0xfffc9958>
   88954:	d9402017 	ldw	r5,128(sp)
   88958:	d9002117 	ldw	r4,132(sp)
   8895c:	d9801a04 	addi	r6,sp,104
   88960:	0087a000 	call	87a00 <__sprint_r.part.0>
   88964:	103dfc26 	beq	r2,zero,88158 <__alt_data_end+0xfffc9958>
   88968:	003fa206 	br	887f4 <__alt_data_end+0xfffc9ff4>
   8896c:	d9402017 	ldw	r5,128(sp)
   88970:	d9002117 	ldw	r4,132(sp)
   88974:	d9801a04 	addi	r6,sp,104
   88978:	d9c02b15 	stw	r7,172(sp)
   8897c:	0087a000 	call	87a00 <__sprint_r.part.0>
   88980:	d9c02b17 	ldw	r7,172(sp)
   88984:	103f9b1e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   88988:	d9001b17 	ldw	r4,108(sp)
   8898c:	d8801c17 	ldw	r2,112(sp)
   88990:	d811883a 	mov	r8,sp
   88994:	21800044 	addi	r6,r4,1
   88998:	003dbf06 	br	88098 <__alt_data_end+0xfffc9898>
   8899c:	1000d81e 	bne	r2,zero,88d00 <___vfiprintf_internal_r+0x11ec>
   889a0:	d9001d87 	ldb	r4,118(sp)
   889a4:	20000a26 	beq	r4,zero,889d0 <___vfiprintf_internal_r+0xebc>
   889a8:	00800044 	movi	r2,1
   889ac:	d9001d84 	addi	r4,sp,118
   889b0:	100b883a 	mov	r5,r2
   889b4:	d9000015 	stw	r4,0(sp)
   889b8:	d8800115 	stw	r2,4(sp)
   889bc:	d811883a 	mov	r8,sp
   889c0:	2809883a 	mov	r4,r5
   889c4:	42000204 	addi	r8,r8,8
   889c8:	29400044 	addi	r5,r5,1
   889cc:	003d9506 	br	88024 <__alt_data_end+0xfffc9824>
   889d0:	3800fd26 	beq	r7,zero,88dc8 <___vfiprintf_internal_r+0x12b4>
   889d4:	00800084 	movi	r2,2
   889d8:	d9001d04 	addi	r4,sp,116
   889dc:	d9000015 	stw	r4,0(sp)
   889e0:	d8800115 	stw	r2,4(sp)
   889e4:	01400044 	movi	r5,1
   889e8:	d811883a 	mov	r8,sp
   889ec:	2809883a 	mov	r4,r5
   889f0:	42000204 	addi	r8,r8,8
   889f4:	29400044 	addi	r5,r5,1
   889f8:	003f4606 	br	88714 <__alt_data_end+0xfffc9f14>
   889fc:	d8802517 	ldw	r2,148(sp)
   88a00:	14c0010e 	bge	r2,r19,88a08 <___vfiprintf_internal_r+0xef4>
   88a04:	9805883a 	mov	r2,r19
   88a08:	d9402417 	ldw	r5,144(sp)
   88a0c:	288b883a 	add	r5,r5,r2
   88a10:	d9402415 	stw	r5,144(sp)
   88a14:	003dd006 	br	88158 <__alt_data_end+0xfffc9958>
   88a18:	d8001d85 	stb	zero,118(sp)
   88a1c:	80005d16 	blt	r16,zero,88b94 <___vfiprintf_internal_r+0x1080>
   88a20:	00ffdfc4 	movi	r3,-129
   88a24:	9d04b03a 	or	r2,r19,r20
   88a28:	88e2703a 	and	r17,r17,r3
   88a2c:	103d3726 	beq	r2,zero,87f0c <__alt_data_end+0xfffc970c>
   88a30:	002b883a 	mov	r21,zero
   88a34:	d9002617 	ldw	r4,152(sp)
   88a38:	ddc01a04 	addi	r23,sp,104
   88a3c:	988003cc 	andi	r2,r19,15
   88a40:	a006973a 	slli	r3,r20,28
   88a44:	2085883a 	add	r2,r4,r2
   88a48:	9826d13a 	srli	r19,r19,4
   88a4c:	10800003 	ldbu	r2,0(r2)
   88a50:	a028d13a 	srli	r20,r20,4
   88a54:	bdffffc4 	addi	r23,r23,-1
   88a58:	1ce6b03a 	or	r19,r3,r19
   88a5c:	b8800005 	stb	r2,0(r23)
   88a60:	9d04b03a 	or	r2,r19,r20
   88a64:	103ff51e 	bne	r2,zero,88a3c <__alt_data_end+0xfffca23c>
   88a68:	d8801e17 	ldw	r2,120(sp)
   88a6c:	15e9c83a 	sub	r20,r2,r23
   88a70:	003d2b06 	br	87f20 <__alt_data_end+0xfffc9720>
   88a74:	d9402017 	ldw	r5,128(sp)
   88a78:	d9002117 	ldw	r4,132(sp)
   88a7c:	d9801a04 	addi	r6,sp,104
   88a80:	0087a000 	call	87a00 <__sprint_r.part.0>
   88a84:	103f5b1e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   88a88:	d8801c17 	ldw	r2,112(sp)
   88a8c:	d811883a 	mov	r8,sp
   88a90:	003f6706 	br	88830 <__alt_data_end+0xfffca030>
   88a94:	d9402017 	ldw	r5,128(sp)
   88a98:	d9002117 	ldw	r4,132(sp)
   88a9c:	d9801a04 	addi	r6,sp,104
   88aa0:	0087a000 	call	87a00 <__sprint_r.part.0>
   88aa4:	103f531e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   88aa8:	d811883a 	mov	r8,sp
   88aac:	003cd906 	br	87e14 <__alt_data_end+0xfffc9614>
   88ab0:	10803fcc 	andi	r2,r2,255
   88ab4:	1080201c 	xori	r2,r2,128
   88ab8:	10bfe004 	addi	r2,r2,-128
   88abc:	00c00c04 	movi	r3,48
   88ac0:	10ffe926 	beq	r2,r3,88a68 <__alt_data_end+0xfffca268>
   88ac4:	b8ffffc5 	stb	r3,-1(r23)
   88ac8:	d8c01e17 	ldw	r3,120(sp)
   88acc:	b8bfffc4 	addi	r2,r23,-1
   88ad0:	102f883a 	mov	r23,r2
   88ad4:	18a9c83a 	sub	r20,r3,r2
   88ad8:	003d1106 	br	87f20 <__alt_data_end+0xfffc9720>
   88adc:	d9402017 	ldw	r5,128(sp)
   88ae0:	d9002117 	ldw	r4,132(sp)
   88ae4:	d9801a04 	addi	r6,sp,104
   88ae8:	d8c02a15 	stw	r3,168(sp)
   88aec:	d9c02b15 	stw	r7,172(sp)
   88af0:	0087a000 	call	87a00 <__sprint_r.part.0>
   88af4:	d8c02a17 	ldw	r3,168(sp)
   88af8:	d9c02b17 	ldw	r7,172(sp)
   88afc:	103f3d1e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   88b00:	d9001b17 	ldw	r4,108(sp)
   88b04:	d8801c17 	ldw	r2,112(sp)
   88b08:	d811883a 	mov	r8,sp
   88b0c:	21400044 	addi	r5,r4,1
   88b10:	003d4406 	br	88024 <__alt_data_end+0xfffc9824>
   88b14:	d9402017 	ldw	r5,128(sp)
   88b18:	d9002117 	ldw	r4,132(sp)
   88b1c:	d9801a04 	addi	r6,sp,104
   88b20:	d8c02a15 	stw	r3,168(sp)
   88b24:	0087a000 	call	87a00 <__sprint_r.part.0>
   88b28:	d8c02a17 	ldw	r3,168(sp)
   88b2c:	103f311e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   88b30:	d9001b17 	ldw	r4,108(sp)
   88b34:	d8801c17 	ldw	r2,112(sp)
   88b38:	d811883a 	mov	r8,sp
   88b3c:	21400044 	addi	r5,r4,1
   88b40:	003ef406 	br	88714 <__alt_data_end+0xfffc9f14>
   88b44:	1000bd1e 	bne	r2,zero,88e3c <___vfiprintf_internal_r+0x1328>
   88b48:	01400044 	movi	r5,1
   88b4c:	0009883a 	mov	r4,zero
   88b50:	d811883a 	mov	r8,sp
   88b54:	003ef106 	br	8871c <__alt_data_end+0xfffc9f1c>
   88b58:	d9402017 	ldw	r5,128(sp)
   88b5c:	d9002117 	ldw	r4,132(sp)
   88b60:	d9801a04 	addi	r6,sp,104
   88b64:	0087a000 	call	87a00 <__sprint_r.part.0>
   88b68:	103f221e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   88b6c:	d9401b17 	ldw	r5,108(sp)
   88b70:	d8801c17 	ldw	r2,112(sp)
   88b74:	d811883a 	mov	r8,sp
   88b78:	29400044 	addi	r5,r5,1
   88b7c:	003d6206 	br	88108 <__alt_data_end+0xfffc9908>
   88b80:	014002b4 	movhi	r5,10
   88b84:	2960ce04 	addi	r5,r5,-31944
   88b88:	d9402615 	stw	r5,152(sp)
   88b8c:	d8c02215 	stw	r3,136(sp)
   88b90:	1023883a 	mov	r17,r2
   88b94:	9d04b03a 	or	r2,r19,r20
   88b98:	103fa51e 	bne	r2,zero,88a30 <__alt_data_end+0xfffca230>
   88b9c:	002b883a 	mov	r21,zero
   88ba0:	00800084 	movi	r2,2
   88ba4:	003e4a06 	br	884d0 <__alt_data_end+0xfffc9cd0>
   88ba8:	014002b4 	movhi	r5,10
   88bac:	2960ce04 	addi	r5,r5,-31944
   88bb0:	002b883a 	mov	r21,zero
   88bb4:	d9402615 	stw	r5,152(sp)
   88bb8:	003f9e06 	br	88a34 <__alt_data_end+0xfffca234>
   88bbc:	d9402217 	ldw	r5,136(sp)
   88bc0:	d8001d85 	stb	zero,118(sp)
   88bc4:	0029883a 	mov	r20,zero
   88bc8:	28800104 	addi	r2,r5,4
   88bcc:	2cc00017 	ldw	r19,0(r5)
   88bd0:	803e3a16 	blt	r16,zero,884bc <__alt_data_end+0xfffc9cbc>
   88bd4:	00ffdfc4 	movi	r3,-129
   88bd8:	d8802215 	stw	r2,136(sp)
   88bdc:	88e2703a 	and	r17,r17,r3
   88be0:	002b883a 	mov	r21,zero
   88be4:	983e9b26 	beq	r19,zero,88654 <__alt_data_end+0xfffc9e54>
   88be8:	00800244 	movi	r2,9
   88bec:	14fdc936 	bltu	r2,r19,88314 <__alt_data_end+0xfffc9b14>
   88bf0:	003e9a06 	br	8865c <__alt_data_end+0xfffc9e5c>
   88bf4:	00800c04 	movi	r2,48
   88bf8:	d8c01d45 	stb	r3,117(sp)
   88bfc:	d8801d05 	stb	r2,116(sp)
   88c00:	d8001d85 	stb	zero,118(sp)
   88c04:	88c00094 	ori	r3,r17,2
   88c08:	80009c16 	blt	r16,zero,88e7c <___vfiprintf_internal_r+0x1368>
   88c0c:	00bfdfc4 	movi	r2,-129
   88c10:	88a2703a 	and	r17,r17,r2
   88c14:	8c400094 	ori	r17,r17,2
   88c18:	002b883a 	mov	r21,zero
   88c1c:	003f8506 	br	88a34 <__alt_data_end+0xfffca234>
   88c20:	b029883a 	mov	r20,r22
   88c24:	003c0b06 	br	87c54 <__alt_data_end+0xfffc9454>
   88c28:	04e7c83a 	sub	r19,zero,r19
   88c2c:	05400b44 	movi	r21,45
   88c30:	9804c03a 	cmpne	r2,r19,zero
   88c34:	0529c83a 	sub	r20,zero,r20
   88c38:	dd401d85 	stb	r21,118(sp)
   88c3c:	a0a9c83a 	sub	r20,r20,r2
   88c40:	80009716 	blt	r16,zero,88ea0 <___vfiprintf_internal_r+0x138c>
   88c44:	00bfdfc4 	movi	r2,-129
   88c48:	88a2703a 	and	r17,r17,r2
   88c4c:	003db006 	br	88310 <__alt_data_end+0xfffc9b10>
   88c50:	b0c00007 	ldb	r3,0(r22)
   88c54:	003c0c06 	br	87c88 <__alt_data_end+0xfffc9488>
   88c58:	8880100c 	andi	r2,r17,64
   88c5c:	d8001d85 	stb	zero,118(sp)
   88c60:	1000461e 	bne	r2,zero,88d7c <___vfiprintf_internal_r+0x1268>
   88c64:	d9002217 	ldw	r4,136(sp)
   88c68:	0029883a 	mov	r20,zero
   88c6c:	20800104 	addi	r2,r4,4
   88c70:	24c00017 	ldw	r19,0(r4)
   88c74:	803df80e 	bge	r16,zero,88458 <__alt_data_end+0xfffc9c58>
   88c78:	9d06b03a 	or	r3,r19,r20
   88c7c:	d8802215 	stw	r2,136(sp)
   88c80:	183d5e1e 	bne	r3,zero,881fc <__alt_data_end+0xfffc99fc>
   88c84:	002b883a 	mov	r21,zero
   88c88:	0005883a 	mov	r2,zero
   88c8c:	003e1006 	br	884d0 <__alt_data_end+0xfffc9cd0>
   88c90:	8880040c 	andi	r2,r17,16
   88c94:	1000321e 	bne	r2,zero,88d60 <___vfiprintf_internal_r+0x124c>
   88c98:	8c40100c 	andi	r17,r17,64
   88c9c:	88008d26 	beq	r17,zero,88ed4 <___vfiprintf_internal_r+0x13c0>
   88ca0:	d9402217 	ldw	r5,136(sp)
   88ca4:	d8c02417 	ldw	r3,144(sp)
   88ca8:	28800017 	ldw	r2,0(r5)
   88cac:	29400104 	addi	r5,r5,4
   88cb0:	d9402215 	stw	r5,136(sp)
   88cb4:	10c0000d 	sth	r3,0(r2)
   88cb8:	003bca06 	br	87be4 <__alt_data_end+0xfffc93e4>
   88cbc:	8880100c 	andi	r2,r17,64
   88cc0:	10003a26 	beq	r2,zero,88dac <___vfiprintf_internal_r+0x1298>
   88cc4:	d8802217 	ldw	r2,136(sp)
   88cc8:	14c0000f 	ldh	r19,0(r2)
   88ccc:	10800104 	addi	r2,r2,4
   88cd0:	d8802215 	stw	r2,136(sp)
   88cd4:	9829d7fa 	srai	r20,r19,31
   88cd8:	a005883a 	mov	r2,r20
   88cdc:	003d8506 	br	882f4 <__alt_data_end+0xfffc9af4>
   88ce0:	8880100c 	andi	r2,r17,64
   88ce4:	10002b26 	beq	r2,zero,88d94 <___vfiprintf_internal_r+0x1280>
   88ce8:	d8802217 	ldw	r2,136(sp)
   88cec:	0029883a 	mov	r20,zero
   88cf0:	14c0000b 	ldhu	r19,0(r2)
   88cf4:	10800104 	addi	r2,r2,4
   88cf8:	d8802215 	stw	r2,136(sp)
   88cfc:	003d5d06 	br	88274 <__alt_data_end+0xfffc9a74>
   88d00:	d9402017 	ldw	r5,128(sp)
   88d04:	d9002117 	ldw	r4,132(sp)
   88d08:	d9801a04 	addi	r6,sp,104
   88d0c:	d8c02a15 	stw	r3,168(sp)
   88d10:	d9c02b15 	stw	r7,172(sp)
   88d14:	0087a000 	call	87a00 <__sprint_r.part.0>
   88d18:	d8c02a17 	ldw	r3,168(sp)
   88d1c:	d9c02b17 	ldw	r7,172(sp)
   88d20:	103eb41e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   88d24:	d9001b17 	ldw	r4,108(sp)
   88d28:	d8801c17 	ldw	r2,112(sp)
   88d2c:	d811883a 	mov	r8,sp
   88d30:	21400044 	addi	r5,r4,1
   88d34:	003e6706 	br	886d4 <__alt_data_end+0xfffc9ed4>
   88d38:	00bfffc4 	movi	r2,-1
   88d3c:	003c4a06 	br	87e68 <__alt_data_end+0xfffc9668>
   88d40:	9805883a 	mov	r2,r19
   88d44:	003ee806 	br	888e8 <__alt_data_end+0xfffca0e8>
   88d48:	d8c02217 	ldw	r3,136(sp)
   88d4c:	0029883a 	mov	r20,zero
   88d50:	18800104 	addi	r2,r3,4
   88d54:	1cc0000b 	ldhu	r19,0(r3)
   88d58:	803f9e0e 	bge	r16,zero,88bd4 <__alt_data_end+0xfffca3d4>
   88d5c:	003dd706 	br	884bc <__alt_data_end+0xfffc9cbc>
   88d60:	d8c02217 	ldw	r3,136(sp)
   88d64:	d9002417 	ldw	r4,144(sp)
   88d68:	18800017 	ldw	r2,0(r3)
   88d6c:	18c00104 	addi	r3,r3,4
   88d70:	d8c02215 	stw	r3,136(sp)
   88d74:	11000015 	stw	r4,0(r2)
   88d78:	003b9a06 	br	87be4 <__alt_data_end+0xfffc93e4>
   88d7c:	d8c02217 	ldw	r3,136(sp)
   88d80:	0029883a 	mov	r20,zero
   88d84:	18800104 	addi	r2,r3,4
   88d88:	1cc0000b 	ldhu	r19,0(r3)
   88d8c:	803db20e 	bge	r16,zero,88458 <__alt_data_end+0xfffc9c58>
   88d90:	003fb906 	br	88c78 <__alt_data_end+0xfffca478>
   88d94:	d9002217 	ldw	r4,136(sp)
   88d98:	0029883a 	mov	r20,zero
   88d9c:	24c00017 	ldw	r19,0(r4)
   88da0:	21000104 	addi	r4,r4,4
   88da4:	d9002215 	stw	r4,136(sp)
   88da8:	003d3206 	br	88274 <__alt_data_end+0xfffc9a74>
   88dac:	d8c02217 	ldw	r3,136(sp)
   88db0:	1cc00017 	ldw	r19,0(r3)
   88db4:	18c00104 	addi	r3,r3,4
   88db8:	d8c02215 	stw	r3,136(sp)
   88dbc:	9829d7fa 	srai	r20,r19,31
   88dc0:	a005883a 	mov	r2,r20
   88dc4:	003d4b06 	br	882f4 <__alt_data_end+0xfffc9af4>
   88dc8:	0009883a 	mov	r4,zero
   88dcc:	01400044 	movi	r5,1
   88dd0:	d811883a 	mov	r8,sp
   88dd4:	003e4f06 	br	88714 <__alt_data_end+0xfffc9f14>
   88dd8:	d8c02215 	stw	r3,136(sp)
   88ddc:	002b883a 	mov	r21,zero
   88de0:	003db806 	br	884c4 <__alt_data_end+0xfffc9cc4>
   88de4:	d811883a 	mov	r8,sp
   88de8:	003e9606 	br	88844 <__alt_data_end+0xfffca044>
   88dec:	010002b4 	movhi	r4,10
   88df0:	21212f04 	addi	r4,r4,-31556
   88df4:	d9002315 	stw	r4,140(sp)
   88df8:	003e6306 	br	88788 <__alt_data_end+0xfffc9f88>
   88dfc:	b0c00043 	ldbu	r3,1(r22)
   88e00:	8c400814 	ori	r17,r17,32
   88e04:	b5800044 	addi	r22,r22,1
   88e08:	18c03fcc 	andi	r3,r3,255
   88e0c:	18c0201c 	xori	r3,r3,128
   88e10:	18ffe004 	addi	r3,r3,-128
   88e14:	003b9c06 	br	87c88 <__alt_data_end+0xfffc9488>
   88e18:	b809883a 	mov	r4,r23
   88e1c:	da002a15 	stw	r8,168(sp)
   88e20:	00879680 	call	87968 <strlen>
   88e24:	1029883a 	mov	r20,r2
   88e28:	dd401d83 	ldbu	r21,118(sp)
   88e2c:	df002215 	stw	fp,136(sp)
   88e30:	0021883a 	mov	r16,zero
   88e34:	da002a17 	ldw	r8,168(sp)
   88e38:	003c3906 	br	87f20 <__alt_data_end+0xfffc9720>
   88e3c:	d9402017 	ldw	r5,128(sp)
   88e40:	d9002117 	ldw	r4,132(sp)
   88e44:	d9801a04 	addi	r6,sp,104
   88e48:	0087a000 	call	87a00 <__sprint_r.part.0>
   88e4c:	103e691e 	bne	r2,zero,887f4 <__alt_data_end+0xfffc9ff4>
   88e50:	d9001b17 	ldw	r4,108(sp)
   88e54:	d8801c17 	ldw	r2,112(sp)
   88e58:	d811883a 	mov	r8,sp
   88e5c:	21400044 	addi	r5,r4,1
   88e60:	003e2e06 	br	8871c <__alt_data_end+0xfffc9f1c>
   88e64:	010002b4 	movhi	r4,10
   88e68:	21213304 	addi	r4,r4,-31540
   88e6c:	d9002315 	stw	r4,140(sp)
   88e70:	d9001b17 	ldw	r4,108(sp)
   88e74:	21000044 	addi	r4,r4,1
   88e78:	003c5e06 	br	87ff4 <__alt_data_end+0xfffc97f4>
   88e7c:	002b883a 	mov	r21,zero
   88e80:	00800084 	movi	r2,2
   88e84:	10803fcc 	andi	r2,r2,255
   88e88:	01000044 	movi	r4,1
   88e8c:	11002b26 	beq	r2,r4,88f3c <___vfiprintf_internal_r+0x1428>
   88e90:	01000084 	movi	r4,2
   88e94:	11002b1e 	bne	r2,r4,88f44 <___vfiprintf_internal_r+0x1430>
   88e98:	1823883a 	mov	r17,r3
   88e9c:	003ee506 	br	88a34 <__alt_data_end+0xfffca234>
   88ea0:	8807883a 	mov	r3,r17
   88ea4:	00800044 	movi	r2,1
   88ea8:	003ff606 	br	88e84 <__alt_data_end+0xfffca684>
   88eac:	00800184 	movi	r2,6
   88eb0:	1400012e 	bgeu	r2,r16,88eb8 <___vfiprintf_internal_r+0x13a4>
   88eb4:	1021883a 	mov	r16,r2
   88eb8:	8029883a 	mov	r20,r16
   88ebc:	8027883a 	mov	r19,r16
   88ec0:	80002216 	blt	r16,zero,88f4c <___vfiprintf_internal_r+0x1438>
   88ec4:	05c002b4 	movhi	r23,10
   88ec8:	df002215 	stw	fp,136(sp)
   88ecc:	bde0d304 	addi	r23,r23,-31924
   88ed0:	003cfb06 	br	882c0 <__alt_data_end+0xfffc9ac0>
   88ed4:	d9002217 	ldw	r4,136(sp)
   88ed8:	d9402417 	ldw	r5,144(sp)
   88edc:	20800017 	ldw	r2,0(r4)
   88ee0:	21000104 	addi	r4,r4,4
   88ee4:	d9002215 	stw	r4,136(sp)
   88ee8:	11400015 	stw	r5,0(r2)
   88eec:	003b3d06 	br	87be4 <__alt_data_end+0xfffc93e4>
   88ef0:	014002b4 	movhi	r5,10
   88ef4:	29613304 	addi	r5,r5,-31540
   88ef8:	d9402315 	stw	r5,140(sp)
   88efc:	d9401b17 	ldw	r5,108(sp)
   88f00:	29400044 	addi	r5,r5,1
   88f04:	003e6d06 	br	888bc <__alt_data_end+0xfffca0bc>
   88f08:	8029883a 	mov	r20,r16
   88f0c:	dd401d83 	ldbu	r21,118(sp)
   88f10:	df002215 	stw	fp,136(sp)
   88f14:	0021883a 	mov	r16,zero
   88f18:	003c0106 	br	87f20 <__alt_data_end+0xfffc9720>
   88f1c:	00c002b4 	movhi	r3,10
   88f20:	18e12f04 	addi	r3,r3,-31556
   88f24:	d8c02315 	stw	r3,140(sp)
   88f28:	280d883a 	mov	r6,r5
   88f2c:	003c6906 	br	880d4 <__alt_data_end+0xfffc98d4>
   88f30:	802d883a 	mov	r22,r16
   88f34:	0021883a 	mov	r16,zero
   88f38:	003b5406 	br	87c8c <__alt_data_end+0xfffc948c>
   88f3c:	1823883a 	mov	r17,r3
   88f40:	003cf306 	br	88310 <__alt_data_end+0xfffc9b10>
   88f44:	1823883a 	mov	r17,r3
   88f48:	003cad06 	br	88200 <__alt_data_end+0xfffc9a00>
   88f4c:	0027883a 	mov	r19,zero
   88f50:	003fdc06 	br	88ec4 <__alt_data_end+0xfffca6c4>
   88f54:	d9402217 	ldw	r5,136(sp)
   88f58:	8005883a 	mov	r2,r16
   88f5c:	b0c00043 	ldbu	r3,1(r22)
   88f60:	2c000017 	ldw	r16,0(r5)
   88f64:	29000104 	addi	r4,r5,4
   88f68:	d9002215 	stw	r4,136(sp)
   88f6c:	102d883a 	mov	r22,r2
   88f70:	803fa50e 	bge	r16,zero,88e08 <__alt_data_end+0xfffca608>
   88f74:	18c03fcc 	andi	r3,r3,255
   88f78:	18c0201c 	xori	r3,r3,128
   88f7c:	043fffc4 	movi	r16,-1
   88f80:	18ffe004 	addi	r3,r3,-128
   88f84:	003b4006 	br	87c88 <__alt_data_end+0xfffc9488>
   88f88:	d9402303 	ldbu	r5,140(sp)
   88f8c:	d9401d85 	stb	r5,118(sp)
   88f90:	003cae06 	br	8824c <__alt_data_end+0xfffc9a4c>
   88f94:	d8c02303 	ldbu	r3,140(sp)
   88f98:	d8c01d85 	stb	r3,118(sp)
   88f9c:	003d1406 	br	883f0 <__alt_data_end+0xfffc9bf0>
   88fa0:	d8c02303 	ldbu	r3,140(sp)
   88fa4:	d8c01d85 	stb	r3,118(sp)
   88fa8:	003cca06 	br	882d4 <__alt_data_end+0xfffc9ad4>
   88fac:	8880004c 	andi	r2,r17,1
   88fb0:	002b883a 	mov	r21,zero
   88fb4:	10000526 	beq	r2,zero,88fcc <___vfiprintf_internal_r+0x14b8>
   88fb8:	00800c04 	movi	r2,48
   88fbc:	d88019c5 	stb	r2,103(sp)
   88fc0:	dd002817 	ldw	r20,160(sp)
   88fc4:	ddc019c4 	addi	r23,sp,103
   88fc8:	003bd506 	br	87f20 <__alt_data_end+0xfffc9720>
   88fcc:	0029883a 	mov	r20,zero
   88fd0:	ddc01a04 	addi	r23,sp,104
   88fd4:	003bd206 	br	87f20 <__alt_data_end+0xfffc9720>
   88fd8:	d9002303 	ldbu	r4,140(sp)
   88fdc:	d9001d85 	stb	r4,118(sp)
   88fe0:	003da606 	br	8867c <__alt_data_end+0xfffc9e7c>
   88fe4:	d8c02303 	ldbu	r3,140(sp)
   88fe8:	d8c01d85 	stb	r3,118(sp)
   88fec:	003c7606 	br	881c8 <__alt_data_end+0xfffc99c8>
   88ff0:	d8c02303 	ldbu	r3,140(sp)
   88ff4:	d8c01d85 	stb	r3,118(sp)
   88ff8:	003c6506 	br	88190 <__alt_data_end+0xfffc9990>
   88ffc:	d9002303 	ldbu	r4,140(sp)
   89000:	d9001d85 	stb	r4,118(sp)
   89004:	003d3d06 	br	884fc <__alt_data_end+0xfffc9cfc>
   89008:	d8c02303 	ldbu	r3,140(sp)
   8900c:	d8c01d85 	stb	r3,118(sp)
   89010:	003d1d06 	br	88488 <__alt_data_end+0xfffc9c88>
   89014:	d8c02303 	ldbu	r3,140(sp)
   89018:	d8c01d85 	stb	r3,118(sp)
   8901c:	003d0306 	br	8842c <__alt_data_end+0xfffc9c2c>

00089020 <__vfiprintf_internal>:
   89020:	008002b4 	movhi	r2,10
   89024:	10a87f04 	addi	r2,r2,-24068
   89028:	300f883a 	mov	r7,r6
   8902c:	280d883a 	mov	r6,r5
   89030:	200b883a 	mov	r5,r4
   89034:	11000017 	ldw	r4,0(r2)
   89038:	0087b141 	jmpi	87b14 <___vfiprintf_internal_r>

0008903c <__sbprintf>:
   8903c:	2880030b 	ldhu	r2,12(r5)
   89040:	2ac01917 	ldw	r11,100(r5)
   89044:	2a80038b 	ldhu	r10,14(r5)
   89048:	2a400717 	ldw	r9,28(r5)
   8904c:	2a000917 	ldw	r8,36(r5)
   89050:	defee204 	addi	sp,sp,-1144
   89054:	00c10004 	movi	r3,1024
   89058:	dc011a15 	stw	r16,1128(sp)
   8905c:	10bfff4c 	andi	r2,r2,65533
   89060:	2821883a 	mov	r16,r5
   89064:	d8cb883a 	add	r5,sp,r3
   89068:	dc811c15 	stw	r18,1136(sp)
   8906c:	dc411b15 	stw	r17,1132(sp)
   89070:	dfc11d15 	stw	ra,1140(sp)
   89074:	2025883a 	mov	r18,r4
   89078:	d881030d 	sth	r2,1036(sp)
   8907c:	dac11915 	stw	r11,1124(sp)
   89080:	da81038d 	sth	r10,1038(sp)
   89084:	da410715 	stw	r9,1052(sp)
   89088:	da010915 	stw	r8,1060(sp)
   8908c:	dec10015 	stw	sp,1024(sp)
   89090:	dec10415 	stw	sp,1040(sp)
   89094:	d8c10215 	stw	r3,1032(sp)
   89098:	d8c10515 	stw	r3,1044(sp)
   8909c:	d8010615 	stw	zero,1048(sp)
   890a0:	0087b140 	call	87b14 <___vfiprintf_internal_r>
   890a4:	1023883a 	mov	r17,r2
   890a8:	10000416 	blt	r2,zero,890bc <__sbprintf+0x80>
   890ac:	d9410004 	addi	r5,sp,1024
   890b0:	9009883a 	mov	r4,r18
   890b4:	008571c0 	call	8571c <_fflush_r>
   890b8:	10000d1e 	bne	r2,zero,890f0 <__sbprintf+0xb4>
   890bc:	d881030b 	ldhu	r2,1036(sp)
   890c0:	1080100c 	andi	r2,r2,64
   890c4:	10000326 	beq	r2,zero,890d4 <__sbprintf+0x98>
   890c8:	8080030b 	ldhu	r2,12(r16)
   890cc:	10801014 	ori	r2,r2,64
   890d0:	8080030d 	sth	r2,12(r16)
   890d4:	8805883a 	mov	r2,r17
   890d8:	dfc11d17 	ldw	ra,1140(sp)
   890dc:	dc811c17 	ldw	r18,1136(sp)
   890e0:	dc411b17 	ldw	r17,1132(sp)
   890e4:	dc011a17 	ldw	r16,1128(sp)
   890e8:	dec11e04 	addi	sp,sp,1144
   890ec:	f800283a 	ret
   890f0:	047fffc4 	movi	r17,-1
   890f4:	003ff106 	br	890bc <__alt_data_end+0xfffca8bc>

000890f8 <_write_r>:
   890f8:	defffd04 	addi	sp,sp,-12
   890fc:	2805883a 	mov	r2,r5
   89100:	dc000015 	stw	r16,0(sp)
   89104:	040002b4 	movhi	r16,10
   89108:	dc400115 	stw	r17,4(sp)
   8910c:	300b883a 	mov	r5,r6
   89110:	842f9804 	addi	r16,r16,-16800
   89114:	2023883a 	mov	r17,r4
   89118:	380d883a 	mov	r6,r7
   8911c:	1009883a 	mov	r4,r2
   89120:	dfc00215 	stw	ra,8(sp)
   89124:	80000015 	stw	zero,0(r16)
   89128:	008e5840 	call	8e584 <write>
   8912c:	00ffffc4 	movi	r3,-1
   89130:	10c00526 	beq	r2,r3,89148 <_write_r+0x50>
   89134:	dfc00217 	ldw	ra,8(sp)
   89138:	dc400117 	ldw	r17,4(sp)
   8913c:	dc000017 	ldw	r16,0(sp)
   89140:	dec00304 	addi	sp,sp,12
   89144:	f800283a 	ret
   89148:	80c00017 	ldw	r3,0(r16)
   8914c:	183ff926 	beq	r3,zero,89134 <__alt_data_end+0xfffca934>
   89150:	88c00015 	stw	r3,0(r17)
   89154:	003ff706 	br	89134 <__alt_data_end+0xfffca934>

00089158 <_close_r>:
   89158:	defffd04 	addi	sp,sp,-12
   8915c:	dc000015 	stw	r16,0(sp)
   89160:	040002b4 	movhi	r16,10
   89164:	dc400115 	stw	r17,4(sp)
   89168:	842f9804 	addi	r16,r16,-16800
   8916c:	2023883a 	mov	r17,r4
   89170:	2809883a 	mov	r4,r5
   89174:	dfc00215 	stw	ra,8(sp)
   89178:	80000015 	stw	zero,0(r16)
   8917c:	008da940 	call	8da94 <close>
   89180:	00ffffc4 	movi	r3,-1
   89184:	10c00526 	beq	r2,r3,8919c <_close_r+0x44>
   89188:	dfc00217 	ldw	ra,8(sp)
   8918c:	dc400117 	ldw	r17,4(sp)
   89190:	dc000017 	ldw	r16,0(sp)
   89194:	dec00304 	addi	sp,sp,12
   89198:	f800283a 	ret
   8919c:	80c00017 	ldw	r3,0(r16)
   891a0:	183ff926 	beq	r3,zero,89188 <__alt_data_end+0xfffca988>
   891a4:	88c00015 	stw	r3,0(r17)
   891a8:	003ff706 	br	89188 <__alt_data_end+0xfffca988>

000891ac <_calloc_r>:
   891ac:	defffe04 	addi	sp,sp,-8
   891b0:	2805883a 	mov	r2,r5
   891b4:	dc000015 	stw	r16,0(sp)
   891b8:	300b883a 	mov	r5,r6
   891bc:	2021883a 	mov	r16,r4
   891c0:	1009883a 	mov	r4,r2
   891c4:	dfc00115 	stw	ra,4(sp)
   891c8:	008b18c0 	call	8b18c <__mulsi3>
   891cc:	100b883a 	mov	r5,r2
   891d0:	8009883a 	mov	r4,r16
   891d4:	0080ce80 	call	80ce8 <_malloc_r>
   891d8:	10002926 	beq	r2,zero,89280 <_calloc_r+0xd4>
   891dc:	11bfff17 	ldw	r6,-4(r2)
   891e0:	1021883a 	mov	r16,r2
   891e4:	00bfff04 	movi	r2,-4
   891e8:	308c703a 	and	r6,r6,r2
   891ec:	00c00904 	movi	r3,36
   891f0:	308d883a 	add	r6,r6,r2
   891f4:	19801636 	bltu	r3,r6,89250 <_calloc_r+0xa4>
   891f8:	008004c4 	movi	r2,19
   891fc:	11800b2e 	bgeu	r2,r6,8922c <_calloc_r+0x80>
   89200:	80000015 	stw	zero,0(r16)
   89204:	80000115 	stw	zero,4(r16)
   89208:	008006c4 	movi	r2,27
   8920c:	11801a2e 	bgeu	r2,r6,89278 <_calloc_r+0xcc>
   89210:	80000215 	stw	zero,8(r16)
   89214:	80000315 	stw	zero,12(r16)
   89218:	30c0151e 	bne	r6,r3,89270 <_calloc_r+0xc4>
   8921c:	80000415 	stw	zero,16(r16)
   89220:	80800604 	addi	r2,r16,24
   89224:	80000515 	stw	zero,20(r16)
   89228:	00000106 	br	89230 <_calloc_r+0x84>
   8922c:	8005883a 	mov	r2,r16
   89230:	10000015 	stw	zero,0(r2)
   89234:	10000115 	stw	zero,4(r2)
   89238:	10000215 	stw	zero,8(r2)
   8923c:	8005883a 	mov	r2,r16
   89240:	dfc00117 	ldw	ra,4(sp)
   89244:	dc000017 	ldw	r16,0(sp)
   89248:	dec00204 	addi	sp,sp,8
   8924c:	f800283a 	ret
   89250:	000b883a 	mov	r5,zero
   89254:	8009883a 	mov	r4,r16
   89258:	00865d80 	call	865d8 <memset>
   8925c:	8005883a 	mov	r2,r16
   89260:	dfc00117 	ldw	ra,4(sp)
   89264:	dc000017 	ldw	r16,0(sp)
   89268:	dec00204 	addi	sp,sp,8
   8926c:	f800283a 	ret
   89270:	80800404 	addi	r2,r16,16
   89274:	003fee06 	br	89230 <__alt_data_end+0xfffcaa30>
   89278:	80800204 	addi	r2,r16,8
   8927c:	003fec06 	br	89230 <__alt_data_end+0xfffcaa30>
   89280:	0005883a 	mov	r2,zero
   89284:	003fee06 	br	89240 <__alt_data_end+0xfffcaa40>

00089288 <_fclose_r>:
   89288:	28003926 	beq	r5,zero,89370 <_fclose_r+0xe8>
   8928c:	defffc04 	addi	sp,sp,-16
   89290:	dc400115 	stw	r17,4(sp)
   89294:	dc000015 	stw	r16,0(sp)
   89298:	dfc00315 	stw	ra,12(sp)
   8929c:	dc800215 	stw	r18,8(sp)
   892a0:	2023883a 	mov	r17,r4
   892a4:	2821883a 	mov	r16,r5
   892a8:	20000226 	beq	r4,zero,892b4 <_fclose_r+0x2c>
   892ac:	20800e17 	ldw	r2,56(r4)
   892b0:	10002726 	beq	r2,zero,89350 <_fclose_r+0xc8>
   892b4:	8080030f 	ldh	r2,12(r16)
   892b8:	1000071e 	bne	r2,zero,892d8 <_fclose_r+0x50>
   892bc:	0005883a 	mov	r2,zero
   892c0:	dfc00317 	ldw	ra,12(sp)
   892c4:	dc800217 	ldw	r18,8(sp)
   892c8:	dc400117 	ldw	r17,4(sp)
   892cc:	dc000017 	ldw	r16,0(sp)
   892d0:	dec00404 	addi	sp,sp,16
   892d4:	f800283a 	ret
   892d8:	800b883a 	mov	r5,r16
   892dc:	8809883a 	mov	r4,r17
   892e0:	00855000 	call	85500 <__sflush_r>
   892e4:	1025883a 	mov	r18,r2
   892e8:	80800b17 	ldw	r2,44(r16)
   892ec:	10000426 	beq	r2,zero,89300 <_fclose_r+0x78>
   892f0:	81400717 	ldw	r5,28(r16)
   892f4:	8809883a 	mov	r4,r17
   892f8:	103ee83a 	callr	r2
   892fc:	10001616 	blt	r2,zero,89358 <_fclose_r+0xd0>
   89300:	8080030b 	ldhu	r2,12(r16)
   89304:	1080200c 	andi	r2,r2,128
   89308:	1000151e 	bne	r2,zero,89360 <_fclose_r+0xd8>
   8930c:	81400c17 	ldw	r5,48(r16)
   89310:	28000526 	beq	r5,zero,89328 <_fclose_r+0xa0>
   89314:	80801004 	addi	r2,r16,64
   89318:	28800226 	beq	r5,r2,89324 <_fclose_r+0x9c>
   8931c:	8809883a 	mov	r4,r17
   89320:	0085c7c0 	call	85c7c <_free_r>
   89324:	80000c15 	stw	zero,48(r16)
   89328:	81401117 	ldw	r5,68(r16)
   8932c:	28000326 	beq	r5,zero,8933c <_fclose_r+0xb4>
   89330:	8809883a 	mov	r4,r17
   89334:	0085c7c0 	call	85c7c <_free_r>
   89338:	80001115 	stw	zero,68(r16)
   8933c:	0085b180 	call	85b18 <__sfp_lock_acquire>
   89340:	8000030d 	sth	zero,12(r16)
   89344:	0085b1c0 	call	85b1c <__sfp_lock_release>
   89348:	9005883a 	mov	r2,r18
   8934c:	003fdc06 	br	892c0 <__alt_data_end+0xfffcaac0>
   89350:	0085b080 	call	85b08 <__sinit>
   89354:	003fd706 	br	892b4 <__alt_data_end+0xfffcaab4>
   89358:	04bfffc4 	movi	r18,-1
   8935c:	003fe806 	br	89300 <__alt_data_end+0xfffcab00>
   89360:	81400417 	ldw	r5,16(r16)
   89364:	8809883a 	mov	r4,r17
   89368:	0085c7c0 	call	85c7c <_free_r>
   8936c:	003fe706 	br	8930c <__alt_data_end+0xfffcab0c>
   89370:	0005883a 	mov	r2,zero
   89374:	f800283a 	ret

00089378 <fclose>:
   89378:	008002b4 	movhi	r2,10
   8937c:	10a87f04 	addi	r2,r2,-24068
   89380:	200b883a 	mov	r5,r4
   89384:	11000017 	ldw	r4,0(r2)
   89388:	00892881 	jmpi	89288 <_fclose_r>

0008938c <__fputwc>:
   8938c:	defff804 	addi	sp,sp,-32
   89390:	dcc00415 	stw	r19,16(sp)
   89394:	dc800315 	stw	r18,12(sp)
   89398:	dc000115 	stw	r16,4(sp)
   8939c:	dfc00715 	stw	ra,28(sp)
   893a0:	dd400615 	stw	r21,24(sp)
   893a4:	dd000515 	stw	r20,20(sp)
   893a8:	dc400215 	stw	r17,8(sp)
   893ac:	2027883a 	mov	r19,r4
   893b0:	2825883a 	mov	r18,r5
   893b4:	3021883a 	mov	r16,r6
   893b8:	008619c0 	call	8619c <__locale_mb_cur_max>
   893bc:	00c00044 	movi	r3,1
   893c0:	10c03e26 	beq	r2,r3,894bc <__fputwc+0x130>
   893c4:	81c01704 	addi	r7,r16,92
   893c8:	900d883a 	mov	r6,r18
   893cc:	d80b883a 	mov	r5,sp
   893d0:	9809883a 	mov	r4,r19
   893d4:	008a3e40 	call	8a3e4 <_wcrtomb_r>
   893d8:	1029883a 	mov	r20,r2
   893dc:	00bfffc4 	movi	r2,-1
   893e0:	a0802026 	beq	r20,r2,89464 <__fputwc+0xd8>
   893e4:	d9400003 	ldbu	r5,0(sp)
   893e8:	a0001c26 	beq	r20,zero,8945c <__fputwc+0xd0>
   893ec:	0023883a 	mov	r17,zero
   893f0:	05400284 	movi	r21,10
   893f4:	00000906 	br	8941c <__fputwc+0x90>
   893f8:	80800017 	ldw	r2,0(r16)
   893fc:	11400005 	stb	r5,0(r2)
   89400:	80c00017 	ldw	r3,0(r16)
   89404:	18c00044 	addi	r3,r3,1
   89408:	80c00015 	stw	r3,0(r16)
   8940c:	8c400044 	addi	r17,r17,1
   89410:	dc45883a 	add	r2,sp,r17
   89414:	8d00112e 	bgeu	r17,r20,8945c <__fputwc+0xd0>
   89418:	11400003 	ldbu	r5,0(r2)
   8941c:	80c00217 	ldw	r3,8(r16)
   89420:	18ffffc4 	addi	r3,r3,-1
   89424:	80c00215 	stw	r3,8(r16)
   89428:	183ff30e 	bge	r3,zero,893f8 <__alt_data_end+0xfffcabf8>
   8942c:	80800617 	ldw	r2,24(r16)
   89430:	18801916 	blt	r3,r2,89498 <__fputwc+0x10c>
   89434:	80800017 	ldw	r2,0(r16)
   89438:	11400005 	stb	r5,0(r2)
   8943c:	80800017 	ldw	r2,0(r16)
   89440:	10c00003 	ldbu	r3,0(r2)
   89444:	10800044 	addi	r2,r2,1
   89448:	1d402326 	beq	r3,r21,894d8 <__fputwc+0x14c>
   8944c:	80800015 	stw	r2,0(r16)
   89450:	8c400044 	addi	r17,r17,1
   89454:	dc45883a 	add	r2,sp,r17
   89458:	8d3fef36 	bltu	r17,r20,89418 <__alt_data_end+0xfffcac18>
   8945c:	9005883a 	mov	r2,r18
   89460:	00000406 	br	89474 <__fputwc+0xe8>
   89464:	80c0030b 	ldhu	r3,12(r16)
   89468:	a005883a 	mov	r2,r20
   8946c:	18c01014 	ori	r3,r3,64
   89470:	80c0030d 	sth	r3,12(r16)
   89474:	dfc00717 	ldw	ra,28(sp)
   89478:	dd400617 	ldw	r21,24(sp)
   8947c:	dd000517 	ldw	r20,20(sp)
   89480:	dcc00417 	ldw	r19,16(sp)
   89484:	dc800317 	ldw	r18,12(sp)
   89488:	dc400217 	ldw	r17,8(sp)
   8948c:	dc000117 	ldw	r16,4(sp)
   89490:	dec00804 	addi	sp,sp,32
   89494:	f800283a 	ret
   89498:	800d883a 	mov	r6,r16
   8949c:	29403fcc 	andi	r5,r5,255
   894a0:	9809883a 	mov	r4,r19
   894a4:	008a28c0 	call	8a28c <__swbuf_r>
   894a8:	10bfffe0 	cmpeqi	r2,r2,-1
   894ac:	10803fcc 	andi	r2,r2,255
   894b0:	103fd626 	beq	r2,zero,8940c <__alt_data_end+0xfffcac0c>
   894b4:	00bfffc4 	movi	r2,-1
   894b8:	003fee06 	br	89474 <__alt_data_end+0xfffcac74>
   894bc:	90ffffc4 	addi	r3,r18,-1
   894c0:	01003f84 	movi	r4,254
   894c4:	20ffbf36 	bltu	r4,r3,893c4 <__alt_data_end+0xfffcabc4>
   894c8:	900b883a 	mov	r5,r18
   894cc:	dc800005 	stb	r18,0(sp)
   894d0:	1029883a 	mov	r20,r2
   894d4:	003fc506 	br	893ec <__alt_data_end+0xfffcabec>
   894d8:	800d883a 	mov	r6,r16
   894dc:	a80b883a 	mov	r5,r21
   894e0:	9809883a 	mov	r4,r19
   894e4:	008a28c0 	call	8a28c <__swbuf_r>
   894e8:	10bfffe0 	cmpeqi	r2,r2,-1
   894ec:	003fef06 	br	894ac <__alt_data_end+0xfffcacac>

000894f0 <_fputwc_r>:
   894f0:	3080030b 	ldhu	r2,12(r6)
   894f4:	10c8000c 	andi	r3,r2,8192
   894f8:	1800051e 	bne	r3,zero,89510 <_fputwc_r+0x20>
   894fc:	30c01917 	ldw	r3,100(r6)
   89500:	10880014 	ori	r2,r2,8192
   89504:	3080030d 	sth	r2,12(r6)
   89508:	18880014 	ori	r2,r3,8192
   8950c:	30801915 	stw	r2,100(r6)
   89510:	008938c1 	jmpi	8938c <__fputwc>

00089514 <fputwc>:
   89514:	008002b4 	movhi	r2,10
   89518:	defffc04 	addi	sp,sp,-16
   8951c:	10a87f04 	addi	r2,r2,-24068
   89520:	dc000115 	stw	r16,4(sp)
   89524:	14000017 	ldw	r16,0(r2)
   89528:	dc400215 	stw	r17,8(sp)
   8952c:	dfc00315 	stw	ra,12(sp)
   89530:	2023883a 	mov	r17,r4
   89534:	80000226 	beq	r16,zero,89540 <fputwc+0x2c>
   89538:	80800e17 	ldw	r2,56(r16)
   8953c:	10001026 	beq	r2,zero,89580 <fputwc+0x6c>
   89540:	2880030b 	ldhu	r2,12(r5)
   89544:	10c8000c 	andi	r3,r2,8192
   89548:	1800051e 	bne	r3,zero,89560 <fputwc+0x4c>
   8954c:	28c01917 	ldw	r3,100(r5)
   89550:	10880014 	ori	r2,r2,8192
   89554:	2880030d 	sth	r2,12(r5)
   89558:	18880014 	ori	r2,r3,8192
   8955c:	28801915 	stw	r2,100(r5)
   89560:	280d883a 	mov	r6,r5
   89564:	8009883a 	mov	r4,r16
   89568:	880b883a 	mov	r5,r17
   8956c:	dfc00317 	ldw	ra,12(sp)
   89570:	dc400217 	ldw	r17,8(sp)
   89574:	dc000117 	ldw	r16,4(sp)
   89578:	dec00404 	addi	sp,sp,16
   8957c:	008938c1 	jmpi	8938c <__fputwc>
   89580:	8009883a 	mov	r4,r16
   89584:	d9400015 	stw	r5,0(sp)
   89588:	0085b080 	call	85b08 <__sinit>
   8958c:	d9400017 	ldw	r5,0(sp)
   89590:	003feb06 	br	89540 <__alt_data_end+0xfffcad40>

00089594 <_fstat_r>:
   89594:	defffd04 	addi	sp,sp,-12
   89598:	2805883a 	mov	r2,r5
   8959c:	dc000015 	stw	r16,0(sp)
   895a0:	040002b4 	movhi	r16,10
   895a4:	dc400115 	stw	r17,4(sp)
   895a8:	842f9804 	addi	r16,r16,-16800
   895ac:	2023883a 	mov	r17,r4
   895b0:	300b883a 	mov	r5,r6
   895b4:	1009883a 	mov	r4,r2
   895b8:	dfc00215 	stw	ra,8(sp)
   895bc:	80000015 	stw	zero,0(r16)
   895c0:	008dbd40 	call	8dbd4 <fstat>
   895c4:	00ffffc4 	movi	r3,-1
   895c8:	10c00526 	beq	r2,r3,895e0 <_fstat_r+0x4c>
   895cc:	dfc00217 	ldw	ra,8(sp)
   895d0:	dc400117 	ldw	r17,4(sp)
   895d4:	dc000017 	ldw	r16,0(sp)
   895d8:	dec00304 	addi	sp,sp,12
   895dc:	f800283a 	ret
   895e0:	80c00017 	ldw	r3,0(r16)
   895e4:	183ff926 	beq	r3,zero,895cc <__alt_data_end+0xfffcadcc>
   895e8:	88c00015 	stw	r3,0(r17)
   895ec:	003ff706 	br	895cc <__alt_data_end+0xfffcadcc>

000895f0 <__sfvwrite_r>:
   895f0:	30800217 	ldw	r2,8(r6)
   895f4:	10006726 	beq	r2,zero,89794 <__sfvwrite_r+0x1a4>
   895f8:	28c0030b 	ldhu	r3,12(r5)
   895fc:	defff404 	addi	sp,sp,-48
   89600:	dd400715 	stw	r21,28(sp)
   89604:	dd000615 	stw	r20,24(sp)
   89608:	dc000215 	stw	r16,8(sp)
   8960c:	dfc00b15 	stw	ra,44(sp)
   89610:	df000a15 	stw	fp,40(sp)
   89614:	ddc00915 	stw	r23,36(sp)
   89618:	dd800815 	stw	r22,32(sp)
   8961c:	dcc00515 	stw	r19,20(sp)
   89620:	dc800415 	stw	r18,16(sp)
   89624:	dc400315 	stw	r17,12(sp)
   89628:	1880020c 	andi	r2,r3,8
   8962c:	2821883a 	mov	r16,r5
   89630:	202b883a 	mov	r21,r4
   89634:	3029883a 	mov	r20,r6
   89638:	10002726 	beq	r2,zero,896d8 <__sfvwrite_r+0xe8>
   8963c:	28800417 	ldw	r2,16(r5)
   89640:	10002526 	beq	r2,zero,896d8 <__sfvwrite_r+0xe8>
   89644:	1880008c 	andi	r2,r3,2
   89648:	a4400017 	ldw	r17,0(r20)
   8964c:	10002a26 	beq	r2,zero,896f8 <__sfvwrite_r+0x108>
   89650:	05a00034 	movhi	r22,32768
   89654:	0027883a 	mov	r19,zero
   89658:	0025883a 	mov	r18,zero
   8965c:	b5bf0004 	addi	r22,r22,-1024
   89660:	980d883a 	mov	r6,r19
   89664:	a809883a 	mov	r4,r21
   89668:	90004626 	beq	r18,zero,89784 <__sfvwrite_r+0x194>
   8966c:	900f883a 	mov	r7,r18
   89670:	b480022e 	bgeu	r22,r18,8967c <__sfvwrite_r+0x8c>
   89674:	01e00034 	movhi	r7,32768
   89678:	39ff0004 	addi	r7,r7,-1024
   8967c:	80800917 	ldw	r2,36(r16)
   89680:	81400717 	ldw	r5,28(r16)
   89684:	103ee83a 	callr	r2
   89688:	00805a0e 	bge	zero,r2,897f4 <__sfvwrite_r+0x204>
   8968c:	a0c00217 	ldw	r3,8(r20)
   89690:	98a7883a 	add	r19,r19,r2
   89694:	90a5c83a 	sub	r18,r18,r2
   89698:	1885c83a 	sub	r2,r3,r2
   8969c:	a0800215 	stw	r2,8(r20)
   896a0:	103fef1e 	bne	r2,zero,89660 <__alt_data_end+0xfffcae60>
   896a4:	0005883a 	mov	r2,zero
   896a8:	dfc00b17 	ldw	ra,44(sp)
   896ac:	df000a17 	ldw	fp,40(sp)
   896b0:	ddc00917 	ldw	r23,36(sp)
   896b4:	dd800817 	ldw	r22,32(sp)
   896b8:	dd400717 	ldw	r21,28(sp)
   896bc:	dd000617 	ldw	r20,24(sp)
   896c0:	dcc00517 	ldw	r19,20(sp)
   896c4:	dc800417 	ldw	r18,16(sp)
   896c8:	dc400317 	ldw	r17,12(sp)
   896cc:	dc000217 	ldw	r16,8(sp)
   896d0:	dec00c04 	addi	sp,sp,48
   896d4:	f800283a 	ret
   896d8:	800b883a 	mov	r5,r16
   896dc:	a809883a 	mov	r4,r21
   896e0:	0083afc0 	call	83afc <__swsetup_r>
   896e4:	1000ee1e 	bne	r2,zero,89aa0 <__sfvwrite_r+0x4b0>
   896e8:	80c0030b 	ldhu	r3,12(r16)
   896ec:	a4400017 	ldw	r17,0(r20)
   896f0:	1880008c 	andi	r2,r3,2
   896f4:	103fd61e 	bne	r2,zero,89650 <__alt_data_end+0xfffcae50>
   896f8:	1880004c 	andi	r2,r3,1
   896fc:	1000421e 	bne	r2,zero,89808 <__sfvwrite_r+0x218>
   89700:	0039883a 	mov	fp,zero
   89704:	0025883a 	mov	r18,zero
   89708:	90001a26 	beq	r18,zero,89774 <__sfvwrite_r+0x184>
   8970c:	1880800c 	andi	r2,r3,512
   89710:	84c00217 	ldw	r19,8(r16)
   89714:	10002126 	beq	r2,zero,8979c <__sfvwrite_r+0x1ac>
   89718:	982f883a 	mov	r23,r19
   8971c:	94c09636 	bltu	r18,r19,89978 <__sfvwrite_r+0x388>
   89720:	1881200c 	andi	r2,r3,1152
   89724:	1000a11e 	bne	r2,zero,899ac <__sfvwrite_r+0x3bc>
   89728:	81000017 	ldw	r4,0(r16)
   8972c:	b80d883a 	mov	r6,r23
   89730:	e00b883a 	mov	r5,fp
   89734:	0089b6c0 	call	89b6c <memmove>
   89738:	80c00217 	ldw	r3,8(r16)
   8973c:	81000017 	ldw	r4,0(r16)
   89740:	9005883a 	mov	r2,r18
   89744:	1ce7c83a 	sub	r19,r3,r19
   89748:	25cf883a 	add	r7,r4,r23
   8974c:	84c00215 	stw	r19,8(r16)
   89750:	81c00015 	stw	r7,0(r16)
   89754:	a0c00217 	ldw	r3,8(r20)
   89758:	e0b9883a 	add	fp,fp,r2
   8975c:	90a5c83a 	sub	r18,r18,r2
   89760:	18a7c83a 	sub	r19,r3,r2
   89764:	a4c00215 	stw	r19,8(r20)
   89768:	983fce26 	beq	r19,zero,896a4 <__alt_data_end+0xfffcaea4>
   8976c:	80c0030b 	ldhu	r3,12(r16)
   89770:	903fe61e 	bne	r18,zero,8970c <__alt_data_end+0xfffcaf0c>
   89774:	8f000017 	ldw	fp,0(r17)
   89778:	8c800117 	ldw	r18,4(r17)
   8977c:	8c400204 	addi	r17,r17,8
   89780:	003fe106 	br	89708 <__alt_data_end+0xfffcaf08>
   89784:	8cc00017 	ldw	r19,0(r17)
   89788:	8c800117 	ldw	r18,4(r17)
   8978c:	8c400204 	addi	r17,r17,8
   89790:	003fb306 	br	89660 <__alt_data_end+0xfffcae60>
   89794:	0005883a 	mov	r2,zero
   89798:	f800283a 	ret
   8979c:	81000017 	ldw	r4,0(r16)
   897a0:	80800417 	ldw	r2,16(r16)
   897a4:	11005a36 	bltu	r2,r4,89910 <__sfvwrite_r+0x320>
   897a8:	85c00517 	ldw	r23,20(r16)
   897ac:	95c05836 	bltu	r18,r23,89910 <__sfvwrite_r+0x320>
   897b0:	00a00034 	movhi	r2,32768
   897b4:	10bfffc4 	addi	r2,r2,-1
   897b8:	9009883a 	mov	r4,r18
   897bc:	1480012e 	bgeu	r2,r18,897c4 <__sfvwrite_r+0x1d4>
   897c0:	1009883a 	mov	r4,r2
   897c4:	b80b883a 	mov	r5,r23
   897c8:	0080b0c0 	call	80b0c <__divsi3>
   897cc:	b80b883a 	mov	r5,r23
   897d0:	1009883a 	mov	r4,r2
   897d4:	008b18c0 	call	8b18c <__mulsi3>
   897d8:	81400717 	ldw	r5,28(r16)
   897dc:	80c00917 	ldw	r3,36(r16)
   897e0:	100f883a 	mov	r7,r2
   897e4:	e00d883a 	mov	r6,fp
   897e8:	a809883a 	mov	r4,r21
   897ec:	183ee83a 	callr	r3
   897f0:	00bfd816 	blt	zero,r2,89754 <__alt_data_end+0xfffcaf54>
   897f4:	8080030b 	ldhu	r2,12(r16)
   897f8:	10801014 	ori	r2,r2,64
   897fc:	8080030d 	sth	r2,12(r16)
   89800:	00bfffc4 	movi	r2,-1
   89804:	003fa806 	br	896a8 <__alt_data_end+0xfffcaea8>
   89808:	0027883a 	mov	r19,zero
   8980c:	0011883a 	mov	r8,zero
   89810:	0039883a 	mov	fp,zero
   89814:	0025883a 	mov	r18,zero
   89818:	90001f26 	beq	r18,zero,89898 <__sfvwrite_r+0x2a8>
   8981c:	40005a26 	beq	r8,zero,89988 <__sfvwrite_r+0x398>
   89820:	982d883a 	mov	r22,r19
   89824:	94c0012e 	bgeu	r18,r19,8982c <__sfvwrite_r+0x23c>
   89828:	902d883a 	mov	r22,r18
   8982c:	81000017 	ldw	r4,0(r16)
   89830:	80800417 	ldw	r2,16(r16)
   89834:	b02f883a 	mov	r23,r22
   89838:	81c00517 	ldw	r7,20(r16)
   8983c:	1100032e 	bgeu	r2,r4,8984c <__sfvwrite_r+0x25c>
   89840:	80c00217 	ldw	r3,8(r16)
   89844:	38c7883a 	add	r3,r7,r3
   89848:	1d801816 	blt	r3,r22,898ac <__sfvwrite_r+0x2bc>
   8984c:	b1c03e16 	blt	r22,r7,89948 <__sfvwrite_r+0x358>
   89850:	80800917 	ldw	r2,36(r16)
   89854:	81400717 	ldw	r5,28(r16)
   89858:	e00d883a 	mov	r6,fp
   8985c:	da000115 	stw	r8,4(sp)
   89860:	a809883a 	mov	r4,r21
   89864:	103ee83a 	callr	r2
   89868:	102f883a 	mov	r23,r2
   8986c:	da000117 	ldw	r8,4(sp)
   89870:	00bfe00e 	bge	zero,r2,897f4 <__alt_data_end+0xfffcaff4>
   89874:	9de7c83a 	sub	r19,r19,r23
   89878:	98001f26 	beq	r19,zero,898f8 <__sfvwrite_r+0x308>
   8987c:	a0800217 	ldw	r2,8(r20)
   89880:	e5f9883a 	add	fp,fp,r23
   89884:	95e5c83a 	sub	r18,r18,r23
   89888:	15efc83a 	sub	r23,r2,r23
   8988c:	a5c00215 	stw	r23,8(r20)
   89890:	b83f8426 	beq	r23,zero,896a4 <__alt_data_end+0xfffcaea4>
   89894:	903fe11e 	bne	r18,zero,8981c <__alt_data_end+0xfffcb01c>
   89898:	8f000017 	ldw	fp,0(r17)
   8989c:	8c800117 	ldw	r18,4(r17)
   898a0:	0011883a 	mov	r8,zero
   898a4:	8c400204 	addi	r17,r17,8
   898a8:	003fdb06 	br	89818 <__alt_data_end+0xfffcb018>
   898ac:	180d883a 	mov	r6,r3
   898b0:	e00b883a 	mov	r5,fp
   898b4:	da000115 	stw	r8,4(sp)
   898b8:	d8c00015 	stw	r3,0(sp)
   898bc:	0089b6c0 	call	89b6c <memmove>
   898c0:	d8c00017 	ldw	r3,0(sp)
   898c4:	80800017 	ldw	r2,0(r16)
   898c8:	800b883a 	mov	r5,r16
   898cc:	a809883a 	mov	r4,r21
   898d0:	10c5883a 	add	r2,r2,r3
   898d4:	80800015 	stw	r2,0(r16)
   898d8:	d8c00015 	stw	r3,0(sp)
   898dc:	008571c0 	call	8571c <_fflush_r>
   898e0:	d8c00017 	ldw	r3,0(sp)
   898e4:	da000117 	ldw	r8,4(sp)
   898e8:	103fc21e 	bne	r2,zero,897f4 <__alt_data_end+0xfffcaff4>
   898ec:	182f883a 	mov	r23,r3
   898f0:	9de7c83a 	sub	r19,r19,r23
   898f4:	983fe11e 	bne	r19,zero,8987c <__alt_data_end+0xfffcb07c>
   898f8:	800b883a 	mov	r5,r16
   898fc:	a809883a 	mov	r4,r21
   89900:	008571c0 	call	8571c <_fflush_r>
   89904:	103fbb1e 	bne	r2,zero,897f4 <__alt_data_end+0xfffcaff4>
   89908:	0011883a 	mov	r8,zero
   8990c:	003fdb06 	br	8987c <__alt_data_end+0xfffcb07c>
   89910:	94c0012e 	bgeu	r18,r19,89918 <__sfvwrite_r+0x328>
   89914:	9027883a 	mov	r19,r18
   89918:	980d883a 	mov	r6,r19
   8991c:	e00b883a 	mov	r5,fp
   89920:	0089b6c0 	call	89b6c <memmove>
   89924:	80800217 	ldw	r2,8(r16)
   89928:	80c00017 	ldw	r3,0(r16)
   8992c:	14c5c83a 	sub	r2,r2,r19
   89930:	1cc7883a 	add	r3,r3,r19
   89934:	80800215 	stw	r2,8(r16)
   89938:	80c00015 	stw	r3,0(r16)
   8993c:	10004326 	beq	r2,zero,89a4c <__sfvwrite_r+0x45c>
   89940:	9805883a 	mov	r2,r19
   89944:	003f8306 	br	89754 <__alt_data_end+0xfffcaf54>
   89948:	b00d883a 	mov	r6,r22
   8994c:	e00b883a 	mov	r5,fp
   89950:	da000115 	stw	r8,4(sp)
   89954:	0089b6c0 	call	89b6c <memmove>
   89958:	80800217 	ldw	r2,8(r16)
   8995c:	80c00017 	ldw	r3,0(r16)
   89960:	da000117 	ldw	r8,4(sp)
   89964:	1585c83a 	sub	r2,r2,r22
   89968:	1dad883a 	add	r22,r3,r22
   8996c:	80800215 	stw	r2,8(r16)
   89970:	85800015 	stw	r22,0(r16)
   89974:	003fbf06 	br	89874 <__alt_data_end+0xfffcb074>
   89978:	81000017 	ldw	r4,0(r16)
   8997c:	9027883a 	mov	r19,r18
   89980:	902f883a 	mov	r23,r18
   89984:	003f6906 	br	8972c <__alt_data_end+0xfffcaf2c>
   89988:	900d883a 	mov	r6,r18
   8998c:	01400284 	movi	r5,10
   89990:	e009883a 	mov	r4,fp
   89994:	00863ac0 	call	863ac <memchr>
   89998:	10003e26 	beq	r2,zero,89a94 <__sfvwrite_r+0x4a4>
   8999c:	10800044 	addi	r2,r2,1
   899a0:	1727c83a 	sub	r19,r2,fp
   899a4:	02000044 	movi	r8,1
   899a8:	003f9d06 	br	89820 <__alt_data_end+0xfffcb020>
   899ac:	80800517 	ldw	r2,20(r16)
   899b0:	81400417 	ldw	r5,16(r16)
   899b4:	81c00017 	ldw	r7,0(r16)
   899b8:	10a7883a 	add	r19,r2,r2
   899bc:	9885883a 	add	r2,r19,r2
   899c0:	1026d7fa 	srli	r19,r2,31
   899c4:	396dc83a 	sub	r22,r7,r5
   899c8:	b1000044 	addi	r4,r22,1
   899cc:	9885883a 	add	r2,r19,r2
   899d0:	1027d07a 	srai	r19,r2,1
   899d4:	2485883a 	add	r2,r4,r18
   899d8:	980d883a 	mov	r6,r19
   899dc:	9880022e 	bgeu	r19,r2,899e8 <__sfvwrite_r+0x3f8>
   899e0:	1027883a 	mov	r19,r2
   899e4:	100d883a 	mov	r6,r2
   899e8:	18c1000c 	andi	r3,r3,1024
   899ec:	18001c26 	beq	r3,zero,89a60 <__sfvwrite_r+0x470>
   899f0:	300b883a 	mov	r5,r6
   899f4:	a809883a 	mov	r4,r21
   899f8:	0080ce80 	call	80ce8 <_malloc_r>
   899fc:	102f883a 	mov	r23,r2
   89a00:	10002926 	beq	r2,zero,89aa8 <__sfvwrite_r+0x4b8>
   89a04:	81400417 	ldw	r5,16(r16)
   89a08:	b00d883a 	mov	r6,r22
   89a0c:	1009883a 	mov	r4,r2
   89a10:	00864900 	call	86490 <memcpy>
   89a14:	8080030b 	ldhu	r2,12(r16)
   89a18:	00fedfc4 	movi	r3,-1153
   89a1c:	10c4703a 	and	r2,r2,r3
   89a20:	10802014 	ori	r2,r2,128
   89a24:	8080030d 	sth	r2,12(r16)
   89a28:	bd89883a 	add	r4,r23,r22
   89a2c:	9d8fc83a 	sub	r7,r19,r22
   89a30:	85c00415 	stw	r23,16(r16)
   89a34:	84c00515 	stw	r19,20(r16)
   89a38:	81000015 	stw	r4,0(r16)
   89a3c:	9027883a 	mov	r19,r18
   89a40:	81c00215 	stw	r7,8(r16)
   89a44:	902f883a 	mov	r23,r18
   89a48:	003f3806 	br	8972c <__alt_data_end+0xfffcaf2c>
   89a4c:	800b883a 	mov	r5,r16
   89a50:	a809883a 	mov	r4,r21
   89a54:	008571c0 	call	8571c <_fflush_r>
   89a58:	103fb926 	beq	r2,zero,89940 <__alt_data_end+0xfffcb140>
   89a5c:	003f6506 	br	897f4 <__alt_data_end+0xfffcaff4>
   89a60:	a809883a 	mov	r4,r21
   89a64:	0089d280 	call	89d28 <_realloc_r>
   89a68:	102f883a 	mov	r23,r2
   89a6c:	103fee1e 	bne	r2,zero,89a28 <__alt_data_end+0xfffcb228>
   89a70:	81400417 	ldw	r5,16(r16)
   89a74:	a809883a 	mov	r4,r21
   89a78:	0085c7c0 	call	85c7c <_free_r>
   89a7c:	8080030b 	ldhu	r2,12(r16)
   89a80:	00ffdfc4 	movi	r3,-129
   89a84:	1884703a 	and	r2,r3,r2
   89a88:	00c00304 	movi	r3,12
   89a8c:	a8c00015 	stw	r3,0(r21)
   89a90:	003f5906 	br	897f8 <__alt_data_end+0xfffcaff8>
   89a94:	94c00044 	addi	r19,r18,1
   89a98:	02000044 	movi	r8,1
   89a9c:	003f6006 	br	89820 <__alt_data_end+0xfffcb020>
   89aa0:	00bfffc4 	movi	r2,-1
   89aa4:	003f0006 	br	896a8 <__alt_data_end+0xfffcaea8>
   89aa8:	00800304 	movi	r2,12
   89aac:	a8800015 	stw	r2,0(r21)
   89ab0:	8080030b 	ldhu	r2,12(r16)
   89ab4:	003f5006 	br	897f8 <__alt_data_end+0xfffcaff8>

00089ab8 <_isatty_r>:
   89ab8:	defffd04 	addi	sp,sp,-12
   89abc:	dc000015 	stw	r16,0(sp)
   89ac0:	040002b4 	movhi	r16,10
   89ac4:	dc400115 	stw	r17,4(sp)
   89ac8:	842f9804 	addi	r16,r16,-16800
   89acc:	2023883a 	mov	r17,r4
   89ad0:	2809883a 	mov	r4,r5
   89ad4:	dfc00215 	stw	ra,8(sp)
   89ad8:	80000015 	stw	zero,0(r16)
   89adc:	008df680 	call	8df68 <isatty>
   89ae0:	00ffffc4 	movi	r3,-1
   89ae4:	10c00526 	beq	r2,r3,89afc <_isatty_r+0x44>
   89ae8:	dfc00217 	ldw	ra,8(sp)
   89aec:	dc400117 	ldw	r17,4(sp)
   89af0:	dc000017 	ldw	r16,0(sp)
   89af4:	dec00304 	addi	sp,sp,12
   89af8:	f800283a 	ret
   89afc:	80c00017 	ldw	r3,0(r16)
   89b00:	183ff926 	beq	r3,zero,89ae8 <__alt_data_end+0xfffcb2e8>
   89b04:	88c00015 	stw	r3,0(r17)
   89b08:	003ff706 	br	89ae8 <__alt_data_end+0xfffcb2e8>

00089b0c <_lseek_r>:
   89b0c:	defffd04 	addi	sp,sp,-12
   89b10:	2805883a 	mov	r2,r5
   89b14:	dc000015 	stw	r16,0(sp)
   89b18:	040002b4 	movhi	r16,10
   89b1c:	dc400115 	stw	r17,4(sp)
   89b20:	300b883a 	mov	r5,r6
   89b24:	842f9804 	addi	r16,r16,-16800
   89b28:	2023883a 	mov	r17,r4
   89b2c:	380d883a 	mov	r6,r7
   89b30:	1009883a 	mov	r4,r2
   89b34:	dfc00215 	stw	ra,8(sp)
   89b38:	80000015 	stw	zero,0(r16)
   89b3c:	008e13c0 	call	8e13c <lseek>
   89b40:	00ffffc4 	movi	r3,-1
   89b44:	10c00526 	beq	r2,r3,89b5c <_lseek_r+0x50>
   89b48:	dfc00217 	ldw	ra,8(sp)
   89b4c:	dc400117 	ldw	r17,4(sp)
   89b50:	dc000017 	ldw	r16,0(sp)
   89b54:	dec00304 	addi	sp,sp,12
   89b58:	f800283a 	ret
   89b5c:	80c00017 	ldw	r3,0(r16)
   89b60:	183ff926 	beq	r3,zero,89b48 <__alt_data_end+0xfffcb348>
   89b64:	88c00015 	stw	r3,0(r17)
   89b68:	003ff706 	br	89b48 <__alt_data_end+0xfffcb348>

00089b6c <memmove>:
   89b6c:	2005883a 	mov	r2,r4
   89b70:	29000b2e 	bgeu	r5,r4,89ba0 <memmove+0x34>
   89b74:	298f883a 	add	r7,r5,r6
   89b78:	21c0092e 	bgeu	r4,r7,89ba0 <memmove+0x34>
   89b7c:	2187883a 	add	r3,r4,r6
   89b80:	198bc83a 	sub	r5,r3,r6
   89b84:	30004826 	beq	r6,zero,89ca8 <memmove+0x13c>
   89b88:	39ffffc4 	addi	r7,r7,-1
   89b8c:	39000003 	ldbu	r4,0(r7)
   89b90:	18ffffc4 	addi	r3,r3,-1
   89b94:	19000005 	stb	r4,0(r3)
   89b98:	28fffb1e 	bne	r5,r3,89b88 <__alt_data_end+0xfffcb388>
   89b9c:	f800283a 	ret
   89ba0:	00c003c4 	movi	r3,15
   89ba4:	1980412e 	bgeu	r3,r6,89cac <memmove+0x140>
   89ba8:	2886b03a 	or	r3,r5,r2
   89bac:	18c000cc 	andi	r3,r3,3
   89bb0:	1800401e 	bne	r3,zero,89cb4 <memmove+0x148>
   89bb4:	33fffc04 	addi	r15,r6,-16
   89bb8:	781ed13a 	srli	r15,r15,4
   89bbc:	28c00104 	addi	r3,r5,4
   89bc0:	13400104 	addi	r13,r2,4
   89bc4:	781c913a 	slli	r14,r15,4
   89bc8:	2b000204 	addi	r12,r5,8
   89bcc:	12c00204 	addi	r11,r2,8
   89bd0:	73800504 	addi	r14,r14,20
   89bd4:	2a800304 	addi	r10,r5,12
   89bd8:	12400304 	addi	r9,r2,12
   89bdc:	2b9d883a 	add	r14,r5,r14
   89be0:	2811883a 	mov	r8,r5
   89be4:	100f883a 	mov	r7,r2
   89be8:	41000017 	ldw	r4,0(r8)
   89bec:	39c00404 	addi	r7,r7,16
   89bf0:	18c00404 	addi	r3,r3,16
   89bf4:	393ffc15 	stw	r4,-16(r7)
   89bf8:	193ffc17 	ldw	r4,-16(r3)
   89bfc:	6b400404 	addi	r13,r13,16
   89c00:	5ac00404 	addi	r11,r11,16
   89c04:	693ffc15 	stw	r4,-16(r13)
   89c08:	61000017 	ldw	r4,0(r12)
   89c0c:	4a400404 	addi	r9,r9,16
   89c10:	42000404 	addi	r8,r8,16
   89c14:	593ffc15 	stw	r4,-16(r11)
   89c18:	51000017 	ldw	r4,0(r10)
   89c1c:	63000404 	addi	r12,r12,16
   89c20:	52800404 	addi	r10,r10,16
   89c24:	493ffc15 	stw	r4,-16(r9)
   89c28:	1bbfef1e 	bne	r3,r14,89be8 <__alt_data_end+0xfffcb3e8>
   89c2c:	79000044 	addi	r4,r15,1
   89c30:	2008913a 	slli	r4,r4,4
   89c34:	328003cc 	andi	r10,r6,15
   89c38:	02c000c4 	movi	r11,3
   89c3c:	1107883a 	add	r3,r2,r4
   89c40:	290b883a 	add	r5,r5,r4
   89c44:	5a801e2e 	bgeu	r11,r10,89cc0 <memmove+0x154>
   89c48:	1813883a 	mov	r9,r3
   89c4c:	2811883a 	mov	r8,r5
   89c50:	500f883a 	mov	r7,r10
   89c54:	41000017 	ldw	r4,0(r8)
   89c58:	4a400104 	addi	r9,r9,4
   89c5c:	39ffff04 	addi	r7,r7,-4
   89c60:	493fff15 	stw	r4,-4(r9)
   89c64:	42000104 	addi	r8,r8,4
   89c68:	59fffa36 	bltu	r11,r7,89c54 <__alt_data_end+0xfffcb454>
   89c6c:	513fff04 	addi	r4,r10,-4
   89c70:	2008d0ba 	srli	r4,r4,2
   89c74:	318000cc 	andi	r6,r6,3
   89c78:	21000044 	addi	r4,r4,1
   89c7c:	2109883a 	add	r4,r4,r4
   89c80:	2109883a 	add	r4,r4,r4
   89c84:	1907883a 	add	r3,r3,r4
   89c88:	290b883a 	add	r5,r5,r4
   89c8c:	30000b26 	beq	r6,zero,89cbc <memmove+0x150>
   89c90:	198d883a 	add	r6,r3,r6
   89c94:	29c00003 	ldbu	r7,0(r5)
   89c98:	18c00044 	addi	r3,r3,1
   89c9c:	29400044 	addi	r5,r5,1
   89ca0:	19ffffc5 	stb	r7,-1(r3)
   89ca4:	19bffb1e 	bne	r3,r6,89c94 <__alt_data_end+0xfffcb494>
   89ca8:	f800283a 	ret
   89cac:	1007883a 	mov	r3,r2
   89cb0:	003ff606 	br	89c8c <__alt_data_end+0xfffcb48c>
   89cb4:	1007883a 	mov	r3,r2
   89cb8:	003ff506 	br	89c90 <__alt_data_end+0xfffcb490>
   89cbc:	f800283a 	ret
   89cc0:	500d883a 	mov	r6,r10
   89cc4:	003ff106 	br	89c8c <__alt_data_end+0xfffcb48c>

00089cc8 <_read_r>:
   89cc8:	defffd04 	addi	sp,sp,-12
   89ccc:	2805883a 	mov	r2,r5
   89cd0:	dc000015 	stw	r16,0(sp)
   89cd4:	040002b4 	movhi	r16,10
   89cd8:	dc400115 	stw	r17,4(sp)
   89cdc:	300b883a 	mov	r5,r6
   89ce0:	842f9804 	addi	r16,r16,-16800
   89ce4:	2023883a 	mov	r17,r4
   89ce8:	380d883a 	mov	r6,r7
   89cec:	1009883a 	mov	r4,r2
   89cf0:	dfc00215 	stw	ra,8(sp)
   89cf4:	80000015 	stw	zero,0(r16)
   89cf8:	008e3100 	call	8e310 <read>
   89cfc:	00ffffc4 	movi	r3,-1
   89d00:	10c00526 	beq	r2,r3,89d18 <_read_r+0x50>
   89d04:	dfc00217 	ldw	ra,8(sp)
   89d08:	dc400117 	ldw	r17,4(sp)
   89d0c:	dc000017 	ldw	r16,0(sp)
   89d10:	dec00304 	addi	sp,sp,12
   89d14:	f800283a 	ret
   89d18:	80c00017 	ldw	r3,0(r16)
   89d1c:	183ff926 	beq	r3,zero,89d04 <__alt_data_end+0xfffcb504>
   89d20:	88c00015 	stw	r3,0(r17)
   89d24:	003ff706 	br	89d04 <__alt_data_end+0xfffcb504>

00089d28 <_realloc_r>:
   89d28:	defff604 	addi	sp,sp,-40
   89d2c:	dc800215 	stw	r18,8(sp)
   89d30:	dfc00915 	stw	ra,36(sp)
   89d34:	df000815 	stw	fp,32(sp)
   89d38:	ddc00715 	stw	r23,28(sp)
   89d3c:	dd800615 	stw	r22,24(sp)
   89d40:	dd400515 	stw	r21,20(sp)
   89d44:	dd000415 	stw	r20,16(sp)
   89d48:	dcc00315 	stw	r19,12(sp)
   89d4c:	dc400115 	stw	r17,4(sp)
   89d50:	dc000015 	stw	r16,0(sp)
   89d54:	3025883a 	mov	r18,r6
   89d58:	2800b726 	beq	r5,zero,8a038 <_realloc_r+0x310>
   89d5c:	282b883a 	mov	r21,r5
   89d60:	2029883a 	mov	r20,r4
   89d64:	008e7a80 	call	8e7a8 <__malloc_lock>
   89d68:	a8bfff17 	ldw	r2,-4(r21)
   89d6c:	043fff04 	movi	r16,-4
   89d70:	90c002c4 	addi	r3,r18,11
   89d74:	01000584 	movi	r4,22
   89d78:	acfffe04 	addi	r19,r21,-8
   89d7c:	1420703a 	and	r16,r2,r16
   89d80:	20c0332e 	bgeu	r4,r3,89e50 <_realloc_r+0x128>
   89d84:	047ffe04 	movi	r17,-8
   89d88:	1c62703a 	and	r17,r3,r17
   89d8c:	8807883a 	mov	r3,r17
   89d90:	88005816 	blt	r17,zero,89ef4 <_realloc_r+0x1cc>
   89d94:	8c805736 	bltu	r17,r18,89ef4 <_realloc_r+0x1cc>
   89d98:	80c0300e 	bge	r16,r3,89e5c <_realloc_r+0x134>
   89d9c:	070002b4 	movhi	fp,10
   89da0:	e721cd04 	addi	fp,fp,-30924
   89da4:	e1c00217 	ldw	r7,8(fp)
   89da8:	9c09883a 	add	r4,r19,r16
   89dac:	22000117 	ldw	r8,4(r4)
   89db0:	21c06326 	beq	r4,r7,89f40 <_realloc_r+0x218>
   89db4:	017fff84 	movi	r5,-2
   89db8:	414a703a 	and	r5,r8,r5
   89dbc:	214b883a 	add	r5,r4,r5
   89dc0:	29800117 	ldw	r6,4(r5)
   89dc4:	3180004c 	andi	r6,r6,1
   89dc8:	30003f26 	beq	r6,zero,89ec8 <_realloc_r+0x1a0>
   89dcc:	1080004c 	andi	r2,r2,1
   89dd0:	10008326 	beq	r2,zero,89fe0 <_realloc_r+0x2b8>
   89dd4:	900b883a 	mov	r5,r18
   89dd8:	a009883a 	mov	r4,r20
   89ddc:	0080ce80 	call	80ce8 <_malloc_r>
   89de0:	1025883a 	mov	r18,r2
   89de4:	10011e26 	beq	r2,zero,8a260 <_realloc_r+0x538>
   89de8:	a93fff17 	ldw	r4,-4(r21)
   89dec:	10fffe04 	addi	r3,r2,-8
   89df0:	00bfff84 	movi	r2,-2
   89df4:	2084703a 	and	r2,r4,r2
   89df8:	9885883a 	add	r2,r19,r2
   89dfc:	1880ee26 	beq	r3,r2,8a1b8 <_realloc_r+0x490>
   89e00:	81bfff04 	addi	r6,r16,-4
   89e04:	00800904 	movi	r2,36
   89e08:	1180b836 	bltu	r2,r6,8a0ec <_realloc_r+0x3c4>
   89e0c:	00c004c4 	movi	r3,19
   89e10:	19809636 	bltu	r3,r6,8a06c <_realloc_r+0x344>
   89e14:	9005883a 	mov	r2,r18
   89e18:	a807883a 	mov	r3,r21
   89e1c:	19000017 	ldw	r4,0(r3)
   89e20:	11000015 	stw	r4,0(r2)
   89e24:	19000117 	ldw	r4,4(r3)
   89e28:	11000115 	stw	r4,4(r2)
   89e2c:	18c00217 	ldw	r3,8(r3)
   89e30:	10c00215 	stw	r3,8(r2)
   89e34:	a80b883a 	mov	r5,r21
   89e38:	a009883a 	mov	r4,r20
   89e3c:	0085c7c0 	call	85c7c <_free_r>
   89e40:	a009883a 	mov	r4,r20
   89e44:	008e8c80 	call	8e8c8 <__malloc_unlock>
   89e48:	9005883a 	mov	r2,r18
   89e4c:	00001206 	br	89e98 <_realloc_r+0x170>
   89e50:	00c00404 	movi	r3,16
   89e54:	1823883a 	mov	r17,r3
   89e58:	003fce06 	br	89d94 <__alt_data_end+0xfffcb594>
   89e5c:	a825883a 	mov	r18,r21
   89e60:	8445c83a 	sub	r2,r16,r17
   89e64:	00c003c4 	movi	r3,15
   89e68:	18802636 	bltu	r3,r2,89f04 <_realloc_r+0x1dc>
   89e6c:	99800117 	ldw	r6,4(r19)
   89e70:	9c07883a 	add	r3,r19,r16
   89e74:	3180004c 	andi	r6,r6,1
   89e78:	3420b03a 	or	r16,r6,r16
   89e7c:	9c000115 	stw	r16,4(r19)
   89e80:	18800117 	ldw	r2,4(r3)
   89e84:	10800054 	ori	r2,r2,1
   89e88:	18800115 	stw	r2,4(r3)
   89e8c:	a009883a 	mov	r4,r20
   89e90:	008e8c80 	call	8e8c8 <__malloc_unlock>
   89e94:	9005883a 	mov	r2,r18
   89e98:	dfc00917 	ldw	ra,36(sp)
   89e9c:	df000817 	ldw	fp,32(sp)
   89ea0:	ddc00717 	ldw	r23,28(sp)
   89ea4:	dd800617 	ldw	r22,24(sp)
   89ea8:	dd400517 	ldw	r21,20(sp)
   89eac:	dd000417 	ldw	r20,16(sp)
   89eb0:	dcc00317 	ldw	r19,12(sp)
   89eb4:	dc800217 	ldw	r18,8(sp)
   89eb8:	dc400117 	ldw	r17,4(sp)
   89ebc:	dc000017 	ldw	r16,0(sp)
   89ec0:	dec00a04 	addi	sp,sp,40
   89ec4:	f800283a 	ret
   89ec8:	017fff04 	movi	r5,-4
   89ecc:	414a703a 	and	r5,r8,r5
   89ed0:	814d883a 	add	r6,r16,r5
   89ed4:	30c01f16 	blt	r6,r3,89f54 <_realloc_r+0x22c>
   89ed8:	20800317 	ldw	r2,12(r4)
   89edc:	20c00217 	ldw	r3,8(r4)
   89ee0:	a825883a 	mov	r18,r21
   89ee4:	3021883a 	mov	r16,r6
   89ee8:	18800315 	stw	r2,12(r3)
   89eec:	10c00215 	stw	r3,8(r2)
   89ef0:	003fdb06 	br	89e60 <__alt_data_end+0xfffcb660>
   89ef4:	00800304 	movi	r2,12
   89ef8:	a0800015 	stw	r2,0(r20)
   89efc:	0005883a 	mov	r2,zero
   89f00:	003fe506 	br	89e98 <__alt_data_end+0xfffcb698>
   89f04:	98c00117 	ldw	r3,4(r19)
   89f08:	9c4b883a 	add	r5,r19,r17
   89f0c:	11000054 	ori	r4,r2,1
   89f10:	18c0004c 	andi	r3,r3,1
   89f14:	1c62b03a 	or	r17,r3,r17
   89f18:	9c400115 	stw	r17,4(r19)
   89f1c:	29000115 	stw	r4,4(r5)
   89f20:	2885883a 	add	r2,r5,r2
   89f24:	10c00117 	ldw	r3,4(r2)
   89f28:	29400204 	addi	r5,r5,8
   89f2c:	a009883a 	mov	r4,r20
   89f30:	18c00054 	ori	r3,r3,1
   89f34:	10c00115 	stw	r3,4(r2)
   89f38:	0085c7c0 	call	85c7c <_free_r>
   89f3c:	003fd306 	br	89e8c <__alt_data_end+0xfffcb68c>
   89f40:	017fff04 	movi	r5,-4
   89f44:	414a703a 	and	r5,r8,r5
   89f48:	89800404 	addi	r6,r17,16
   89f4c:	8151883a 	add	r8,r16,r5
   89f50:	4180590e 	bge	r8,r6,8a0b8 <_realloc_r+0x390>
   89f54:	1080004c 	andi	r2,r2,1
   89f58:	103f9e1e 	bne	r2,zero,89dd4 <__alt_data_end+0xfffcb5d4>
   89f5c:	adbffe17 	ldw	r22,-8(r21)
   89f60:	00bfff04 	movi	r2,-4
   89f64:	9dadc83a 	sub	r22,r19,r22
   89f68:	b1800117 	ldw	r6,4(r22)
   89f6c:	3084703a 	and	r2,r6,r2
   89f70:	20002026 	beq	r4,zero,89ff4 <_realloc_r+0x2cc>
   89f74:	80af883a 	add	r23,r16,r2
   89f78:	b96f883a 	add	r23,r23,r5
   89f7c:	21c05f26 	beq	r4,r7,8a0fc <_realloc_r+0x3d4>
   89f80:	b8c01c16 	blt	r23,r3,89ff4 <_realloc_r+0x2cc>
   89f84:	20800317 	ldw	r2,12(r4)
   89f88:	20c00217 	ldw	r3,8(r4)
   89f8c:	81bfff04 	addi	r6,r16,-4
   89f90:	01000904 	movi	r4,36
   89f94:	18800315 	stw	r2,12(r3)
   89f98:	10c00215 	stw	r3,8(r2)
   89f9c:	b0c00217 	ldw	r3,8(r22)
   89fa0:	b0800317 	ldw	r2,12(r22)
   89fa4:	b4800204 	addi	r18,r22,8
   89fa8:	18800315 	stw	r2,12(r3)
   89fac:	10c00215 	stw	r3,8(r2)
   89fb0:	21801b36 	bltu	r4,r6,8a020 <_realloc_r+0x2f8>
   89fb4:	008004c4 	movi	r2,19
   89fb8:	1180352e 	bgeu	r2,r6,8a090 <_realloc_r+0x368>
   89fbc:	a8800017 	ldw	r2,0(r21)
   89fc0:	b0800215 	stw	r2,8(r22)
   89fc4:	a8800117 	ldw	r2,4(r21)
   89fc8:	b0800315 	stw	r2,12(r22)
   89fcc:	008006c4 	movi	r2,27
   89fd0:	11807f36 	bltu	r2,r6,8a1d0 <_realloc_r+0x4a8>
   89fd4:	b0800404 	addi	r2,r22,16
   89fd8:	ad400204 	addi	r21,r21,8
   89fdc:	00002d06 	br	8a094 <_realloc_r+0x36c>
   89fe0:	adbffe17 	ldw	r22,-8(r21)
   89fe4:	00bfff04 	movi	r2,-4
   89fe8:	9dadc83a 	sub	r22,r19,r22
   89fec:	b1000117 	ldw	r4,4(r22)
   89ff0:	2084703a 	and	r2,r4,r2
   89ff4:	b03f7726 	beq	r22,zero,89dd4 <__alt_data_end+0xfffcb5d4>
   89ff8:	80af883a 	add	r23,r16,r2
   89ffc:	b8ff7516 	blt	r23,r3,89dd4 <__alt_data_end+0xfffcb5d4>
   8a000:	b0800317 	ldw	r2,12(r22)
   8a004:	b0c00217 	ldw	r3,8(r22)
   8a008:	81bfff04 	addi	r6,r16,-4
   8a00c:	01000904 	movi	r4,36
   8a010:	18800315 	stw	r2,12(r3)
   8a014:	10c00215 	stw	r3,8(r2)
   8a018:	b4800204 	addi	r18,r22,8
   8a01c:	21bfe52e 	bgeu	r4,r6,89fb4 <__alt_data_end+0xfffcb7b4>
   8a020:	a80b883a 	mov	r5,r21
   8a024:	9009883a 	mov	r4,r18
   8a028:	0089b6c0 	call	89b6c <memmove>
   8a02c:	b821883a 	mov	r16,r23
   8a030:	b027883a 	mov	r19,r22
   8a034:	003f8a06 	br	89e60 <__alt_data_end+0xfffcb660>
   8a038:	300b883a 	mov	r5,r6
   8a03c:	dfc00917 	ldw	ra,36(sp)
   8a040:	df000817 	ldw	fp,32(sp)
   8a044:	ddc00717 	ldw	r23,28(sp)
   8a048:	dd800617 	ldw	r22,24(sp)
   8a04c:	dd400517 	ldw	r21,20(sp)
   8a050:	dd000417 	ldw	r20,16(sp)
   8a054:	dcc00317 	ldw	r19,12(sp)
   8a058:	dc800217 	ldw	r18,8(sp)
   8a05c:	dc400117 	ldw	r17,4(sp)
   8a060:	dc000017 	ldw	r16,0(sp)
   8a064:	dec00a04 	addi	sp,sp,40
   8a068:	0080ce81 	jmpi	80ce8 <_malloc_r>
   8a06c:	a8c00017 	ldw	r3,0(r21)
   8a070:	90c00015 	stw	r3,0(r18)
   8a074:	a8c00117 	ldw	r3,4(r21)
   8a078:	90c00115 	stw	r3,4(r18)
   8a07c:	00c006c4 	movi	r3,27
   8a080:	19804536 	bltu	r3,r6,8a198 <_realloc_r+0x470>
   8a084:	90800204 	addi	r2,r18,8
   8a088:	a8c00204 	addi	r3,r21,8
   8a08c:	003f6306 	br	89e1c <__alt_data_end+0xfffcb61c>
   8a090:	9005883a 	mov	r2,r18
   8a094:	a8c00017 	ldw	r3,0(r21)
   8a098:	b821883a 	mov	r16,r23
   8a09c:	b027883a 	mov	r19,r22
   8a0a0:	10c00015 	stw	r3,0(r2)
   8a0a4:	a8c00117 	ldw	r3,4(r21)
   8a0a8:	10c00115 	stw	r3,4(r2)
   8a0ac:	a8c00217 	ldw	r3,8(r21)
   8a0b0:	10c00215 	stw	r3,8(r2)
   8a0b4:	003f6a06 	br	89e60 <__alt_data_end+0xfffcb660>
   8a0b8:	9c67883a 	add	r19,r19,r17
   8a0bc:	4445c83a 	sub	r2,r8,r17
   8a0c0:	e4c00215 	stw	r19,8(fp)
   8a0c4:	10800054 	ori	r2,r2,1
   8a0c8:	98800115 	stw	r2,4(r19)
   8a0cc:	a8bfff17 	ldw	r2,-4(r21)
   8a0d0:	a009883a 	mov	r4,r20
   8a0d4:	1080004c 	andi	r2,r2,1
   8a0d8:	1462b03a 	or	r17,r2,r17
   8a0dc:	ac7fff15 	stw	r17,-4(r21)
   8a0e0:	008e8c80 	call	8e8c8 <__malloc_unlock>
   8a0e4:	a805883a 	mov	r2,r21
   8a0e8:	003f6b06 	br	89e98 <__alt_data_end+0xfffcb698>
   8a0ec:	a80b883a 	mov	r5,r21
   8a0f0:	9009883a 	mov	r4,r18
   8a0f4:	0089b6c0 	call	89b6c <memmove>
   8a0f8:	003f4e06 	br	89e34 <__alt_data_end+0xfffcb634>
   8a0fc:	89000404 	addi	r4,r17,16
   8a100:	b93fbc16 	blt	r23,r4,89ff4 <__alt_data_end+0xfffcb7f4>
   8a104:	b0800317 	ldw	r2,12(r22)
   8a108:	b0c00217 	ldw	r3,8(r22)
   8a10c:	81bfff04 	addi	r6,r16,-4
   8a110:	01000904 	movi	r4,36
   8a114:	18800315 	stw	r2,12(r3)
   8a118:	10c00215 	stw	r3,8(r2)
   8a11c:	b4800204 	addi	r18,r22,8
   8a120:	21804336 	bltu	r4,r6,8a230 <_realloc_r+0x508>
   8a124:	008004c4 	movi	r2,19
   8a128:	11803f2e 	bgeu	r2,r6,8a228 <_realloc_r+0x500>
   8a12c:	a8800017 	ldw	r2,0(r21)
   8a130:	b0800215 	stw	r2,8(r22)
   8a134:	a8800117 	ldw	r2,4(r21)
   8a138:	b0800315 	stw	r2,12(r22)
   8a13c:	008006c4 	movi	r2,27
   8a140:	11803f36 	bltu	r2,r6,8a240 <_realloc_r+0x518>
   8a144:	b0800404 	addi	r2,r22,16
   8a148:	ad400204 	addi	r21,r21,8
   8a14c:	a8c00017 	ldw	r3,0(r21)
   8a150:	10c00015 	stw	r3,0(r2)
   8a154:	a8c00117 	ldw	r3,4(r21)
   8a158:	10c00115 	stw	r3,4(r2)
   8a15c:	a8c00217 	ldw	r3,8(r21)
   8a160:	10c00215 	stw	r3,8(r2)
   8a164:	b447883a 	add	r3,r22,r17
   8a168:	bc45c83a 	sub	r2,r23,r17
   8a16c:	e0c00215 	stw	r3,8(fp)
   8a170:	10800054 	ori	r2,r2,1
   8a174:	18800115 	stw	r2,4(r3)
   8a178:	b0800117 	ldw	r2,4(r22)
   8a17c:	a009883a 	mov	r4,r20
   8a180:	1080004c 	andi	r2,r2,1
   8a184:	1462b03a 	or	r17,r2,r17
   8a188:	b4400115 	stw	r17,4(r22)
   8a18c:	008e8c80 	call	8e8c8 <__malloc_unlock>
   8a190:	9005883a 	mov	r2,r18
   8a194:	003f4006 	br	89e98 <__alt_data_end+0xfffcb698>
   8a198:	a8c00217 	ldw	r3,8(r21)
   8a19c:	90c00215 	stw	r3,8(r18)
   8a1a0:	a8c00317 	ldw	r3,12(r21)
   8a1a4:	90c00315 	stw	r3,12(r18)
   8a1a8:	30801126 	beq	r6,r2,8a1f0 <_realloc_r+0x4c8>
   8a1ac:	90800404 	addi	r2,r18,16
   8a1b0:	a8c00404 	addi	r3,r21,16
   8a1b4:	003f1906 	br	89e1c <__alt_data_end+0xfffcb61c>
   8a1b8:	90ffff17 	ldw	r3,-4(r18)
   8a1bc:	00bfff04 	movi	r2,-4
   8a1c0:	a825883a 	mov	r18,r21
   8a1c4:	1884703a 	and	r2,r3,r2
   8a1c8:	80a1883a 	add	r16,r16,r2
   8a1cc:	003f2406 	br	89e60 <__alt_data_end+0xfffcb660>
   8a1d0:	a8800217 	ldw	r2,8(r21)
   8a1d4:	b0800415 	stw	r2,16(r22)
   8a1d8:	a8800317 	ldw	r2,12(r21)
   8a1dc:	b0800515 	stw	r2,20(r22)
   8a1e0:	31000a26 	beq	r6,r4,8a20c <_realloc_r+0x4e4>
   8a1e4:	b0800604 	addi	r2,r22,24
   8a1e8:	ad400404 	addi	r21,r21,16
   8a1ec:	003fa906 	br	8a094 <__alt_data_end+0xfffcb894>
   8a1f0:	a9000417 	ldw	r4,16(r21)
   8a1f4:	90800604 	addi	r2,r18,24
   8a1f8:	a8c00604 	addi	r3,r21,24
   8a1fc:	91000415 	stw	r4,16(r18)
   8a200:	a9000517 	ldw	r4,20(r21)
   8a204:	91000515 	stw	r4,20(r18)
   8a208:	003f0406 	br	89e1c <__alt_data_end+0xfffcb61c>
   8a20c:	a8c00417 	ldw	r3,16(r21)
   8a210:	ad400604 	addi	r21,r21,24
   8a214:	b0800804 	addi	r2,r22,32
   8a218:	b0c00615 	stw	r3,24(r22)
   8a21c:	a8ffff17 	ldw	r3,-4(r21)
   8a220:	b0c00715 	stw	r3,28(r22)
   8a224:	003f9b06 	br	8a094 <__alt_data_end+0xfffcb894>
   8a228:	9005883a 	mov	r2,r18
   8a22c:	003fc706 	br	8a14c <__alt_data_end+0xfffcb94c>
   8a230:	a80b883a 	mov	r5,r21
   8a234:	9009883a 	mov	r4,r18
   8a238:	0089b6c0 	call	89b6c <memmove>
   8a23c:	003fc906 	br	8a164 <__alt_data_end+0xfffcb964>
   8a240:	a8800217 	ldw	r2,8(r21)
   8a244:	b0800415 	stw	r2,16(r22)
   8a248:	a8800317 	ldw	r2,12(r21)
   8a24c:	b0800515 	stw	r2,20(r22)
   8a250:	31000726 	beq	r6,r4,8a270 <_realloc_r+0x548>
   8a254:	b0800604 	addi	r2,r22,24
   8a258:	ad400404 	addi	r21,r21,16
   8a25c:	003fbb06 	br	8a14c <__alt_data_end+0xfffcb94c>
   8a260:	a009883a 	mov	r4,r20
   8a264:	008e8c80 	call	8e8c8 <__malloc_unlock>
   8a268:	0005883a 	mov	r2,zero
   8a26c:	003f0a06 	br	89e98 <__alt_data_end+0xfffcb698>
   8a270:	a8c00417 	ldw	r3,16(r21)
   8a274:	ad400604 	addi	r21,r21,24
   8a278:	b0800804 	addi	r2,r22,32
   8a27c:	b0c00615 	stw	r3,24(r22)
   8a280:	a8ffff17 	ldw	r3,-4(r21)
   8a284:	b0c00715 	stw	r3,28(r22)
   8a288:	003fb006 	br	8a14c <__alt_data_end+0xfffcb94c>

0008a28c <__swbuf_r>:
   8a28c:	defffb04 	addi	sp,sp,-20
   8a290:	dcc00315 	stw	r19,12(sp)
   8a294:	dc800215 	stw	r18,8(sp)
   8a298:	dc000015 	stw	r16,0(sp)
   8a29c:	dfc00415 	stw	ra,16(sp)
   8a2a0:	dc400115 	stw	r17,4(sp)
   8a2a4:	2025883a 	mov	r18,r4
   8a2a8:	2827883a 	mov	r19,r5
   8a2ac:	3021883a 	mov	r16,r6
   8a2b0:	20000226 	beq	r4,zero,8a2bc <__swbuf_r+0x30>
   8a2b4:	20800e17 	ldw	r2,56(r4)
   8a2b8:	10004226 	beq	r2,zero,8a3c4 <__swbuf_r+0x138>
   8a2bc:	80800617 	ldw	r2,24(r16)
   8a2c0:	8100030b 	ldhu	r4,12(r16)
   8a2c4:	80800215 	stw	r2,8(r16)
   8a2c8:	2080020c 	andi	r2,r4,8
   8a2cc:	10003626 	beq	r2,zero,8a3a8 <__swbuf_r+0x11c>
   8a2d0:	80c00417 	ldw	r3,16(r16)
   8a2d4:	18003426 	beq	r3,zero,8a3a8 <__swbuf_r+0x11c>
   8a2d8:	2088000c 	andi	r2,r4,8192
   8a2dc:	9c403fcc 	andi	r17,r19,255
   8a2e0:	10001a26 	beq	r2,zero,8a34c <__swbuf_r+0xc0>
   8a2e4:	80800017 	ldw	r2,0(r16)
   8a2e8:	81000517 	ldw	r4,20(r16)
   8a2ec:	10c7c83a 	sub	r3,r2,r3
   8a2f0:	1900200e 	bge	r3,r4,8a374 <__swbuf_r+0xe8>
   8a2f4:	18c00044 	addi	r3,r3,1
   8a2f8:	81000217 	ldw	r4,8(r16)
   8a2fc:	11400044 	addi	r5,r2,1
   8a300:	81400015 	stw	r5,0(r16)
   8a304:	213fffc4 	addi	r4,r4,-1
   8a308:	81000215 	stw	r4,8(r16)
   8a30c:	14c00005 	stb	r19,0(r2)
   8a310:	80800517 	ldw	r2,20(r16)
   8a314:	10c01e26 	beq	r2,r3,8a390 <__swbuf_r+0x104>
   8a318:	8080030b 	ldhu	r2,12(r16)
   8a31c:	1080004c 	andi	r2,r2,1
   8a320:	10000226 	beq	r2,zero,8a32c <__swbuf_r+0xa0>
   8a324:	00800284 	movi	r2,10
   8a328:	88801926 	beq	r17,r2,8a390 <__swbuf_r+0x104>
   8a32c:	8805883a 	mov	r2,r17
   8a330:	dfc00417 	ldw	ra,16(sp)
   8a334:	dcc00317 	ldw	r19,12(sp)
   8a338:	dc800217 	ldw	r18,8(sp)
   8a33c:	dc400117 	ldw	r17,4(sp)
   8a340:	dc000017 	ldw	r16,0(sp)
   8a344:	dec00504 	addi	sp,sp,20
   8a348:	f800283a 	ret
   8a34c:	81401917 	ldw	r5,100(r16)
   8a350:	00b7ffc4 	movi	r2,-8193
   8a354:	21080014 	ori	r4,r4,8192
   8a358:	2884703a 	and	r2,r5,r2
   8a35c:	80801915 	stw	r2,100(r16)
   8a360:	80800017 	ldw	r2,0(r16)
   8a364:	8100030d 	sth	r4,12(r16)
   8a368:	81000517 	ldw	r4,20(r16)
   8a36c:	10c7c83a 	sub	r3,r2,r3
   8a370:	193fe016 	blt	r3,r4,8a2f4 <__alt_data_end+0xfffcbaf4>
   8a374:	800b883a 	mov	r5,r16
   8a378:	9009883a 	mov	r4,r18
   8a37c:	008571c0 	call	8571c <_fflush_r>
   8a380:	1000071e 	bne	r2,zero,8a3a0 <__swbuf_r+0x114>
   8a384:	80800017 	ldw	r2,0(r16)
   8a388:	00c00044 	movi	r3,1
   8a38c:	003fda06 	br	8a2f8 <__alt_data_end+0xfffcbaf8>
   8a390:	800b883a 	mov	r5,r16
   8a394:	9009883a 	mov	r4,r18
   8a398:	008571c0 	call	8571c <_fflush_r>
   8a39c:	103fe326 	beq	r2,zero,8a32c <__alt_data_end+0xfffcbb2c>
   8a3a0:	00bfffc4 	movi	r2,-1
   8a3a4:	003fe206 	br	8a330 <__alt_data_end+0xfffcbb30>
   8a3a8:	800b883a 	mov	r5,r16
   8a3ac:	9009883a 	mov	r4,r18
   8a3b0:	0083afc0 	call	83afc <__swsetup_r>
   8a3b4:	103ffa1e 	bne	r2,zero,8a3a0 <__alt_data_end+0xfffcbba0>
   8a3b8:	8100030b 	ldhu	r4,12(r16)
   8a3bc:	80c00417 	ldw	r3,16(r16)
   8a3c0:	003fc506 	br	8a2d8 <__alt_data_end+0xfffcbad8>
   8a3c4:	0085b080 	call	85b08 <__sinit>
   8a3c8:	003fbc06 	br	8a2bc <__alt_data_end+0xfffcbabc>

0008a3cc <__swbuf>:
   8a3cc:	008002b4 	movhi	r2,10
   8a3d0:	10a87f04 	addi	r2,r2,-24068
   8a3d4:	280d883a 	mov	r6,r5
   8a3d8:	200b883a 	mov	r5,r4
   8a3dc:	11000017 	ldw	r4,0(r2)
   8a3e0:	008a28c1 	jmpi	8a28c <__swbuf_r>

0008a3e4 <_wcrtomb_r>:
   8a3e4:	defff604 	addi	sp,sp,-40
   8a3e8:	008002b4 	movhi	r2,10
   8a3ec:	dc800815 	stw	r18,32(sp)
   8a3f0:	dc400715 	stw	r17,28(sp)
   8a3f4:	dc000615 	stw	r16,24(sp)
   8a3f8:	10a88104 	addi	r2,r2,-24060
   8a3fc:	dfc00915 	stw	ra,36(sp)
   8a400:	2021883a 	mov	r16,r4
   8a404:	3823883a 	mov	r17,r7
   8a408:	14800017 	ldw	r18,0(r2)
   8a40c:	28001426 	beq	r5,zero,8a460 <_wcrtomb_r+0x7c>
   8a410:	d9400415 	stw	r5,16(sp)
   8a414:	d9800515 	stw	r6,20(sp)
   8a418:	00861900 	call	86190 <__locale_charset>
   8a41c:	d9800517 	ldw	r6,20(sp)
   8a420:	d9400417 	ldw	r5,16(sp)
   8a424:	100f883a 	mov	r7,r2
   8a428:	dc400015 	stw	r17,0(sp)
   8a42c:	8009883a 	mov	r4,r16
   8a430:	903ee83a 	callr	r18
   8a434:	00ffffc4 	movi	r3,-1
   8a438:	10c0031e 	bne	r2,r3,8a448 <_wcrtomb_r+0x64>
   8a43c:	88000015 	stw	zero,0(r17)
   8a440:	00c02284 	movi	r3,138
   8a444:	80c00015 	stw	r3,0(r16)
   8a448:	dfc00917 	ldw	ra,36(sp)
   8a44c:	dc800817 	ldw	r18,32(sp)
   8a450:	dc400717 	ldw	r17,28(sp)
   8a454:	dc000617 	ldw	r16,24(sp)
   8a458:	dec00a04 	addi	sp,sp,40
   8a45c:	f800283a 	ret
   8a460:	00861900 	call	86190 <__locale_charset>
   8a464:	100f883a 	mov	r7,r2
   8a468:	dc400015 	stw	r17,0(sp)
   8a46c:	000d883a 	mov	r6,zero
   8a470:	d9400104 	addi	r5,sp,4
   8a474:	8009883a 	mov	r4,r16
   8a478:	903ee83a 	callr	r18
   8a47c:	003fed06 	br	8a434 <__alt_data_end+0xfffcbc34>

0008a480 <wcrtomb>:
   8a480:	defff604 	addi	sp,sp,-40
   8a484:	008002b4 	movhi	r2,10
   8a488:	dc800615 	stw	r18,24(sp)
   8a48c:	dc400515 	stw	r17,20(sp)
   8a490:	10a87f04 	addi	r2,r2,-24068
   8a494:	dfc00915 	stw	ra,36(sp)
   8a498:	dd000815 	stw	r20,32(sp)
   8a49c:	dcc00715 	stw	r19,28(sp)
   8a4a0:	dc000415 	stw	r16,16(sp)
   8a4a4:	3025883a 	mov	r18,r6
   8a4a8:	14400017 	ldw	r17,0(r2)
   8a4ac:	20001926 	beq	r4,zero,8a514 <wcrtomb+0x94>
   8a4b0:	008002b4 	movhi	r2,10
   8a4b4:	10a88104 	addi	r2,r2,-24060
   8a4b8:	15000017 	ldw	r20,0(r2)
   8a4bc:	2021883a 	mov	r16,r4
   8a4c0:	2827883a 	mov	r19,r5
   8a4c4:	00861900 	call	86190 <__locale_charset>
   8a4c8:	100f883a 	mov	r7,r2
   8a4cc:	dc800015 	stw	r18,0(sp)
   8a4d0:	980d883a 	mov	r6,r19
   8a4d4:	800b883a 	mov	r5,r16
   8a4d8:	8809883a 	mov	r4,r17
   8a4dc:	a03ee83a 	callr	r20
   8a4e0:	00ffffc4 	movi	r3,-1
   8a4e4:	10c0031e 	bne	r2,r3,8a4f4 <wcrtomb+0x74>
   8a4e8:	90000015 	stw	zero,0(r18)
   8a4ec:	00c02284 	movi	r3,138
   8a4f0:	88c00015 	stw	r3,0(r17)
   8a4f4:	dfc00917 	ldw	ra,36(sp)
   8a4f8:	dd000817 	ldw	r20,32(sp)
   8a4fc:	dcc00717 	ldw	r19,28(sp)
   8a500:	dc800617 	ldw	r18,24(sp)
   8a504:	dc400517 	ldw	r17,20(sp)
   8a508:	dc000417 	ldw	r16,16(sp)
   8a50c:	dec00a04 	addi	sp,sp,40
   8a510:	f800283a 	ret
   8a514:	008002b4 	movhi	r2,10
   8a518:	10a88104 	addi	r2,r2,-24060
   8a51c:	14000017 	ldw	r16,0(r2)
   8a520:	00861900 	call	86190 <__locale_charset>
   8a524:	100f883a 	mov	r7,r2
   8a528:	dc800015 	stw	r18,0(sp)
   8a52c:	000d883a 	mov	r6,zero
   8a530:	d9400104 	addi	r5,sp,4
   8a534:	8809883a 	mov	r4,r17
   8a538:	803ee83a 	callr	r16
   8a53c:	003fe806 	br	8a4e0 <__alt_data_end+0xfffcbce0>

0008a540 <__ascii_wctomb>:
   8a540:	28000526 	beq	r5,zero,8a558 <__ascii_wctomb+0x18>
   8a544:	00803fc4 	movi	r2,255
   8a548:	11800536 	bltu	r2,r6,8a560 <__ascii_wctomb+0x20>
   8a54c:	29800005 	stb	r6,0(r5)
   8a550:	00800044 	movi	r2,1
   8a554:	f800283a 	ret
   8a558:	0005883a 	mov	r2,zero
   8a55c:	f800283a 	ret
   8a560:	00802284 	movi	r2,138
   8a564:	20800015 	stw	r2,0(r4)
   8a568:	00bfffc4 	movi	r2,-1
   8a56c:	f800283a 	ret

0008a570 <_wctomb_r>:
   8a570:	008002b4 	movhi	r2,10
   8a574:	defff904 	addi	sp,sp,-28
   8a578:	10a88104 	addi	r2,r2,-24060
   8a57c:	dfc00615 	stw	ra,24(sp)
   8a580:	dc400515 	stw	r17,20(sp)
   8a584:	dc000415 	stw	r16,16(sp)
   8a588:	3823883a 	mov	r17,r7
   8a58c:	14000017 	ldw	r16,0(r2)
   8a590:	d9000115 	stw	r4,4(sp)
   8a594:	d9400215 	stw	r5,8(sp)
   8a598:	d9800315 	stw	r6,12(sp)
   8a59c:	00861900 	call	86190 <__locale_charset>
   8a5a0:	d9800317 	ldw	r6,12(sp)
   8a5a4:	d9400217 	ldw	r5,8(sp)
   8a5a8:	d9000117 	ldw	r4,4(sp)
   8a5ac:	100f883a 	mov	r7,r2
   8a5b0:	dc400015 	stw	r17,0(sp)
   8a5b4:	803ee83a 	callr	r16
   8a5b8:	dfc00617 	ldw	ra,24(sp)
   8a5bc:	dc400517 	ldw	r17,20(sp)
   8a5c0:	dc000417 	ldw	r16,16(sp)
   8a5c4:	dec00704 	addi	sp,sp,28
   8a5c8:	f800283a 	ret

0008a5cc <__udivdi3>:
   8a5cc:	defff404 	addi	sp,sp,-48
   8a5d0:	dcc00515 	stw	r19,20(sp)
   8a5d4:	dc000215 	stw	r16,8(sp)
   8a5d8:	dfc00b15 	stw	ra,44(sp)
   8a5dc:	df000a15 	stw	fp,40(sp)
   8a5e0:	ddc00915 	stw	r23,36(sp)
   8a5e4:	dd800815 	stw	r22,32(sp)
   8a5e8:	dd400715 	stw	r21,28(sp)
   8a5ec:	dd000615 	stw	r20,24(sp)
   8a5f0:	dc800415 	stw	r18,16(sp)
   8a5f4:	dc400315 	stw	r17,12(sp)
   8a5f8:	2027883a 	mov	r19,r4
   8a5fc:	2821883a 	mov	r16,r5
   8a600:	3800461e 	bne	r7,zero,8a71c <__udivdi3+0x150>
   8a604:	3023883a 	mov	r17,r6
   8a608:	2025883a 	mov	r18,r4
   8a60c:	2980572e 	bgeu	r5,r6,8a76c <__udivdi3+0x1a0>
   8a610:	00bfffd4 	movui	r2,65535
   8a614:	282d883a 	mov	r22,r5
   8a618:	1180b236 	bltu	r2,r6,8a8e4 <__udivdi3+0x318>
   8a61c:	00803fc4 	movi	r2,255
   8a620:	1185803a 	cmpltu	r2,r2,r6
   8a624:	100490fa 	slli	r2,r2,3
   8a628:	3086d83a 	srl	r3,r6,r2
   8a62c:	010002b4 	movhi	r4,10
   8a630:	21213704 	addi	r4,r4,-31524
   8a634:	20c7883a 	add	r3,r4,r3
   8a638:	18c00003 	ldbu	r3,0(r3)
   8a63c:	1885883a 	add	r2,r3,r2
   8a640:	00c00804 	movi	r3,32
   8a644:	1887c83a 	sub	r3,r3,r2
   8a648:	18000526 	beq	r3,zero,8a660 <__udivdi3+0x94>
   8a64c:	80e0983a 	sll	r16,r16,r3
   8a650:	9884d83a 	srl	r2,r19,r2
   8a654:	30e2983a 	sll	r17,r6,r3
   8a658:	98e4983a 	sll	r18,r19,r3
   8a65c:	142cb03a 	or	r22,r2,r16
   8a660:	882ad43a 	srli	r21,r17,16
   8a664:	b009883a 	mov	r4,r22
   8a668:	8d3fffcc 	andi	r20,r17,65535
   8a66c:	a80b883a 	mov	r5,r21
   8a670:	0080c680 	call	80c68 <__umodsi3>
   8a674:	b009883a 	mov	r4,r22
   8a678:	a80b883a 	mov	r5,r21
   8a67c:	1027883a 	mov	r19,r2
   8a680:	0080c040 	call	80c04 <__udivsi3>
   8a684:	100b883a 	mov	r5,r2
   8a688:	a009883a 	mov	r4,r20
   8a68c:	102d883a 	mov	r22,r2
   8a690:	008b18c0 	call	8b18c <__mulsi3>
   8a694:	9826943a 	slli	r19,r19,16
   8a698:	9006d43a 	srli	r3,r18,16
   8a69c:	1cc6b03a 	or	r3,r3,r19
   8a6a0:	1880052e 	bgeu	r3,r2,8a6b8 <__udivdi3+0xec>
   8a6a4:	1c47883a 	add	r3,r3,r17
   8a6a8:	b13fffc4 	addi	r4,r22,-1
   8a6ac:	1c400136 	bltu	r3,r17,8a6b4 <__udivdi3+0xe8>
   8a6b0:	18814236 	bltu	r3,r2,8abbc <__udivdi3+0x5f0>
   8a6b4:	202d883a 	mov	r22,r4
   8a6b8:	18a1c83a 	sub	r16,r3,r2
   8a6bc:	8009883a 	mov	r4,r16
   8a6c0:	a80b883a 	mov	r5,r21
   8a6c4:	0080c680 	call	80c68 <__umodsi3>
   8a6c8:	1027883a 	mov	r19,r2
   8a6cc:	8009883a 	mov	r4,r16
   8a6d0:	a80b883a 	mov	r5,r21
   8a6d4:	9826943a 	slli	r19,r19,16
   8a6d8:	0080c040 	call	80c04 <__udivsi3>
   8a6dc:	100b883a 	mov	r5,r2
   8a6e0:	a009883a 	mov	r4,r20
   8a6e4:	94bfffcc 	andi	r18,r18,65535
   8a6e8:	1021883a 	mov	r16,r2
   8a6ec:	94e4b03a 	or	r18,r18,r19
   8a6f0:	008b18c0 	call	8b18c <__mulsi3>
   8a6f4:	9080052e 	bgeu	r18,r2,8a70c <__udivdi3+0x140>
   8a6f8:	8ca5883a 	add	r18,r17,r18
   8a6fc:	80ffffc4 	addi	r3,r16,-1
   8a700:	94410c36 	bltu	r18,r17,8ab34 <__udivdi3+0x568>
   8a704:	90810b2e 	bgeu	r18,r2,8ab34 <__udivdi3+0x568>
   8a708:	843fff84 	addi	r16,r16,-2
   8a70c:	b004943a 	slli	r2,r22,16
   8a710:	0007883a 	mov	r3,zero
   8a714:	1404b03a 	or	r2,r2,r16
   8a718:	00005e06 	br	8a894 <__udivdi3+0x2c8>
   8a71c:	29c05b36 	bltu	r5,r7,8a88c <__udivdi3+0x2c0>
   8a720:	00bfffd4 	movui	r2,65535
   8a724:	11c0672e 	bgeu	r2,r7,8a8c4 <__udivdi3+0x2f8>
   8a728:	00804034 	movhi	r2,256
   8a72c:	10bfffc4 	addi	r2,r2,-1
   8a730:	11c10a36 	bltu	r2,r7,8ab5c <__udivdi3+0x590>
   8a734:	00800404 	movi	r2,16
   8a738:	3886d83a 	srl	r3,r7,r2
   8a73c:	010002b4 	movhi	r4,10
   8a740:	21213704 	addi	r4,r4,-31524
   8a744:	20c7883a 	add	r3,r4,r3
   8a748:	18c00003 	ldbu	r3,0(r3)
   8a74c:	05c00804 	movi	r23,32
   8a750:	1885883a 	add	r2,r3,r2
   8a754:	b8afc83a 	sub	r23,r23,r2
   8a758:	b800671e 	bne	r23,zero,8a8f8 <__udivdi3+0x32c>
   8a75c:	3c010536 	bltu	r7,r16,8ab74 <__udivdi3+0x5a8>
   8a760:	9985403a 	cmpgeu	r2,r19,r6
   8a764:	0007883a 	mov	r3,zero
   8a768:	00004a06 	br	8a894 <__udivdi3+0x2c8>
   8a76c:	3000041e 	bne	r6,zero,8a780 <__udivdi3+0x1b4>
   8a770:	000b883a 	mov	r5,zero
   8a774:	01000044 	movi	r4,1
   8a778:	0080c040 	call	80c04 <__udivsi3>
   8a77c:	1023883a 	mov	r17,r2
   8a780:	00bfffd4 	movui	r2,65535
   8a784:	1440532e 	bgeu	r2,r17,8a8d4 <__udivdi3+0x308>
   8a788:	00804034 	movhi	r2,256
   8a78c:	10bfffc4 	addi	r2,r2,-1
   8a790:	1440f436 	bltu	r2,r17,8ab64 <__udivdi3+0x598>
   8a794:	00800404 	movi	r2,16
   8a798:	8886d83a 	srl	r3,r17,r2
   8a79c:	010002b4 	movhi	r4,10
   8a7a0:	21213704 	addi	r4,r4,-31524
   8a7a4:	20c7883a 	add	r3,r4,r3
   8a7a8:	18c00003 	ldbu	r3,0(r3)
   8a7ac:	1885883a 	add	r2,r3,r2
   8a7b0:	00c00804 	movi	r3,32
   8a7b4:	1887c83a 	sub	r3,r3,r2
   8a7b8:	1800a51e 	bne	r3,zero,8aa50 <__udivdi3+0x484>
   8a7bc:	882ad43a 	srli	r21,r17,16
   8a7c0:	8461c83a 	sub	r16,r16,r17
   8a7c4:	8d3fffcc 	andi	r20,r17,65535
   8a7c8:	00c00044 	movi	r3,1
   8a7cc:	a80b883a 	mov	r5,r21
   8a7d0:	8009883a 	mov	r4,r16
   8a7d4:	d8c00115 	stw	r3,4(sp)
   8a7d8:	0080c680 	call	80c68 <__umodsi3>
   8a7dc:	a80b883a 	mov	r5,r21
   8a7e0:	8009883a 	mov	r4,r16
   8a7e4:	1027883a 	mov	r19,r2
   8a7e8:	0080c040 	call	80c04 <__udivsi3>
   8a7ec:	a00b883a 	mov	r5,r20
   8a7f0:	1009883a 	mov	r4,r2
   8a7f4:	102d883a 	mov	r22,r2
   8a7f8:	008b18c0 	call	8b18c <__mulsi3>
   8a7fc:	9826943a 	slli	r19,r19,16
   8a800:	900ed43a 	srli	r7,r18,16
   8a804:	d8c00117 	ldw	r3,4(sp)
   8a808:	3cceb03a 	or	r7,r7,r19
   8a80c:	3880052e 	bgeu	r7,r2,8a824 <__udivdi3+0x258>
   8a810:	3c4f883a 	add	r7,r7,r17
   8a814:	b13fffc4 	addi	r4,r22,-1
   8a818:	3c400136 	bltu	r7,r17,8a820 <__udivdi3+0x254>
   8a81c:	3880e436 	bltu	r7,r2,8abb0 <__udivdi3+0x5e4>
   8a820:	202d883a 	mov	r22,r4
   8a824:	38a1c83a 	sub	r16,r7,r2
   8a828:	8009883a 	mov	r4,r16
   8a82c:	a80b883a 	mov	r5,r21
   8a830:	d8c00115 	stw	r3,4(sp)
   8a834:	0080c680 	call	80c68 <__umodsi3>
   8a838:	1027883a 	mov	r19,r2
   8a83c:	8009883a 	mov	r4,r16
   8a840:	a80b883a 	mov	r5,r21
   8a844:	9826943a 	slli	r19,r19,16
   8a848:	0080c040 	call	80c04 <__udivsi3>
   8a84c:	a00b883a 	mov	r5,r20
   8a850:	1009883a 	mov	r4,r2
   8a854:	94bfffcc 	andi	r18,r18,65535
   8a858:	1021883a 	mov	r16,r2
   8a85c:	94e4b03a 	or	r18,r18,r19
   8a860:	008b18c0 	call	8b18c <__mulsi3>
   8a864:	d8c00117 	ldw	r3,4(sp)
   8a868:	9080052e 	bgeu	r18,r2,8a880 <__udivdi3+0x2b4>
   8a86c:	8ca5883a 	add	r18,r17,r18
   8a870:	813fffc4 	addi	r4,r16,-1
   8a874:	9440ad36 	bltu	r18,r17,8ab2c <__udivdi3+0x560>
   8a878:	9080ac2e 	bgeu	r18,r2,8ab2c <__udivdi3+0x560>
   8a87c:	843fff84 	addi	r16,r16,-2
   8a880:	b004943a 	slli	r2,r22,16
   8a884:	1404b03a 	or	r2,r2,r16
   8a888:	00000206 	br	8a894 <__udivdi3+0x2c8>
   8a88c:	0007883a 	mov	r3,zero
   8a890:	0005883a 	mov	r2,zero
   8a894:	dfc00b17 	ldw	ra,44(sp)
   8a898:	df000a17 	ldw	fp,40(sp)
   8a89c:	ddc00917 	ldw	r23,36(sp)
   8a8a0:	dd800817 	ldw	r22,32(sp)
   8a8a4:	dd400717 	ldw	r21,28(sp)
   8a8a8:	dd000617 	ldw	r20,24(sp)
   8a8ac:	dcc00517 	ldw	r19,20(sp)
   8a8b0:	dc800417 	ldw	r18,16(sp)
   8a8b4:	dc400317 	ldw	r17,12(sp)
   8a8b8:	dc000217 	ldw	r16,8(sp)
   8a8bc:	dec00c04 	addi	sp,sp,48
   8a8c0:	f800283a 	ret
   8a8c4:	00803fc4 	movi	r2,255
   8a8c8:	11c5803a 	cmpltu	r2,r2,r7
   8a8cc:	100490fa 	slli	r2,r2,3
   8a8d0:	003f9906 	br	8a738 <__alt_data_end+0xfffcbf38>
   8a8d4:	00803fc4 	movi	r2,255
   8a8d8:	1445803a 	cmpltu	r2,r2,r17
   8a8dc:	100490fa 	slli	r2,r2,3
   8a8e0:	003fad06 	br	8a798 <__alt_data_end+0xfffcbf98>
   8a8e4:	00804034 	movhi	r2,256
   8a8e8:	10bfffc4 	addi	r2,r2,-1
   8a8ec:	11809f36 	bltu	r2,r6,8ab6c <__udivdi3+0x5a0>
   8a8f0:	00800404 	movi	r2,16
   8a8f4:	003f4c06 	br	8a628 <__alt_data_end+0xfffcbe28>
   8a8f8:	3dce983a 	sll	r7,r7,r23
   8a8fc:	30b8d83a 	srl	fp,r6,r2
   8a900:	80a2d83a 	srl	r17,r16,r2
   8a904:	35cc983a 	sll	r6,r6,r23
   8a908:	3f38b03a 	or	fp,r7,fp
   8a90c:	e024d43a 	srli	r18,fp,16
   8a910:	9884d83a 	srl	r2,r19,r2
   8a914:	85e0983a 	sll	r16,r16,r23
   8a918:	8809883a 	mov	r4,r17
   8a91c:	900b883a 	mov	r5,r18
   8a920:	d9800015 	stw	r6,0(sp)
   8a924:	1420b03a 	or	r16,r2,r16
   8a928:	0080c680 	call	80c68 <__umodsi3>
   8a92c:	900b883a 	mov	r5,r18
   8a930:	8809883a 	mov	r4,r17
   8a934:	1029883a 	mov	r20,r2
   8a938:	e5bfffcc 	andi	r22,fp,65535
   8a93c:	0080c040 	call	80c04 <__udivsi3>
   8a940:	100b883a 	mov	r5,r2
   8a944:	b009883a 	mov	r4,r22
   8a948:	102b883a 	mov	r21,r2
   8a94c:	008b18c0 	call	8b18c <__mulsi3>
   8a950:	a028943a 	slli	r20,r20,16
   8a954:	8006d43a 	srli	r3,r16,16
   8a958:	1d06b03a 	or	r3,r3,r20
   8a95c:	1880042e 	bgeu	r3,r2,8a970 <__udivdi3+0x3a4>
   8a960:	1f07883a 	add	r3,r3,fp
   8a964:	a93fffc4 	addi	r4,r21,-1
   8a968:	1f00892e 	bgeu	r3,fp,8ab90 <__udivdi3+0x5c4>
   8a96c:	202b883a 	mov	r21,r4
   8a970:	18a3c83a 	sub	r17,r3,r2
   8a974:	8809883a 	mov	r4,r17
   8a978:	900b883a 	mov	r5,r18
   8a97c:	0080c680 	call	80c68 <__umodsi3>
   8a980:	1029883a 	mov	r20,r2
   8a984:	8809883a 	mov	r4,r17
   8a988:	900b883a 	mov	r5,r18
   8a98c:	a028943a 	slli	r20,r20,16
   8a990:	0080c040 	call	80c04 <__udivsi3>
   8a994:	100b883a 	mov	r5,r2
   8a998:	b009883a 	mov	r4,r22
   8a99c:	843fffcc 	andi	r16,r16,65535
   8a9a0:	1023883a 	mov	r17,r2
   8a9a4:	8520b03a 	or	r16,r16,r20
   8a9a8:	008b18c0 	call	8b18c <__mulsi3>
   8a9ac:	8080042e 	bgeu	r16,r2,8a9c0 <__udivdi3+0x3f4>
   8a9b0:	8721883a 	add	r16,r16,fp
   8a9b4:	88ffffc4 	addi	r3,r17,-1
   8a9b8:	8700712e 	bgeu	r16,fp,8ab80 <__udivdi3+0x5b4>
   8a9bc:	1823883a 	mov	r17,r3
   8a9c0:	a80e943a 	slli	r7,r21,16
   8a9c4:	d8c00017 	ldw	r3,0(sp)
   8a9c8:	80a1c83a 	sub	r16,r16,r2
   8a9cc:	3c64b03a 	or	r18,r7,r17
   8a9d0:	1d3fffcc 	andi	r20,r3,65535
   8a9d4:	9022d43a 	srli	r17,r18,16
   8a9d8:	95bfffcc 	andi	r22,r18,65535
   8a9dc:	a00b883a 	mov	r5,r20
   8a9e0:	b009883a 	mov	r4,r22
   8a9e4:	182ad43a 	srli	r21,r3,16
   8a9e8:	008b18c0 	call	8b18c <__mulsi3>
   8a9ec:	a00b883a 	mov	r5,r20
   8a9f0:	8809883a 	mov	r4,r17
   8a9f4:	1039883a 	mov	fp,r2
   8a9f8:	008b18c0 	call	8b18c <__mulsi3>
   8a9fc:	8809883a 	mov	r4,r17
   8aa00:	a80b883a 	mov	r5,r21
   8aa04:	1029883a 	mov	r20,r2
   8aa08:	008b18c0 	call	8b18c <__mulsi3>
   8aa0c:	a80b883a 	mov	r5,r21
   8aa10:	b009883a 	mov	r4,r22
   8aa14:	1023883a 	mov	r17,r2
   8aa18:	008b18c0 	call	8b18c <__mulsi3>
   8aa1c:	e006d43a 	srli	r3,fp,16
   8aa20:	1505883a 	add	r2,r2,r20
   8aa24:	1887883a 	add	r3,r3,r2
   8aa28:	1d00022e 	bgeu	r3,r20,8aa34 <__udivdi3+0x468>
   8aa2c:	00800074 	movhi	r2,1
   8aa30:	88a3883a 	add	r17,r17,r2
   8aa34:	1804d43a 	srli	r2,r3,16
   8aa38:	1463883a 	add	r17,r2,r17
   8aa3c:	84404436 	bltu	r16,r17,8ab50 <__udivdi3+0x584>
   8aa40:	84403e26 	beq	r16,r17,8ab3c <__udivdi3+0x570>
   8aa44:	9005883a 	mov	r2,r18
   8aa48:	0007883a 	mov	r3,zero
   8aa4c:	003f9106 	br	8a894 <__alt_data_end+0xfffcc094>
   8aa50:	88e2983a 	sll	r17,r17,r3
   8aa54:	80aed83a 	srl	r23,r16,r2
   8aa58:	80e0983a 	sll	r16,r16,r3
   8aa5c:	882ad43a 	srli	r21,r17,16
   8aa60:	9884d83a 	srl	r2,r19,r2
   8aa64:	b809883a 	mov	r4,r23
   8aa68:	a80b883a 	mov	r5,r21
   8aa6c:	98e4983a 	sll	r18,r19,r3
   8aa70:	142cb03a 	or	r22,r2,r16
   8aa74:	0080c680 	call	80c68 <__umodsi3>
   8aa78:	b809883a 	mov	r4,r23
   8aa7c:	a80b883a 	mov	r5,r21
   8aa80:	1027883a 	mov	r19,r2
   8aa84:	8d3fffcc 	andi	r20,r17,65535
   8aa88:	0080c040 	call	80c04 <__udivsi3>
   8aa8c:	a009883a 	mov	r4,r20
   8aa90:	100b883a 	mov	r5,r2
   8aa94:	102f883a 	mov	r23,r2
   8aa98:	008b18c0 	call	8b18c <__mulsi3>
   8aa9c:	9826943a 	slli	r19,r19,16
   8aaa0:	b008d43a 	srli	r4,r22,16
   8aaa4:	24c8b03a 	or	r4,r4,r19
   8aaa8:	2080062e 	bgeu	r4,r2,8aac4 <__udivdi3+0x4f8>
   8aaac:	2449883a 	add	r4,r4,r17
   8aab0:	b8ffffc4 	addi	r3,r23,-1
   8aab4:	24403c36 	bltu	r4,r17,8aba8 <__udivdi3+0x5dc>
   8aab8:	20803b2e 	bgeu	r4,r2,8aba8 <__udivdi3+0x5dc>
   8aabc:	bdffff84 	addi	r23,r23,-2
   8aac0:	2449883a 	add	r4,r4,r17
   8aac4:	20a1c83a 	sub	r16,r4,r2
   8aac8:	a80b883a 	mov	r5,r21
   8aacc:	8009883a 	mov	r4,r16
   8aad0:	0080c680 	call	80c68 <__umodsi3>
   8aad4:	a80b883a 	mov	r5,r21
   8aad8:	8009883a 	mov	r4,r16
   8aadc:	1027883a 	mov	r19,r2
   8aae0:	0080c040 	call	80c04 <__udivsi3>
   8aae4:	a009883a 	mov	r4,r20
   8aae8:	100b883a 	mov	r5,r2
   8aaec:	9826943a 	slli	r19,r19,16
   8aaf0:	1039883a 	mov	fp,r2
   8aaf4:	008b18c0 	call	8b18c <__mulsi3>
   8aaf8:	b13fffcc 	andi	r4,r22,65535
   8aafc:	24c8b03a 	or	r4,r4,r19
   8ab00:	2080062e 	bgeu	r4,r2,8ab1c <__udivdi3+0x550>
   8ab04:	2449883a 	add	r4,r4,r17
   8ab08:	e0ffffc4 	addi	r3,fp,-1
   8ab0c:	24402436 	bltu	r4,r17,8aba0 <__udivdi3+0x5d4>
   8ab10:	2080232e 	bgeu	r4,r2,8aba0 <__udivdi3+0x5d4>
   8ab14:	e73fff84 	addi	fp,fp,-2
   8ab18:	2449883a 	add	r4,r4,r17
   8ab1c:	b82e943a 	slli	r23,r23,16
   8ab20:	20a1c83a 	sub	r16,r4,r2
   8ab24:	bf06b03a 	or	r3,r23,fp
   8ab28:	003f2806 	br	8a7cc <__alt_data_end+0xfffcbfcc>
   8ab2c:	2021883a 	mov	r16,r4
   8ab30:	003f5306 	br	8a880 <__alt_data_end+0xfffcc080>
   8ab34:	1821883a 	mov	r16,r3
   8ab38:	003ef406 	br	8a70c <__alt_data_end+0xfffcbf0c>
   8ab3c:	1806943a 	slli	r3,r3,16
   8ab40:	9de6983a 	sll	r19,r19,r23
   8ab44:	e73fffcc 	andi	fp,fp,65535
   8ab48:	1f07883a 	add	r3,r3,fp
   8ab4c:	98ffbd2e 	bgeu	r19,r3,8aa44 <__alt_data_end+0xfffcc244>
   8ab50:	90bfffc4 	addi	r2,r18,-1
   8ab54:	0007883a 	mov	r3,zero
   8ab58:	003f4e06 	br	8a894 <__alt_data_end+0xfffcc094>
   8ab5c:	00800604 	movi	r2,24
   8ab60:	003ef506 	br	8a738 <__alt_data_end+0xfffcbf38>
   8ab64:	00800604 	movi	r2,24
   8ab68:	003f0b06 	br	8a798 <__alt_data_end+0xfffcbf98>
   8ab6c:	00800604 	movi	r2,24
   8ab70:	003ead06 	br	8a628 <__alt_data_end+0xfffcbe28>
   8ab74:	0007883a 	mov	r3,zero
   8ab78:	00800044 	movi	r2,1
   8ab7c:	003f4506 	br	8a894 <__alt_data_end+0xfffcc094>
   8ab80:	80bf8e2e 	bgeu	r16,r2,8a9bc <__alt_data_end+0xfffcc1bc>
   8ab84:	8c7fff84 	addi	r17,r17,-2
   8ab88:	8721883a 	add	r16,r16,fp
   8ab8c:	003f8c06 	br	8a9c0 <__alt_data_end+0xfffcc1c0>
   8ab90:	18bf762e 	bgeu	r3,r2,8a96c <__alt_data_end+0xfffcc16c>
   8ab94:	ad7fff84 	addi	r21,r21,-2
   8ab98:	1f07883a 	add	r3,r3,fp
   8ab9c:	003f7406 	br	8a970 <__alt_data_end+0xfffcc170>
   8aba0:	1839883a 	mov	fp,r3
   8aba4:	003fdd06 	br	8ab1c <__alt_data_end+0xfffcc31c>
   8aba8:	182f883a 	mov	r23,r3
   8abac:	003fc506 	br	8aac4 <__alt_data_end+0xfffcc2c4>
   8abb0:	b5bfff84 	addi	r22,r22,-2
   8abb4:	3c4f883a 	add	r7,r7,r17
   8abb8:	003f1a06 	br	8a824 <__alt_data_end+0xfffcc024>
   8abbc:	b5bfff84 	addi	r22,r22,-2
   8abc0:	1c47883a 	add	r3,r3,r17
   8abc4:	003ebc06 	br	8a6b8 <__alt_data_end+0xfffcbeb8>

0008abc8 <__umoddi3>:
   8abc8:	defff304 	addi	sp,sp,-52
   8abcc:	df000b15 	stw	fp,44(sp)
   8abd0:	dc400415 	stw	r17,16(sp)
   8abd4:	dc000315 	stw	r16,12(sp)
   8abd8:	dfc00c15 	stw	ra,48(sp)
   8abdc:	ddc00a15 	stw	r23,40(sp)
   8abe0:	dd800915 	stw	r22,36(sp)
   8abe4:	dd400815 	stw	r21,32(sp)
   8abe8:	dd000715 	stw	r20,28(sp)
   8abec:	dcc00615 	stw	r19,24(sp)
   8abf0:	dc800515 	stw	r18,20(sp)
   8abf4:	2021883a 	mov	r16,r4
   8abf8:	2823883a 	mov	r17,r5
   8abfc:	2839883a 	mov	fp,r5
   8ac00:	3800401e 	bne	r7,zero,8ad04 <__umoddi3+0x13c>
   8ac04:	3027883a 	mov	r19,r6
   8ac08:	2029883a 	mov	r20,r4
   8ac0c:	2980552e 	bgeu	r5,r6,8ad64 <__umoddi3+0x19c>
   8ac10:	00bfffd4 	movui	r2,65535
   8ac14:	1180a236 	bltu	r2,r6,8aea0 <__umoddi3+0x2d8>
   8ac18:	01003fc4 	movi	r4,255
   8ac1c:	2189803a 	cmpltu	r4,r4,r6
   8ac20:	200890fa 	slli	r4,r4,3
   8ac24:	3104d83a 	srl	r2,r6,r4
   8ac28:	00c002b4 	movhi	r3,10
   8ac2c:	18e13704 	addi	r3,r3,-31524
   8ac30:	1885883a 	add	r2,r3,r2
   8ac34:	10c00003 	ldbu	r3,0(r2)
   8ac38:	00800804 	movi	r2,32
   8ac3c:	1909883a 	add	r4,r3,r4
   8ac40:	1125c83a 	sub	r18,r2,r4
   8ac44:	90000526 	beq	r18,zero,8ac5c <__umoddi3+0x94>
   8ac48:	8ca2983a 	sll	r17,r17,r18
   8ac4c:	8108d83a 	srl	r4,r16,r4
   8ac50:	34a6983a 	sll	r19,r6,r18
   8ac54:	84a8983a 	sll	r20,r16,r18
   8ac58:	2478b03a 	or	fp,r4,r17
   8ac5c:	982cd43a 	srli	r22,r19,16
   8ac60:	e009883a 	mov	r4,fp
   8ac64:	9dffffcc 	andi	r23,r19,65535
   8ac68:	b00b883a 	mov	r5,r22
   8ac6c:	0080c680 	call	80c68 <__umodsi3>
   8ac70:	b00b883a 	mov	r5,r22
   8ac74:	e009883a 	mov	r4,fp
   8ac78:	102b883a 	mov	r21,r2
   8ac7c:	0080c040 	call	80c04 <__udivsi3>
   8ac80:	100b883a 	mov	r5,r2
   8ac84:	b809883a 	mov	r4,r23
   8ac88:	008b18c0 	call	8b18c <__mulsi3>
   8ac8c:	a82a943a 	slli	r21,r21,16
   8ac90:	a006d43a 	srli	r3,r20,16
   8ac94:	1d46b03a 	or	r3,r3,r21
   8ac98:	1880032e 	bgeu	r3,r2,8aca8 <__umoddi3+0xe0>
   8ac9c:	1cc7883a 	add	r3,r3,r19
   8aca0:	1cc00136 	bltu	r3,r19,8aca8 <__umoddi3+0xe0>
   8aca4:	18813136 	bltu	r3,r2,8b16c <__umoddi3+0x5a4>
   8aca8:	18a1c83a 	sub	r16,r3,r2
   8acac:	b00b883a 	mov	r5,r22
   8acb0:	8009883a 	mov	r4,r16
   8acb4:	0080c680 	call	80c68 <__umodsi3>
   8acb8:	b00b883a 	mov	r5,r22
   8acbc:	8009883a 	mov	r4,r16
   8acc0:	1023883a 	mov	r17,r2
   8acc4:	0080c040 	call	80c04 <__udivsi3>
   8acc8:	100b883a 	mov	r5,r2
   8accc:	b809883a 	mov	r4,r23
   8acd0:	8822943a 	slli	r17,r17,16
   8acd4:	008b18c0 	call	8b18c <__mulsi3>
   8acd8:	a0ffffcc 	andi	r3,r20,65535
   8acdc:	1c46b03a 	or	r3,r3,r17
   8ace0:	1880042e 	bgeu	r3,r2,8acf4 <__umoddi3+0x12c>
   8ace4:	1cc7883a 	add	r3,r3,r19
   8ace8:	1cc00236 	bltu	r3,r19,8acf4 <__umoddi3+0x12c>
   8acec:	1880012e 	bgeu	r3,r2,8acf4 <__umoddi3+0x12c>
   8acf0:	1cc7883a 	add	r3,r3,r19
   8acf4:	1885c83a 	sub	r2,r3,r2
   8acf8:	1484d83a 	srl	r2,r2,r18
   8acfc:	0007883a 	mov	r3,zero
   8ad00:	00005306 	br	8ae50 <__umoddi3+0x288>
   8ad04:	29c05036 	bltu	r5,r7,8ae48 <__umoddi3+0x280>
   8ad08:	00bfffd4 	movui	r2,65535
   8ad0c:	11c05c2e 	bgeu	r2,r7,8ae80 <__umoddi3+0x2b8>
   8ad10:	00804034 	movhi	r2,256
   8ad14:	10bfffc4 	addi	r2,r2,-1
   8ad18:	11c10636 	bltu	r2,r7,8b134 <__umoddi3+0x56c>
   8ad1c:	01000404 	movi	r4,16
   8ad20:	3904d83a 	srl	r2,r7,r4
   8ad24:	00c002b4 	movhi	r3,10
   8ad28:	18e13704 	addi	r3,r3,-31524
   8ad2c:	1885883a 	add	r2,r3,r2
   8ad30:	14c00003 	ldbu	r19,0(r2)
   8ad34:	00c00804 	movi	r3,32
   8ad38:	9927883a 	add	r19,r19,r4
   8ad3c:	1ce9c83a 	sub	r20,r3,r19
   8ad40:	a0005c1e 	bne	r20,zero,8aeb4 <__umoddi3+0x2ec>
   8ad44:	3c400136 	bltu	r7,r17,8ad4c <__umoddi3+0x184>
   8ad48:	81810a36 	bltu	r16,r6,8b174 <__umoddi3+0x5ac>
   8ad4c:	8185c83a 	sub	r2,r16,r6
   8ad50:	89e3c83a 	sub	r17,r17,r7
   8ad54:	8089803a 	cmpltu	r4,r16,r2
   8ad58:	8939c83a 	sub	fp,r17,r4
   8ad5c:	e007883a 	mov	r3,fp
   8ad60:	00003b06 	br	8ae50 <__umoddi3+0x288>
   8ad64:	3000041e 	bne	r6,zero,8ad78 <__umoddi3+0x1b0>
   8ad68:	000b883a 	mov	r5,zero
   8ad6c:	01000044 	movi	r4,1
   8ad70:	0080c040 	call	80c04 <__udivsi3>
   8ad74:	1027883a 	mov	r19,r2
   8ad78:	00bfffd4 	movui	r2,65535
   8ad7c:	14c0442e 	bgeu	r2,r19,8ae90 <__umoddi3+0x2c8>
   8ad80:	00804034 	movhi	r2,256
   8ad84:	10bfffc4 	addi	r2,r2,-1
   8ad88:	14c0ec36 	bltu	r2,r19,8b13c <__umoddi3+0x574>
   8ad8c:	00800404 	movi	r2,16
   8ad90:	9886d83a 	srl	r3,r19,r2
   8ad94:	010002b4 	movhi	r4,10
   8ad98:	21213704 	addi	r4,r4,-31524
   8ad9c:	20c7883a 	add	r3,r4,r3
   8ada0:	18c00003 	ldbu	r3,0(r3)
   8ada4:	1887883a 	add	r3,r3,r2
   8ada8:	00800804 	movi	r2,32
   8adac:	10e5c83a 	sub	r18,r2,r3
   8adb0:	9000ab1e 	bne	r18,zero,8b060 <__umoddi3+0x498>
   8adb4:	982cd43a 	srli	r22,r19,16
   8adb8:	8ce3c83a 	sub	r17,r17,r19
   8adbc:	9dffffcc 	andi	r23,r19,65535
   8adc0:	b00b883a 	mov	r5,r22
   8adc4:	8809883a 	mov	r4,r17
   8adc8:	0080c680 	call	80c68 <__umodsi3>
   8adcc:	b00b883a 	mov	r5,r22
   8add0:	8809883a 	mov	r4,r17
   8add4:	102b883a 	mov	r21,r2
   8add8:	0080c040 	call	80c04 <__udivsi3>
   8addc:	b80b883a 	mov	r5,r23
   8ade0:	1009883a 	mov	r4,r2
   8ade4:	008b18c0 	call	8b18c <__mulsi3>
   8ade8:	a82a943a 	slli	r21,r21,16
   8adec:	a006d43a 	srli	r3,r20,16
   8adf0:	1d46b03a 	or	r3,r3,r21
   8adf4:	1880042e 	bgeu	r3,r2,8ae08 <__umoddi3+0x240>
   8adf8:	1cc7883a 	add	r3,r3,r19
   8adfc:	1cc00236 	bltu	r3,r19,8ae08 <__umoddi3+0x240>
   8ae00:	1880012e 	bgeu	r3,r2,8ae08 <__umoddi3+0x240>
   8ae04:	1cc7883a 	add	r3,r3,r19
   8ae08:	18a1c83a 	sub	r16,r3,r2
   8ae0c:	b00b883a 	mov	r5,r22
   8ae10:	8009883a 	mov	r4,r16
   8ae14:	0080c680 	call	80c68 <__umodsi3>
   8ae18:	1023883a 	mov	r17,r2
   8ae1c:	b00b883a 	mov	r5,r22
   8ae20:	8009883a 	mov	r4,r16
   8ae24:	0080c040 	call	80c04 <__udivsi3>
   8ae28:	8822943a 	slli	r17,r17,16
   8ae2c:	b80b883a 	mov	r5,r23
   8ae30:	1009883a 	mov	r4,r2
   8ae34:	008b18c0 	call	8b18c <__mulsi3>
   8ae38:	a53fffcc 	andi	r20,r20,65535
   8ae3c:	a446b03a 	or	r3,r20,r17
   8ae40:	18bfac2e 	bgeu	r3,r2,8acf4 <__alt_data_end+0xfffcc4f4>
   8ae44:	003fa706 	br	8ace4 <__alt_data_end+0xfffcc4e4>
   8ae48:	2005883a 	mov	r2,r4
   8ae4c:	2807883a 	mov	r3,r5
   8ae50:	dfc00c17 	ldw	ra,48(sp)
   8ae54:	df000b17 	ldw	fp,44(sp)
   8ae58:	ddc00a17 	ldw	r23,40(sp)
   8ae5c:	dd800917 	ldw	r22,36(sp)
   8ae60:	dd400817 	ldw	r21,32(sp)
   8ae64:	dd000717 	ldw	r20,28(sp)
   8ae68:	dcc00617 	ldw	r19,24(sp)
   8ae6c:	dc800517 	ldw	r18,20(sp)
   8ae70:	dc400417 	ldw	r17,16(sp)
   8ae74:	dc000317 	ldw	r16,12(sp)
   8ae78:	dec00d04 	addi	sp,sp,52
   8ae7c:	f800283a 	ret
   8ae80:	04c03fc4 	movi	r19,255
   8ae84:	99c9803a 	cmpltu	r4,r19,r7
   8ae88:	200890fa 	slli	r4,r4,3
   8ae8c:	003fa406 	br	8ad20 <__alt_data_end+0xfffcc520>
   8ae90:	00803fc4 	movi	r2,255
   8ae94:	14c5803a 	cmpltu	r2,r2,r19
   8ae98:	100490fa 	slli	r2,r2,3
   8ae9c:	003fbc06 	br	8ad90 <__alt_data_end+0xfffcc590>
   8aea0:	00804034 	movhi	r2,256
   8aea4:	10bfffc4 	addi	r2,r2,-1
   8aea8:	1180a636 	bltu	r2,r6,8b144 <__umoddi3+0x57c>
   8aeac:	01000404 	movi	r4,16
   8aeb0:	003f5c06 	br	8ac24 <__alt_data_end+0xfffcc424>
   8aeb4:	3d0e983a 	sll	r7,r7,r20
   8aeb8:	34ead83a 	srl	r21,r6,r19
   8aebc:	8cc6d83a 	srl	r3,r17,r19
   8aec0:	8d10983a 	sll	r8,r17,r20
   8aec4:	3d6ab03a 	or	r21,r7,r21
   8aec8:	a82cd43a 	srli	r22,r21,16
   8aecc:	84e2d83a 	srl	r17,r16,r19
   8aed0:	1809883a 	mov	r4,r3
   8aed4:	b00b883a 	mov	r5,r22
   8aed8:	8a22b03a 	or	r17,r17,r8
   8aedc:	3524983a 	sll	r18,r6,r20
   8aee0:	dc400015 	stw	r17,0(sp)
   8aee4:	d8c00115 	stw	r3,4(sp)
   8aee8:	0080c680 	call	80c68 <__umodsi3>
   8aeec:	d8c00117 	ldw	r3,4(sp)
   8aef0:	b00b883a 	mov	r5,r22
   8aef4:	1039883a 	mov	fp,r2
   8aef8:	1809883a 	mov	r4,r3
   8aefc:	0080c040 	call	80c04 <__udivsi3>
   8af00:	adffffcc 	andi	r23,r21,65535
   8af04:	100b883a 	mov	r5,r2
   8af08:	b809883a 	mov	r4,r23
   8af0c:	1023883a 	mov	r17,r2
   8af10:	008b18c0 	call	8b18c <__mulsi3>
   8af14:	d9400017 	ldw	r5,0(sp)
   8af18:	e008943a 	slli	r4,fp,16
   8af1c:	8520983a 	sll	r16,r16,r20
   8af20:	2806d43a 	srli	r3,r5,16
   8af24:	1906b03a 	or	r3,r3,r4
   8af28:	1880042e 	bgeu	r3,r2,8af3c <__umoddi3+0x374>
   8af2c:	1d47883a 	add	r3,r3,r21
   8af30:	893fffc4 	addi	r4,r17,-1
   8af34:	1d40892e 	bgeu	r3,r21,8b15c <__umoddi3+0x594>
   8af38:	2023883a 	mov	r17,r4
   8af3c:	18b9c83a 	sub	fp,r3,r2
   8af40:	b00b883a 	mov	r5,r22
   8af44:	e009883a 	mov	r4,fp
   8af48:	0080c680 	call	80c68 <__umodsi3>
   8af4c:	b00b883a 	mov	r5,r22
   8af50:	e009883a 	mov	r4,fp
   8af54:	d8800215 	stw	r2,8(sp)
   8af58:	0080c040 	call	80c04 <__udivsi3>
   8af5c:	100b883a 	mov	r5,r2
   8af60:	b809883a 	mov	r4,r23
   8af64:	102d883a 	mov	r22,r2
   8af68:	008b18c0 	call	8b18c <__mulsi3>
   8af6c:	d9800217 	ldw	r6,8(sp)
   8af70:	d8c00017 	ldw	r3,0(sp)
   8af74:	300c943a 	slli	r6,r6,16
   8af78:	1a3fffcc 	andi	r8,r3,65535
   8af7c:	4190b03a 	or	r8,r8,r6
   8af80:	4080042e 	bgeu	r8,r2,8af94 <__umoddi3+0x3cc>
   8af84:	4551883a 	add	r8,r8,r21
   8af88:	b0ffffc4 	addi	r3,r22,-1
   8af8c:	45406f2e 	bgeu	r8,r21,8b14c <__umoddi3+0x584>
   8af90:	182d883a 	mov	r22,r3
   8af94:	880e943a 	slli	r7,r17,16
   8af98:	9006d43a 	srli	r3,r18,16
   8af9c:	91bfffcc 	andi	r6,r18,65535
   8afa0:	3dacb03a 	or	r22,r7,r22
   8afa4:	b02ed43a 	srli	r23,r22,16
   8afa8:	b5bfffcc 	andi	r22,r22,65535
   8afac:	300b883a 	mov	r5,r6
   8afb0:	b009883a 	mov	r4,r22
   8afb4:	40a3c83a 	sub	r17,r8,r2
   8afb8:	d8c00115 	stw	r3,4(sp)
   8afbc:	d9800215 	stw	r6,8(sp)
   8afc0:	008b18c0 	call	8b18c <__mulsi3>
   8afc4:	d9800217 	ldw	r6,8(sp)
   8afc8:	b809883a 	mov	r4,r23
   8afcc:	1039883a 	mov	fp,r2
   8afd0:	300b883a 	mov	r5,r6
   8afd4:	008b18c0 	call	8b18c <__mulsi3>
   8afd8:	d8c00117 	ldw	r3,4(sp)
   8afdc:	b809883a 	mov	r4,r23
   8afe0:	d8800215 	stw	r2,8(sp)
   8afe4:	180b883a 	mov	r5,r3
   8afe8:	008b18c0 	call	8b18c <__mulsi3>
   8afec:	d8c00117 	ldw	r3,4(sp)
   8aff0:	b009883a 	mov	r4,r22
   8aff4:	102f883a 	mov	r23,r2
   8aff8:	180b883a 	mov	r5,r3
   8affc:	008b18c0 	call	8b18c <__mulsi3>
   8b000:	d9800217 	ldw	r6,8(sp)
   8b004:	e006d43a 	srli	r3,fp,16
   8b008:	1185883a 	add	r2,r2,r6
   8b00c:	1885883a 	add	r2,r3,r2
   8b010:	1180022e 	bgeu	r2,r6,8b01c <__umoddi3+0x454>
   8b014:	00c00074 	movhi	r3,1
   8b018:	b8ef883a 	add	r23,r23,r3
   8b01c:	1006d43a 	srli	r3,r2,16
   8b020:	1004943a 	slli	r2,r2,16
   8b024:	e73fffcc 	andi	fp,fp,65535
   8b028:	1dc7883a 	add	r3,r3,r23
   8b02c:	1739883a 	add	fp,r2,fp
   8b030:	88c03a36 	bltu	r17,r3,8b11c <__umoddi3+0x554>
   8b034:	88c05126 	beq	r17,r3,8b17c <__umoddi3+0x5b4>
   8b038:	88c9c83a 	sub	r4,r17,r3
   8b03c:	e00f883a 	mov	r7,fp
   8b040:	81cfc83a 	sub	r7,r16,r7
   8b044:	81c7803a 	cmpltu	r3,r16,r7
   8b048:	20c7c83a 	sub	r3,r4,r3
   8b04c:	1cc4983a 	sll	r2,r3,r19
   8b050:	3d0ed83a 	srl	r7,r7,r20
   8b054:	1d06d83a 	srl	r3,r3,r20
   8b058:	11c4b03a 	or	r2,r2,r7
   8b05c:	003f7c06 	br	8ae50 <__alt_data_end+0xfffcc650>
   8b060:	9ca6983a 	sll	r19,r19,r18
   8b064:	88f8d83a 	srl	fp,r17,r3
   8b068:	80c4d83a 	srl	r2,r16,r3
   8b06c:	982cd43a 	srli	r22,r19,16
   8b070:	8ca2983a 	sll	r17,r17,r18
   8b074:	e009883a 	mov	r4,fp
   8b078:	b00b883a 	mov	r5,r22
   8b07c:	146ab03a 	or	r21,r2,r17
   8b080:	0080c680 	call	80c68 <__umodsi3>
   8b084:	b00b883a 	mov	r5,r22
   8b088:	e009883a 	mov	r4,fp
   8b08c:	1029883a 	mov	r20,r2
   8b090:	9dffffcc 	andi	r23,r19,65535
   8b094:	0080c040 	call	80c04 <__udivsi3>
   8b098:	b809883a 	mov	r4,r23
   8b09c:	100b883a 	mov	r5,r2
   8b0a0:	008b18c0 	call	8b18c <__mulsi3>
   8b0a4:	a008943a 	slli	r4,r20,16
   8b0a8:	a806d43a 	srli	r3,r21,16
   8b0ac:	84a8983a 	sll	r20,r16,r18
   8b0b0:	1906b03a 	or	r3,r3,r4
   8b0b4:	1880042e 	bgeu	r3,r2,8b0c8 <__umoddi3+0x500>
   8b0b8:	1cc7883a 	add	r3,r3,r19
   8b0bc:	1cc00236 	bltu	r3,r19,8b0c8 <__umoddi3+0x500>
   8b0c0:	1880012e 	bgeu	r3,r2,8b0c8 <__umoddi3+0x500>
   8b0c4:	1cc7883a 	add	r3,r3,r19
   8b0c8:	18a3c83a 	sub	r17,r3,r2
   8b0cc:	b00b883a 	mov	r5,r22
   8b0d0:	8809883a 	mov	r4,r17
   8b0d4:	0080c680 	call	80c68 <__umodsi3>
   8b0d8:	b00b883a 	mov	r5,r22
   8b0dc:	8809883a 	mov	r4,r17
   8b0e0:	1021883a 	mov	r16,r2
   8b0e4:	0080c040 	call	80c04 <__udivsi3>
   8b0e8:	100b883a 	mov	r5,r2
   8b0ec:	b809883a 	mov	r4,r23
   8b0f0:	8020943a 	slli	r16,r16,16
   8b0f4:	008b18c0 	call	8b18c <__mulsi3>
   8b0f8:	a8ffffcc 	andi	r3,r21,65535
   8b0fc:	1c06b03a 	or	r3,r3,r16
   8b100:	1880042e 	bgeu	r3,r2,8b114 <__umoddi3+0x54c>
   8b104:	1cc7883a 	add	r3,r3,r19
   8b108:	1cc00236 	bltu	r3,r19,8b114 <__umoddi3+0x54c>
   8b10c:	1880012e 	bgeu	r3,r2,8b114 <__umoddi3+0x54c>
   8b110:	1cc7883a 	add	r3,r3,r19
   8b114:	18a3c83a 	sub	r17,r3,r2
   8b118:	003f2906 	br	8adc0 <__alt_data_end+0xfffcc5c0>
   8b11c:	e48fc83a 	sub	r7,fp,r18
   8b120:	1d49c83a 	sub	r4,r3,r21
   8b124:	e1f9803a 	cmpltu	fp,fp,r7
   8b128:	2739c83a 	sub	fp,r4,fp
   8b12c:	8f09c83a 	sub	r4,r17,fp
   8b130:	003fc306 	br	8b040 <__alt_data_end+0xfffcc840>
   8b134:	01000604 	movi	r4,24
   8b138:	003ef906 	br	8ad20 <__alt_data_end+0xfffcc520>
   8b13c:	00800604 	movi	r2,24
   8b140:	003f1306 	br	8ad90 <__alt_data_end+0xfffcc590>
   8b144:	01000604 	movi	r4,24
   8b148:	003eb606 	br	8ac24 <__alt_data_end+0xfffcc424>
   8b14c:	40bf902e 	bgeu	r8,r2,8af90 <__alt_data_end+0xfffcc790>
   8b150:	b5bfff84 	addi	r22,r22,-2
   8b154:	4551883a 	add	r8,r8,r21
   8b158:	003f8e06 	br	8af94 <__alt_data_end+0xfffcc794>
   8b15c:	18bf762e 	bgeu	r3,r2,8af38 <__alt_data_end+0xfffcc738>
   8b160:	8c7fff84 	addi	r17,r17,-2
   8b164:	1d47883a 	add	r3,r3,r21
   8b168:	003f7406 	br	8af3c <__alt_data_end+0xfffcc73c>
   8b16c:	1cc7883a 	add	r3,r3,r19
   8b170:	003ecd06 	br	8aca8 <__alt_data_end+0xfffcc4a8>
   8b174:	8005883a 	mov	r2,r16
   8b178:	003ef806 	br	8ad5c <__alt_data_end+0xfffcc55c>
   8b17c:	873fe736 	bltu	r16,fp,8b11c <__alt_data_end+0xfffcc91c>
   8b180:	e00f883a 	mov	r7,fp
   8b184:	0009883a 	mov	r4,zero
   8b188:	003fad06 	br	8b040 <__alt_data_end+0xfffcc840>

0008b18c <__mulsi3>:
   8b18c:	0005883a 	mov	r2,zero
   8b190:	20000726 	beq	r4,zero,8b1b0 <__mulsi3+0x24>
   8b194:	20c0004c 	andi	r3,r4,1
   8b198:	2008d07a 	srli	r4,r4,1
   8b19c:	18000126 	beq	r3,zero,8b1a4 <__mulsi3+0x18>
   8b1a0:	1145883a 	add	r2,r2,r5
   8b1a4:	294b883a 	add	r5,r5,r5
   8b1a8:	203ffa1e 	bne	r4,zero,8b194 <__alt_data_end+0xfffcc994>
   8b1ac:	f800283a 	ret
   8b1b0:	f800283a 	ret

0008b1b4 <__adddf3>:
   8b1b4:	02c00434 	movhi	r11,16
   8b1b8:	5affffc4 	addi	r11,r11,-1
   8b1bc:	2806d7fa 	srli	r3,r5,31
   8b1c0:	2ad4703a 	and	r10,r5,r11
   8b1c4:	3ad2703a 	and	r9,r7,r11
   8b1c8:	3804d53a 	srli	r2,r7,20
   8b1cc:	3018d77a 	srli	r12,r6,29
   8b1d0:	280ad53a 	srli	r5,r5,20
   8b1d4:	501490fa 	slli	r10,r10,3
   8b1d8:	2010d77a 	srli	r8,r4,29
   8b1dc:	481290fa 	slli	r9,r9,3
   8b1e0:	380ed7fa 	srli	r7,r7,31
   8b1e4:	defffb04 	addi	sp,sp,-20
   8b1e8:	dc800215 	stw	r18,8(sp)
   8b1ec:	dc400115 	stw	r17,4(sp)
   8b1f0:	dc000015 	stw	r16,0(sp)
   8b1f4:	dfc00415 	stw	ra,16(sp)
   8b1f8:	dcc00315 	stw	r19,12(sp)
   8b1fc:	1c803fcc 	andi	r18,r3,255
   8b200:	2c01ffcc 	andi	r16,r5,2047
   8b204:	5210b03a 	or	r8,r10,r8
   8b208:	202290fa 	slli	r17,r4,3
   8b20c:	1081ffcc 	andi	r2,r2,2047
   8b210:	4b12b03a 	or	r9,r9,r12
   8b214:	300c90fa 	slli	r6,r6,3
   8b218:	91c07526 	beq	r18,r7,8b3f0 <__adddf3+0x23c>
   8b21c:	8087c83a 	sub	r3,r16,r2
   8b220:	00c0ab0e 	bge	zero,r3,8b4d0 <__adddf3+0x31c>
   8b224:	10002a1e 	bne	r2,zero,8b2d0 <__adddf3+0x11c>
   8b228:	4984b03a 	or	r2,r9,r6
   8b22c:	1000961e 	bne	r2,zero,8b488 <__adddf3+0x2d4>
   8b230:	888001cc 	andi	r2,r17,7
   8b234:	10000726 	beq	r2,zero,8b254 <__adddf3+0xa0>
   8b238:	888003cc 	andi	r2,r17,15
   8b23c:	00c00104 	movi	r3,4
   8b240:	10c00426 	beq	r2,r3,8b254 <__adddf3+0xa0>
   8b244:	88c7883a 	add	r3,r17,r3
   8b248:	1c63803a 	cmpltu	r17,r3,r17
   8b24c:	4451883a 	add	r8,r8,r17
   8b250:	1823883a 	mov	r17,r3
   8b254:	4080202c 	andhi	r2,r8,128
   8b258:	10005926 	beq	r2,zero,8b3c0 <__adddf3+0x20c>
   8b25c:	84000044 	addi	r16,r16,1
   8b260:	0081ffc4 	movi	r2,2047
   8b264:	8080ba26 	beq	r16,r2,8b550 <__adddf3+0x39c>
   8b268:	00bfe034 	movhi	r2,65408
   8b26c:	10bfffc4 	addi	r2,r2,-1
   8b270:	4090703a 	and	r8,r8,r2
   8b274:	4004977a 	slli	r2,r8,29
   8b278:	4010927a 	slli	r8,r8,9
   8b27c:	8822d0fa 	srli	r17,r17,3
   8b280:	8401ffcc 	andi	r16,r16,2047
   8b284:	4010d33a 	srli	r8,r8,12
   8b288:	9007883a 	mov	r3,r18
   8b28c:	1444b03a 	or	r2,r2,r17
   8b290:	8401ffcc 	andi	r16,r16,2047
   8b294:	8020953a 	slli	r16,r16,20
   8b298:	18c03fcc 	andi	r3,r3,255
   8b29c:	01000434 	movhi	r4,16
   8b2a0:	213fffc4 	addi	r4,r4,-1
   8b2a4:	180697fa 	slli	r3,r3,31
   8b2a8:	4110703a 	and	r8,r8,r4
   8b2ac:	4410b03a 	or	r8,r8,r16
   8b2b0:	40c6b03a 	or	r3,r8,r3
   8b2b4:	dfc00417 	ldw	ra,16(sp)
   8b2b8:	dcc00317 	ldw	r19,12(sp)
   8b2bc:	dc800217 	ldw	r18,8(sp)
   8b2c0:	dc400117 	ldw	r17,4(sp)
   8b2c4:	dc000017 	ldw	r16,0(sp)
   8b2c8:	dec00504 	addi	sp,sp,20
   8b2cc:	f800283a 	ret
   8b2d0:	0081ffc4 	movi	r2,2047
   8b2d4:	80bfd626 	beq	r16,r2,8b230 <__alt_data_end+0xfffcca30>
   8b2d8:	4a402034 	orhi	r9,r9,128
   8b2dc:	00800e04 	movi	r2,56
   8b2e0:	10c09f16 	blt	r2,r3,8b560 <__adddf3+0x3ac>
   8b2e4:	008007c4 	movi	r2,31
   8b2e8:	10c0c216 	blt	r2,r3,8b5f4 <__adddf3+0x440>
   8b2ec:	00800804 	movi	r2,32
   8b2f0:	10c5c83a 	sub	r2,r2,r3
   8b2f4:	488a983a 	sll	r5,r9,r2
   8b2f8:	30c8d83a 	srl	r4,r6,r3
   8b2fc:	3084983a 	sll	r2,r6,r2
   8b300:	48c6d83a 	srl	r3,r9,r3
   8b304:	290cb03a 	or	r6,r5,r4
   8b308:	1004c03a 	cmpne	r2,r2,zero
   8b30c:	308cb03a 	or	r6,r6,r2
   8b310:	898dc83a 	sub	r6,r17,r6
   8b314:	89a3803a 	cmpltu	r17,r17,r6
   8b318:	40d1c83a 	sub	r8,r8,r3
   8b31c:	4451c83a 	sub	r8,r8,r17
   8b320:	3023883a 	mov	r17,r6
   8b324:	4080202c 	andhi	r2,r8,128
   8b328:	10002326 	beq	r2,zero,8b3b8 <__adddf3+0x204>
   8b32c:	04c02034 	movhi	r19,128
   8b330:	9cffffc4 	addi	r19,r19,-1
   8b334:	44e6703a 	and	r19,r8,r19
   8b338:	98007626 	beq	r19,zero,8b514 <__adddf3+0x360>
   8b33c:	9809883a 	mov	r4,r19
   8b340:	008d9f40 	call	8d9f4 <__clzsi2>
   8b344:	10fffe04 	addi	r3,r2,-8
   8b348:	010007c4 	movi	r4,31
   8b34c:	20c07716 	blt	r4,r3,8b52c <__adddf3+0x378>
   8b350:	00800804 	movi	r2,32
   8b354:	10c5c83a 	sub	r2,r2,r3
   8b358:	8884d83a 	srl	r2,r17,r2
   8b35c:	98d0983a 	sll	r8,r19,r3
   8b360:	88e2983a 	sll	r17,r17,r3
   8b364:	1204b03a 	or	r2,r2,r8
   8b368:	1c007416 	blt	r3,r16,8b53c <__adddf3+0x388>
   8b36c:	1c21c83a 	sub	r16,r3,r16
   8b370:	82000044 	addi	r8,r16,1
   8b374:	00c007c4 	movi	r3,31
   8b378:	1a009116 	blt	r3,r8,8b5c0 <__adddf3+0x40c>
   8b37c:	00c00804 	movi	r3,32
   8b380:	1a07c83a 	sub	r3,r3,r8
   8b384:	8a08d83a 	srl	r4,r17,r8
   8b388:	88e2983a 	sll	r17,r17,r3
   8b38c:	10c6983a 	sll	r3,r2,r3
   8b390:	1210d83a 	srl	r8,r2,r8
   8b394:	8804c03a 	cmpne	r2,r17,zero
   8b398:	1906b03a 	or	r3,r3,r4
   8b39c:	18a2b03a 	or	r17,r3,r2
   8b3a0:	0021883a 	mov	r16,zero
   8b3a4:	003fa206 	br	8b230 <__alt_data_end+0xfffcca30>
   8b3a8:	1890b03a 	or	r8,r3,r2
   8b3ac:	40017d26 	beq	r8,zero,8b9a4 <__adddf3+0x7f0>
   8b3b0:	1011883a 	mov	r8,r2
   8b3b4:	1823883a 	mov	r17,r3
   8b3b8:	888001cc 	andi	r2,r17,7
   8b3bc:	103f9e1e 	bne	r2,zero,8b238 <__alt_data_end+0xfffcca38>
   8b3c0:	4004977a 	slli	r2,r8,29
   8b3c4:	8822d0fa 	srli	r17,r17,3
   8b3c8:	4010d0fa 	srli	r8,r8,3
   8b3cc:	9007883a 	mov	r3,r18
   8b3d0:	1444b03a 	or	r2,r2,r17
   8b3d4:	0101ffc4 	movi	r4,2047
   8b3d8:	81002426 	beq	r16,r4,8b46c <__adddf3+0x2b8>
   8b3dc:	8120703a 	and	r16,r16,r4
   8b3e0:	01000434 	movhi	r4,16
   8b3e4:	213fffc4 	addi	r4,r4,-1
   8b3e8:	4110703a 	and	r8,r8,r4
   8b3ec:	003fa806 	br	8b290 <__alt_data_end+0xfffcca90>
   8b3f0:	8089c83a 	sub	r4,r16,r2
   8b3f4:	01005e0e 	bge	zero,r4,8b570 <__adddf3+0x3bc>
   8b3f8:	10002b26 	beq	r2,zero,8b4a8 <__adddf3+0x2f4>
   8b3fc:	0081ffc4 	movi	r2,2047
   8b400:	80bf8b26 	beq	r16,r2,8b230 <__alt_data_end+0xfffcca30>
   8b404:	4a402034 	orhi	r9,r9,128
   8b408:	00800e04 	movi	r2,56
   8b40c:	1100a40e 	bge	r2,r4,8b6a0 <__adddf3+0x4ec>
   8b410:	498cb03a 	or	r6,r9,r6
   8b414:	300ac03a 	cmpne	r5,r6,zero
   8b418:	0013883a 	mov	r9,zero
   8b41c:	2c4b883a 	add	r5,r5,r17
   8b420:	2c63803a 	cmpltu	r17,r5,r17
   8b424:	4a11883a 	add	r8,r9,r8
   8b428:	8a11883a 	add	r8,r17,r8
   8b42c:	2823883a 	mov	r17,r5
   8b430:	4080202c 	andhi	r2,r8,128
   8b434:	103fe026 	beq	r2,zero,8b3b8 <__alt_data_end+0xfffccbb8>
   8b438:	84000044 	addi	r16,r16,1
   8b43c:	0081ffc4 	movi	r2,2047
   8b440:	8080d226 	beq	r16,r2,8b78c <__adddf3+0x5d8>
   8b444:	00bfe034 	movhi	r2,65408
   8b448:	10bfffc4 	addi	r2,r2,-1
   8b44c:	4090703a 	and	r8,r8,r2
   8b450:	880ad07a 	srli	r5,r17,1
   8b454:	400897fa 	slli	r4,r8,31
   8b458:	88c0004c 	andi	r3,r17,1
   8b45c:	28e2b03a 	or	r17,r5,r3
   8b460:	4010d07a 	srli	r8,r8,1
   8b464:	2462b03a 	or	r17,r4,r17
   8b468:	003f7106 	br	8b230 <__alt_data_end+0xfffcca30>
   8b46c:	4088b03a 	or	r4,r8,r2
   8b470:	20014526 	beq	r4,zero,8b988 <__adddf3+0x7d4>
   8b474:	01000434 	movhi	r4,16
   8b478:	42000234 	orhi	r8,r8,8
   8b47c:	213fffc4 	addi	r4,r4,-1
   8b480:	4110703a 	and	r8,r8,r4
   8b484:	003f8206 	br	8b290 <__alt_data_end+0xfffcca90>
   8b488:	18ffffc4 	addi	r3,r3,-1
   8b48c:	1800491e 	bne	r3,zero,8b5b4 <__adddf3+0x400>
   8b490:	898bc83a 	sub	r5,r17,r6
   8b494:	8963803a 	cmpltu	r17,r17,r5
   8b498:	4251c83a 	sub	r8,r8,r9
   8b49c:	4451c83a 	sub	r8,r8,r17
   8b4a0:	2823883a 	mov	r17,r5
   8b4a4:	003f9f06 	br	8b324 <__alt_data_end+0xfffccb24>
   8b4a8:	4984b03a 	or	r2,r9,r6
   8b4ac:	103f6026 	beq	r2,zero,8b230 <__alt_data_end+0xfffcca30>
   8b4b0:	213fffc4 	addi	r4,r4,-1
   8b4b4:	2000931e 	bne	r4,zero,8b704 <__adddf3+0x550>
   8b4b8:	898d883a 	add	r6,r17,r6
   8b4bc:	3463803a 	cmpltu	r17,r6,r17
   8b4c0:	4251883a 	add	r8,r8,r9
   8b4c4:	8a11883a 	add	r8,r17,r8
   8b4c8:	3023883a 	mov	r17,r6
   8b4cc:	003fd806 	br	8b430 <__alt_data_end+0xfffccc30>
   8b4d0:	1800541e 	bne	r3,zero,8b624 <__adddf3+0x470>
   8b4d4:	80800044 	addi	r2,r16,1
   8b4d8:	1081ffcc 	andi	r2,r2,2047
   8b4dc:	00c00044 	movi	r3,1
   8b4e0:	1880a00e 	bge	r3,r2,8b764 <__adddf3+0x5b0>
   8b4e4:	8989c83a 	sub	r4,r17,r6
   8b4e8:	8905803a 	cmpltu	r2,r17,r4
   8b4ec:	4267c83a 	sub	r19,r8,r9
   8b4f0:	98a7c83a 	sub	r19,r19,r2
   8b4f4:	9880202c 	andhi	r2,r19,128
   8b4f8:	10006326 	beq	r2,zero,8b688 <__adddf3+0x4d4>
   8b4fc:	3463c83a 	sub	r17,r6,r17
   8b500:	4a07c83a 	sub	r3,r9,r8
   8b504:	344d803a 	cmpltu	r6,r6,r17
   8b508:	19a7c83a 	sub	r19,r3,r6
   8b50c:	3825883a 	mov	r18,r7
   8b510:	983f8a1e 	bne	r19,zero,8b33c <__alt_data_end+0xfffccb3c>
   8b514:	8809883a 	mov	r4,r17
   8b518:	008d9f40 	call	8d9f4 <__clzsi2>
   8b51c:	10800804 	addi	r2,r2,32
   8b520:	10fffe04 	addi	r3,r2,-8
   8b524:	010007c4 	movi	r4,31
   8b528:	20ff890e 	bge	r4,r3,8b350 <__alt_data_end+0xfffccb50>
   8b52c:	10bff604 	addi	r2,r2,-40
   8b530:	8884983a 	sll	r2,r17,r2
   8b534:	0023883a 	mov	r17,zero
   8b538:	1c3f8c0e 	bge	r3,r16,8b36c <__alt_data_end+0xfffccb6c>
   8b53c:	023fe034 	movhi	r8,65408
   8b540:	423fffc4 	addi	r8,r8,-1
   8b544:	80e1c83a 	sub	r16,r16,r3
   8b548:	1210703a 	and	r8,r2,r8
   8b54c:	003f3806 	br	8b230 <__alt_data_end+0xfffcca30>
   8b550:	9007883a 	mov	r3,r18
   8b554:	0011883a 	mov	r8,zero
   8b558:	0005883a 	mov	r2,zero
   8b55c:	003f4c06 	br	8b290 <__alt_data_end+0xfffcca90>
   8b560:	498cb03a 	or	r6,r9,r6
   8b564:	300cc03a 	cmpne	r6,r6,zero
   8b568:	0007883a 	mov	r3,zero
   8b56c:	003f6806 	br	8b310 <__alt_data_end+0xfffccb10>
   8b570:	20009c1e 	bne	r4,zero,8b7e4 <__adddf3+0x630>
   8b574:	80800044 	addi	r2,r16,1
   8b578:	1141ffcc 	andi	r5,r2,2047
   8b57c:	01000044 	movi	r4,1
   8b580:	2140670e 	bge	r4,r5,8b720 <__adddf3+0x56c>
   8b584:	0101ffc4 	movi	r4,2047
   8b588:	11007f26 	beq	r2,r4,8b788 <__adddf3+0x5d4>
   8b58c:	898d883a 	add	r6,r17,r6
   8b590:	4247883a 	add	r3,r8,r9
   8b594:	3451803a 	cmpltu	r8,r6,r17
   8b598:	40d1883a 	add	r8,r8,r3
   8b59c:	402297fa 	slli	r17,r8,31
   8b5a0:	300cd07a 	srli	r6,r6,1
   8b5a4:	4010d07a 	srli	r8,r8,1
   8b5a8:	1021883a 	mov	r16,r2
   8b5ac:	89a2b03a 	or	r17,r17,r6
   8b5b0:	003f1f06 	br	8b230 <__alt_data_end+0xfffcca30>
   8b5b4:	0081ffc4 	movi	r2,2047
   8b5b8:	80bf481e 	bne	r16,r2,8b2dc <__alt_data_end+0xfffccadc>
   8b5bc:	003f1c06 	br	8b230 <__alt_data_end+0xfffcca30>
   8b5c0:	843ff844 	addi	r16,r16,-31
   8b5c4:	01000804 	movi	r4,32
   8b5c8:	1406d83a 	srl	r3,r2,r16
   8b5cc:	41005026 	beq	r8,r4,8b710 <__adddf3+0x55c>
   8b5d0:	01001004 	movi	r4,64
   8b5d4:	2211c83a 	sub	r8,r4,r8
   8b5d8:	1204983a 	sll	r2,r2,r8
   8b5dc:	88a2b03a 	or	r17,r17,r2
   8b5e0:	8822c03a 	cmpne	r17,r17,zero
   8b5e4:	1c62b03a 	or	r17,r3,r17
   8b5e8:	0011883a 	mov	r8,zero
   8b5ec:	0021883a 	mov	r16,zero
   8b5f0:	003f7106 	br	8b3b8 <__alt_data_end+0xfffccbb8>
   8b5f4:	193ff804 	addi	r4,r3,-32
   8b5f8:	00800804 	movi	r2,32
   8b5fc:	4908d83a 	srl	r4,r9,r4
   8b600:	18804526 	beq	r3,r2,8b718 <__adddf3+0x564>
   8b604:	00801004 	movi	r2,64
   8b608:	10c5c83a 	sub	r2,r2,r3
   8b60c:	4886983a 	sll	r3,r9,r2
   8b610:	198cb03a 	or	r6,r3,r6
   8b614:	300cc03a 	cmpne	r6,r6,zero
   8b618:	218cb03a 	or	r6,r4,r6
   8b61c:	0007883a 	mov	r3,zero
   8b620:	003f3b06 	br	8b310 <__alt_data_end+0xfffccb10>
   8b624:	80002a26 	beq	r16,zero,8b6d0 <__adddf3+0x51c>
   8b628:	0101ffc4 	movi	r4,2047
   8b62c:	11006826 	beq	r2,r4,8b7d0 <__adddf3+0x61c>
   8b630:	00c7c83a 	sub	r3,zero,r3
   8b634:	42002034 	orhi	r8,r8,128
   8b638:	01000e04 	movi	r4,56
   8b63c:	20c07c16 	blt	r4,r3,8b830 <__adddf3+0x67c>
   8b640:	010007c4 	movi	r4,31
   8b644:	20c0da16 	blt	r4,r3,8b9b0 <__adddf3+0x7fc>
   8b648:	01000804 	movi	r4,32
   8b64c:	20c9c83a 	sub	r4,r4,r3
   8b650:	4114983a 	sll	r10,r8,r4
   8b654:	88cad83a 	srl	r5,r17,r3
   8b658:	8908983a 	sll	r4,r17,r4
   8b65c:	40c6d83a 	srl	r3,r8,r3
   8b660:	5162b03a 	or	r17,r10,r5
   8b664:	2008c03a 	cmpne	r4,r4,zero
   8b668:	8922b03a 	or	r17,r17,r4
   8b66c:	3463c83a 	sub	r17,r6,r17
   8b670:	48c7c83a 	sub	r3,r9,r3
   8b674:	344d803a 	cmpltu	r6,r6,r17
   8b678:	1991c83a 	sub	r8,r3,r6
   8b67c:	1021883a 	mov	r16,r2
   8b680:	3825883a 	mov	r18,r7
   8b684:	003f2706 	br	8b324 <__alt_data_end+0xfffccb24>
   8b688:	24d0b03a 	or	r8,r4,r19
   8b68c:	40001b1e 	bne	r8,zero,8b6fc <__adddf3+0x548>
   8b690:	0005883a 	mov	r2,zero
   8b694:	0007883a 	mov	r3,zero
   8b698:	0021883a 	mov	r16,zero
   8b69c:	003f4d06 	br	8b3d4 <__alt_data_end+0xfffccbd4>
   8b6a0:	008007c4 	movi	r2,31
   8b6a4:	11003c16 	blt	r2,r4,8b798 <__adddf3+0x5e4>
   8b6a8:	00800804 	movi	r2,32
   8b6ac:	1105c83a 	sub	r2,r2,r4
   8b6b0:	488e983a 	sll	r7,r9,r2
   8b6b4:	310ad83a 	srl	r5,r6,r4
   8b6b8:	3084983a 	sll	r2,r6,r2
   8b6bc:	4912d83a 	srl	r9,r9,r4
   8b6c0:	394ab03a 	or	r5,r7,r5
   8b6c4:	1004c03a 	cmpne	r2,r2,zero
   8b6c8:	288ab03a 	or	r5,r5,r2
   8b6cc:	003f5306 	br	8b41c <__alt_data_end+0xfffccc1c>
   8b6d0:	4448b03a 	or	r4,r8,r17
   8b6d4:	20003e26 	beq	r4,zero,8b7d0 <__adddf3+0x61c>
   8b6d8:	00c6303a 	nor	r3,zero,r3
   8b6dc:	18003a1e 	bne	r3,zero,8b7c8 <__adddf3+0x614>
   8b6e0:	3463c83a 	sub	r17,r6,r17
   8b6e4:	4a07c83a 	sub	r3,r9,r8
   8b6e8:	344d803a 	cmpltu	r6,r6,r17
   8b6ec:	1991c83a 	sub	r8,r3,r6
   8b6f0:	1021883a 	mov	r16,r2
   8b6f4:	3825883a 	mov	r18,r7
   8b6f8:	003f0a06 	br	8b324 <__alt_data_end+0xfffccb24>
   8b6fc:	2023883a 	mov	r17,r4
   8b700:	003f0d06 	br	8b338 <__alt_data_end+0xfffccb38>
   8b704:	0081ffc4 	movi	r2,2047
   8b708:	80bf3f1e 	bne	r16,r2,8b408 <__alt_data_end+0xfffccc08>
   8b70c:	003ec806 	br	8b230 <__alt_data_end+0xfffcca30>
   8b710:	0005883a 	mov	r2,zero
   8b714:	003fb106 	br	8b5dc <__alt_data_end+0xfffccddc>
   8b718:	0007883a 	mov	r3,zero
   8b71c:	003fbc06 	br	8b610 <__alt_data_end+0xfffcce10>
   8b720:	4444b03a 	or	r2,r8,r17
   8b724:	8000871e 	bne	r16,zero,8b944 <__adddf3+0x790>
   8b728:	1000ba26 	beq	r2,zero,8ba14 <__adddf3+0x860>
   8b72c:	4984b03a 	or	r2,r9,r6
   8b730:	103ebf26 	beq	r2,zero,8b230 <__alt_data_end+0xfffcca30>
   8b734:	8985883a 	add	r2,r17,r6
   8b738:	4247883a 	add	r3,r8,r9
   8b73c:	1451803a 	cmpltu	r8,r2,r17
   8b740:	40d1883a 	add	r8,r8,r3
   8b744:	40c0202c 	andhi	r3,r8,128
   8b748:	1023883a 	mov	r17,r2
   8b74c:	183f1a26 	beq	r3,zero,8b3b8 <__alt_data_end+0xfffccbb8>
   8b750:	00bfe034 	movhi	r2,65408
   8b754:	10bfffc4 	addi	r2,r2,-1
   8b758:	2021883a 	mov	r16,r4
   8b75c:	4090703a 	and	r8,r8,r2
   8b760:	003eb306 	br	8b230 <__alt_data_end+0xfffcca30>
   8b764:	4444b03a 	or	r2,r8,r17
   8b768:	8000291e 	bne	r16,zero,8b810 <__adddf3+0x65c>
   8b76c:	10004b1e 	bne	r2,zero,8b89c <__adddf3+0x6e8>
   8b770:	4990b03a 	or	r8,r9,r6
   8b774:	40008b26 	beq	r8,zero,8b9a4 <__adddf3+0x7f0>
   8b778:	4811883a 	mov	r8,r9
   8b77c:	3023883a 	mov	r17,r6
   8b780:	3825883a 	mov	r18,r7
   8b784:	003eaa06 	br	8b230 <__alt_data_end+0xfffcca30>
   8b788:	1021883a 	mov	r16,r2
   8b78c:	0011883a 	mov	r8,zero
   8b790:	0005883a 	mov	r2,zero
   8b794:	003f0f06 	br	8b3d4 <__alt_data_end+0xfffccbd4>
   8b798:	217ff804 	addi	r5,r4,-32
   8b79c:	00800804 	movi	r2,32
   8b7a0:	494ad83a 	srl	r5,r9,r5
   8b7a4:	20807d26 	beq	r4,r2,8b99c <__adddf3+0x7e8>
   8b7a8:	00801004 	movi	r2,64
   8b7ac:	1109c83a 	sub	r4,r2,r4
   8b7b0:	4912983a 	sll	r9,r9,r4
   8b7b4:	498cb03a 	or	r6,r9,r6
   8b7b8:	300cc03a 	cmpne	r6,r6,zero
   8b7bc:	298ab03a 	or	r5,r5,r6
   8b7c0:	0013883a 	mov	r9,zero
   8b7c4:	003f1506 	br	8b41c <__alt_data_end+0xfffccc1c>
   8b7c8:	0101ffc4 	movi	r4,2047
   8b7cc:	113f9a1e 	bne	r2,r4,8b638 <__alt_data_end+0xfffcce38>
   8b7d0:	4811883a 	mov	r8,r9
   8b7d4:	3023883a 	mov	r17,r6
   8b7d8:	1021883a 	mov	r16,r2
   8b7dc:	3825883a 	mov	r18,r7
   8b7e0:	003e9306 	br	8b230 <__alt_data_end+0xfffcca30>
   8b7e4:	8000161e 	bne	r16,zero,8b840 <__adddf3+0x68c>
   8b7e8:	444ab03a 	or	r5,r8,r17
   8b7ec:	28005126 	beq	r5,zero,8b934 <__adddf3+0x780>
   8b7f0:	0108303a 	nor	r4,zero,r4
   8b7f4:	20004d1e 	bne	r4,zero,8b92c <__adddf3+0x778>
   8b7f8:	89a3883a 	add	r17,r17,r6
   8b7fc:	4253883a 	add	r9,r8,r9
   8b800:	898d803a 	cmpltu	r6,r17,r6
   8b804:	3251883a 	add	r8,r6,r9
   8b808:	1021883a 	mov	r16,r2
   8b80c:	003f0806 	br	8b430 <__alt_data_end+0xfffccc30>
   8b810:	1000301e 	bne	r2,zero,8b8d4 <__adddf3+0x720>
   8b814:	4984b03a 	or	r2,r9,r6
   8b818:	10007126 	beq	r2,zero,8b9e0 <__adddf3+0x82c>
   8b81c:	4811883a 	mov	r8,r9
   8b820:	3023883a 	mov	r17,r6
   8b824:	3825883a 	mov	r18,r7
   8b828:	0401ffc4 	movi	r16,2047
   8b82c:	003e8006 	br	8b230 <__alt_data_end+0xfffcca30>
   8b830:	4462b03a 	or	r17,r8,r17
   8b834:	8822c03a 	cmpne	r17,r17,zero
   8b838:	0007883a 	mov	r3,zero
   8b83c:	003f8b06 	br	8b66c <__alt_data_end+0xfffcce6c>
   8b840:	0141ffc4 	movi	r5,2047
   8b844:	11403b26 	beq	r2,r5,8b934 <__adddf3+0x780>
   8b848:	0109c83a 	sub	r4,zero,r4
   8b84c:	42002034 	orhi	r8,r8,128
   8b850:	01400e04 	movi	r5,56
   8b854:	29006716 	blt	r5,r4,8b9f4 <__adddf3+0x840>
   8b858:	014007c4 	movi	r5,31
   8b85c:	29007016 	blt	r5,r4,8ba20 <__adddf3+0x86c>
   8b860:	01400804 	movi	r5,32
   8b864:	290bc83a 	sub	r5,r5,r4
   8b868:	4154983a 	sll	r10,r8,r5
   8b86c:	890ed83a 	srl	r7,r17,r4
   8b870:	894a983a 	sll	r5,r17,r5
   8b874:	4108d83a 	srl	r4,r8,r4
   8b878:	51e2b03a 	or	r17,r10,r7
   8b87c:	280ac03a 	cmpne	r5,r5,zero
   8b880:	8962b03a 	or	r17,r17,r5
   8b884:	89a3883a 	add	r17,r17,r6
   8b888:	2253883a 	add	r9,r4,r9
   8b88c:	898d803a 	cmpltu	r6,r17,r6
   8b890:	3251883a 	add	r8,r6,r9
   8b894:	1021883a 	mov	r16,r2
   8b898:	003ee506 	br	8b430 <__alt_data_end+0xfffccc30>
   8b89c:	4984b03a 	or	r2,r9,r6
   8b8a0:	103e6326 	beq	r2,zero,8b230 <__alt_data_end+0xfffcca30>
   8b8a4:	8987c83a 	sub	r3,r17,r6
   8b8a8:	88c9803a 	cmpltu	r4,r17,r3
   8b8ac:	4245c83a 	sub	r2,r8,r9
   8b8b0:	1105c83a 	sub	r2,r2,r4
   8b8b4:	1100202c 	andhi	r4,r2,128
   8b8b8:	203ebb26 	beq	r4,zero,8b3a8 <__alt_data_end+0xfffccba8>
   8b8bc:	3463c83a 	sub	r17,r6,r17
   8b8c0:	4a07c83a 	sub	r3,r9,r8
   8b8c4:	344d803a 	cmpltu	r6,r6,r17
   8b8c8:	1991c83a 	sub	r8,r3,r6
   8b8cc:	3825883a 	mov	r18,r7
   8b8d0:	003e5706 	br	8b230 <__alt_data_end+0xfffcca30>
   8b8d4:	4984b03a 	or	r2,r9,r6
   8b8d8:	10002e26 	beq	r2,zero,8b994 <__adddf3+0x7e0>
   8b8dc:	4004d0fa 	srli	r2,r8,3
   8b8e0:	8822d0fa 	srli	r17,r17,3
   8b8e4:	4010977a 	slli	r8,r8,29
   8b8e8:	10c0022c 	andhi	r3,r2,8
   8b8ec:	4462b03a 	or	r17,r8,r17
   8b8f0:	18000826 	beq	r3,zero,8b914 <__adddf3+0x760>
   8b8f4:	4808d0fa 	srli	r4,r9,3
   8b8f8:	20c0022c 	andhi	r3,r4,8
   8b8fc:	1800051e 	bne	r3,zero,8b914 <__adddf3+0x760>
   8b900:	300cd0fa 	srli	r6,r6,3
   8b904:	4806977a 	slli	r3,r9,29
   8b908:	2005883a 	mov	r2,r4
   8b90c:	3825883a 	mov	r18,r7
   8b910:	19a2b03a 	or	r17,r3,r6
   8b914:	8810d77a 	srli	r8,r17,29
   8b918:	100490fa 	slli	r2,r2,3
   8b91c:	882290fa 	slli	r17,r17,3
   8b920:	0401ffc4 	movi	r16,2047
   8b924:	4090b03a 	or	r8,r8,r2
   8b928:	003e4106 	br	8b230 <__alt_data_end+0xfffcca30>
   8b92c:	0141ffc4 	movi	r5,2047
   8b930:	117fc71e 	bne	r2,r5,8b850 <__alt_data_end+0xfffcd050>
   8b934:	4811883a 	mov	r8,r9
   8b938:	3023883a 	mov	r17,r6
   8b93c:	1021883a 	mov	r16,r2
   8b940:	003e3b06 	br	8b230 <__alt_data_end+0xfffcca30>
   8b944:	10002f26 	beq	r2,zero,8ba04 <__adddf3+0x850>
   8b948:	4984b03a 	or	r2,r9,r6
   8b94c:	10001126 	beq	r2,zero,8b994 <__adddf3+0x7e0>
   8b950:	4004d0fa 	srli	r2,r8,3
   8b954:	8822d0fa 	srli	r17,r17,3
   8b958:	4010977a 	slli	r8,r8,29
   8b95c:	10c0022c 	andhi	r3,r2,8
   8b960:	4462b03a 	or	r17,r8,r17
   8b964:	183feb26 	beq	r3,zero,8b914 <__alt_data_end+0xfffcd114>
   8b968:	4808d0fa 	srli	r4,r9,3
   8b96c:	20c0022c 	andhi	r3,r4,8
   8b970:	183fe81e 	bne	r3,zero,8b914 <__alt_data_end+0xfffcd114>
   8b974:	300cd0fa 	srli	r6,r6,3
   8b978:	4806977a 	slli	r3,r9,29
   8b97c:	2005883a 	mov	r2,r4
   8b980:	19a2b03a 	or	r17,r3,r6
   8b984:	003fe306 	br	8b914 <__alt_data_end+0xfffcd114>
   8b988:	0011883a 	mov	r8,zero
   8b98c:	0005883a 	mov	r2,zero
   8b990:	003e3f06 	br	8b290 <__alt_data_end+0xfffcca90>
   8b994:	0401ffc4 	movi	r16,2047
   8b998:	003e2506 	br	8b230 <__alt_data_end+0xfffcca30>
   8b99c:	0013883a 	mov	r9,zero
   8b9a0:	003f8406 	br	8b7b4 <__alt_data_end+0xfffccfb4>
   8b9a4:	0005883a 	mov	r2,zero
   8b9a8:	0007883a 	mov	r3,zero
   8b9ac:	003e8906 	br	8b3d4 <__alt_data_end+0xfffccbd4>
   8b9b0:	197ff804 	addi	r5,r3,-32
   8b9b4:	01000804 	movi	r4,32
   8b9b8:	414ad83a 	srl	r5,r8,r5
   8b9bc:	19002426 	beq	r3,r4,8ba50 <__adddf3+0x89c>
   8b9c0:	01001004 	movi	r4,64
   8b9c4:	20c7c83a 	sub	r3,r4,r3
   8b9c8:	40c6983a 	sll	r3,r8,r3
   8b9cc:	1c46b03a 	or	r3,r3,r17
   8b9d0:	1806c03a 	cmpne	r3,r3,zero
   8b9d4:	28e2b03a 	or	r17,r5,r3
   8b9d8:	0007883a 	mov	r3,zero
   8b9dc:	003f2306 	br	8b66c <__alt_data_end+0xfffcce6c>
   8b9e0:	0007883a 	mov	r3,zero
   8b9e4:	5811883a 	mov	r8,r11
   8b9e8:	00bfffc4 	movi	r2,-1
   8b9ec:	0401ffc4 	movi	r16,2047
   8b9f0:	003e7806 	br	8b3d4 <__alt_data_end+0xfffccbd4>
   8b9f4:	4462b03a 	or	r17,r8,r17
   8b9f8:	8822c03a 	cmpne	r17,r17,zero
   8b9fc:	0009883a 	mov	r4,zero
   8ba00:	003fa006 	br	8b884 <__alt_data_end+0xfffcd084>
   8ba04:	4811883a 	mov	r8,r9
   8ba08:	3023883a 	mov	r17,r6
   8ba0c:	0401ffc4 	movi	r16,2047
   8ba10:	003e0706 	br	8b230 <__alt_data_end+0xfffcca30>
   8ba14:	4811883a 	mov	r8,r9
   8ba18:	3023883a 	mov	r17,r6
   8ba1c:	003e0406 	br	8b230 <__alt_data_end+0xfffcca30>
   8ba20:	21fff804 	addi	r7,r4,-32
   8ba24:	01400804 	movi	r5,32
   8ba28:	41ced83a 	srl	r7,r8,r7
   8ba2c:	21400a26 	beq	r4,r5,8ba58 <__adddf3+0x8a4>
   8ba30:	01401004 	movi	r5,64
   8ba34:	2909c83a 	sub	r4,r5,r4
   8ba38:	4108983a 	sll	r4,r8,r4
   8ba3c:	2448b03a 	or	r4,r4,r17
   8ba40:	2008c03a 	cmpne	r4,r4,zero
   8ba44:	3922b03a 	or	r17,r7,r4
   8ba48:	0009883a 	mov	r4,zero
   8ba4c:	003f8d06 	br	8b884 <__alt_data_end+0xfffcd084>
   8ba50:	0007883a 	mov	r3,zero
   8ba54:	003fdd06 	br	8b9cc <__alt_data_end+0xfffcd1cc>
   8ba58:	0009883a 	mov	r4,zero
   8ba5c:	003ff706 	br	8ba3c <__alt_data_end+0xfffcd23c>

0008ba60 <__divdf3>:
   8ba60:	defff004 	addi	sp,sp,-64
   8ba64:	dc800815 	stw	r18,32(sp)
   8ba68:	2824d53a 	srli	r18,r5,20
   8ba6c:	dd800c15 	stw	r22,48(sp)
   8ba70:	282cd7fa 	srli	r22,r5,31
   8ba74:	dc000615 	stw	r16,24(sp)
   8ba78:	04000434 	movhi	r16,16
   8ba7c:	843fffc4 	addi	r16,r16,-1
   8ba80:	dfc00f15 	stw	ra,60(sp)
   8ba84:	df000e15 	stw	fp,56(sp)
   8ba88:	ddc00d15 	stw	r23,52(sp)
   8ba8c:	dd400b15 	stw	r21,44(sp)
   8ba90:	dd000a15 	stw	r20,40(sp)
   8ba94:	dcc00915 	stw	r19,36(sp)
   8ba98:	dc400715 	stw	r17,28(sp)
   8ba9c:	9481ffcc 	andi	r18,r18,2047
   8baa0:	2c20703a 	and	r16,r5,r16
   8baa4:	b2003fcc 	andi	r8,r22,255
   8baa8:	90006126 	beq	r18,zero,8bc30 <__divdf3+0x1d0>
   8baac:	0081ffc4 	movi	r2,2047
   8bab0:	202b883a 	mov	r21,r4
   8bab4:	90803726 	beq	r18,r2,8bb94 <__divdf3+0x134>
   8bab8:	80800434 	orhi	r2,r16,16
   8babc:	100490fa 	slli	r2,r2,3
   8bac0:	2020d77a 	srli	r16,r4,29
   8bac4:	202a90fa 	slli	r21,r4,3
   8bac8:	94bf0044 	addi	r18,r18,-1023
   8bacc:	80a0b03a 	or	r16,r16,r2
   8bad0:	0013883a 	mov	r9,zero
   8bad4:	000b883a 	mov	r5,zero
   8bad8:	3806d53a 	srli	r3,r7,20
   8badc:	382ed7fa 	srli	r23,r7,31
   8bae0:	04400434 	movhi	r17,16
   8bae4:	8c7fffc4 	addi	r17,r17,-1
   8bae8:	18c1ffcc 	andi	r3,r3,2047
   8baec:	3029883a 	mov	r20,r6
   8baf0:	3c62703a 	and	r17,r7,r17
   8baf4:	bf003fcc 	andi	fp,r23,255
   8baf8:	18006e26 	beq	r3,zero,8bcb4 <__divdf3+0x254>
   8bafc:	0081ffc4 	movi	r2,2047
   8bb00:	18806626 	beq	r3,r2,8bc9c <__divdf3+0x23c>
   8bb04:	88800434 	orhi	r2,r17,16
   8bb08:	100490fa 	slli	r2,r2,3
   8bb0c:	3022d77a 	srli	r17,r6,29
   8bb10:	302890fa 	slli	r20,r6,3
   8bb14:	18ff0044 	addi	r3,r3,-1023
   8bb18:	88a2b03a 	or	r17,r17,r2
   8bb1c:	000f883a 	mov	r7,zero
   8bb20:	b5e6f03a 	xor	r19,r22,r23
   8bb24:	3a4cb03a 	or	r6,r7,r9
   8bb28:	008003c4 	movi	r2,15
   8bb2c:	9809883a 	mov	r4,r19
   8bb30:	90c7c83a 	sub	r3,r18,r3
   8bb34:	9cc03fcc 	andi	r19,r19,255
   8bb38:	11809636 	bltu	r2,r6,8bd94 <__divdf3+0x334>
   8bb3c:	300c90ba 	slli	r6,r6,2
   8bb40:	00800274 	movhi	r2,9
   8bb44:	10aed504 	addi	r2,r2,-17580
   8bb48:	308d883a 	add	r6,r6,r2
   8bb4c:	30800017 	ldw	r2,0(r6)
   8bb50:	1000683a 	jmp	r2
   8bb54:	0008bd94 	movui	zero,8950
   8bb58:	0008bbcc 	andi	zero,zero,8943
   8bb5c:	0008bd84 	movi	zero,8950
   8bb60:	0008bbc0 	call	8bbc <OSCtxSw_SWITCH_PC+0x8b7c>
   8bb64:	0008bd84 	movi	zero,8950
   8bb68:	0008bd58 	cmpnei	zero,zero,8949
   8bb6c:	0008bd84 	movi	zero,8950
   8bb70:	0008bbc0 	call	8bbc <OSCtxSw_SWITCH_PC+0x8b7c>
   8bb74:	0008bbcc 	andi	zero,zero,8943
   8bb78:	0008bbcc 	andi	zero,zero,8943
   8bb7c:	0008bd58 	cmpnei	zero,zero,8949
   8bb80:	0008bbc0 	call	8bbc <OSCtxSw_SWITCH_PC+0x8b7c>
   8bb84:	0008bbb0 	cmpltui	zero,zero,8942
   8bb88:	0008bbb0 	cmpltui	zero,zero,8942
   8bb8c:	0008bbb0 	cmpltui	zero,zero,8942
   8bb90:	0008c11c 	xori	zero,zero,8964
   8bb94:	2404b03a 	or	r2,r4,r16
   8bb98:	10006c1e 	bne	r2,zero,8bd4c <__divdf3+0x2ec>
   8bb9c:	02400204 	movi	r9,8
   8bba0:	0021883a 	mov	r16,zero
   8bba4:	002b883a 	mov	r21,zero
   8bba8:	01400084 	movi	r5,2
   8bbac:	003fca06 	br	8bad8 <__alt_data_end+0xfffcd2d8>
   8bbb0:	8023883a 	mov	r17,r16
   8bbb4:	a829883a 	mov	r20,r21
   8bbb8:	4039883a 	mov	fp,r8
   8bbbc:	280f883a 	mov	r7,r5
   8bbc0:	00800084 	movi	r2,2
   8bbc4:	3881601e 	bne	r7,r2,8c148 <__divdf3+0x6e8>
   8bbc8:	e027883a 	mov	r19,fp
   8bbcc:	9900004c 	andi	r4,r19,1
   8bbd0:	0081ffc4 	movi	r2,2047
   8bbd4:	0021883a 	mov	r16,zero
   8bbd8:	002b883a 	mov	r21,zero
   8bbdc:	1004953a 	slli	r2,r2,20
   8bbe0:	20c03fcc 	andi	r3,r4,255
   8bbe4:	01400434 	movhi	r5,16
   8bbe8:	297fffc4 	addi	r5,r5,-1
   8bbec:	180697fa 	slli	r3,r3,31
   8bbf0:	8160703a 	and	r16,r16,r5
   8bbf4:	80a0b03a 	or	r16,r16,r2
   8bbf8:	80c6b03a 	or	r3,r16,r3
   8bbfc:	a805883a 	mov	r2,r21
   8bc00:	dfc00f17 	ldw	ra,60(sp)
   8bc04:	df000e17 	ldw	fp,56(sp)
   8bc08:	ddc00d17 	ldw	r23,52(sp)
   8bc0c:	dd800c17 	ldw	r22,48(sp)
   8bc10:	dd400b17 	ldw	r21,44(sp)
   8bc14:	dd000a17 	ldw	r20,40(sp)
   8bc18:	dcc00917 	ldw	r19,36(sp)
   8bc1c:	dc800817 	ldw	r18,32(sp)
   8bc20:	dc400717 	ldw	r17,28(sp)
   8bc24:	dc000617 	ldw	r16,24(sp)
   8bc28:	dec01004 	addi	sp,sp,64
   8bc2c:	f800283a 	ret
   8bc30:	2404b03a 	or	r2,r4,r16
   8bc34:	2023883a 	mov	r17,r4
   8bc38:	10003f26 	beq	r2,zero,8bd38 <__divdf3+0x2d8>
   8bc3c:	80015e26 	beq	r16,zero,8c1b8 <__divdf3+0x758>
   8bc40:	8009883a 	mov	r4,r16
   8bc44:	d9800215 	stw	r6,8(sp)
   8bc48:	d9c00515 	stw	r7,20(sp)
   8bc4c:	da000415 	stw	r8,16(sp)
   8bc50:	008d9f40 	call	8d9f4 <__clzsi2>
   8bc54:	d9800217 	ldw	r6,8(sp)
   8bc58:	d9c00517 	ldw	r7,20(sp)
   8bc5c:	da000417 	ldw	r8,16(sp)
   8bc60:	113ffd44 	addi	r4,r2,-11
   8bc64:	00c00704 	movi	r3,28
   8bc68:	19014f16 	blt	r3,r4,8c1a8 <__divdf3+0x748>
   8bc6c:	00c00744 	movi	r3,29
   8bc70:	157ffe04 	addi	r21,r2,-8
   8bc74:	1907c83a 	sub	r3,r3,r4
   8bc78:	8560983a 	sll	r16,r16,r21
   8bc7c:	88c6d83a 	srl	r3,r17,r3
   8bc80:	8d6a983a 	sll	r21,r17,r21
   8bc84:	1c20b03a 	or	r16,r3,r16
   8bc88:	1080fcc4 	addi	r2,r2,1011
   8bc8c:	00a5c83a 	sub	r18,zero,r2
   8bc90:	0013883a 	mov	r9,zero
   8bc94:	000b883a 	mov	r5,zero
   8bc98:	003f8f06 	br	8bad8 <__alt_data_end+0xfffcd2d8>
   8bc9c:	3444b03a 	or	r2,r6,r17
   8bca0:	1000231e 	bne	r2,zero,8bd30 <__divdf3+0x2d0>
   8bca4:	0023883a 	mov	r17,zero
   8bca8:	0029883a 	mov	r20,zero
   8bcac:	01c00084 	movi	r7,2
   8bcb0:	003f9b06 	br	8bb20 <__alt_data_end+0xfffcd320>
   8bcb4:	3444b03a 	or	r2,r6,r17
   8bcb8:	10001926 	beq	r2,zero,8bd20 <__divdf3+0x2c0>
   8bcbc:	88014b26 	beq	r17,zero,8c1ec <__divdf3+0x78c>
   8bcc0:	8809883a 	mov	r4,r17
   8bcc4:	d9400115 	stw	r5,4(sp)
   8bcc8:	d9800215 	stw	r6,8(sp)
   8bccc:	da000415 	stw	r8,16(sp)
   8bcd0:	da400315 	stw	r9,12(sp)
   8bcd4:	008d9f40 	call	8d9f4 <__clzsi2>
   8bcd8:	d9400117 	ldw	r5,4(sp)
   8bcdc:	d9800217 	ldw	r6,8(sp)
   8bce0:	da000417 	ldw	r8,16(sp)
   8bce4:	da400317 	ldw	r9,12(sp)
   8bce8:	113ffd44 	addi	r4,r2,-11
   8bcec:	00c00704 	movi	r3,28
   8bcf0:	19013a16 	blt	r3,r4,8c1dc <__divdf3+0x77c>
   8bcf4:	00c00744 	movi	r3,29
   8bcf8:	153ffe04 	addi	r20,r2,-8
   8bcfc:	1907c83a 	sub	r3,r3,r4
   8bd00:	8d22983a 	sll	r17,r17,r20
   8bd04:	30c6d83a 	srl	r3,r6,r3
   8bd08:	3528983a 	sll	r20,r6,r20
   8bd0c:	1c62b03a 	or	r17,r3,r17
   8bd10:	1080fcc4 	addi	r2,r2,1011
   8bd14:	0087c83a 	sub	r3,zero,r2
   8bd18:	000f883a 	mov	r7,zero
   8bd1c:	003f8006 	br	8bb20 <__alt_data_end+0xfffcd320>
   8bd20:	0023883a 	mov	r17,zero
   8bd24:	0029883a 	mov	r20,zero
   8bd28:	01c00044 	movi	r7,1
   8bd2c:	003f7c06 	br	8bb20 <__alt_data_end+0xfffcd320>
   8bd30:	01c000c4 	movi	r7,3
   8bd34:	003f7a06 	br	8bb20 <__alt_data_end+0xfffcd320>
   8bd38:	02400104 	movi	r9,4
   8bd3c:	0021883a 	mov	r16,zero
   8bd40:	002b883a 	mov	r21,zero
   8bd44:	01400044 	movi	r5,1
   8bd48:	003f6306 	br	8bad8 <__alt_data_end+0xfffcd2d8>
   8bd4c:	02400304 	movi	r9,12
   8bd50:	014000c4 	movi	r5,3
   8bd54:	003f6006 	br	8bad8 <__alt_data_end+0xfffcd2d8>
   8bd58:	04000434 	movhi	r16,16
   8bd5c:	0009883a 	mov	r4,zero
   8bd60:	843fffc4 	addi	r16,r16,-1
   8bd64:	057fffc4 	movi	r21,-1
   8bd68:	0081ffc4 	movi	r2,2047
   8bd6c:	003f9b06 	br	8bbdc <__alt_data_end+0xfffcd3dc>
   8bd70:	00c00044 	movi	r3,1
   8bd74:	1887c83a 	sub	r3,r3,r2
   8bd78:	01000e04 	movi	r4,56
   8bd7c:	20c1530e 	bge	r4,r3,8c2cc <__divdf3+0x86c>
   8bd80:	9900004c 	andi	r4,r19,1
   8bd84:	0005883a 	mov	r2,zero
   8bd88:	0021883a 	mov	r16,zero
   8bd8c:	002b883a 	mov	r21,zero
   8bd90:	003f9206 	br	8bbdc <__alt_data_end+0xfffcd3dc>
   8bd94:	8c012e36 	bltu	r17,r16,8c250 <__divdf3+0x7f0>
   8bd98:	84412c26 	beq	r16,r17,8c24c <__divdf3+0x7ec>
   8bd9c:	a82f883a 	mov	r23,r21
   8bda0:	18ffffc4 	addi	r3,r3,-1
   8bda4:	002b883a 	mov	r21,zero
   8bda8:	a004d63a 	srli	r2,r20,24
   8bdac:	8822923a 	slli	r17,r17,8
   8bdb0:	a028923a 	slli	r20,r20,8
   8bdb4:	8009883a 	mov	r4,r16
   8bdb8:	88acb03a 	or	r22,r17,r2
   8bdbc:	dd000015 	stw	r20,0(sp)
   8bdc0:	b028d43a 	srli	r20,r22,16
   8bdc4:	d8c00215 	stw	r3,8(sp)
   8bdc8:	b4bfffcc 	andi	r18,r22,65535
   8bdcc:	a00b883a 	mov	r5,r20
   8bdd0:	0080c040 	call	80c04 <__udivsi3>
   8bdd4:	100b883a 	mov	r5,r2
   8bdd8:	9009883a 	mov	r4,r18
   8bddc:	1023883a 	mov	r17,r2
   8bde0:	008b18c0 	call	8b18c <__mulsi3>
   8bde4:	8009883a 	mov	r4,r16
   8bde8:	a00b883a 	mov	r5,r20
   8bdec:	1039883a 	mov	fp,r2
   8bdf0:	0080c680 	call	80c68 <__umodsi3>
   8bdf4:	1004943a 	slli	r2,r2,16
   8bdf8:	b808d43a 	srli	r4,r23,16
   8bdfc:	d8c00217 	ldw	r3,8(sp)
   8be00:	2084b03a 	or	r2,r4,r2
   8be04:	1700062e 	bgeu	r2,fp,8be20 <__divdf3+0x3c0>
   8be08:	1585883a 	add	r2,r2,r22
   8be0c:	893fffc4 	addi	r4,r17,-1
   8be10:	15811d36 	bltu	r2,r22,8c288 <__divdf3+0x828>
   8be14:	17011c2e 	bgeu	r2,fp,8c288 <__divdf3+0x828>
   8be18:	8c7fff84 	addi	r17,r17,-2
   8be1c:	1585883a 	add	r2,r2,r22
   8be20:	1739c83a 	sub	fp,r2,fp
   8be24:	a00b883a 	mov	r5,r20
   8be28:	e009883a 	mov	r4,fp
   8be2c:	d8c00215 	stw	r3,8(sp)
   8be30:	0080c040 	call	80c04 <__udivsi3>
   8be34:	100b883a 	mov	r5,r2
   8be38:	9009883a 	mov	r4,r18
   8be3c:	1021883a 	mov	r16,r2
   8be40:	008b18c0 	call	8b18c <__mulsi3>
   8be44:	a00b883a 	mov	r5,r20
   8be48:	e009883a 	mov	r4,fp
   8be4c:	d8800415 	stw	r2,16(sp)
   8be50:	0080c680 	call	80c68 <__umodsi3>
   8be54:	1004943a 	slli	r2,r2,16
   8be58:	da000417 	ldw	r8,16(sp)
   8be5c:	bdffffcc 	andi	r23,r23,65535
   8be60:	b884b03a 	or	r2,r23,r2
   8be64:	d8c00217 	ldw	r3,8(sp)
   8be68:	1200062e 	bgeu	r2,r8,8be84 <__divdf3+0x424>
   8be6c:	1585883a 	add	r2,r2,r22
   8be70:	813fffc4 	addi	r4,r16,-1
   8be74:	15810236 	bltu	r2,r22,8c280 <__divdf3+0x820>
   8be78:	1201012e 	bgeu	r2,r8,8c280 <__divdf3+0x820>
   8be7c:	843fff84 	addi	r16,r16,-2
   8be80:	1585883a 	add	r2,r2,r22
   8be84:	8822943a 	slli	r17,r17,16
   8be88:	d9800017 	ldw	r6,0(sp)
   8be8c:	1211c83a 	sub	r8,r2,r8
   8be90:	8c22b03a 	or	r17,r17,r16
   8be94:	373fffcc 	andi	fp,r6,65535
   8be98:	8abfffcc 	andi	r10,r17,65535
   8be9c:	8820d43a 	srli	r16,r17,16
   8bea0:	5009883a 	mov	r4,r10
   8bea4:	e00b883a 	mov	r5,fp
   8bea8:	302ed43a 	srli	r23,r6,16
   8beac:	d8c00215 	stw	r3,8(sp)
   8beb0:	da000415 	stw	r8,16(sp)
   8beb4:	da800115 	stw	r10,4(sp)
   8beb8:	008b18c0 	call	8b18c <__mulsi3>
   8bebc:	800b883a 	mov	r5,r16
   8bec0:	e009883a 	mov	r4,fp
   8bec4:	d8800515 	stw	r2,20(sp)
   8bec8:	008b18c0 	call	8b18c <__mulsi3>
   8becc:	8009883a 	mov	r4,r16
   8bed0:	b80b883a 	mov	r5,r23
   8bed4:	d8800315 	stw	r2,12(sp)
   8bed8:	008b18c0 	call	8b18c <__mulsi3>
   8bedc:	da800117 	ldw	r10,4(sp)
   8bee0:	b80b883a 	mov	r5,r23
   8bee4:	1021883a 	mov	r16,r2
   8bee8:	5009883a 	mov	r4,r10
   8beec:	008b18c0 	call	8b18c <__mulsi3>
   8bef0:	d9c00517 	ldw	r7,20(sp)
   8bef4:	da400317 	ldw	r9,12(sp)
   8bef8:	d8c00217 	ldw	r3,8(sp)
   8befc:	3808d43a 	srli	r4,r7,16
   8bf00:	1245883a 	add	r2,r2,r9
   8bf04:	da000417 	ldw	r8,16(sp)
   8bf08:	2085883a 	add	r2,r4,r2
   8bf0c:	1240022e 	bgeu	r2,r9,8bf18 <__divdf3+0x4b8>
   8bf10:	01000074 	movhi	r4,1
   8bf14:	8121883a 	add	r16,r16,r4
   8bf18:	1008d43a 	srli	r4,r2,16
   8bf1c:	1004943a 	slli	r2,r2,16
   8bf20:	39ffffcc 	andi	r7,r7,65535
   8bf24:	2409883a 	add	r4,r4,r16
   8bf28:	11c5883a 	add	r2,r2,r7
   8bf2c:	4100bb36 	bltu	r8,r4,8c21c <__divdf3+0x7bc>
   8bf30:	4100d726 	beq	r8,r4,8c290 <__divdf3+0x830>
   8bf34:	4109c83a 	sub	r4,r8,r4
   8bf38:	a8a1c83a 	sub	r16,r21,r2
   8bf3c:	ac2b803a 	cmpltu	r21,r21,r16
   8bf40:	256bc83a 	sub	r21,r4,r21
   8bf44:	b540d926 	beq	r22,r21,8c2ac <__divdf3+0x84c>
   8bf48:	a00b883a 	mov	r5,r20
   8bf4c:	a809883a 	mov	r4,r21
   8bf50:	d8c00215 	stw	r3,8(sp)
   8bf54:	0080c040 	call	80c04 <__udivsi3>
   8bf58:	100b883a 	mov	r5,r2
   8bf5c:	9009883a 	mov	r4,r18
   8bf60:	d8800515 	stw	r2,20(sp)
   8bf64:	008b18c0 	call	8b18c <__mulsi3>
   8bf68:	a809883a 	mov	r4,r21
   8bf6c:	a00b883a 	mov	r5,r20
   8bf70:	d8800415 	stw	r2,16(sp)
   8bf74:	0080c680 	call	80c68 <__umodsi3>
   8bf78:	1004943a 	slli	r2,r2,16
   8bf7c:	8008d43a 	srli	r4,r16,16
   8bf80:	da000417 	ldw	r8,16(sp)
   8bf84:	d8c00217 	ldw	r3,8(sp)
   8bf88:	2084b03a 	or	r2,r4,r2
   8bf8c:	d9c00517 	ldw	r7,20(sp)
   8bf90:	1200062e 	bgeu	r2,r8,8bfac <__divdf3+0x54c>
   8bf94:	1585883a 	add	r2,r2,r22
   8bf98:	393fffc4 	addi	r4,r7,-1
   8bf9c:	1580c536 	bltu	r2,r22,8c2b4 <__divdf3+0x854>
   8bfa0:	1200c42e 	bgeu	r2,r8,8c2b4 <__divdf3+0x854>
   8bfa4:	39ffff84 	addi	r7,r7,-2
   8bfa8:	1585883a 	add	r2,r2,r22
   8bfac:	122bc83a 	sub	r21,r2,r8
   8bfb0:	a00b883a 	mov	r5,r20
   8bfb4:	a809883a 	mov	r4,r21
   8bfb8:	d8c00215 	stw	r3,8(sp)
   8bfbc:	d9c00515 	stw	r7,20(sp)
   8bfc0:	0080c040 	call	80c04 <__udivsi3>
   8bfc4:	9009883a 	mov	r4,r18
   8bfc8:	100b883a 	mov	r5,r2
   8bfcc:	d8800415 	stw	r2,16(sp)
   8bfd0:	008b18c0 	call	8b18c <__mulsi3>
   8bfd4:	a809883a 	mov	r4,r21
   8bfd8:	a00b883a 	mov	r5,r20
   8bfdc:	1025883a 	mov	r18,r2
   8bfe0:	0080c680 	call	80c68 <__umodsi3>
   8bfe4:	1004943a 	slli	r2,r2,16
   8bfe8:	813fffcc 	andi	r4,r16,65535
   8bfec:	d8c00217 	ldw	r3,8(sp)
   8bff0:	20a0b03a 	or	r16,r4,r2
   8bff4:	d9c00517 	ldw	r7,20(sp)
   8bff8:	da000417 	ldw	r8,16(sp)
   8bffc:	8480062e 	bgeu	r16,r18,8c018 <__divdf3+0x5b8>
   8c000:	85a1883a 	add	r16,r16,r22
   8c004:	40bfffc4 	addi	r2,r8,-1
   8c008:	8580ac36 	bltu	r16,r22,8c2bc <__divdf3+0x85c>
   8c00c:	8480ab2e 	bgeu	r16,r18,8c2bc <__divdf3+0x85c>
   8c010:	423fff84 	addi	r8,r8,-2
   8c014:	85a1883a 	add	r16,r16,r22
   8c018:	3804943a 	slli	r2,r7,16
   8c01c:	84a1c83a 	sub	r16,r16,r18
   8c020:	e009883a 	mov	r4,fp
   8c024:	1228b03a 	or	r20,r2,r8
   8c028:	a1ffffcc 	andi	r7,r20,65535
   8c02c:	a024d43a 	srli	r18,r20,16
   8c030:	380b883a 	mov	r5,r7
   8c034:	d8c00215 	stw	r3,8(sp)
   8c038:	d9c00515 	stw	r7,20(sp)
   8c03c:	008b18c0 	call	8b18c <__mulsi3>
   8c040:	900b883a 	mov	r5,r18
   8c044:	e009883a 	mov	r4,fp
   8c048:	102b883a 	mov	r21,r2
   8c04c:	008b18c0 	call	8b18c <__mulsi3>
   8c050:	900b883a 	mov	r5,r18
   8c054:	b809883a 	mov	r4,r23
   8c058:	1039883a 	mov	fp,r2
   8c05c:	008b18c0 	call	8b18c <__mulsi3>
   8c060:	d9c00517 	ldw	r7,20(sp)
   8c064:	b80b883a 	mov	r5,r23
   8c068:	1025883a 	mov	r18,r2
   8c06c:	3809883a 	mov	r4,r7
   8c070:	008b18c0 	call	8b18c <__mulsi3>
   8c074:	a808d43a 	srli	r4,r21,16
   8c078:	1705883a 	add	r2,r2,fp
   8c07c:	d8c00217 	ldw	r3,8(sp)
   8c080:	2085883a 	add	r2,r4,r2
   8c084:	1700022e 	bgeu	r2,fp,8c090 <__divdf3+0x630>
   8c088:	01000074 	movhi	r4,1
   8c08c:	9125883a 	add	r18,r18,r4
   8c090:	1008d43a 	srli	r4,r2,16
   8c094:	1004943a 	slli	r2,r2,16
   8c098:	ad7fffcc 	andi	r21,r21,65535
   8c09c:	2489883a 	add	r4,r4,r18
   8c0a0:	1545883a 	add	r2,r2,r21
   8c0a4:	81003836 	bltu	r16,r4,8c188 <__divdf3+0x728>
   8c0a8:	81003626 	beq	r16,r4,8c184 <__divdf3+0x724>
   8c0ac:	a5000054 	ori	r20,r20,1
   8c0b0:	1880ffc4 	addi	r2,r3,1023
   8c0b4:	00bf2e0e 	bge	zero,r2,8bd70 <__alt_data_end+0xfffcd570>
   8c0b8:	a10001cc 	andi	r4,r20,7
   8c0bc:	20000726 	beq	r4,zero,8c0dc <__divdf3+0x67c>
   8c0c0:	a10003cc 	andi	r4,r20,15
   8c0c4:	01400104 	movi	r5,4
   8c0c8:	21400426 	beq	r4,r5,8c0dc <__divdf3+0x67c>
   8c0cc:	a149883a 	add	r4,r20,r5
   8c0d0:	2529803a 	cmpltu	r20,r4,r20
   8c0d4:	8d23883a 	add	r17,r17,r20
   8c0d8:	2029883a 	mov	r20,r4
   8c0dc:	8900402c 	andhi	r4,r17,256
   8c0e0:	20000426 	beq	r4,zero,8c0f4 <__divdf3+0x694>
   8c0e4:	18810004 	addi	r2,r3,1024
   8c0e8:	00ffc034 	movhi	r3,65280
   8c0ec:	18ffffc4 	addi	r3,r3,-1
   8c0f0:	88e2703a 	and	r17,r17,r3
   8c0f4:	00c1ff84 	movi	r3,2046
   8c0f8:	18beb416 	blt	r3,r2,8bbcc <__alt_data_end+0xfffcd3cc>
   8c0fc:	a028d0fa 	srli	r20,r20,3
   8c100:	882a977a 	slli	r21,r17,29
   8c104:	8820927a 	slli	r16,r17,9
   8c108:	1081ffcc 	andi	r2,r2,2047
   8c10c:	ad2ab03a 	or	r21,r21,r20
   8c110:	8020d33a 	srli	r16,r16,12
   8c114:	9900004c 	andi	r4,r19,1
   8c118:	003eb006 	br	8bbdc <__alt_data_end+0xfffcd3dc>
   8c11c:	8080022c 	andhi	r2,r16,8
   8c120:	10001226 	beq	r2,zero,8c16c <__divdf3+0x70c>
   8c124:	8880022c 	andhi	r2,r17,8
   8c128:	1000101e 	bne	r2,zero,8c16c <__divdf3+0x70c>
   8c12c:	00800434 	movhi	r2,16
   8c130:	8c000234 	orhi	r16,r17,8
   8c134:	10bfffc4 	addi	r2,r2,-1
   8c138:	b809883a 	mov	r4,r23
   8c13c:	80a0703a 	and	r16,r16,r2
   8c140:	a02b883a 	mov	r21,r20
   8c144:	003f0806 	br	8bd68 <__alt_data_end+0xfffcd568>
   8c148:	008000c4 	movi	r2,3
   8c14c:	3880b126 	beq	r7,r2,8c414 <__divdf3+0x9b4>
   8c150:	00800044 	movi	r2,1
   8c154:	38805b1e 	bne	r7,r2,8c2c4 <__divdf3+0x864>
   8c158:	e009883a 	mov	r4,fp
   8c15c:	0005883a 	mov	r2,zero
   8c160:	0021883a 	mov	r16,zero
   8c164:	002b883a 	mov	r21,zero
   8c168:	003e9c06 	br	8bbdc <__alt_data_end+0xfffcd3dc>
   8c16c:	00800434 	movhi	r2,16
   8c170:	84000234 	orhi	r16,r16,8
   8c174:	10bfffc4 	addi	r2,r2,-1
   8c178:	b009883a 	mov	r4,r22
   8c17c:	80a0703a 	and	r16,r16,r2
   8c180:	003ef906 	br	8bd68 <__alt_data_end+0xfffcd568>
   8c184:	103fca26 	beq	r2,zero,8c0b0 <__alt_data_end+0xfffcd8b0>
   8c188:	b421883a 	add	r16,r22,r16
   8c18c:	a17fffc4 	addi	r5,r20,-1
   8c190:	8580422e 	bgeu	r16,r22,8c29c <__divdf3+0x83c>
   8c194:	2829883a 	mov	r20,r5
   8c198:	813fc41e 	bne	r16,r4,8c0ac <__alt_data_end+0xfffcd8ac>
   8c19c:	d9800017 	ldw	r6,0(sp)
   8c1a0:	30bfc21e 	bne	r6,r2,8c0ac <__alt_data_end+0xfffcd8ac>
   8c1a4:	003fc206 	br	8c0b0 <__alt_data_end+0xfffcd8b0>
   8c1a8:	143ff604 	addi	r16,r2,-40
   8c1ac:	8c20983a 	sll	r16,r17,r16
   8c1b0:	002b883a 	mov	r21,zero
   8c1b4:	003eb406 	br	8bc88 <__alt_data_end+0xfffcd488>
   8c1b8:	d9800215 	stw	r6,8(sp)
   8c1bc:	d9c00515 	stw	r7,20(sp)
   8c1c0:	da000415 	stw	r8,16(sp)
   8c1c4:	008d9f40 	call	8d9f4 <__clzsi2>
   8c1c8:	10800804 	addi	r2,r2,32
   8c1cc:	da000417 	ldw	r8,16(sp)
   8c1d0:	d9c00517 	ldw	r7,20(sp)
   8c1d4:	d9800217 	ldw	r6,8(sp)
   8c1d8:	003ea106 	br	8bc60 <__alt_data_end+0xfffcd460>
   8c1dc:	147ff604 	addi	r17,r2,-40
   8c1e0:	3462983a 	sll	r17,r6,r17
   8c1e4:	0029883a 	mov	r20,zero
   8c1e8:	003ec906 	br	8bd10 <__alt_data_end+0xfffcd510>
   8c1ec:	3009883a 	mov	r4,r6
   8c1f0:	d9400115 	stw	r5,4(sp)
   8c1f4:	d9800215 	stw	r6,8(sp)
   8c1f8:	da000415 	stw	r8,16(sp)
   8c1fc:	da400315 	stw	r9,12(sp)
   8c200:	008d9f40 	call	8d9f4 <__clzsi2>
   8c204:	10800804 	addi	r2,r2,32
   8c208:	da400317 	ldw	r9,12(sp)
   8c20c:	da000417 	ldw	r8,16(sp)
   8c210:	d9800217 	ldw	r6,8(sp)
   8c214:	d9400117 	ldw	r5,4(sp)
   8c218:	003eb306 	br	8bce8 <__alt_data_end+0xfffcd4e8>
   8c21c:	d9800017 	ldw	r6,0(sp)
   8c220:	a9ab883a 	add	r21,r21,r6
   8c224:	a98b803a 	cmpltu	r5,r21,r6
   8c228:	2d8b883a 	add	r5,r5,r22
   8c22c:	2a11883a 	add	r8,r5,r8
   8c230:	897fffc4 	addi	r5,r17,-1
   8c234:	b2000c2e 	bgeu	r22,r8,8c268 <__divdf3+0x808>
   8c238:	41003f36 	bltu	r8,r4,8c338 <__divdf3+0x8d8>
   8c23c:	22006c26 	beq	r4,r8,8c3f0 <__divdf3+0x990>
   8c240:	4109c83a 	sub	r4,r8,r4
   8c244:	2823883a 	mov	r17,r5
   8c248:	003f3b06 	br	8bf38 <__alt_data_end+0xfffcd738>
   8c24c:	ad3ed336 	bltu	r21,r20,8bd9c <__alt_data_end+0xfffcd59c>
   8c250:	a804d07a 	srli	r2,r21,1
   8c254:	802e97fa 	slli	r23,r16,31
   8c258:	a82a97fa 	slli	r21,r21,31
   8c25c:	8020d07a 	srli	r16,r16,1
   8c260:	b8aeb03a 	or	r23,r23,r2
   8c264:	003ed006 	br	8bda8 <__alt_data_end+0xfffcd5a8>
   8c268:	b23ff51e 	bne	r22,r8,8c240 <__alt_data_end+0xfffcda40>
   8c26c:	d9800017 	ldw	r6,0(sp)
   8c270:	a9bff12e 	bgeu	r21,r6,8c238 <__alt_data_end+0xfffcda38>
   8c274:	b109c83a 	sub	r4,r22,r4
   8c278:	2823883a 	mov	r17,r5
   8c27c:	003f2e06 	br	8bf38 <__alt_data_end+0xfffcd738>
   8c280:	2021883a 	mov	r16,r4
   8c284:	003eff06 	br	8be84 <__alt_data_end+0xfffcd684>
   8c288:	2023883a 	mov	r17,r4
   8c28c:	003ee406 	br	8be20 <__alt_data_end+0xfffcd620>
   8c290:	a8bfe236 	bltu	r21,r2,8c21c <__alt_data_end+0xfffcda1c>
   8c294:	0009883a 	mov	r4,zero
   8c298:	003f2706 	br	8bf38 <__alt_data_end+0xfffcd738>
   8c29c:	81002d36 	bltu	r16,r4,8c354 <__divdf3+0x8f4>
   8c2a0:	24005626 	beq	r4,r16,8c3fc <__divdf3+0x99c>
   8c2a4:	2829883a 	mov	r20,r5
   8c2a8:	003f8006 	br	8c0ac <__alt_data_end+0xfffcd8ac>
   8c2ac:	053fffc4 	movi	r20,-1
   8c2b0:	003f7f06 	br	8c0b0 <__alt_data_end+0xfffcd8b0>
   8c2b4:	200f883a 	mov	r7,r4
   8c2b8:	003f3c06 	br	8bfac <__alt_data_end+0xfffcd7ac>
   8c2bc:	1011883a 	mov	r8,r2
   8c2c0:	003f5506 	br	8c018 <__alt_data_end+0xfffcd818>
   8c2c4:	e027883a 	mov	r19,fp
   8c2c8:	003f7906 	br	8c0b0 <__alt_data_end+0xfffcd8b0>
   8c2cc:	010007c4 	movi	r4,31
   8c2d0:	20c02816 	blt	r4,r3,8c374 <__divdf3+0x914>
   8c2d4:	00800804 	movi	r2,32
   8c2d8:	10c5c83a 	sub	r2,r2,r3
   8c2dc:	888a983a 	sll	r5,r17,r2
   8c2e0:	a0c8d83a 	srl	r4,r20,r3
   8c2e4:	a084983a 	sll	r2,r20,r2
   8c2e8:	88e2d83a 	srl	r17,r17,r3
   8c2ec:	2906b03a 	or	r3,r5,r4
   8c2f0:	1004c03a 	cmpne	r2,r2,zero
   8c2f4:	1886b03a 	or	r3,r3,r2
   8c2f8:	188001cc 	andi	r2,r3,7
   8c2fc:	10000726 	beq	r2,zero,8c31c <__divdf3+0x8bc>
   8c300:	188003cc 	andi	r2,r3,15
   8c304:	01000104 	movi	r4,4
   8c308:	11000426 	beq	r2,r4,8c31c <__divdf3+0x8bc>
   8c30c:	1805883a 	mov	r2,r3
   8c310:	10c00104 	addi	r3,r2,4
   8c314:	1885803a 	cmpltu	r2,r3,r2
   8c318:	88a3883a 	add	r17,r17,r2
   8c31c:	8880202c 	andhi	r2,r17,128
   8c320:	10002926 	beq	r2,zero,8c3c8 <__divdf3+0x968>
   8c324:	9900004c 	andi	r4,r19,1
   8c328:	00800044 	movi	r2,1
   8c32c:	0021883a 	mov	r16,zero
   8c330:	002b883a 	mov	r21,zero
   8c334:	003e2906 	br	8bbdc <__alt_data_end+0xfffcd3dc>
   8c338:	d9800017 	ldw	r6,0(sp)
   8c33c:	8c7fff84 	addi	r17,r17,-2
   8c340:	a9ab883a 	add	r21,r21,r6
   8c344:	a98b803a 	cmpltu	r5,r21,r6
   8c348:	2d8b883a 	add	r5,r5,r22
   8c34c:	2a11883a 	add	r8,r5,r8
   8c350:	003ef806 	br	8bf34 <__alt_data_end+0xfffcd734>
   8c354:	d9800017 	ldw	r6,0(sp)
   8c358:	318f883a 	add	r7,r6,r6
   8c35c:	398b803a 	cmpltu	r5,r7,r6
   8c360:	2d8d883a 	add	r6,r5,r22
   8c364:	81a1883a 	add	r16,r16,r6
   8c368:	a17fff84 	addi	r5,r20,-2
   8c36c:	d9c00015 	stw	r7,0(sp)
   8c370:	003f8806 	br	8c194 <__alt_data_end+0xfffcd994>
   8c374:	013ff844 	movi	r4,-31
   8c378:	2085c83a 	sub	r2,r4,r2
   8c37c:	8888d83a 	srl	r4,r17,r2
   8c380:	00800804 	movi	r2,32
   8c384:	18802126 	beq	r3,r2,8c40c <__divdf3+0x9ac>
   8c388:	04001004 	movi	r16,64
   8c38c:	80c7c83a 	sub	r3,r16,r3
   8c390:	88e0983a 	sll	r16,r17,r3
   8c394:	8504b03a 	or	r2,r16,r20
   8c398:	1004c03a 	cmpne	r2,r2,zero
   8c39c:	2084b03a 	or	r2,r4,r2
   8c3a0:	144001cc 	andi	r17,r2,7
   8c3a4:	88000d1e 	bne	r17,zero,8c3dc <__divdf3+0x97c>
   8c3a8:	0021883a 	mov	r16,zero
   8c3ac:	102ad0fa 	srli	r21,r2,3
   8c3b0:	9900004c 	andi	r4,r19,1
   8c3b4:	0005883a 	mov	r2,zero
   8c3b8:	ac6ab03a 	or	r21,r21,r17
   8c3bc:	003e0706 	br	8bbdc <__alt_data_end+0xfffcd3dc>
   8c3c0:	1007883a 	mov	r3,r2
   8c3c4:	0023883a 	mov	r17,zero
   8c3c8:	8820927a 	slli	r16,r17,9
   8c3cc:	1805883a 	mov	r2,r3
   8c3d0:	8822977a 	slli	r17,r17,29
   8c3d4:	8020d33a 	srli	r16,r16,12
   8c3d8:	003ff406 	br	8c3ac <__alt_data_end+0xfffcdbac>
   8c3dc:	10c003cc 	andi	r3,r2,15
   8c3e0:	01000104 	movi	r4,4
   8c3e4:	193ff626 	beq	r3,r4,8c3c0 <__alt_data_end+0xfffcdbc0>
   8c3e8:	0023883a 	mov	r17,zero
   8c3ec:	003fc806 	br	8c310 <__alt_data_end+0xfffcdb10>
   8c3f0:	a8bfd136 	bltu	r21,r2,8c338 <__alt_data_end+0xfffcdb38>
   8c3f4:	2823883a 	mov	r17,r5
   8c3f8:	003fa606 	br	8c294 <__alt_data_end+0xfffcda94>
   8c3fc:	d9800017 	ldw	r6,0(sp)
   8c400:	30bfd436 	bltu	r6,r2,8c354 <__alt_data_end+0xfffcdb54>
   8c404:	2829883a 	mov	r20,r5
   8c408:	003f6406 	br	8c19c <__alt_data_end+0xfffcd99c>
   8c40c:	0021883a 	mov	r16,zero
   8c410:	003fe006 	br	8c394 <__alt_data_end+0xfffcdb94>
   8c414:	00800434 	movhi	r2,16
   8c418:	8c000234 	orhi	r16,r17,8
   8c41c:	10bfffc4 	addi	r2,r2,-1
   8c420:	e009883a 	mov	r4,fp
   8c424:	80a0703a 	and	r16,r16,r2
   8c428:	a02b883a 	mov	r21,r20
   8c42c:	003e4e06 	br	8bd68 <__alt_data_end+0xfffcd568>

0008c430 <__eqdf2>:
   8c430:	2804d53a 	srli	r2,r5,20
   8c434:	3806d53a 	srli	r3,r7,20
   8c438:	02000434 	movhi	r8,16
   8c43c:	423fffc4 	addi	r8,r8,-1
   8c440:	1081ffcc 	andi	r2,r2,2047
   8c444:	0281ffc4 	movi	r10,2047
   8c448:	2a12703a 	and	r9,r5,r8
   8c44c:	18c1ffcc 	andi	r3,r3,2047
   8c450:	3a10703a 	and	r8,r7,r8
   8c454:	280ad7fa 	srli	r5,r5,31
   8c458:	380ed7fa 	srli	r7,r7,31
   8c45c:	12801026 	beq	r2,r10,8c4a0 <__eqdf2+0x70>
   8c460:	0281ffc4 	movi	r10,2047
   8c464:	1a800a26 	beq	r3,r10,8c490 <__eqdf2+0x60>
   8c468:	10c00226 	beq	r2,r3,8c474 <__eqdf2+0x44>
   8c46c:	00800044 	movi	r2,1
   8c470:	f800283a 	ret
   8c474:	4a3ffd1e 	bne	r9,r8,8c46c <__alt_data_end+0xfffcdc6c>
   8c478:	21bffc1e 	bne	r4,r6,8c46c <__alt_data_end+0xfffcdc6c>
   8c47c:	29c00c26 	beq	r5,r7,8c4b0 <__eqdf2+0x80>
   8c480:	103ffa1e 	bne	r2,zero,8c46c <__alt_data_end+0xfffcdc6c>
   8c484:	2244b03a 	or	r2,r4,r9
   8c488:	1004c03a 	cmpne	r2,r2,zero
   8c48c:	f800283a 	ret
   8c490:	3214b03a 	or	r10,r6,r8
   8c494:	503ff426 	beq	r10,zero,8c468 <__alt_data_end+0xfffcdc68>
   8c498:	00800044 	movi	r2,1
   8c49c:	f800283a 	ret
   8c4a0:	2254b03a 	or	r10,r4,r9
   8c4a4:	503fee26 	beq	r10,zero,8c460 <__alt_data_end+0xfffcdc60>
   8c4a8:	00800044 	movi	r2,1
   8c4ac:	f800283a 	ret
   8c4b0:	0005883a 	mov	r2,zero
   8c4b4:	f800283a 	ret

0008c4b8 <__gedf2>:
   8c4b8:	2804d53a 	srli	r2,r5,20
   8c4bc:	3806d53a 	srli	r3,r7,20
   8c4c0:	02000434 	movhi	r8,16
   8c4c4:	423fffc4 	addi	r8,r8,-1
   8c4c8:	1081ffcc 	andi	r2,r2,2047
   8c4cc:	0241ffc4 	movi	r9,2047
   8c4d0:	2a14703a 	and	r10,r5,r8
   8c4d4:	18c1ffcc 	andi	r3,r3,2047
   8c4d8:	3a10703a 	and	r8,r7,r8
   8c4dc:	280ad7fa 	srli	r5,r5,31
   8c4e0:	380ed7fa 	srli	r7,r7,31
   8c4e4:	12401d26 	beq	r2,r9,8c55c <__gedf2+0xa4>
   8c4e8:	0241ffc4 	movi	r9,2047
   8c4ec:	1a401226 	beq	r3,r9,8c538 <__gedf2+0x80>
   8c4f0:	1000081e 	bne	r2,zero,8c514 <__gedf2+0x5c>
   8c4f4:	2296b03a 	or	r11,r4,r10
   8c4f8:	5813003a 	cmpeq	r9,r11,zero
   8c4fc:	1800091e 	bne	r3,zero,8c524 <__gedf2+0x6c>
   8c500:	3218b03a 	or	r12,r6,r8
   8c504:	6000071e 	bne	r12,zero,8c524 <__gedf2+0x6c>
   8c508:	0005883a 	mov	r2,zero
   8c50c:	5800101e 	bne	r11,zero,8c550 <__gedf2+0x98>
   8c510:	f800283a 	ret
   8c514:	18000c1e 	bne	r3,zero,8c548 <__gedf2+0x90>
   8c518:	3212b03a 	or	r9,r6,r8
   8c51c:	48000c26 	beq	r9,zero,8c550 <__gedf2+0x98>
   8c520:	0013883a 	mov	r9,zero
   8c524:	39c03fcc 	andi	r7,r7,255
   8c528:	48000826 	beq	r9,zero,8c54c <__gedf2+0x94>
   8c52c:	38000926 	beq	r7,zero,8c554 <__gedf2+0x9c>
   8c530:	00800044 	movi	r2,1
   8c534:	f800283a 	ret
   8c538:	3212b03a 	or	r9,r6,r8
   8c53c:	483fec26 	beq	r9,zero,8c4f0 <__alt_data_end+0xfffcdcf0>
   8c540:	00bfff84 	movi	r2,-2
   8c544:	f800283a 	ret
   8c548:	39c03fcc 	andi	r7,r7,255
   8c54c:	29c00626 	beq	r5,r7,8c568 <__gedf2+0xb0>
   8c550:	283ff726 	beq	r5,zero,8c530 <__alt_data_end+0xfffcdd30>
   8c554:	00bfffc4 	movi	r2,-1
   8c558:	f800283a 	ret
   8c55c:	2292b03a 	or	r9,r4,r10
   8c560:	483fe126 	beq	r9,zero,8c4e8 <__alt_data_end+0xfffcdce8>
   8c564:	003ff606 	br	8c540 <__alt_data_end+0xfffcdd40>
   8c568:	18bff916 	blt	r3,r2,8c550 <__alt_data_end+0xfffcdd50>
   8c56c:	10c00316 	blt	r2,r3,8c57c <__gedf2+0xc4>
   8c570:	42bff736 	bltu	r8,r10,8c550 <__alt_data_end+0xfffcdd50>
   8c574:	52000326 	beq	r10,r8,8c584 <__gedf2+0xcc>
   8c578:	5200042e 	bgeu	r10,r8,8c58c <__gedf2+0xd4>
   8c57c:	283fec1e 	bne	r5,zero,8c530 <__alt_data_end+0xfffcdd30>
   8c580:	003ff406 	br	8c554 <__alt_data_end+0xfffcdd54>
   8c584:	313ff236 	bltu	r6,r4,8c550 <__alt_data_end+0xfffcdd50>
   8c588:	21bffc36 	bltu	r4,r6,8c57c <__alt_data_end+0xfffcdd7c>
   8c58c:	0005883a 	mov	r2,zero
   8c590:	f800283a 	ret

0008c594 <__ledf2>:
   8c594:	2804d53a 	srli	r2,r5,20
   8c598:	3810d53a 	srli	r8,r7,20
   8c59c:	00c00434 	movhi	r3,16
   8c5a0:	18ffffc4 	addi	r3,r3,-1
   8c5a4:	1081ffcc 	andi	r2,r2,2047
   8c5a8:	0241ffc4 	movi	r9,2047
   8c5ac:	28d4703a 	and	r10,r5,r3
   8c5b0:	4201ffcc 	andi	r8,r8,2047
   8c5b4:	38c6703a 	and	r3,r7,r3
   8c5b8:	280ad7fa 	srli	r5,r5,31
   8c5bc:	380ed7fa 	srli	r7,r7,31
   8c5c0:	12401f26 	beq	r2,r9,8c640 <__ledf2+0xac>
   8c5c4:	0241ffc4 	movi	r9,2047
   8c5c8:	42401426 	beq	r8,r9,8c61c <__ledf2+0x88>
   8c5cc:	1000091e 	bne	r2,zero,8c5f4 <__ledf2+0x60>
   8c5d0:	2296b03a 	or	r11,r4,r10
   8c5d4:	5813003a 	cmpeq	r9,r11,zero
   8c5d8:	29403fcc 	andi	r5,r5,255
   8c5dc:	40000a1e 	bne	r8,zero,8c608 <__ledf2+0x74>
   8c5e0:	30d8b03a 	or	r12,r6,r3
   8c5e4:	6000081e 	bne	r12,zero,8c608 <__ledf2+0x74>
   8c5e8:	0005883a 	mov	r2,zero
   8c5ec:	5800111e 	bne	r11,zero,8c634 <__ledf2+0xa0>
   8c5f0:	f800283a 	ret
   8c5f4:	29403fcc 	andi	r5,r5,255
   8c5f8:	40000c1e 	bne	r8,zero,8c62c <__ledf2+0x98>
   8c5fc:	30d2b03a 	or	r9,r6,r3
   8c600:	48000c26 	beq	r9,zero,8c634 <__ledf2+0xa0>
   8c604:	0013883a 	mov	r9,zero
   8c608:	39c03fcc 	andi	r7,r7,255
   8c60c:	48000826 	beq	r9,zero,8c630 <__ledf2+0x9c>
   8c610:	38001126 	beq	r7,zero,8c658 <__ledf2+0xc4>
   8c614:	00800044 	movi	r2,1
   8c618:	f800283a 	ret
   8c61c:	30d2b03a 	or	r9,r6,r3
   8c620:	483fea26 	beq	r9,zero,8c5cc <__alt_data_end+0xfffcddcc>
   8c624:	00800084 	movi	r2,2
   8c628:	f800283a 	ret
   8c62c:	39c03fcc 	andi	r7,r7,255
   8c630:	39400726 	beq	r7,r5,8c650 <__ledf2+0xbc>
   8c634:	2800081e 	bne	r5,zero,8c658 <__ledf2+0xc4>
   8c638:	00800044 	movi	r2,1
   8c63c:	f800283a 	ret
   8c640:	2292b03a 	or	r9,r4,r10
   8c644:	483fdf26 	beq	r9,zero,8c5c4 <__alt_data_end+0xfffcddc4>
   8c648:	00800084 	movi	r2,2
   8c64c:	f800283a 	ret
   8c650:	4080030e 	bge	r8,r2,8c660 <__ledf2+0xcc>
   8c654:	383fef26 	beq	r7,zero,8c614 <__alt_data_end+0xfffcde14>
   8c658:	00bfffc4 	movi	r2,-1
   8c65c:	f800283a 	ret
   8c660:	123feb16 	blt	r2,r8,8c610 <__alt_data_end+0xfffcde10>
   8c664:	1abff336 	bltu	r3,r10,8c634 <__alt_data_end+0xfffcde34>
   8c668:	50c00326 	beq	r10,r3,8c678 <__ledf2+0xe4>
   8c66c:	50c0042e 	bgeu	r10,r3,8c680 <__ledf2+0xec>
   8c670:	283fe81e 	bne	r5,zero,8c614 <__alt_data_end+0xfffcde14>
   8c674:	003ff806 	br	8c658 <__alt_data_end+0xfffcde58>
   8c678:	313fee36 	bltu	r6,r4,8c634 <__alt_data_end+0xfffcde34>
   8c67c:	21bffc36 	bltu	r4,r6,8c670 <__alt_data_end+0xfffcde70>
   8c680:	0005883a 	mov	r2,zero
   8c684:	f800283a 	ret

0008c688 <__muldf3>:
   8c688:	deffee04 	addi	sp,sp,-72
   8c68c:	dd000c15 	stw	r20,48(sp)
   8c690:	2828d53a 	srli	r20,r5,20
   8c694:	ddc00f15 	stw	r23,60(sp)
   8c698:	282ed7fa 	srli	r23,r5,31
   8c69c:	dc000815 	stw	r16,32(sp)
   8c6a0:	04000434 	movhi	r16,16
   8c6a4:	dcc00b15 	stw	r19,44(sp)
   8c6a8:	843fffc4 	addi	r16,r16,-1
   8c6ac:	dfc01115 	stw	ra,68(sp)
   8c6b0:	df001015 	stw	fp,64(sp)
   8c6b4:	dd800e15 	stw	r22,56(sp)
   8c6b8:	dd400d15 	stw	r21,52(sp)
   8c6bc:	dc800a15 	stw	r18,40(sp)
   8c6c0:	dc400915 	stw	r17,36(sp)
   8c6c4:	a501ffcc 	andi	r20,r20,2047
   8c6c8:	2c20703a 	and	r16,r5,r16
   8c6cc:	b827883a 	mov	r19,r23
   8c6d0:	ba403fcc 	andi	r9,r23,255
   8c6d4:	a0006026 	beq	r20,zero,8c858 <__muldf3+0x1d0>
   8c6d8:	0081ffc4 	movi	r2,2047
   8c6dc:	202d883a 	mov	r22,r4
   8c6e0:	a0803626 	beq	r20,r2,8c7bc <__muldf3+0x134>
   8c6e4:	84000434 	orhi	r16,r16,16
   8c6e8:	200ad77a 	srli	r5,r4,29
   8c6ec:	800490fa 	slli	r2,r16,3
   8c6f0:	202c90fa 	slli	r22,r4,3
   8c6f4:	a53f0044 	addi	r20,r20,-1023
   8c6f8:	28a0b03a 	or	r16,r5,r2
   8c6fc:	002b883a 	mov	r21,zero
   8c700:	000b883a 	mov	r5,zero
   8c704:	3804d53a 	srli	r2,r7,20
   8c708:	3838d7fa 	srli	fp,r7,31
   8c70c:	04400434 	movhi	r17,16
   8c710:	8c7fffc4 	addi	r17,r17,-1
   8c714:	1081ffcc 	andi	r2,r2,2047
   8c718:	3025883a 	mov	r18,r6
   8c71c:	3c62703a 	and	r17,r7,r17
   8c720:	e2803fcc 	andi	r10,fp,255
   8c724:	10006d26 	beq	r2,zero,8c8dc <__muldf3+0x254>
   8c728:	00c1ffc4 	movi	r3,2047
   8c72c:	10c06526 	beq	r2,r3,8c8c4 <__muldf3+0x23c>
   8c730:	8c400434 	orhi	r17,r17,16
   8c734:	300ed77a 	srli	r7,r6,29
   8c738:	880690fa 	slli	r3,r17,3
   8c73c:	302490fa 	slli	r18,r6,3
   8c740:	10bf0044 	addi	r2,r2,-1023
   8c744:	38e2b03a 	or	r17,r7,r3
   8c748:	000f883a 	mov	r7,zero
   8c74c:	a087883a 	add	r3,r20,r2
   8c750:	010003c4 	movi	r4,15
   8c754:	3d44b03a 	or	r2,r7,r21
   8c758:	e5ccf03a 	xor	r6,fp,r23
   8c75c:	1a000044 	addi	r8,r3,1
   8c760:	20809b36 	bltu	r4,r2,8c9d0 <__muldf3+0x348>
   8c764:	100490ba 	slli	r2,r2,2
   8c768:	01000274 	movhi	r4,9
   8c76c:	2131df04 	addi	r4,r4,-14468
   8c770:	1105883a 	add	r2,r2,r4
   8c774:	10800017 	ldw	r2,0(r2)
   8c778:	1000683a 	jmp	r2
   8c77c:	0008c9d0 	cmplti	zero,zero,8999
   8c780:	0008c7dc 	xori	zero,zero,8991
   8c784:	0008c7dc 	xori	zero,zero,8991
   8c788:	0008c7d8 	cmpnei	zero,zero,8991
   8c78c:	0008c9ac 	andhi	zero,zero,8998
   8c790:	0008c9ac 	andhi	zero,zero,8998
   8c794:	0008c994 	movui	zero,8998
   8c798:	0008c7d8 	cmpnei	zero,zero,8991
   8c79c:	0008c9ac 	andhi	zero,zero,8998
   8c7a0:	0008c994 	movui	zero,8998
   8c7a4:	0008c9ac 	andhi	zero,zero,8998
   8c7a8:	0008c7d8 	cmpnei	zero,zero,8991
   8c7ac:	0008c9bc 	xorhi	zero,zero,8998
   8c7b0:	0008c9bc 	xorhi	zero,zero,8998
   8c7b4:	0008c9bc 	xorhi	zero,zero,8998
   8c7b8:	0008cd1c 	xori	zero,zero,9012
   8c7bc:	2404b03a 	or	r2,r4,r16
   8c7c0:	1000711e 	bne	r2,zero,8c988 <__muldf3+0x300>
   8c7c4:	05400204 	movi	r21,8
   8c7c8:	0021883a 	mov	r16,zero
   8c7cc:	002d883a 	mov	r22,zero
   8c7d0:	01400084 	movi	r5,2
   8c7d4:	003fcb06 	br	8c704 <__alt_data_end+0xfffcdf04>
   8c7d8:	500d883a 	mov	r6,r10
   8c7dc:	00800084 	movi	r2,2
   8c7e0:	38805926 	beq	r7,r2,8c948 <__muldf3+0x2c0>
   8c7e4:	008000c4 	movi	r2,3
   8c7e8:	3881bb26 	beq	r7,r2,8ced8 <__muldf3+0x850>
   8c7ec:	00800044 	movi	r2,1
   8c7f0:	3881961e 	bne	r7,r2,8ce4c <__muldf3+0x7c4>
   8c7f4:	3027883a 	mov	r19,r6
   8c7f8:	0005883a 	mov	r2,zero
   8c7fc:	0021883a 	mov	r16,zero
   8c800:	002d883a 	mov	r22,zero
   8c804:	1004953a 	slli	r2,r2,20
   8c808:	98c03fcc 	andi	r3,r19,255
   8c80c:	04400434 	movhi	r17,16
   8c810:	8c7fffc4 	addi	r17,r17,-1
   8c814:	180697fa 	slli	r3,r3,31
   8c818:	8460703a 	and	r16,r16,r17
   8c81c:	80a0b03a 	or	r16,r16,r2
   8c820:	80c6b03a 	or	r3,r16,r3
   8c824:	b005883a 	mov	r2,r22
   8c828:	dfc01117 	ldw	ra,68(sp)
   8c82c:	df001017 	ldw	fp,64(sp)
   8c830:	ddc00f17 	ldw	r23,60(sp)
   8c834:	dd800e17 	ldw	r22,56(sp)
   8c838:	dd400d17 	ldw	r21,52(sp)
   8c83c:	dd000c17 	ldw	r20,48(sp)
   8c840:	dcc00b17 	ldw	r19,44(sp)
   8c844:	dc800a17 	ldw	r18,40(sp)
   8c848:	dc400917 	ldw	r17,36(sp)
   8c84c:	dc000817 	ldw	r16,32(sp)
   8c850:	dec01204 	addi	sp,sp,72
   8c854:	f800283a 	ret
   8c858:	2404b03a 	or	r2,r4,r16
   8c85c:	202b883a 	mov	r21,r4
   8c860:	10004426 	beq	r2,zero,8c974 <__muldf3+0x2ec>
   8c864:	80015126 	beq	r16,zero,8cdac <__muldf3+0x724>
   8c868:	8009883a 	mov	r4,r16
   8c86c:	d9800715 	stw	r6,28(sp)
   8c870:	d9c00215 	stw	r7,8(sp)
   8c874:	da400415 	stw	r9,16(sp)
   8c878:	008d9f40 	call	8d9f4 <__clzsi2>
   8c87c:	d9800717 	ldw	r6,28(sp)
   8c880:	d9c00217 	ldw	r7,8(sp)
   8c884:	da400417 	ldw	r9,16(sp)
   8c888:	113ffd44 	addi	r4,r2,-11
   8c88c:	00c00704 	movi	r3,28
   8c890:	19014216 	blt	r3,r4,8cd9c <__muldf3+0x714>
   8c894:	00c00744 	movi	r3,29
   8c898:	15bffe04 	addi	r22,r2,-8
   8c89c:	1907c83a 	sub	r3,r3,r4
   8c8a0:	85a0983a 	sll	r16,r16,r22
   8c8a4:	a8c6d83a 	srl	r3,r21,r3
   8c8a8:	adac983a 	sll	r22,r21,r22
   8c8ac:	1c20b03a 	or	r16,r3,r16
   8c8b0:	1080fcc4 	addi	r2,r2,1011
   8c8b4:	00a9c83a 	sub	r20,zero,r2
   8c8b8:	002b883a 	mov	r21,zero
   8c8bc:	000b883a 	mov	r5,zero
   8c8c0:	003f9006 	br	8c704 <__alt_data_end+0xfffcdf04>
   8c8c4:	3446b03a 	or	r3,r6,r17
   8c8c8:	1800281e 	bne	r3,zero,8c96c <__muldf3+0x2e4>
   8c8cc:	0023883a 	mov	r17,zero
   8c8d0:	0025883a 	mov	r18,zero
   8c8d4:	01c00084 	movi	r7,2
   8c8d8:	003f9c06 	br	8c74c <__alt_data_end+0xfffcdf4c>
   8c8dc:	3446b03a 	or	r3,r6,r17
   8c8e0:	18001e26 	beq	r3,zero,8c95c <__muldf3+0x2d4>
   8c8e4:	88012126 	beq	r17,zero,8cd6c <__muldf3+0x6e4>
   8c8e8:	8809883a 	mov	r4,r17
   8c8ec:	d9400215 	stw	r5,8(sp)
   8c8f0:	d9800715 	stw	r6,28(sp)
   8c8f4:	da400415 	stw	r9,16(sp)
   8c8f8:	da800315 	stw	r10,12(sp)
   8c8fc:	008d9f40 	call	8d9f4 <__clzsi2>
   8c900:	d9400217 	ldw	r5,8(sp)
   8c904:	d9800717 	ldw	r6,28(sp)
   8c908:	da400417 	ldw	r9,16(sp)
   8c90c:	da800317 	ldw	r10,12(sp)
   8c910:	113ffd44 	addi	r4,r2,-11
   8c914:	00c00704 	movi	r3,28
   8c918:	19011016 	blt	r3,r4,8cd5c <__muldf3+0x6d4>
   8c91c:	00c00744 	movi	r3,29
   8c920:	14bffe04 	addi	r18,r2,-8
   8c924:	1907c83a 	sub	r3,r3,r4
   8c928:	8ca2983a 	sll	r17,r17,r18
   8c92c:	30c6d83a 	srl	r3,r6,r3
   8c930:	34a4983a 	sll	r18,r6,r18
   8c934:	1c62b03a 	or	r17,r3,r17
   8c938:	1080fcc4 	addi	r2,r2,1011
   8c93c:	0085c83a 	sub	r2,zero,r2
   8c940:	000f883a 	mov	r7,zero
   8c944:	003f8106 	br	8c74c <__alt_data_end+0xfffcdf4c>
   8c948:	3027883a 	mov	r19,r6
   8c94c:	0081ffc4 	movi	r2,2047
   8c950:	0021883a 	mov	r16,zero
   8c954:	002d883a 	mov	r22,zero
   8c958:	003faa06 	br	8c804 <__alt_data_end+0xfffce004>
   8c95c:	0023883a 	mov	r17,zero
   8c960:	0025883a 	mov	r18,zero
   8c964:	01c00044 	movi	r7,1
   8c968:	003f7806 	br	8c74c <__alt_data_end+0xfffcdf4c>
   8c96c:	01c000c4 	movi	r7,3
   8c970:	003f7606 	br	8c74c <__alt_data_end+0xfffcdf4c>
   8c974:	05400104 	movi	r21,4
   8c978:	0021883a 	mov	r16,zero
   8c97c:	002d883a 	mov	r22,zero
   8c980:	01400044 	movi	r5,1
   8c984:	003f5f06 	br	8c704 <__alt_data_end+0xfffcdf04>
   8c988:	05400304 	movi	r21,12
   8c98c:	014000c4 	movi	r5,3
   8c990:	003f5c06 	br	8c704 <__alt_data_end+0xfffcdf04>
   8c994:	04000434 	movhi	r16,16
   8c998:	0027883a 	mov	r19,zero
   8c99c:	843fffc4 	addi	r16,r16,-1
   8c9a0:	05bfffc4 	movi	r22,-1
   8c9a4:	0081ffc4 	movi	r2,2047
   8c9a8:	003f9606 	br	8c804 <__alt_data_end+0xfffce004>
   8c9ac:	8023883a 	mov	r17,r16
   8c9b0:	b025883a 	mov	r18,r22
   8c9b4:	280f883a 	mov	r7,r5
   8c9b8:	003f8806 	br	8c7dc <__alt_data_end+0xfffcdfdc>
   8c9bc:	8023883a 	mov	r17,r16
   8c9c0:	b025883a 	mov	r18,r22
   8c9c4:	480d883a 	mov	r6,r9
   8c9c8:	280f883a 	mov	r7,r5
   8c9cc:	003f8306 	br	8c7dc <__alt_data_end+0xfffcdfdc>
   8c9d0:	b026d43a 	srli	r19,r22,16
   8c9d4:	902ed43a 	srli	r23,r18,16
   8c9d8:	b5bfffcc 	andi	r22,r22,65535
   8c9dc:	94bfffcc 	andi	r18,r18,65535
   8c9e0:	b00b883a 	mov	r5,r22
   8c9e4:	9009883a 	mov	r4,r18
   8c9e8:	d8c00515 	stw	r3,20(sp)
   8c9ec:	d9800715 	stw	r6,28(sp)
   8c9f0:	da000615 	stw	r8,24(sp)
   8c9f4:	008b18c0 	call	8b18c <__mulsi3>
   8c9f8:	980b883a 	mov	r5,r19
   8c9fc:	9009883a 	mov	r4,r18
   8ca00:	1029883a 	mov	r20,r2
   8ca04:	008b18c0 	call	8b18c <__mulsi3>
   8ca08:	b80b883a 	mov	r5,r23
   8ca0c:	9809883a 	mov	r4,r19
   8ca10:	102b883a 	mov	r21,r2
   8ca14:	008b18c0 	call	8b18c <__mulsi3>
   8ca18:	b809883a 	mov	r4,r23
   8ca1c:	b00b883a 	mov	r5,r22
   8ca20:	1039883a 	mov	fp,r2
   8ca24:	008b18c0 	call	8b18c <__mulsi3>
   8ca28:	a008d43a 	srli	r4,r20,16
   8ca2c:	1545883a 	add	r2,r2,r21
   8ca30:	d8c00517 	ldw	r3,20(sp)
   8ca34:	2085883a 	add	r2,r4,r2
   8ca38:	d9800717 	ldw	r6,28(sp)
   8ca3c:	da000617 	ldw	r8,24(sp)
   8ca40:	1540022e 	bgeu	r2,r21,8ca4c <__muldf3+0x3c4>
   8ca44:	01000074 	movhi	r4,1
   8ca48:	e139883a 	add	fp,fp,r4
   8ca4c:	100e943a 	slli	r7,r2,16
   8ca50:	1004d43a 	srli	r2,r2,16
   8ca54:	882ad43a 	srli	r21,r17,16
   8ca58:	a53fffcc 	andi	r20,r20,65535
   8ca5c:	8c7fffcc 	andi	r17,r17,65535
   8ca60:	3d29883a 	add	r20,r7,r20
   8ca64:	b00b883a 	mov	r5,r22
   8ca68:	8809883a 	mov	r4,r17
   8ca6c:	d8c00515 	stw	r3,20(sp)
   8ca70:	d9800715 	stw	r6,28(sp)
   8ca74:	da000615 	stw	r8,24(sp)
   8ca78:	dd000115 	stw	r20,4(sp)
   8ca7c:	d8800015 	stw	r2,0(sp)
   8ca80:	008b18c0 	call	8b18c <__mulsi3>
   8ca84:	980b883a 	mov	r5,r19
   8ca88:	8809883a 	mov	r4,r17
   8ca8c:	d8800215 	stw	r2,8(sp)
   8ca90:	008b18c0 	call	8b18c <__mulsi3>
   8ca94:	9809883a 	mov	r4,r19
   8ca98:	a80b883a 	mov	r5,r21
   8ca9c:	1029883a 	mov	r20,r2
   8caa0:	008b18c0 	call	8b18c <__mulsi3>
   8caa4:	b00b883a 	mov	r5,r22
   8caa8:	a809883a 	mov	r4,r21
   8caac:	d8800415 	stw	r2,16(sp)
   8cab0:	008b18c0 	call	8b18c <__mulsi3>
   8cab4:	d9c00217 	ldw	r7,8(sp)
   8cab8:	1505883a 	add	r2,r2,r20
   8cabc:	d8c00517 	ldw	r3,20(sp)
   8cac0:	3826d43a 	srli	r19,r7,16
   8cac4:	d9800717 	ldw	r6,28(sp)
   8cac8:	da000617 	ldw	r8,24(sp)
   8cacc:	9885883a 	add	r2,r19,r2
   8cad0:	da400417 	ldw	r9,16(sp)
   8cad4:	1500022e 	bgeu	r2,r20,8cae0 <__muldf3+0x458>
   8cad8:	01000074 	movhi	r4,1
   8cadc:	4913883a 	add	r9,r9,r4
   8cae0:	1028d43a 	srli	r20,r2,16
   8cae4:	1004943a 	slli	r2,r2,16
   8cae8:	802cd43a 	srli	r22,r16,16
   8caec:	843fffcc 	andi	r16,r16,65535
   8caf0:	3cffffcc 	andi	r19,r7,65535
   8caf4:	9009883a 	mov	r4,r18
   8caf8:	800b883a 	mov	r5,r16
   8cafc:	a269883a 	add	r20,r20,r9
   8cb00:	d8c00515 	stw	r3,20(sp)
   8cb04:	d9800715 	stw	r6,28(sp)
   8cb08:	da000615 	stw	r8,24(sp)
   8cb0c:	14e7883a 	add	r19,r2,r19
   8cb10:	008b18c0 	call	8b18c <__mulsi3>
   8cb14:	9009883a 	mov	r4,r18
   8cb18:	b00b883a 	mov	r5,r22
   8cb1c:	d8800315 	stw	r2,12(sp)
   8cb20:	008b18c0 	call	8b18c <__mulsi3>
   8cb24:	b809883a 	mov	r4,r23
   8cb28:	b00b883a 	mov	r5,r22
   8cb2c:	d8800215 	stw	r2,8(sp)
   8cb30:	008b18c0 	call	8b18c <__mulsi3>
   8cb34:	b80b883a 	mov	r5,r23
   8cb38:	8009883a 	mov	r4,r16
   8cb3c:	d8800415 	stw	r2,16(sp)
   8cb40:	008b18c0 	call	8b18c <__mulsi3>
   8cb44:	da800317 	ldw	r10,12(sp)
   8cb48:	d9c00217 	ldw	r7,8(sp)
   8cb4c:	d9000017 	ldw	r4,0(sp)
   8cb50:	502ed43a 	srli	r23,r10,16
   8cb54:	11c5883a 	add	r2,r2,r7
   8cb58:	24e5883a 	add	r18,r4,r19
   8cb5c:	b885883a 	add	r2,r23,r2
   8cb60:	d8c00517 	ldw	r3,20(sp)
   8cb64:	d9800717 	ldw	r6,28(sp)
   8cb68:	da000617 	ldw	r8,24(sp)
   8cb6c:	da400417 	ldw	r9,16(sp)
   8cb70:	11c0022e 	bgeu	r2,r7,8cb7c <__muldf3+0x4f4>
   8cb74:	01000074 	movhi	r4,1
   8cb78:	4913883a 	add	r9,r9,r4
   8cb7c:	100ed43a 	srli	r7,r2,16
   8cb80:	1004943a 	slli	r2,r2,16
   8cb84:	55ffffcc 	andi	r23,r10,65535
   8cb88:	3a53883a 	add	r9,r7,r9
   8cb8c:	8809883a 	mov	r4,r17
   8cb90:	800b883a 	mov	r5,r16
   8cb94:	d8c00515 	stw	r3,20(sp)
   8cb98:	d9800715 	stw	r6,28(sp)
   8cb9c:	da000615 	stw	r8,24(sp)
   8cba0:	da400415 	stw	r9,16(sp)
   8cba4:	15ef883a 	add	r23,r2,r23
   8cba8:	008b18c0 	call	8b18c <__mulsi3>
   8cbac:	8809883a 	mov	r4,r17
   8cbb0:	b00b883a 	mov	r5,r22
   8cbb4:	d8800215 	stw	r2,8(sp)
   8cbb8:	008b18c0 	call	8b18c <__mulsi3>
   8cbbc:	b00b883a 	mov	r5,r22
   8cbc0:	a809883a 	mov	r4,r21
   8cbc4:	d8800315 	stw	r2,12(sp)
   8cbc8:	008b18c0 	call	8b18c <__mulsi3>
   8cbcc:	8009883a 	mov	r4,r16
   8cbd0:	a80b883a 	mov	r5,r21
   8cbd4:	1023883a 	mov	r17,r2
   8cbd8:	008b18c0 	call	8b18c <__mulsi3>
   8cbdc:	d9c00217 	ldw	r7,8(sp)
   8cbe0:	da800317 	ldw	r10,12(sp)
   8cbe4:	d8c00517 	ldw	r3,20(sp)
   8cbe8:	3808d43a 	srli	r4,r7,16
   8cbec:	1285883a 	add	r2,r2,r10
   8cbf0:	d9800717 	ldw	r6,28(sp)
   8cbf4:	2085883a 	add	r2,r4,r2
   8cbf8:	da000617 	ldw	r8,24(sp)
   8cbfc:	da400417 	ldw	r9,16(sp)
   8cc00:	1280022e 	bgeu	r2,r10,8cc0c <__muldf3+0x584>
   8cc04:	01000074 	movhi	r4,1
   8cc08:	8923883a 	add	r17,r17,r4
   8cc0c:	1008943a 	slli	r4,r2,16
   8cc10:	39ffffcc 	andi	r7,r7,65535
   8cc14:	e4b9883a 	add	fp,fp,r18
   8cc18:	21cf883a 	add	r7,r4,r7
   8cc1c:	e4e7803a 	cmpltu	r19,fp,r19
   8cc20:	3d0f883a 	add	r7,r7,r20
   8cc24:	bf39883a 	add	fp,r23,fp
   8cc28:	99c9883a 	add	r4,r19,r7
   8cc2c:	e5ef803a 	cmpltu	r23,fp,r23
   8cc30:	490b883a 	add	r5,r9,r4
   8cc34:	1004d43a 	srli	r2,r2,16
   8cc38:	b965883a 	add	r18,r23,r5
   8cc3c:	24c9803a 	cmpltu	r4,r4,r19
   8cc40:	3d29803a 	cmpltu	r20,r7,r20
   8cc44:	a128b03a 	or	r20,r20,r4
   8cc48:	95ef803a 	cmpltu	r23,r18,r23
   8cc4c:	2a53803a 	cmpltu	r9,r5,r9
   8cc50:	a0a9883a 	add	r20,r20,r2
   8cc54:	4deeb03a 	or	r23,r9,r23
   8cc58:	a5ef883a 	add	r23,r20,r23
   8cc5c:	bc63883a 	add	r17,r23,r17
   8cc60:	e004927a 	slli	r2,fp,9
   8cc64:	d9000117 	ldw	r4,4(sp)
   8cc68:	882e927a 	slli	r23,r17,9
   8cc6c:	9022d5fa 	srli	r17,r18,23
   8cc70:	e038d5fa 	srli	fp,fp,23
   8cc74:	1104b03a 	or	r2,r2,r4
   8cc78:	9024927a 	slli	r18,r18,9
   8cc7c:	1004c03a 	cmpne	r2,r2,zero
   8cc80:	bc62b03a 	or	r17,r23,r17
   8cc84:	1738b03a 	or	fp,r2,fp
   8cc88:	8880402c 	andhi	r2,r17,256
   8cc8c:	e4a4b03a 	or	r18,fp,r18
   8cc90:	10000726 	beq	r2,zero,8ccb0 <__muldf3+0x628>
   8cc94:	9006d07a 	srli	r3,r18,1
   8cc98:	880497fa 	slli	r2,r17,31
   8cc9c:	9480004c 	andi	r18,r18,1
   8cca0:	8822d07a 	srli	r17,r17,1
   8cca4:	1ca4b03a 	or	r18,r3,r18
   8cca8:	14a4b03a 	or	r18,r2,r18
   8ccac:	4007883a 	mov	r3,r8
   8ccb0:	1880ffc4 	addi	r2,r3,1023
   8ccb4:	0080460e 	bge	zero,r2,8cdd0 <__muldf3+0x748>
   8ccb8:	910001cc 	andi	r4,r18,7
   8ccbc:	20000726 	beq	r4,zero,8ccdc <__muldf3+0x654>
   8ccc0:	910003cc 	andi	r4,r18,15
   8ccc4:	01400104 	movi	r5,4
   8ccc8:	21400426 	beq	r4,r5,8ccdc <__muldf3+0x654>
   8cccc:	9149883a 	add	r4,r18,r5
   8ccd0:	24a5803a 	cmpltu	r18,r4,r18
   8ccd4:	8ca3883a 	add	r17,r17,r18
   8ccd8:	2025883a 	mov	r18,r4
   8ccdc:	8900402c 	andhi	r4,r17,256
   8cce0:	20000426 	beq	r4,zero,8ccf4 <__muldf3+0x66c>
   8cce4:	18810004 	addi	r2,r3,1024
   8cce8:	00ffc034 	movhi	r3,65280
   8ccec:	18ffffc4 	addi	r3,r3,-1
   8ccf0:	88e2703a 	and	r17,r17,r3
   8ccf4:	00c1ff84 	movi	r3,2046
   8ccf8:	18bf1316 	blt	r3,r2,8c948 <__alt_data_end+0xfffce148>
   8ccfc:	882c977a 	slli	r22,r17,29
   8cd00:	9024d0fa 	srli	r18,r18,3
   8cd04:	8822927a 	slli	r17,r17,9
   8cd08:	1081ffcc 	andi	r2,r2,2047
   8cd0c:	b4acb03a 	or	r22,r22,r18
   8cd10:	8820d33a 	srli	r16,r17,12
   8cd14:	3027883a 	mov	r19,r6
   8cd18:	003eba06 	br	8c804 <__alt_data_end+0xfffce004>
   8cd1c:	8080022c 	andhi	r2,r16,8
   8cd20:	10000926 	beq	r2,zero,8cd48 <__muldf3+0x6c0>
   8cd24:	8880022c 	andhi	r2,r17,8
   8cd28:	1000071e 	bne	r2,zero,8cd48 <__muldf3+0x6c0>
   8cd2c:	00800434 	movhi	r2,16
   8cd30:	8c000234 	orhi	r16,r17,8
   8cd34:	10bfffc4 	addi	r2,r2,-1
   8cd38:	e027883a 	mov	r19,fp
   8cd3c:	80a0703a 	and	r16,r16,r2
   8cd40:	902d883a 	mov	r22,r18
   8cd44:	003f1706 	br	8c9a4 <__alt_data_end+0xfffce1a4>
   8cd48:	00800434 	movhi	r2,16
   8cd4c:	84000234 	orhi	r16,r16,8
   8cd50:	10bfffc4 	addi	r2,r2,-1
   8cd54:	80a0703a 	and	r16,r16,r2
   8cd58:	003f1206 	br	8c9a4 <__alt_data_end+0xfffce1a4>
   8cd5c:	147ff604 	addi	r17,r2,-40
   8cd60:	3462983a 	sll	r17,r6,r17
   8cd64:	0025883a 	mov	r18,zero
   8cd68:	003ef306 	br	8c938 <__alt_data_end+0xfffce138>
   8cd6c:	3009883a 	mov	r4,r6
   8cd70:	d9400215 	stw	r5,8(sp)
   8cd74:	d9800715 	stw	r6,28(sp)
   8cd78:	da400415 	stw	r9,16(sp)
   8cd7c:	da800315 	stw	r10,12(sp)
   8cd80:	008d9f40 	call	8d9f4 <__clzsi2>
   8cd84:	10800804 	addi	r2,r2,32
   8cd88:	da800317 	ldw	r10,12(sp)
   8cd8c:	da400417 	ldw	r9,16(sp)
   8cd90:	d9800717 	ldw	r6,28(sp)
   8cd94:	d9400217 	ldw	r5,8(sp)
   8cd98:	003edd06 	br	8c910 <__alt_data_end+0xfffce110>
   8cd9c:	143ff604 	addi	r16,r2,-40
   8cda0:	ac20983a 	sll	r16,r21,r16
   8cda4:	002d883a 	mov	r22,zero
   8cda8:	003ec106 	br	8c8b0 <__alt_data_end+0xfffce0b0>
   8cdac:	d9800715 	stw	r6,28(sp)
   8cdb0:	d9c00215 	stw	r7,8(sp)
   8cdb4:	da400415 	stw	r9,16(sp)
   8cdb8:	008d9f40 	call	8d9f4 <__clzsi2>
   8cdbc:	10800804 	addi	r2,r2,32
   8cdc0:	da400417 	ldw	r9,16(sp)
   8cdc4:	d9c00217 	ldw	r7,8(sp)
   8cdc8:	d9800717 	ldw	r6,28(sp)
   8cdcc:	003eae06 	br	8c888 <__alt_data_end+0xfffce088>
   8cdd0:	00c00044 	movi	r3,1
   8cdd4:	1887c83a 	sub	r3,r3,r2
   8cdd8:	01000e04 	movi	r4,56
   8cddc:	20fe8516 	blt	r4,r3,8c7f4 <__alt_data_end+0xfffcdff4>
   8cde0:	010007c4 	movi	r4,31
   8cde4:	20c01b16 	blt	r4,r3,8ce54 <__muldf3+0x7cc>
   8cde8:	00800804 	movi	r2,32
   8cdec:	10c5c83a 	sub	r2,r2,r3
   8cdf0:	888a983a 	sll	r5,r17,r2
   8cdf4:	90c8d83a 	srl	r4,r18,r3
   8cdf8:	9084983a 	sll	r2,r18,r2
   8cdfc:	88e2d83a 	srl	r17,r17,r3
   8ce00:	2906b03a 	or	r3,r5,r4
   8ce04:	1004c03a 	cmpne	r2,r2,zero
   8ce08:	1886b03a 	or	r3,r3,r2
   8ce0c:	188001cc 	andi	r2,r3,7
   8ce10:	10000726 	beq	r2,zero,8ce30 <__muldf3+0x7a8>
   8ce14:	188003cc 	andi	r2,r3,15
   8ce18:	01000104 	movi	r4,4
   8ce1c:	11000426 	beq	r2,r4,8ce30 <__muldf3+0x7a8>
   8ce20:	1805883a 	mov	r2,r3
   8ce24:	10c00104 	addi	r3,r2,4
   8ce28:	1885803a 	cmpltu	r2,r3,r2
   8ce2c:	88a3883a 	add	r17,r17,r2
   8ce30:	8880202c 	andhi	r2,r17,128
   8ce34:	10001c26 	beq	r2,zero,8cea8 <__muldf3+0x820>
   8ce38:	3027883a 	mov	r19,r6
   8ce3c:	00800044 	movi	r2,1
   8ce40:	0021883a 	mov	r16,zero
   8ce44:	002d883a 	mov	r22,zero
   8ce48:	003e6e06 	br	8c804 <__alt_data_end+0xfffce004>
   8ce4c:	4007883a 	mov	r3,r8
   8ce50:	003f9706 	br	8ccb0 <__alt_data_end+0xfffce4b0>
   8ce54:	017ff844 	movi	r5,-31
   8ce58:	2885c83a 	sub	r2,r5,r2
   8ce5c:	888ad83a 	srl	r5,r17,r2
   8ce60:	00800804 	movi	r2,32
   8ce64:	18801a26 	beq	r3,r2,8ced0 <__muldf3+0x848>
   8ce68:	01001004 	movi	r4,64
   8ce6c:	20c7c83a 	sub	r3,r4,r3
   8ce70:	88e2983a 	sll	r17,r17,r3
   8ce74:	8ca4b03a 	or	r18,r17,r18
   8ce78:	9004c03a 	cmpne	r2,r18,zero
   8ce7c:	2884b03a 	or	r2,r5,r2
   8ce80:	144001cc 	andi	r17,r2,7
   8ce84:	88000d1e 	bne	r17,zero,8cebc <__muldf3+0x834>
   8ce88:	0021883a 	mov	r16,zero
   8ce8c:	102cd0fa 	srli	r22,r2,3
   8ce90:	3027883a 	mov	r19,r6
   8ce94:	0005883a 	mov	r2,zero
   8ce98:	b46cb03a 	or	r22,r22,r17
   8ce9c:	003e5906 	br	8c804 <__alt_data_end+0xfffce004>
   8cea0:	1007883a 	mov	r3,r2
   8cea4:	0023883a 	mov	r17,zero
   8cea8:	8820927a 	slli	r16,r17,9
   8ceac:	1805883a 	mov	r2,r3
   8ceb0:	8822977a 	slli	r17,r17,29
   8ceb4:	8020d33a 	srli	r16,r16,12
   8ceb8:	003ff406 	br	8ce8c <__alt_data_end+0xfffce68c>
   8cebc:	10c003cc 	andi	r3,r2,15
   8cec0:	01000104 	movi	r4,4
   8cec4:	193ff626 	beq	r3,r4,8cea0 <__alt_data_end+0xfffce6a0>
   8cec8:	0023883a 	mov	r17,zero
   8cecc:	003fd506 	br	8ce24 <__alt_data_end+0xfffce624>
   8ced0:	0023883a 	mov	r17,zero
   8ced4:	003fe706 	br	8ce74 <__alt_data_end+0xfffce674>
   8ced8:	00800434 	movhi	r2,16
   8cedc:	8c000234 	orhi	r16,r17,8
   8cee0:	10bfffc4 	addi	r2,r2,-1
   8cee4:	3027883a 	mov	r19,r6
   8cee8:	80a0703a 	and	r16,r16,r2
   8ceec:	902d883a 	mov	r22,r18
   8cef0:	003eac06 	br	8c9a4 <__alt_data_end+0xfffce1a4>

0008cef4 <__subdf3>:
   8cef4:	02000434 	movhi	r8,16
   8cef8:	423fffc4 	addi	r8,r8,-1
   8cefc:	defffb04 	addi	sp,sp,-20
   8cf00:	2a14703a 	and	r10,r5,r8
   8cf04:	3812d53a 	srli	r9,r7,20
   8cf08:	3a10703a 	and	r8,r7,r8
   8cf0c:	2006d77a 	srli	r3,r4,29
   8cf10:	3004d77a 	srli	r2,r6,29
   8cf14:	dc000015 	stw	r16,0(sp)
   8cf18:	501490fa 	slli	r10,r10,3
   8cf1c:	2820d53a 	srli	r16,r5,20
   8cf20:	401090fa 	slli	r8,r8,3
   8cf24:	dc800215 	stw	r18,8(sp)
   8cf28:	dc400115 	stw	r17,4(sp)
   8cf2c:	dfc00415 	stw	ra,16(sp)
   8cf30:	202290fa 	slli	r17,r4,3
   8cf34:	dcc00315 	stw	r19,12(sp)
   8cf38:	4a41ffcc 	andi	r9,r9,2047
   8cf3c:	0101ffc4 	movi	r4,2047
   8cf40:	2824d7fa 	srli	r18,r5,31
   8cf44:	8401ffcc 	andi	r16,r16,2047
   8cf48:	50c6b03a 	or	r3,r10,r3
   8cf4c:	380ed7fa 	srli	r7,r7,31
   8cf50:	408ab03a 	or	r5,r8,r2
   8cf54:	300c90fa 	slli	r6,r6,3
   8cf58:	49009626 	beq	r9,r4,8d1b4 <__subdf3+0x2c0>
   8cf5c:	39c0005c 	xori	r7,r7,1
   8cf60:	8245c83a 	sub	r2,r16,r9
   8cf64:	3c807426 	beq	r7,r18,8d138 <__subdf3+0x244>
   8cf68:	0080af0e 	bge	zero,r2,8d228 <__subdf3+0x334>
   8cf6c:	48002a1e 	bne	r9,zero,8d018 <__subdf3+0x124>
   8cf70:	2988b03a 	or	r4,r5,r6
   8cf74:	20009a1e 	bne	r4,zero,8d1e0 <__subdf3+0x2ec>
   8cf78:	888001cc 	andi	r2,r17,7
   8cf7c:	10000726 	beq	r2,zero,8cf9c <__subdf3+0xa8>
   8cf80:	888003cc 	andi	r2,r17,15
   8cf84:	01000104 	movi	r4,4
   8cf88:	11000426 	beq	r2,r4,8cf9c <__subdf3+0xa8>
   8cf8c:	890b883a 	add	r5,r17,r4
   8cf90:	2c63803a 	cmpltu	r17,r5,r17
   8cf94:	1c47883a 	add	r3,r3,r17
   8cf98:	2823883a 	mov	r17,r5
   8cf9c:	1880202c 	andhi	r2,r3,128
   8cfa0:	10005926 	beq	r2,zero,8d108 <__subdf3+0x214>
   8cfa4:	84000044 	addi	r16,r16,1
   8cfa8:	0081ffc4 	movi	r2,2047
   8cfac:	8080be26 	beq	r16,r2,8d2a8 <__subdf3+0x3b4>
   8cfb0:	017fe034 	movhi	r5,65408
   8cfb4:	297fffc4 	addi	r5,r5,-1
   8cfb8:	1946703a 	and	r3,r3,r5
   8cfbc:	1804977a 	slli	r2,r3,29
   8cfc0:	1806927a 	slli	r3,r3,9
   8cfc4:	8822d0fa 	srli	r17,r17,3
   8cfc8:	8401ffcc 	andi	r16,r16,2047
   8cfcc:	180ad33a 	srli	r5,r3,12
   8cfd0:	9100004c 	andi	r4,r18,1
   8cfd4:	1444b03a 	or	r2,r2,r17
   8cfd8:	80c1ffcc 	andi	r3,r16,2047
   8cfdc:	1820953a 	slli	r16,r3,20
   8cfe0:	20c03fcc 	andi	r3,r4,255
   8cfe4:	180897fa 	slli	r4,r3,31
   8cfe8:	00c00434 	movhi	r3,16
   8cfec:	18ffffc4 	addi	r3,r3,-1
   8cff0:	28c6703a 	and	r3,r5,r3
   8cff4:	1c06b03a 	or	r3,r3,r16
   8cff8:	1906b03a 	or	r3,r3,r4
   8cffc:	dfc00417 	ldw	ra,16(sp)
   8d000:	dcc00317 	ldw	r19,12(sp)
   8d004:	dc800217 	ldw	r18,8(sp)
   8d008:	dc400117 	ldw	r17,4(sp)
   8d00c:	dc000017 	ldw	r16,0(sp)
   8d010:	dec00504 	addi	sp,sp,20
   8d014:	f800283a 	ret
   8d018:	0101ffc4 	movi	r4,2047
   8d01c:	813fd626 	beq	r16,r4,8cf78 <__alt_data_end+0xfffce778>
   8d020:	29402034 	orhi	r5,r5,128
   8d024:	01000e04 	movi	r4,56
   8d028:	2080a316 	blt	r4,r2,8d2b8 <__subdf3+0x3c4>
   8d02c:	010007c4 	movi	r4,31
   8d030:	2080c616 	blt	r4,r2,8d34c <__subdf3+0x458>
   8d034:	01000804 	movi	r4,32
   8d038:	2089c83a 	sub	r4,r4,r2
   8d03c:	2910983a 	sll	r8,r5,r4
   8d040:	308ed83a 	srl	r7,r6,r2
   8d044:	3108983a 	sll	r4,r6,r4
   8d048:	2884d83a 	srl	r2,r5,r2
   8d04c:	41ccb03a 	or	r6,r8,r7
   8d050:	2008c03a 	cmpne	r4,r4,zero
   8d054:	310cb03a 	or	r6,r6,r4
   8d058:	898dc83a 	sub	r6,r17,r6
   8d05c:	89a3803a 	cmpltu	r17,r17,r6
   8d060:	1887c83a 	sub	r3,r3,r2
   8d064:	1c47c83a 	sub	r3,r3,r17
   8d068:	3023883a 	mov	r17,r6
   8d06c:	1880202c 	andhi	r2,r3,128
   8d070:	10002326 	beq	r2,zero,8d100 <__subdf3+0x20c>
   8d074:	04c02034 	movhi	r19,128
   8d078:	9cffffc4 	addi	r19,r19,-1
   8d07c:	1ce6703a 	and	r19,r3,r19
   8d080:	98007a26 	beq	r19,zero,8d26c <__subdf3+0x378>
   8d084:	9809883a 	mov	r4,r19
   8d088:	008d9f40 	call	8d9f4 <__clzsi2>
   8d08c:	113ffe04 	addi	r4,r2,-8
   8d090:	00c007c4 	movi	r3,31
   8d094:	19007b16 	blt	r3,r4,8d284 <__subdf3+0x390>
   8d098:	00800804 	movi	r2,32
   8d09c:	1105c83a 	sub	r2,r2,r4
   8d0a0:	8884d83a 	srl	r2,r17,r2
   8d0a4:	9906983a 	sll	r3,r19,r4
   8d0a8:	8922983a 	sll	r17,r17,r4
   8d0ac:	10c4b03a 	or	r2,r2,r3
   8d0b0:	24007816 	blt	r4,r16,8d294 <__subdf3+0x3a0>
   8d0b4:	2421c83a 	sub	r16,r4,r16
   8d0b8:	80c00044 	addi	r3,r16,1
   8d0bc:	010007c4 	movi	r4,31
   8d0c0:	20c09516 	blt	r4,r3,8d318 <__subdf3+0x424>
   8d0c4:	01400804 	movi	r5,32
   8d0c8:	28cbc83a 	sub	r5,r5,r3
   8d0cc:	88c8d83a 	srl	r4,r17,r3
   8d0d0:	8962983a 	sll	r17,r17,r5
   8d0d4:	114a983a 	sll	r5,r2,r5
   8d0d8:	10c6d83a 	srl	r3,r2,r3
   8d0dc:	8804c03a 	cmpne	r2,r17,zero
   8d0e0:	290ab03a 	or	r5,r5,r4
   8d0e4:	28a2b03a 	or	r17,r5,r2
   8d0e8:	0021883a 	mov	r16,zero
   8d0ec:	003fa206 	br	8cf78 <__alt_data_end+0xfffce778>
   8d0f0:	2090b03a 	or	r8,r4,r2
   8d0f4:	40018e26 	beq	r8,zero,8d730 <__subdf3+0x83c>
   8d0f8:	1007883a 	mov	r3,r2
   8d0fc:	2023883a 	mov	r17,r4
   8d100:	888001cc 	andi	r2,r17,7
   8d104:	103f9e1e 	bne	r2,zero,8cf80 <__alt_data_end+0xfffce780>
   8d108:	1804977a 	slli	r2,r3,29
   8d10c:	8822d0fa 	srli	r17,r17,3
   8d110:	1810d0fa 	srli	r8,r3,3
   8d114:	9100004c 	andi	r4,r18,1
   8d118:	1444b03a 	or	r2,r2,r17
   8d11c:	00c1ffc4 	movi	r3,2047
   8d120:	80c02826 	beq	r16,r3,8d1c4 <__subdf3+0x2d0>
   8d124:	01400434 	movhi	r5,16
   8d128:	297fffc4 	addi	r5,r5,-1
   8d12c:	80e0703a 	and	r16,r16,r3
   8d130:	414a703a 	and	r5,r8,r5
   8d134:	003fa806 	br	8cfd8 <__alt_data_end+0xfffce7d8>
   8d138:	0080630e 	bge	zero,r2,8d2c8 <__subdf3+0x3d4>
   8d13c:	48003026 	beq	r9,zero,8d200 <__subdf3+0x30c>
   8d140:	0101ffc4 	movi	r4,2047
   8d144:	813f8c26 	beq	r16,r4,8cf78 <__alt_data_end+0xfffce778>
   8d148:	29402034 	orhi	r5,r5,128
   8d14c:	01000e04 	movi	r4,56
   8d150:	2080a90e 	bge	r4,r2,8d3f8 <__subdf3+0x504>
   8d154:	298cb03a 	or	r6,r5,r6
   8d158:	3012c03a 	cmpne	r9,r6,zero
   8d15c:	0005883a 	mov	r2,zero
   8d160:	4c53883a 	add	r9,r9,r17
   8d164:	4c63803a 	cmpltu	r17,r9,r17
   8d168:	10c7883a 	add	r3,r2,r3
   8d16c:	88c7883a 	add	r3,r17,r3
   8d170:	4823883a 	mov	r17,r9
   8d174:	1880202c 	andhi	r2,r3,128
   8d178:	1000d026 	beq	r2,zero,8d4bc <__subdf3+0x5c8>
   8d17c:	84000044 	addi	r16,r16,1
   8d180:	0081ffc4 	movi	r2,2047
   8d184:	8080fe26 	beq	r16,r2,8d580 <__subdf3+0x68c>
   8d188:	00bfe034 	movhi	r2,65408
   8d18c:	10bfffc4 	addi	r2,r2,-1
   8d190:	1886703a 	and	r3,r3,r2
   8d194:	880ad07a 	srli	r5,r17,1
   8d198:	180497fa 	slli	r2,r3,31
   8d19c:	8900004c 	andi	r4,r17,1
   8d1a0:	2922b03a 	or	r17,r5,r4
   8d1a4:	1806d07a 	srli	r3,r3,1
   8d1a8:	1462b03a 	or	r17,r2,r17
   8d1ac:	3825883a 	mov	r18,r7
   8d1b0:	003f7106 	br	8cf78 <__alt_data_end+0xfffce778>
   8d1b4:	2984b03a 	or	r2,r5,r6
   8d1b8:	103f6826 	beq	r2,zero,8cf5c <__alt_data_end+0xfffce75c>
   8d1bc:	39c03fcc 	andi	r7,r7,255
   8d1c0:	003f6706 	br	8cf60 <__alt_data_end+0xfffce760>
   8d1c4:	4086b03a 	or	r3,r8,r2
   8d1c8:	18015226 	beq	r3,zero,8d714 <__subdf3+0x820>
   8d1cc:	00c00434 	movhi	r3,16
   8d1d0:	41400234 	orhi	r5,r8,8
   8d1d4:	18ffffc4 	addi	r3,r3,-1
   8d1d8:	28ca703a 	and	r5,r5,r3
   8d1dc:	003f7e06 	br	8cfd8 <__alt_data_end+0xfffce7d8>
   8d1e0:	10bfffc4 	addi	r2,r2,-1
   8d1e4:	1000491e 	bne	r2,zero,8d30c <__subdf3+0x418>
   8d1e8:	898fc83a 	sub	r7,r17,r6
   8d1ec:	89e3803a 	cmpltu	r17,r17,r7
   8d1f0:	1947c83a 	sub	r3,r3,r5
   8d1f4:	1c47c83a 	sub	r3,r3,r17
   8d1f8:	3823883a 	mov	r17,r7
   8d1fc:	003f9b06 	br	8d06c <__alt_data_end+0xfffce86c>
   8d200:	2988b03a 	or	r4,r5,r6
   8d204:	203f5c26 	beq	r4,zero,8cf78 <__alt_data_end+0xfffce778>
   8d208:	10bfffc4 	addi	r2,r2,-1
   8d20c:	1000931e 	bne	r2,zero,8d45c <__subdf3+0x568>
   8d210:	898d883a 	add	r6,r17,r6
   8d214:	3463803a 	cmpltu	r17,r6,r17
   8d218:	1947883a 	add	r3,r3,r5
   8d21c:	88c7883a 	add	r3,r17,r3
   8d220:	3023883a 	mov	r17,r6
   8d224:	003fd306 	br	8d174 <__alt_data_end+0xfffce974>
   8d228:	1000541e 	bne	r2,zero,8d37c <__subdf3+0x488>
   8d22c:	80800044 	addi	r2,r16,1
   8d230:	1081ffcc 	andi	r2,r2,2047
   8d234:	01000044 	movi	r4,1
   8d238:	2080a20e 	bge	r4,r2,8d4c4 <__subdf3+0x5d0>
   8d23c:	8989c83a 	sub	r4,r17,r6
   8d240:	8905803a 	cmpltu	r2,r17,r4
   8d244:	1967c83a 	sub	r19,r3,r5
   8d248:	98a7c83a 	sub	r19,r19,r2
   8d24c:	9880202c 	andhi	r2,r19,128
   8d250:	10006326 	beq	r2,zero,8d3e0 <__subdf3+0x4ec>
   8d254:	3463c83a 	sub	r17,r6,r17
   8d258:	28c7c83a 	sub	r3,r5,r3
   8d25c:	344d803a 	cmpltu	r6,r6,r17
   8d260:	19a7c83a 	sub	r19,r3,r6
   8d264:	3825883a 	mov	r18,r7
   8d268:	983f861e 	bne	r19,zero,8d084 <__alt_data_end+0xfffce884>
   8d26c:	8809883a 	mov	r4,r17
   8d270:	008d9f40 	call	8d9f4 <__clzsi2>
   8d274:	10800804 	addi	r2,r2,32
   8d278:	113ffe04 	addi	r4,r2,-8
   8d27c:	00c007c4 	movi	r3,31
   8d280:	193f850e 	bge	r3,r4,8d098 <__alt_data_end+0xfffce898>
   8d284:	10bff604 	addi	r2,r2,-40
   8d288:	8884983a 	sll	r2,r17,r2
   8d28c:	0023883a 	mov	r17,zero
   8d290:	243f880e 	bge	r4,r16,8d0b4 <__alt_data_end+0xfffce8b4>
   8d294:	00ffe034 	movhi	r3,65408
   8d298:	18ffffc4 	addi	r3,r3,-1
   8d29c:	8121c83a 	sub	r16,r16,r4
   8d2a0:	10c6703a 	and	r3,r2,r3
   8d2a4:	003f3406 	br	8cf78 <__alt_data_end+0xfffce778>
   8d2a8:	9100004c 	andi	r4,r18,1
   8d2ac:	000b883a 	mov	r5,zero
   8d2b0:	0005883a 	mov	r2,zero
   8d2b4:	003f4806 	br	8cfd8 <__alt_data_end+0xfffce7d8>
   8d2b8:	298cb03a 	or	r6,r5,r6
   8d2bc:	300cc03a 	cmpne	r6,r6,zero
   8d2c0:	0005883a 	mov	r2,zero
   8d2c4:	003f6406 	br	8d058 <__alt_data_end+0xfffce858>
   8d2c8:	10009a1e 	bne	r2,zero,8d534 <__subdf3+0x640>
   8d2cc:	82400044 	addi	r9,r16,1
   8d2d0:	4881ffcc 	andi	r2,r9,2047
   8d2d4:	02800044 	movi	r10,1
   8d2d8:	5080670e 	bge	r10,r2,8d478 <__subdf3+0x584>
   8d2dc:	0081ffc4 	movi	r2,2047
   8d2e0:	4880af26 	beq	r9,r2,8d5a0 <__subdf3+0x6ac>
   8d2e4:	898d883a 	add	r6,r17,r6
   8d2e8:	1945883a 	add	r2,r3,r5
   8d2ec:	3447803a 	cmpltu	r3,r6,r17
   8d2f0:	1887883a 	add	r3,r3,r2
   8d2f4:	182297fa 	slli	r17,r3,31
   8d2f8:	300cd07a 	srli	r6,r6,1
   8d2fc:	1806d07a 	srli	r3,r3,1
   8d300:	4821883a 	mov	r16,r9
   8d304:	89a2b03a 	or	r17,r17,r6
   8d308:	003f1b06 	br	8cf78 <__alt_data_end+0xfffce778>
   8d30c:	0101ffc4 	movi	r4,2047
   8d310:	813f441e 	bne	r16,r4,8d024 <__alt_data_end+0xfffce824>
   8d314:	003f1806 	br	8cf78 <__alt_data_end+0xfffce778>
   8d318:	843ff844 	addi	r16,r16,-31
   8d31c:	01400804 	movi	r5,32
   8d320:	1408d83a 	srl	r4,r2,r16
   8d324:	19405026 	beq	r3,r5,8d468 <__subdf3+0x574>
   8d328:	01401004 	movi	r5,64
   8d32c:	28c7c83a 	sub	r3,r5,r3
   8d330:	10c4983a 	sll	r2,r2,r3
   8d334:	88a2b03a 	or	r17,r17,r2
   8d338:	8822c03a 	cmpne	r17,r17,zero
   8d33c:	2462b03a 	or	r17,r4,r17
   8d340:	0007883a 	mov	r3,zero
   8d344:	0021883a 	mov	r16,zero
   8d348:	003f6d06 	br	8d100 <__alt_data_end+0xfffce900>
   8d34c:	11fff804 	addi	r7,r2,-32
   8d350:	01000804 	movi	r4,32
   8d354:	29ced83a 	srl	r7,r5,r7
   8d358:	11004526 	beq	r2,r4,8d470 <__subdf3+0x57c>
   8d35c:	01001004 	movi	r4,64
   8d360:	2089c83a 	sub	r4,r4,r2
   8d364:	2904983a 	sll	r2,r5,r4
   8d368:	118cb03a 	or	r6,r2,r6
   8d36c:	300cc03a 	cmpne	r6,r6,zero
   8d370:	398cb03a 	or	r6,r7,r6
   8d374:	0005883a 	mov	r2,zero
   8d378:	003f3706 	br	8d058 <__alt_data_end+0xfffce858>
   8d37c:	80002a26 	beq	r16,zero,8d428 <__subdf3+0x534>
   8d380:	0101ffc4 	movi	r4,2047
   8d384:	49006626 	beq	r9,r4,8d520 <__subdf3+0x62c>
   8d388:	0085c83a 	sub	r2,zero,r2
   8d38c:	18c02034 	orhi	r3,r3,128
   8d390:	01000e04 	movi	r4,56
   8d394:	20807e16 	blt	r4,r2,8d590 <__subdf3+0x69c>
   8d398:	010007c4 	movi	r4,31
   8d39c:	2080e716 	blt	r4,r2,8d73c <__subdf3+0x848>
   8d3a0:	01000804 	movi	r4,32
   8d3a4:	2089c83a 	sub	r4,r4,r2
   8d3a8:	1914983a 	sll	r10,r3,r4
   8d3ac:	8890d83a 	srl	r8,r17,r2
   8d3b0:	8908983a 	sll	r4,r17,r4
   8d3b4:	1884d83a 	srl	r2,r3,r2
   8d3b8:	5222b03a 	or	r17,r10,r8
   8d3bc:	2006c03a 	cmpne	r3,r4,zero
   8d3c0:	88e2b03a 	or	r17,r17,r3
   8d3c4:	3463c83a 	sub	r17,r6,r17
   8d3c8:	2885c83a 	sub	r2,r5,r2
   8d3cc:	344d803a 	cmpltu	r6,r6,r17
   8d3d0:	1187c83a 	sub	r3,r2,r6
   8d3d4:	4821883a 	mov	r16,r9
   8d3d8:	3825883a 	mov	r18,r7
   8d3dc:	003f2306 	br	8d06c <__alt_data_end+0xfffce86c>
   8d3e0:	24d0b03a 	or	r8,r4,r19
   8d3e4:	40001b1e 	bne	r8,zero,8d454 <__subdf3+0x560>
   8d3e8:	0005883a 	mov	r2,zero
   8d3ec:	0009883a 	mov	r4,zero
   8d3f0:	0021883a 	mov	r16,zero
   8d3f4:	003f4906 	br	8d11c <__alt_data_end+0xfffce91c>
   8d3f8:	010007c4 	movi	r4,31
   8d3fc:	20803a16 	blt	r4,r2,8d4e8 <__subdf3+0x5f4>
   8d400:	01000804 	movi	r4,32
   8d404:	2089c83a 	sub	r4,r4,r2
   8d408:	2912983a 	sll	r9,r5,r4
   8d40c:	3090d83a 	srl	r8,r6,r2
   8d410:	3108983a 	sll	r4,r6,r4
   8d414:	2884d83a 	srl	r2,r5,r2
   8d418:	4a12b03a 	or	r9,r9,r8
   8d41c:	2008c03a 	cmpne	r4,r4,zero
   8d420:	4912b03a 	or	r9,r9,r4
   8d424:	003f4e06 	br	8d160 <__alt_data_end+0xfffce960>
   8d428:	1c48b03a 	or	r4,r3,r17
   8d42c:	20003c26 	beq	r4,zero,8d520 <__subdf3+0x62c>
   8d430:	0084303a 	nor	r2,zero,r2
   8d434:	1000381e 	bne	r2,zero,8d518 <__subdf3+0x624>
   8d438:	3463c83a 	sub	r17,r6,r17
   8d43c:	28c5c83a 	sub	r2,r5,r3
   8d440:	344d803a 	cmpltu	r6,r6,r17
   8d444:	1187c83a 	sub	r3,r2,r6
   8d448:	4821883a 	mov	r16,r9
   8d44c:	3825883a 	mov	r18,r7
   8d450:	003f0606 	br	8d06c <__alt_data_end+0xfffce86c>
   8d454:	2023883a 	mov	r17,r4
   8d458:	003f0906 	br	8d080 <__alt_data_end+0xfffce880>
   8d45c:	0101ffc4 	movi	r4,2047
   8d460:	813f3a1e 	bne	r16,r4,8d14c <__alt_data_end+0xfffce94c>
   8d464:	003ec406 	br	8cf78 <__alt_data_end+0xfffce778>
   8d468:	0005883a 	mov	r2,zero
   8d46c:	003fb106 	br	8d334 <__alt_data_end+0xfffceb34>
   8d470:	0005883a 	mov	r2,zero
   8d474:	003fbc06 	br	8d368 <__alt_data_end+0xfffceb68>
   8d478:	1c44b03a 	or	r2,r3,r17
   8d47c:	80008e1e 	bne	r16,zero,8d6b8 <__subdf3+0x7c4>
   8d480:	1000c826 	beq	r2,zero,8d7a4 <__subdf3+0x8b0>
   8d484:	2984b03a 	or	r2,r5,r6
   8d488:	103ebb26 	beq	r2,zero,8cf78 <__alt_data_end+0xfffce778>
   8d48c:	8989883a 	add	r4,r17,r6
   8d490:	1945883a 	add	r2,r3,r5
   8d494:	2447803a 	cmpltu	r3,r4,r17
   8d498:	1887883a 	add	r3,r3,r2
   8d49c:	1880202c 	andhi	r2,r3,128
   8d4a0:	2023883a 	mov	r17,r4
   8d4a4:	103f1626 	beq	r2,zero,8d100 <__alt_data_end+0xfffce900>
   8d4a8:	00bfe034 	movhi	r2,65408
   8d4ac:	10bfffc4 	addi	r2,r2,-1
   8d4b0:	5021883a 	mov	r16,r10
   8d4b4:	1886703a 	and	r3,r3,r2
   8d4b8:	003eaf06 	br	8cf78 <__alt_data_end+0xfffce778>
   8d4bc:	3825883a 	mov	r18,r7
   8d4c0:	003f0f06 	br	8d100 <__alt_data_end+0xfffce900>
   8d4c4:	1c44b03a 	or	r2,r3,r17
   8d4c8:	8000251e 	bne	r16,zero,8d560 <__subdf3+0x66c>
   8d4cc:	1000661e 	bne	r2,zero,8d668 <__subdf3+0x774>
   8d4d0:	2990b03a 	or	r8,r5,r6
   8d4d4:	40009626 	beq	r8,zero,8d730 <__subdf3+0x83c>
   8d4d8:	2807883a 	mov	r3,r5
   8d4dc:	3023883a 	mov	r17,r6
   8d4e0:	3825883a 	mov	r18,r7
   8d4e4:	003ea406 	br	8cf78 <__alt_data_end+0xfffce778>
   8d4e8:	127ff804 	addi	r9,r2,-32
   8d4ec:	01000804 	movi	r4,32
   8d4f0:	2a52d83a 	srl	r9,r5,r9
   8d4f4:	11008c26 	beq	r2,r4,8d728 <__subdf3+0x834>
   8d4f8:	01001004 	movi	r4,64
   8d4fc:	2085c83a 	sub	r2,r4,r2
   8d500:	2884983a 	sll	r2,r5,r2
   8d504:	118cb03a 	or	r6,r2,r6
   8d508:	300cc03a 	cmpne	r6,r6,zero
   8d50c:	4992b03a 	or	r9,r9,r6
   8d510:	0005883a 	mov	r2,zero
   8d514:	003f1206 	br	8d160 <__alt_data_end+0xfffce960>
   8d518:	0101ffc4 	movi	r4,2047
   8d51c:	493f9c1e 	bne	r9,r4,8d390 <__alt_data_end+0xfffceb90>
   8d520:	2807883a 	mov	r3,r5
   8d524:	3023883a 	mov	r17,r6
   8d528:	4821883a 	mov	r16,r9
   8d52c:	3825883a 	mov	r18,r7
   8d530:	003e9106 	br	8cf78 <__alt_data_end+0xfffce778>
   8d534:	80001f1e 	bne	r16,zero,8d5b4 <__subdf3+0x6c0>
   8d538:	1c48b03a 	or	r4,r3,r17
   8d53c:	20005a26 	beq	r4,zero,8d6a8 <__subdf3+0x7b4>
   8d540:	0084303a 	nor	r2,zero,r2
   8d544:	1000561e 	bne	r2,zero,8d6a0 <__subdf3+0x7ac>
   8d548:	89a3883a 	add	r17,r17,r6
   8d54c:	1945883a 	add	r2,r3,r5
   8d550:	898d803a 	cmpltu	r6,r17,r6
   8d554:	3087883a 	add	r3,r6,r2
   8d558:	4821883a 	mov	r16,r9
   8d55c:	003f0506 	br	8d174 <__alt_data_end+0xfffce974>
   8d560:	10002b1e 	bne	r2,zero,8d610 <__subdf3+0x71c>
   8d564:	2984b03a 	or	r2,r5,r6
   8d568:	10008026 	beq	r2,zero,8d76c <__subdf3+0x878>
   8d56c:	2807883a 	mov	r3,r5
   8d570:	3023883a 	mov	r17,r6
   8d574:	3825883a 	mov	r18,r7
   8d578:	0401ffc4 	movi	r16,2047
   8d57c:	003e7e06 	br	8cf78 <__alt_data_end+0xfffce778>
   8d580:	3809883a 	mov	r4,r7
   8d584:	0011883a 	mov	r8,zero
   8d588:	0005883a 	mov	r2,zero
   8d58c:	003ee306 	br	8d11c <__alt_data_end+0xfffce91c>
   8d590:	1c62b03a 	or	r17,r3,r17
   8d594:	8822c03a 	cmpne	r17,r17,zero
   8d598:	0005883a 	mov	r2,zero
   8d59c:	003f8906 	br	8d3c4 <__alt_data_end+0xfffcebc4>
   8d5a0:	3809883a 	mov	r4,r7
   8d5a4:	4821883a 	mov	r16,r9
   8d5a8:	0011883a 	mov	r8,zero
   8d5ac:	0005883a 	mov	r2,zero
   8d5b0:	003eda06 	br	8d11c <__alt_data_end+0xfffce91c>
   8d5b4:	0101ffc4 	movi	r4,2047
   8d5b8:	49003b26 	beq	r9,r4,8d6a8 <__subdf3+0x7b4>
   8d5bc:	0085c83a 	sub	r2,zero,r2
   8d5c0:	18c02034 	orhi	r3,r3,128
   8d5c4:	01000e04 	movi	r4,56
   8d5c8:	20806e16 	blt	r4,r2,8d784 <__subdf3+0x890>
   8d5cc:	010007c4 	movi	r4,31
   8d5d0:	20807716 	blt	r4,r2,8d7b0 <__subdf3+0x8bc>
   8d5d4:	01000804 	movi	r4,32
   8d5d8:	2089c83a 	sub	r4,r4,r2
   8d5dc:	1914983a 	sll	r10,r3,r4
   8d5e0:	8890d83a 	srl	r8,r17,r2
   8d5e4:	8908983a 	sll	r4,r17,r4
   8d5e8:	1884d83a 	srl	r2,r3,r2
   8d5ec:	5222b03a 	or	r17,r10,r8
   8d5f0:	2006c03a 	cmpne	r3,r4,zero
   8d5f4:	88e2b03a 	or	r17,r17,r3
   8d5f8:	89a3883a 	add	r17,r17,r6
   8d5fc:	1145883a 	add	r2,r2,r5
   8d600:	898d803a 	cmpltu	r6,r17,r6
   8d604:	3087883a 	add	r3,r6,r2
   8d608:	4821883a 	mov	r16,r9
   8d60c:	003ed906 	br	8d174 <__alt_data_end+0xfffce974>
   8d610:	2984b03a 	or	r2,r5,r6
   8d614:	10004226 	beq	r2,zero,8d720 <__subdf3+0x82c>
   8d618:	1808d0fa 	srli	r4,r3,3
   8d61c:	8822d0fa 	srli	r17,r17,3
   8d620:	1806977a 	slli	r3,r3,29
   8d624:	2080022c 	andhi	r2,r4,8
   8d628:	1c62b03a 	or	r17,r3,r17
   8d62c:	10000826 	beq	r2,zero,8d650 <__subdf3+0x75c>
   8d630:	2812d0fa 	srli	r9,r5,3
   8d634:	4880022c 	andhi	r2,r9,8
   8d638:	1000051e 	bne	r2,zero,8d650 <__subdf3+0x75c>
   8d63c:	300cd0fa 	srli	r6,r6,3
   8d640:	2804977a 	slli	r2,r5,29
   8d644:	4809883a 	mov	r4,r9
   8d648:	3825883a 	mov	r18,r7
   8d64c:	11a2b03a 	or	r17,r2,r6
   8d650:	8806d77a 	srli	r3,r17,29
   8d654:	200890fa 	slli	r4,r4,3
   8d658:	882290fa 	slli	r17,r17,3
   8d65c:	0401ffc4 	movi	r16,2047
   8d660:	1906b03a 	or	r3,r3,r4
   8d664:	003e4406 	br	8cf78 <__alt_data_end+0xfffce778>
   8d668:	2984b03a 	or	r2,r5,r6
   8d66c:	103e4226 	beq	r2,zero,8cf78 <__alt_data_end+0xfffce778>
   8d670:	8989c83a 	sub	r4,r17,r6
   8d674:	8911803a 	cmpltu	r8,r17,r4
   8d678:	1945c83a 	sub	r2,r3,r5
   8d67c:	1205c83a 	sub	r2,r2,r8
   8d680:	1200202c 	andhi	r8,r2,128
   8d684:	403e9a26 	beq	r8,zero,8d0f0 <__alt_data_end+0xfffce8f0>
   8d688:	3463c83a 	sub	r17,r6,r17
   8d68c:	28c5c83a 	sub	r2,r5,r3
   8d690:	344d803a 	cmpltu	r6,r6,r17
   8d694:	1187c83a 	sub	r3,r2,r6
   8d698:	3825883a 	mov	r18,r7
   8d69c:	003e3606 	br	8cf78 <__alt_data_end+0xfffce778>
   8d6a0:	0101ffc4 	movi	r4,2047
   8d6a4:	493fc71e 	bne	r9,r4,8d5c4 <__alt_data_end+0xfffcedc4>
   8d6a8:	2807883a 	mov	r3,r5
   8d6ac:	3023883a 	mov	r17,r6
   8d6b0:	4821883a 	mov	r16,r9
   8d6b4:	003e3006 	br	8cf78 <__alt_data_end+0xfffce778>
   8d6b8:	10003626 	beq	r2,zero,8d794 <__subdf3+0x8a0>
   8d6bc:	2984b03a 	or	r2,r5,r6
   8d6c0:	10001726 	beq	r2,zero,8d720 <__subdf3+0x82c>
   8d6c4:	1808d0fa 	srli	r4,r3,3
   8d6c8:	8822d0fa 	srli	r17,r17,3
   8d6cc:	1806977a 	slli	r3,r3,29
   8d6d0:	2080022c 	andhi	r2,r4,8
   8d6d4:	1c62b03a 	or	r17,r3,r17
   8d6d8:	10000726 	beq	r2,zero,8d6f8 <__subdf3+0x804>
   8d6dc:	2812d0fa 	srli	r9,r5,3
   8d6e0:	4880022c 	andhi	r2,r9,8
   8d6e4:	1000041e 	bne	r2,zero,8d6f8 <__subdf3+0x804>
   8d6e8:	300cd0fa 	srli	r6,r6,3
   8d6ec:	2804977a 	slli	r2,r5,29
   8d6f0:	4809883a 	mov	r4,r9
   8d6f4:	11a2b03a 	or	r17,r2,r6
   8d6f8:	8806d77a 	srli	r3,r17,29
   8d6fc:	200890fa 	slli	r4,r4,3
   8d700:	882290fa 	slli	r17,r17,3
   8d704:	3825883a 	mov	r18,r7
   8d708:	1906b03a 	or	r3,r3,r4
   8d70c:	0401ffc4 	movi	r16,2047
   8d710:	003e1906 	br	8cf78 <__alt_data_end+0xfffce778>
   8d714:	000b883a 	mov	r5,zero
   8d718:	0005883a 	mov	r2,zero
   8d71c:	003e2e06 	br	8cfd8 <__alt_data_end+0xfffce7d8>
   8d720:	0401ffc4 	movi	r16,2047
   8d724:	003e1406 	br	8cf78 <__alt_data_end+0xfffce778>
   8d728:	0005883a 	mov	r2,zero
   8d72c:	003f7506 	br	8d504 <__alt_data_end+0xfffced04>
   8d730:	0005883a 	mov	r2,zero
   8d734:	0009883a 	mov	r4,zero
   8d738:	003e7806 	br	8d11c <__alt_data_end+0xfffce91c>
   8d73c:	123ff804 	addi	r8,r2,-32
   8d740:	01000804 	movi	r4,32
   8d744:	1a10d83a 	srl	r8,r3,r8
   8d748:	11002526 	beq	r2,r4,8d7e0 <__subdf3+0x8ec>
   8d74c:	01001004 	movi	r4,64
   8d750:	2085c83a 	sub	r2,r4,r2
   8d754:	1884983a 	sll	r2,r3,r2
   8d758:	1444b03a 	or	r2,r2,r17
   8d75c:	1004c03a 	cmpne	r2,r2,zero
   8d760:	40a2b03a 	or	r17,r8,r2
   8d764:	0005883a 	mov	r2,zero
   8d768:	003f1606 	br	8d3c4 <__alt_data_end+0xfffcebc4>
   8d76c:	02000434 	movhi	r8,16
   8d770:	0009883a 	mov	r4,zero
   8d774:	423fffc4 	addi	r8,r8,-1
   8d778:	00bfffc4 	movi	r2,-1
   8d77c:	0401ffc4 	movi	r16,2047
   8d780:	003e6606 	br	8d11c <__alt_data_end+0xfffce91c>
   8d784:	1c62b03a 	or	r17,r3,r17
   8d788:	8822c03a 	cmpne	r17,r17,zero
   8d78c:	0005883a 	mov	r2,zero
   8d790:	003f9906 	br	8d5f8 <__alt_data_end+0xfffcedf8>
   8d794:	2807883a 	mov	r3,r5
   8d798:	3023883a 	mov	r17,r6
   8d79c:	0401ffc4 	movi	r16,2047
   8d7a0:	003df506 	br	8cf78 <__alt_data_end+0xfffce778>
   8d7a4:	2807883a 	mov	r3,r5
   8d7a8:	3023883a 	mov	r17,r6
   8d7ac:	003df206 	br	8cf78 <__alt_data_end+0xfffce778>
   8d7b0:	123ff804 	addi	r8,r2,-32
   8d7b4:	01000804 	movi	r4,32
   8d7b8:	1a10d83a 	srl	r8,r3,r8
   8d7bc:	11000a26 	beq	r2,r4,8d7e8 <__subdf3+0x8f4>
   8d7c0:	01001004 	movi	r4,64
   8d7c4:	2085c83a 	sub	r2,r4,r2
   8d7c8:	1884983a 	sll	r2,r3,r2
   8d7cc:	1444b03a 	or	r2,r2,r17
   8d7d0:	1004c03a 	cmpne	r2,r2,zero
   8d7d4:	40a2b03a 	or	r17,r8,r2
   8d7d8:	0005883a 	mov	r2,zero
   8d7dc:	003f8606 	br	8d5f8 <__alt_data_end+0xfffcedf8>
   8d7e0:	0005883a 	mov	r2,zero
   8d7e4:	003fdc06 	br	8d758 <__alt_data_end+0xfffcef58>
   8d7e8:	0005883a 	mov	r2,zero
   8d7ec:	003ff706 	br	8d7cc <__alt_data_end+0xfffcefcc>

0008d7f0 <__fixdfsi>:
   8d7f0:	280cd53a 	srli	r6,r5,20
   8d7f4:	00c00434 	movhi	r3,16
   8d7f8:	18ffffc4 	addi	r3,r3,-1
   8d7fc:	3181ffcc 	andi	r6,r6,2047
   8d800:	01c0ff84 	movi	r7,1022
   8d804:	28c6703a 	and	r3,r5,r3
   8d808:	280ad7fa 	srli	r5,r5,31
   8d80c:	3980120e 	bge	r7,r6,8d858 <__fixdfsi+0x68>
   8d810:	00810744 	movi	r2,1053
   8d814:	11800c16 	blt	r2,r6,8d848 <__fixdfsi+0x58>
   8d818:	00810cc4 	movi	r2,1075
   8d81c:	1185c83a 	sub	r2,r2,r6
   8d820:	01c007c4 	movi	r7,31
   8d824:	18c00434 	orhi	r3,r3,16
   8d828:	38800d16 	blt	r7,r2,8d860 <__fixdfsi+0x70>
   8d82c:	31befb44 	addi	r6,r6,-1043
   8d830:	2084d83a 	srl	r2,r4,r2
   8d834:	1986983a 	sll	r3,r3,r6
   8d838:	1884b03a 	or	r2,r3,r2
   8d83c:	28000726 	beq	r5,zero,8d85c <__fixdfsi+0x6c>
   8d840:	0085c83a 	sub	r2,zero,r2
   8d844:	f800283a 	ret
   8d848:	00a00034 	movhi	r2,32768
   8d84c:	10bfffc4 	addi	r2,r2,-1
   8d850:	2885883a 	add	r2,r5,r2
   8d854:	f800283a 	ret
   8d858:	0005883a 	mov	r2,zero
   8d85c:	f800283a 	ret
   8d860:	008104c4 	movi	r2,1043
   8d864:	1185c83a 	sub	r2,r2,r6
   8d868:	1884d83a 	srl	r2,r3,r2
   8d86c:	003ff306 	br	8d83c <__alt_data_end+0xfffcf03c>

0008d870 <__floatsidf>:
   8d870:	defffd04 	addi	sp,sp,-12
   8d874:	dfc00215 	stw	ra,8(sp)
   8d878:	dc400115 	stw	r17,4(sp)
   8d87c:	dc000015 	stw	r16,0(sp)
   8d880:	20002b26 	beq	r4,zero,8d930 <__floatsidf+0xc0>
   8d884:	2023883a 	mov	r17,r4
   8d888:	2020d7fa 	srli	r16,r4,31
   8d88c:	20002d16 	blt	r4,zero,8d944 <__floatsidf+0xd4>
   8d890:	8809883a 	mov	r4,r17
   8d894:	008d9f40 	call	8d9f4 <__clzsi2>
   8d898:	01410784 	movi	r5,1054
   8d89c:	288bc83a 	sub	r5,r5,r2
   8d8a0:	01010cc4 	movi	r4,1075
   8d8a4:	2149c83a 	sub	r4,r4,r5
   8d8a8:	00c007c4 	movi	r3,31
   8d8ac:	1900160e 	bge	r3,r4,8d908 <__floatsidf+0x98>
   8d8b0:	00c104c4 	movi	r3,1043
   8d8b4:	1947c83a 	sub	r3,r3,r5
   8d8b8:	88c6983a 	sll	r3,r17,r3
   8d8bc:	00800434 	movhi	r2,16
   8d8c0:	10bfffc4 	addi	r2,r2,-1
   8d8c4:	1886703a 	and	r3,r3,r2
   8d8c8:	2941ffcc 	andi	r5,r5,2047
   8d8cc:	800d883a 	mov	r6,r16
   8d8d0:	0005883a 	mov	r2,zero
   8d8d4:	280a953a 	slli	r5,r5,20
   8d8d8:	31803fcc 	andi	r6,r6,255
   8d8dc:	01000434 	movhi	r4,16
   8d8e0:	300c97fa 	slli	r6,r6,31
   8d8e4:	213fffc4 	addi	r4,r4,-1
   8d8e8:	1906703a 	and	r3,r3,r4
   8d8ec:	1946b03a 	or	r3,r3,r5
   8d8f0:	1986b03a 	or	r3,r3,r6
   8d8f4:	dfc00217 	ldw	ra,8(sp)
   8d8f8:	dc400117 	ldw	r17,4(sp)
   8d8fc:	dc000017 	ldw	r16,0(sp)
   8d900:	dec00304 	addi	sp,sp,12
   8d904:	f800283a 	ret
   8d908:	00c002c4 	movi	r3,11
   8d90c:	1887c83a 	sub	r3,r3,r2
   8d910:	88c6d83a 	srl	r3,r17,r3
   8d914:	8904983a 	sll	r2,r17,r4
   8d918:	01000434 	movhi	r4,16
   8d91c:	213fffc4 	addi	r4,r4,-1
   8d920:	2941ffcc 	andi	r5,r5,2047
   8d924:	1906703a 	and	r3,r3,r4
   8d928:	800d883a 	mov	r6,r16
   8d92c:	003fe906 	br	8d8d4 <__alt_data_end+0xfffcf0d4>
   8d930:	000d883a 	mov	r6,zero
   8d934:	000b883a 	mov	r5,zero
   8d938:	0007883a 	mov	r3,zero
   8d93c:	0005883a 	mov	r2,zero
   8d940:	003fe406 	br	8d8d4 <__alt_data_end+0xfffcf0d4>
   8d944:	0123c83a 	sub	r17,zero,r4
   8d948:	003fd106 	br	8d890 <__alt_data_end+0xfffcf090>

0008d94c <__floatunsidf>:
   8d94c:	defffe04 	addi	sp,sp,-8
   8d950:	dc000015 	stw	r16,0(sp)
   8d954:	dfc00115 	stw	ra,4(sp)
   8d958:	2021883a 	mov	r16,r4
   8d95c:	20002226 	beq	r4,zero,8d9e8 <__floatunsidf+0x9c>
   8d960:	008d9f40 	call	8d9f4 <__clzsi2>
   8d964:	01010784 	movi	r4,1054
   8d968:	2089c83a 	sub	r4,r4,r2
   8d96c:	01810cc4 	movi	r6,1075
   8d970:	310dc83a 	sub	r6,r6,r4
   8d974:	00c007c4 	movi	r3,31
   8d978:	1980120e 	bge	r3,r6,8d9c4 <__floatunsidf+0x78>
   8d97c:	00c104c4 	movi	r3,1043
   8d980:	1907c83a 	sub	r3,r3,r4
   8d984:	80ca983a 	sll	r5,r16,r3
   8d988:	00800434 	movhi	r2,16
   8d98c:	10bfffc4 	addi	r2,r2,-1
   8d990:	2101ffcc 	andi	r4,r4,2047
   8d994:	0021883a 	mov	r16,zero
   8d998:	288a703a 	and	r5,r5,r2
   8d99c:	2008953a 	slli	r4,r4,20
   8d9a0:	00c00434 	movhi	r3,16
   8d9a4:	18ffffc4 	addi	r3,r3,-1
   8d9a8:	28c6703a 	and	r3,r5,r3
   8d9ac:	8005883a 	mov	r2,r16
   8d9b0:	1906b03a 	or	r3,r3,r4
   8d9b4:	dfc00117 	ldw	ra,4(sp)
   8d9b8:	dc000017 	ldw	r16,0(sp)
   8d9bc:	dec00204 	addi	sp,sp,8
   8d9c0:	f800283a 	ret
   8d9c4:	00c002c4 	movi	r3,11
   8d9c8:	188bc83a 	sub	r5,r3,r2
   8d9cc:	814ad83a 	srl	r5,r16,r5
   8d9d0:	00c00434 	movhi	r3,16
   8d9d4:	18ffffc4 	addi	r3,r3,-1
   8d9d8:	81a0983a 	sll	r16,r16,r6
   8d9dc:	2101ffcc 	andi	r4,r4,2047
   8d9e0:	28ca703a 	and	r5,r5,r3
   8d9e4:	003fed06 	br	8d99c <__alt_data_end+0xfffcf19c>
   8d9e8:	0009883a 	mov	r4,zero
   8d9ec:	000b883a 	mov	r5,zero
   8d9f0:	003fea06 	br	8d99c <__alt_data_end+0xfffcf19c>

0008d9f4 <__clzsi2>:
   8d9f4:	00bfffd4 	movui	r2,65535
   8d9f8:	11000536 	bltu	r2,r4,8da10 <__clzsi2+0x1c>
   8d9fc:	00803fc4 	movi	r2,255
   8da00:	11000f36 	bltu	r2,r4,8da40 <__clzsi2+0x4c>
   8da04:	00800804 	movi	r2,32
   8da08:	0007883a 	mov	r3,zero
   8da0c:	00000506 	br	8da24 <__clzsi2+0x30>
   8da10:	00804034 	movhi	r2,256
   8da14:	10bfffc4 	addi	r2,r2,-1
   8da18:	11000c2e 	bgeu	r2,r4,8da4c <__clzsi2+0x58>
   8da1c:	00800204 	movi	r2,8
   8da20:	00c00604 	movi	r3,24
   8da24:	20c8d83a 	srl	r4,r4,r3
   8da28:	00c002b4 	movhi	r3,10
   8da2c:	18e13704 	addi	r3,r3,-31524
   8da30:	1909883a 	add	r4,r3,r4
   8da34:	20c00003 	ldbu	r3,0(r4)
   8da38:	10c5c83a 	sub	r2,r2,r3
   8da3c:	f800283a 	ret
   8da40:	00800604 	movi	r2,24
   8da44:	00c00204 	movi	r3,8
   8da48:	003ff606 	br	8da24 <__alt_data_end+0xfffcf224>
   8da4c:	00800404 	movi	r2,16
   8da50:	1007883a 	mov	r3,r2
   8da54:	003ff306 	br	8da24 <__alt_data_end+0xfffcf224>

0008da58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8da58:	defffe04 	addi	sp,sp,-8
   8da5c:	dfc00115 	stw	ra,4(sp)
   8da60:	df000015 	stw	fp,0(sp)
   8da64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8da68:	d0a00c17 	ldw	r2,-32720(gp)
   8da6c:	10000326 	beq	r2,zero,8da7c <alt_get_errno+0x24>
   8da70:	d0a00c17 	ldw	r2,-32720(gp)
   8da74:	103ee83a 	callr	r2
   8da78:	00000106 	br	8da80 <alt_get_errno+0x28>
   8da7c:	d0a71d04 	addi	r2,gp,-25484
}
   8da80:	e037883a 	mov	sp,fp
   8da84:	dfc00117 	ldw	ra,4(sp)
   8da88:	df000017 	ldw	fp,0(sp)
   8da8c:	dec00204 	addi	sp,sp,8
   8da90:	f800283a 	ret

0008da94 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8da94:	defffb04 	addi	sp,sp,-20
   8da98:	dfc00415 	stw	ra,16(sp)
   8da9c:	df000315 	stw	fp,12(sp)
   8daa0:	df000304 	addi	fp,sp,12
   8daa4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8daa8:	e0bfff17 	ldw	r2,-4(fp)
   8daac:	10000816 	blt	r2,zero,8dad0 <close+0x3c>
   8dab0:	01400304 	movi	r5,12
   8dab4:	e13fff17 	ldw	r4,-4(fp)
   8dab8:	008b18c0 	call	8b18c <__mulsi3>
   8dabc:	1007883a 	mov	r3,r2
   8dac0:	008002b4 	movhi	r2,10
   8dac4:	10a40004 	addi	r2,r2,-28672
   8dac8:	1885883a 	add	r2,r3,r2
   8dacc:	00000106 	br	8dad4 <close+0x40>
   8dad0:	0005883a 	mov	r2,zero
   8dad4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8dad8:	e0bffd17 	ldw	r2,-12(fp)
   8dadc:	10001926 	beq	r2,zero,8db44 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8dae0:	e0bffd17 	ldw	r2,-12(fp)
   8dae4:	10800017 	ldw	r2,0(r2)
   8dae8:	10800417 	ldw	r2,16(r2)
   8daec:	10000626 	beq	r2,zero,8db08 <close+0x74>
   8daf0:	e0bffd17 	ldw	r2,-12(fp)
   8daf4:	10800017 	ldw	r2,0(r2)
   8daf8:	10800417 	ldw	r2,16(r2)
   8dafc:	e13ffd17 	ldw	r4,-12(fp)
   8db00:	103ee83a 	callr	r2
   8db04:	00000106 	br	8db0c <close+0x78>
   8db08:	0005883a 	mov	r2,zero
   8db0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8db10:	e13fff17 	ldw	r4,-4(fp)
   8db14:	008e4140 	call	8e414 <alt_release_fd>
    if (rval < 0)
   8db18:	e0bffe17 	ldw	r2,-8(fp)
   8db1c:	1000070e 	bge	r2,zero,8db3c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   8db20:	008da580 	call	8da58 <alt_get_errno>
   8db24:	1007883a 	mov	r3,r2
   8db28:	e0bffe17 	ldw	r2,-8(fp)
   8db2c:	0085c83a 	sub	r2,zero,r2
   8db30:	18800015 	stw	r2,0(r3)
      return -1;
   8db34:	00bfffc4 	movi	r2,-1
   8db38:	00000706 	br	8db58 <close+0xc4>
    }
    return 0;
   8db3c:	0005883a 	mov	r2,zero
   8db40:	00000506 	br	8db58 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8db44:	008da580 	call	8da58 <alt_get_errno>
   8db48:	1007883a 	mov	r3,r2
   8db4c:	00801444 	movi	r2,81
   8db50:	18800015 	stw	r2,0(r3)
    return -1;
   8db54:	00bfffc4 	movi	r2,-1
  }
}
   8db58:	e037883a 	mov	sp,fp
   8db5c:	dfc00117 	ldw	ra,4(sp)
   8db60:	df000017 	ldw	fp,0(sp)
   8db64:	dec00204 	addi	sp,sp,8
   8db68:	f800283a 	ret

0008db6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8db6c:	defffc04 	addi	sp,sp,-16
   8db70:	df000315 	stw	fp,12(sp)
   8db74:	df000304 	addi	fp,sp,12
   8db78:	e13ffd15 	stw	r4,-12(fp)
   8db7c:	e17ffe15 	stw	r5,-8(fp)
   8db80:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8db84:	e0bfff17 	ldw	r2,-4(fp)
}
   8db88:	e037883a 	mov	sp,fp
   8db8c:	df000017 	ldw	fp,0(sp)
   8db90:	dec00104 	addi	sp,sp,4
   8db94:	f800283a 	ret

0008db98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8db98:	defffe04 	addi	sp,sp,-8
   8db9c:	dfc00115 	stw	ra,4(sp)
   8dba0:	df000015 	stw	fp,0(sp)
   8dba4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8dba8:	d0a00c17 	ldw	r2,-32720(gp)
   8dbac:	10000326 	beq	r2,zero,8dbbc <alt_get_errno+0x24>
   8dbb0:	d0a00c17 	ldw	r2,-32720(gp)
   8dbb4:	103ee83a 	callr	r2
   8dbb8:	00000106 	br	8dbc0 <alt_get_errno+0x28>
   8dbbc:	d0a71d04 	addi	r2,gp,-25484
}
   8dbc0:	e037883a 	mov	sp,fp
   8dbc4:	dfc00117 	ldw	ra,4(sp)
   8dbc8:	df000017 	ldw	fp,0(sp)
   8dbcc:	dec00204 	addi	sp,sp,8
   8dbd0:	f800283a 	ret

0008dbd4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8dbd4:	defffb04 	addi	sp,sp,-20
   8dbd8:	dfc00415 	stw	ra,16(sp)
   8dbdc:	df000315 	stw	fp,12(sp)
   8dbe0:	df000304 	addi	fp,sp,12
   8dbe4:	e13ffe15 	stw	r4,-8(fp)
   8dbe8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8dbec:	e0bffe17 	ldw	r2,-8(fp)
   8dbf0:	10000816 	blt	r2,zero,8dc14 <fstat+0x40>
   8dbf4:	01400304 	movi	r5,12
   8dbf8:	e13ffe17 	ldw	r4,-8(fp)
   8dbfc:	008b18c0 	call	8b18c <__mulsi3>
   8dc00:	1007883a 	mov	r3,r2
   8dc04:	008002b4 	movhi	r2,10
   8dc08:	10a40004 	addi	r2,r2,-28672
   8dc0c:	1885883a 	add	r2,r3,r2
   8dc10:	00000106 	br	8dc18 <fstat+0x44>
   8dc14:	0005883a 	mov	r2,zero
   8dc18:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8dc1c:	e0bffd17 	ldw	r2,-12(fp)
   8dc20:	10001026 	beq	r2,zero,8dc64 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8dc24:	e0bffd17 	ldw	r2,-12(fp)
   8dc28:	10800017 	ldw	r2,0(r2)
   8dc2c:	10800817 	ldw	r2,32(r2)
   8dc30:	10000726 	beq	r2,zero,8dc50 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   8dc34:	e0bffd17 	ldw	r2,-12(fp)
   8dc38:	10800017 	ldw	r2,0(r2)
   8dc3c:	10800817 	ldw	r2,32(r2)
   8dc40:	e17fff17 	ldw	r5,-4(fp)
   8dc44:	e13ffd17 	ldw	r4,-12(fp)
   8dc48:	103ee83a 	callr	r2
   8dc4c:	00000a06 	br	8dc78 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8dc50:	e0bfff17 	ldw	r2,-4(fp)
   8dc54:	00c80004 	movi	r3,8192
   8dc58:	10c00115 	stw	r3,4(r2)
      return 0;
   8dc5c:	0005883a 	mov	r2,zero
   8dc60:	00000506 	br	8dc78 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8dc64:	008db980 	call	8db98 <alt_get_errno>
   8dc68:	1007883a 	mov	r3,r2
   8dc6c:	00801444 	movi	r2,81
   8dc70:	18800015 	stw	r2,0(r3)
    return -1;
   8dc74:	00bfffc4 	movi	r2,-1
  }
}
   8dc78:	e037883a 	mov	sp,fp
   8dc7c:	dfc00117 	ldw	ra,4(sp)
   8dc80:	df000017 	ldw	fp,0(sp)
   8dc84:	dec00204 	addi	sp,sp,8
   8dc88:	f800283a 	ret

0008dc8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8dc8c:	defff904 	addi	sp,sp,-28
   8dc90:	dfc00615 	stw	ra,24(sp)
   8dc94:	df000515 	stw	fp,20(sp)
   8dc98:	df000504 	addi	fp,sp,20
   8dc9c:	e13ffc15 	stw	r4,-16(fp)
   8dca0:	e17ffd15 	stw	r5,-12(fp)
   8dca4:	e1bffe15 	stw	r6,-8(fp)
   8dca8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8dcac:	e0800217 	ldw	r2,8(fp)
   8dcb0:	d8800015 	stw	r2,0(sp)
   8dcb4:	e1ffff17 	ldw	r7,-4(fp)
   8dcb8:	e1bffe17 	ldw	r6,-8(fp)
   8dcbc:	e17ffd17 	ldw	r5,-12(fp)
   8dcc0:	e13ffc17 	ldw	r4,-16(fp)
   8dcc4:	008de3c0 	call	8de3c <alt_iic_isr_register>
}  
   8dcc8:	e037883a 	mov	sp,fp
   8dccc:	dfc00117 	ldw	ra,4(sp)
   8dcd0:	df000017 	ldw	fp,0(sp)
   8dcd4:	dec00204 	addi	sp,sp,8
   8dcd8:	f800283a 	ret

0008dcdc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8dcdc:	defff904 	addi	sp,sp,-28
   8dce0:	df000615 	stw	fp,24(sp)
   8dce4:	df000604 	addi	fp,sp,24
   8dce8:	e13ffe15 	stw	r4,-8(fp)
   8dcec:	e17fff15 	stw	r5,-4(fp)
   8dcf0:	e0bfff17 	ldw	r2,-4(fp)
   8dcf4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dcf8:	0005303a 	rdctl	r2,status
   8dcfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dd00:	e0fffb17 	ldw	r3,-20(fp)
   8dd04:	00bfff84 	movi	r2,-2
   8dd08:	1884703a 	and	r2,r3,r2
   8dd0c:	1001703a 	wrctl	status,r2
  
  return context;
   8dd10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8dd14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8dd18:	00c00044 	movi	r3,1
   8dd1c:	e0bffa17 	ldw	r2,-24(fp)
   8dd20:	1884983a 	sll	r2,r3,r2
   8dd24:	1007883a 	mov	r3,r2
   8dd28:	d0a72217 	ldw	r2,-25464(gp)
   8dd2c:	1884b03a 	or	r2,r3,r2
   8dd30:	d0a72215 	stw	r2,-25464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8dd34:	d0a72217 	ldw	r2,-25464(gp)
   8dd38:	100170fa 	wrctl	ienable,r2
   8dd3c:	e0bffc17 	ldw	r2,-16(fp)
   8dd40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dd44:	e0bffd17 	ldw	r2,-12(fp)
   8dd48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8dd4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   8dd50:	0001883a 	nop
}
   8dd54:	e037883a 	mov	sp,fp
   8dd58:	df000017 	ldw	fp,0(sp)
   8dd5c:	dec00104 	addi	sp,sp,4
   8dd60:	f800283a 	ret

0008dd64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8dd64:	defff904 	addi	sp,sp,-28
   8dd68:	df000615 	stw	fp,24(sp)
   8dd6c:	df000604 	addi	fp,sp,24
   8dd70:	e13ffe15 	stw	r4,-8(fp)
   8dd74:	e17fff15 	stw	r5,-4(fp)
   8dd78:	e0bfff17 	ldw	r2,-4(fp)
   8dd7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dd80:	0005303a 	rdctl	r2,status
   8dd84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dd88:	e0fffb17 	ldw	r3,-20(fp)
   8dd8c:	00bfff84 	movi	r2,-2
   8dd90:	1884703a 	and	r2,r3,r2
   8dd94:	1001703a 	wrctl	status,r2
  
  return context;
   8dd98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8dd9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8dda0:	00c00044 	movi	r3,1
   8dda4:	e0bffa17 	ldw	r2,-24(fp)
   8dda8:	1884983a 	sll	r2,r3,r2
   8ddac:	0084303a 	nor	r2,zero,r2
   8ddb0:	1007883a 	mov	r3,r2
   8ddb4:	d0a72217 	ldw	r2,-25464(gp)
   8ddb8:	1884703a 	and	r2,r3,r2
   8ddbc:	d0a72215 	stw	r2,-25464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8ddc0:	d0a72217 	ldw	r2,-25464(gp)
   8ddc4:	100170fa 	wrctl	ienable,r2
   8ddc8:	e0bffc17 	ldw	r2,-16(fp)
   8ddcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ddd0:	e0bffd17 	ldw	r2,-12(fp)
   8ddd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ddd8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   8dddc:	0001883a 	nop
}
   8dde0:	e037883a 	mov	sp,fp
   8dde4:	df000017 	ldw	fp,0(sp)
   8dde8:	dec00104 	addi	sp,sp,4
   8ddec:	f800283a 	ret

0008ddf0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8ddf0:	defffc04 	addi	sp,sp,-16
   8ddf4:	df000315 	stw	fp,12(sp)
   8ddf8:	df000304 	addi	fp,sp,12
   8ddfc:	e13ffe15 	stw	r4,-8(fp)
   8de00:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8de04:	000530fa 	rdctl	r2,ienable
   8de08:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8de0c:	00c00044 	movi	r3,1
   8de10:	e0bfff17 	ldw	r2,-4(fp)
   8de14:	1884983a 	sll	r2,r3,r2
   8de18:	1007883a 	mov	r3,r2
   8de1c:	e0bffd17 	ldw	r2,-12(fp)
   8de20:	1884703a 	and	r2,r3,r2
   8de24:	1004c03a 	cmpne	r2,r2,zero
   8de28:	10803fcc 	andi	r2,r2,255
}
   8de2c:	e037883a 	mov	sp,fp
   8de30:	df000017 	ldw	fp,0(sp)
   8de34:	dec00104 	addi	sp,sp,4
   8de38:	f800283a 	ret

0008de3c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8de3c:	defff504 	addi	sp,sp,-44
   8de40:	dfc00a15 	stw	ra,40(sp)
   8de44:	df000915 	stw	fp,36(sp)
   8de48:	df000904 	addi	fp,sp,36
   8de4c:	e13ffc15 	stw	r4,-16(fp)
   8de50:	e17ffd15 	stw	r5,-12(fp)
   8de54:	e1bffe15 	stw	r6,-8(fp)
   8de58:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8de5c:	00bffa84 	movi	r2,-22
   8de60:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8de64:	e0bffd17 	ldw	r2,-12(fp)
   8de68:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8de6c:	e0bff817 	ldw	r2,-32(fp)
   8de70:	10800808 	cmpgei	r2,r2,32
   8de74:	1000271e 	bne	r2,zero,8df14 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8de78:	0005303a 	rdctl	r2,status
   8de7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8de80:	e0fffb17 	ldw	r3,-20(fp)
   8de84:	00bfff84 	movi	r2,-2
   8de88:	1884703a 	and	r2,r3,r2
   8de8c:	1001703a 	wrctl	status,r2
  
  return context;
   8de90:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8de94:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   8de98:	008002b4 	movhi	r2,10
   8de9c:	10afc504 	addi	r2,r2,-16620
   8dea0:	e0fff817 	ldw	r3,-32(fp)
   8dea4:	180690fa 	slli	r3,r3,3
   8dea8:	10c5883a 	add	r2,r2,r3
   8deac:	e0fffe17 	ldw	r3,-8(fp)
   8deb0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8deb4:	008002b4 	movhi	r2,10
   8deb8:	10afc504 	addi	r2,r2,-16620
   8debc:	e0fff817 	ldw	r3,-32(fp)
   8dec0:	180690fa 	slli	r3,r3,3
   8dec4:	10c5883a 	add	r2,r2,r3
   8dec8:	10800104 	addi	r2,r2,4
   8decc:	e0ffff17 	ldw	r3,-4(fp)
   8ded0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8ded4:	e0bffe17 	ldw	r2,-8(fp)
   8ded8:	10000526 	beq	r2,zero,8def0 <alt_iic_isr_register+0xb4>
   8dedc:	e0bff817 	ldw	r2,-32(fp)
   8dee0:	100b883a 	mov	r5,r2
   8dee4:	e13ffc17 	ldw	r4,-16(fp)
   8dee8:	008dcdc0 	call	8dcdc <alt_ic_irq_enable>
   8deec:	00000406 	br	8df00 <alt_iic_isr_register+0xc4>
   8def0:	e0bff817 	ldw	r2,-32(fp)
   8def4:	100b883a 	mov	r5,r2
   8def8:	e13ffc17 	ldw	r4,-16(fp)
   8defc:	008dd640 	call	8dd64 <alt_ic_irq_disable>
   8df00:	e0bff715 	stw	r2,-36(fp)
   8df04:	e0bffa17 	ldw	r2,-24(fp)
   8df08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8df0c:	e0bff917 	ldw	r2,-28(fp)
   8df10:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8df14:	e0bff717 	ldw	r2,-36(fp)
}
   8df18:	e037883a 	mov	sp,fp
   8df1c:	dfc00117 	ldw	ra,4(sp)
   8df20:	df000017 	ldw	fp,0(sp)
   8df24:	dec00204 	addi	sp,sp,8
   8df28:	f800283a 	ret

0008df2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8df2c:	defffe04 	addi	sp,sp,-8
   8df30:	dfc00115 	stw	ra,4(sp)
   8df34:	df000015 	stw	fp,0(sp)
   8df38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8df3c:	d0a00c17 	ldw	r2,-32720(gp)
   8df40:	10000326 	beq	r2,zero,8df50 <alt_get_errno+0x24>
   8df44:	d0a00c17 	ldw	r2,-32720(gp)
   8df48:	103ee83a 	callr	r2
   8df4c:	00000106 	br	8df54 <alt_get_errno+0x28>
   8df50:	d0a71d04 	addi	r2,gp,-25484
}
   8df54:	e037883a 	mov	sp,fp
   8df58:	dfc00117 	ldw	ra,4(sp)
   8df5c:	df000017 	ldw	fp,0(sp)
   8df60:	dec00204 	addi	sp,sp,8
   8df64:	f800283a 	ret

0008df68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8df68:	deffed04 	addi	sp,sp,-76
   8df6c:	dfc01215 	stw	ra,72(sp)
   8df70:	df001115 	stw	fp,68(sp)
   8df74:	df001104 	addi	fp,sp,68
   8df78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8df7c:	e0bfff17 	ldw	r2,-4(fp)
   8df80:	10000816 	blt	r2,zero,8dfa4 <isatty+0x3c>
   8df84:	01400304 	movi	r5,12
   8df88:	e13fff17 	ldw	r4,-4(fp)
   8df8c:	008b18c0 	call	8b18c <__mulsi3>
   8df90:	1007883a 	mov	r3,r2
   8df94:	008002b4 	movhi	r2,10
   8df98:	10a40004 	addi	r2,r2,-28672
   8df9c:	1885883a 	add	r2,r3,r2
   8dfa0:	00000106 	br	8dfa8 <isatty+0x40>
   8dfa4:	0005883a 	mov	r2,zero
   8dfa8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8dfac:	e0bfef17 	ldw	r2,-68(fp)
   8dfb0:	10000e26 	beq	r2,zero,8dfec <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8dfb4:	e0bfef17 	ldw	r2,-68(fp)
   8dfb8:	10800017 	ldw	r2,0(r2)
   8dfbc:	10800817 	ldw	r2,32(r2)
   8dfc0:	1000021e 	bne	r2,zero,8dfcc <isatty+0x64>
    {
      return 1;
   8dfc4:	00800044 	movi	r2,1
   8dfc8:	00000d06 	br	8e000 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8dfcc:	e0bff004 	addi	r2,fp,-64
   8dfd0:	100b883a 	mov	r5,r2
   8dfd4:	e13fff17 	ldw	r4,-4(fp)
   8dfd8:	008dbd40 	call	8dbd4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8dfdc:	e0bff117 	ldw	r2,-60(fp)
   8dfe0:	10880020 	cmpeqi	r2,r2,8192
   8dfe4:	10803fcc 	andi	r2,r2,255
   8dfe8:	00000506 	br	8e000 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8dfec:	008df2c0 	call	8df2c <alt_get_errno>
   8dff0:	1007883a 	mov	r3,r2
   8dff4:	00801444 	movi	r2,81
   8dff8:	18800015 	stw	r2,0(r3)
    return 0;
   8dffc:	0005883a 	mov	r2,zero
  }
}
   8e000:	e037883a 	mov	sp,fp
   8e004:	dfc00117 	ldw	ra,4(sp)
   8e008:	df000017 	ldw	fp,0(sp)
   8e00c:	dec00204 	addi	sp,sp,8
   8e010:	f800283a 	ret

0008e014 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8e014:	defffc04 	addi	sp,sp,-16
   8e018:	df000315 	stw	fp,12(sp)
   8e01c:	df000304 	addi	fp,sp,12
   8e020:	e13ffd15 	stw	r4,-12(fp)
   8e024:	e17ffe15 	stw	r5,-8(fp)
   8e028:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8e02c:	e0fffe17 	ldw	r3,-8(fp)
   8e030:	e0bffd17 	ldw	r2,-12(fp)
   8e034:	18800c26 	beq	r3,r2,8e068 <alt_load_section+0x54>
  {
    while( to != end )
   8e038:	00000806 	br	8e05c <alt_load_section+0x48>
    {
      *to++ = *from++;
   8e03c:	e0bffe17 	ldw	r2,-8(fp)
   8e040:	10c00104 	addi	r3,r2,4
   8e044:	e0fffe15 	stw	r3,-8(fp)
   8e048:	e0fffd17 	ldw	r3,-12(fp)
   8e04c:	19000104 	addi	r4,r3,4
   8e050:	e13ffd15 	stw	r4,-12(fp)
   8e054:	18c00017 	ldw	r3,0(r3)
   8e058:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e05c:	e0fffe17 	ldw	r3,-8(fp)
   8e060:	e0bfff17 	ldw	r2,-4(fp)
   8e064:	18bff51e 	bne	r3,r2,8e03c <__alt_data_end+0xfffcf83c>
    {
      *to++ = *from++;
    }
  }
}
   8e068:	0001883a 	nop
   8e06c:	e037883a 	mov	sp,fp
   8e070:	df000017 	ldw	fp,0(sp)
   8e074:	dec00104 	addi	sp,sp,4
   8e078:	f800283a 	ret

0008e07c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8e07c:	defffe04 	addi	sp,sp,-8
   8e080:	dfc00115 	stw	ra,4(sp)
   8e084:	df000015 	stw	fp,0(sp)
   8e088:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8e08c:	018002b4 	movhi	r6,10
   8e090:	31a8ab04 	addi	r6,r6,-23892
   8e094:	014002b4 	movhi	r5,10
   8e098:	2961cd04 	addi	r5,r5,-30924
   8e09c:	010002b4 	movhi	r4,10
   8e0a0:	2128ab04 	addi	r4,r4,-23892
   8e0a4:	008e0140 	call	8e014 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8e0a8:	01800234 	movhi	r6,8
   8e0ac:	31807004 	addi	r6,r6,448
   8e0b0:	01400234 	movhi	r5,8
   8e0b4:	29400804 	addi	r5,r5,32
   8e0b8:	01000234 	movhi	r4,8
   8e0bc:	21000804 	addi	r4,r4,32
   8e0c0:	008e0140 	call	8e014 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8e0c4:	018002b4 	movhi	r6,10
   8e0c8:	31a1cd04 	addi	r6,r6,-30924
   8e0cc:	014002b4 	movhi	r5,10
   8e0d0:	2960aa04 	addi	r5,r5,-32088
   8e0d4:	010002b4 	movhi	r4,10
   8e0d8:	2120aa04 	addi	r4,r4,-32088
   8e0dc:	008e0140 	call	8e014 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8e0e0:	00971a40 	call	971a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8e0e4:	00973640 	call	97364 <alt_icache_flush_all>
}
   8e0e8:	0001883a 	nop
   8e0ec:	e037883a 	mov	sp,fp
   8e0f0:	dfc00117 	ldw	ra,4(sp)
   8e0f4:	df000017 	ldw	fp,0(sp)
   8e0f8:	dec00204 	addi	sp,sp,8
   8e0fc:	f800283a 	ret

0008e100 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e100:	defffe04 	addi	sp,sp,-8
   8e104:	dfc00115 	stw	ra,4(sp)
   8e108:	df000015 	stw	fp,0(sp)
   8e10c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e110:	d0a00c17 	ldw	r2,-32720(gp)
   8e114:	10000326 	beq	r2,zero,8e124 <alt_get_errno+0x24>
   8e118:	d0a00c17 	ldw	r2,-32720(gp)
   8e11c:	103ee83a 	callr	r2
   8e120:	00000106 	br	8e128 <alt_get_errno+0x28>
   8e124:	d0a71d04 	addi	r2,gp,-25484
}
   8e128:	e037883a 	mov	sp,fp
   8e12c:	dfc00117 	ldw	ra,4(sp)
   8e130:	df000017 	ldw	fp,0(sp)
   8e134:	dec00204 	addi	sp,sp,8
   8e138:	f800283a 	ret

0008e13c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8e13c:	defff904 	addi	sp,sp,-28
   8e140:	dfc00615 	stw	ra,24(sp)
   8e144:	df000515 	stw	fp,20(sp)
   8e148:	df000504 	addi	fp,sp,20
   8e14c:	e13ffd15 	stw	r4,-12(fp)
   8e150:	e17ffe15 	stw	r5,-8(fp)
   8e154:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8e158:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e15c:	e0bffd17 	ldw	r2,-12(fp)
   8e160:	10000816 	blt	r2,zero,8e184 <lseek+0x48>
   8e164:	01400304 	movi	r5,12
   8e168:	e13ffd17 	ldw	r4,-12(fp)
   8e16c:	008b18c0 	call	8b18c <__mulsi3>
   8e170:	1007883a 	mov	r3,r2
   8e174:	008002b4 	movhi	r2,10
   8e178:	10a40004 	addi	r2,r2,-28672
   8e17c:	1885883a 	add	r2,r3,r2
   8e180:	00000106 	br	8e188 <lseek+0x4c>
   8e184:	0005883a 	mov	r2,zero
   8e188:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8e18c:	e0bffc17 	ldw	r2,-16(fp)
   8e190:	10001026 	beq	r2,zero,8e1d4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8e194:	e0bffc17 	ldw	r2,-16(fp)
   8e198:	10800017 	ldw	r2,0(r2)
   8e19c:	10800717 	ldw	r2,28(r2)
   8e1a0:	10000926 	beq	r2,zero,8e1c8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8e1a4:	e0bffc17 	ldw	r2,-16(fp)
   8e1a8:	10800017 	ldw	r2,0(r2)
   8e1ac:	10800717 	ldw	r2,28(r2)
   8e1b0:	e1bfff17 	ldw	r6,-4(fp)
   8e1b4:	e17ffe17 	ldw	r5,-8(fp)
   8e1b8:	e13ffc17 	ldw	r4,-16(fp)
   8e1bc:	103ee83a 	callr	r2
   8e1c0:	e0bffb15 	stw	r2,-20(fp)
   8e1c4:	00000506 	br	8e1dc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8e1c8:	00bfde84 	movi	r2,-134
   8e1cc:	e0bffb15 	stw	r2,-20(fp)
   8e1d0:	00000206 	br	8e1dc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   8e1d4:	00bfebc4 	movi	r2,-81
   8e1d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8e1dc:	e0bffb17 	ldw	r2,-20(fp)
   8e1e0:	1000070e 	bge	r2,zero,8e200 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   8e1e4:	008e1000 	call	8e100 <alt_get_errno>
   8e1e8:	1007883a 	mov	r3,r2
   8e1ec:	e0bffb17 	ldw	r2,-20(fp)
   8e1f0:	0085c83a 	sub	r2,zero,r2
   8e1f4:	18800015 	stw	r2,0(r3)
    rc = -1;
   8e1f8:	00bfffc4 	movi	r2,-1
   8e1fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8e200:	e0bffb17 	ldw	r2,-20(fp)
}
   8e204:	e037883a 	mov	sp,fp
   8e208:	dfc00117 	ldw	ra,4(sp)
   8e20c:	df000017 	ldw	fp,0(sp)
   8e210:	dec00204 	addi	sp,sp,8
   8e214:	f800283a 	ret

0008e218 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8e218:	defff904 	addi	sp,sp,-28
   8e21c:	dfc00615 	stw	ra,24(sp)
   8e220:	df000515 	stw	fp,20(sp)
   8e224:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8e228:	0009883a 	mov	r4,zero
   8e22c:	00961c00 	call	961c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8e230:	008f2040 	call	8f204 <OSInit>
   8e234:	01000044 	movi	r4,1
   8e238:	0093b600 	call	93b60 <OSSemCreate>
   8e23c:	d0a72715 	stw	r2,-25444(gp)
   8e240:	01000044 	movi	r4,1
   8e244:	0093b600 	call	93b60 <OSSemCreate>
   8e248:	d0a72915 	stw	r2,-25436(gp)
   8e24c:	d0a72104 	addi	r2,gp,-25468
   8e250:	e0bffc15 	stw	r2,-16(fp)
   8e254:	00800044 	movi	r2,1
   8e258:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   8e25c:	e0bffd0b 	ldhu	r2,-12(fp)
   8e260:	1009883a 	mov	r4,r2
   8e264:	0093b600 	call	93b60 <OSSemCreate>
   8e268:	1007883a 	mov	r3,r2
   8e26c:	e0bffc17 	ldw	r2,-16(fp)
   8e270:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8e274:	00961f80 	call	961f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8e278:	018002b4 	movhi	r6,10
   8e27c:	31a17a04 	addi	r6,r6,-31256
   8e280:	014002b4 	movhi	r5,10
   8e284:	29617a04 	addi	r5,r5,-31256
   8e288:	010002b4 	movhi	r4,10
   8e28c:	21217a04 	addi	r4,r4,-31256
   8e290:	00974680 	call	97468 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8e294:	00972a40 	call	972a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8e298:	01000274 	movhi	r4,9
   8e29c:	211cc104 	addi	r4,r4,29444
   8e2a0:	0097f140 	call	97f14 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8e2a4:	d0a72317 	ldw	r2,-25460(gp)
   8e2a8:	d0e72417 	ldw	r3,-25456(gp)
   8e2ac:	d1272517 	ldw	r4,-25452(gp)
   8e2b0:	200d883a 	mov	r6,r4
   8e2b4:	180b883a 	mov	r5,r3
   8e2b8:	1009883a 	mov	r4,r2
   8e2bc:	0080a380 	call	80a38 <main>
   8e2c0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   8e2c4:	01000044 	movi	r4,1
   8e2c8:	008da940 	call	8da94 <close>
  exit (result);
   8e2cc:	e13ffb17 	ldw	r4,-20(fp)
   8e2d0:	0097f280 	call	97f28 <exit>

0008e2d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e2d4:	defffe04 	addi	sp,sp,-8
   8e2d8:	dfc00115 	stw	ra,4(sp)
   8e2dc:	df000015 	stw	fp,0(sp)
   8e2e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e2e4:	d0a00c17 	ldw	r2,-32720(gp)
   8e2e8:	10000326 	beq	r2,zero,8e2f8 <alt_get_errno+0x24>
   8e2ec:	d0a00c17 	ldw	r2,-32720(gp)
   8e2f0:	103ee83a 	callr	r2
   8e2f4:	00000106 	br	8e2fc <alt_get_errno+0x28>
   8e2f8:	d0a71d04 	addi	r2,gp,-25484
}
   8e2fc:	e037883a 	mov	sp,fp
   8e300:	dfc00117 	ldw	ra,4(sp)
   8e304:	df000017 	ldw	fp,0(sp)
   8e308:	dec00204 	addi	sp,sp,8
   8e30c:	f800283a 	ret

0008e310 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8e310:	defff904 	addi	sp,sp,-28
   8e314:	dfc00615 	stw	ra,24(sp)
   8e318:	df000515 	stw	fp,20(sp)
   8e31c:	df000504 	addi	fp,sp,20
   8e320:	e13ffd15 	stw	r4,-12(fp)
   8e324:	e17ffe15 	stw	r5,-8(fp)
   8e328:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e32c:	e0bffd17 	ldw	r2,-12(fp)
   8e330:	10000816 	blt	r2,zero,8e354 <read+0x44>
   8e334:	01400304 	movi	r5,12
   8e338:	e13ffd17 	ldw	r4,-12(fp)
   8e33c:	008b18c0 	call	8b18c <__mulsi3>
   8e340:	1007883a 	mov	r3,r2
   8e344:	008002b4 	movhi	r2,10
   8e348:	10a40004 	addi	r2,r2,-28672
   8e34c:	1885883a 	add	r2,r3,r2
   8e350:	00000106 	br	8e358 <read+0x48>
   8e354:	0005883a 	mov	r2,zero
   8e358:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8e35c:	e0bffb17 	ldw	r2,-20(fp)
   8e360:	10002226 	beq	r2,zero,8e3ec <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8e364:	e0bffb17 	ldw	r2,-20(fp)
   8e368:	10800217 	ldw	r2,8(r2)
   8e36c:	108000cc 	andi	r2,r2,3
   8e370:	10800060 	cmpeqi	r2,r2,1
   8e374:	1000181e 	bne	r2,zero,8e3d8 <read+0xc8>
        (fd->dev->read))
   8e378:	e0bffb17 	ldw	r2,-20(fp)
   8e37c:	10800017 	ldw	r2,0(r2)
   8e380:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8e384:	10001426 	beq	r2,zero,8e3d8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8e388:	e0bffb17 	ldw	r2,-20(fp)
   8e38c:	10800017 	ldw	r2,0(r2)
   8e390:	10800517 	ldw	r2,20(r2)
   8e394:	e0ffff17 	ldw	r3,-4(fp)
   8e398:	180d883a 	mov	r6,r3
   8e39c:	e17ffe17 	ldw	r5,-8(fp)
   8e3a0:	e13ffb17 	ldw	r4,-20(fp)
   8e3a4:	103ee83a 	callr	r2
   8e3a8:	e0bffc15 	stw	r2,-16(fp)
   8e3ac:	e0bffc17 	ldw	r2,-16(fp)
   8e3b0:	1000070e 	bge	r2,zero,8e3d0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   8e3b4:	008e2d40 	call	8e2d4 <alt_get_errno>
   8e3b8:	1007883a 	mov	r3,r2
   8e3bc:	e0bffc17 	ldw	r2,-16(fp)
   8e3c0:	0085c83a 	sub	r2,zero,r2
   8e3c4:	18800015 	stw	r2,0(r3)
          return -1;
   8e3c8:	00bfffc4 	movi	r2,-1
   8e3cc:	00000c06 	br	8e400 <read+0xf0>
        }
        return rval;
   8e3d0:	e0bffc17 	ldw	r2,-16(fp)
   8e3d4:	00000a06 	br	8e400 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8e3d8:	008e2d40 	call	8e2d4 <alt_get_errno>
   8e3dc:	1007883a 	mov	r3,r2
   8e3e0:	00800344 	movi	r2,13
   8e3e4:	18800015 	stw	r2,0(r3)
   8e3e8:	00000406 	br	8e3fc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8e3ec:	008e2d40 	call	8e2d4 <alt_get_errno>
   8e3f0:	1007883a 	mov	r3,r2
   8e3f4:	00801444 	movi	r2,81
   8e3f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8e3fc:	00bfffc4 	movi	r2,-1
}
   8e400:	e037883a 	mov	sp,fp
   8e404:	dfc00117 	ldw	ra,4(sp)
   8e408:	df000017 	ldw	fp,0(sp)
   8e40c:	dec00204 	addi	sp,sp,8
   8e410:	f800283a 	ret

0008e414 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8e414:	defffc04 	addi	sp,sp,-16
   8e418:	dfc00315 	stw	ra,12(sp)
   8e41c:	df000215 	stw	fp,8(sp)
   8e420:	dc000115 	stw	r16,4(sp)
   8e424:	df000204 	addi	fp,sp,8
   8e428:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   8e42c:	e0bffe17 	ldw	r2,-8(fp)
   8e430:	108000d0 	cmplti	r2,r2,3
   8e434:	1000111e 	bne	r2,zero,8e47c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   8e438:	040002b4 	movhi	r16,10
   8e43c:	84240004 	addi	r16,r16,-28672
   8e440:	e0bffe17 	ldw	r2,-8(fp)
   8e444:	01400304 	movi	r5,12
   8e448:	1009883a 	mov	r4,r2
   8e44c:	008b18c0 	call	8b18c <__mulsi3>
   8e450:	8085883a 	add	r2,r16,r2
   8e454:	10800204 	addi	r2,r2,8
   8e458:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8e45c:	040002b4 	movhi	r16,10
   8e460:	84240004 	addi	r16,r16,-28672
   8e464:	e0bffe17 	ldw	r2,-8(fp)
   8e468:	01400304 	movi	r5,12
   8e46c:	1009883a 	mov	r4,r2
   8e470:	008b18c0 	call	8b18c <__mulsi3>
   8e474:	8085883a 	add	r2,r16,r2
   8e478:	10000015 	stw	zero,0(r2)
  }
}
   8e47c:	0001883a 	nop
   8e480:	e6ffff04 	addi	sp,fp,-4
   8e484:	dfc00217 	ldw	ra,8(sp)
   8e488:	df000117 	ldw	fp,4(sp)
   8e48c:	dc000017 	ldw	r16,0(sp)
   8e490:	dec00304 	addi	sp,sp,12
   8e494:	f800283a 	ret

0008e498 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8e498:	defff904 	addi	sp,sp,-28
   8e49c:	df000615 	stw	fp,24(sp)
   8e4a0:	df000604 	addi	fp,sp,24
   8e4a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e4a8:	0005303a 	rdctl	r2,status
   8e4ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e4b0:	e0fffe17 	ldw	r3,-8(fp)
   8e4b4:	00bfff84 	movi	r2,-2
   8e4b8:	1884703a 	and	r2,r3,r2
   8e4bc:	1001703a 	wrctl	status,r2
  
  return context;
   8e4c0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8e4c4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8e4c8:	d0a00e17 	ldw	r2,-32712(gp)
   8e4cc:	10c000c4 	addi	r3,r2,3
   8e4d0:	00bfff04 	movi	r2,-4
   8e4d4:	1884703a 	and	r2,r3,r2
   8e4d8:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8e4dc:	d0e00e17 	ldw	r3,-32712(gp)
   8e4e0:	e0bfff17 	ldw	r2,-4(fp)
   8e4e4:	1887883a 	add	r3,r3,r2
   8e4e8:	00800334 	movhi	r2,12
   8e4ec:	10ba0004 	addi	r2,r2,-6144
   8e4f0:	10c0062e 	bgeu	r2,r3,8e50c <sbrk+0x74>
   8e4f4:	e0bffb17 	ldw	r2,-20(fp)
   8e4f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e4fc:	e0bffa17 	ldw	r2,-24(fp)
   8e500:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8e504:	00bfffc4 	movi	r2,-1
   8e508:	00000b06 	br	8e538 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8e50c:	d0a00e17 	ldw	r2,-32712(gp)
   8e510:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8e514:	d0e00e17 	ldw	r3,-32712(gp)
   8e518:	e0bfff17 	ldw	r2,-4(fp)
   8e51c:	1885883a 	add	r2,r3,r2
   8e520:	d0a00e15 	stw	r2,-32712(gp)
   8e524:	e0bffb17 	ldw	r2,-20(fp)
   8e528:	e0bffc15 	stw	r2,-16(fp)
   8e52c:	e0bffc17 	ldw	r2,-16(fp)
   8e530:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8e534:	e0bffd17 	ldw	r2,-12(fp)
} 
   8e538:	e037883a 	mov	sp,fp
   8e53c:	df000017 	ldw	fp,0(sp)
   8e540:	dec00104 	addi	sp,sp,4
   8e544:	f800283a 	ret

0008e548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e548:	defffe04 	addi	sp,sp,-8
   8e54c:	dfc00115 	stw	ra,4(sp)
   8e550:	df000015 	stw	fp,0(sp)
   8e554:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e558:	d0a00c17 	ldw	r2,-32720(gp)
   8e55c:	10000326 	beq	r2,zero,8e56c <alt_get_errno+0x24>
   8e560:	d0a00c17 	ldw	r2,-32720(gp)
   8e564:	103ee83a 	callr	r2
   8e568:	00000106 	br	8e570 <alt_get_errno+0x28>
   8e56c:	d0a71d04 	addi	r2,gp,-25484
}
   8e570:	e037883a 	mov	sp,fp
   8e574:	dfc00117 	ldw	ra,4(sp)
   8e578:	df000017 	ldw	fp,0(sp)
   8e57c:	dec00204 	addi	sp,sp,8
   8e580:	f800283a 	ret

0008e584 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8e584:	defff904 	addi	sp,sp,-28
   8e588:	dfc00615 	stw	ra,24(sp)
   8e58c:	df000515 	stw	fp,20(sp)
   8e590:	df000504 	addi	fp,sp,20
   8e594:	e13ffd15 	stw	r4,-12(fp)
   8e598:	e17ffe15 	stw	r5,-8(fp)
   8e59c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e5a0:	e0bffd17 	ldw	r2,-12(fp)
   8e5a4:	10000816 	blt	r2,zero,8e5c8 <write+0x44>
   8e5a8:	01400304 	movi	r5,12
   8e5ac:	e13ffd17 	ldw	r4,-12(fp)
   8e5b0:	008b18c0 	call	8b18c <__mulsi3>
   8e5b4:	1007883a 	mov	r3,r2
   8e5b8:	008002b4 	movhi	r2,10
   8e5bc:	10a40004 	addi	r2,r2,-28672
   8e5c0:	1885883a 	add	r2,r3,r2
   8e5c4:	00000106 	br	8e5cc <write+0x48>
   8e5c8:	0005883a 	mov	r2,zero
   8e5cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8e5d0:	e0bffb17 	ldw	r2,-20(fp)
   8e5d4:	10002126 	beq	r2,zero,8e65c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8e5d8:	e0bffb17 	ldw	r2,-20(fp)
   8e5dc:	10800217 	ldw	r2,8(r2)
   8e5e0:	108000cc 	andi	r2,r2,3
   8e5e4:	10001826 	beq	r2,zero,8e648 <write+0xc4>
   8e5e8:	e0bffb17 	ldw	r2,-20(fp)
   8e5ec:	10800017 	ldw	r2,0(r2)
   8e5f0:	10800617 	ldw	r2,24(r2)
   8e5f4:	10001426 	beq	r2,zero,8e648 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8e5f8:	e0bffb17 	ldw	r2,-20(fp)
   8e5fc:	10800017 	ldw	r2,0(r2)
   8e600:	10800617 	ldw	r2,24(r2)
   8e604:	e0ffff17 	ldw	r3,-4(fp)
   8e608:	180d883a 	mov	r6,r3
   8e60c:	e17ffe17 	ldw	r5,-8(fp)
   8e610:	e13ffb17 	ldw	r4,-20(fp)
   8e614:	103ee83a 	callr	r2
   8e618:	e0bffc15 	stw	r2,-16(fp)
   8e61c:	e0bffc17 	ldw	r2,-16(fp)
   8e620:	1000070e 	bge	r2,zero,8e640 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   8e624:	008e5480 	call	8e548 <alt_get_errno>
   8e628:	1007883a 	mov	r3,r2
   8e62c:	e0bffc17 	ldw	r2,-16(fp)
   8e630:	0085c83a 	sub	r2,zero,r2
   8e634:	18800015 	stw	r2,0(r3)
        return -1;
   8e638:	00bfffc4 	movi	r2,-1
   8e63c:	00000c06 	br	8e670 <write+0xec>
      }
      return rval;
   8e640:	e0bffc17 	ldw	r2,-16(fp)
   8e644:	00000a06 	br	8e670 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8e648:	008e5480 	call	8e548 <alt_get_errno>
   8e64c:	1007883a 	mov	r3,r2
   8e650:	00800344 	movi	r2,13
   8e654:	18800015 	stw	r2,0(r3)
   8e658:	00000406 	br	8e66c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8e65c:	008e5480 	call	8e548 <alt_get_errno>
   8e660:	1007883a 	mov	r3,r2
   8e664:	00801444 	movi	r2,81
   8e668:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8e66c:	00bfffc4 	movi	r2,-1
}
   8e670:	e037883a 	mov	sp,fp
   8e674:	dfc00117 	ldw	ra,4(sp)
   8e678:	df000017 	ldw	fp,0(sp)
   8e67c:	dec00204 	addi	sp,sp,8
   8e680:	f800283a 	ret

0008e684 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   8e684:	deffdf04 	addi	sp,sp,-132
   8e688:	dfc02015 	stw	ra,128(sp)
   8e68c:	df001f15 	stw	fp,124(sp)
   8e690:	df001f04 	addi	fp,sp,124
   8e694:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8e698:	e0bfe204 	addi	r2,fp,-120
   8e69c:	100b883a 	mov	r5,r2
   8e6a0:	01003fc4 	movi	r4,255
   8e6a4:	0095ae80 	call	95ae8 <OSTaskQuery>
   8e6a8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8e6ac:	e0bffe83 	ldbu	r2,-6(fp)
   8e6b0:	10803fcc 	andi	r2,r2,255
   8e6b4:	10001e1e 	bne	r2,zero,8e730 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   8e6b8:	e0bfee83 	ldbu	r2,-70(fp)
   8e6bc:	10803fcc 	andi	r2,r2,255
   8e6c0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   8e6c4:	d0a72717 	ldw	r2,-25444(gp)
   8e6c8:	e0fffd04 	addi	r3,fp,-12
   8e6cc:	180b883a 	mov	r5,r3
   8e6d0:	1009883a 	mov	r4,r2
   8e6d4:	00943000 	call	94300 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   8e6d8:	e0bffe43 	ldbu	r2,-7(fp)
   8e6dc:	10803fcc 	andi	r2,r2,255
   8e6e0:	10000726 	beq	r2,zero,8e700 <__env_lock+0x7c>
   8e6e4:	d0a00f17 	ldw	r2,-32708(gp)
   8e6e8:	e0ffe117 	ldw	r3,-124(fp)
   8e6ec:	1880041e 	bne	r3,r2,8e700 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   8e6f0:	d0a72617 	ldw	r2,-25448(gp)
   8e6f4:	10800044 	addi	r2,r2,1
   8e6f8:	d0a72615 	stw	r2,-25448(gp)
   8e6fc:	00000a06 	br	8e728 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   8e700:	d0a72717 	ldw	r2,-25444(gp)
   8e704:	e0fffe84 	addi	r3,fp,-6
   8e708:	180d883a 	mov	r6,r3
   8e70c:	000b883a 	mov	r5,zero
   8e710:	1009883a 	mov	r4,r2
   8e714:	0093e780 	call	93e78 <OSSemPend>
    locks  = 1;
   8e718:	00800044 	movi	r2,1
   8e71c:	d0a72615 	stw	r2,-25448(gp)
    lockid = id;
   8e720:	e0bfe117 	ldw	r2,-124(fp)
   8e724:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   8e728:	0001883a 	nop
   8e72c:	00000106 	br	8e734 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   8e730:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8e734:	e037883a 	mov	sp,fp
   8e738:	dfc00117 	ldw	ra,4(sp)
   8e73c:	df000017 	ldw	fp,0(sp)
   8e740:	dec00204 	addi	sp,sp,8
   8e744:	f800283a 	ret

0008e748 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   8e748:	defffd04 	addi	sp,sp,-12
   8e74c:	dfc00215 	stw	ra,8(sp)
   8e750:	df000115 	stw	fp,4(sp)
   8e754:	df000104 	addi	fp,sp,4
   8e758:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   8e75c:	d0a72617 	ldw	r2,-25448(gp)
   8e760:	10000b26 	beq	r2,zero,8e790 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   8e764:	d0a72617 	ldw	r2,-25448(gp)
   8e768:	10bfffc4 	addi	r2,r2,-1
   8e76c:	d0a72615 	stw	r2,-25448(gp)
   8e770:	d0a72617 	ldw	r2,-25448(gp)
   8e774:	1000071e 	bne	r2,zero,8e794 <__env_unlock+0x4c>
  {
    lockid = -1;
   8e778:	00bfffc4 	movi	r2,-1
   8e77c:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
   8e780:	d0a72717 	ldw	r2,-25444(gp)
   8e784:	1009883a 	mov	r4,r2
   8e788:	00941f00 	call	941f0 <OSSemPost>
   8e78c:	00000106 	br	8e794 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   8e790:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8e794:	e037883a 	mov	sp,fp
   8e798:	dfc00117 	ldw	ra,4(sp)
   8e79c:	df000017 	ldw	fp,0(sp)
   8e7a0:	dec00204 	addi	sp,sp,8
   8e7a4:	f800283a 	ret

0008e7a8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   8e7a8:	deffdb04 	addi	sp,sp,-148
   8e7ac:	dfc02415 	stw	ra,144(sp)
   8e7b0:	df002315 	stw	fp,140(sp)
   8e7b4:	df002304 	addi	fp,sp,140
   8e7b8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e7bc:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   8e7c0:	d0a72a43 	ldbu	r2,-25431(gp)
   8e7c4:	10803fcc 	andi	r2,r2,255
   8e7c8:	10800060 	cmpeqi	r2,r2,1
   8e7cc:	10003626 	beq	r2,zero,8e8a8 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8e7d0:	e0bfe204 	addi	r2,fp,-120
   8e7d4:	100b883a 	mov	r5,r2
   8e7d8:	01003fc4 	movi	r4,255
   8e7dc:	0095ae80 	call	95ae8 <OSTaskQuery>
   8e7e0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8e7e4:	e0bffe83 	ldbu	r2,-6(fp)
   8e7e8:	10803fcc 	andi	r2,r2,255
   8e7ec:	1000301e 	bne	r2,zero,8e8b0 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   8e7f0:	e0bfee83 	ldbu	r2,-70(fp)
   8e7f4:	10803fcc 	andi	r2,r2,255
   8e7f8:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   8e7fc:	d0a72917 	ldw	r2,-25436(gp)
   8e800:	e0fffd04 	addi	r3,fp,-12
   8e804:	180b883a 	mov	r5,r3
   8e808:	1009883a 	mov	r4,r2
   8e80c:	00943000 	call	94300 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e810:	0005303a 	rdctl	r2,status
   8e814:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e818:	e0ffe117 	ldw	r3,-124(fp)
   8e81c:	00bfff84 	movi	r2,-2
   8e820:	1884703a 	and	r2,r3,r2
   8e824:	1001703a 	wrctl	status,r2
  
  return context;
   8e828:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   8e82c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   8e830:	e0bffd0b 	ldhu	r2,-12(fp)
   8e834:	10bfffcc 	andi	r2,r2,65535
   8e838:	10000b1e 	bne	r2,zero,8e868 <__malloc_lock+0xc0>
   8e83c:	d0a01017 	ldw	r2,-32704(gp)
   8e840:	e0ffde17 	ldw	r3,-136(fp)
   8e844:	1880081e 	bne	r3,r2,8e868 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   8e848:	d0a72817 	ldw	r2,-25440(gp)
   8e84c:	10800044 	addi	r2,r2,1
   8e850:	d0a72815 	stw	r2,-25440(gp)
   8e854:	e0bfdd17 	ldw	r2,-140(fp)
   8e858:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e85c:	e0bfdf17 	ldw	r2,-132(fp)
   8e860:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   8e864:	00000e06 	br	8e8a0 <__malloc_lock+0xf8>
   8e868:	e0bfdd17 	ldw	r2,-140(fp)
   8e86c:	e0bfe015 	stw	r2,-128(fp)
   8e870:	e0bfe017 	ldw	r2,-128(fp)
   8e874:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   8e878:	d0a72917 	ldw	r2,-25436(gp)
   8e87c:	e0fffe84 	addi	r3,fp,-6
   8e880:	180d883a 	mov	r6,r3
   8e884:	000b883a 	mov	r5,zero
   8e888:	1009883a 	mov	r4,r2
   8e88c:	0093e780 	call	93e78 <OSSemPend>
    locks  = 1;
   8e890:	00800044 	movi	r2,1
   8e894:	d0a72815 	stw	r2,-25440(gp)
    lockid = id;
   8e898:	e0bfde17 	ldw	r2,-136(fp)
   8e89c:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   8e8a0:	0001883a 	nop
   8e8a4:	00000306 	br	8e8b4 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   8e8a8:	0001883a 	nop
   8e8ac:	00000106 	br	8e8b4 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   8e8b0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8e8b4:	e037883a 	mov	sp,fp
   8e8b8:	dfc00117 	ldw	ra,4(sp)
   8e8bc:	df000017 	ldw	fp,0(sp)
   8e8c0:	dec00204 	addi	sp,sp,8
   8e8c4:	f800283a 	ret

0008e8c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8e8c8:	defff804 	addi	sp,sp,-32
   8e8cc:	dfc00715 	stw	ra,28(sp)
   8e8d0:	df000615 	stw	fp,24(sp)
   8e8d4:	df000604 	addi	fp,sp,24
   8e8d8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e8dc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   8e8e0:	d0a72a43 	ldbu	r2,-25431(gp)
   8e8e4:	10803fcc 	andi	r2,r2,255
   8e8e8:	10800060 	cmpeqi	r2,r2,1
   8e8ec:	10002326 	beq	r2,zero,8e97c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e8f0:	0005303a 	rdctl	r2,status
   8e8f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e8f8:	e0fffe17 	ldw	r3,-8(fp)
   8e8fc:	00bfff84 	movi	r2,-2
   8e900:	1884703a 	and	r2,r3,r2
   8e904:	1001703a 	wrctl	status,r2
  
  return context;
   8e908:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   8e90c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   8e910:	d0a72817 	ldw	r2,-25440(gp)
   8e914:	1000051e 	bne	r2,zero,8e92c <__malloc_unlock+0x64>
   8e918:	e0bffa17 	ldw	r2,-24(fp)
   8e91c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e920:	e0bffb17 	ldw	r2,-20(fp)
   8e924:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   8e928:	00001506 	br	8e980 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   8e92c:	d0a72817 	ldw	r2,-25440(gp)
   8e930:	10bfffc4 	addi	r2,r2,-1
   8e934:	d0a72815 	stw	r2,-25440(gp)
   8e938:	d0a72817 	ldw	r2,-25440(gp)
   8e93c:	10000a1e 	bne	r2,zero,8e968 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   8e940:	00bfffc4 	movi	r2,-1
   8e944:	d0a01015 	stw	r2,-32704(gp)
   8e948:	e0bffa17 	ldw	r2,-24(fp)
   8e94c:	e0bffc15 	stw	r2,-16(fp)
   8e950:	e0bffc17 	ldw	r2,-16(fp)
   8e954:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   8e958:	d0a72917 	ldw	r2,-25436(gp)
   8e95c:	1009883a 	mov	r4,r2
   8e960:	00941f00 	call	941f0 <OSSemPost>
   8e964:	00000606 	br	8e980 <__malloc_unlock+0xb8>
   8e968:	e0bffa17 	ldw	r2,-24(fp)
   8e96c:	e0bffd15 	stw	r2,-12(fp)
   8e970:	e0bffd17 	ldw	r2,-12(fp)
   8e974:	1001703a 	wrctl	status,r2
   8e978:	00000106 	br	8e980 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   8e97c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8e980:	e037883a 	mov	sp,fp
   8e984:	dfc00117 	ldw	ra,4(sp)
   8e988:	df000017 	ldw	fp,0(sp)
   8e98c:	dec00204 	addi	sp,sp,8
   8e990:	f800283a 	ret

0008e994 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8e994:	defff704 	addi	sp,sp,-36
   8e998:	dfc00815 	stw	ra,32(sp)
   8e99c:	df000715 	stw	fp,28(sp)
   8e9a0:	df000704 	addi	fp,sp,28
   8e9a4:	e13ffd15 	stw	r4,-12(fp)
   8e9a8:	e17ffe15 	stw	r5,-8(fp)
   8e9ac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e9b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8e9b4:	e0bfff17 	ldw	r2,-4(fp)
   8e9b8:	1000021e 	bne	r2,zero,8e9c4 <OSEventNameGet+0x30>
        return (0);
   8e9bc:	0005883a 	mov	r2,zero
   8e9c0:	00003706 	br	8eaa0 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8e9c4:	e0bffd17 	ldw	r2,-12(fp)
   8e9c8:	1000051e 	bne	r2,zero,8e9e0 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   8e9cc:	e0bfff17 	ldw	r2,-4(fp)
   8e9d0:	00c00104 	movi	r3,4
   8e9d4:	10c00005 	stb	r3,0(r2)
        return (0);
   8e9d8:	0005883a 	mov	r2,zero
   8e9dc:	00003006 	br	8eaa0 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8e9e0:	e0bffe17 	ldw	r2,-8(fp)
   8e9e4:	1000051e 	bne	r2,zero,8e9fc <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   8e9e8:	e0bfff17 	ldw	r2,-4(fp)
   8e9ec:	00c00304 	movi	r3,12
   8e9f0:	10c00005 	stb	r3,0(r2)
        return (0);
   8e9f4:	0005883a 	mov	r2,zero
   8e9f8:	00002906 	br	8eaa0 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8e9fc:	d0a73803 	ldbu	r2,-25376(gp)
   8ea00:	10803fcc 	andi	r2,r2,255
   8ea04:	10000526 	beq	r2,zero,8ea1c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   8ea08:	e0bfff17 	ldw	r2,-4(fp)
   8ea0c:	00c00444 	movi	r3,17
   8ea10:	10c00005 	stb	r3,0(r2)
        return (0);
   8ea14:	0005883a 	mov	r2,zero
   8ea18:	00002106 	br	8eaa0 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   8ea1c:	e0bffd17 	ldw	r2,-12(fp)
   8ea20:	10800003 	ldbu	r2,0(r2)
   8ea24:	10803fcc 	andi	r2,r2,255
   8ea28:	10bfffc4 	addi	r2,r2,-1
   8ea2c:	10800128 	cmpgeui	r2,r2,4
   8ea30:	10000526 	beq	r2,zero,8ea48 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8ea34:	e0bfff17 	ldw	r2,-4(fp)
   8ea38:	00c00044 	movi	r3,1
   8ea3c:	10c00005 	stb	r3,0(r2)
             return (0);
   8ea40:	0005883a 	mov	r2,zero
   8ea44:	00001606 	br	8eaa0 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   8ea48:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ea4c:	0005303a 	rdctl	r2,status
   8ea50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ea54:	e0fffb17 	ldw	r3,-20(fp)
   8ea58:	00bfff84 	movi	r2,-2
   8ea5c:	1884703a 	and	r2,r3,r2
   8ea60:	1001703a 	wrctl	status,r2
  
  return context;
   8ea64:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   8ea68:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   8ea6c:	e0bffd17 	ldw	r2,-12(fp)
   8ea70:	10800384 	addi	r2,r2,14
   8ea74:	100b883a 	mov	r5,r2
   8ea78:	e13ffe17 	ldw	r4,-8(fp)
   8ea7c:	00904180 	call	90418 <OS_StrCopy>
   8ea80:	e0bffa05 	stb	r2,-24(fp)
   8ea84:	e0bff917 	ldw	r2,-28(fp)
   8ea88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ea8c:	e0bffc17 	ldw	r2,-16(fp)
   8ea90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8ea94:	e0bfff17 	ldw	r2,-4(fp)
   8ea98:	10000005 	stb	zero,0(r2)
    return (len);
   8ea9c:	e0bffa03 	ldbu	r2,-24(fp)
}
   8eaa0:	e037883a 	mov	sp,fp
   8eaa4:	dfc00117 	ldw	ra,4(sp)
   8eaa8:	df000017 	ldw	fp,0(sp)
   8eaac:	dec00204 	addi	sp,sp,8
   8eab0:	f800283a 	ret

0008eab4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8eab4:	defff604 	addi	sp,sp,-40
   8eab8:	dfc00915 	stw	ra,36(sp)
   8eabc:	df000815 	stw	fp,32(sp)
   8eac0:	df000804 	addi	fp,sp,32
   8eac4:	e13ffd15 	stw	r4,-12(fp)
   8eac8:	e17ffe15 	stw	r5,-8(fp)
   8eacc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8ead0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8ead4:	e0bfff17 	ldw	r2,-4(fp)
   8ead8:	10004026 	beq	r2,zero,8ebdc <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8eadc:	e0bffd17 	ldw	r2,-12(fp)
   8eae0:	1000041e 	bne	r2,zero,8eaf4 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   8eae4:	e0bfff17 	ldw	r2,-4(fp)
   8eae8:	00c00104 	movi	r3,4
   8eaec:	10c00005 	stb	r3,0(r2)
        return;
   8eaf0:	00003b06 	br	8ebe0 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8eaf4:	e0bffe17 	ldw	r2,-8(fp)
   8eaf8:	1000041e 	bne	r2,zero,8eb0c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   8eafc:	e0bfff17 	ldw	r2,-4(fp)
   8eb00:	00c00304 	movi	r3,12
   8eb04:	10c00005 	stb	r3,0(r2)
        return;
   8eb08:	00003506 	br	8ebe0 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8eb0c:	d0a73803 	ldbu	r2,-25376(gp)
   8eb10:	10803fcc 	andi	r2,r2,255
   8eb14:	10000426 	beq	r2,zero,8eb28 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   8eb18:	e0bfff17 	ldw	r2,-4(fp)
   8eb1c:	00c00484 	movi	r3,18
   8eb20:	10c00005 	stb	r3,0(r2)
        return;
   8eb24:	00002e06 	br	8ebe0 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   8eb28:	e0bffd17 	ldw	r2,-12(fp)
   8eb2c:	10800003 	ldbu	r2,0(r2)
   8eb30:	10803fcc 	andi	r2,r2,255
   8eb34:	10bfffc4 	addi	r2,r2,-1
   8eb38:	10800128 	cmpgeui	r2,r2,4
   8eb3c:	10000426 	beq	r2,zero,8eb50 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8eb40:	e0bfff17 	ldw	r2,-4(fp)
   8eb44:	00c00044 	movi	r3,1
   8eb48:	10c00005 	stb	r3,0(r2)
             return;
   8eb4c:	00002406 	br	8ebe0 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   8eb50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8eb54:	0005303a 	rdctl	r2,status
   8eb58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8eb5c:	e0fffc17 	ldw	r3,-16(fp)
   8eb60:	00bfff84 	movi	r2,-2
   8eb64:	1884703a 	and	r2,r3,r2
   8eb68:	1001703a 	wrctl	status,r2
  
  return context;
   8eb6c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   8eb70:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   8eb74:	e13ffe17 	ldw	r4,-8(fp)
   8eb78:	009048c0 	call	9048c <OS_StrLen>
   8eb7c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   8eb80:	e0bffa03 	ldbu	r2,-24(fp)
   8eb84:	10800830 	cmpltui	r2,r2,32
   8eb88:	1000081e 	bne	r2,zero,8ebac <OSEventNameSet+0xf8>
   8eb8c:	e0bff817 	ldw	r2,-32(fp)
   8eb90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8eb94:	e0bff917 	ldw	r2,-28(fp)
   8eb98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   8eb9c:	e0bfff17 	ldw	r2,-4(fp)
   8eba0:	00c002c4 	movi	r3,11
   8eba4:	10c00005 	stb	r3,0(r2)
        return;
   8eba8:	00000d06 	br	8ebe0 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   8ebac:	e0bffd17 	ldw	r2,-12(fp)
   8ebb0:	10800384 	addi	r2,r2,14
   8ebb4:	e17ffe17 	ldw	r5,-8(fp)
   8ebb8:	1009883a 	mov	r4,r2
   8ebbc:	00904180 	call	90418 <OS_StrCopy>
   8ebc0:	e0bff817 	ldw	r2,-32(fp)
   8ebc4:	e0bffb15 	stw	r2,-20(fp)
   8ebc8:	e0bffb17 	ldw	r2,-20(fp)
   8ebcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8ebd0:	e0bfff17 	ldw	r2,-4(fp)
   8ebd4:	10000005 	stb	zero,0(r2)
   8ebd8:	00000106 	br	8ebe0 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   8ebdc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   8ebe0:	e037883a 	mov	sp,fp
   8ebe4:	dfc00117 	ldw	ra,4(sp)
   8ebe8:	df000017 	ldw	fp,0(sp)
   8ebec:	dec00204 	addi	sp,sp,8
   8ebf0:	f800283a 	ret

0008ebf4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   8ebf4:	deffed04 	addi	sp,sp,-76
   8ebf8:	dfc01215 	stw	ra,72(sp)
   8ebfc:	df001115 	stw	fp,68(sp)
   8ec00:	df001104 	addi	fp,sp,68
   8ec04:	e13ffc15 	stw	r4,-16(fp)
   8ec08:	e17ffd15 	stw	r5,-12(fp)
   8ec0c:	e1bffe15 	stw	r6,-8(fp)
   8ec10:	3805883a 	mov	r2,r7
   8ec14:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   8ec18:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   8ec1c:	e0800217 	ldw	r2,8(fp)
   8ec20:	1000021e 	bne	r2,zero,8ec2c <OSEventPendMulti+0x38>
        return (0);
   8ec24:	0005883a 	mov	r2,zero
   8ec28:	00017106 	br	8f1f0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   8ec2c:	e0bffc17 	ldw	r2,-16(fp)
   8ec30:	1000051e 	bne	r2,zero,8ec48 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   8ec34:	e0800217 	ldw	r2,8(fp)
   8ec38:	00c00104 	movi	r3,4
   8ec3c:	10c00005 	stb	r3,0(r2)
        return (0);
   8ec40:	0005883a 	mov	r2,zero
   8ec44:	00016a06 	br	8f1f0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   8ec48:	e0bffd17 	ldw	r2,-12(fp)
   8ec4c:	1000051e 	bne	r2,zero,8ec64 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   8ec50:	e0800217 	ldw	r2,8(fp)
   8ec54:	00c00104 	movi	r3,4
   8ec58:	10c00005 	stb	r3,0(r2)
        return (0);
   8ec5c:	0005883a 	mov	r2,zero
   8ec60:	00016306 	br	8f1f0 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   8ec64:	e0bffe17 	ldw	r2,-8(fp)
   8ec68:	1000051e 	bne	r2,zero,8ec80 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   8ec6c:	e0800217 	ldw	r2,8(fp)
   8ec70:	00c00104 	movi	r3,4
   8ec74:	10c00005 	stb	r3,0(r2)
        return (0);
   8ec78:	0005883a 	mov	r2,zero
   8ec7c:	00015c06 	br	8f1f0 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   8ec80:	e0bffd17 	ldw	r2,-12(fp)
   8ec84:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   8ec88:	e0bffc17 	ldw	r2,-16(fp)
   8ec8c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   8ec90:	e0bfef17 	ldw	r2,-68(fp)
   8ec94:	10800017 	ldw	r2,0(r2)
   8ec98:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   8ec9c:	00001906 	br	8ed04 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   8eca0:	e0bff017 	ldw	r2,-64(fp)
   8eca4:	10800003 	ldbu	r2,0(r2)
   8eca8:	10803fcc 	andi	r2,r2,255
   8ecac:	10c000a0 	cmpeqi	r3,r2,2
   8ecb0:	1800091e 	bne	r3,zero,8ecd8 <OSEventPendMulti+0xe4>
   8ecb4:	10c000e0 	cmpeqi	r3,r2,3
   8ecb8:	1800091e 	bne	r3,zero,8ece0 <OSEventPendMulti+0xec>
   8ecbc:	10800060 	cmpeqi	r2,r2,1
   8ecc0:	1000091e 	bne	r2,zero,8ece8 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   8ecc4:	e0800217 	ldw	r2,8(fp)
   8ecc8:	00c00044 	movi	r3,1
   8eccc:	10c00005 	stb	r3,0(r2)
                 return (0);
   8ecd0:	0005883a 	mov	r2,zero
   8ecd4:	00014606 	br	8f1f0 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   8ecd8:	0001883a 	nop
   8ecdc:	00000306 	br	8ecec <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   8ece0:	0001883a 	nop
   8ece4:	00000106 	br	8ecec <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   8ece8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   8ecec:	e0bfef17 	ldw	r2,-68(fp)
   8ecf0:	10800104 	addi	r2,r2,4
   8ecf4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   8ecf8:	e0bfef17 	ldw	r2,-68(fp)
   8ecfc:	10800017 	ldw	r2,0(r2)
   8ed00:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   8ed04:	e0bff017 	ldw	r2,-64(fp)
   8ed08:	103fe51e 	bne	r2,zero,8eca0 <__alt_data_end+0xfffd04a0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   8ed0c:	d0a73803 	ldbu	r2,-25376(gp)
   8ed10:	10803fcc 	andi	r2,r2,255
   8ed14:	10000526 	beq	r2,zero,8ed2c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   8ed18:	e0800217 	ldw	r2,8(fp)
   8ed1c:	00c00084 	movi	r3,2
   8ed20:	10c00005 	stb	r3,0(r2)
        return (0);
   8ed24:	0005883a 	mov	r2,zero
   8ed28:	00013106 	br	8f1f0 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   8ed2c:	d0a72a03 	ldbu	r2,-25432(gp)
   8ed30:	10803fcc 	andi	r2,r2,255
   8ed34:	10000526 	beq	r2,zero,8ed4c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   8ed38:	e0800217 	ldw	r2,8(fp)
   8ed3c:	00c00344 	movi	r3,13
   8ed40:	10c00005 	stb	r3,0(r2)
        return (0);
   8ed44:	0005883a 	mov	r2,zero
   8ed48:	00012906 	br	8f1f0 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ed4c:	0005303a 	rdctl	r2,status
   8ed50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ed54:	e0fffb17 	ldw	r3,-20(fp)
   8ed58:	00bfff84 	movi	r2,-2
   8ed5c:	1884703a 	and	r2,r3,r2
   8ed60:	1001703a 	wrctl	status,r2
  
  return context;
   8ed64:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   8ed68:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   8ed6c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   8ed70:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   8ed74:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   8ed78:	e0bffc17 	ldw	r2,-16(fp)
   8ed7c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   8ed80:	e0bfef17 	ldw	r2,-68(fp)
   8ed84:	10800017 	ldw	r2,0(r2)
   8ed88:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8ed8c:	00008106 	br	8ef94 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   8ed90:	e0bff017 	ldw	r2,-64(fp)
   8ed94:	10800003 	ldbu	r2,0(r2)
   8ed98:	10803fcc 	andi	r2,r2,255
   8ed9c:	10c000a0 	cmpeqi	r3,r2,2
   8eda0:	18003c1e 	bne	r3,zero,8ee94 <OSEventPendMulti+0x2a0>
   8eda4:	10c000e0 	cmpeqi	r3,r2,3
   8eda8:	1800031e 	bne	r3,zero,8edb8 <OSEventPendMulti+0x1c4>
   8edac:	10800060 	cmpeqi	r2,r2,1
   8edb0:	10001e1e 	bne	r2,zero,8ee2c <OSEventPendMulti+0x238>
   8edb4:	00006606 	br	8ef50 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   8edb8:	e0bff017 	ldw	r2,-64(fp)
   8edbc:	1080020b 	ldhu	r2,8(r2)
   8edc0:	10bfffcc 	andi	r2,r2,65535
   8edc4:	10001526 	beq	r2,zero,8ee1c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   8edc8:	e0bff017 	ldw	r2,-64(fp)
   8edcc:	1080020b 	ldhu	r2,8(r2)
   8edd0:	10bfffc4 	addi	r2,r2,-1
   8edd4:	1007883a 	mov	r3,r2
   8edd8:	e0bff017 	ldw	r2,-64(fp)
   8eddc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   8ede0:	e0bffd17 	ldw	r2,-12(fp)
   8ede4:	10c00104 	addi	r3,r2,4
   8ede8:	e0fffd15 	stw	r3,-12(fp)
   8edec:	e0fff017 	ldw	r3,-64(fp)
   8edf0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   8edf4:	00800044 	movi	r2,1
   8edf8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   8edfc:	e0bffe17 	ldw	r2,-8(fp)
   8ee00:	10c00104 	addi	r3,r2,4
   8ee04:	e0fffe15 	stw	r3,-8(fp)
   8ee08:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   8ee0c:	e0bff18b 	ldhu	r2,-58(fp)
   8ee10:	10800044 	addi	r2,r2,1
   8ee14:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   8ee18:	00005806 	br	8ef7c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   8ee1c:	e0bff203 	ldbu	r2,-56(fp)
   8ee20:	10800054 	ori	r2,r2,1
   8ee24:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   8ee28:	00005406 	br	8ef7c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   8ee2c:	e0bff017 	ldw	r2,-64(fp)
   8ee30:	10800117 	ldw	r2,4(r2)
   8ee34:	10001326 	beq	r2,zero,8ee84 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   8ee38:	e0bffe17 	ldw	r2,-8(fp)
   8ee3c:	10c00104 	addi	r3,r2,4
   8ee40:	e0fffe15 	stw	r3,-8(fp)
   8ee44:	e0fff017 	ldw	r3,-64(fp)
   8ee48:	18c00117 	ldw	r3,4(r3)
   8ee4c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   8ee50:	e0bff017 	ldw	r2,-64(fp)
   8ee54:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   8ee58:	e0bffd17 	ldw	r2,-12(fp)
   8ee5c:	10c00104 	addi	r3,r2,4
   8ee60:	e0fffd15 	stw	r3,-12(fp)
   8ee64:	e0fff017 	ldw	r3,-64(fp)
   8ee68:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   8ee6c:	00800044 	movi	r2,1
   8ee70:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   8ee74:	e0bff18b 	ldhu	r2,-58(fp)
   8ee78:	10800044 	addi	r2,r2,1
   8ee7c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   8ee80:	00003e06 	br	8ef7c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   8ee84:	e0bff203 	ldbu	r2,-56(fp)
   8ee88:	10800094 	ori	r2,r2,2
   8ee8c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   8ee90:	00003a06 	br	8ef7c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   8ee94:	e0bff017 	ldw	r2,-64(fp)
   8ee98:	10800117 	ldw	r2,4(r2)
   8ee9c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   8eea0:	e0bff517 	ldw	r2,-44(fp)
   8eea4:	1080058b 	ldhu	r2,22(r2)
   8eea8:	10bfffcc 	andi	r2,r2,65535
   8eeac:	10002426 	beq	r2,zero,8ef40 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   8eeb0:	e0bffe17 	ldw	r2,-8(fp)
   8eeb4:	10c00104 	addi	r3,r2,4
   8eeb8:	e0fffe15 	stw	r3,-8(fp)
   8eebc:	e0fff517 	ldw	r3,-44(fp)
   8eec0:	18c00417 	ldw	r3,16(r3)
   8eec4:	19400104 	addi	r5,r3,4
   8eec8:	e13ff517 	ldw	r4,-44(fp)
   8eecc:	21400415 	stw	r5,16(r4)
   8eed0:	18c00017 	ldw	r3,0(r3)
   8eed4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   8eed8:	e0bff517 	ldw	r2,-44(fp)
   8eedc:	10c00417 	ldw	r3,16(r2)
   8eee0:	e0bff517 	ldw	r2,-44(fp)
   8eee4:	10800217 	ldw	r2,8(r2)
   8eee8:	1880041e 	bne	r3,r2,8eefc <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   8eeec:	e0bff517 	ldw	r2,-44(fp)
   8eef0:	10c00117 	ldw	r3,4(r2)
   8eef4:	e0bff517 	ldw	r2,-44(fp)
   8eef8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   8eefc:	e0bff517 	ldw	r2,-44(fp)
   8ef00:	1080058b 	ldhu	r2,22(r2)
   8ef04:	10bfffc4 	addi	r2,r2,-1
   8ef08:	1007883a 	mov	r3,r2
   8ef0c:	e0bff517 	ldw	r2,-44(fp)
   8ef10:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   8ef14:	e0bffd17 	ldw	r2,-12(fp)
   8ef18:	10c00104 	addi	r3,r2,4
   8ef1c:	e0fffd15 	stw	r3,-12(fp)
   8ef20:	e0fff017 	ldw	r3,-64(fp)
   8ef24:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   8ef28:	00800044 	movi	r2,1
   8ef2c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   8ef30:	e0bff18b 	ldhu	r2,-58(fp)
   8ef34:	10800044 	addi	r2,r2,1
   8ef38:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   8ef3c:	00000f06 	br	8ef7c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   8ef40:	e0bff203 	ldbu	r2,-56(fp)
   8ef44:	10800114 	ori	r2,r2,4
   8ef48:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   8ef4c:	00000b06 	br	8ef7c <OSEventPendMulti+0x388>
   8ef50:	e0bff317 	ldw	r2,-52(fp)
   8ef54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ef58:	e0bff417 	ldw	r2,-48(fp)
   8ef5c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   8ef60:	e0bffd17 	ldw	r2,-12(fp)
   8ef64:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   8ef68:	e0800217 	ldw	r2,8(fp)
   8ef6c:	00c00044 	movi	r3,1
   8ef70:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   8ef74:	e0bff18b 	ldhu	r2,-58(fp)
   8ef78:	00009d06 	br	8f1f0 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   8ef7c:	e0bfef17 	ldw	r2,-68(fp)
   8ef80:	10800104 	addi	r2,r2,4
   8ef84:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   8ef88:	e0bfef17 	ldw	r2,-68(fp)
   8ef8c:	10800017 	ldw	r2,0(r2)
   8ef90:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8ef94:	e0bff017 	ldw	r2,-64(fp)
   8ef98:	103f7d1e 	bne	r2,zero,8ed90 <__alt_data_end+0xfffd0590>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   8ef9c:	e0bff103 	ldbu	r2,-60(fp)
   8efa0:	10800058 	cmpnei	r2,r2,1
   8efa4:	10000a1e 	bne	r2,zero,8efd0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   8efa8:	e0bffd17 	ldw	r2,-12(fp)
   8efac:	10000015 	stw	zero,0(r2)
   8efb0:	e0bff317 	ldw	r2,-52(fp)
   8efb4:	e0bff615 	stw	r2,-40(fp)
   8efb8:	e0bff617 	ldw	r2,-40(fp)
   8efbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   8efc0:	e0800217 	ldw	r2,8(fp)
   8efc4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   8efc8:	e0bff18b 	ldhu	r2,-58(fp)
   8efcc:	00008806 	br	8f1f0 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   8efd0:	d0a73917 	ldw	r2,-25372(gp)
   8efd4:	d0e73917 	ldw	r3,-25372(gp)
   8efd8:	19000c03 	ldbu	r4,48(r3)
   8efdc:	e0fff203 	ldbu	r3,-56(fp)
   8efe0:	20c6b03a 	or	r3,r4,r3
   8efe4:	1809883a 	mov	r4,r3
   8efe8:	00ffe004 	movi	r3,-128
   8efec:	20c6b03a 	or	r3,r4,r3
   8eff0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   8eff4:	d0a73917 	ldw	r2,-25372(gp)
   8eff8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   8effc:	d0a73917 	ldw	r2,-25372(gp)
   8f000:	e0ffff0b 	ldhu	r3,-4(fp)
   8f004:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   8f008:	e13ffc17 	ldw	r4,-16(fp)
   8f00c:	008fb300 	call	8fb30 <OS_EventTaskWaitMulti>
   8f010:	e0bff317 	ldw	r2,-52(fp)
   8f014:	e0bff915 	stw	r2,-28(fp)
   8f018:	e0bff917 	ldw	r2,-28(fp)
   8f01c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   8f020:	00902d40 	call	902d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f024:	0005303a 	rdctl	r2,status
   8f028:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f02c:	e0fff717 	ldw	r3,-36(fp)
   8f030:	00bfff84 	movi	r2,-2
   8f034:	1884703a 	and	r2,r3,r2
   8f038:	1001703a 	wrctl	status,r2
  
  return context;
   8f03c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   8f040:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   8f044:	d0a73917 	ldw	r2,-25372(gp)
   8f048:	10800c43 	ldbu	r2,49(r2)
   8f04c:	10803fcc 	andi	r2,r2,255
   8f050:	10000226 	beq	r2,zero,8f05c <OSEventPendMulti+0x468>
   8f054:	108000a0 	cmpeqi	r2,r2,2
   8f058:	10001826 	beq	r2,zero,8f0bc <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   8f05c:	d0a73917 	ldw	r2,-25372(gp)
   8f060:	10800717 	ldw	r2,28(r2)
   8f064:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   8f068:	e0bff017 	ldw	r2,-64(fp)
   8f06c:	10000b26 	beq	r2,zero,8f09c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   8f070:	e0bffd17 	ldw	r2,-12(fp)
   8f074:	10c00104 	addi	r3,r2,4
   8f078:	e0fffd15 	stw	r3,-12(fp)
   8f07c:	e0fff017 	ldw	r3,-64(fp)
   8f080:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   8f084:	e0bffd17 	ldw	r2,-12(fp)
   8f088:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   8f08c:	e0bff18b 	ldhu	r2,-58(fp)
   8f090:	10800044 	addi	r2,r2,1
   8f094:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   8f098:	00000d06 	br	8f0d0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   8f09c:	d0a73917 	ldw	r2,-25372(gp)
   8f0a0:	00c00044 	movi	r3,1
   8f0a4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8f0a8:	d0a73917 	ldw	r2,-25372(gp)
   8f0ac:	e17ffc17 	ldw	r5,-16(fp)
   8f0b0:	1009883a 	mov	r4,r2
   8f0b4:	008fd380 	call	8fd38 <OS_EventTaskRemoveMulti>
             }
			 break;
   8f0b8:	00000506 	br	8f0d0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8f0bc:	d0a73917 	ldw	r2,-25372(gp)
   8f0c0:	e17ffc17 	ldw	r5,-16(fp)
   8f0c4:	1009883a 	mov	r4,r2
   8f0c8:	008fd380 	call	8fd38 <OS_EventTaskRemoveMulti>
             break;
   8f0cc:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   8f0d0:	d0a73917 	ldw	r2,-25372(gp)
   8f0d4:	10800c43 	ldbu	r2,49(r2)
   8f0d8:	10803fcc 	andi	r2,r2,255
   8f0dc:	10000326 	beq	r2,zero,8f0ec <OSEventPendMulti+0x4f8>
   8f0e0:	108000a0 	cmpeqi	r2,r2,2
   8f0e4:	1000231e 	bne	r2,zero,8f174 <OSEventPendMulti+0x580>
   8f0e8:	00002a06 	br	8f194 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   8f0ec:	e0bff017 	ldw	r2,-64(fp)
   8f0f0:	10800003 	ldbu	r2,0(r2)
   8f0f4:	10803fcc 	andi	r2,r2,255
   8f0f8:	0080100e 	bge	zero,r2,8f13c <OSEventPendMulti+0x548>
   8f0fc:	10c000d0 	cmplti	r3,r2,3
   8f100:	1800071e 	bne	r3,zero,8f120 <OSEventPendMulti+0x52c>
   8f104:	108000e0 	cmpeqi	r2,r2,3
   8f108:	10000c26 	beq	r2,zero,8f13c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   8f10c:	e0bffe17 	ldw	r2,-8(fp)
   8f110:	10c00104 	addi	r3,r2,4
   8f114:	e0fffe15 	stw	r3,-8(fp)
   8f118:	10000015 	stw	zero,0(r2)
                      break;
   8f11c:	00001206 	br	8f168 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   8f120:	e0bffe17 	ldw	r2,-8(fp)
   8f124:	10c00104 	addi	r3,r2,4
   8f128:	e0fffe15 	stw	r3,-8(fp)
   8f12c:	d0e73917 	ldw	r3,-25372(gp)
   8f130:	18c00917 	ldw	r3,36(r3)
   8f134:	10c00015 	stw	r3,0(r2)
                      break;
   8f138:	00000b06 	br	8f168 <OSEventPendMulti+0x574>
   8f13c:	e0bff317 	ldw	r2,-52(fp)
   8f140:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f144:	e0bff817 	ldw	r2,-32(fp)
   8f148:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   8f14c:	e0bffd17 	ldw	r2,-12(fp)
   8f150:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   8f154:	e0800217 	ldw	r2,8(fp)
   8f158:	00c00044 	movi	r3,1
   8f15c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   8f160:	e0bff18b 	ldhu	r2,-58(fp)
   8f164:	00002206 	br	8f1f0 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   8f168:	e0800217 	ldw	r2,8(fp)
   8f16c:	10000005 	stb	zero,0(r2)
             break;
   8f170:	00001006 	br	8f1b4 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   8f174:	e0bffe17 	ldw	r2,-8(fp)
   8f178:	10c00104 	addi	r3,r2,4
   8f17c:	e0fffe15 	stw	r3,-8(fp)
   8f180:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   8f184:	e0800217 	ldw	r2,8(fp)
   8f188:	00c00384 	movi	r3,14
   8f18c:	10c00005 	stb	r3,0(r2)
             break;
   8f190:	00000806 	br	8f1b4 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   8f194:	e0bffe17 	ldw	r2,-8(fp)
   8f198:	10c00104 	addi	r3,r2,4
   8f19c:	e0fffe15 	stw	r3,-8(fp)
   8f1a0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   8f1a4:	e0800217 	ldw	r2,8(fp)
   8f1a8:	00c00284 	movi	r3,10
   8f1ac:	10c00005 	stb	r3,0(r2)
             break;
   8f1b0:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   8f1b4:	d0a73917 	ldw	r2,-25372(gp)
   8f1b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   8f1bc:	d0a73917 	ldw	r2,-25372(gp)
   8f1c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   8f1c4:	d0a73917 	ldw	r2,-25372(gp)
   8f1c8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   8f1cc:	d0a73917 	ldw	r2,-25372(gp)
   8f1d0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   8f1d4:	d0a73917 	ldw	r2,-25372(gp)
   8f1d8:	10000915 	stw	zero,36(r2)
   8f1dc:	e0bff317 	ldw	r2,-52(fp)
   8f1e0:	e0bffa15 	stw	r2,-24(fp)
   8f1e4:	e0bffa17 	ldw	r2,-24(fp)
   8f1e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   8f1ec:	e0bff18b 	ldhu	r2,-58(fp)
}
   8f1f0:	e037883a 	mov	sp,fp
   8f1f4:	dfc00117 	ldw	ra,4(sp)
   8f1f8:	df000017 	ldw	fp,0(sp)
   8f1fc:	dec00204 	addi	sp,sp,8
   8f200:	f800283a 	ret

0008f204 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   8f204:	defffe04 	addi	sp,sp,-8
   8f208:	dfc00115 	stw	ra,4(sp)
   8f20c:	df000015 	stw	fp,0(sp)
   8f210:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   8f214:	0097c040 	call	97c04 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   8f218:	008ff800 	call	8ff80 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   8f21c:	008ffc80 	call	8ffc8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   8f220:	00901340 	call	90134 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   8f224:	008fea00 	call	8fea0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   8f228:	0091fd40 	call	91fd4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   8f22c:	00928d40 	call	928d4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   8f230:	0093a080 	call	93a08 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   8f234:	00900340 	call	90034 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   8f238:	00900b40 	call	900b4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   8f23c:	0097c240 	call	97c24 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   8f240:	00909a80 	call	909a8 <OSDebugInit>
#endif
}
   8f244:	0001883a 	nop
   8f248:	e037883a 	mov	sp,fp
   8f24c:	dfc00117 	ldw	ra,4(sp)
   8f250:	df000017 	ldw	fp,0(sp)
   8f254:	dec00204 	addi	sp,sp,8
   8f258:	f800283a 	ret

0008f25c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   8f25c:	deffff04 	addi	sp,sp,-4
   8f260:	df000015 	stw	fp,0(sp)
   8f264:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   8f268:	d0a72a43 	ldbu	r2,-25431(gp)
   8f26c:	10803fcc 	andi	r2,r2,255
   8f270:	10800058 	cmpnei	r2,r2,1
   8f274:	1000071e 	bne	r2,zero,8f294 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   8f278:	d0a73803 	ldbu	r2,-25376(gp)
   8f27c:	10803fcc 	andi	r2,r2,255
   8f280:	10803fe0 	cmpeqi	r2,r2,255
   8f284:	1000031e 	bne	r2,zero,8f294 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   8f288:	d0a73803 	ldbu	r2,-25376(gp)
   8f28c:	10800044 	addi	r2,r2,1
   8f290:	d0a73805 	stb	r2,-25376(gp)
        }
    }
}
   8f294:	0001883a 	nop
   8f298:	e037883a 	mov	sp,fp
   8f29c:	df000017 	ldw	fp,0(sp)
   8f2a0:	dec00104 	addi	sp,sp,4
   8f2a4:	f800283a 	ret

0008f2a8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   8f2a8:	defffb04 	addi	sp,sp,-20
   8f2ac:	dfc00415 	stw	ra,16(sp)
   8f2b0:	df000315 	stw	fp,12(sp)
   8f2b4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8f2b8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   8f2bc:	d0a72a43 	ldbu	r2,-25431(gp)
   8f2c0:	10803fcc 	andi	r2,r2,255
   8f2c4:	10800058 	cmpnei	r2,r2,1
   8f2c8:	10002f1e 	bne	r2,zero,8f388 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f2cc:	0005303a 	rdctl	r2,status
   8f2d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f2d4:	e0ffff17 	ldw	r3,-4(fp)
   8f2d8:	00bfff84 	movi	r2,-2
   8f2dc:	1884703a 	and	r2,r3,r2
   8f2e0:	1001703a 	wrctl	status,r2
  
  return context;
   8f2e4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   8f2e8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   8f2ec:	d0a73803 	ldbu	r2,-25376(gp)
   8f2f0:	10803fcc 	andi	r2,r2,255
   8f2f4:	10000326 	beq	r2,zero,8f304 <OSIntExit+0x5c>
            OSIntNesting--;
   8f2f8:	d0a73803 	ldbu	r2,-25376(gp)
   8f2fc:	10bfffc4 	addi	r2,r2,-1
   8f300:	d0a73805 	stb	r2,-25376(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   8f304:	d0a73803 	ldbu	r2,-25376(gp)
   8f308:	10803fcc 	andi	r2,r2,255
   8f30c:	10001a1e 	bne	r2,zero,8f378 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   8f310:	d0a72a03 	ldbu	r2,-25432(gp)
   8f314:	10803fcc 	andi	r2,r2,255
   8f318:	1000171e 	bne	r2,zero,8f378 <OSIntExit+0xd0>
                OS_SchedNew();
   8f31c:	00903a40 	call	903a4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   8f320:	d0e72c03 	ldbu	r3,-25424(gp)
   8f324:	d0a72c43 	ldbu	r2,-25423(gp)
   8f328:	18c03fcc 	andi	r3,r3,255
   8f32c:	10803fcc 	andi	r2,r2,255
   8f330:	18801126 	beq	r3,r2,8f378 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   8f334:	d0a72c03 	ldbu	r2,-25424(gp)
   8f338:	10c03fcc 	andi	r3,r2,255
   8f33c:	008002b4 	movhi	r2,10
   8f340:	10bc7904 	addi	r2,r2,-3612
   8f344:	18c7883a 	add	r3,r3,r3
   8f348:	18c7883a 	add	r3,r3,r3
   8f34c:	10c5883a 	add	r2,r2,r3
   8f350:	10800017 	ldw	r2,0(r2)
   8f354:	d0a73415 	stw	r2,-25392(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   8f358:	d0a73417 	ldw	r2,-25392(gp)
   8f35c:	10c00e17 	ldw	r3,56(r2)
   8f360:	18c00044 	addi	r3,r3,1
   8f364:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   8f368:	d0a72f17 	ldw	r2,-25412(gp)
   8f36c:	10800044 	addi	r2,r2,1
   8f370:	d0a72f15 	stw	r2,-25412(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   8f374:	00979300 	call	97930 <OSCtxSw>
   8f378:	e0bffd17 	ldw	r2,-12(fp)
   8f37c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f380:	e0bffe17 	ldw	r2,-8(fp)
   8f384:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8f388:	0001883a 	nop
   8f38c:	e037883a 	mov	sp,fp
   8f390:	dfc00117 	ldw	ra,4(sp)
   8f394:	df000017 	ldw	fp,0(sp)
   8f398:	dec00204 	addi	sp,sp,8
   8f39c:	f800283a 	ret

0008f3a0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   8f3a0:	defffc04 	addi	sp,sp,-16
   8f3a4:	df000315 	stw	fp,12(sp)
   8f3a8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8f3ac:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   8f3b0:	d0a72a43 	ldbu	r2,-25431(gp)
   8f3b4:	10803fcc 	andi	r2,r2,255
   8f3b8:	10800058 	cmpnei	r2,r2,1
   8f3bc:	1000161e 	bne	r2,zero,8f418 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f3c0:	0005303a 	rdctl	r2,status
   8f3c4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f3c8:	e0ffff17 	ldw	r3,-4(fp)
   8f3cc:	00bfff84 	movi	r2,-2
   8f3d0:	1884703a 	and	r2,r3,r2
   8f3d4:	1001703a 	wrctl	status,r2
  
  return context;
   8f3d8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   8f3dc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   8f3e0:	d0a73803 	ldbu	r2,-25376(gp)
   8f3e4:	10803fcc 	andi	r2,r2,255
   8f3e8:	1000071e 	bne	r2,zero,8f408 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   8f3ec:	d0a72a03 	ldbu	r2,-25432(gp)
   8f3f0:	10803fcc 	andi	r2,r2,255
   8f3f4:	10803fe0 	cmpeqi	r2,r2,255
   8f3f8:	1000031e 	bne	r2,zero,8f408 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   8f3fc:	d0a72a03 	ldbu	r2,-25432(gp)
   8f400:	10800044 	addi	r2,r2,1
   8f404:	d0a72a05 	stb	r2,-25432(gp)
   8f408:	e0bffd17 	ldw	r2,-12(fp)
   8f40c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f410:	e0bffe17 	ldw	r2,-8(fp)
   8f414:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8f418:	0001883a 	nop
   8f41c:	e037883a 	mov	sp,fp
   8f420:	df000017 	ldw	fp,0(sp)
   8f424:	dec00104 	addi	sp,sp,4
   8f428:	f800283a 	ret

0008f42c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   8f42c:	defff804 	addi	sp,sp,-32
   8f430:	dfc00715 	stw	ra,28(sp)
   8f434:	df000615 	stw	fp,24(sp)
   8f438:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8f43c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   8f440:	d0a72a43 	ldbu	r2,-25431(gp)
   8f444:	10803fcc 	andi	r2,r2,255
   8f448:	10800058 	cmpnei	r2,r2,1
   8f44c:	1000281e 	bne	r2,zero,8f4f0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f450:	0005303a 	rdctl	r2,status
   8f454:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f458:	e0ffff17 	ldw	r3,-4(fp)
   8f45c:	00bfff84 	movi	r2,-2
   8f460:	1884703a 	and	r2,r3,r2
   8f464:	1001703a 	wrctl	status,r2
  
  return context;
   8f468:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   8f46c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   8f470:	d0a72a03 	ldbu	r2,-25432(gp)
   8f474:	10803fcc 	andi	r2,r2,255
   8f478:	10001926 	beq	r2,zero,8f4e0 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   8f47c:	d0a72a03 	ldbu	r2,-25432(gp)
   8f480:	10bfffc4 	addi	r2,r2,-1
   8f484:	d0a72a05 	stb	r2,-25432(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   8f488:	d0a72a03 	ldbu	r2,-25432(gp)
   8f48c:	10803fcc 	andi	r2,r2,255
   8f490:	10000e1e 	bne	r2,zero,8f4cc <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   8f494:	d0a73803 	ldbu	r2,-25376(gp)
   8f498:	10803fcc 	andi	r2,r2,255
   8f49c:	1000061e 	bne	r2,zero,8f4b8 <OSSchedUnlock+0x8c>
   8f4a0:	e0bffa17 	ldw	r2,-24(fp)
   8f4a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f4a8:	e0bffb17 	ldw	r2,-20(fp)
   8f4ac:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   8f4b0:	00902d40 	call	902d4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   8f4b4:	00000e06 	br	8f4f0 <OSSchedUnlock+0xc4>
   8f4b8:	e0bffa17 	ldw	r2,-24(fp)
   8f4bc:	e0bffc15 	stw	r2,-16(fp)
   8f4c0:	e0bffc17 	ldw	r2,-16(fp)
   8f4c4:	1001703a 	wrctl	status,r2
   8f4c8:	00000906 	br	8f4f0 <OSSchedUnlock+0xc4>
   8f4cc:	e0bffa17 	ldw	r2,-24(fp)
   8f4d0:	e0bffd15 	stw	r2,-12(fp)
   8f4d4:	e0bffd17 	ldw	r2,-12(fp)
   8f4d8:	1001703a 	wrctl	status,r2
   8f4dc:	00000406 	br	8f4f0 <OSSchedUnlock+0xc4>
   8f4e0:	e0bffa17 	ldw	r2,-24(fp)
   8f4e4:	e0bffe15 	stw	r2,-8(fp)
   8f4e8:	e0bffe17 	ldw	r2,-8(fp)
   8f4ec:	1001703a 	wrctl	status,r2
   8f4f0:	0001883a 	nop
   8f4f4:	e037883a 	mov	sp,fp
   8f4f8:	dfc00117 	ldw	ra,4(sp)
   8f4fc:	df000017 	ldw	fp,0(sp)
   8f500:	dec00204 	addi	sp,sp,8
   8f504:	f800283a 	ret

0008f508 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   8f508:	defffe04 	addi	sp,sp,-8
   8f50c:	dfc00115 	stw	ra,4(sp)
   8f510:	df000015 	stw	fp,0(sp)
   8f514:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   8f518:	d0a72a43 	ldbu	r2,-25431(gp)
   8f51c:	10803fcc 	andi	r2,r2,255
   8f520:	10000f1e 	bne	r2,zero,8f560 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   8f524:	00903a40 	call	903a4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   8f528:	d0a72c03 	ldbu	r2,-25424(gp)
   8f52c:	d0a72c45 	stb	r2,-25423(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   8f530:	d0a72c03 	ldbu	r2,-25424(gp)
   8f534:	10c03fcc 	andi	r3,r2,255
   8f538:	008002b4 	movhi	r2,10
   8f53c:	10bc7904 	addi	r2,r2,-3612
   8f540:	18c7883a 	add	r3,r3,r3
   8f544:	18c7883a 	add	r3,r3,r3
   8f548:	10c5883a 	add	r2,r2,r3
   8f54c:	10800017 	ldw	r2,0(r2)
   8f550:	d0a73415 	stw	r2,-25392(gp)
        OSTCBCur      = OSTCBHighRdy;
   8f554:	d0a73417 	ldw	r2,-25392(gp)
   8f558:	d0a73915 	stw	r2,-25372(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   8f55c:	00979bc0 	call	979bc <OSStartHighRdy>
    }
}
   8f560:	0001883a 	nop
   8f564:	e037883a 	mov	sp,fp
   8f568:	dfc00117 	ldw	ra,4(sp)
   8f56c:	df000017 	ldw	fp,0(sp)
   8f570:	dec00204 	addi	sp,sp,8
   8f574:	f800283a 	ret

0008f578 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   8f578:	defff904 	addi	sp,sp,-28
   8f57c:	dfc00615 	stw	ra,24(sp)
   8f580:	df000515 	stw	fp,20(sp)
   8f584:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8f588:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   8f58c:	01000084 	movi	r4,2
   8f590:	0095c7c0 	call	95c7c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f594:	0005303a 	rdctl	r2,status
   8f598:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f59c:	e0fffc17 	ldw	r3,-16(fp)
   8f5a0:	00bfff84 	movi	r2,-2
   8f5a4:	1884703a 	and	r2,r3,r2
   8f5a8:	1001703a 	wrctl	status,r2
  
  return context;
   8f5ac:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   8f5b0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   8f5b4:	d0272b15 	stw	zero,-25428(gp)
   8f5b8:	e0bffb17 	ldw	r2,-20(fp)
   8f5bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f5c0:	e0bffd17 	ldw	r2,-12(fp)
   8f5c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   8f5c8:	01001904 	movi	r4,100
   8f5cc:	0095c7c0 	call	95c7c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f5d0:	0005303a 	rdctl	r2,status
   8f5d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f5d8:	e0fffe17 	ldw	r3,-8(fp)
   8f5dc:	00bfff84 	movi	r2,-2
   8f5e0:	1884703a 	and	r2,r3,r2
   8f5e4:	1001703a 	wrctl	status,r2
  
  return context;
   8f5e8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   8f5ec:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   8f5f0:	d0a72b17 	ldw	r2,-25428(gp)
   8f5f4:	d0a73015 	stw	r2,-25408(gp)
    OSStatRdy    = OS_TRUE;
   8f5f8:	00800044 	movi	r2,1
   8f5fc:	d0a73c05 	stb	r2,-25360(gp)
   8f600:	e0bffb17 	ldw	r2,-20(fp)
   8f604:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f608:	e0bfff17 	ldw	r2,-4(fp)
   8f60c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   8f610:	0001883a 	nop
   8f614:	e037883a 	mov	sp,fp
   8f618:	dfc00117 	ldw	ra,4(sp)
   8f61c:	df000017 	ldw	fp,0(sp)
   8f620:	dec00204 	addi	sp,sp,8
   8f624:	f800283a 	ret

0008f628 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   8f628:	defff704 	addi	sp,sp,-36
   8f62c:	dfc00815 	stw	ra,32(sp)
   8f630:	df000715 	stw	fp,28(sp)
   8f634:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8f638:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   8f63c:	0097be40 	call	97be4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f640:	0005303a 	rdctl	r2,status
   8f644:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f648:	e0fffd17 	ldw	r3,-12(fp)
   8f64c:	00bfff84 	movi	r2,-2
   8f650:	1884703a 	and	r2,r3,r2
   8f654:	1001703a 	wrctl	status,r2
  
  return context;
   8f658:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   8f65c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   8f660:	d0a73a17 	ldw	r2,-25368(gp)
   8f664:	10800044 	addi	r2,r2,1
   8f668:	d0a73a15 	stw	r2,-25368(gp)
   8f66c:	e0bffb17 	ldw	r2,-20(fp)
   8f670:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f674:	e0bfff17 	ldw	r2,-4(fp)
   8f678:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   8f67c:	d0a72a43 	ldbu	r2,-25431(gp)
   8f680:	10803fcc 	andi	r2,r2,255
   8f684:	10800058 	cmpnei	r2,r2,1
   8f688:	10006a1e 	bne	r2,zero,8f834 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   8f68c:	d0a72e03 	ldbu	r2,-25416(gp)
   8f690:	10803fcc 	andi	r2,r2,255
   8f694:	10c00060 	cmpeqi	r3,r2,1
   8f698:	1800061e 	bne	r3,zero,8f6b4 <OSTimeTick+0x8c>
   8f69c:	10c000a0 	cmpeqi	r3,r2,2
   8f6a0:	1800061e 	bne	r3,zero,8f6bc <OSTimeTick+0x94>
   8f6a4:	10000a1e 	bne	r2,zero,8f6d0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   8f6a8:	00800044 	movi	r2,1
   8f6ac:	e0bffa05 	stb	r2,-24(fp)
                 break;
   8f6b0:	00000b06 	br	8f6e0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   8f6b4:	e03ffa05 	stb	zero,-24(fp)
                 break;
   8f6b8:	00000906 	br	8f6e0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   8f6bc:	00800044 	movi	r2,1
   8f6c0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   8f6c4:	00800044 	movi	r2,1
   8f6c8:	d0a72e05 	stb	r2,-25416(gp)
                 break;
   8f6cc:	00000406 	br	8f6e0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   8f6d0:	00800044 	movi	r2,1
   8f6d4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   8f6d8:	d0272e05 	stb	zero,-25416(gp)
                 break;
   8f6dc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   8f6e0:	e0bffa03 	ldbu	r2,-24(fp)
   8f6e4:	10005226 	beq	r2,zero,8f830 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   8f6e8:	d0a72d17 	ldw	r2,-25420(gp)
   8f6ec:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8f6f0:	00004906 	br	8f818 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f6f4:	0005303a 	rdctl	r2,status
   8f6f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f6fc:	e0fffc17 	ldw	r3,-16(fp)
   8f700:	00bfff84 	movi	r2,-2
   8f704:	1884703a 	and	r2,r3,r2
   8f708:	1001703a 	wrctl	status,r2
  
  return context;
   8f70c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   8f710:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   8f714:	e0bff917 	ldw	r2,-28(fp)
   8f718:	10800b8b 	ldhu	r2,46(r2)
   8f71c:	10bfffcc 	andi	r2,r2,65535
   8f720:	10003626 	beq	r2,zero,8f7fc <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   8f724:	e0bff917 	ldw	r2,-28(fp)
   8f728:	10800b8b 	ldhu	r2,46(r2)
   8f72c:	10bfffc4 	addi	r2,r2,-1
   8f730:	1007883a 	mov	r3,r2
   8f734:	e0bff917 	ldw	r2,-28(fp)
   8f738:	10c00b8d 	sth	r3,46(r2)
   8f73c:	e0bff917 	ldw	r2,-28(fp)
   8f740:	10800b8b 	ldhu	r2,46(r2)
   8f744:	10bfffcc 	andi	r2,r2,65535
   8f748:	10002c1e 	bne	r2,zero,8f7fc <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   8f74c:	e0bff917 	ldw	r2,-28(fp)
   8f750:	10800c03 	ldbu	r2,48(r2)
   8f754:	10803fcc 	andi	r2,r2,255
   8f758:	10800dcc 	andi	r2,r2,55
   8f75c:	10000b26 	beq	r2,zero,8f78c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   8f760:	e0bff917 	ldw	r2,-28(fp)
   8f764:	10c00c03 	ldbu	r3,48(r2)
   8f768:	00bff204 	movi	r2,-56
   8f76c:	1884703a 	and	r2,r3,r2
   8f770:	1007883a 	mov	r3,r2
   8f774:	e0bff917 	ldw	r2,-28(fp)
   8f778:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   8f77c:	e0bff917 	ldw	r2,-28(fp)
   8f780:	00c00044 	movi	r3,1
   8f784:	10c00c45 	stb	r3,49(r2)
   8f788:	00000206 	br	8f794 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   8f78c:	e0bff917 	ldw	r2,-28(fp)
   8f790:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   8f794:	e0bff917 	ldw	r2,-28(fp)
   8f798:	10800c03 	ldbu	r2,48(r2)
   8f79c:	10803fcc 	andi	r2,r2,255
   8f7a0:	1080020c 	andi	r2,r2,8
   8f7a4:	1000151e 	bne	r2,zero,8f7fc <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   8f7a8:	e0bff917 	ldw	r2,-28(fp)
   8f7ac:	10c00d83 	ldbu	r3,54(r2)
   8f7b0:	d0a73603 	ldbu	r2,-25384(gp)
   8f7b4:	1884b03a 	or	r2,r3,r2
   8f7b8:	d0a73605 	stb	r2,-25384(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8f7bc:	e0bff917 	ldw	r2,-28(fp)
   8f7c0:	10800d03 	ldbu	r2,52(r2)
   8f7c4:	10c03fcc 	andi	r3,r2,255
   8f7c8:	e0bff917 	ldw	r2,-28(fp)
   8f7cc:	10800d03 	ldbu	r2,52(r2)
   8f7d0:	11003fcc 	andi	r4,r2,255
   8f7d4:	d0a73644 	addi	r2,gp,-25383
   8f7d8:	2085883a 	add	r2,r4,r2
   8f7dc:	11000003 	ldbu	r4,0(r2)
   8f7e0:	e0bff917 	ldw	r2,-28(fp)
   8f7e4:	10800d43 	ldbu	r2,53(r2)
   8f7e8:	2084b03a 	or	r2,r4,r2
   8f7ec:	1009883a 	mov	r4,r2
   8f7f0:	d0a73644 	addi	r2,gp,-25383
   8f7f4:	1885883a 	add	r2,r3,r2
   8f7f8:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   8f7fc:	e0bff917 	ldw	r2,-28(fp)
   8f800:	10800517 	ldw	r2,20(r2)
   8f804:	e0bff915 	stw	r2,-28(fp)
   8f808:	e0bffb17 	ldw	r2,-20(fp)
   8f80c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f810:	e0bffe17 	ldw	r2,-8(fp)
   8f814:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8f818:	e0bff917 	ldw	r2,-28(fp)
   8f81c:	10800c83 	ldbu	r2,50(r2)
   8f820:	10803fcc 	andi	r2,r2,255
   8f824:	10800518 	cmpnei	r2,r2,20
   8f828:	103fb21e 	bne	r2,zero,8f6f4 <__alt_data_end+0xfffd0ef4>
   8f82c:	00000106 	br	8f834 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   8f830:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   8f834:	e037883a 	mov	sp,fp
   8f838:	dfc00117 	ldw	ra,4(sp)
   8f83c:	df000017 	ldw	fp,0(sp)
   8f840:	dec00204 	addi	sp,sp,8
   8f844:	f800283a 	ret

0008f848 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   8f848:	deffff04 	addi	sp,sp,-4
   8f84c:	df000015 	stw	fp,0(sp)
   8f850:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   8f854:	00804784 	movi	r2,286
}
   8f858:	e037883a 	mov	sp,fp
   8f85c:	df000017 	ldw	fp,0(sp)
   8f860:	dec00104 	addi	sp,sp,4
   8f864:	f800283a 	ret

0008f868 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   8f868:	deffff04 	addi	sp,sp,-4
   8f86c:	df000015 	stw	fp,0(sp)
   8f870:	d839883a 	mov	fp,sp
}
   8f874:	0001883a 	nop
   8f878:	e037883a 	mov	sp,fp
   8f87c:	df000017 	ldw	fp,0(sp)
   8f880:	dec00104 	addi	sp,sp,4
   8f884:	f800283a 	ret

0008f888 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   8f888:	defff804 	addi	sp,sp,-32
   8f88c:	dfc00715 	stw	ra,28(sp)
   8f890:	df000615 	stw	fp,24(sp)
   8f894:	df000604 	addi	fp,sp,24
   8f898:	e13ffc15 	stw	r4,-16(fp)
   8f89c:	e17ffd15 	stw	r5,-12(fp)
   8f8a0:	3007883a 	mov	r3,r6
   8f8a4:	3805883a 	mov	r2,r7
   8f8a8:	e0fffe05 	stb	r3,-8(fp)
   8f8ac:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   8f8b0:	e0bffc17 	ldw	r2,-16(fp)
   8f8b4:	10800283 	ldbu	r2,10(r2)
   8f8b8:	10c03fcc 	andi	r3,r2,255
   8f8bc:	008002b4 	movhi	r2,10
   8f8c0:	10a17f04 	addi	r2,r2,-31236
   8f8c4:	10c5883a 	add	r2,r2,r3
   8f8c8:	10800003 	ldbu	r2,0(r2)
   8f8cc:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   8f8d0:	e0bffa03 	ldbu	r2,-24(fp)
   8f8d4:	e0fffc17 	ldw	r3,-16(fp)
   8f8d8:	1885883a 	add	r2,r3,r2
   8f8dc:	108002c4 	addi	r2,r2,11
   8f8e0:	10800003 	ldbu	r2,0(r2)
   8f8e4:	10c03fcc 	andi	r3,r2,255
   8f8e8:	008002b4 	movhi	r2,10
   8f8ec:	10a17f04 	addi	r2,r2,-31236
   8f8f0:	10c5883a 	add	r2,r2,r3
   8f8f4:	10800003 	ldbu	r2,0(r2)
   8f8f8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   8f8fc:	e0bffa03 	ldbu	r2,-24(fp)
   8f900:	100490fa 	slli	r2,r2,3
   8f904:	1007883a 	mov	r3,r2
   8f908:	e0bffa43 	ldbu	r2,-23(fp)
   8f90c:	1885883a 	add	r2,r3,r2
   8f910:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   8f914:	e0fffa83 	ldbu	r3,-22(fp)
   8f918:	008002b4 	movhi	r2,10
   8f91c:	10bc7904 	addi	r2,r2,-3612
   8f920:	18c7883a 	add	r3,r3,r3
   8f924:	18c7883a 	add	r3,r3,r3
   8f928:	10c5883a 	add	r2,r2,r3
   8f92c:	10800017 	ldw	r2,0(r2)
   8f930:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   8f934:	e0bffb17 	ldw	r2,-20(fp)
   8f938:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   8f93c:	e0bffb17 	ldw	r2,-20(fp)
   8f940:	e0fffd17 	ldw	r3,-12(fp)
   8f944:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   8f948:	e0bffb17 	ldw	r2,-20(fp)
   8f94c:	10800c03 	ldbu	r2,48(r2)
   8f950:	1007883a 	mov	r3,r2
   8f954:	e0bffe03 	ldbu	r2,-8(fp)
   8f958:	0084303a 	nor	r2,zero,r2
   8f95c:	1884703a 	and	r2,r3,r2
   8f960:	1007883a 	mov	r3,r2
   8f964:	e0bffb17 	ldw	r2,-20(fp)
   8f968:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   8f96c:	e0bffb17 	ldw	r2,-20(fp)
   8f970:	e0ffff03 	ldbu	r3,-4(fp)
   8f974:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   8f978:	e0bffb17 	ldw	r2,-20(fp)
   8f97c:	10800c03 	ldbu	r2,48(r2)
   8f980:	10803fcc 	andi	r2,r2,255
   8f984:	1080020c 	andi	r2,r2,8
   8f988:	1000111e 	bne	r2,zero,8f9d0 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   8f98c:	e0bffb17 	ldw	r2,-20(fp)
   8f990:	10c00d83 	ldbu	r3,54(r2)
   8f994:	d0a73603 	ldbu	r2,-25384(gp)
   8f998:	1884b03a 	or	r2,r3,r2
   8f99c:	d0a73605 	stb	r2,-25384(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   8f9a0:	e0fffa03 	ldbu	r3,-24(fp)
   8f9a4:	e13ffa03 	ldbu	r4,-24(fp)
   8f9a8:	d0a73644 	addi	r2,gp,-25383
   8f9ac:	2085883a 	add	r2,r4,r2
   8f9b0:	11000003 	ldbu	r4,0(r2)
   8f9b4:	e0bffb17 	ldw	r2,-20(fp)
   8f9b8:	10800d43 	ldbu	r2,53(r2)
   8f9bc:	2084b03a 	or	r2,r4,r2
   8f9c0:	1009883a 	mov	r4,r2
   8f9c4:	d0a73644 	addi	r2,gp,-25383
   8f9c8:	1885883a 	add	r2,r3,r2
   8f9cc:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   8f9d0:	e17ffc17 	ldw	r5,-16(fp)
   8f9d4:	e13ffb17 	ldw	r4,-20(fp)
   8f9d8:	008fc800 	call	8fc80 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   8f9dc:	e0bffb17 	ldw	r2,-20(fp)
   8f9e0:	10800817 	ldw	r2,32(r2)
   8f9e4:	10000826 	beq	r2,zero,8fa08 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   8f9e8:	e0bffb17 	ldw	r2,-20(fp)
   8f9ec:	10800817 	ldw	r2,32(r2)
   8f9f0:	100b883a 	mov	r5,r2
   8f9f4:	e13ffb17 	ldw	r4,-20(fp)
   8f9f8:	008fd380 	call	8fd38 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   8f9fc:	e0bffb17 	ldw	r2,-20(fp)
   8fa00:	e0fffc17 	ldw	r3,-16(fp)
   8fa04:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   8fa08:	e0bffa83 	ldbu	r2,-22(fp)
}
   8fa0c:	e037883a 	mov	sp,fp
   8fa10:	dfc00117 	ldw	ra,4(sp)
   8fa14:	df000017 	ldw	fp,0(sp)
   8fa18:	dec00204 	addi	sp,sp,8
   8fa1c:	f800283a 	ret

0008fa20 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   8fa20:	defffd04 	addi	sp,sp,-12
   8fa24:	df000215 	stw	fp,8(sp)
   8fa28:	df000204 	addi	fp,sp,8
   8fa2c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   8fa30:	d0a73917 	ldw	r2,-25372(gp)
   8fa34:	e0ffff17 	ldw	r3,-4(fp)
   8fa38:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   8fa3c:	d0a73917 	ldw	r2,-25372(gp)
   8fa40:	10800d03 	ldbu	r2,52(r2)
   8fa44:	10803fcc 	andi	r2,r2,255
   8fa48:	d0e73917 	ldw	r3,-25372(gp)
   8fa4c:	18c00d03 	ldbu	r3,52(r3)
   8fa50:	18c03fcc 	andi	r3,r3,255
   8fa54:	e13fff17 	ldw	r4,-4(fp)
   8fa58:	20c7883a 	add	r3,r4,r3
   8fa5c:	18c002c4 	addi	r3,r3,11
   8fa60:	19000003 	ldbu	r4,0(r3)
   8fa64:	d0e73917 	ldw	r3,-25372(gp)
   8fa68:	18c00d43 	ldbu	r3,53(r3)
   8fa6c:	20c6b03a 	or	r3,r4,r3
   8fa70:	1809883a 	mov	r4,r3
   8fa74:	e0ffff17 	ldw	r3,-4(fp)
   8fa78:	1885883a 	add	r2,r3,r2
   8fa7c:	108002c4 	addi	r2,r2,11
   8fa80:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8fa84:	e0bfff17 	ldw	r2,-4(fp)
   8fa88:	10c00283 	ldbu	r3,10(r2)
   8fa8c:	d0a73917 	ldw	r2,-25372(gp)
   8fa90:	10800d83 	ldbu	r2,54(r2)
   8fa94:	1884b03a 	or	r2,r3,r2
   8fa98:	1007883a 	mov	r3,r2
   8fa9c:	e0bfff17 	ldw	r2,-4(fp)
   8faa0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8faa4:	d0a73917 	ldw	r2,-25372(gp)
   8faa8:	10800d03 	ldbu	r2,52(r2)
   8faac:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8fab0:	e0fffe03 	ldbu	r3,-8(fp)
   8fab4:	e13ffe03 	ldbu	r4,-8(fp)
   8fab8:	d0a73644 	addi	r2,gp,-25383
   8fabc:	2085883a 	add	r2,r4,r2
   8fac0:	10800003 	ldbu	r2,0(r2)
   8fac4:	1009883a 	mov	r4,r2
   8fac8:	d0a73917 	ldw	r2,-25372(gp)
   8facc:	10800d43 	ldbu	r2,53(r2)
   8fad0:	0084303a 	nor	r2,zero,r2
   8fad4:	2084703a 	and	r2,r4,r2
   8fad8:	1009883a 	mov	r4,r2
   8fadc:	d0a73644 	addi	r2,gp,-25383
   8fae0:	1885883a 	add	r2,r3,r2
   8fae4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   8fae8:	e0fffe03 	ldbu	r3,-8(fp)
   8faec:	d0a73644 	addi	r2,gp,-25383
   8faf0:	1885883a 	add	r2,r3,r2
   8faf4:	10800003 	ldbu	r2,0(r2)
   8faf8:	10803fcc 	andi	r2,r2,255
   8fafc:	1000071e 	bne	r2,zero,8fb1c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8fb00:	d0a73917 	ldw	r2,-25372(gp)
   8fb04:	10800d83 	ldbu	r2,54(r2)
   8fb08:	0084303a 	nor	r2,zero,r2
   8fb0c:	1007883a 	mov	r3,r2
   8fb10:	d0a73603 	ldbu	r2,-25384(gp)
   8fb14:	1884703a 	and	r2,r3,r2
   8fb18:	d0a73605 	stb	r2,-25384(gp)
    }
}
   8fb1c:	0001883a 	nop
   8fb20:	e037883a 	mov	sp,fp
   8fb24:	df000017 	ldw	fp,0(sp)
   8fb28:	dec00104 	addi	sp,sp,4
   8fb2c:	f800283a 	ret

0008fb30 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   8fb30:	defffb04 	addi	sp,sp,-20
   8fb34:	df000415 	stw	fp,16(sp)
   8fb38:	df000404 	addi	fp,sp,16
   8fb3c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   8fb40:	d0a73917 	ldw	r2,-25372(gp)
   8fb44:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   8fb48:	d0a73917 	ldw	r2,-25372(gp)
   8fb4c:	e0ffff17 	ldw	r3,-4(fp)
   8fb50:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   8fb54:	e0bfff17 	ldw	r2,-4(fp)
   8fb58:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   8fb5c:	e0bffc17 	ldw	r2,-16(fp)
   8fb60:	10800017 	ldw	r2,0(r2)
   8fb64:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8fb68:	00002006 	br	8fbec <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   8fb6c:	d0a73917 	ldw	r2,-25372(gp)
   8fb70:	10800d03 	ldbu	r2,52(r2)
   8fb74:	10803fcc 	andi	r2,r2,255
   8fb78:	d0e73917 	ldw	r3,-25372(gp)
   8fb7c:	18c00d03 	ldbu	r3,52(r3)
   8fb80:	18c03fcc 	andi	r3,r3,255
   8fb84:	e13ffd17 	ldw	r4,-12(fp)
   8fb88:	20c7883a 	add	r3,r4,r3
   8fb8c:	18c002c4 	addi	r3,r3,11
   8fb90:	19000003 	ldbu	r4,0(r3)
   8fb94:	d0e73917 	ldw	r3,-25372(gp)
   8fb98:	18c00d43 	ldbu	r3,53(r3)
   8fb9c:	20c6b03a 	or	r3,r4,r3
   8fba0:	1809883a 	mov	r4,r3
   8fba4:	e0fffd17 	ldw	r3,-12(fp)
   8fba8:	1885883a 	add	r2,r3,r2
   8fbac:	108002c4 	addi	r2,r2,11
   8fbb0:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8fbb4:	e0bffd17 	ldw	r2,-12(fp)
   8fbb8:	10c00283 	ldbu	r3,10(r2)
   8fbbc:	d0a73917 	ldw	r2,-25372(gp)
   8fbc0:	10800d83 	ldbu	r2,54(r2)
   8fbc4:	1884b03a 	or	r2,r3,r2
   8fbc8:	1007883a 	mov	r3,r2
   8fbcc:	e0bffd17 	ldw	r2,-12(fp)
   8fbd0:	10c00285 	stb	r3,10(r2)
        pevents++;
   8fbd4:	e0bffc17 	ldw	r2,-16(fp)
   8fbd8:	10800104 	addi	r2,r2,4
   8fbdc:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   8fbe0:	e0bffc17 	ldw	r2,-16(fp)
   8fbe4:	10800017 	ldw	r2,0(r2)
   8fbe8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8fbec:	e0bffd17 	ldw	r2,-12(fp)
   8fbf0:	103fde1e 	bne	r2,zero,8fb6c <__alt_data_end+0xfffd136c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8fbf4:	d0a73917 	ldw	r2,-25372(gp)
   8fbf8:	10800d03 	ldbu	r2,52(r2)
   8fbfc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8fc00:	e0fffe03 	ldbu	r3,-8(fp)
   8fc04:	e13ffe03 	ldbu	r4,-8(fp)
   8fc08:	d0a73644 	addi	r2,gp,-25383
   8fc0c:	2085883a 	add	r2,r4,r2
   8fc10:	10800003 	ldbu	r2,0(r2)
   8fc14:	1009883a 	mov	r4,r2
   8fc18:	d0a73917 	ldw	r2,-25372(gp)
   8fc1c:	10800d43 	ldbu	r2,53(r2)
   8fc20:	0084303a 	nor	r2,zero,r2
   8fc24:	2084703a 	and	r2,r4,r2
   8fc28:	1009883a 	mov	r4,r2
   8fc2c:	d0a73644 	addi	r2,gp,-25383
   8fc30:	1885883a 	add	r2,r3,r2
   8fc34:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   8fc38:	e0fffe03 	ldbu	r3,-8(fp)
   8fc3c:	d0a73644 	addi	r2,gp,-25383
   8fc40:	1885883a 	add	r2,r3,r2
   8fc44:	10800003 	ldbu	r2,0(r2)
   8fc48:	10803fcc 	andi	r2,r2,255
   8fc4c:	1000071e 	bne	r2,zero,8fc6c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8fc50:	d0a73917 	ldw	r2,-25372(gp)
   8fc54:	10800d83 	ldbu	r2,54(r2)
   8fc58:	0084303a 	nor	r2,zero,r2
   8fc5c:	1007883a 	mov	r3,r2
   8fc60:	d0a73603 	ldbu	r2,-25384(gp)
   8fc64:	1884703a 	and	r2,r3,r2
   8fc68:	d0a73605 	stb	r2,-25384(gp)
    }
}
   8fc6c:	0001883a 	nop
   8fc70:	e037883a 	mov	sp,fp
   8fc74:	df000017 	ldw	fp,0(sp)
   8fc78:	dec00104 	addi	sp,sp,4
   8fc7c:	f800283a 	ret

0008fc80 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   8fc80:	defffc04 	addi	sp,sp,-16
   8fc84:	df000315 	stw	fp,12(sp)
   8fc88:	df000304 	addi	fp,sp,12
   8fc8c:	e13ffe15 	stw	r4,-8(fp)
   8fc90:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   8fc94:	e0bffe17 	ldw	r2,-8(fp)
   8fc98:	10800d03 	ldbu	r2,52(r2)
   8fc9c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   8fca0:	e0bffd03 	ldbu	r2,-12(fp)
   8fca4:	e0fffd03 	ldbu	r3,-12(fp)
   8fca8:	e13fff17 	ldw	r4,-4(fp)
   8fcac:	20c7883a 	add	r3,r4,r3
   8fcb0:	18c002c4 	addi	r3,r3,11
   8fcb4:	18c00003 	ldbu	r3,0(r3)
   8fcb8:	1809883a 	mov	r4,r3
   8fcbc:	e0fffe17 	ldw	r3,-8(fp)
   8fcc0:	18c00d43 	ldbu	r3,53(r3)
   8fcc4:	00c6303a 	nor	r3,zero,r3
   8fcc8:	20c6703a 	and	r3,r4,r3
   8fccc:	1809883a 	mov	r4,r3
   8fcd0:	e0ffff17 	ldw	r3,-4(fp)
   8fcd4:	1885883a 	add	r2,r3,r2
   8fcd8:	108002c4 	addi	r2,r2,11
   8fcdc:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   8fce0:	e0bffd03 	ldbu	r2,-12(fp)
   8fce4:	e0ffff17 	ldw	r3,-4(fp)
   8fce8:	1885883a 	add	r2,r3,r2
   8fcec:	108002c4 	addi	r2,r2,11
   8fcf0:	10800003 	ldbu	r2,0(r2)
   8fcf4:	10803fcc 	andi	r2,r2,255
   8fcf8:	10000a1e 	bne	r2,zero,8fd24 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   8fcfc:	e0bfff17 	ldw	r2,-4(fp)
   8fd00:	10800283 	ldbu	r2,10(r2)
   8fd04:	1007883a 	mov	r3,r2
   8fd08:	e0bffe17 	ldw	r2,-8(fp)
   8fd0c:	10800d83 	ldbu	r2,54(r2)
   8fd10:	0084303a 	nor	r2,zero,r2
   8fd14:	1884703a 	and	r2,r3,r2
   8fd18:	1007883a 	mov	r3,r2
   8fd1c:	e0bfff17 	ldw	r2,-4(fp)
   8fd20:	10c00285 	stb	r3,10(r2)
    }
}
   8fd24:	0001883a 	nop
   8fd28:	e037883a 	mov	sp,fp
   8fd2c:	df000017 	ldw	fp,0(sp)
   8fd30:	dec00104 	addi	sp,sp,4
   8fd34:	f800283a 	ret

0008fd38 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   8fd38:	defffa04 	addi	sp,sp,-24
   8fd3c:	df000515 	stw	fp,20(sp)
   8fd40:	df000504 	addi	fp,sp,20
   8fd44:	e13ffe15 	stw	r4,-8(fp)
   8fd48:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   8fd4c:	e0bffe17 	ldw	r2,-8(fp)
   8fd50:	10800d03 	ldbu	r2,52(r2)
   8fd54:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   8fd58:	e0bffe17 	ldw	r2,-8(fp)
   8fd5c:	10800d83 	ldbu	r2,54(r2)
   8fd60:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   8fd64:	e0bffe17 	ldw	r2,-8(fp)
   8fd68:	10800d43 	ldbu	r2,53(r2)
   8fd6c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   8fd70:	e0bfff17 	ldw	r2,-4(fp)
   8fd74:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   8fd78:	e0bffb17 	ldw	r2,-20(fp)
   8fd7c:	10800017 	ldw	r2,0(r2)
   8fd80:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8fd84:	00002506 	br	8fe1c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   8fd88:	e0bffd03 	ldbu	r2,-12(fp)
   8fd8c:	e0fffd03 	ldbu	r3,-12(fp)
   8fd90:	e13ffc17 	ldw	r4,-16(fp)
   8fd94:	20c7883a 	add	r3,r4,r3
   8fd98:	18c002c4 	addi	r3,r3,11
   8fd9c:	18c00003 	ldbu	r3,0(r3)
   8fda0:	1809883a 	mov	r4,r3
   8fda4:	e0fffd83 	ldbu	r3,-10(fp)
   8fda8:	00c6303a 	nor	r3,zero,r3
   8fdac:	20c6703a 	and	r3,r4,r3
   8fdb0:	1809883a 	mov	r4,r3
   8fdb4:	e0fffc17 	ldw	r3,-16(fp)
   8fdb8:	1885883a 	add	r2,r3,r2
   8fdbc:	108002c4 	addi	r2,r2,11
   8fdc0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   8fdc4:	e0bffd03 	ldbu	r2,-12(fp)
   8fdc8:	e0fffc17 	ldw	r3,-16(fp)
   8fdcc:	1885883a 	add	r2,r3,r2
   8fdd0:	108002c4 	addi	r2,r2,11
   8fdd4:	10800003 	ldbu	r2,0(r2)
   8fdd8:	10803fcc 	andi	r2,r2,255
   8fddc:	1000091e 	bne	r2,zero,8fe04 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   8fde0:	e0bffc17 	ldw	r2,-16(fp)
   8fde4:	10800283 	ldbu	r2,10(r2)
   8fde8:	1007883a 	mov	r3,r2
   8fdec:	e0bffd43 	ldbu	r2,-11(fp)
   8fdf0:	0084303a 	nor	r2,zero,r2
   8fdf4:	1884703a 	and	r2,r3,r2
   8fdf8:	1007883a 	mov	r3,r2
   8fdfc:	e0bffc17 	ldw	r2,-16(fp)
   8fe00:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   8fe04:	e0bffb17 	ldw	r2,-20(fp)
   8fe08:	10800104 	addi	r2,r2,4
   8fe0c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   8fe10:	e0bffb17 	ldw	r2,-20(fp)
   8fe14:	10800017 	ldw	r2,0(r2)
   8fe18:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8fe1c:	e0bffc17 	ldw	r2,-16(fp)
   8fe20:	103fd91e 	bne	r2,zero,8fd88 <__alt_data_end+0xfffd1588>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   8fe24:	0001883a 	nop
   8fe28:	e037883a 	mov	sp,fp
   8fe2c:	df000017 	ldw	fp,0(sp)
   8fe30:	dec00104 	addi	sp,sp,4
   8fe34:	f800283a 	ret

0008fe38 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   8fe38:	defffc04 	addi	sp,sp,-16
   8fe3c:	df000315 	stw	fp,12(sp)
   8fe40:	df000304 	addi	fp,sp,12
   8fe44:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   8fe48:	e0bfff17 	ldw	r2,-4(fp)
   8fe4c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   8fe50:	e0bfff17 	ldw	r2,-4(fp)
   8fe54:	108002c4 	addi	r2,r2,11
   8fe58:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8fe5c:	e03ffe05 	stb	zero,-8(fp)
   8fe60:	00000706 	br	8fe80 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   8fe64:	e0bffd17 	ldw	r2,-12(fp)
   8fe68:	10c00044 	addi	r3,r2,1
   8fe6c:	e0fffd15 	stw	r3,-12(fp)
   8fe70:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8fe74:	e0bffe03 	ldbu	r2,-8(fp)
   8fe78:	10800044 	addi	r2,r2,1
   8fe7c:	e0bffe05 	stb	r2,-8(fp)
   8fe80:	e0bffe03 	ldbu	r2,-8(fp)
   8fe84:	108000f0 	cmpltui	r2,r2,3
   8fe88:	103ff61e 	bne	r2,zero,8fe64 <__alt_data_end+0xfffd1664>
        *ptbl++ = 0;
    }
}
   8fe8c:	0001883a 	nop
   8fe90:	e037883a 	mov	sp,fp
   8fe94:	df000017 	ldw	fp,0(sp)
   8fe98:	dec00104 	addi	sp,sp,4
   8fe9c:	f800283a 	ret

0008fea0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   8fea0:	defffb04 	addi	sp,sp,-20
   8fea4:	dfc00415 	stw	ra,16(sp)
   8fea8:	df000315 	stw	fp,12(sp)
   8feac:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   8feb0:	0142d004 	movi	r5,2880
   8feb4:	010002b4 	movhi	r4,10
   8feb8:	21386504 	addi	r4,r4,-7788
   8febc:	00902180 	call	90218 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   8fec0:	008002b4 	movhi	r2,10
   8fec4:	10b86504 	addi	r2,r2,-7788
   8fec8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   8fecc:	008002b4 	movhi	r2,10
   8fed0:	10b87104 	addi	r2,r2,-7740
   8fed4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8fed8:	e03ffd0d 	sth	zero,-12(fp)
   8fedc:	00001306 	br	8ff2c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   8fee0:	e0bffe17 	ldw	r2,-8(fp)
   8fee4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   8fee8:	e0bffe17 	ldw	r2,-8(fp)
   8feec:	e0ffff17 	ldw	r3,-4(fp)
   8fef0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   8fef4:	e0bffe17 	ldw	r2,-8(fp)
   8fef8:	00c00fc4 	movi	r3,63
   8fefc:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   8ff00:	e0bffe17 	ldw	r2,-8(fp)
   8ff04:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   8ff08:	e0bffe17 	ldw	r2,-8(fp)
   8ff0c:	10800c04 	addi	r2,r2,48
   8ff10:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   8ff14:	e0bfff17 	ldw	r2,-4(fp)
   8ff18:	10800c04 	addi	r2,r2,48
   8ff1c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8ff20:	e0bffd0b 	ldhu	r2,-12(fp)
   8ff24:	10800044 	addi	r2,r2,1
   8ff28:	e0bffd0d 	sth	r2,-12(fp)
   8ff2c:	e0bffd0b 	ldhu	r2,-12(fp)
   8ff30:	10800ef0 	cmpltui	r2,r2,59
   8ff34:	103fea1e 	bne	r2,zero,8fee0 <__alt_data_end+0xfffd16e0>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   8ff38:	e0bffe17 	ldw	r2,-8(fp)
   8ff3c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   8ff40:	e0bffe17 	ldw	r2,-8(fp)
   8ff44:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   8ff48:	e0bffe17 	ldw	r2,-8(fp)
   8ff4c:	00c00fc4 	movi	r3,63
   8ff50:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   8ff54:	e0bffe17 	ldw	r2,-8(fp)
   8ff58:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   8ff5c:	008002b4 	movhi	r2,10
   8ff60:	10b86504 	addi	r2,r2,-7788
   8ff64:	d0a73715 	stw	r2,-25380(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   8ff68:	0001883a 	nop
   8ff6c:	e037883a 	mov	sp,fp
   8ff70:	dfc00117 	ldw	ra,4(sp)
   8ff74:	df000017 	ldw	fp,0(sp)
   8ff78:	dec00204 	addi	sp,sp,8
   8ff7c:	f800283a 	ret

0008ff80 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   8ff80:	deffff04 	addi	sp,sp,-4
   8ff84:	df000015 	stw	fp,0(sp)
   8ff88:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   8ff8c:	d0273a15 	stw	zero,-25368(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   8ff90:	d0273805 	stb	zero,-25376(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   8ff94:	d0272a05 	stb	zero,-25432(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   8ff98:	d0273245 	stb	zero,-25399(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   8ff9c:	d0272a45 	stb	zero,-25431(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   8ffa0:	d0272f15 	stw	zero,-25412(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   8ffa4:	d0272b15 	stw	zero,-25428(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   8ffa8:	d0273d15 	stw	zero,-25356(gp)
    OSIdleCtrMax  = 0L;
   8ffac:	d0273015 	stw	zero,-25408(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   8ffb0:	d0273c05 	stb	zero,-25360(gp)
#endif
}
   8ffb4:	0001883a 	nop
   8ffb8:	e037883a 	mov	sp,fp
   8ffbc:	df000017 	ldw	fp,0(sp)
   8ffc0:	dec00104 	addi	sp,sp,4
   8ffc4:	f800283a 	ret

0008ffc8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   8ffc8:	defffd04 	addi	sp,sp,-12
   8ffcc:	df000215 	stw	fp,8(sp)
   8ffd0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   8ffd4:	d0273605 	stb	zero,-25384(gp)
    prdytbl       = &OSRdyTbl[0];
   8ffd8:	d0a73644 	addi	r2,gp,-25383
   8ffdc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8ffe0:	e03ffe05 	stb	zero,-8(fp)
   8ffe4:	00000706 	br	90004 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   8ffe8:	e0bfff17 	ldw	r2,-4(fp)
   8ffec:	10c00044 	addi	r3,r2,1
   8fff0:	e0ffff15 	stw	r3,-4(fp)
   8fff4:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8fff8:	e0bffe03 	ldbu	r2,-8(fp)
   8fffc:	10800044 	addi	r2,r2,1
   90000:	e0bffe05 	stb	r2,-8(fp)
   90004:	e0bffe03 	ldbu	r2,-8(fp)
   90008:	108000f0 	cmpltui	r2,r2,3
   9000c:	103ff61e 	bne	r2,zero,8ffe8 <__alt_data_end+0xfffd17e8>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   90010:	d0272c45 	stb	zero,-25423(gp)
    OSPrioHighRdy = 0;
   90014:	d0272c05 	stb	zero,-25424(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   90018:	d0273415 	stw	zero,-25392(gp)
    OSTCBCur      = (OS_TCB *)0;
   9001c:	d0273915 	stw	zero,-25372(gp)
}
   90020:	0001883a 	nop
   90024:	e037883a 	mov	sp,fp
   90028:	df000017 	ldw	fp,0(sp)
   9002c:	dec00104 	addi	sp,sp,4
   90030:	f800283a 	ret

00090034 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   90034:	defff804 	addi	sp,sp,-32
   90038:	dfc00715 	stw	ra,28(sp)
   9003c:	df000615 	stw	fp,24(sp)
   90040:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   90044:	008000c4 	movi	r2,3
   90048:	d8800415 	stw	r2,16(sp)
   9004c:	d8000315 	stw	zero,12(sp)
   90050:	00808004 	movi	r2,512
   90054:	d8800215 	stw	r2,8(sp)
   90058:	008002b4 	movhi	r2,10
   9005c:	10b66504 	addi	r2,r2,-9836
   90060:	d8800115 	stw	r2,4(sp)
   90064:	00bfffd4 	movui	r2,65535
   90068:	d8800015 	stw	r2,0(sp)
   9006c:	01c00504 	movi	r7,20
   90070:	018002b4 	movhi	r6,10
   90074:	31b86404 	addi	r6,r6,-7792
   90078:	000b883a 	mov	r5,zero
   9007c:	01000274 	movhi	r4,9
   90080:	21013804 	addi	r4,r4,1248
   90084:	0094bac0 	call	94bac <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   90088:	e1bfff04 	addi	r6,fp,-4
   9008c:	014002b4 	movhi	r5,10
   90090:	2961bf04 	addi	r5,r5,-30980
   90094:	01000504 	movi	r4,20
   90098:	00953bc0 	call	953bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   9009c:	0001883a 	nop
   900a0:	e037883a 	mov	sp,fp
   900a4:	dfc00117 	ldw	ra,4(sp)
   900a8:	df000017 	ldw	fp,0(sp)
   900ac:	dec00204 	addi	sp,sp,8
   900b0:	f800283a 	ret

000900b4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   900b4:	defff804 	addi	sp,sp,-32
   900b8:	dfc00715 	stw	ra,28(sp)
   900bc:	df000615 	stw	fp,24(sp)
   900c0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   900c4:	008000c4 	movi	r2,3
   900c8:	d8800415 	stw	r2,16(sp)
   900cc:	d8000315 	stw	zero,12(sp)
   900d0:	00808004 	movi	r2,512
   900d4:	d8800215 	stw	r2,8(sp)
   900d8:	008002b4 	movhi	r2,10
   900dc:	10b3ed04 	addi	r2,r2,-12364
   900e0:	d8800115 	stw	r2,4(sp)
   900e4:	00bfff94 	movui	r2,65534
   900e8:	d8800015 	stw	r2,0(sp)
   900ec:	01c004c4 	movi	r7,19
   900f0:	018002b4 	movhi	r6,10
   900f4:	31b5ec04 	addi	r6,r6,-10320
   900f8:	000b883a 	mov	r5,zero
   900fc:	01000274 	movhi	r4,9
   90100:	21014f04 	addi	r4,r4,1340
   90104:	0094bac0 	call	94bac <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   90108:	e1bfff04 	addi	r6,fp,-4
   9010c:	014002b4 	movhi	r5,10
   90110:	2961c304 	addi	r5,r5,-30964
   90114:	010004c4 	movi	r4,19
   90118:	00953bc0 	call	953bc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   9011c:	0001883a 	nop
   90120:	e037883a 	mov	sp,fp
   90124:	dfc00117 	ldw	ra,4(sp)
   90128:	df000017 	ldw	fp,0(sp)
   9012c:	dec00204 	addi	sp,sp,8
   90130:	f800283a 	ret

00090134 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   90134:	defffb04 	addi	sp,sp,-20
   90138:	dfc00415 	stw	ra,16(sp)
   9013c:	df000315 	stw	fp,12(sp)
   90140:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   90144:	01414404 	movi	r5,1296
   90148:	010002b4 	movhi	r4,10
   9014c:	213b3504 	addi	r4,r4,-4908
   90150:	00902180 	call	90218 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   90154:	01401504 	movi	r5,84
   90158:	010002b4 	movhi	r4,10
   9015c:	213c7904 	addi	r4,r4,-3612
   90160:	00902180 	call	90218 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   90164:	008002b4 	movhi	r2,10
   90168:	10bb3504 	addi	r2,r2,-4908
   9016c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   90170:	008002b4 	movhi	r2,10
   90174:	10bb5004 	addi	r2,r2,-4800
   90178:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   9017c:	e03ffd05 	stb	zero,-12(fp)
   90180:	00001106 	br	901c8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   90184:	e0bffe17 	ldw	r2,-8(fp)
   90188:	e0ffff17 	ldw	r3,-4(fp)
   9018c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   90190:	e0bffe17 	ldw	r2,-8(fp)
   90194:	00c00fc4 	movi	r3,63
   90198:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   9019c:	e0bffe17 	ldw	r2,-8(fp)
   901a0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   901a4:	e0bffe17 	ldw	r2,-8(fp)
   901a8:	10801b04 	addi	r2,r2,108
   901ac:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   901b0:	e0bfff17 	ldw	r2,-4(fp)
   901b4:	10801b04 	addi	r2,r2,108
   901b8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   901bc:	e0bffd03 	ldbu	r2,-12(fp)
   901c0:	10800044 	addi	r2,r2,1
   901c4:	e0bffd05 	stb	r2,-12(fp)
   901c8:	e0bffd03 	ldbu	r2,-12(fp)
   901cc:	108002f0 	cmpltui	r2,r2,11
   901d0:	103fec1e 	bne	r2,zero,90184 <__alt_data_end+0xfffd1984>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   901d4:	e0bffe17 	ldw	r2,-8(fp)
   901d8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   901dc:	e0bffe17 	ldw	r2,-8(fp)
   901e0:	00c00fc4 	movi	r3,63
   901e4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   901e8:	e0bffe17 	ldw	r2,-8(fp)
   901ec:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   901f0:	d0272d15 	stw	zero,-25420(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   901f4:	008002b4 	movhi	r2,10
   901f8:	10bb3504 	addi	r2,r2,-4908
   901fc:	d0a73115 	stw	r2,-25404(gp)
}
   90200:	0001883a 	nop
   90204:	e037883a 	mov	sp,fp
   90208:	dfc00117 	ldw	ra,4(sp)
   9020c:	df000017 	ldw	fp,0(sp)
   90210:	dec00204 	addi	sp,sp,8
   90214:	f800283a 	ret

00090218 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   90218:	defffd04 	addi	sp,sp,-12
   9021c:	df000215 	stw	fp,8(sp)
   90220:	df000204 	addi	fp,sp,8
   90224:	e13ffe15 	stw	r4,-8(fp)
   90228:	2805883a 	mov	r2,r5
   9022c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   90230:	00000706 	br	90250 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   90234:	e0bffe17 	ldw	r2,-8(fp)
   90238:	10c00044 	addi	r3,r2,1
   9023c:	e0fffe15 	stw	r3,-8(fp)
   90240:	10000005 	stb	zero,0(r2)
        size--;
   90244:	e0bfff0b 	ldhu	r2,-4(fp)
   90248:	10bfffc4 	addi	r2,r2,-1
   9024c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   90250:	e0bfff0b 	ldhu	r2,-4(fp)
   90254:	103ff71e 	bne	r2,zero,90234 <__alt_data_end+0xfffd1a34>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   90258:	0001883a 	nop
   9025c:	e037883a 	mov	sp,fp
   90260:	df000017 	ldw	fp,0(sp)
   90264:	dec00104 	addi	sp,sp,4
   90268:	f800283a 	ret

0009026c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   9026c:	defffc04 	addi	sp,sp,-16
   90270:	df000315 	stw	fp,12(sp)
   90274:	df000304 	addi	fp,sp,12
   90278:	e13ffd15 	stw	r4,-12(fp)
   9027c:	e17ffe15 	stw	r5,-8(fp)
   90280:	3005883a 	mov	r2,r6
   90284:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   90288:	00000b06 	br	902b8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   9028c:	e0bffd17 	ldw	r2,-12(fp)
   90290:	10c00044 	addi	r3,r2,1
   90294:	e0fffd15 	stw	r3,-12(fp)
   90298:	e0fffe17 	ldw	r3,-8(fp)
   9029c:	19000044 	addi	r4,r3,1
   902a0:	e13ffe15 	stw	r4,-8(fp)
   902a4:	18c00003 	ldbu	r3,0(r3)
   902a8:	10c00005 	stb	r3,0(r2)
        size--;
   902ac:	e0bfff0b 	ldhu	r2,-4(fp)
   902b0:	10bfffc4 	addi	r2,r2,-1
   902b4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   902b8:	e0bfff0b 	ldhu	r2,-4(fp)
   902bc:	103ff31e 	bne	r2,zero,9028c <__alt_data_end+0xfffd1a8c>
        *pdest++ = *psrc++;
        size--;
    }
}
   902c0:	0001883a 	nop
   902c4:	e037883a 	mov	sp,fp
   902c8:	df000017 	ldw	fp,0(sp)
   902cc:	dec00104 	addi	sp,sp,4
   902d0:	f800283a 	ret

000902d4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   902d4:	defffb04 	addi	sp,sp,-20
   902d8:	dfc00415 	stw	ra,16(sp)
   902dc:	df000315 	stw	fp,12(sp)
   902e0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   902e4:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   902e8:	0005303a 	rdctl	r2,status
   902ec:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   902f0:	e0ffff17 	ldw	r3,-4(fp)
   902f4:	00bfff84 	movi	r2,-2
   902f8:	1884703a 	and	r2,r3,r2
   902fc:	1001703a 	wrctl	status,r2
  
  return context;
   90300:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   90304:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   90308:	d0a73803 	ldbu	r2,-25376(gp)
   9030c:	10803fcc 	andi	r2,r2,255
   90310:	10001a1e 	bne	r2,zero,9037c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   90314:	d0a72a03 	ldbu	r2,-25432(gp)
   90318:	10803fcc 	andi	r2,r2,255
   9031c:	1000171e 	bne	r2,zero,9037c <OS_Sched+0xa8>
            OS_SchedNew();
   90320:	00903a40 	call	903a4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   90324:	d0e72c03 	ldbu	r3,-25424(gp)
   90328:	d0a72c43 	ldbu	r2,-25423(gp)
   9032c:	18c03fcc 	andi	r3,r3,255
   90330:	10803fcc 	andi	r2,r2,255
   90334:	18801126 	beq	r3,r2,9037c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   90338:	d0a72c03 	ldbu	r2,-25424(gp)
   9033c:	10c03fcc 	andi	r3,r2,255
   90340:	008002b4 	movhi	r2,10
   90344:	10bc7904 	addi	r2,r2,-3612
   90348:	18c7883a 	add	r3,r3,r3
   9034c:	18c7883a 	add	r3,r3,r3
   90350:	10c5883a 	add	r2,r2,r3
   90354:	10800017 	ldw	r2,0(r2)
   90358:	d0a73415 	stw	r2,-25392(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   9035c:	d0a73417 	ldw	r2,-25392(gp)
   90360:	10c00e17 	ldw	r3,56(r2)
   90364:	18c00044 	addi	r3,r3,1
   90368:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   9036c:	d0a72f17 	ldw	r2,-25412(gp)
   90370:	10800044 	addi	r2,r2,1
   90374:	d0a72f15 	stw	r2,-25412(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   90378:	00979300 	call	97930 <OSCtxSw>
   9037c:	e0bffd17 	ldw	r2,-12(fp)
   90380:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90384:	e0bffe17 	ldw	r2,-8(fp)
   90388:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   9038c:	0001883a 	nop
   90390:	e037883a 	mov	sp,fp
   90394:	dfc00117 	ldw	ra,4(sp)
   90398:	df000017 	ldw	fp,0(sp)
   9039c:	dec00204 	addi	sp,sp,8
   903a0:	f800283a 	ret

000903a4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   903a4:	defffe04 	addi	sp,sp,-8
   903a8:	df000115 	stw	fp,4(sp)
   903ac:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   903b0:	d0a73603 	ldbu	r2,-25384(gp)
   903b4:	10c03fcc 	andi	r3,r2,255
   903b8:	008002b4 	movhi	r2,10
   903bc:	10a17f04 	addi	r2,r2,-31236
   903c0:	10c5883a 	add	r2,r2,r3
   903c4:	10800003 	ldbu	r2,0(r2)
   903c8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   903cc:	e0bfff03 	ldbu	r2,-4(fp)
   903d0:	100490fa 	slli	r2,r2,3
   903d4:	1009883a 	mov	r4,r2
   903d8:	e0ffff03 	ldbu	r3,-4(fp)
   903dc:	d0a73644 	addi	r2,gp,-25383
   903e0:	1885883a 	add	r2,r3,r2
   903e4:	10800003 	ldbu	r2,0(r2)
   903e8:	10c03fcc 	andi	r3,r2,255
   903ec:	008002b4 	movhi	r2,10
   903f0:	10a17f04 	addi	r2,r2,-31236
   903f4:	10c5883a 	add	r2,r2,r3
   903f8:	10800003 	ldbu	r2,0(r2)
   903fc:	2085883a 	add	r2,r4,r2
   90400:	d0a72c05 	stb	r2,-25424(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   90404:	0001883a 	nop
   90408:	e037883a 	mov	sp,fp
   9040c:	df000017 	ldw	fp,0(sp)
   90410:	dec00104 	addi	sp,sp,4
   90414:	f800283a 	ret

00090418 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   90418:	defffc04 	addi	sp,sp,-16
   9041c:	df000315 	stw	fp,12(sp)
   90420:	df000304 	addi	fp,sp,12
   90424:	e13ffe15 	stw	r4,-8(fp)
   90428:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   9042c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   90430:	00000b06 	br	90460 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   90434:	e0bffe17 	ldw	r2,-8(fp)
   90438:	10c00044 	addi	r3,r2,1
   9043c:	e0fffe15 	stw	r3,-8(fp)
   90440:	e0ffff17 	ldw	r3,-4(fp)
   90444:	19000044 	addi	r4,r3,1
   90448:	e13fff15 	stw	r4,-4(fp)
   9044c:	18c00003 	ldbu	r3,0(r3)
   90450:	10c00005 	stb	r3,0(r2)
        len++;
   90454:	e0bffd03 	ldbu	r2,-12(fp)
   90458:	10800044 	addi	r2,r2,1
   9045c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   90460:	e0bfff17 	ldw	r2,-4(fp)
   90464:	10800003 	ldbu	r2,0(r2)
   90468:	10803fcc 	andi	r2,r2,255
   9046c:	103ff11e 	bne	r2,zero,90434 <__alt_data_end+0xfffd1c34>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   90470:	e0bffe17 	ldw	r2,-8(fp)
   90474:	10000005 	stb	zero,0(r2)
    return (len);
   90478:	e0bffd03 	ldbu	r2,-12(fp)
}
   9047c:	e037883a 	mov	sp,fp
   90480:	df000017 	ldw	fp,0(sp)
   90484:	dec00104 	addi	sp,sp,4
   90488:	f800283a 	ret

0009048c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   9048c:	defffd04 	addi	sp,sp,-12
   90490:	df000215 	stw	fp,8(sp)
   90494:	df000204 	addi	fp,sp,8
   90498:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   9049c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   904a0:	00000606 	br	904bc <OS_StrLen+0x30>
        psrc++;
   904a4:	e0bfff17 	ldw	r2,-4(fp)
   904a8:	10800044 	addi	r2,r2,1
   904ac:	e0bfff15 	stw	r2,-4(fp)
        len++;
   904b0:	e0bffe03 	ldbu	r2,-8(fp)
   904b4:	10800044 	addi	r2,r2,1
   904b8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   904bc:	e0bfff17 	ldw	r2,-4(fp)
   904c0:	10800003 	ldbu	r2,0(r2)
   904c4:	10803fcc 	andi	r2,r2,255
   904c8:	103ff61e 	bne	r2,zero,904a4 <__alt_data_end+0xfffd1ca4>
        psrc++;
        len++;
    }
    return (len);
   904cc:	e0bffe03 	ldbu	r2,-8(fp)
}
   904d0:	e037883a 	mov	sp,fp
   904d4:	df000017 	ldw	fp,0(sp)
   904d8:	dec00104 	addi	sp,sp,4
   904dc:	f800283a 	ret

000904e0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   904e0:	defffa04 	addi	sp,sp,-24
   904e4:	dfc00515 	stw	ra,20(sp)
   904e8:	df000415 	stw	fp,16(sp)
   904ec:	df000404 	addi	fp,sp,16
   904f0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   904f4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   904f8:	0005303a 	rdctl	r2,status
   904fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90500:	e0fffd17 	ldw	r3,-12(fp)
   90504:	00bfff84 	movi	r2,-2
   90508:	1884703a 	and	r2,r3,r2
   9050c:	1001703a 	wrctl	status,r2
  
  return context;
   90510:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   90514:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   90518:	d0a72b17 	ldw	r2,-25428(gp)
   9051c:	10800044 	addi	r2,r2,1
   90520:	d0a72b15 	stw	r2,-25428(gp)
   90524:	e0bffc17 	ldw	r2,-16(fp)
   90528:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9052c:	e0bffe17 	ldw	r2,-8(fp)
   90530:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   90534:	0097c440 	call	97c44 <OSTaskIdleHook>
    }
   90538:	003fef06 	br	904f8 <__alt_data_end+0xfffd1cf8>

0009053c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   9053c:	defffa04 	addi	sp,sp,-24
   90540:	dfc00515 	stw	ra,20(sp)
   90544:	df000415 	stw	fp,16(sp)
   90548:	df000404 	addi	fp,sp,16
   9054c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   90550:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   90554:	00000206 	br	90560 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   90558:	01003204 	movi	r4,200
   9055c:	0095c7c0 	call	95c7c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   90560:	d0a73c03 	ldbu	r2,-25360(gp)
   90564:	10803fcc 	andi	r2,r2,255
   90568:	103ffb26 	beq	r2,zero,90558 <__alt_data_end+0xfffd1d58>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   9056c:	d0a73017 	ldw	r2,-25408(gp)
   90570:	01401904 	movi	r5,100
   90574:	1009883a 	mov	r4,r2
   90578:	0080c040 	call	80c04 <__udivsi3>
   9057c:	d0a73015 	stw	r2,-25408(gp)
    if (OSIdleCtrMax == 0L) {
   90580:	d0a73017 	ldw	r2,-25408(gp)
   90584:	1000031e 	bne	r2,zero,90594 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   90588:	d0273205 	stb	zero,-25400(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   9058c:	01003fc4 	movi	r4,255
   90590:	00959040 	call	95904 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90594:	0005303a 	rdctl	r2,status
   90598:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9059c:	e0fffd17 	ldw	r3,-12(fp)
   905a0:	00bfff84 	movi	r2,-2
   905a4:	1884703a 	and	r2,r3,r2
   905a8:	1001703a 	wrctl	status,r2
  
  return context;
   905ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   905b0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   905b4:	d0a72b17 	ldw	r2,-25428(gp)
   905b8:	d0a73d15 	stw	r2,-25356(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   905bc:	d0272b15 	stw	zero,-25428(gp)
   905c0:	e0bffc17 	ldw	r2,-16(fp)
   905c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   905c8:	e0bffe17 	ldw	r2,-8(fp)
   905cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   905d0:	d0a73d17 	ldw	r2,-25356(gp)
   905d4:	d0e73017 	ldw	r3,-25408(gp)
   905d8:	180b883a 	mov	r5,r3
   905dc:	1009883a 	mov	r4,r2
   905e0:	0080c040 	call	80c04 <__udivsi3>
   905e4:	1007883a 	mov	r3,r2
   905e8:	00801904 	movi	r2,100
   905ec:	10c5c83a 	sub	r2,r2,r3
   905f0:	d0a73205 	stb	r2,-25400(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   905f4:	0097bc40 	call	97bc4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   905f8:	00906080 	call	90608 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   905fc:	01001904 	movi	r4,100
   90600:	0095c7c0 	call	95c7c <OSTimeDly>
    }
   90604:	003fe306 	br	90594 <__alt_data_end+0xfffd1d94>

00090608 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   90608:	defffa04 	addi	sp,sp,-24
   9060c:	dfc00515 	stw	ra,20(sp)
   90610:	df000415 	stw	fp,16(sp)
   90614:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   90618:	e03ffc05 	stb	zero,-16(fp)
   9061c:	00002406 	br	906b0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   90620:	e0bffc03 	ldbu	r2,-16(fp)
   90624:	e0fffe04 	addi	r3,fp,-8
   90628:	180b883a 	mov	r5,r3
   9062c:	1009883a 	mov	r4,r2
   90630:	00957440 	call	95744 <OSTaskStkChk>
   90634:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   90638:	e0bffc43 	ldbu	r2,-15(fp)
   9063c:	1000191e 	bne	r2,zero,906a4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   90640:	e0fffc03 	ldbu	r3,-16(fp)
   90644:	008002b4 	movhi	r2,10
   90648:	10bc7904 	addi	r2,r2,-3612
   9064c:	18c7883a 	add	r3,r3,r3
   90650:	18c7883a 	add	r3,r3,r3
   90654:	10c5883a 	add	r2,r2,r3
   90658:	10800017 	ldw	r2,0(r2)
   9065c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   90660:	e0bffd17 	ldw	r2,-12(fp)
   90664:	10000f26 	beq	r2,zero,906a4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   90668:	e0bffd17 	ldw	r2,-12(fp)
   9066c:	10800060 	cmpeqi	r2,r2,1
   90670:	10000c1e 	bne	r2,zero,906a4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   90674:	e0bffd17 	ldw	r2,-12(fp)
   90678:	10c00217 	ldw	r3,8(r2)
   9067c:	e0bffd17 	ldw	r2,-12(fp)
   90680:	10800317 	ldw	r2,12(r2)
   90684:	1085883a 	add	r2,r2,r2
   90688:	1085883a 	add	r2,r2,r2
   9068c:	1887883a 	add	r3,r3,r2
   90690:	e0bffd17 	ldw	r2,-12(fp)
   90694:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   90698:	e0ffff17 	ldw	r3,-4(fp)
   9069c:	e0bffd17 	ldw	r2,-12(fp)
   906a0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   906a4:	e0bffc03 	ldbu	r2,-16(fp)
   906a8:	10800044 	addi	r2,r2,1
   906ac:	e0bffc05 	stb	r2,-16(fp)
   906b0:	e0bffc03 	ldbu	r2,-16(fp)
   906b4:	10800570 	cmpltui	r2,r2,21
   906b8:	103fd91e 	bne	r2,zero,90620 <__alt_data_end+0xfffd1e20>
#endif
                }
            }
        }
    }
}
   906bc:	0001883a 	nop
   906c0:	e037883a 	mov	sp,fp
   906c4:	dfc00117 	ldw	ra,4(sp)
   906c8:	df000017 	ldw	fp,0(sp)
   906cc:	dec00204 	addi	sp,sp,8
   906d0:	f800283a 	ret

000906d4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   906d4:	defff204 	addi	sp,sp,-56
   906d8:	dfc00d15 	stw	ra,52(sp)
   906dc:	df000c15 	stw	fp,48(sp)
   906e0:	df000c04 	addi	fp,sp,48
   906e4:	e17ffc15 	stw	r5,-16(fp)
   906e8:	e1bffd15 	stw	r6,-12(fp)
   906ec:	3807883a 	mov	r3,r7
   906f0:	e0800417 	ldw	r2,16(fp)
   906f4:	e13ffb05 	stb	r4,-20(fp)
   906f8:	e0fffe0d 	sth	r3,-8(fp)
   906fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   90700:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90704:	0005303a 	rdctl	r2,status
   90708:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9070c:	e0fffa17 	ldw	r3,-24(fp)
   90710:	00bfff84 	movi	r2,-2
   90714:	1884703a 	and	r2,r3,r2
   90718:	1001703a 	wrctl	status,r2
  
  return context;
   9071c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   90720:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   90724:	d0a73117 	ldw	r2,-25404(gp)
   90728:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   9072c:	e0bff617 	ldw	r2,-40(fp)
   90730:	10009326 	beq	r2,zero,90980 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   90734:	e0bff617 	ldw	r2,-40(fp)
   90738:	10800517 	ldw	r2,20(r2)
   9073c:	d0a73115 	stw	r2,-25404(gp)
   90740:	e0bff417 	ldw	r2,-48(fp)
   90744:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90748:	e0bff817 	ldw	r2,-32(fp)
   9074c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   90750:	e0bff617 	ldw	r2,-40(fp)
   90754:	e0fffc17 	ldw	r3,-16(fp)
   90758:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   9075c:	e0bff617 	ldw	r2,-40(fp)
   90760:	e0fffb03 	ldbu	r3,-20(fp)
   90764:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   90768:	e0bff617 	ldw	r2,-40(fp)
   9076c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   90770:	e0bff617 	ldw	r2,-40(fp)
   90774:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   90778:	e0bff617 	ldw	r2,-40(fp)
   9077c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   90780:	e0bff617 	ldw	r2,-40(fp)
   90784:	e0c00317 	ldw	r3,12(fp)
   90788:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   9078c:	e0bff617 	ldw	r2,-40(fp)
   90790:	e0c00217 	ldw	r3,8(fp)
   90794:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   90798:	e0bff617 	ldw	r2,-40(fp)
   9079c:	e0fffd17 	ldw	r3,-12(fp)
   907a0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   907a4:	e0bff617 	ldw	r2,-40(fp)
   907a8:	e0ffff0b 	ldhu	r3,-4(fp)
   907ac:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   907b0:	e0bff617 	ldw	r2,-40(fp)
   907b4:	e0fffe0b 	ldhu	r3,-8(fp)
   907b8:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   907bc:	e0bff617 	ldw	r2,-40(fp)
   907c0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   907c4:	e0bffb03 	ldbu	r2,-20(fp)
   907c8:	1004d0fa 	srli	r2,r2,3
   907cc:	1007883a 	mov	r3,r2
   907d0:	e0bff617 	ldw	r2,-40(fp)
   907d4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   907d8:	e0bffb03 	ldbu	r2,-20(fp)
   907dc:	108001cc 	andi	r2,r2,7
   907e0:	1007883a 	mov	r3,r2
   907e4:	e0bff617 	ldw	r2,-40(fp)
   907e8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   907ec:	e0bff617 	ldw	r2,-40(fp)
   907f0:	10800d03 	ldbu	r2,52(r2)
   907f4:	10803fcc 	andi	r2,r2,255
   907f8:	00c00044 	movi	r3,1
   907fc:	1884983a 	sll	r2,r3,r2
   90800:	1007883a 	mov	r3,r2
   90804:	e0bff617 	ldw	r2,-40(fp)
   90808:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   9080c:	e0bff617 	ldw	r2,-40(fp)
   90810:	10800cc3 	ldbu	r2,51(r2)
   90814:	10803fcc 	andi	r2,r2,255
   90818:	00c00044 	movi	r3,1
   9081c:	1884983a 	sll	r2,r3,r2
   90820:	1007883a 	mov	r3,r2
   90824:	e0bff617 	ldw	r2,-40(fp)
   90828:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   9082c:	e0bff617 	ldw	r2,-40(fp)
   90830:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   90834:	e0bff617 	ldw	r2,-40(fp)
   90838:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   9083c:	e0bff617 	ldw	r2,-40(fp)
   90840:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   90844:	e0bff617 	ldw	r2,-40(fp)
   90848:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   9084c:	e0bff617 	ldw	r2,-40(fp)
   90850:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   90854:	e0bff617 	ldw	r2,-40(fp)
   90858:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   9085c:	e0bff617 	ldw	r2,-40(fp)
   90860:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   90864:	e0bff617 	ldw	r2,-40(fp)
   90868:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   9086c:	e0bff617 	ldw	r2,-40(fp)
   90870:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   90874:	e0bff617 	ldw	r2,-40(fp)
   90878:	00c00fc4 	movi	r3,63
   9087c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   90880:	e0bff617 	ldw	r2,-40(fp)
   90884:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   90888:	e13ff617 	ldw	r4,-40(fp)
   9088c:	0097c640 	call	97c64 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   90890:	e13ff617 	ldw	r4,-40(fp)
   90894:	0097b5c0 	call	97b5c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90898:	0005303a 	rdctl	r2,status
   9089c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   908a0:	e0fff517 	ldw	r3,-44(fp)
   908a4:	00bfff84 	movi	r2,-2
   908a8:	1884703a 	and	r2,r3,r2
   908ac:	1001703a 	wrctl	status,r2
  
  return context;
   908b0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   908b4:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   908b8:	e0fffb03 	ldbu	r3,-20(fp)
   908bc:	008002b4 	movhi	r2,10
   908c0:	10bc7904 	addi	r2,r2,-3612
   908c4:	18c7883a 	add	r3,r3,r3
   908c8:	18c7883a 	add	r3,r3,r3
   908cc:	10c5883a 	add	r2,r2,r3
   908d0:	e0fff617 	ldw	r3,-40(fp)
   908d4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   908d8:	d0e72d17 	ldw	r3,-25420(gp)
   908dc:	e0bff617 	ldw	r2,-40(fp)
   908e0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   908e4:	e0bff617 	ldw	r2,-40(fp)
   908e8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   908ec:	d0a72d17 	ldw	r2,-25420(gp)
   908f0:	10000326 	beq	r2,zero,90900 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   908f4:	d0a72d17 	ldw	r2,-25420(gp)
   908f8:	e0fff617 	ldw	r3,-40(fp)
   908fc:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   90900:	e0bff617 	ldw	r2,-40(fp)
   90904:	d0a72d15 	stw	r2,-25420(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   90908:	e0bff617 	ldw	r2,-40(fp)
   9090c:	10c00d83 	ldbu	r3,54(r2)
   90910:	d0a73603 	ldbu	r2,-25384(gp)
   90914:	1884b03a 	or	r2,r3,r2
   90918:	d0a73605 	stb	r2,-25384(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   9091c:	e0bff617 	ldw	r2,-40(fp)
   90920:	10800d03 	ldbu	r2,52(r2)
   90924:	10c03fcc 	andi	r3,r2,255
   90928:	e0bff617 	ldw	r2,-40(fp)
   9092c:	10800d03 	ldbu	r2,52(r2)
   90930:	11003fcc 	andi	r4,r2,255
   90934:	d0a73644 	addi	r2,gp,-25383
   90938:	2085883a 	add	r2,r4,r2
   9093c:	11000003 	ldbu	r4,0(r2)
   90940:	e0bff617 	ldw	r2,-40(fp)
   90944:	10800d43 	ldbu	r2,53(r2)
   90948:	2084b03a 	or	r2,r4,r2
   9094c:	1009883a 	mov	r4,r2
   90950:	d0a73644 	addi	r2,gp,-25383
   90954:	1885883a 	add	r2,r3,r2
   90958:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   9095c:	d0a73243 	ldbu	r2,-25399(gp)
   90960:	10800044 	addi	r2,r2,1
   90964:	d0a73245 	stb	r2,-25399(gp)
   90968:	e0bff417 	ldw	r2,-48(fp)
   9096c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90970:	e0bff717 	ldw	r2,-36(fp)
   90974:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   90978:	0005883a 	mov	r2,zero
   9097c:	00000506 	br	90994 <OS_TCBInit+0x2c0>
   90980:	e0bff417 	ldw	r2,-48(fp)
   90984:	e0bff915 	stw	r2,-28(fp)
   90988:	e0bff917 	ldw	r2,-28(fp)
   9098c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   90990:	00801084 	movi	r2,66
}
   90994:	e037883a 	mov	sp,fp
   90998:	dfc00117 	ldw	ra,4(sp)
   9099c:	df000017 	ldw	fp,0(sp)
   909a0:	dec00204 	addi	sp,sp,8
   909a4:	f800283a 	ret

000909a8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   909a8:	defffe04 	addi	sp,sp,-8
   909ac:	df000115 	stw	fp,4(sp)
   909b0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   909b4:	d0a01104 	addi	r2,gp,-32700
   909b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   909bc:	d0a01204 	addi	r2,gp,-32696
   909c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   909c4:	d0a01384 	addi	r2,gp,-32690
   909c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   909cc:	d0a01404 	addi	r2,gp,-32688
   909d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   909d4:	d0a01304 	addi	r2,gp,-32692
   909d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   909dc:	d0a01484 	addi	r2,gp,-32686
   909e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   909e4:	d0a01504 	addi	r2,gp,-32684
   909e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   909ec:	d0a01584 	addi	r2,gp,-32682
   909f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   909f4:	d0a01604 	addi	r2,gp,-32680
   909f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   909fc:	d0a01684 	addi	r2,gp,-32678
   90a00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   90a04:	d0a01704 	addi	r2,gp,-32676
   90a08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   90a0c:	d0a01784 	addi	r2,gp,-32674
   90a10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   90a14:	d0a01804 	addi	r2,gp,-32672
   90a18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   90a1c:	d0a01884 	addi	r2,gp,-32670
   90a20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   90a24:	d0a01904 	addi	r2,gp,-32668
   90a28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   90a2c:	d0a01984 	addi	r2,gp,-32666
   90a30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   90a34:	d0a01a04 	addi	r2,gp,-32664
   90a38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   90a3c:	d0a01a84 	addi	r2,gp,-32662
   90a40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   90a44:	d0a01b04 	addi	r2,gp,-32660
   90a48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   90a4c:	d0a01b84 	addi	r2,gp,-32658
   90a50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   90a54:	d0a01c04 	addi	r2,gp,-32656
   90a58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   90a5c:	d0a01c84 	addi	r2,gp,-32654
   90a60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   90a64:	d0a01d04 	addi	r2,gp,-32652
   90a68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   90a6c:	d0a01d84 	addi	r2,gp,-32650
   90a70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   90a74:	d0a01e04 	addi	r2,gp,-32648
   90a78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   90a7c:	d0a01e84 	addi	r2,gp,-32646
   90a80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   90a84:	d0a01f04 	addi	r2,gp,-32644
   90a88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   90a8c:	d0a01f84 	addi	r2,gp,-32642
   90a90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   90a94:	d0a02004 	addi	r2,gp,-32640
   90a98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   90a9c:	d0a02084 	addi	r2,gp,-32638
   90aa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   90aa4:	d0a02104 	addi	r2,gp,-32636
   90aa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   90aac:	d0a02184 	addi	r2,gp,-32634
   90ab0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   90ab4:	d0a02204 	addi	r2,gp,-32632
   90ab8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   90abc:	d0a02284 	addi	r2,gp,-32630
   90ac0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   90ac4:	d0a02304 	addi	r2,gp,-32628
   90ac8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   90acc:	d0a02384 	addi	r2,gp,-32626
   90ad0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   90ad4:	d0a02404 	addi	r2,gp,-32624
   90ad8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   90adc:	d0a02484 	addi	r2,gp,-32622
   90ae0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   90ae4:	d0a02504 	addi	r2,gp,-32620
   90ae8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   90aec:	d0a02584 	addi	r2,gp,-32618
   90af0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   90af4:	d0a02604 	addi	r2,gp,-32616
   90af8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   90afc:	d0a02684 	addi	r2,gp,-32614
   90b00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   90b04:	d0a02704 	addi	r2,gp,-32612
   90b08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   90b0c:	d0a02784 	addi	r2,gp,-32610
   90b10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   90b14:	d0a02804 	addi	r2,gp,-32608
   90b18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   90b1c:	d0a02d04 	addi	r2,gp,-32588
   90b20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   90b24:	0001883a 	nop
   90b28:	e037883a 	mov	sp,fp
   90b2c:	df000017 	ldw	fp,0(sp)
   90b30:	dec00104 	addi	sp,sp,4
   90b34:	f800283a 	ret

00090b38 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   90b38:	defff204 	addi	sp,sp,-56
   90b3c:	df000d15 	stw	fp,52(sp)
   90b40:	df000d04 	addi	fp,sp,52
   90b44:	e13ffc15 	stw	r4,-16(fp)
   90b48:	2807883a 	mov	r3,r5
   90b4c:	3005883a 	mov	r2,r6
   90b50:	e1ffff15 	stw	r7,-4(fp)
   90b54:	e0fffd0d 	sth	r3,-12(fp)
   90b58:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   90b5c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   90b60:	e0bfff17 	ldw	r2,-4(fp)
   90b64:	1000021e 	bne	r2,zero,90b70 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   90b68:	0005883a 	mov	r2,zero
   90b6c:	0000b006 	br	90e30 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   90b70:	e0bffc17 	ldw	r2,-16(fp)
   90b74:	1000051e 	bne	r2,zero,90b8c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   90b78:	e0bfff17 	ldw	r2,-4(fp)
   90b7c:	00c01b84 	movi	r3,110
   90b80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   90b84:	0005883a 	mov	r2,zero
   90b88:	0000a906 	br	90e30 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   90b8c:	e0bffc17 	ldw	r2,-16(fp)
   90b90:	10800003 	ldbu	r2,0(r2)
   90b94:	10803fcc 	andi	r2,r2,255
   90b98:	10800160 	cmpeqi	r2,r2,5
   90b9c:	1000051e 	bne	r2,zero,90bb4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   90ba0:	e0bfff17 	ldw	r2,-4(fp)
   90ba4:	00c00044 	movi	r3,1
   90ba8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   90bac:	0005883a 	mov	r2,zero
   90bb0:	00009f06 	br	90e30 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   90bb4:	e0fffe03 	ldbu	r3,-8(fp)
   90bb8:	00bfe004 	movi	r2,-128
   90bbc:	1884703a 	and	r2,r3,r2
   90bc0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   90bc4:	e0bff503 	ldbu	r2,-44(fp)
   90bc8:	10000626 	beq	r2,zero,90be4 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   90bcc:	e0bffe03 	ldbu	r2,-8(fp)
   90bd0:	10801fcc 	andi	r2,r2,127
   90bd4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   90bd8:	00800044 	movi	r2,1
   90bdc:	e0bff385 	stb	r2,-50(fp)
   90be0:	00000106 	br	90be8 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   90be4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   90be8:	e0bfff17 	ldw	r2,-4(fp)
   90bec:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90bf0:	0005303a 	rdctl	r2,status
   90bf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90bf8:	e0fffb17 	ldw	r3,-20(fp)
   90bfc:	00bfff84 	movi	r2,-2
   90c00:	1884703a 	and	r2,r3,r2
   90c04:	1001703a 	wrctl	status,r2
  
  return context;
   90c08:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   90c0c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   90c10:	e0bffe03 	ldbu	r2,-8(fp)
   90c14:	10c00060 	cmpeqi	r3,r2,1
   90c18:	18005f1e 	bne	r3,zero,90d98 <OSFlagAccept+0x260>
   90c1c:	10c00088 	cmpgei	r3,r2,2
   90c20:	1800021e 	bne	r3,zero,90c2c <OSFlagAccept+0xf4>
   90c24:	10003f26 	beq	r2,zero,90d24 <OSFlagAccept+0x1ec>
   90c28:	00007706 	br	90e08 <OSFlagAccept+0x2d0>
   90c2c:	10c000a0 	cmpeqi	r3,r2,2
   90c30:	1800031e 	bne	r3,zero,90c40 <OSFlagAccept+0x108>
   90c34:	108000e0 	cmpeqi	r2,r2,3
   90c38:	10001e1e 	bne	r2,zero,90cb4 <OSFlagAccept+0x17c>
   90c3c:	00007206 	br	90e08 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   90c40:	e0bffc17 	ldw	r2,-16(fp)
   90c44:	10c0020b 	ldhu	r3,8(r2)
   90c48:	e0bffd0b 	ldhu	r2,-12(fp)
   90c4c:	1884703a 	and	r2,r3,r2
   90c50:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   90c54:	e0fff30b 	ldhu	r3,-52(fp)
   90c58:	e0bffd0b 	ldhu	r2,-12(fp)
   90c5c:	18800d1e 	bne	r3,r2,90c94 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   90c60:	e0bff383 	ldbu	r2,-50(fp)
   90c64:	10800058 	cmpnei	r2,r2,1
   90c68:	10000d1e 	bne	r2,zero,90ca0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   90c6c:	e0bffc17 	ldw	r2,-16(fp)
   90c70:	1080020b 	ldhu	r2,8(r2)
   90c74:	1007883a 	mov	r3,r2
   90c78:	e0bff30b 	ldhu	r2,-52(fp)
   90c7c:	0084303a 	nor	r2,zero,r2
   90c80:	1884703a 	and	r2,r3,r2
   90c84:	1007883a 	mov	r3,r2
   90c88:	e0bffc17 	ldw	r2,-16(fp)
   90c8c:	10c0020d 	sth	r3,8(r2)
   90c90:	00000306 	br	90ca0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   90c94:	e0bfff17 	ldw	r2,-4(fp)
   90c98:	00c01c04 	movi	r3,112
   90c9c:	10c00005 	stb	r3,0(r2)
   90ca0:	e0bff417 	ldw	r2,-48(fp)
   90ca4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90ca8:	e0bff617 	ldw	r2,-40(fp)
   90cac:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   90cb0:	00005e06 	br	90e2c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   90cb4:	e0bffc17 	ldw	r2,-16(fp)
   90cb8:	10c0020b 	ldhu	r3,8(r2)
   90cbc:	e0bffd0b 	ldhu	r2,-12(fp)
   90cc0:	1884703a 	and	r2,r3,r2
   90cc4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   90cc8:	e0bff30b 	ldhu	r2,-52(fp)
   90ccc:	10000d26 	beq	r2,zero,90d04 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   90cd0:	e0bff383 	ldbu	r2,-50(fp)
   90cd4:	10800058 	cmpnei	r2,r2,1
   90cd8:	10000d1e 	bne	r2,zero,90d10 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   90cdc:	e0bffc17 	ldw	r2,-16(fp)
   90ce0:	1080020b 	ldhu	r2,8(r2)
   90ce4:	1007883a 	mov	r3,r2
   90ce8:	e0bff30b 	ldhu	r2,-52(fp)
   90cec:	0084303a 	nor	r2,zero,r2
   90cf0:	1884703a 	and	r2,r3,r2
   90cf4:	1007883a 	mov	r3,r2
   90cf8:	e0bffc17 	ldw	r2,-16(fp)
   90cfc:	10c0020d 	sth	r3,8(r2)
   90d00:	00000306 	br	90d10 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   90d04:	e0bfff17 	ldw	r2,-4(fp)
   90d08:	00c01c04 	movi	r3,112
   90d0c:	10c00005 	stb	r3,0(r2)
   90d10:	e0bff417 	ldw	r2,-48(fp)
   90d14:	e0bff715 	stw	r2,-36(fp)
   90d18:	e0bff717 	ldw	r2,-36(fp)
   90d1c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   90d20:	00004206 	br	90e2c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   90d24:	e0bffc17 	ldw	r2,-16(fp)
   90d28:	1080020b 	ldhu	r2,8(r2)
   90d2c:	0084303a 	nor	r2,zero,r2
   90d30:	1007883a 	mov	r3,r2
   90d34:	e0bffd0b 	ldhu	r2,-12(fp)
   90d38:	1884703a 	and	r2,r3,r2
   90d3c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   90d40:	e0fff30b 	ldhu	r3,-52(fp)
   90d44:	e0bffd0b 	ldhu	r2,-12(fp)
   90d48:	18800b1e 	bne	r3,r2,90d78 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   90d4c:	e0bff383 	ldbu	r2,-50(fp)
   90d50:	10800058 	cmpnei	r2,r2,1
   90d54:	10000b1e 	bne	r2,zero,90d84 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   90d58:	e0bffc17 	ldw	r2,-16(fp)
   90d5c:	10c0020b 	ldhu	r3,8(r2)
   90d60:	e0bff30b 	ldhu	r2,-52(fp)
   90d64:	1884b03a 	or	r2,r3,r2
   90d68:	1007883a 	mov	r3,r2
   90d6c:	e0bffc17 	ldw	r2,-16(fp)
   90d70:	10c0020d 	sth	r3,8(r2)
   90d74:	00000306 	br	90d84 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   90d78:	e0bfff17 	ldw	r2,-4(fp)
   90d7c:	00c01c04 	movi	r3,112
   90d80:	10c00005 	stb	r3,0(r2)
   90d84:	e0bff417 	ldw	r2,-48(fp)
   90d88:	e0bff815 	stw	r2,-32(fp)
   90d8c:	e0bff817 	ldw	r2,-32(fp)
   90d90:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   90d94:	00002506 	br	90e2c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   90d98:	e0bffc17 	ldw	r2,-16(fp)
   90d9c:	1080020b 	ldhu	r2,8(r2)
   90da0:	0084303a 	nor	r2,zero,r2
   90da4:	1007883a 	mov	r3,r2
   90da8:	e0bffd0b 	ldhu	r2,-12(fp)
   90dac:	1884703a 	and	r2,r3,r2
   90db0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   90db4:	e0bff30b 	ldhu	r2,-52(fp)
   90db8:	10000b26 	beq	r2,zero,90de8 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   90dbc:	e0bff383 	ldbu	r2,-50(fp)
   90dc0:	10800058 	cmpnei	r2,r2,1
   90dc4:	10000b1e 	bne	r2,zero,90df4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   90dc8:	e0bffc17 	ldw	r2,-16(fp)
   90dcc:	10c0020b 	ldhu	r3,8(r2)
   90dd0:	e0bff30b 	ldhu	r2,-52(fp)
   90dd4:	1884b03a 	or	r2,r3,r2
   90dd8:	1007883a 	mov	r3,r2
   90ddc:	e0bffc17 	ldw	r2,-16(fp)
   90de0:	10c0020d 	sth	r3,8(r2)
   90de4:	00000306 	br	90df4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   90de8:	e0bfff17 	ldw	r2,-4(fp)
   90dec:	00c01c04 	movi	r3,112
   90df0:	10c00005 	stb	r3,0(r2)
   90df4:	e0bff417 	ldw	r2,-48(fp)
   90df8:	e0bff915 	stw	r2,-28(fp)
   90dfc:	e0bff917 	ldw	r2,-28(fp)
   90e00:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   90e04:	00000906 	br	90e2c <OSFlagAccept+0x2f4>
   90e08:	e0bff417 	ldw	r2,-48(fp)
   90e0c:	e0bffa15 	stw	r2,-24(fp)
   90e10:	e0bffa17 	ldw	r2,-24(fp)
   90e14:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   90e18:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   90e1c:	e0bfff17 	ldw	r2,-4(fp)
   90e20:	00c01bc4 	movi	r3,111
   90e24:	10c00005 	stb	r3,0(r2)
             break;
   90e28:	0001883a 	nop
    }
    return (flags_rdy);
   90e2c:	e0bff30b 	ldhu	r2,-52(fp)
}
   90e30:	e037883a 	mov	sp,fp
   90e34:	df000017 	ldw	fp,0(sp)
   90e38:	dec00104 	addi	sp,sp,4
   90e3c:	f800283a 	ret

00090e40 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   90e40:	defff804 	addi	sp,sp,-32
   90e44:	df000715 	stw	fp,28(sp)
   90e48:	df000704 	addi	fp,sp,28
   90e4c:	2005883a 	mov	r2,r4
   90e50:	e17fff15 	stw	r5,-4(fp)
   90e54:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   90e58:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   90e5c:	e0bfff17 	ldw	r2,-4(fp)
   90e60:	1000021e 	bne	r2,zero,90e6c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   90e64:	0005883a 	mov	r2,zero
   90e68:	00003306 	br	90f38 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   90e6c:	d0a73803 	ldbu	r2,-25376(gp)
   90e70:	10803fcc 	andi	r2,r2,255
   90e74:	10000526 	beq	r2,zero,90e8c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   90e78:	e0bfff17 	ldw	r2,-4(fp)
   90e7c:	00c00404 	movi	r3,16
   90e80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   90e84:	0005883a 	mov	r2,zero
   90e88:	00002b06 	br	90f38 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90e8c:	0005303a 	rdctl	r2,status
   90e90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90e94:	e0fffd17 	ldw	r3,-12(fp)
   90e98:	00bfff84 	movi	r2,-2
   90e9c:	1884703a 	and	r2,r3,r2
   90ea0:	1001703a 	wrctl	status,r2
  
  return context;
   90ea4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   90ea8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   90eac:	d0a73b17 	ldw	r2,-25364(gp)
   90eb0:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   90eb4:	e0bffb17 	ldw	r2,-20(fp)
   90eb8:	10001726 	beq	r2,zero,90f18 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   90ebc:	d0a73b17 	ldw	r2,-25364(gp)
   90ec0:	10800117 	ldw	r2,4(r2)
   90ec4:	d0a73b15 	stw	r2,-25364(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   90ec8:	e0bffb17 	ldw	r2,-20(fp)
   90ecc:	00c00144 	movi	r3,5
   90ed0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   90ed4:	e0bffb17 	ldw	r2,-20(fp)
   90ed8:	e0fffe0b 	ldhu	r3,-8(fp)
   90edc:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   90ee0:	e0bffb17 	ldw	r2,-20(fp)
   90ee4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   90ee8:	e0bffb17 	ldw	r2,-20(fp)
   90eec:	00c00fc4 	movi	r3,63
   90ef0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   90ef4:	e0bffb17 	ldw	r2,-20(fp)
   90ef8:	100002c5 	stb	zero,11(r2)
   90efc:	e0bff917 	ldw	r2,-28(fp)
   90f00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90f04:	e0bffa17 	ldw	r2,-24(fp)
   90f08:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   90f0c:	e0bfff17 	ldw	r2,-4(fp)
   90f10:	10000005 	stb	zero,0(r2)
   90f14:	00000706 	br	90f34 <OSFlagCreate+0xf4>
   90f18:	e0bff917 	ldw	r2,-28(fp)
   90f1c:	e0bffc15 	stw	r2,-16(fp)
   90f20:	e0bffc17 	ldw	r2,-16(fp)
   90f24:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   90f28:	e0bfff17 	ldw	r2,-4(fp)
   90f2c:	00c01c84 	movi	r3,114
   90f30:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   90f34:	e0bffb17 	ldw	r2,-20(fp)
}
   90f38:	e037883a 	mov	sp,fp
   90f3c:	df000017 	ldw	fp,0(sp)
   90f40:	dec00104 	addi	sp,sp,4
   90f44:	f800283a 	ret

00090f48 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   90f48:	defff204 	addi	sp,sp,-56
   90f4c:	dfc00d15 	stw	ra,52(sp)
   90f50:	df000c15 	stw	fp,48(sp)
   90f54:	df000c04 	addi	fp,sp,48
   90f58:	e13ffd15 	stw	r4,-12(fp)
   90f5c:	2805883a 	mov	r2,r5
   90f60:	e1bfff15 	stw	r6,-4(fp)
   90f64:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   90f68:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   90f6c:	e0bfff17 	ldw	r2,-4(fp)
   90f70:	1000021e 	bne	r2,zero,90f7c <OSFlagDel+0x34>
        return (pgrp);
   90f74:	e0bffd17 	ldw	r2,-12(fp)
   90f78:	00008006 	br	9117c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   90f7c:	e0bffd17 	ldw	r2,-12(fp)
   90f80:	1000051e 	bne	r2,zero,90f98 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   90f84:	e0bfff17 	ldw	r2,-4(fp)
   90f88:	00c01b84 	movi	r3,110
   90f8c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   90f90:	e0bffd17 	ldw	r2,-12(fp)
   90f94:	00007906 	br	9117c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   90f98:	d0a73803 	ldbu	r2,-25376(gp)
   90f9c:	10803fcc 	andi	r2,r2,255
   90fa0:	10000526 	beq	r2,zero,90fb8 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   90fa4:	e0bfff17 	ldw	r2,-4(fp)
   90fa8:	00c003c4 	movi	r3,15
   90fac:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   90fb0:	e0bffd17 	ldw	r2,-12(fp)
   90fb4:	00007106 	br	9117c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   90fb8:	e0bffd17 	ldw	r2,-12(fp)
   90fbc:	10800003 	ldbu	r2,0(r2)
   90fc0:	10803fcc 	andi	r2,r2,255
   90fc4:	10800160 	cmpeqi	r2,r2,5
   90fc8:	1000051e 	bne	r2,zero,90fe0 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   90fcc:	e0bfff17 	ldw	r2,-4(fp)
   90fd0:	00c00044 	movi	r3,1
   90fd4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   90fd8:	e0bffd17 	ldw	r2,-12(fp)
   90fdc:	00006706 	br	9117c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90fe0:	0005303a 	rdctl	r2,status
   90fe4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90fe8:	e0fffc17 	ldw	r3,-16(fp)
   90fec:	00bfff84 	movi	r2,-2
   90ff0:	1884703a 	and	r2,r3,r2
   90ff4:	1001703a 	wrctl	status,r2
  
  return context;
   90ff8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   90ffc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   91000:	e0bffd17 	ldw	r2,-12(fp)
   91004:	10800117 	ldw	r2,4(r2)
   91008:	10000326 	beq	r2,zero,91018 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   9100c:	00800044 	movi	r2,1
   91010:	e0bff405 	stb	r2,-48(fp)
   91014:	00000106 	br	9101c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   91018:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   9101c:	e0bffe03 	ldbu	r2,-8(fp)
   91020:	10000326 	beq	r2,zero,91030 <OSFlagDel+0xe8>
   91024:	10800060 	cmpeqi	r2,r2,1
   91028:	1000231e 	bne	r2,zero,910b8 <OSFlagDel+0x170>
   9102c:	00004806 	br	91150 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   91030:	e0bff403 	ldbu	r2,-48(fp)
   91034:	1000161e 	bne	r2,zero,91090 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   91038:	e0bffd17 	ldw	r2,-12(fp)
   9103c:	00c00fc4 	movi	r3,63
   91040:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   91044:	e0bffd17 	ldw	r2,-12(fp)
   91048:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   9104c:	e0bffd17 	ldw	r2,-12(fp)
   91050:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   91054:	d0e73b17 	ldw	r3,-25364(gp)
   91058:	e0bffd17 	ldw	r2,-12(fp)
   9105c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   91060:	e0bffd17 	ldw	r2,-12(fp)
   91064:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   91068:	e0bffd17 	ldw	r2,-12(fp)
   9106c:	d0a73b15 	stw	r2,-25364(gp)
   91070:	e0bff717 	ldw	r2,-36(fp)
   91074:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91078:	e0bff817 	ldw	r2,-32(fp)
   9107c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   91080:	e0bfff17 	ldw	r2,-4(fp)
   91084:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   91088:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   9108c:	00003a06 	br	91178 <OSFlagDel+0x230>
   91090:	e0bff717 	ldw	r2,-36(fp)
   91094:	e0bff915 	stw	r2,-28(fp)
   91098:	e0bff917 	ldw	r2,-28(fp)
   9109c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   910a0:	e0bfff17 	ldw	r2,-4(fp)
   910a4:	00c01244 	movi	r3,73
   910a8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   910ac:	e0bffd17 	ldw	r2,-12(fp)
   910b0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   910b4:	00003006 	br	91178 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   910b8:	e0bffd17 	ldw	r2,-12(fp)
   910bc:	10800117 	ldw	r2,4(r2)
   910c0:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   910c4:	00000606 	br	910e0 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   910c8:	000b883a 	mov	r5,zero
   910cc:	e13ff517 	ldw	r4,-44(fp)
   910d0:	00920b40 	call	920b4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   910d4:	e0bff517 	ldw	r2,-44(fp)
   910d8:	10800017 	ldw	r2,0(r2)
   910dc:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   910e0:	e0bff517 	ldw	r2,-44(fp)
   910e4:	103ff81e 	bne	r2,zero,910c8 <__alt_data_end+0xfffd28c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   910e8:	e0bffd17 	ldw	r2,-12(fp)
   910ec:	00c00fc4 	movi	r3,63
   910f0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   910f4:	e0bffd17 	ldw	r2,-12(fp)
   910f8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   910fc:	e0bffd17 	ldw	r2,-12(fp)
   91100:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   91104:	d0e73b17 	ldw	r3,-25364(gp)
   91108:	e0bffd17 	ldw	r2,-12(fp)
   9110c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   91110:	e0bffd17 	ldw	r2,-12(fp)
   91114:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   91118:	e0bffd17 	ldw	r2,-12(fp)
   9111c:	d0a73b15 	stw	r2,-25364(gp)
   91120:	e0bff717 	ldw	r2,-36(fp)
   91124:	e0bffa15 	stw	r2,-24(fp)
   91128:	e0bffa17 	ldw	r2,-24(fp)
   9112c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   91130:	e0bff403 	ldbu	r2,-48(fp)
   91134:	10800058 	cmpnei	r2,r2,1
   91138:	1000011e 	bne	r2,zero,91140 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   9113c:	00902d40 	call	902d4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   91140:	e0bfff17 	ldw	r2,-4(fp)
   91144:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   91148:	e03ff615 	stw	zero,-40(fp)
             break;
   9114c:	00000a06 	br	91178 <OSFlagDel+0x230>
   91150:	e0bff717 	ldw	r2,-36(fp)
   91154:	e0bffb15 	stw	r2,-20(fp)
   91158:	e0bffb17 	ldw	r2,-20(fp)
   9115c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   91160:	e0bfff17 	ldw	r2,-4(fp)
   91164:	00c001c4 	movi	r3,7
   91168:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   9116c:	e0bffd17 	ldw	r2,-12(fp)
   91170:	e0bff615 	stw	r2,-40(fp)
             break;
   91174:	0001883a 	nop
    }
    return (pgrp_return);
   91178:	e0bff617 	ldw	r2,-40(fp)
}
   9117c:	e037883a 	mov	sp,fp
   91180:	dfc00117 	ldw	ra,4(sp)
   91184:	df000017 	ldw	fp,0(sp)
   91188:	dec00204 	addi	sp,sp,8
   9118c:	f800283a 	ret

00091190 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   91190:	defff604 	addi	sp,sp,-40
   91194:	dfc00915 	stw	ra,36(sp)
   91198:	df000815 	stw	fp,32(sp)
   9119c:	df000804 	addi	fp,sp,32
   911a0:	e13ffd15 	stw	r4,-12(fp)
   911a4:	e17ffe15 	stw	r5,-8(fp)
   911a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   911ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   911b0:	e0bfff17 	ldw	r2,-4(fp)
   911b4:	1000021e 	bne	r2,zero,911c0 <OSFlagNameGet+0x30>
        return (0);
   911b8:	0005883a 	mov	r2,zero
   911bc:	00003906 	br	912a4 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   911c0:	e0bffd17 	ldw	r2,-12(fp)
   911c4:	1000051e 	bne	r2,zero,911dc <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   911c8:	e0bfff17 	ldw	r2,-4(fp)
   911cc:	00c01b84 	movi	r3,110
   911d0:	10c00005 	stb	r3,0(r2)
        return (0);
   911d4:	0005883a 	mov	r2,zero
   911d8:	00003206 	br	912a4 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   911dc:	e0bffe17 	ldw	r2,-8(fp)
   911e0:	1000051e 	bne	r2,zero,911f8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   911e4:	e0bfff17 	ldw	r2,-4(fp)
   911e8:	00c00304 	movi	r3,12
   911ec:	10c00005 	stb	r3,0(r2)
        return (0);
   911f0:	0005883a 	mov	r2,zero
   911f4:	00002b06 	br	912a4 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   911f8:	d0a73803 	ldbu	r2,-25376(gp)
   911fc:	10803fcc 	andi	r2,r2,255
   91200:	10000526 	beq	r2,zero,91218 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   91204:	e0bfff17 	ldw	r2,-4(fp)
   91208:	00c00444 	movi	r3,17
   9120c:	10c00005 	stb	r3,0(r2)
        return (0);
   91210:	0005883a 	mov	r2,zero
   91214:	00002306 	br	912a4 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91218:	0005303a 	rdctl	r2,status
   9121c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91220:	e0fffc17 	ldw	r3,-16(fp)
   91224:	00bfff84 	movi	r2,-2
   91228:	1884703a 	and	r2,r3,r2
   9122c:	1001703a 	wrctl	status,r2
  
  return context;
   91230:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   91234:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   91238:	e0bffd17 	ldw	r2,-12(fp)
   9123c:	10800003 	ldbu	r2,0(r2)
   91240:	10803fcc 	andi	r2,r2,255
   91244:	10800160 	cmpeqi	r2,r2,5
   91248:	1000091e 	bne	r2,zero,91270 <OSFlagNameGet+0xe0>
   9124c:	e0bff817 	ldw	r2,-32(fp)
   91250:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91254:	e0bff917 	ldw	r2,-28(fp)
   91258:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   9125c:	e0bfff17 	ldw	r2,-4(fp)
   91260:	00c00044 	movi	r3,1
   91264:	10c00005 	stb	r3,0(r2)
        return (0);
   91268:	0005883a 	mov	r2,zero
   9126c:	00000d06 	br	912a4 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   91270:	e0bffd17 	ldw	r2,-12(fp)
   91274:	10800284 	addi	r2,r2,10
   91278:	100b883a 	mov	r5,r2
   9127c:	e13ffe17 	ldw	r4,-8(fp)
   91280:	00904180 	call	90418 <OS_StrCopy>
   91284:	e0bffb05 	stb	r2,-20(fp)
   91288:	e0bff817 	ldw	r2,-32(fp)
   9128c:	e0bffa15 	stw	r2,-24(fp)
   91290:	e0bffa17 	ldw	r2,-24(fp)
   91294:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   91298:	e0bfff17 	ldw	r2,-4(fp)
   9129c:	10000005 	stb	zero,0(r2)
    return (len);
   912a0:	e0bffb03 	ldbu	r2,-20(fp)
}
   912a4:	e037883a 	mov	sp,fp
   912a8:	dfc00117 	ldw	ra,4(sp)
   912ac:	df000017 	ldw	fp,0(sp)
   912b0:	dec00204 	addi	sp,sp,8
   912b4:	f800283a 	ret

000912b8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   912b8:	defff504 	addi	sp,sp,-44
   912bc:	dfc00a15 	stw	ra,40(sp)
   912c0:	df000915 	stw	fp,36(sp)
   912c4:	df000904 	addi	fp,sp,36
   912c8:	e13ffd15 	stw	r4,-12(fp)
   912cc:	e17ffe15 	stw	r5,-8(fp)
   912d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   912d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   912d8:	e0bfff17 	ldw	r2,-4(fp)
   912dc:	10004326 	beq	r2,zero,913ec <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   912e0:	e0bffd17 	ldw	r2,-12(fp)
   912e4:	1000041e 	bne	r2,zero,912f8 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   912e8:	e0bfff17 	ldw	r2,-4(fp)
   912ec:	00c01b84 	movi	r3,110
   912f0:	10c00005 	stb	r3,0(r2)
        return;
   912f4:	00003e06 	br	913f0 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   912f8:	e0bffe17 	ldw	r2,-8(fp)
   912fc:	1000041e 	bne	r2,zero,91310 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   91300:	e0bfff17 	ldw	r2,-4(fp)
   91304:	00c00304 	movi	r3,12
   91308:	10c00005 	stb	r3,0(r2)
        return;
   9130c:	00003806 	br	913f0 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   91310:	d0a73803 	ldbu	r2,-25376(gp)
   91314:	10803fcc 	andi	r2,r2,255
   91318:	10000426 	beq	r2,zero,9132c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   9131c:	e0bfff17 	ldw	r2,-4(fp)
   91320:	00c00484 	movi	r3,18
   91324:	10c00005 	stb	r3,0(r2)
        return;
   91328:	00003106 	br	913f0 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9132c:	0005303a 	rdctl	r2,status
   91330:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91334:	e0fffc17 	ldw	r3,-16(fp)
   91338:	00bfff84 	movi	r2,-2
   9133c:	1884703a 	and	r2,r3,r2
   91340:	1001703a 	wrctl	status,r2
  
  return context;
   91344:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   91348:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   9134c:	e0bffd17 	ldw	r2,-12(fp)
   91350:	10800003 	ldbu	r2,0(r2)
   91354:	10803fcc 	andi	r2,r2,255
   91358:	10800160 	cmpeqi	r2,r2,5
   9135c:	1000081e 	bne	r2,zero,91380 <OSFlagNameSet+0xc8>
   91360:	e0bff717 	ldw	r2,-36(fp)
   91364:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91368:	e0bff817 	ldw	r2,-32(fp)
   9136c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   91370:	e0bfff17 	ldw	r2,-4(fp)
   91374:	00c00044 	movi	r3,1
   91378:	10c00005 	stb	r3,0(r2)
        return;
   9137c:	00001c06 	br	913f0 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   91380:	e13ffe17 	ldw	r4,-8(fp)
   91384:	009048c0 	call	9048c <OS_StrLen>
   91388:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   9138c:	e0bffa03 	ldbu	r2,-24(fp)
   91390:	10800830 	cmpltui	r2,r2,32
   91394:	1000081e 	bne	r2,zero,913b8 <OSFlagNameSet+0x100>
   91398:	e0bff717 	ldw	r2,-36(fp)
   9139c:	e0bff915 	stw	r2,-28(fp)
   913a0:	e0bff917 	ldw	r2,-28(fp)
   913a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   913a8:	e0bfff17 	ldw	r2,-4(fp)
   913ac:	00c01cc4 	movi	r3,115
   913b0:	10c00005 	stb	r3,0(r2)
        return;
   913b4:	00000e06 	br	913f0 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   913b8:	e0bffd17 	ldw	r2,-12(fp)
   913bc:	10800284 	addi	r2,r2,10
   913c0:	e17ffe17 	ldw	r5,-8(fp)
   913c4:	1009883a 	mov	r4,r2
   913c8:	00904180 	call	90418 <OS_StrCopy>
   913cc:	e0bff717 	ldw	r2,-36(fp)
   913d0:	e0bffb15 	stw	r2,-20(fp)
   913d4:	e0bffb17 	ldw	r2,-20(fp)
   913d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   913dc:	e0bfff17 	ldw	r2,-4(fp)
   913e0:	10000005 	stb	zero,0(r2)
    return;
   913e4:	0001883a 	nop
   913e8:	00000106 	br	913f0 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   913ec:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   913f0:	e037883a 	mov	sp,fp
   913f4:	dfc00117 	ldw	ra,4(sp)
   913f8:	df000017 	ldw	fp,0(sp)
   913fc:	dec00204 	addi	sp,sp,8
   91400:	f800283a 	ret

00091404 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   91404:	deffe104 	addi	sp,sp,-124
   91408:	dfc01e15 	stw	ra,120(sp)
   9140c:	df001d15 	stw	fp,116(sp)
   91410:	df001d04 	addi	fp,sp,116
   91414:	e13ffc15 	stw	r4,-16(fp)
   91418:	2809883a 	mov	r4,r5
   9141c:	3007883a 	mov	r3,r6
   91420:	3805883a 	mov	r2,r7
   91424:	e13ffd0d 	sth	r4,-12(fp)
   91428:	e0fffe05 	stb	r3,-8(fp)
   9142c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   91430:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   91434:	e0800217 	ldw	r2,8(fp)
   91438:	1000021e 	bne	r2,zero,91444 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   9143c:	0005883a 	mov	r2,zero
   91440:	00015906 	br	919a8 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   91444:	e0bffc17 	ldw	r2,-16(fp)
   91448:	1000051e 	bne	r2,zero,91460 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   9144c:	e0800217 	ldw	r2,8(fp)
   91450:	00c01b84 	movi	r3,110
   91454:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91458:	0005883a 	mov	r2,zero
   9145c:	00015206 	br	919a8 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   91460:	d0a73803 	ldbu	r2,-25376(gp)
   91464:	10803fcc 	andi	r2,r2,255
   91468:	10000526 	beq	r2,zero,91480 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   9146c:	e0800217 	ldw	r2,8(fp)
   91470:	00c00084 	movi	r3,2
   91474:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91478:	0005883a 	mov	r2,zero
   9147c:	00014a06 	br	919a8 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   91480:	d0a72a03 	ldbu	r2,-25432(gp)
   91484:	10803fcc 	andi	r2,r2,255
   91488:	10000526 	beq	r2,zero,914a0 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   9148c:	e0800217 	ldw	r2,8(fp)
   91490:	00c00344 	movi	r3,13
   91494:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91498:	0005883a 	mov	r2,zero
   9149c:	00014206 	br	919a8 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   914a0:	e0bffc17 	ldw	r2,-16(fp)
   914a4:	10800003 	ldbu	r2,0(r2)
   914a8:	10803fcc 	andi	r2,r2,255
   914ac:	10800160 	cmpeqi	r2,r2,5
   914b0:	1000051e 	bne	r2,zero,914c8 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   914b4:	e0800217 	ldw	r2,8(fp)
   914b8:	00c00044 	movi	r3,1
   914bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   914c0:	0005883a 	mov	r2,zero
   914c4:	00013806 	br	919a8 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   914c8:	e0fffe03 	ldbu	r3,-8(fp)
   914cc:	00bfe004 	movi	r2,-128
   914d0:	1884703a 	and	r2,r3,r2
   914d4:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   914d8:	e0bfe603 	ldbu	r2,-104(fp)
   914dc:	10000626 	beq	r2,zero,914f8 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   914e0:	e0bffe03 	ldbu	r2,-8(fp)
   914e4:	10801fcc 	andi	r2,r2,127
   914e8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   914ec:	00800044 	movi	r2,1
   914f0:	e0bfe405 	stb	r2,-112(fp)
   914f4:	00000106 	br	914fc <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   914f8:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   914fc:	0005303a 	rdctl	r2,status
   91500:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91504:	e0fff617 	ldw	r3,-40(fp)
   91508:	00bfff84 	movi	r2,-2
   9150c:	1884703a 	and	r2,r3,r2
   91510:	1001703a 	wrctl	status,r2
  
  return context;
   91514:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   91518:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   9151c:	e0bffe03 	ldbu	r2,-8(fp)
   91520:	10c00060 	cmpeqi	r3,r2,1
   91524:	1800921e 	bne	r3,zero,91770 <OSFlagPend+0x36c>
   91528:	10c00088 	cmpgei	r3,r2,2
   9152c:	1800021e 	bne	r3,zero,91538 <OSFlagPend+0x134>
   91530:	10006126 	beq	r2,zero,916b8 <OSFlagPend+0x2b4>
   91534:	0000bb06 	br	91824 <OSFlagPend+0x420>
   91538:	10c000a0 	cmpeqi	r3,r2,2
   9153c:	1800031e 	bne	r3,zero,9154c <OSFlagPend+0x148>
   91540:	108000e0 	cmpeqi	r2,r2,3
   91544:	10002f1e 	bne	r2,zero,91604 <OSFlagPend+0x200>
   91548:	0000b606 	br	91824 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   9154c:	e0bffc17 	ldw	r2,-16(fp)
   91550:	10c0020b 	ldhu	r3,8(r2)
   91554:	e0bffd0b 	ldhu	r2,-12(fp)
   91558:	1884703a 	and	r2,r3,r2
   9155c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   91560:	e0ffe80b 	ldhu	r3,-96(fp)
   91564:	e0bffd0b 	ldhu	r2,-12(fp)
   91568:	1880171e 	bne	r3,r2,915c8 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   9156c:	e0bfe403 	ldbu	r2,-112(fp)
   91570:	10800058 	cmpnei	r2,r2,1
   91574:	1000091e 	bne	r2,zero,9159c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   91578:	e0bffc17 	ldw	r2,-16(fp)
   9157c:	1080020b 	ldhu	r2,8(r2)
   91580:	1007883a 	mov	r3,r2
   91584:	e0bfe80b 	ldhu	r2,-96(fp)
   91588:	0084303a 	nor	r2,zero,r2
   9158c:	1884703a 	and	r2,r3,r2
   91590:	1007883a 	mov	r3,r2
   91594:	e0bffc17 	ldw	r2,-16(fp)
   91598:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   9159c:	d0a73917 	ldw	r2,-25372(gp)
   915a0:	e0ffe80b 	ldhu	r3,-96(fp)
   915a4:	10c00b0d 	sth	r3,44(r2)
   915a8:	e0bfe517 	ldw	r2,-108(fp)
   915ac:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   915b0:	e0bfe717 	ldw	r2,-100(fp)
   915b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   915b8:	e0800217 	ldw	r2,8(fp)
   915bc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   915c0:	e0bfe80b 	ldhu	r2,-96(fp)
   915c4:	0000f806 	br	919a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   915c8:	e13ffd0b 	ldhu	r4,-12(fp)
   915cc:	e17ffe03 	ldbu	r5,-8(fp)
   915d0:	e0bfff0b 	ldhu	r2,-4(fp)
   915d4:	e0fff704 	addi	r3,fp,-36
   915d8:	d8800015 	stw	r2,0(sp)
   915dc:	280f883a 	mov	r7,r5
   915e0:	200d883a 	mov	r6,r4
   915e4:	180b883a 	mov	r5,r3
   915e8:	e13ffc17 	ldw	r4,-16(fp)
   915ec:	0091e740 	call	91e74 <OS_FlagBlock>
   915f0:	e0bfe517 	ldw	r2,-108(fp)
   915f4:	e0bfe915 	stw	r2,-92(fp)
   915f8:	e0bfe917 	ldw	r2,-92(fp)
   915fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   91600:	00009206 	br	9184c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   91604:	e0bffc17 	ldw	r2,-16(fp)
   91608:	10c0020b 	ldhu	r3,8(r2)
   9160c:	e0bffd0b 	ldhu	r2,-12(fp)
   91610:	1884703a 	and	r2,r3,r2
   91614:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   91618:	e0bfe80b 	ldhu	r2,-96(fp)
   9161c:	10001726 	beq	r2,zero,9167c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   91620:	e0bfe403 	ldbu	r2,-112(fp)
   91624:	10800058 	cmpnei	r2,r2,1
   91628:	1000091e 	bne	r2,zero,91650 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   9162c:	e0bffc17 	ldw	r2,-16(fp)
   91630:	1080020b 	ldhu	r2,8(r2)
   91634:	1007883a 	mov	r3,r2
   91638:	e0bfe80b 	ldhu	r2,-96(fp)
   9163c:	0084303a 	nor	r2,zero,r2
   91640:	1884703a 	and	r2,r3,r2
   91644:	1007883a 	mov	r3,r2
   91648:	e0bffc17 	ldw	r2,-16(fp)
   9164c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   91650:	d0a73917 	ldw	r2,-25372(gp)
   91654:	e0ffe80b 	ldhu	r3,-96(fp)
   91658:	10c00b0d 	sth	r3,44(r2)
   9165c:	e0bfe517 	ldw	r2,-108(fp)
   91660:	e0bfea15 	stw	r2,-88(fp)
   91664:	e0bfea17 	ldw	r2,-88(fp)
   91668:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   9166c:	e0800217 	ldw	r2,8(fp)
   91670:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   91674:	e0bfe80b 	ldhu	r2,-96(fp)
   91678:	0000cb06 	br	919a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   9167c:	e13ffd0b 	ldhu	r4,-12(fp)
   91680:	e17ffe03 	ldbu	r5,-8(fp)
   91684:	e0bfff0b 	ldhu	r2,-4(fp)
   91688:	e0fff704 	addi	r3,fp,-36
   9168c:	d8800015 	stw	r2,0(sp)
   91690:	280f883a 	mov	r7,r5
   91694:	200d883a 	mov	r6,r4
   91698:	180b883a 	mov	r5,r3
   9169c:	e13ffc17 	ldw	r4,-16(fp)
   916a0:	0091e740 	call	91e74 <OS_FlagBlock>
   916a4:	e0bfe517 	ldw	r2,-108(fp)
   916a8:	e0bfeb15 	stw	r2,-84(fp)
   916ac:	e0bfeb17 	ldw	r2,-84(fp)
   916b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   916b4:	00006506 	br	9184c <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   916b8:	e0bffc17 	ldw	r2,-16(fp)
   916bc:	1080020b 	ldhu	r2,8(r2)
   916c0:	0084303a 	nor	r2,zero,r2
   916c4:	1007883a 	mov	r3,r2
   916c8:	e0bffd0b 	ldhu	r2,-12(fp)
   916cc:	1884703a 	and	r2,r3,r2
   916d0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   916d4:	e0ffe80b 	ldhu	r3,-96(fp)
   916d8:	e0bffd0b 	ldhu	r2,-12(fp)
   916dc:	1880151e 	bne	r3,r2,91734 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   916e0:	e0bfe403 	ldbu	r2,-112(fp)
   916e4:	10800058 	cmpnei	r2,r2,1
   916e8:	1000071e 	bne	r2,zero,91708 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   916ec:	e0bffc17 	ldw	r2,-16(fp)
   916f0:	10c0020b 	ldhu	r3,8(r2)
   916f4:	e0bfe80b 	ldhu	r2,-96(fp)
   916f8:	1884b03a 	or	r2,r3,r2
   916fc:	1007883a 	mov	r3,r2
   91700:	e0bffc17 	ldw	r2,-16(fp)
   91704:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   91708:	d0a73917 	ldw	r2,-25372(gp)
   9170c:	e0ffe80b 	ldhu	r3,-96(fp)
   91710:	10c00b0d 	sth	r3,44(r2)
   91714:	e0bfe517 	ldw	r2,-108(fp)
   91718:	e0bfec15 	stw	r2,-80(fp)
   9171c:	e0bfec17 	ldw	r2,-80(fp)
   91720:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   91724:	e0800217 	ldw	r2,8(fp)
   91728:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   9172c:	e0bfe80b 	ldhu	r2,-96(fp)
   91730:	00009d06 	br	919a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   91734:	e13ffd0b 	ldhu	r4,-12(fp)
   91738:	e17ffe03 	ldbu	r5,-8(fp)
   9173c:	e0bfff0b 	ldhu	r2,-4(fp)
   91740:	e0fff704 	addi	r3,fp,-36
   91744:	d8800015 	stw	r2,0(sp)
   91748:	280f883a 	mov	r7,r5
   9174c:	200d883a 	mov	r6,r4
   91750:	180b883a 	mov	r5,r3
   91754:	e13ffc17 	ldw	r4,-16(fp)
   91758:	0091e740 	call	91e74 <OS_FlagBlock>
   9175c:	e0bfe517 	ldw	r2,-108(fp)
   91760:	e0bfed15 	stw	r2,-76(fp)
   91764:	e0bfed17 	ldw	r2,-76(fp)
   91768:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   9176c:	00003706 	br	9184c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   91770:	e0bffc17 	ldw	r2,-16(fp)
   91774:	1080020b 	ldhu	r2,8(r2)
   91778:	0084303a 	nor	r2,zero,r2
   9177c:	1007883a 	mov	r3,r2
   91780:	e0bffd0b 	ldhu	r2,-12(fp)
   91784:	1884703a 	and	r2,r3,r2
   91788:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   9178c:	e0bfe80b 	ldhu	r2,-96(fp)
   91790:	10001526 	beq	r2,zero,917e8 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   91794:	e0bfe403 	ldbu	r2,-112(fp)
   91798:	10800058 	cmpnei	r2,r2,1
   9179c:	1000071e 	bne	r2,zero,917bc <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   917a0:	e0bffc17 	ldw	r2,-16(fp)
   917a4:	10c0020b 	ldhu	r3,8(r2)
   917a8:	e0bfe80b 	ldhu	r2,-96(fp)
   917ac:	1884b03a 	or	r2,r3,r2
   917b0:	1007883a 	mov	r3,r2
   917b4:	e0bffc17 	ldw	r2,-16(fp)
   917b8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   917bc:	d0a73917 	ldw	r2,-25372(gp)
   917c0:	e0ffe80b 	ldhu	r3,-96(fp)
   917c4:	10c00b0d 	sth	r3,44(r2)
   917c8:	e0bfe517 	ldw	r2,-108(fp)
   917cc:	e0bfee15 	stw	r2,-72(fp)
   917d0:	e0bfee17 	ldw	r2,-72(fp)
   917d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   917d8:	e0800217 	ldw	r2,8(fp)
   917dc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   917e0:	e0bfe80b 	ldhu	r2,-96(fp)
   917e4:	00007006 	br	919a8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   917e8:	e13ffd0b 	ldhu	r4,-12(fp)
   917ec:	e17ffe03 	ldbu	r5,-8(fp)
   917f0:	e0bfff0b 	ldhu	r2,-4(fp)
   917f4:	e0fff704 	addi	r3,fp,-36
   917f8:	d8800015 	stw	r2,0(sp)
   917fc:	280f883a 	mov	r7,r5
   91800:	200d883a 	mov	r6,r4
   91804:	180b883a 	mov	r5,r3
   91808:	e13ffc17 	ldw	r4,-16(fp)
   9180c:	0091e740 	call	91e74 <OS_FlagBlock>
   91810:	e0bfe517 	ldw	r2,-108(fp)
   91814:	e0bfef15 	stw	r2,-68(fp)
   91818:	e0bfef17 	ldw	r2,-68(fp)
   9181c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   91820:	00000a06 	br	9184c <OSFlagPend+0x448>
   91824:	e0bfe517 	ldw	r2,-108(fp)
   91828:	e0bff015 	stw	r2,-64(fp)
   9182c:	e0bff017 	ldw	r2,-64(fp)
   91830:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   91834:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   91838:	e0800217 	ldw	r2,8(fp)
   9183c:	00c01bc4 	movi	r3,111
   91840:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   91844:	e0bfe80b 	ldhu	r2,-96(fp)
   91848:	00005706 	br	919a8 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   9184c:	00902d40 	call	902d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91850:	0005303a 	rdctl	r2,status
   91854:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91858:	e0fff117 	ldw	r3,-60(fp)
   9185c:	00bfff84 	movi	r2,-2
   91860:	1884703a 	and	r2,r3,r2
   91864:	1001703a 	wrctl	status,r2
  
  return context;
   91868:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   9186c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   91870:	d0a73917 	ldw	r2,-25372(gp)
   91874:	10800c43 	ldbu	r2,49(r2)
   91878:	10803fcc 	andi	r2,r2,255
   9187c:	10001c26 	beq	r2,zero,918f0 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   91880:	d0a73917 	ldw	r2,-25372(gp)
   91884:	10800c43 	ldbu	r2,49(r2)
   91888:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   9188c:	d0a73917 	ldw	r2,-25372(gp)
   91890:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   91894:	e0bff704 	addi	r2,fp,-36
   91898:	1009883a 	mov	r4,r2
   9189c:	00921a80 	call	921a8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   918a0:	d0a73917 	ldw	r2,-25372(gp)
   918a4:	10000c05 	stb	zero,48(r2)
   918a8:	e0bfe517 	ldw	r2,-108(fp)
   918ac:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   918b0:	e0bff217 	ldw	r2,-56(fp)
   918b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   918b8:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   918bc:	e0bff303 	ldbu	r2,-52(fp)
   918c0:	108000a0 	cmpeqi	r2,r2,2
   918c4:	10000426 	beq	r2,zero,918d8 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   918c8:	e0800217 	ldw	r2,8(fp)
   918cc:	00c00384 	movi	r3,14
   918d0:	10c00005 	stb	r3,0(r2)
                 break;
   918d4:	00000406 	br	918e8 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   918d8:	e0800217 	ldw	r2,8(fp)
   918dc:	00c00284 	movi	r3,10
   918e0:	10c00005 	stb	r3,0(r2)
                 break;
   918e4:	0001883a 	nop
        }
        return (flags_rdy);
   918e8:	e0bfe80b 	ldhu	r2,-96(fp)
   918ec:	00002e06 	br	919a8 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   918f0:	d0a73917 	ldw	r2,-25372(gp)
   918f4:	10800b0b 	ldhu	r2,44(r2)
   918f8:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   918fc:	e0bfe403 	ldbu	r2,-112(fp)
   91900:	10800058 	cmpnei	r2,r2,1
   91904:	1000211e 	bne	r2,zero,9198c <OSFlagPend+0x588>
        switch (wait_type) {
   91908:	e0bffe03 	ldbu	r2,-8(fp)
   9190c:	10001616 	blt	r2,zero,91968 <OSFlagPend+0x564>
   91910:	10c00090 	cmplti	r3,r2,2
   91914:	18000c1e 	bne	r3,zero,91948 <OSFlagPend+0x544>
   91918:	10800108 	cmpgei	r2,r2,4
   9191c:	1000121e 	bne	r2,zero,91968 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   91920:	e0bffc17 	ldw	r2,-16(fp)
   91924:	1080020b 	ldhu	r2,8(r2)
   91928:	1007883a 	mov	r3,r2
   9192c:	e0bfe80b 	ldhu	r2,-96(fp)
   91930:	0084303a 	nor	r2,zero,r2
   91934:	1884703a 	and	r2,r3,r2
   91938:	1007883a 	mov	r3,r2
   9193c:	e0bffc17 	ldw	r2,-16(fp)
   91940:	10c0020d 	sth	r3,8(r2)
                 break;
   91944:	00001106 	br	9198c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   91948:	e0bffc17 	ldw	r2,-16(fp)
   9194c:	10c0020b 	ldhu	r3,8(r2)
   91950:	e0bfe80b 	ldhu	r2,-96(fp)
   91954:	1884b03a 	or	r2,r3,r2
   91958:	1007883a 	mov	r3,r2
   9195c:	e0bffc17 	ldw	r2,-16(fp)
   91960:	10c0020d 	sth	r3,8(r2)
                 break;
   91964:	00000906 	br	9198c <OSFlagPend+0x588>
   91968:	e0bfe517 	ldw	r2,-108(fp)
   9196c:	e0bff415 	stw	r2,-48(fp)
   91970:	e0bff417 	ldw	r2,-48(fp)
   91974:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   91978:	e0800217 	ldw	r2,8(fp)
   9197c:	00c01bc4 	movi	r3,111
   91980:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   91984:	0005883a 	mov	r2,zero
   91988:	00000706 	br	919a8 <OSFlagPend+0x5a4>
   9198c:	e0bfe517 	ldw	r2,-108(fp)
   91990:	e0bff515 	stw	r2,-44(fp)
   91994:	e0bff517 	ldw	r2,-44(fp)
   91998:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   9199c:	e0800217 	ldw	r2,8(fp)
   919a0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   919a4:	e0bfe80b 	ldhu	r2,-96(fp)
}
   919a8:	e037883a 	mov	sp,fp
   919ac:	dfc00117 	ldw	ra,4(sp)
   919b0:	df000017 	ldw	fp,0(sp)
   919b4:	dec00204 	addi	sp,sp,8
   919b8:	f800283a 	ret

000919bc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   919bc:	defffb04 	addi	sp,sp,-20
   919c0:	df000415 	stw	fp,16(sp)
   919c4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   919c8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   919cc:	0005303a 	rdctl	r2,status
   919d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   919d4:	e0fffe17 	ldw	r3,-8(fp)
   919d8:	00bfff84 	movi	r2,-2
   919dc:	1884703a 	and	r2,r3,r2
   919e0:	1001703a 	wrctl	status,r2
  
  return context;
   919e4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   919e8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   919ec:	d0a73917 	ldw	r2,-25372(gp)
   919f0:	10800b0b 	ldhu	r2,44(r2)
   919f4:	e0bffd0d 	sth	r2,-12(fp)
   919f8:	e0bffc17 	ldw	r2,-16(fp)
   919fc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91a00:	e0bfff17 	ldw	r2,-4(fp)
   91a04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   91a08:	e0bffd0b 	ldhu	r2,-12(fp)
}
   91a0c:	e037883a 	mov	sp,fp
   91a10:	df000017 	ldw	fp,0(sp)
   91a14:	dec00104 	addi	sp,sp,4
   91a18:	f800283a 	ret

00091a1c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   91a1c:	deffef04 	addi	sp,sp,-68
   91a20:	dfc01015 	stw	ra,64(sp)
   91a24:	df000f15 	stw	fp,60(sp)
   91a28:	df000f04 	addi	fp,sp,60
   91a2c:	e13ffc15 	stw	r4,-16(fp)
   91a30:	2807883a 	mov	r3,r5
   91a34:	3005883a 	mov	r2,r6
   91a38:	e1ffff15 	stw	r7,-4(fp)
   91a3c:	e0fffd0d 	sth	r3,-12(fp)
   91a40:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   91a44:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   91a48:	e0bfff17 	ldw	r2,-4(fp)
   91a4c:	1000021e 	bne	r2,zero,91a58 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   91a50:	0005883a 	mov	r2,zero
   91a54:	0000d106 	br	91d9c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   91a58:	e0bffc17 	ldw	r2,-16(fp)
   91a5c:	1000051e 	bne	r2,zero,91a74 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   91a60:	e0bfff17 	ldw	r2,-4(fp)
   91a64:	00c01b84 	movi	r3,110
   91a68:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91a6c:	0005883a 	mov	r2,zero
   91a70:	0000ca06 	br	91d9c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   91a74:	e0bffc17 	ldw	r2,-16(fp)
   91a78:	10800003 	ldbu	r2,0(r2)
   91a7c:	10803fcc 	andi	r2,r2,255
   91a80:	10800160 	cmpeqi	r2,r2,5
   91a84:	1000051e 	bne	r2,zero,91a9c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   91a88:	e0bfff17 	ldw	r2,-4(fp)
   91a8c:	00c00044 	movi	r3,1
   91a90:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91a94:	0005883a 	mov	r2,zero
   91a98:	0000c006 	br	91d9c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91a9c:	0005303a 	rdctl	r2,status
   91aa0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91aa4:	e0fffb17 	ldw	r3,-20(fp)
   91aa8:	00bfff84 	movi	r2,-2
   91aac:	1884703a 	and	r2,r3,r2
   91ab0:	1001703a 	wrctl	status,r2
  
  return context;
   91ab4:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   91ab8:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   91abc:	e0bffe03 	ldbu	r2,-8(fp)
   91ac0:	10000326 	beq	r2,zero,91ad0 <OSFlagPost+0xb4>
   91ac4:	10800060 	cmpeqi	r2,r2,1
   91ac8:	10000b1e 	bne	r2,zero,91af8 <OSFlagPost+0xdc>
   91acc:	00001206 	br	91b18 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   91ad0:	e0bffc17 	ldw	r2,-16(fp)
   91ad4:	1080020b 	ldhu	r2,8(r2)
   91ad8:	1007883a 	mov	r3,r2
   91adc:	e0bffd0b 	ldhu	r2,-12(fp)
   91ae0:	0084303a 	nor	r2,zero,r2
   91ae4:	1884703a 	and	r2,r3,r2
   91ae8:	1007883a 	mov	r3,r2
   91aec:	e0bffc17 	ldw	r2,-16(fp)
   91af0:	10c0020d 	sth	r3,8(r2)
             break;
   91af4:	00001106 	br	91b3c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   91af8:	e0bffc17 	ldw	r2,-16(fp)
   91afc:	10c0020b 	ldhu	r3,8(r2)
   91b00:	e0bffd0b 	ldhu	r2,-12(fp)
   91b04:	1884b03a 	or	r2,r3,r2
   91b08:	1007883a 	mov	r3,r2
   91b0c:	e0bffc17 	ldw	r2,-16(fp)
   91b10:	10c0020d 	sth	r3,8(r2)
             break;
   91b14:	00000906 	br	91b3c <OSFlagPost+0x120>
   91b18:	e0bff317 	ldw	r2,-52(fp)
   91b1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91b20:	e0bff417 	ldw	r2,-48(fp)
   91b24:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   91b28:	e0bfff17 	ldw	r2,-4(fp)
   91b2c:	00c01c44 	movi	r3,113
   91b30:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   91b34:	0005883a 	mov	r2,zero
   91b38:	00009806 	br	91d9c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   91b3c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   91b40:	e0bffc17 	ldw	r2,-16(fp)
   91b44:	10800117 	ldw	r2,4(r2)
   91b48:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   91b4c:	00007706 	br	91d2c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   91b50:	e0bff117 	ldw	r2,-60(fp)
   91b54:	10800483 	ldbu	r2,18(r2)
   91b58:	10803fcc 	andi	r2,r2,255
   91b5c:	10c00060 	cmpeqi	r3,r2,1
   91b60:	18004a1e 	bne	r3,zero,91c8c <OSFlagPost+0x270>
   91b64:	10c00088 	cmpgei	r3,r2,2
   91b68:	1800021e 	bne	r3,zero,91b74 <OSFlagPost+0x158>
   91b6c:	10002f26 	beq	r2,zero,91c2c <OSFlagPost+0x210>
   91b70:	00005b06 	br	91ce0 <OSFlagPost+0x2c4>
   91b74:	10c000a0 	cmpeqi	r3,r2,2
   91b78:	1800031e 	bne	r3,zero,91b88 <OSFlagPost+0x16c>
   91b7c:	108000e0 	cmpeqi	r2,r2,3
   91b80:	1000171e 	bne	r2,zero,91be0 <OSFlagPost+0x1c4>
   91b84:	00005606 	br	91ce0 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   91b88:	e0bffc17 	ldw	r2,-16(fp)
   91b8c:	10c0020b 	ldhu	r3,8(r2)
   91b90:	e0bff117 	ldw	r2,-60(fp)
   91b94:	1080040b 	ldhu	r2,16(r2)
   91b98:	1884703a 	and	r2,r3,r2
   91b9c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   91ba0:	e0bff117 	ldw	r2,-60(fp)
   91ba4:	1080040b 	ldhu	r2,16(r2)
   91ba8:	10ffffcc 	andi	r3,r2,65535
   91bac:	e0bff60b 	ldhu	r2,-40(fp)
   91bb0:	1880541e 	bne	r3,r2,91d04 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   91bb4:	e0bff60b 	ldhu	r2,-40(fp)
   91bb8:	100b883a 	mov	r5,r2
   91bbc:	e13ff117 	ldw	r4,-60(fp)
   91bc0:	00920b40 	call	920b4 <OS_FlagTaskRdy>
   91bc4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   91bc8:	e0bff683 	ldbu	r2,-38(fp)
   91bcc:	10800058 	cmpnei	r2,r2,1
   91bd0:	10004c1e 	bne	r2,zero,91d04 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   91bd4:	00800044 	movi	r2,1
   91bd8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   91bdc:	00004906 	br	91d04 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   91be0:	e0bffc17 	ldw	r2,-16(fp)
   91be4:	10c0020b 	ldhu	r3,8(r2)
   91be8:	e0bff117 	ldw	r2,-60(fp)
   91bec:	1080040b 	ldhu	r2,16(r2)
   91bf0:	1884703a 	and	r2,r3,r2
   91bf4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   91bf8:	e0bff60b 	ldhu	r2,-40(fp)
   91bfc:	10004326 	beq	r2,zero,91d0c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   91c00:	e0bff60b 	ldhu	r2,-40(fp)
   91c04:	100b883a 	mov	r5,r2
   91c08:	e13ff117 	ldw	r4,-60(fp)
   91c0c:	00920b40 	call	920b4 <OS_FlagTaskRdy>
   91c10:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   91c14:	e0bff683 	ldbu	r2,-38(fp)
   91c18:	10800058 	cmpnei	r2,r2,1
   91c1c:	10003b1e 	bne	r2,zero,91d0c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   91c20:	00800044 	movi	r2,1
   91c24:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   91c28:	00003806 	br	91d0c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   91c2c:	e0bffc17 	ldw	r2,-16(fp)
   91c30:	1080020b 	ldhu	r2,8(r2)
   91c34:	0084303a 	nor	r2,zero,r2
   91c38:	1007883a 	mov	r3,r2
   91c3c:	e0bff117 	ldw	r2,-60(fp)
   91c40:	1080040b 	ldhu	r2,16(r2)
   91c44:	1884703a 	and	r2,r3,r2
   91c48:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   91c4c:	e0bff117 	ldw	r2,-60(fp)
   91c50:	1080040b 	ldhu	r2,16(r2)
   91c54:	10ffffcc 	andi	r3,r2,65535
   91c58:	e0bff60b 	ldhu	r2,-40(fp)
   91c5c:	18802d1e 	bne	r3,r2,91d14 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   91c60:	e0bff60b 	ldhu	r2,-40(fp)
   91c64:	100b883a 	mov	r5,r2
   91c68:	e13ff117 	ldw	r4,-60(fp)
   91c6c:	00920b40 	call	920b4 <OS_FlagTaskRdy>
   91c70:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   91c74:	e0bff683 	ldbu	r2,-38(fp)
   91c78:	10800058 	cmpnei	r2,r2,1
   91c7c:	1000251e 	bne	r2,zero,91d14 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   91c80:	00800044 	movi	r2,1
   91c84:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   91c88:	00002206 	br	91d14 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   91c8c:	e0bffc17 	ldw	r2,-16(fp)
   91c90:	1080020b 	ldhu	r2,8(r2)
   91c94:	0084303a 	nor	r2,zero,r2
   91c98:	1007883a 	mov	r3,r2
   91c9c:	e0bff117 	ldw	r2,-60(fp)
   91ca0:	1080040b 	ldhu	r2,16(r2)
   91ca4:	1884703a 	and	r2,r3,r2
   91ca8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   91cac:	e0bff60b 	ldhu	r2,-40(fp)
   91cb0:	10001a26 	beq	r2,zero,91d1c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   91cb4:	e0bff60b 	ldhu	r2,-40(fp)
   91cb8:	100b883a 	mov	r5,r2
   91cbc:	e13ff117 	ldw	r4,-60(fp)
   91cc0:	00920b40 	call	920b4 <OS_FlagTaskRdy>
   91cc4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   91cc8:	e0bff683 	ldbu	r2,-38(fp)
   91ccc:	10800058 	cmpnei	r2,r2,1
   91cd0:	1000121e 	bne	r2,zero,91d1c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   91cd4:	00800044 	movi	r2,1
   91cd8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   91cdc:	00000f06 	br	91d1c <OSFlagPost+0x300>
   91ce0:	e0bff317 	ldw	r2,-52(fp)
   91ce4:	e0bff515 	stw	r2,-44(fp)
   91ce8:	e0bff517 	ldw	r2,-44(fp)
   91cec:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   91cf0:	e0bfff17 	ldw	r2,-4(fp)
   91cf4:	00c01bc4 	movi	r3,111
   91cf8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   91cfc:	0005883a 	mov	r2,zero
   91d00:	00002606 	br	91d9c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   91d04:	0001883a 	nop
   91d08:	00000506 	br	91d20 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   91d0c:	0001883a 	nop
   91d10:	00000306 	br	91d20 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   91d14:	0001883a 	nop
   91d18:	00000106 	br	91d20 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   91d1c:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   91d20:	e0bff117 	ldw	r2,-60(fp)
   91d24:	10800017 	ldw	r2,0(r2)
   91d28:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   91d2c:	e0bff117 	ldw	r2,-60(fp)
   91d30:	103f871e 	bne	r2,zero,91b50 <__alt_data_end+0xfffd3350>
   91d34:	e0bff317 	ldw	r2,-52(fp)
   91d38:	e0bff715 	stw	r2,-36(fp)
   91d3c:	e0bff717 	ldw	r2,-36(fp)
   91d40:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   91d44:	e0bff203 	ldbu	r2,-56(fp)
   91d48:	10800058 	cmpnei	r2,r2,1
   91d4c:	1000011e 	bne	r2,zero,91d54 <OSFlagPost+0x338>
        OS_Sched();
   91d50:	00902d40 	call	902d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91d54:	0005303a 	rdctl	r2,status
   91d58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91d5c:	e0fffa17 	ldw	r3,-24(fp)
   91d60:	00bfff84 	movi	r2,-2
   91d64:	1884703a 	and	r2,r3,r2
   91d68:	1001703a 	wrctl	status,r2
  
  return context;
   91d6c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   91d70:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   91d74:	e0bffc17 	ldw	r2,-16(fp)
   91d78:	1080020b 	ldhu	r2,8(r2)
   91d7c:	e0bff90d 	sth	r2,-28(fp)
   91d80:	e0bff317 	ldw	r2,-52(fp)
   91d84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91d88:	e0bff817 	ldw	r2,-32(fp)
   91d8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   91d90:	e0bfff17 	ldw	r2,-4(fp)
   91d94:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   91d98:	e0bff90b 	ldhu	r2,-28(fp)
}
   91d9c:	e037883a 	mov	sp,fp
   91da0:	dfc00117 	ldw	ra,4(sp)
   91da4:	df000017 	ldw	fp,0(sp)
   91da8:	dec00204 	addi	sp,sp,8
   91dac:	f800283a 	ret

00091db0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   91db0:	defff904 	addi	sp,sp,-28
   91db4:	df000615 	stw	fp,24(sp)
   91db8:	df000604 	addi	fp,sp,24
   91dbc:	e13ffe15 	stw	r4,-8(fp)
   91dc0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   91dc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   91dc8:	e0bfff17 	ldw	r2,-4(fp)
   91dcc:	1000021e 	bne	r2,zero,91dd8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   91dd0:	0005883a 	mov	r2,zero
   91dd4:	00002306 	br	91e64 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   91dd8:	e0bffe17 	ldw	r2,-8(fp)
   91ddc:	1000051e 	bne	r2,zero,91df4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   91de0:	e0bfff17 	ldw	r2,-4(fp)
   91de4:	00c01b84 	movi	r3,110
   91de8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91dec:	0005883a 	mov	r2,zero
   91df0:	00001c06 	br	91e64 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   91df4:	e0bffe17 	ldw	r2,-8(fp)
   91df8:	10800003 	ldbu	r2,0(r2)
   91dfc:	10803fcc 	andi	r2,r2,255
   91e00:	10800160 	cmpeqi	r2,r2,5
   91e04:	1000051e 	bne	r2,zero,91e1c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   91e08:	e0bfff17 	ldw	r2,-4(fp)
   91e0c:	00c00044 	movi	r3,1
   91e10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   91e14:	0005883a 	mov	r2,zero
   91e18:	00001206 	br	91e64 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91e1c:	0005303a 	rdctl	r2,status
   91e20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91e24:	e0fffc17 	ldw	r3,-16(fp)
   91e28:	00bfff84 	movi	r2,-2
   91e2c:	1884703a 	and	r2,r3,r2
   91e30:	1001703a 	wrctl	status,r2
  
  return context;
   91e34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   91e38:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   91e3c:	e0bffe17 	ldw	r2,-8(fp)
   91e40:	1080020b 	ldhu	r2,8(r2)
   91e44:	e0bffb0d 	sth	r2,-20(fp)
   91e48:	e0bffa17 	ldw	r2,-24(fp)
   91e4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91e50:	e0bffd17 	ldw	r2,-12(fp)
   91e54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   91e58:	e0bfff17 	ldw	r2,-4(fp)
   91e5c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   91e60:	e0bffb0b 	ldhu	r2,-20(fp)
}
   91e64:	e037883a 	mov	sp,fp
   91e68:	df000017 	ldw	fp,0(sp)
   91e6c:	dec00104 	addi	sp,sp,4
   91e70:	f800283a 	ret

00091e74 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   91e74:	defff804 	addi	sp,sp,-32
   91e78:	df000715 	stw	fp,28(sp)
   91e7c:	df000704 	addi	fp,sp,28
   91e80:	e13ffb15 	stw	r4,-20(fp)
   91e84:	e17ffc15 	stw	r5,-16(fp)
   91e88:	3009883a 	mov	r4,r6
   91e8c:	3807883a 	mov	r3,r7
   91e90:	e0800117 	ldw	r2,4(fp)
   91e94:	e13ffd0d 	sth	r4,-12(fp)
   91e98:	e0fffe05 	stb	r3,-8(fp)
   91e9c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   91ea0:	d0a73917 	ldw	r2,-25372(gp)
   91ea4:	d0e73917 	ldw	r3,-25372(gp)
   91ea8:	18c00c03 	ldbu	r3,48(r3)
   91eac:	18c00814 	ori	r3,r3,32
   91eb0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   91eb4:	d0a73917 	ldw	r2,-25372(gp)
   91eb8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   91ebc:	d0a73917 	ldw	r2,-25372(gp)
   91ec0:	e0ffff0b 	ldhu	r3,-4(fp)
   91ec4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   91ec8:	d0a73917 	ldw	r2,-25372(gp)
   91ecc:	e0fffc17 	ldw	r3,-16(fp)
   91ed0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   91ed4:	e0bffc17 	ldw	r2,-16(fp)
   91ed8:	e0fffd0b 	ldhu	r3,-12(fp)
   91edc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   91ee0:	e0bffc17 	ldw	r2,-16(fp)
   91ee4:	e0fffe03 	ldbu	r3,-8(fp)
   91ee8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   91eec:	d0e73917 	ldw	r3,-25372(gp)
   91ef0:	e0bffc17 	ldw	r2,-16(fp)
   91ef4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   91ef8:	e0bffb17 	ldw	r2,-20(fp)
   91efc:	10c00117 	ldw	r3,4(r2)
   91f00:	e0bffc17 	ldw	r2,-16(fp)
   91f04:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   91f08:	e0bffc17 	ldw	r2,-16(fp)
   91f0c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   91f10:	e0bffc17 	ldw	r2,-16(fp)
   91f14:	e0fffb17 	ldw	r3,-20(fp)
   91f18:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   91f1c:	e0bffb17 	ldw	r2,-20(fp)
   91f20:	10800117 	ldw	r2,4(r2)
   91f24:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   91f28:	e0bff917 	ldw	r2,-28(fp)
   91f2c:	10000326 	beq	r2,zero,91f3c <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   91f30:	e0bff917 	ldw	r2,-28(fp)
   91f34:	e0fffc17 	ldw	r3,-16(fp)
   91f38:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   91f3c:	e0bffb17 	ldw	r2,-20(fp)
   91f40:	e0fffc17 	ldw	r3,-16(fp)
   91f44:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   91f48:	d0a73917 	ldw	r2,-25372(gp)
   91f4c:	10800d03 	ldbu	r2,52(r2)
   91f50:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   91f54:	e0fffa03 	ldbu	r3,-24(fp)
   91f58:	e13ffa03 	ldbu	r4,-24(fp)
   91f5c:	d0a73644 	addi	r2,gp,-25383
   91f60:	2085883a 	add	r2,r4,r2
   91f64:	10800003 	ldbu	r2,0(r2)
   91f68:	1009883a 	mov	r4,r2
   91f6c:	d0a73917 	ldw	r2,-25372(gp)
   91f70:	10800d43 	ldbu	r2,53(r2)
   91f74:	0084303a 	nor	r2,zero,r2
   91f78:	2084703a 	and	r2,r4,r2
   91f7c:	1009883a 	mov	r4,r2
   91f80:	d0a73644 	addi	r2,gp,-25383
   91f84:	1885883a 	add	r2,r3,r2
   91f88:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   91f8c:	e0fffa03 	ldbu	r3,-24(fp)
   91f90:	d0a73644 	addi	r2,gp,-25383
   91f94:	1885883a 	add	r2,r3,r2
   91f98:	10800003 	ldbu	r2,0(r2)
   91f9c:	10803fcc 	andi	r2,r2,255
   91fa0:	1000071e 	bne	r2,zero,91fc0 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   91fa4:	d0a73917 	ldw	r2,-25372(gp)
   91fa8:	10800d83 	ldbu	r2,54(r2)
   91fac:	0084303a 	nor	r2,zero,r2
   91fb0:	1007883a 	mov	r3,r2
   91fb4:	d0a73603 	ldbu	r2,-25384(gp)
   91fb8:	1884703a 	and	r2,r3,r2
   91fbc:	d0a73605 	stb	r2,-25384(gp)
    }
}
   91fc0:	0001883a 	nop
   91fc4:	e037883a 	mov	sp,fp
   91fc8:	df000017 	ldw	fp,0(sp)
   91fcc:	dec00104 	addi	sp,sp,4
   91fd0:	f800283a 	ret

00091fd4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   91fd4:	defffb04 	addi	sp,sp,-20
   91fd8:	dfc00415 	stw	ra,16(sp)
   91fdc:	df000315 	stw	fp,12(sp)
   91fe0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   91fe4:	0140dc04 	movi	r5,880
   91fe8:	010002b4 	movhi	r4,10
   91fec:	21300504 	addi	r4,r4,-16364
   91ff0:	00902180 	call	90218 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   91ff4:	008002b4 	movhi	r2,10
   91ff8:	10b00504 	addi	r2,r2,-16364
   91ffc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   92000:	008002b4 	movhi	r2,10
   92004:	10b01004 	addi	r2,r2,-16320
   92008:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   9200c:	e03ffd0d 	sth	zero,-12(fp)
   92010:	00001306 	br	92060 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   92014:	e0bffe17 	ldw	r2,-8(fp)
   92018:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   9201c:	e0bffe17 	ldw	r2,-8(fp)
   92020:	e0ffff17 	ldw	r3,-4(fp)
   92024:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   92028:	e0bffe17 	ldw	r2,-8(fp)
   9202c:	00c00fc4 	movi	r3,63
   92030:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   92034:	e0bffe17 	ldw	r2,-8(fp)
   92038:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   9203c:	e0bffe17 	ldw	r2,-8(fp)
   92040:	10800b04 	addi	r2,r2,44
   92044:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   92048:	e0bfff17 	ldw	r2,-4(fp)
   9204c:	10800b04 	addi	r2,r2,44
   92050:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   92054:	e0bffd0b 	ldhu	r2,-12(fp)
   92058:	10800044 	addi	r2,r2,1
   9205c:	e0bffd0d 	sth	r2,-12(fp)
   92060:	e0bffd0b 	ldhu	r2,-12(fp)
   92064:	108004f0 	cmpltui	r2,r2,19
   92068:	103fea1e 	bne	r2,zero,92014 <__alt_data_end+0xfffd3814>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   9206c:	e0bffe17 	ldw	r2,-8(fp)
   92070:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   92074:	e0bffe17 	ldw	r2,-8(fp)
   92078:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   9207c:	e0bffe17 	ldw	r2,-8(fp)
   92080:	00c00fc4 	movi	r3,63
   92084:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   92088:	e0bffe17 	ldw	r2,-8(fp)
   9208c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   92090:	008002b4 	movhi	r2,10
   92094:	10b00504 	addi	r2,r2,-16364
   92098:	d0a73b15 	stw	r2,-25364(gp)
#endif
}
   9209c:	0001883a 	nop
   920a0:	e037883a 	mov	sp,fp
   920a4:	dfc00117 	ldw	ra,4(sp)
   920a8:	df000017 	ldw	fp,0(sp)
   920ac:	dec00204 	addi	sp,sp,8
   920b0:	f800283a 	ret

000920b4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   920b4:	defffa04 	addi	sp,sp,-24
   920b8:	dfc00515 	stw	ra,20(sp)
   920bc:	df000415 	stw	fp,16(sp)
   920c0:	df000404 	addi	fp,sp,16
   920c4:	e13ffe15 	stw	r4,-8(fp)
   920c8:	2805883a 	mov	r2,r5
   920cc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   920d0:	e0bffe17 	ldw	r2,-8(fp)
   920d4:	10800217 	ldw	r2,8(r2)
   920d8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   920dc:	e0bffd17 	ldw	r2,-12(fp)
   920e0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   920e4:	e0bffd17 	ldw	r2,-12(fp)
   920e8:	e0ffff0b 	ldhu	r3,-4(fp)
   920ec:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   920f0:	e0bffd17 	ldw	r2,-12(fp)
   920f4:	10c00c03 	ldbu	r3,48(r2)
   920f8:	00bff7c4 	movi	r2,-33
   920fc:	1884703a 	and	r2,r3,r2
   92100:	1007883a 	mov	r3,r2
   92104:	e0bffd17 	ldw	r2,-12(fp)
   92108:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   9210c:	e0bffd17 	ldw	r2,-12(fp)
   92110:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   92114:	e0bffd17 	ldw	r2,-12(fp)
   92118:	10800c03 	ldbu	r2,48(r2)
   9211c:	10803fcc 	andi	r2,r2,255
   92120:	1000181e 	bne	r2,zero,92184 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   92124:	e0bffd17 	ldw	r2,-12(fp)
   92128:	10c00d83 	ldbu	r3,54(r2)
   9212c:	d0a73603 	ldbu	r2,-25384(gp)
   92130:	1884b03a 	or	r2,r3,r2
   92134:	d0a73605 	stb	r2,-25384(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   92138:	e0bffd17 	ldw	r2,-12(fp)
   9213c:	10800d03 	ldbu	r2,52(r2)
   92140:	10c03fcc 	andi	r3,r2,255
   92144:	e0bffd17 	ldw	r2,-12(fp)
   92148:	10800d03 	ldbu	r2,52(r2)
   9214c:	11003fcc 	andi	r4,r2,255
   92150:	d0a73644 	addi	r2,gp,-25383
   92154:	2085883a 	add	r2,r4,r2
   92158:	11000003 	ldbu	r4,0(r2)
   9215c:	e0bffd17 	ldw	r2,-12(fp)
   92160:	10800d43 	ldbu	r2,53(r2)
   92164:	2084b03a 	or	r2,r4,r2
   92168:	1009883a 	mov	r4,r2
   9216c:	d0a73644 	addi	r2,gp,-25383
   92170:	1885883a 	add	r2,r3,r2
   92174:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   92178:	00800044 	movi	r2,1
   9217c:	e0bffc05 	stb	r2,-16(fp)
   92180:	00000106 	br	92188 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   92184:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   92188:	e13ffe17 	ldw	r4,-8(fp)
   9218c:	00921a80 	call	921a8 <OS_FlagUnlink>
    return (sched);
   92190:	e0bffc03 	ldbu	r2,-16(fp)
}
   92194:	e037883a 	mov	sp,fp
   92198:	dfc00117 	ldw	ra,4(sp)
   9219c:	df000017 	ldw	fp,0(sp)
   921a0:	dec00204 	addi	sp,sp,8
   921a4:	f800283a 	ret

000921a8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   921a8:	defffa04 	addi	sp,sp,-24
   921ac:	df000515 	stw	fp,20(sp)
   921b0:	df000504 	addi	fp,sp,20
   921b4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   921b8:	e0bfff17 	ldw	r2,-4(fp)
   921bc:	10800117 	ldw	r2,4(r2)
   921c0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   921c4:	e0bfff17 	ldw	r2,-4(fp)
   921c8:	10800017 	ldw	r2,0(r2)
   921cc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   921d0:	e0bffb17 	ldw	r2,-20(fp)
   921d4:	10000b1e 	bne	r2,zero,92204 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   921d8:	e0bfff17 	ldw	r2,-4(fp)
   921dc:	10800317 	ldw	r2,12(r2)
   921e0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   921e4:	e0bffd17 	ldw	r2,-12(fp)
   921e8:	e0fffc17 	ldw	r3,-16(fp)
   921ec:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   921f0:	e0bffc17 	ldw	r2,-16(fp)
   921f4:	10000b26 	beq	r2,zero,92224 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   921f8:	e0bffc17 	ldw	r2,-16(fp)
   921fc:	10000115 	stw	zero,4(r2)
   92200:	00000806 	br	92224 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   92204:	e0bffb17 	ldw	r2,-20(fp)
   92208:	e0fffc17 	ldw	r3,-16(fp)
   9220c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   92210:	e0bffc17 	ldw	r2,-16(fp)
   92214:	10000326 	beq	r2,zero,92224 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   92218:	e0bffc17 	ldw	r2,-16(fp)
   9221c:	e0fffb17 	ldw	r3,-20(fp)
   92220:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   92224:	e0bfff17 	ldw	r2,-4(fp)
   92228:	10800217 	ldw	r2,8(r2)
   9222c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   92230:	e0bffe17 	ldw	r2,-8(fp)
   92234:	10000a15 	stw	zero,40(r2)
#endif
}
   92238:	0001883a 	nop
   9223c:	e037883a 	mov	sp,fp
   92240:	df000017 	ldw	fp,0(sp)
   92244:	dec00104 	addi	sp,sp,4
   92248:	f800283a 	ret

0009224c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   9224c:	defff404 	addi	sp,sp,-48
   92250:	df000b15 	stw	fp,44(sp)
   92254:	df000b04 	addi	fp,sp,44
   92258:	e13ffc15 	stw	r4,-16(fp)
   9225c:	e17ffd15 	stw	r5,-12(fp)
   92260:	e1bffe15 	stw	r6,-8(fp)
   92264:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92268:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   9226c:	e0bfff17 	ldw	r2,-4(fp)
   92270:	1000021e 	bne	r2,zero,9227c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   92274:	0005883a 	mov	r2,zero
   92278:	00006506 	br	92410 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   9227c:	e0bffc17 	ldw	r2,-16(fp)
   92280:	1000051e 	bne	r2,zero,92298 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   92284:	e0bfff17 	ldw	r2,-4(fp)
   92288:	00c01884 	movi	r3,98
   9228c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   92290:	0005883a 	mov	r2,zero
   92294:	00005e06 	br	92410 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   92298:	e0bffc17 	ldw	r2,-16(fp)
   9229c:	108000cc 	andi	r2,r2,3
   922a0:	10000526 	beq	r2,zero,922b8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   922a4:	e0bfff17 	ldw	r2,-4(fp)
   922a8:	00c01884 	movi	r3,98
   922ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   922b0:	0005883a 	mov	r2,zero
   922b4:	00005606 	br	92410 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   922b8:	e0bffd17 	ldw	r2,-12(fp)
   922bc:	108000a8 	cmpgeui	r2,r2,2
   922c0:	1000051e 	bne	r2,zero,922d8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   922c4:	e0bfff17 	ldw	r2,-4(fp)
   922c8:	00c016c4 	movi	r3,91
   922cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   922d0:	0005883a 	mov	r2,zero
   922d4:	00004e06 	br	92410 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   922d8:	e0bffe17 	ldw	r2,-8(fp)
   922dc:	10800128 	cmpgeui	r2,r2,4
   922e0:	1000051e 	bne	r2,zero,922f8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   922e4:	e0bfff17 	ldw	r2,-4(fp)
   922e8:	00c01704 	movi	r3,92
   922ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   922f0:	0005883a 	mov	r2,zero
   922f4:	00004606 	br	92410 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   922f8:	0005303a 	rdctl	r2,status
   922fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92300:	e0fffb17 	ldw	r3,-20(fp)
   92304:	00bfff84 	movi	r2,-2
   92308:	1884703a 	and	r2,r3,r2
   9230c:	1001703a 	wrctl	status,r2
  
  return context;
   92310:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92314:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   92318:	d0a73317 	ldw	r2,-25396(gp)
   9231c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   92320:	d0a73317 	ldw	r2,-25396(gp)
   92324:	10000326 	beq	r2,zero,92334 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   92328:	d0a73317 	ldw	r2,-25396(gp)
   9232c:	10800117 	ldw	r2,4(r2)
   92330:	d0a73315 	stw	r2,-25396(gp)
   92334:	e0bff817 	ldw	r2,-32(fp)
   92338:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9233c:	e0bff917 	ldw	r2,-28(fp)
   92340:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   92344:	e0bffa17 	ldw	r2,-24(fp)
   92348:	1000051e 	bne	r2,zero,92360 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   9234c:	e0bfff17 	ldw	r2,-4(fp)
   92350:	00c01684 	movi	r3,90
   92354:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   92358:	0005883a 	mov	r2,zero
   9235c:	00002c06 	br	92410 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   92360:	e0bffc17 	ldw	r2,-16(fp)
   92364:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   92368:	e0fffc17 	ldw	r3,-16(fp)
   9236c:	e0bffe17 	ldw	r2,-8(fp)
   92370:	1885883a 	add	r2,r3,r2
   92374:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   92378:	e03ff715 	stw	zero,-36(fp)
   9237c:	00000c06 	br	923b0 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   92380:	e0bff617 	ldw	r2,-40(fp)
   92384:	e0fff517 	ldw	r3,-44(fp)
   92388:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   9238c:	e0bff517 	ldw	r2,-44(fp)
   92390:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   92394:	e0fff517 	ldw	r3,-44(fp)
   92398:	e0bffe17 	ldw	r2,-8(fp)
   9239c:	1885883a 	add	r2,r3,r2
   923a0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   923a4:	e0bff717 	ldw	r2,-36(fp)
   923a8:	10800044 	addi	r2,r2,1
   923ac:	e0bff715 	stw	r2,-36(fp)
   923b0:	e0bffd17 	ldw	r2,-12(fp)
   923b4:	10bfffc4 	addi	r2,r2,-1
   923b8:	e0fff717 	ldw	r3,-36(fp)
   923bc:	18bff036 	bltu	r3,r2,92380 <__alt_data_end+0xfffd3b80>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   923c0:	e0bff617 	ldw	r2,-40(fp)
   923c4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   923c8:	e0bffa17 	ldw	r2,-24(fp)
   923cc:	e0fffc17 	ldw	r3,-16(fp)
   923d0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   923d4:	e0bffa17 	ldw	r2,-24(fp)
   923d8:	e0fffc17 	ldw	r3,-16(fp)
   923dc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   923e0:	e0bffa17 	ldw	r2,-24(fp)
   923e4:	e0fffd17 	ldw	r3,-12(fp)
   923e8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   923ec:	e0bffa17 	ldw	r2,-24(fp)
   923f0:	e0fffd17 	ldw	r3,-12(fp)
   923f4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   923f8:	e0bffa17 	ldw	r2,-24(fp)
   923fc:	e0fffe17 	ldw	r3,-8(fp)
   92400:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   92404:	e0bfff17 	ldw	r2,-4(fp)
   92408:	10000005 	stb	zero,0(r2)
    return (pmem);
   9240c:	e0bffa17 	ldw	r2,-24(fp)
}
   92410:	e037883a 	mov	sp,fp
   92414:	df000017 	ldw	fp,0(sp)
   92418:	dec00104 	addi	sp,sp,4
   9241c:	f800283a 	ret

00092420 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   92420:	defff804 	addi	sp,sp,-32
   92424:	df000715 	stw	fp,28(sp)
   92428:	df000704 	addi	fp,sp,28
   9242c:	e13ffe15 	stw	r4,-8(fp)
   92430:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92434:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   92438:	e0bfff17 	ldw	r2,-4(fp)
   9243c:	1000021e 	bne	r2,zero,92448 <OSMemGet+0x28>
        return ((void *)0);
   92440:	0005883a 	mov	r2,zero
   92444:	00002e06 	br	92500 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   92448:	e0bffe17 	ldw	r2,-8(fp)
   9244c:	1000051e 	bne	r2,zero,92464 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   92450:	e0bfff17 	ldw	r2,-4(fp)
   92454:	00c01804 	movi	r3,96
   92458:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   9245c:	0005883a 	mov	r2,zero
   92460:	00002706 	br	92500 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92464:	0005303a 	rdctl	r2,status
   92468:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9246c:	e0fffd17 	ldw	r3,-12(fp)
   92470:	00bfff84 	movi	r2,-2
   92474:	1884703a 	and	r2,r3,r2
   92478:	1001703a 	wrctl	status,r2
  
  return context;
   9247c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92480:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   92484:	e0bffe17 	ldw	r2,-8(fp)
   92488:	10800417 	ldw	r2,16(r2)
   9248c:	10001426 	beq	r2,zero,924e0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   92490:	e0bffe17 	ldw	r2,-8(fp)
   92494:	10800117 	ldw	r2,4(r2)
   92498:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   9249c:	e0bffb17 	ldw	r2,-20(fp)
   924a0:	10c00017 	ldw	r3,0(r2)
   924a4:	e0bffe17 	ldw	r2,-8(fp)
   924a8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   924ac:	e0bffe17 	ldw	r2,-8(fp)
   924b0:	10800417 	ldw	r2,16(r2)
   924b4:	10ffffc4 	addi	r3,r2,-1
   924b8:	e0bffe17 	ldw	r2,-8(fp)
   924bc:	10c00415 	stw	r3,16(r2)
   924c0:	e0bff917 	ldw	r2,-28(fp)
   924c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   924c8:	e0bffa17 	ldw	r2,-24(fp)
   924cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   924d0:	e0bfff17 	ldw	r2,-4(fp)
   924d4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   924d8:	e0bffb17 	ldw	r2,-20(fp)
   924dc:	00000806 	br	92500 <OSMemGet+0xe0>
   924e0:	e0bff917 	ldw	r2,-28(fp)
   924e4:	e0bffc15 	stw	r2,-16(fp)
   924e8:	e0bffc17 	ldw	r2,-16(fp)
   924ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   924f0:	e0bfff17 	ldw	r2,-4(fp)
   924f4:	00c01744 	movi	r3,93
   924f8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   924fc:	0005883a 	mov	r2,zero
}
   92500:	e037883a 	mov	sp,fp
   92504:	df000017 	ldw	fp,0(sp)
   92508:	dec00104 	addi	sp,sp,4
   9250c:	f800283a 	ret

00092510 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   92510:	defff704 	addi	sp,sp,-36
   92514:	dfc00815 	stw	ra,32(sp)
   92518:	df000715 	stw	fp,28(sp)
   9251c:	df000704 	addi	fp,sp,28
   92520:	e13ffd15 	stw	r4,-12(fp)
   92524:	e17ffe15 	stw	r5,-8(fp)
   92528:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9252c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   92530:	e0bfff17 	ldw	r2,-4(fp)
   92534:	1000021e 	bne	r2,zero,92540 <OSMemNameGet+0x30>
        return (0);
   92538:	0005883a 	mov	r2,zero
   9253c:	00002b06 	br	925ec <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   92540:	e0bffd17 	ldw	r2,-12(fp)
   92544:	1000051e 	bne	r2,zero,9255c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   92548:	e0bfff17 	ldw	r2,-4(fp)
   9254c:	00c01804 	movi	r3,96
   92550:	10c00005 	stb	r3,0(r2)
        return (0);
   92554:	0005883a 	mov	r2,zero
   92558:	00002406 	br	925ec <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   9255c:	e0bffe17 	ldw	r2,-8(fp)
   92560:	1000051e 	bne	r2,zero,92578 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   92564:	e0bfff17 	ldw	r2,-4(fp)
   92568:	00c00304 	movi	r3,12
   9256c:	10c00005 	stb	r3,0(r2)
        return (0);
   92570:	0005883a 	mov	r2,zero
   92574:	00001d06 	br	925ec <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   92578:	d0a73803 	ldbu	r2,-25376(gp)
   9257c:	10803fcc 	andi	r2,r2,255
   92580:	10000526 	beq	r2,zero,92598 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   92584:	e0bfff17 	ldw	r2,-4(fp)
   92588:	00c00444 	movi	r3,17
   9258c:	10c00005 	stb	r3,0(r2)
        return (0);
   92590:	0005883a 	mov	r2,zero
   92594:	00001506 	br	925ec <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92598:	0005303a 	rdctl	r2,status
   9259c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   925a0:	e0fffb17 	ldw	r3,-20(fp)
   925a4:	00bfff84 	movi	r2,-2
   925a8:	1884703a 	and	r2,r3,r2
   925ac:	1001703a 	wrctl	status,r2
  
  return context;
   925b0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   925b4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   925b8:	e0bffd17 	ldw	r2,-12(fp)
   925bc:	10800504 	addi	r2,r2,20
   925c0:	100b883a 	mov	r5,r2
   925c4:	e13ffe17 	ldw	r4,-8(fp)
   925c8:	00904180 	call	90418 <OS_StrCopy>
   925cc:	e0bffa05 	stb	r2,-24(fp)
   925d0:	e0bff917 	ldw	r2,-28(fp)
   925d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   925d8:	e0bffc17 	ldw	r2,-16(fp)
   925dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   925e0:	e0bfff17 	ldw	r2,-4(fp)
   925e4:	10000005 	stb	zero,0(r2)
    return (len);
   925e8:	e0bffa03 	ldbu	r2,-24(fp)
}
   925ec:	e037883a 	mov	sp,fp
   925f0:	dfc00117 	ldw	ra,4(sp)
   925f4:	df000017 	ldw	fp,0(sp)
   925f8:	dec00204 	addi	sp,sp,8
   925fc:	f800283a 	ret

00092600 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   92600:	defff604 	addi	sp,sp,-40
   92604:	dfc00915 	stw	ra,36(sp)
   92608:	df000815 	stw	fp,32(sp)
   9260c:	df000804 	addi	fp,sp,32
   92610:	e13ffd15 	stw	r4,-12(fp)
   92614:	e17ffe15 	stw	r5,-8(fp)
   92618:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9261c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   92620:	e0bfff17 	ldw	r2,-4(fp)
   92624:	10003526 	beq	r2,zero,926fc <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   92628:	e0bffd17 	ldw	r2,-12(fp)
   9262c:	1000041e 	bne	r2,zero,92640 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   92630:	e0bfff17 	ldw	r2,-4(fp)
   92634:	00c01804 	movi	r3,96
   92638:	10c00005 	stb	r3,0(r2)
        return;
   9263c:	00003006 	br	92700 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   92640:	e0bffe17 	ldw	r2,-8(fp)
   92644:	1000041e 	bne	r2,zero,92658 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   92648:	e0bfff17 	ldw	r2,-4(fp)
   9264c:	00c00304 	movi	r3,12
   92650:	10c00005 	stb	r3,0(r2)
        return;
   92654:	00002a06 	br	92700 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   92658:	d0a73803 	ldbu	r2,-25376(gp)
   9265c:	10803fcc 	andi	r2,r2,255
   92660:	10000426 	beq	r2,zero,92674 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   92664:	e0bfff17 	ldw	r2,-4(fp)
   92668:	00c00484 	movi	r3,18
   9266c:	10c00005 	stb	r3,0(r2)
        return;
   92670:	00002306 	br	92700 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92674:	0005303a 	rdctl	r2,status
   92678:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9267c:	e0fffc17 	ldw	r3,-16(fp)
   92680:	00bfff84 	movi	r2,-2
   92684:	1884703a 	and	r2,r3,r2
   92688:	1001703a 	wrctl	status,r2
  
  return context;
   9268c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   92690:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   92694:	e13ffe17 	ldw	r4,-8(fp)
   92698:	009048c0 	call	9048c <OS_StrLen>
   9269c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   926a0:	e0bffa03 	ldbu	r2,-24(fp)
   926a4:	10800830 	cmpltui	r2,r2,32
   926a8:	1000081e 	bne	r2,zero,926cc <OSMemNameSet+0xcc>
   926ac:	e0bff817 	ldw	r2,-32(fp)
   926b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   926b4:	e0bff917 	ldw	r2,-28(fp)
   926b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   926bc:	e0bfff17 	ldw	r2,-4(fp)
   926c0:	00c018c4 	movi	r3,99
   926c4:	10c00005 	stb	r3,0(r2)
        return;
   926c8:	00000d06 	br	92700 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   926cc:	e0bffd17 	ldw	r2,-12(fp)
   926d0:	10800504 	addi	r2,r2,20
   926d4:	e17ffe17 	ldw	r5,-8(fp)
   926d8:	1009883a 	mov	r4,r2
   926dc:	00904180 	call	90418 <OS_StrCopy>
   926e0:	e0bff817 	ldw	r2,-32(fp)
   926e4:	e0bffb15 	stw	r2,-20(fp)
   926e8:	e0bffb17 	ldw	r2,-20(fp)
   926ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   926f0:	e0bfff17 	ldw	r2,-4(fp)
   926f4:	10000005 	stb	zero,0(r2)
   926f8:	00000106 	br	92700 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   926fc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   92700:	e037883a 	mov	sp,fp
   92704:	dfc00117 	ldw	ra,4(sp)
   92708:	df000017 	ldw	fp,0(sp)
   9270c:	dec00204 	addi	sp,sp,8
   92710:	f800283a 	ret

00092714 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   92714:	defff904 	addi	sp,sp,-28
   92718:	df000615 	stw	fp,24(sp)
   9271c:	df000604 	addi	fp,sp,24
   92720:	e13ffe15 	stw	r4,-8(fp)
   92724:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92728:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   9272c:	e0bffe17 	ldw	r2,-8(fp)
   92730:	1000021e 	bne	r2,zero,9273c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   92734:	00801804 	movi	r2,96
   92738:	00002806 	br	927dc <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   9273c:	e0bfff17 	ldw	r2,-4(fp)
   92740:	1000021e 	bne	r2,zero,9274c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   92744:	008017c4 	movi	r2,95
   92748:	00002406 	br	927dc <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9274c:	0005303a 	rdctl	r2,status
   92750:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92754:	e0fffd17 	ldw	r3,-12(fp)
   92758:	00bfff84 	movi	r2,-2
   9275c:	1884703a 	and	r2,r3,r2
   92760:	1001703a 	wrctl	status,r2
  
  return context;
   92764:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92768:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   9276c:	e0bffe17 	ldw	r2,-8(fp)
   92770:	10c00417 	ldw	r3,16(r2)
   92774:	e0bffe17 	ldw	r2,-8(fp)
   92778:	10800317 	ldw	r2,12(r2)
   9277c:	18800636 	bltu	r3,r2,92798 <OSMemPut+0x84>
   92780:	e0bffa17 	ldw	r2,-24(fp)
   92784:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92788:	e0bffb17 	ldw	r2,-20(fp)
   9278c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   92790:	00801784 	movi	r2,94
   92794:	00001106 	br	927dc <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   92798:	e0bffe17 	ldw	r2,-8(fp)
   9279c:	10c00117 	ldw	r3,4(r2)
   927a0:	e0bfff17 	ldw	r2,-4(fp)
   927a4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   927a8:	e0bffe17 	ldw	r2,-8(fp)
   927ac:	e0ffff17 	ldw	r3,-4(fp)
   927b0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   927b4:	e0bffe17 	ldw	r2,-8(fp)
   927b8:	10800417 	ldw	r2,16(r2)
   927bc:	10c00044 	addi	r3,r2,1
   927c0:	e0bffe17 	ldw	r2,-8(fp)
   927c4:	10c00415 	stw	r3,16(r2)
   927c8:	e0bffa17 	ldw	r2,-24(fp)
   927cc:	e0bffc15 	stw	r2,-16(fp)
   927d0:	e0bffc17 	ldw	r2,-16(fp)
   927d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   927d8:	0005883a 	mov	r2,zero
}
   927dc:	e037883a 	mov	sp,fp
   927e0:	df000017 	ldw	fp,0(sp)
   927e4:	dec00104 	addi	sp,sp,4
   927e8:	f800283a 	ret

000927ec <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   927ec:	defffa04 	addi	sp,sp,-24
   927f0:	df000515 	stw	fp,20(sp)
   927f4:	df000504 	addi	fp,sp,20
   927f8:	e13ffe15 	stw	r4,-8(fp)
   927fc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92800:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   92804:	e0bffe17 	ldw	r2,-8(fp)
   92808:	1000021e 	bne	r2,zero,92814 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   9280c:	00801804 	movi	r2,96
   92810:	00002c06 	br	928c4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   92814:	e0bfff17 	ldw	r2,-4(fp)
   92818:	1000021e 	bne	r2,zero,92824 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   9281c:	00801844 	movi	r2,97
   92820:	00002806 	br	928c4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92824:	0005303a 	rdctl	r2,status
   92828:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9282c:	e0fffc17 	ldw	r3,-16(fp)
   92830:	00bfff84 	movi	r2,-2
   92834:	1884703a 	and	r2,r3,r2
   92838:	1001703a 	wrctl	status,r2
  
  return context;
   9283c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92840:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   92844:	e0bffe17 	ldw	r2,-8(fp)
   92848:	10c00017 	ldw	r3,0(r2)
   9284c:	e0bfff17 	ldw	r2,-4(fp)
   92850:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   92854:	e0bffe17 	ldw	r2,-8(fp)
   92858:	10c00117 	ldw	r3,4(r2)
   9285c:	e0bfff17 	ldw	r2,-4(fp)
   92860:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   92864:	e0bffe17 	ldw	r2,-8(fp)
   92868:	10c00217 	ldw	r3,8(r2)
   9286c:	e0bfff17 	ldw	r2,-4(fp)
   92870:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   92874:	e0bffe17 	ldw	r2,-8(fp)
   92878:	10c00317 	ldw	r3,12(r2)
   9287c:	e0bfff17 	ldw	r2,-4(fp)
   92880:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   92884:	e0bffe17 	ldw	r2,-8(fp)
   92888:	10c00417 	ldw	r3,16(r2)
   9288c:	e0bfff17 	ldw	r2,-4(fp)
   92890:	10c00415 	stw	r3,16(r2)
   92894:	e0bffb17 	ldw	r2,-20(fp)
   92898:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9289c:	e0bffd17 	ldw	r2,-12(fp)
   928a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   928a4:	e0bfff17 	ldw	r2,-4(fp)
   928a8:	10c00317 	ldw	r3,12(r2)
   928ac:	e0bfff17 	ldw	r2,-4(fp)
   928b0:	10800417 	ldw	r2,16(r2)
   928b4:	1887c83a 	sub	r3,r3,r2
   928b8:	e0bfff17 	ldw	r2,-4(fp)
   928bc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   928c0:	0005883a 	mov	r2,zero
}
   928c4:	e037883a 	mov	sp,fp
   928c8:	df000017 	ldw	fp,0(sp)
   928cc:	dec00104 	addi	sp,sp,4
   928d0:	f800283a 	ret

000928d4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   928d4:	defffc04 	addi	sp,sp,-16
   928d8:	dfc00315 	stw	ra,12(sp)
   928dc:	df000215 	stw	fp,8(sp)
   928e0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   928e4:	01430c04 	movi	r5,3120
   928e8:	010002b4 	movhi	r4,10
   928ec:	2130e104 	addi	r4,r4,-15484
   928f0:	00902180 	call	90218 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   928f4:	008002b4 	movhi	r2,10
   928f8:	10b0e104 	addi	r2,r2,-15484
   928fc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   92900:	e03fff0d 	sth	zero,-4(fp)
   92904:	00001606 	br	92960 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   92908:	e0bfff0b 	ldhu	r2,-4(fp)
   9290c:	10800044 	addi	r2,r2,1
   92910:	01400d04 	movi	r5,52
   92914:	1009883a 	mov	r4,r2
   92918:	008b18c0 	call	8b18c <__mulsi3>
   9291c:	1007883a 	mov	r3,r2
   92920:	008002b4 	movhi	r2,10
   92924:	10b0e104 	addi	r2,r2,-15484
   92928:	1887883a 	add	r3,r3,r2
   9292c:	e0bffe17 	ldw	r2,-8(fp)
   92930:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   92934:	e0bffe17 	ldw	r2,-8(fp)
   92938:	00c00fc4 	movi	r3,63
   9293c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   92940:	e0bffe17 	ldw	r2,-8(fp)
   92944:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   92948:	e0bffe17 	ldw	r2,-8(fp)
   9294c:	10800d04 	addi	r2,r2,52
   92950:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   92954:	e0bfff0b 	ldhu	r2,-4(fp)
   92958:	10800044 	addi	r2,r2,1
   9295c:	e0bfff0d 	sth	r2,-4(fp)
   92960:	e0bfff0b 	ldhu	r2,-4(fp)
   92964:	10800ef0 	cmpltui	r2,r2,59
   92968:	103fe71e 	bne	r2,zero,92908 <__alt_data_end+0xfffd4108>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   9296c:	e0bffe17 	ldw	r2,-8(fp)
   92970:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   92974:	e0bffe17 	ldw	r2,-8(fp)
   92978:	00c00fc4 	movi	r3,63
   9297c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   92980:	e0bffe17 	ldw	r2,-8(fp)
   92984:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   92988:	008002b4 	movhi	r2,10
   9298c:	10b0e104 	addi	r2,r2,-15484
   92990:	d0a73315 	stw	r2,-25396(gp)
#endif
}
   92994:	0001883a 	nop
   92998:	e037883a 	mov	sp,fp
   9299c:	dfc00117 	ldw	ra,4(sp)
   929a0:	df000017 	ldw	fp,0(sp)
   929a4:	dec00204 	addi	sp,sp,8
   929a8:	f800283a 	ret

000929ac <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   929ac:	defff804 	addi	sp,sp,-32
   929b0:	df000715 	stw	fp,28(sp)
   929b4:	df000704 	addi	fp,sp,28
   929b8:	e13ffe15 	stw	r4,-8(fp)
   929bc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   929c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   929c4:	e0bfff17 	ldw	r2,-4(fp)
   929c8:	1000021e 	bne	r2,zero,929d4 <OSQAccept+0x28>
        return ((void *)0);
   929cc:	0005883a 	mov	r2,zero
   929d0:	00004206 	br	92adc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   929d4:	e0bffe17 	ldw	r2,-8(fp)
   929d8:	1000051e 	bne	r2,zero,929f0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   929dc:	e0bfff17 	ldw	r2,-4(fp)
   929e0:	00c00104 	movi	r3,4
   929e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   929e8:	0005883a 	mov	r2,zero
   929ec:	00003b06 	br	92adc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   929f0:	e0bffe17 	ldw	r2,-8(fp)
   929f4:	10800003 	ldbu	r2,0(r2)
   929f8:	10803fcc 	andi	r2,r2,255
   929fc:	108000a0 	cmpeqi	r2,r2,2
   92a00:	1000051e 	bne	r2,zero,92a18 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   92a04:	e0bfff17 	ldw	r2,-4(fp)
   92a08:	00c00044 	movi	r3,1
   92a0c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   92a10:	0005883a 	mov	r2,zero
   92a14:	00003106 	br	92adc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92a18:	0005303a 	rdctl	r2,status
   92a1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92a20:	e0fffd17 	ldw	r3,-12(fp)
   92a24:	00bfff84 	movi	r2,-2
   92a28:	1884703a 	and	r2,r3,r2
   92a2c:	1001703a 	wrctl	status,r2
  
  return context;
   92a30:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   92a34:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   92a38:	e0bffe17 	ldw	r2,-8(fp)
   92a3c:	10800117 	ldw	r2,4(r2)
   92a40:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   92a44:	e0bffc17 	ldw	r2,-16(fp)
   92a48:	1080058b 	ldhu	r2,22(r2)
   92a4c:	10bfffcc 	andi	r2,r2,65535
   92a50:	10001926 	beq	r2,zero,92ab8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   92a54:	e0bffc17 	ldw	r2,-16(fp)
   92a58:	10800417 	ldw	r2,16(r2)
   92a5c:	11000104 	addi	r4,r2,4
   92a60:	e0fffc17 	ldw	r3,-16(fp)
   92a64:	19000415 	stw	r4,16(r3)
   92a68:	10800017 	ldw	r2,0(r2)
   92a6c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   92a70:	e0bffc17 	ldw	r2,-16(fp)
   92a74:	1080058b 	ldhu	r2,22(r2)
   92a78:	10bfffc4 	addi	r2,r2,-1
   92a7c:	1007883a 	mov	r3,r2
   92a80:	e0bffc17 	ldw	r2,-16(fp)
   92a84:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   92a88:	e0bffc17 	ldw	r2,-16(fp)
   92a8c:	10c00417 	ldw	r3,16(r2)
   92a90:	e0bffc17 	ldw	r2,-16(fp)
   92a94:	10800217 	ldw	r2,8(r2)
   92a98:	1880041e 	bne	r3,r2,92aac <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   92a9c:	e0bffc17 	ldw	r2,-16(fp)
   92aa0:	10c00117 	ldw	r3,4(r2)
   92aa4:	e0bffc17 	ldw	r2,-16(fp)
   92aa8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   92aac:	e0bfff17 	ldw	r2,-4(fp)
   92ab0:	10000005 	stb	zero,0(r2)
   92ab4:	00000406 	br	92ac8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   92ab8:	e0bfff17 	ldw	r2,-4(fp)
   92abc:	00c007c4 	movi	r3,31
   92ac0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   92ac4:	e03ff915 	stw	zero,-28(fp)
   92ac8:	e0bffa17 	ldw	r2,-24(fp)
   92acc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92ad0:	e0bffb17 	ldw	r2,-20(fp)
   92ad4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   92ad8:	e0bff917 	ldw	r2,-28(fp)
}
   92adc:	e037883a 	mov	sp,fp
   92ae0:	df000017 	ldw	fp,0(sp)
   92ae4:	dec00104 	addi	sp,sp,4
   92ae8:	f800283a 	ret

00092aec <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   92aec:	defff404 	addi	sp,sp,-48
   92af0:	dfc00b15 	stw	ra,44(sp)
   92af4:	df000a15 	stw	fp,40(sp)
   92af8:	df000a04 	addi	fp,sp,40
   92afc:	e13ffe15 	stw	r4,-8(fp)
   92b00:	2805883a 	mov	r2,r5
   92b04:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92b08:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   92b0c:	d0a73803 	ldbu	r2,-25376(gp)
   92b10:	10803fcc 	andi	r2,r2,255
   92b14:	10000226 	beq	r2,zero,92b20 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   92b18:	0005883a 	mov	r2,zero
   92b1c:	00005906 	br	92c84 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92b20:	0005303a 	rdctl	r2,status
   92b24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92b28:	e0fffd17 	ldw	r3,-12(fp)
   92b2c:	00bfff84 	movi	r2,-2
   92b30:	1884703a 	and	r2,r3,r2
   92b34:	1001703a 	wrctl	status,r2
  
  return context;
   92b38:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   92b3c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   92b40:	d0a73717 	ldw	r2,-25380(gp)
   92b44:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   92b48:	d0a73717 	ldw	r2,-25380(gp)
   92b4c:	10000326 	beq	r2,zero,92b5c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   92b50:	d0a73717 	ldw	r2,-25380(gp)
   92b54:	10800117 	ldw	r2,4(r2)
   92b58:	d0a73715 	stw	r2,-25380(gp)
   92b5c:	e0bff717 	ldw	r2,-36(fp)
   92b60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92b64:	e0bff817 	ldw	r2,-32(fp)
   92b68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   92b6c:	e0bff617 	ldw	r2,-40(fp)
   92b70:	10004326 	beq	r2,zero,92c80 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92b74:	0005303a 	rdctl	r2,status
   92b78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92b7c:	e0fff917 	ldw	r3,-28(fp)
   92b80:	00bfff84 	movi	r2,-2
   92b84:	1884703a 	and	r2,r3,r2
   92b88:	1001703a 	wrctl	status,r2
  
  return context;
   92b8c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   92b90:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   92b94:	d0a73517 	ldw	r2,-25388(gp)
   92b98:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   92b9c:	e0bffb17 	ldw	r2,-20(fp)
   92ba0:	10002d26 	beq	r2,zero,92c58 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   92ba4:	d0a73517 	ldw	r2,-25388(gp)
   92ba8:	10800017 	ldw	r2,0(r2)
   92bac:	d0a73515 	stw	r2,-25388(gp)
   92bb0:	e0bff717 	ldw	r2,-36(fp)
   92bb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92bb8:	e0bffa17 	ldw	r2,-24(fp)
   92bbc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   92bc0:	e0bffb17 	ldw	r2,-20(fp)
   92bc4:	e0fffe17 	ldw	r3,-8(fp)
   92bc8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   92bcc:	e0bfff0b 	ldhu	r2,-4(fp)
   92bd0:	1085883a 	add	r2,r2,r2
   92bd4:	1085883a 	add	r2,r2,r2
   92bd8:	1007883a 	mov	r3,r2
   92bdc:	e0bffe17 	ldw	r2,-8(fp)
   92be0:	10c7883a 	add	r3,r2,r3
   92be4:	e0bffb17 	ldw	r2,-20(fp)
   92be8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   92bec:	e0bffb17 	ldw	r2,-20(fp)
   92bf0:	e0fffe17 	ldw	r3,-8(fp)
   92bf4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   92bf8:	e0bffb17 	ldw	r2,-20(fp)
   92bfc:	e0fffe17 	ldw	r3,-8(fp)
   92c00:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   92c04:	e0bffb17 	ldw	r2,-20(fp)
   92c08:	e0ffff0b 	ldhu	r3,-4(fp)
   92c0c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   92c10:	e0bffb17 	ldw	r2,-20(fp)
   92c14:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   92c18:	e0bff617 	ldw	r2,-40(fp)
   92c1c:	00c00084 	movi	r3,2
   92c20:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   92c24:	e0bff617 	ldw	r2,-40(fp)
   92c28:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   92c2c:	e0bff617 	ldw	r2,-40(fp)
   92c30:	e0fffb17 	ldw	r3,-20(fp)
   92c34:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   92c38:	e0bff617 	ldw	r2,-40(fp)
   92c3c:	00c00fc4 	movi	r3,63
   92c40:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   92c44:	e0bff617 	ldw	r2,-40(fp)
   92c48:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   92c4c:	e13ff617 	ldw	r4,-40(fp)
   92c50:	008fe380 	call	8fe38 <OS_EventWaitListInit>
   92c54:	00000a06 	br	92c80 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   92c58:	d0e73717 	ldw	r3,-25380(gp)
   92c5c:	e0bff617 	ldw	r2,-40(fp)
   92c60:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   92c64:	e0bff617 	ldw	r2,-40(fp)
   92c68:	d0a73715 	stw	r2,-25380(gp)
   92c6c:	e0bff717 	ldw	r2,-36(fp)
   92c70:	e0bffc15 	stw	r2,-16(fp)
   92c74:	e0bffc17 	ldw	r2,-16(fp)
   92c78:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   92c7c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   92c80:	e0bff617 	ldw	r2,-40(fp)
}
   92c84:	e037883a 	mov	sp,fp
   92c88:	dfc00117 	ldw	ra,4(sp)
   92c8c:	df000017 	ldw	fp,0(sp)
   92c90:	dec00204 	addi	sp,sp,8
   92c94:	f800283a 	ret

00092c98 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   92c98:	defff204 	addi	sp,sp,-56
   92c9c:	dfc00d15 	stw	ra,52(sp)
   92ca0:	df000c15 	stw	fp,48(sp)
   92ca4:	df000c04 	addi	fp,sp,48
   92ca8:	e13ffd15 	stw	r4,-12(fp)
   92cac:	2805883a 	mov	r2,r5
   92cb0:	e1bfff15 	stw	r6,-4(fp)
   92cb4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   92cb8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   92cbc:	e0bfff17 	ldw	r2,-4(fp)
   92cc0:	1000021e 	bne	r2,zero,92ccc <OSQDel+0x34>
        return (pevent);
   92cc4:	e0bffd17 	ldw	r2,-12(fp)
   92cc8:	00008e06 	br	92f04 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   92ccc:	e0bffd17 	ldw	r2,-12(fp)
   92cd0:	1000051e 	bne	r2,zero,92ce8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   92cd4:	e0bfff17 	ldw	r2,-4(fp)
   92cd8:	00c00104 	movi	r3,4
   92cdc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   92ce0:	e0bffd17 	ldw	r2,-12(fp)
   92ce4:	00008706 	br	92f04 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   92ce8:	e0bffd17 	ldw	r2,-12(fp)
   92cec:	10800003 	ldbu	r2,0(r2)
   92cf0:	10803fcc 	andi	r2,r2,255
   92cf4:	108000a0 	cmpeqi	r2,r2,2
   92cf8:	1000051e 	bne	r2,zero,92d10 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   92cfc:	e0bfff17 	ldw	r2,-4(fp)
   92d00:	00c00044 	movi	r3,1
   92d04:	10c00005 	stb	r3,0(r2)
        return (pevent);
   92d08:	e0bffd17 	ldw	r2,-12(fp)
   92d0c:	00007d06 	br	92f04 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   92d10:	d0a73803 	ldbu	r2,-25376(gp)
   92d14:	10803fcc 	andi	r2,r2,255
   92d18:	10000526 	beq	r2,zero,92d30 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   92d1c:	e0bfff17 	ldw	r2,-4(fp)
   92d20:	00c003c4 	movi	r3,15
   92d24:	10c00005 	stb	r3,0(r2)
        return (pevent);
   92d28:	e0bffd17 	ldw	r2,-12(fp)
   92d2c:	00007506 	br	92f04 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92d30:	0005303a 	rdctl	r2,status
   92d34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92d38:	e0fffc17 	ldw	r3,-16(fp)
   92d3c:	00bfff84 	movi	r2,-2
   92d40:	1884703a 	and	r2,r3,r2
   92d44:	1001703a 	wrctl	status,r2
  
  return context;
   92d48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   92d4c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   92d50:	e0bffd17 	ldw	r2,-12(fp)
   92d54:	10800283 	ldbu	r2,10(r2)
   92d58:	10803fcc 	andi	r2,r2,255
   92d5c:	10000326 	beq	r2,zero,92d6c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   92d60:	00800044 	movi	r2,1
   92d64:	e0bff405 	stb	r2,-48(fp)
   92d68:	00000106 	br	92d70 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   92d6c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   92d70:	e0bffe03 	ldbu	r2,-8(fp)
   92d74:	10000326 	beq	r2,zero,92d84 <OSQDel+0xec>
   92d78:	10800060 	cmpeqi	r2,r2,1
   92d7c:	1000301e 	bne	r2,zero,92e40 <OSQDel+0x1a8>
   92d80:	00005506 	br	92ed8 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   92d84:	e0bff403 	ldbu	r2,-48(fp)
   92d88:	10001e1e 	bne	r2,zero,92e04 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   92d8c:	e0bffd17 	ldw	r2,-12(fp)
   92d90:	00c00fc4 	movi	r3,63
   92d94:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   92d98:	e0bffd17 	ldw	r2,-12(fp)
   92d9c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   92da0:	e0bffd17 	ldw	r2,-12(fp)
   92da4:	10800117 	ldw	r2,4(r2)
   92da8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   92dac:	d0e73517 	ldw	r3,-25388(gp)
   92db0:	e0bff817 	ldw	r2,-32(fp)
   92db4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   92db8:	e0bff817 	ldw	r2,-32(fp)
   92dbc:	d0a73515 	stw	r2,-25388(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   92dc0:	e0bffd17 	ldw	r2,-12(fp)
   92dc4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   92dc8:	d0e73717 	ldw	r3,-25380(gp)
   92dcc:	e0bffd17 	ldw	r2,-12(fp)
   92dd0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   92dd4:	e0bffd17 	ldw	r2,-12(fp)
   92dd8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   92ddc:	e0bffd17 	ldw	r2,-12(fp)
   92de0:	d0a73715 	stw	r2,-25380(gp)
   92de4:	e0bff617 	ldw	r2,-40(fp)
   92de8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92dec:	e0bff717 	ldw	r2,-36(fp)
   92df0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   92df4:	e0bfff17 	ldw	r2,-4(fp)
   92df8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   92dfc:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   92e00:	00003f06 	br	92f00 <OSQDel+0x268>
   92e04:	e0bff617 	ldw	r2,-40(fp)
   92e08:	e0bff915 	stw	r2,-28(fp)
   92e0c:	e0bff917 	ldw	r2,-28(fp)
   92e10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   92e14:	e0bfff17 	ldw	r2,-4(fp)
   92e18:	00c01244 	movi	r3,73
   92e1c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   92e20:	e0bffd17 	ldw	r2,-12(fp)
   92e24:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   92e28:	00003506 	br	92f00 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   92e2c:	000f883a 	mov	r7,zero
   92e30:	01800104 	movi	r6,4
   92e34:	000b883a 	mov	r5,zero
   92e38:	e13ffd17 	ldw	r4,-12(fp)
   92e3c:	008f8880 	call	8f888 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   92e40:	e0bffd17 	ldw	r2,-12(fp)
   92e44:	10800283 	ldbu	r2,10(r2)
   92e48:	10803fcc 	andi	r2,r2,255
   92e4c:	103ff71e 	bne	r2,zero,92e2c <__alt_data_end+0xfffd462c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   92e50:	e0bffd17 	ldw	r2,-12(fp)
   92e54:	00c00fc4 	movi	r3,63
   92e58:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   92e5c:	e0bffd17 	ldw	r2,-12(fp)
   92e60:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   92e64:	e0bffd17 	ldw	r2,-12(fp)
   92e68:	10800117 	ldw	r2,4(r2)
   92e6c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   92e70:	d0e73517 	ldw	r3,-25388(gp)
   92e74:	e0bff817 	ldw	r2,-32(fp)
   92e78:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   92e7c:	e0bff817 	ldw	r2,-32(fp)
   92e80:	d0a73515 	stw	r2,-25388(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   92e84:	e0bffd17 	ldw	r2,-12(fp)
   92e88:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   92e8c:	d0e73717 	ldw	r3,-25380(gp)
   92e90:	e0bffd17 	ldw	r2,-12(fp)
   92e94:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   92e98:	e0bffd17 	ldw	r2,-12(fp)
   92e9c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   92ea0:	e0bffd17 	ldw	r2,-12(fp)
   92ea4:	d0a73715 	stw	r2,-25380(gp)
   92ea8:	e0bff617 	ldw	r2,-40(fp)
   92eac:	e0bffa15 	stw	r2,-24(fp)
   92eb0:	e0bffa17 	ldw	r2,-24(fp)
   92eb4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   92eb8:	e0bff403 	ldbu	r2,-48(fp)
   92ebc:	10800058 	cmpnei	r2,r2,1
   92ec0:	1000011e 	bne	r2,zero,92ec8 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   92ec4:	00902d40 	call	902d4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   92ec8:	e0bfff17 	ldw	r2,-4(fp)
   92ecc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   92ed0:	e03ff515 	stw	zero,-44(fp)
             break;
   92ed4:	00000a06 	br	92f00 <OSQDel+0x268>
   92ed8:	e0bff617 	ldw	r2,-40(fp)
   92edc:	e0bffb15 	stw	r2,-20(fp)
   92ee0:	e0bffb17 	ldw	r2,-20(fp)
   92ee4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   92ee8:	e0bfff17 	ldw	r2,-4(fp)
   92eec:	00c001c4 	movi	r3,7
   92ef0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   92ef4:	e0bffd17 	ldw	r2,-12(fp)
   92ef8:	e0bff515 	stw	r2,-44(fp)
             break;
   92efc:	0001883a 	nop
    }
    return (pevent_return);
   92f00:	e0bff517 	ldw	r2,-44(fp)
}
   92f04:	e037883a 	mov	sp,fp
   92f08:	dfc00117 	ldw	ra,4(sp)
   92f0c:	df000017 	ldw	fp,0(sp)
   92f10:	dec00204 	addi	sp,sp,8
   92f14:	f800283a 	ret

00092f18 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   92f18:	defffa04 	addi	sp,sp,-24
   92f1c:	df000515 	stw	fp,20(sp)
   92f20:	df000504 	addi	fp,sp,20
   92f24:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92f28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   92f2c:	e0bfff17 	ldw	r2,-4(fp)
   92f30:	1000021e 	bne	r2,zero,92f3c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   92f34:	00800104 	movi	r2,4
   92f38:	00002106 	br	92fc0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   92f3c:	e0bfff17 	ldw	r2,-4(fp)
   92f40:	10800003 	ldbu	r2,0(r2)
   92f44:	10803fcc 	andi	r2,r2,255
   92f48:	108000a0 	cmpeqi	r2,r2,2
   92f4c:	1000021e 	bne	r2,zero,92f58 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   92f50:	00800044 	movi	r2,1
   92f54:	00001a06 	br	92fc0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92f58:	0005303a 	rdctl	r2,status
   92f5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92f60:	e0fffd17 	ldw	r3,-12(fp)
   92f64:	00bfff84 	movi	r2,-2
   92f68:	1884703a 	and	r2,r3,r2
   92f6c:	1001703a 	wrctl	status,r2
  
  return context;
   92f70:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92f74:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   92f78:	e0bfff17 	ldw	r2,-4(fp)
   92f7c:	10800117 	ldw	r2,4(r2)
   92f80:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   92f84:	e0bffc17 	ldw	r2,-16(fp)
   92f88:	10c00117 	ldw	r3,4(r2)
   92f8c:	e0bffc17 	ldw	r2,-16(fp)
   92f90:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   92f94:	e0bffc17 	ldw	r2,-16(fp)
   92f98:	10c00117 	ldw	r3,4(r2)
   92f9c:	e0bffc17 	ldw	r2,-16(fp)
   92fa0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   92fa4:	e0bffc17 	ldw	r2,-16(fp)
   92fa8:	1000058d 	sth	zero,22(r2)
   92fac:	e0bffb17 	ldw	r2,-20(fp)
   92fb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92fb4:	e0bffe17 	ldw	r2,-8(fp)
   92fb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   92fbc:	0005883a 	mov	r2,zero
}
   92fc0:	e037883a 	mov	sp,fp
   92fc4:	df000017 	ldw	fp,0(sp)
   92fc8:	dec00104 	addi	sp,sp,4
   92fcc:	f800283a 	ret

00092fd0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   92fd0:	defff304 	addi	sp,sp,-52
   92fd4:	dfc00c15 	stw	ra,48(sp)
   92fd8:	df000b15 	stw	fp,44(sp)
   92fdc:	df000b04 	addi	fp,sp,44
   92fe0:	e13ffd15 	stw	r4,-12(fp)
   92fe4:	2805883a 	mov	r2,r5
   92fe8:	e1bfff15 	stw	r6,-4(fp)
   92fec:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92ff0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   92ff4:	e0bfff17 	ldw	r2,-4(fp)
   92ff8:	1000021e 	bne	r2,zero,93004 <OSQPend+0x34>
        return ((void *)0);
   92ffc:	0005883a 	mov	r2,zero
   93000:	00009106 	br	93248 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   93004:	e0bffd17 	ldw	r2,-12(fp)
   93008:	1000051e 	bne	r2,zero,93020 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   9300c:	e0bfff17 	ldw	r2,-4(fp)
   93010:	00c00104 	movi	r3,4
   93014:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   93018:	0005883a 	mov	r2,zero
   9301c:	00008a06 	br	93248 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   93020:	e0bffd17 	ldw	r2,-12(fp)
   93024:	10800003 	ldbu	r2,0(r2)
   93028:	10803fcc 	andi	r2,r2,255
   9302c:	108000a0 	cmpeqi	r2,r2,2
   93030:	1000051e 	bne	r2,zero,93048 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   93034:	e0bfff17 	ldw	r2,-4(fp)
   93038:	00c00044 	movi	r3,1
   9303c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   93040:	0005883a 	mov	r2,zero
   93044:	00008006 	br	93248 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   93048:	d0a73803 	ldbu	r2,-25376(gp)
   9304c:	10803fcc 	andi	r2,r2,255
   93050:	10000526 	beq	r2,zero,93068 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   93054:	e0bfff17 	ldw	r2,-4(fp)
   93058:	00c00084 	movi	r3,2
   9305c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   93060:	0005883a 	mov	r2,zero
   93064:	00007806 	br	93248 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   93068:	d0a72a03 	ldbu	r2,-25432(gp)
   9306c:	10803fcc 	andi	r2,r2,255
   93070:	10000526 	beq	r2,zero,93088 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   93074:	e0bfff17 	ldw	r2,-4(fp)
   93078:	00c00344 	movi	r3,13
   9307c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   93080:	0005883a 	mov	r2,zero
   93084:	00007006 	br	93248 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93088:	0005303a 	rdctl	r2,status
   9308c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93090:	e0fffc17 	ldw	r3,-16(fp)
   93094:	00bfff84 	movi	r2,-2
   93098:	1884703a 	and	r2,r3,r2
   9309c:	1001703a 	wrctl	status,r2
  
  return context;
   930a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   930a4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   930a8:	e0bffd17 	ldw	r2,-12(fp)
   930ac:	10800117 	ldw	r2,4(r2)
   930b0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   930b4:	e0bff817 	ldw	r2,-32(fp)
   930b8:	1080058b 	ldhu	r2,22(r2)
   930bc:	10bfffcc 	andi	r2,r2,65535
   930c0:	10001e26 	beq	r2,zero,9313c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   930c4:	e0bff817 	ldw	r2,-32(fp)
   930c8:	10800417 	ldw	r2,16(r2)
   930cc:	11000104 	addi	r4,r2,4
   930d0:	e0fff817 	ldw	r3,-32(fp)
   930d4:	19000415 	stw	r4,16(r3)
   930d8:	10800017 	ldw	r2,0(r2)
   930dc:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   930e0:	e0bff817 	ldw	r2,-32(fp)
   930e4:	1080058b 	ldhu	r2,22(r2)
   930e8:	10bfffc4 	addi	r2,r2,-1
   930ec:	1007883a 	mov	r3,r2
   930f0:	e0bff817 	ldw	r2,-32(fp)
   930f4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   930f8:	e0bff817 	ldw	r2,-32(fp)
   930fc:	10c00417 	ldw	r3,16(r2)
   93100:	e0bff817 	ldw	r2,-32(fp)
   93104:	10800217 	ldw	r2,8(r2)
   93108:	1880041e 	bne	r3,r2,9311c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   9310c:	e0bff817 	ldw	r2,-32(fp)
   93110:	10c00117 	ldw	r3,4(r2)
   93114:	e0bff817 	ldw	r2,-32(fp)
   93118:	10c00415 	stw	r3,16(r2)
   9311c:	e0bff617 	ldw	r2,-40(fp)
   93120:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93124:	e0bff717 	ldw	r2,-36(fp)
   93128:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   9312c:	e0bfff17 	ldw	r2,-4(fp)
   93130:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   93134:	e0bff517 	ldw	r2,-44(fp)
   93138:	00004306 	br	93248 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   9313c:	d0a73917 	ldw	r2,-25372(gp)
   93140:	d0e73917 	ldw	r3,-25372(gp)
   93144:	18c00c03 	ldbu	r3,48(r3)
   93148:	18c00114 	ori	r3,r3,4
   9314c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   93150:	d0a73917 	ldw	r2,-25372(gp)
   93154:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   93158:	d0a73917 	ldw	r2,-25372(gp)
   9315c:	e0fffe0b 	ldhu	r3,-8(fp)
   93160:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   93164:	e13ffd17 	ldw	r4,-12(fp)
   93168:	008fa200 	call	8fa20 <OS_EventTaskWait>
   9316c:	e0bff617 	ldw	r2,-40(fp)
   93170:	e0bffb15 	stw	r2,-20(fp)
   93174:	e0bffb17 	ldw	r2,-20(fp)
   93178:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   9317c:	00902d40 	call	902d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93180:	0005303a 	rdctl	r2,status
   93184:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93188:	e0fff917 	ldw	r3,-28(fp)
   9318c:	00bfff84 	movi	r2,-2
   93190:	1884703a 	and	r2,r3,r2
   93194:	1001703a 	wrctl	status,r2
  
  return context;
   93198:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   9319c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   931a0:	d0a73917 	ldw	r2,-25372(gp)
   931a4:	10800c43 	ldbu	r2,49(r2)
   931a8:	10803fcc 	andi	r2,r2,255
   931ac:	10000326 	beq	r2,zero,931bc <OSQPend+0x1ec>
   931b0:	108000a0 	cmpeqi	r2,r2,2
   931b4:	1000071e 	bne	r2,zero,931d4 <OSQPend+0x204>
   931b8:	00000b06 	br	931e8 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   931bc:	d0a73917 	ldw	r2,-25372(gp)
   931c0:	10800917 	ldw	r2,36(r2)
   931c4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   931c8:	e0bfff17 	ldw	r2,-4(fp)
   931cc:	10000005 	stb	zero,0(r2)
             break;
   931d0:	00000e06 	br	9320c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   931d4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   931d8:	e0bfff17 	ldw	r2,-4(fp)
   931dc:	00c00384 	movi	r3,14
   931e0:	10c00005 	stb	r3,0(r2)
             break;
   931e4:	00000906 	br	9320c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   931e8:	d0a73917 	ldw	r2,-25372(gp)
   931ec:	e17ffd17 	ldw	r5,-12(fp)
   931f0:	1009883a 	mov	r4,r2
   931f4:	008fc800 	call	8fc80 <OS_EventTaskRemove>
             pmsg = (void *)0;
   931f8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   931fc:	e0bfff17 	ldw	r2,-4(fp)
   93200:	00c00284 	movi	r3,10
   93204:	10c00005 	stb	r3,0(r2)
             break;
   93208:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   9320c:	d0a73917 	ldw	r2,-25372(gp)
   93210:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   93214:	d0a73917 	ldw	r2,-25372(gp)
   93218:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   9321c:	d0a73917 	ldw	r2,-25372(gp)
   93220:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   93224:	d0a73917 	ldw	r2,-25372(gp)
   93228:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   9322c:	d0a73917 	ldw	r2,-25372(gp)
   93230:	10000915 	stw	zero,36(r2)
   93234:	e0bff617 	ldw	r2,-40(fp)
   93238:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9323c:	e0bffa17 	ldw	r2,-24(fp)
   93240:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   93244:	e0bff517 	ldw	r2,-44(fp)
}
   93248:	e037883a 	mov	sp,fp
   9324c:	dfc00117 	ldw	ra,4(sp)
   93250:	df000017 	ldw	fp,0(sp)
   93254:	dec00204 	addi	sp,sp,8
   93258:	f800283a 	ret

0009325c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   9325c:	defff604 	addi	sp,sp,-40
   93260:	dfc00915 	stw	ra,36(sp)
   93264:	df000815 	stw	fp,32(sp)
   93268:	df000804 	addi	fp,sp,32
   9326c:	e13ffd15 	stw	r4,-12(fp)
   93270:	2805883a 	mov	r2,r5
   93274:	e1bfff15 	stw	r6,-4(fp)
   93278:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   9327c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   93280:	e0bfff17 	ldw	r2,-4(fp)
   93284:	1000021e 	bne	r2,zero,93290 <OSQPendAbort+0x34>
        return (0);
   93288:	0005883a 	mov	r2,zero
   9328c:	00004906 	br	933b4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   93290:	e0bffd17 	ldw	r2,-12(fp)
   93294:	1000051e 	bne	r2,zero,932ac <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   93298:	e0bfff17 	ldw	r2,-4(fp)
   9329c:	00c00104 	movi	r3,4
   932a0:	10c00005 	stb	r3,0(r2)
        return (0);
   932a4:	0005883a 	mov	r2,zero
   932a8:	00004206 	br	933b4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   932ac:	e0bffd17 	ldw	r2,-12(fp)
   932b0:	10800003 	ldbu	r2,0(r2)
   932b4:	10803fcc 	andi	r2,r2,255
   932b8:	108000a0 	cmpeqi	r2,r2,2
   932bc:	1000051e 	bne	r2,zero,932d4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   932c0:	e0bfff17 	ldw	r2,-4(fp)
   932c4:	00c00044 	movi	r3,1
   932c8:	10c00005 	stb	r3,0(r2)
        return (0);
   932cc:	0005883a 	mov	r2,zero
   932d0:	00003806 	br	933b4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   932d4:	0005303a 	rdctl	r2,status
   932d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   932dc:	e0fffc17 	ldw	r3,-16(fp)
   932e0:	00bfff84 	movi	r2,-2
   932e4:	1884703a 	and	r2,r3,r2
   932e8:	1001703a 	wrctl	status,r2
  
  return context;
   932ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   932f0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   932f4:	e0bffd17 	ldw	r2,-12(fp)
   932f8:	10800283 	ldbu	r2,10(r2)
   932fc:	10803fcc 	andi	r2,r2,255
   93300:	10002526 	beq	r2,zero,93398 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   93304:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   93308:	e0bffe03 	ldbu	r2,-8(fp)
   9330c:	10800060 	cmpeqi	r2,r2,1
   93310:	10000e26 	beq	r2,zero,9334c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   93314:	00000806 	br	93338 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   93318:	01c00084 	movi	r7,2
   9331c:	01800104 	movi	r6,4
   93320:	000b883a 	mov	r5,zero
   93324:	e13ffd17 	ldw	r4,-12(fp)
   93328:	008f8880 	call	8f888 <OS_EventTaskRdy>
                     nbr_tasks++;
   9332c:	e0bff803 	ldbu	r2,-32(fp)
   93330:	10800044 	addi	r2,r2,1
   93334:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   93338:	e0bffd17 	ldw	r2,-12(fp)
   9333c:	10800283 	ldbu	r2,10(r2)
   93340:	10803fcc 	andi	r2,r2,255
   93344:	103ff41e 	bne	r2,zero,93318 <__alt_data_end+0xfffd4b18>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   93348:	00000906 	br	93370 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   9334c:	01c00084 	movi	r7,2
   93350:	01800104 	movi	r6,4
   93354:	000b883a 	mov	r5,zero
   93358:	e13ffd17 	ldw	r4,-12(fp)
   9335c:	008f8880 	call	8f888 <OS_EventTaskRdy>
                 nbr_tasks++;
   93360:	e0bff803 	ldbu	r2,-32(fp)
   93364:	10800044 	addi	r2,r2,1
   93368:	e0bff805 	stb	r2,-32(fp)
                 break;
   9336c:	0001883a 	nop
   93370:	e0bff917 	ldw	r2,-28(fp)
   93374:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93378:	e0bffa17 	ldw	r2,-24(fp)
   9337c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   93380:	00902d40 	call	902d4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   93384:	e0bfff17 	ldw	r2,-4(fp)
   93388:	00c00384 	movi	r3,14
   9338c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   93390:	e0bff803 	ldbu	r2,-32(fp)
   93394:	00000706 	br	933b4 <OSQPendAbort+0x158>
   93398:	e0bff917 	ldw	r2,-28(fp)
   9339c:	e0bffb15 	stw	r2,-20(fp)
   933a0:	e0bffb17 	ldw	r2,-20(fp)
   933a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   933a8:	e0bfff17 	ldw	r2,-4(fp)
   933ac:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   933b0:	0005883a 	mov	r2,zero
}
   933b4:	e037883a 	mov	sp,fp
   933b8:	dfc00117 	ldw	ra,4(sp)
   933bc:	df000017 	ldw	fp,0(sp)
   933c0:	dec00204 	addi	sp,sp,8
   933c4:	f800283a 	ret

000933c8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   933c8:	defff604 	addi	sp,sp,-40
   933cc:	dfc00915 	stw	ra,36(sp)
   933d0:	df000815 	stw	fp,32(sp)
   933d4:	df000804 	addi	fp,sp,32
   933d8:	e13ffe15 	stw	r4,-8(fp)
   933dc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   933e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   933e4:	e0bffe17 	ldw	r2,-8(fp)
   933e8:	1000021e 	bne	r2,zero,933f4 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   933ec:	00800104 	movi	r2,4
   933f0:	00004a06 	br	9351c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   933f4:	e0bffe17 	ldw	r2,-8(fp)
   933f8:	10800003 	ldbu	r2,0(r2)
   933fc:	10803fcc 	andi	r2,r2,255
   93400:	108000a0 	cmpeqi	r2,r2,2
   93404:	1000021e 	bne	r2,zero,93410 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   93408:	00800044 	movi	r2,1
   9340c:	00004306 	br	9351c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93410:	0005303a 	rdctl	r2,status
   93414:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93418:	e0fffd17 	ldw	r3,-12(fp)
   9341c:	00bfff84 	movi	r2,-2
   93420:	1884703a 	and	r2,r3,r2
   93424:	1001703a 	wrctl	status,r2
  
  return context;
   93428:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   9342c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   93430:	e0bffe17 	ldw	r2,-8(fp)
   93434:	10800283 	ldbu	r2,10(r2)
   93438:	10803fcc 	andi	r2,r2,255
   9343c:	10000c26 	beq	r2,zero,93470 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   93440:	000f883a 	mov	r7,zero
   93444:	01800104 	movi	r6,4
   93448:	e17fff17 	ldw	r5,-4(fp)
   9344c:	e13ffe17 	ldw	r4,-8(fp)
   93450:	008f8880 	call	8f888 <OS_EventTaskRdy>
   93454:	e0bff817 	ldw	r2,-32(fp)
   93458:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9345c:	e0bff917 	ldw	r2,-28(fp)
   93460:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   93464:	00902d40 	call	902d4 <OS_Sched>
        return (OS_ERR_NONE);
   93468:	0005883a 	mov	r2,zero
   9346c:	00002b06 	br	9351c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   93470:	e0bffe17 	ldw	r2,-8(fp)
   93474:	10800117 	ldw	r2,4(r2)
   93478:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   9347c:	e0bffb17 	ldw	r2,-20(fp)
   93480:	10c0058b 	ldhu	r3,22(r2)
   93484:	e0bffb17 	ldw	r2,-20(fp)
   93488:	1080050b 	ldhu	r2,20(r2)
   9348c:	18ffffcc 	andi	r3,r3,65535
   93490:	10bfffcc 	andi	r2,r2,65535
   93494:	18800636 	bltu	r3,r2,934b0 <OSQPost+0xe8>
   93498:	e0bff817 	ldw	r2,-32(fp)
   9349c:	e0bffa15 	stw	r2,-24(fp)
   934a0:	e0bffa17 	ldw	r2,-24(fp)
   934a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   934a8:	00800784 	movi	r2,30
   934ac:	00001b06 	br	9351c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   934b0:	e0bffb17 	ldw	r2,-20(fp)
   934b4:	10800317 	ldw	r2,12(r2)
   934b8:	11000104 	addi	r4,r2,4
   934bc:	e0fffb17 	ldw	r3,-20(fp)
   934c0:	19000315 	stw	r4,12(r3)
   934c4:	e0ffff17 	ldw	r3,-4(fp)
   934c8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   934cc:	e0bffb17 	ldw	r2,-20(fp)
   934d0:	1080058b 	ldhu	r2,22(r2)
   934d4:	10800044 	addi	r2,r2,1
   934d8:	1007883a 	mov	r3,r2
   934dc:	e0bffb17 	ldw	r2,-20(fp)
   934e0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   934e4:	e0bffb17 	ldw	r2,-20(fp)
   934e8:	10c00317 	ldw	r3,12(r2)
   934ec:	e0bffb17 	ldw	r2,-20(fp)
   934f0:	10800217 	ldw	r2,8(r2)
   934f4:	1880041e 	bne	r3,r2,93508 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   934f8:	e0bffb17 	ldw	r2,-20(fp)
   934fc:	10c00117 	ldw	r3,4(r2)
   93500:	e0bffb17 	ldw	r2,-20(fp)
   93504:	10c00315 	stw	r3,12(r2)
   93508:	e0bff817 	ldw	r2,-32(fp)
   9350c:	e0bffc15 	stw	r2,-16(fp)
   93510:	e0bffc17 	ldw	r2,-16(fp)
   93514:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   93518:	0005883a 	mov	r2,zero
}
   9351c:	e037883a 	mov	sp,fp
   93520:	dfc00117 	ldw	ra,4(sp)
   93524:	df000017 	ldw	fp,0(sp)
   93528:	dec00204 	addi	sp,sp,8
   9352c:	f800283a 	ret

00093530 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   93530:	defff604 	addi	sp,sp,-40
   93534:	dfc00915 	stw	ra,36(sp)
   93538:	df000815 	stw	fp,32(sp)
   9353c:	df000804 	addi	fp,sp,32
   93540:	e13ffe15 	stw	r4,-8(fp)
   93544:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93548:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9354c:	e0bffe17 	ldw	r2,-8(fp)
   93550:	1000021e 	bne	r2,zero,9355c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   93554:	00800104 	movi	r2,4
   93558:	00004c06 	br	9368c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   9355c:	e0bffe17 	ldw	r2,-8(fp)
   93560:	10800003 	ldbu	r2,0(r2)
   93564:	10803fcc 	andi	r2,r2,255
   93568:	108000a0 	cmpeqi	r2,r2,2
   9356c:	1000021e 	bne	r2,zero,93578 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   93570:	00800044 	movi	r2,1
   93574:	00004506 	br	9368c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93578:	0005303a 	rdctl	r2,status
   9357c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93580:	e0fffd17 	ldw	r3,-12(fp)
   93584:	00bfff84 	movi	r2,-2
   93588:	1884703a 	and	r2,r3,r2
   9358c:	1001703a 	wrctl	status,r2
  
  return context;
   93590:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   93594:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   93598:	e0bffe17 	ldw	r2,-8(fp)
   9359c:	10800283 	ldbu	r2,10(r2)
   935a0:	10803fcc 	andi	r2,r2,255
   935a4:	10000c26 	beq	r2,zero,935d8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   935a8:	000f883a 	mov	r7,zero
   935ac:	01800104 	movi	r6,4
   935b0:	e17fff17 	ldw	r5,-4(fp)
   935b4:	e13ffe17 	ldw	r4,-8(fp)
   935b8:	008f8880 	call	8f888 <OS_EventTaskRdy>
   935bc:	e0bff817 	ldw	r2,-32(fp)
   935c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   935c4:	e0bff917 	ldw	r2,-28(fp)
   935c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   935cc:	00902d40 	call	902d4 <OS_Sched>
        return (OS_ERR_NONE);
   935d0:	0005883a 	mov	r2,zero
   935d4:	00002d06 	br	9368c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   935d8:	e0bffe17 	ldw	r2,-8(fp)
   935dc:	10800117 	ldw	r2,4(r2)
   935e0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   935e4:	e0bffb17 	ldw	r2,-20(fp)
   935e8:	10c0058b 	ldhu	r3,22(r2)
   935ec:	e0bffb17 	ldw	r2,-20(fp)
   935f0:	1080050b 	ldhu	r2,20(r2)
   935f4:	18ffffcc 	andi	r3,r3,65535
   935f8:	10bfffcc 	andi	r2,r2,65535
   935fc:	18800636 	bltu	r3,r2,93618 <OSQPostFront+0xe8>
   93600:	e0bff817 	ldw	r2,-32(fp)
   93604:	e0bffa15 	stw	r2,-24(fp)
   93608:	e0bffa17 	ldw	r2,-24(fp)
   9360c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   93610:	00800784 	movi	r2,30
   93614:	00001d06 	br	9368c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   93618:	e0bffb17 	ldw	r2,-20(fp)
   9361c:	10c00417 	ldw	r3,16(r2)
   93620:	e0bffb17 	ldw	r2,-20(fp)
   93624:	10800117 	ldw	r2,4(r2)
   93628:	1880041e 	bne	r3,r2,9363c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   9362c:	e0bffb17 	ldw	r2,-20(fp)
   93630:	10c00217 	ldw	r3,8(r2)
   93634:	e0bffb17 	ldw	r2,-20(fp)
   93638:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   9363c:	e0bffb17 	ldw	r2,-20(fp)
   93640:	10800417 	ldw	r2,16(r2)
   93644:	10ffff04 	addi	r3,r2,-4
   93648:	e0bffb17 	ldw	r2,-20(fp)
   9364c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   93650:	e0bffb17 	ldw	r2,-20(fp)
   93654:	10800417 	ldw	r2,16(r2)
   93658:	e0ffff17 	ldw	r3,-4(fp)
   9365c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   93660:	e0bffb17 	ldw	r2,-20(fp)
   93664:	1080058b 	ldhu	r2,22(r2)
   93668:	10800044 	addi	r2,r2,1
   9366c:	1007883a 	mov	r3,r2
   93670:	e0bffb17 	ldw	r2,-20(fp)
   93674:	10c0058d 	sth	r3,22(r2)
   93678:	e0bff817 	ldw	r2,-32(fp)
   9367c:	e0bffc15 	stw	r2,-16(fp)
   93680:	e0bffc17 	ldw	r2,-16(fp)
   93684:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   93688:	0005883a 	mov	r2,zero
}
   9368c:	e037883a 	mov	sp,fp
   93690:	dfc00117 	ldw	ra,4(sp)
   93694:	df000017 	ldw	fp,0(sp)
   93698:	dec00204 	addi	sp,sp,8
   9369c:	f800283a 	ret

000936a0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   936a0:	defff504 	addi	sp,sp,-44
   936a4:	dfc00a15 	stw	ra,40(sp)
   936a8:	df000915 	stw	fp,36(sp)
   936ac:	df000904 	addi	fp,sp,36
   936b0:	e13ffd15 	stw	r4,-12(fp)
   936b4:	e17ffe15 	stw	r5,-8(fp)
   936b8:	3005883a 	mov	r2,r6
   936bc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   936c0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   936c4:	e0bffd17 	ldw	r2,-12(fp)
   936c8:	1000021e 	bne	r2,zero,936d4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   936cc:	00800104 	movi	r2,4
   936d0:	00007106 	br	93898 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   936d4:	e0bffd17 	ldw	r2,-12(fp)
   936d8:	10800003 	ldbu	r2,0(r2)
   936dc:	10803fcc 	andi	r2,r2,255
   936e0:	108000a0 	cmpeqi	r2,r2,2
   936e4:	1000021e 	bne	r2,zero,936f0 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   936e8:	00800044 	movi	r2,1
   936ec:	00006a06 	br	93898 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   936f0:	0005303a 	rdctl	r2,status
   936f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   936f8:	e0fffc17 	ldw	r3,-16(fp)
   936fc:	00bfff84 	movi	r2,-2
   93700:	1884703a 	and	r2,r3,r2
   93704:	1001703a 	wrctl	status,r2
  
  return context;
   93708:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   9370c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   93710:	e0bffd17 	ldw	r2,-12(fp)
   93714:	10800283 	ldbu	r2,10(r2)
   93718:	10803fcc 	andi	r2,r2,255
   9371c:	10001d26 	beq	r2,zero,93794 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   93720:	e0bfff03 	ldbu	r2,-4(fp)
   93724:	1080004c 	andi	r2,r2,1
   93728:	10000b26 	beq	r2,zero,93758 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   9372c:	00000506 	br	93744 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   93730:	000f883a 	mov	r7,zero
   93734:	01800104 	movi	r6,4
   93738:	e17ffe17 	ldw	r5,-8(fp)
   9373c:	e13ffd17 	ldw	r4,-12(fp)
   93740:	008f8880 	call	8f888 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   93744:	e0bffd17 	ldw	r2,-12(fp)
   93748:	10800283 	ldbu	r2,10(r2)
   9374c:	10803fcc 	andi	r2,r2,255
   93750:	103ff71e 	bne	r2,zero,93730 <__alt_data_end+0xfffd4f30>
   93754:	00000506 	br	9376c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   93758:	000f883a 	mov	r7,zero
   9375c:	01800104 	movi	r6,4
   93760:	e17ffe17 	ldw	r5,-8(fp)
   93764:	e13ffd17 	ldw	r4,-12(fp)
   93768:	008f8880 	call	8f888 <OS_EventTaskRdy>
   9376c:	e0bff717 	ldw	r2,-36(fp)
   93770:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93774:	e0bff817 	ldw	r2,-32(fp)
   93778:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   9377c:	e0bfff03 	ldbu	r2,-4(fp)
   93780:	1080010c 	andi	r2,r2,4
   93784:	1000011e 	bne	r2,zero,9378c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   93788:	00902d40 	call	902d4 <OS_Sched>
        }
        return (OS_ERR_NONE);
   9378c:	0005883a 	mov	r2,zero
   93790:	00004106 	br	93898 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   93794:	e0bffd17 	ldw	r2,-12(fp)
   93798:	10800117 	ldw	r2,4(r2)
   9379c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   937a0:	e0bffa17 	ldw	r2,-24(fp)
   937a4:	10c0058b 	ldhu	r3,22(r2)
   937a8:	e0bffa17 	ldw	r2,-24(fp)
   937ac:	1080050b 	ldhu	r2,20(r2)
   937b0:	18ffffcc 	andi	r3,r3,65535
   937b4:	10bfffcc 	andi	r2,r2,65535
   937b8:	18800636 	bltu	r3,r2,937d4 <OSQPostOpt+0x134>
   937bc:	e0bff717 	ldw	r2,-36(fp)
   937c0:	e0bff915 	stw	r2,-28(fp)
   937c4:	e0bff917 	ldw	r2,-28(fp)
   937c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   937cc:	00800784 	movi	r2,30
   937d0:	00003106 	br	93898 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   937d4:	e0bfff03 	ldbu	r2,-4(fp)
   937d8:	1080008c 	andi	r2,r2,2
   937dc:	10001326 	beq	r2,zero,9382c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   937e0:	e0bffa17 	ldw	r2,-24(fp)
   937e4:	10c00417 	ldw	r3,16(r2)
   937e8:	e0bffa17 	ldw	r2,-24(fp)
   937ec:	10800117 	ldw	r2,4(r2)
   937f0:	1880041e 	bne	r3,r2,93804 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   937f4:	e0bffa17 	ldw	r2,-24(fp)
   937f8:	10c00217 	ldw	r3,8(r2)
   937fc:	e0bffa17 	ldw	r2,-24(fp)
   93800:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   93804:	e0bffa17 	ldw	r2,-24(fp)
   93808:	10800417 	ldw	r2,16(r2)
   9380c:	10ffff04 	addi	r3,r2,-4
   93810:	e0bffa17 	ldw	r2,-24(fp)
   93814:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   93818:	e0bffa17 	ldw	r2,-24(fp)
   9381c:	10800417 	ldw	r2,16(r2)
   93820:	e0fffe17 	ldw	r3,-8(fp)
   93824:	10c00015 	stw	r3,0(r2)
   93828:	00001006 	br	9386c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   9382c:	e0bffa17 	ldw	r2,-24(fp)
   93830:	10800317 	ldw	r2,12(r2)
   93834:	11000104 	addi	r4,r2,4
   93838:	e0fffa17 	ldw	r3,-24(fp)
   9383c:	19000315 	stw	r4,12(r3)
   93840:	e0fffe17 	ldw	r3,-8(fp)
   93844:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   93848:	e0bffa17 	ldw	r2,-24(fp)
   9384c:	10c00317 	ldw	r3,12(r2)
   93850:	e0bffa17 	ldw	r2,-24(fp)
   93854:	10800217 	ldw	r2,8(r2)
   93858:	1880041e 	bne	r3,r2,9386c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   9385c:	e0bffa17 	ldw	r2,-24(fp)
   93860:	10c00117 	ldw	r3,4(r2)
   93864:	e0bffa17 	ldw	r2,-24(fp)
   93868:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   9386c:	e0bffa17 	ldw	r2,-24(fp)
   93870:	1080058b 	ldhu	r2,22(r2)
   93874:	10800044 	addi	r2,r2,1
   93878:	1007883a 	mov	r3,r2
   9387c:	e0bffa17 	ldw	r2,-24(fp)
   93880:	10c0058d 	sth	r3,22(r2)
   93884:	e0bff717 	ldw	r2,-36(fp)
   93888:	e0bffb15 	stw	r2,-20(fp)
   9388c:	e0bffb17 	ldw	r2,-20(fp)
   93890:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   93894:	0005883a 	mov	r2,zero
}
   93898:	e037883a 	mov	sp,fp
   9389c:	dfc00117 	ldw	ra,4(sp)
   938a0:	df000017 	ldw	fp,0(sp)
   938a4:	dec00204 	addi	sp,sp,8
   938a8:	f800283a 	ret

000938ac <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   938ac:	defff604 	addi	sp,sp,-40
   938b0:	df000915 	stw	fp,36(sp)
   938b4:	df000904 	addi	fp,sp,36
   938b8:	e13ffe15 	stw	r4,-8(fp)
   938bc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   938c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   938c4:	e0bffe17 	ldw	r2,-8(fp)
   938c8:	1000021e 	bne	r2,zero,938d4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   938cc:	00800104 	movi	r2,4
   938d0:	00004906 	br	939f8 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   938d4:	e0bfff17 	ldw	r2,-4(fp)
   938d8:	1000021e 	bne	r2,zero,938e4 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   938dc:	00800244 	movi	r2,9
   938e0:	00004506 	br	939f8 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   938e4:	e0bffe17 	ldw	r2,-8(fp)
   938e8:	10800003 	ldbu	r2,0(r2)
   938ec:	10803fcc 	andi	r2,r2,255
   938f0:	108000a0 	cmpeqi	r2,r2,2
   938f4:	1000021e 	bne	r2,zero,93900 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   938f8:	00800044 	movi	r2,1
   938fc:	00003e06 	br	939f8 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93900:	0005303a 	rdctl	r2,status
   93904:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93908:	e0fffd17 	ldw	r3,-12(fp)
   9390c:	00bfff84 	movi	r2,-2
   93910:	1884703a 	and	r2,r3,r2
   93914:	1001703a 	wrctl	status,r2
  
  return context;
   93918:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   9391c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   93920:	e0bffe17 	ldw	r2,-8(fp)
   93924:	10c00283 	ldbu	r3,10(r2)
   93928:	e0bfff17 	ldw	r2,-4(fp)
   9392c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   93930:	e0bffe17 	ldw	r2,-8(fp)
   93934:	108002c4 	addi	r2,r2,11
   93938:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   9393c:	e0bfff17 	ldw	r2,-4(fp)
   93940:	10800204 	addi	r2,r2,8
   93944:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   93948:	e03ff705 	stb	zero,-36(fp)
   9394c:	00000b06 	br	9397c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   93950:	e0bff917 	ldw	r2,-28(fp)
   93954:	10c00044 	addi	r3,r2,1
   93958:	e0fff915 	stw	r3,-28(fp)
   9395c:	e0fff817 	ldw	r3,-32(fp)
   93960:	19000044 	addi	r4,r3,1
   93964:	e13ff815 	stw	r4,-32(fp)
   93968:	18c00003 	ldbu	r3,0(r3)
   9396c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   93970:	e0bff703 	ldbu	r2,-36(fp)
   93974:	10800044 	addi	r2,r2,1
   93978:	e0bff705 	stb	r2,-36(fp)
   9397c:	e0bff703 	ldbu	r2,-36(fp)
   93980:	108000f0 	cmpltui	r2,r2,3
   93984:	103ff21e 	bne	r2,zero,93950 <__alt_data_end+0xfffd5150>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   93988:	e0bffe17 	ldw	r2,-8(fp)
   9398c:	10800117 	ldw	r2,4(r2)
   93990:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   93994:	e0bffc17 	ldw	r2,-16(fp)
   93998:	1080058b 	ldhu	r2,22(r2)
   9399c:	10bfffcc 	andi	r2,r2,65535
   939a0:	10000626 	beq	r2,zero,939bc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   939a4:	e0bffc17 	ldw	r2,-16(fp)
   939a8:	10800417 	ldw	r2,16(r2)
   939ac:	10c00017 	ldw	r3,0(r2)
   939b0:	e0bfff17 	ldw	r2,-4(fp)
   939b4:	10c00015 	stw	r3,0(r2)
   939b8:	00000206 	br	939c4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   939bc:	e0bfff17 	ldw	r2,-4(fp)
   939c0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   939c4:	e0bffc17 	ldw	r2,-16(fp)
   939c8:	10c0058b 	ldhu	r3,22(r2)
   939cc:	e0bfff17 	ldw	r2,-4(fp)
   939d0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   939d4:	e0bffc17 	ldw	r2,-16(fp)
   939d8:	10c0050b 	ldhu	r3,20(r2)
   939dc:	e0bfff17 	ldw	r2,-4(fp)
   939e0:	10c0018d 	sth	r3,6(r2)
   939e4:	e0bffa17 	ldw	r2,-24(fp)
   939e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   939ec:	e0bffb17 	ldw	r2,-20(fp)
   939f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   939f4:	0005883a 	mov	r2,zero
}
   939f8:	e037883a 	mov	sp,fp
   939fc:	df000017 	ldw	fp,0(sp)
   93a00:	dec00104 	addi	sp,sp,4
   93a04:	f800283a 	ret

00093a08 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   93a08:	defffb04 	addi	sp,sp,-20
   93a0c:	dfc00415 	stw	ra,16(sp)
   93a10:	df000315 	stw	fp,12(sp)
   93a14:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   93a18:	01407804 	movi	r5,480
   93a1c:	010002b4 	movhi	r4,10
   93a20:	2135ed04 	addi	r4,r4,-10316
   93a24:	00902180 	call	90218 <OS_MemClr>
    pq1 = &OSQTbl[0];
   93a28:	008002b4 	movhi	r2,10
   93a2c:	10b5ed04 	addi	r2,r2,-10316
   93a30:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   93a34:	008002b4 	movhi	r2,10
   93a38:	10b5f304 	addi	r2,r2,-10292
   93a3c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   93a40:	e03ffd0d 	sth	zero,-12(fp)
   93a44:	00000c06 	br	93a78 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   93a48:	e0bffe17 	ldw	r2,-8(fp)
   93a4c:	e0ffff17 	ldw	r3,-4(fp)
   93a50:	10c00015 	stw	r3,0(r2)
        pq1++;
   93a54:	e0bffe17 	ldw	r2,-8(fp)
   93a58:	10800604 	addi	r2,r2,24
   93a5c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   93a60:	e0bfff17 	ldw	r2,-4(fp)
   93a64:	10800604 	addi	r2,r2,24
   93a68:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   93a6c:	e0bffd0b 	ldhu	r2,-12(fp)
   93a70:	10800044 	addi	r2,r2,1
   93a74:	e0bffd0d 	sth	r2,-12(fp)
   93a78:	e0bffd0b 	ldhu	r2,-12(fp)
   93a7c:	108004f0 	cmpltui	r2,r2,19
   93a80:	103ff11e 	bne	r2,zero,93a48 <__alt_data_end+0xfffd5248>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   93a84:	e0bffe17 	ldw	r2,-8(fp)
   93a88:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   93a8c:	008002b4 	movhi	r2,10
   93a90:	10b5ed04 	addi	r2,r2,-10316
   93a94:	d0a73515 	stw	r2,-25388(gp)
#endif
}
   93a98:	0001883a 	nop
   93a9c:	e037883a 	mov	sp,fp
   93aa0:	dfc00117 	ldw	ra,4(sp)
   93aa4:	df000017 	ldw	fp,0(sp)
   93aa8:	dec00204 	addi	sp,sp,8
   93aac:	f800283a 	ret

00093ab0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   93ab0:	defffa04 	addi	sp,sp,-24
   93ab4:	df000515 	stw	fp,20(sp)
   93ab8:	df000504 	addi	fp,sp,20
   93abc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93ac0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   93ac4:	e0bfff17 	ldw	r2,-4(fp)
   93ac8:	1000021e 	bne	r2,zero,93ad4 <OSSemAccept+0x24>
        return (0);
   93acc:	0005883a 	mov	r2,zero
   93ad0:	00001f06 	br	93b50 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   93ad4:	e0bfff17 	ldw	r2,-4(fp)
   93ad8:	10800003 	ldbu	r2,0(r2)
   93adc:	10803fcc 	andi	r2,r2,255
   93ae0:	108000e0 	cmpeqi	r2,r2,3
   93ae4:	1000021e 	bne	r2,zero,93af0 <OSSemAccept+0x40>
        return (0);
   93ae8:	0005883a 	mov	r2,zero
   93aec:	00001806 	br	93b50 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93af0:	0005303a 	rdctl	r2,status
   93af4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93af8:	e0fffe17 	ldw	r3,-8(fp)
   93afc:	00bfff84 	movi	r2,-2
   93b00:	1884703a 	and	r2,r3,r2
   93b04:	1001703a 	wrctl	status,r2
  
  return context;
   93b08:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   93b0c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   93b10:	e0bfff17 	ldw	r2,-4(fp)
   93b14:	1080020b 	ldhu	r2,8(r2)
   93b18:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   93b1c:	e0bffd0b 	ldhu	r2,-12(fp)
   93b20:	10000626 	beq	r2,zero,93b3c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   93b24:	e0bfff17 	ldw	r2,-4(fp)
   93b28:	1080020b 	ldhu	r2,8(r2)
   93b2c:	10bfffc4 	addi	r2,r2,-1
   93b30:	1007883a 	mov	r3,r2
   93b34:	e0bfff17 	ldw	r2,-4(fp)
   93b38:	10c0020d 	sth	r3,8(r2)
   93b3c:	e0bffb17 	ldw	r2,-20(fp)
   93b40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93b44:	e0bffc17 	ldw	r2,-16(fp)
   93b48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   93b4c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   93b50:	e037883a 	mov	sp,fp
   93b54:	df000017 	ldw	fp,0(sp)
   93b58:	dec00104 	addi	sp,sp,4
   93b5c:	f800283a 	ret

00093b60 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   93b60:	defff904 	addi	sp,sp,-28
   93b64:	dfc00615 	stw	ra,24(sp)
   93b68:	df000515 	stw	fp,20(sp)
   93b6c:	df000504 	addi	fp,sp,20
   93b70:	2005883a 	mov	r2,r4
   93b74:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   93b78:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   93b7c:	d0a73803 	ldbu	r2,-25376(gp)
   93b80:	10803fcc 	andi	r2,r2,255
   93b84:	10000226 	beq	r2,zero,93b90 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   93b88:	0005883a 	mov	r2,zero
   93b8c:	00002506 	br	93c24 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93b90:	0005303a 	rdctl	r2,status
   93b94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93b98:	e0fffe17 	ldw	r3,-8(fp)
   93b9c:	00bfff84 	movi	r2,-2
   93ba0:	1884703a 	and	r2,r3,r2
   93ba4:	1001703a 	wrctl	status,r2
  
  return context;
   93ba8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   93bac:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   93bb0:	d0a73717 	ldw	r2,-25380(gp)
   93bb4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   93bb8:	d0a73717 	ldw	r2,-25380(gp)
   93bbc:	10000326 	beq	r2,zero,93bcc <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   93bc0:	d0a73717 	ldw	r2,-25380(gp)
   93bc4:	10800117 	ldw	r2,4(r2)
   93bc8:	d0a73715 	stw	r2,-25380(gp)
   93bcc:	e0bffb17 	ldw	r2,-20(fp)
   93bd0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93bd4:	e0bffc17 	ldw	r2,-16(fp)
   93bd8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   93bdc:	e0bffd17 	ldw	r2,-12(fp)
   93be0:	10000f26 	beq	r2,zero,93c20 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   93be4:	e0bffd17 	ldw	r2,-12(fp)
   93be8:	00c000c4 	movi	r3,3
   93bec:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   93bf0:	e0bffd17 	ldw	r2,-12(fp)
   93bf4:	e0ffff0b 	ldhu	r3,-4(fp)
   93bf8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   93bfc:	e0bffd17 	ldw	r2,-12(fp)
   93c00:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   93c04:	e0bffd17 	ldw	r2,-12(fp)
   93c08:	00c00fc4 	movi	r3,63
   93c0c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   93c10:	e0bffd17 	ldw	r2,-12(fp)
   93c14:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   93c18:	e13ffd17 	ldw	r4,-12(fp)
   93c1c:	008fe380 	call	8fe38 <OS_EventWaitListInit>
    }
    return (pevent);
   93c20:	e0bffd17 	ldw	r2,-12(fp)
}
   93c24:	e037883a 	mov	sp,fp
   93c28:	dfc00117 	ldw	ra,4(sp)
   93c2c:	df000017 	ldw	fp,0(sp)
   93c30:	dec00204 	addi	sp,sp,8
   93c34:	f800283a 	ret

00093c38 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   93c38:	defff304 	addi	sp,sp,-52
   93c3c:	dfc00c15 	stw	ra,48(sp)
   93c40:	df000b15 	stw	fp,44(sp)
   93c44:	df000b04 	addi	fp,sp,44
   93c48:	e13ffd15 	stw	r4,-12(fp)
   93c4c:	2805883a 	mov	r2,r5
   93c50:	e1bfff15 	stw	r6,-4(fp)
   93c54:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   93c58:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   93c5c:	e0bfff17 	ldw	r2,-4(fp)
   93c60:	1000021e 	bne	r2,zero,93c6c <OSSemDel+0x34>
        return (pevent);
   93c64:	e0bffd17 	ldw	r2,-12(fp)
   93c68:	00007e06 	br	93e64 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   93c6c:	e0bffd17 	ldw	r2,-12(fp)
   93c70:	1000051e 	bne	r2,zero,93c88 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   93c74:	e0bfff17 	ldw	r2,-4(fp)
   93c78:	00c00104 	movi	r3,4
   93c7c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   93c80:	e0bffd17 	ldw	r2,-12(fp)
   93c84:	00007706 	br	93e64 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   93c88:	e0bffd17 	ldw	r2,-12(fp)
   93c8c:	10800003 	ldbu	r2,0(r2)
   93c90:	10803fcc 	andi	r2,r2,255
   93c94:	108000e0 	cmpeqi	r2,r2,3
   93c98:	1000051e 	bne	r2,zero,93cb0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   93c9c:	e0bfff17 	ldw	r2,-4(fp)
   93ca0:	00c00044 	movi	r3,1
   93ca4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   93ca8:	e0bffd17 	ldw	r2,-12(fp)
   93cac:	00006d06 	br	93e64 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   93cb0:	d0a73803 	ldbu	r2,-25376(gp)
   93cb4:	10803fcc 	andi	r2,r2,255
   93cb8:	10000526 	beq	r2,zero,93cd0 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   93cbc:	e0bfff17 	ldw	r2,-4(fp)
   93cc0:	00c003c4 	movi	r3,15
   93cc4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   93cc8:	e0bffd17 	ldw	r2,-12(fp)
   93ccc:	00006506 	br	93e64 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93cd0:	0005303a 	rdctl	r2,status
   93cd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93cd8:	e0fffc17 	ldw	r3,-16(fp)
   93cdc:	00bfff84 	movi	r2,-2
   93ce0:	1884703a 	and	r2,r3,r2
   93ce4:	1001703a 	wrctl	status,r2
  
  return context;
   93ce8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   93cec:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   93cf0:	e0bffd17 	ldw	r2,-12(fp)
   93cf4:	10800283 	ldbu	r2,10(r2)
   93cf8:	10803fcc 	andi	r2,r2,255
   93cfc:	10000326 	beq	r2,zero,93d0c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   93d00:	00800044 	movi	r2,1
   93d04:	e0bff505 	stb	r2,-44(fp)
   93d08:	00000106 	br	93d10 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   93d0c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   93d10:	e0bffe03 	ldbu	r2,-8(fp)
   93d14:	10000326 	beq	r2,zero,93d24 <OSSemDel+0xec>
   93d18:	10800060 	cmpeqi	r2,r2,1
   93d1c:	1000281e 	bne	r2,zero,93dc0 <OSSemDel+0x188>
   93d20:	00004506 	br	93e38 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   93d24:	e0bff503 	ldbu	r2,-44(fp)
   93d28:	1000161e 	bne	r2,zero,93d84 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   93d2c:	e0bffd17 	ldw	r2,-12(fp)
   93d30:	00c00fc4 	movi	r3,63
   93d34:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   93d38:	e0bffd17 	ldw	r2,-12(fp)
   93d3c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   93d40:	e0bffd17 	ldw	r2,-12(fp)
   93d44:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   93d48:	d0e73717 	ldw	r3,-25380(gp)
   93d4c:	e0bffd17 	ldw	r2,-12(fp)
   93d50:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   93d54:	e0bffd17 	ldw	r2,-12(fp)
   93d58:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   93d5c:	e0bffd17 	ldw	r2,-12(fp)
   93d60:	d0a73715 	stw	r2,-25380(gp)
   93d64:	e0bff717 	ldw	r2,-36(fp)
   93d68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93d6c:	e0bff817 	ldw	r2,-32(fp)
   93d70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   93d74:	e0bfff17 	ldw	r2,-4(fp)
   93d78:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   93d7c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   93d80:	00003706 	br	93e60 <OSSemDel+0x228>
   93d84:	e0bff717 	ldw	r2,-36(fp)
   93d88:	e0bff915 	stw	r2,-28(fp)
   93d8c:	e0bff917 	ldw	r2,-28(fp)
   93d90:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   93d94:	e0bfff17 	ldw	r2,-4(fp)
   93d98:	00c01244 	movi	r3,73
   93d9c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   93da0:	e0bffd17 	ldw	r2,-12(fp)
   93da4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   93da8:	00002d06 	br	93e60 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   93dac:	000f883a 	mov	r7,zero
   93db0:	01800044 	movi	r6,1
   93db4:	000b883a 	mov	r5,zero
   93db8:	e13ffd17 	ldw	r4,-12(fp)
   93dbc:	008f8880 	call	8f888 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   93dc0:	e0bffd17 	ldw	r2,-12(fp)
   93dc4:	10800283 	ldbu	r2,10(r2)
   93dc8:	10803fcc 	andi	r2,r2,255
   93dcc:	103ff71e 	bne	r2,zero,93dac <__alt_data_end+0xfffd55ac>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   93dd0:	e0bffd17 	ldw	r2,-12(fp)
   93dd4:	00c00fc4 	movi	r3,63
   93dd8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   93ddc:	e0bffd17 	ldw	r2,-12(fp)
   93de0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   93de4:	e0bffd17 	ldw	r2,-12(fp)
   93de8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   93dec:	d0e73717 	ldw	r3,-25380(gp)
   93df0:	e0bffd17 	ldw	r2,-12(fp)
   93df4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   93df8:	e0bffd17 	ldw	r2,-12(fp)
   93dfc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   93e00:	e0bffd17 	ldw	r2,-12(fp)
   93e04:	d0a73715 	stw	r2,-25380(gp)
   93e08:	e0bff717 	ldw	r2,-36(fp)
   93e0c:	e0bffa15 	stw	r2,-24(fp)
   93e10:	e0bffa17 	ldw	r2,-24(fp)
   93e14:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   93e18:	e0bff503 	ldbu	r2,-44(fp)
   93e1c:	10800058 	cmpnei	r2,r2,1
   93e20:	1000011e 	bne	r2,zero,93e28 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   93e24:	00902d40 	call	902d4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   93e28:	e0bfff17 	ldw	r2,-4(fp)
   93e2c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   93e30:	e03ff615 	stw	zero,-40(fp)
             break;
   93e34:	00000a06 	br	93e60 <OSSemDel+0x228>
   93e38:	e0bff717 	ldw	r2,-36(fp)
   93e3c:	e0bffb15 	stw	r2,-20(fp)
   93e40:	e0bffb17 	ldw	r2,-20(fp)
   93e44:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   93e48:	e0bfff17 	ldw	r2,-4(fp)
   93e4c:	00c001c4 	movi	r3,7
   93e50:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   93e54:	e0bffd17 	ldw	r2,-12(fp)
   93e58:	e0bff615 	stw	r2,-40(fp)
             break;
   93e5c:	0001883a 	nop
    }
    return (pevent_return);
   93e60:	e0bff617 	ldw	r2,-40(fp)
}
   93e64:	e037883a 	mov	sp,fp
   93e68:	dfc00117 	ldw	ra,4(sp)
   93e6c:	df000017 	ldw	fp,0(sp)
   93e70:	dec00204 	addi	sp,sp,8
   93e74:	f800283a 	ret

00093e78 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   93e78:	defff504 	addi	sp,sp,-44
   93e7c:	dfc00a15 	stw	ra,40(sp)
   93e80:	df000915 	stw	fp,36(sp)
   93e84:	df000904 	addi	fp,sp,36
   93e88:	e13ffd15 	stw	r4,-12(fp)
   93e8c:	2805883a 	mov	r2,r5
   93e90:	e1bfff15 	stw	r6,-4(fp)
   93e94:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93e98:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   93e9c:	e0bfff17 	ldw	r2,-4(fp)
   93ea0:	10007226 	beq	r2,zero,9406c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   93ea4:	e0bffd17 	ldw	r2,-12(fp)
   93ea8:	1000041e 	bne	r2,zero,93ebc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   93eac:	e0bfff17 	ldw	r2,-4(fp)
   93eb0:	00c00104 	movi	r3,4
   93eb4:	10c00005 	stb	r3,0(r2)
        return;
   93eb8:	00006d06 	br	94070 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   93ebc:	e0bffd17 	ldw	r2,-12(fp)
   93ec0:	10800003 	ldbu	r2,0(r2)
   93ec4:	10803fcc 	andi	r2,r2,255
   93ec8:	108000e0 	cmpeqi	r2,r2,3
   93ecc:	1000041e 	bne	r2,zero,93ee0 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   93ed0:	e0bfff17 	ldw	r2,-4(fp)
   93ed4:	00c00044 	movi	r3,1
   93ed8:	10c00005 	stb	r3,0(r2)
        return;
   93edc:	00006406 	br	94070 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   93ee0:	d0a73803 	ldbu	r2,-25376(gp)
   93ee4:	10803fcc 	andi	r2,r2,255
   93ee8:	10000426 	beq	r2,zero,93efc <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   93eec:	e0bfff17 	ldw	r2,-4(fp)
   93ef0:	00c00084 	movi	r3,2
   93ef4:	10c00005 	stb	r3,0(r2)
        return;
   93ef8:	00005d06 	br	94070 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   93efc:	d0a72a03 	ldbu	r2,-25432(gp)
   93f00:	10803fcc 	andi	r2,r2,255
   93f04:	10000426 	beq	r2,zero,93f18 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   93f08:	e0bfff17 	ldw	r2,-4(fp)
   93f0c:	00c00344 	movi	r3,13
   93f10:	10c00005 	stb	r3,0(r2)
        return;
   93f14:	00005606 	br	94070 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93f18:	0005303a 	rdctl	r2,status
   93f1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93f20:	e0fffc17 	ldw	r3,-16(fp)
   93f24:	00bfff84 	movi	r2,-2
   93f28:	1884703a 	and	r2,r3,r2
   93f2c:	1001703a 	wrctl	status,r2
  
  return context;
   93f30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   93f34:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   93f38:	e0bffd17 	ldw	r2,-12(fp)
   93f3c:	1080020b 	ldhu	r2,8(r2)
   93f40:	10bfffcc 	andi	r2,r2,65535
   93f44:	10000d26 	beq	r2,zero,93f7c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   93f48:	e0bffd17 	ldw	r2,-12(fp)
   93f4c:	1080020b 	ldhu	r2,8(r2)
   93f50:	10bfffc4 	addi	r2,r2,-1
   93f54:	1007883a 	mov	r3,r2
   93f58:	e0bffd17 	ldw	r2,-12(fp)
   93f5c:	10c0020d 	sth	r3,8(r2)
   93f60:	e0bff717 	ldw	r2,-36(fp)
   93f64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93f68:	e0bff817 	ldw	r2,-32(fp)
   93f6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   93f70:	e0bfff17 	ldw	r2,-4(fp)
   93f74:	10000005 	stb	zero,0(r2)
        return;
   93f78:	00003d06 	br	94070 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   93f7c:	d0a73917 	ldw	r2,-25372(gp)
   93f80:	d0e73917 	ldw	r3,-25372(gp)
   93f84:	18c00c03 	ldbu	r3,48(r3)
   93f88:	18c00054 	ori	r3,r3,1
   93f8c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   93f90:	d0a73917 	ldw	r2,-25372(gp)
   93f94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   93f98:	d0a73917 	ldw	r2,-25372(gp)
   93f9c:	e0fffe0b 	ldhu	r3,-8(fp)
   93fa0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   93fa4:	e13ffd17 	ldw	r4,-12(fp)
   93fa8:	008fa200 	call	8fa20 <OS_EventTaskWait>
   93fac:	e0bff717 	ldw	r2,-36(fp)
   93fb0:	e0bffb15 	stw	r2,-20(fp)
   93fb4:	e0bffb17 	ldw	r2,-20(fp)
   93fb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   93fbc:	00902d40 	call	902d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93fc0:	0005303a 	rdctl	r2,status
   93fc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93fc8:	e0fff917 	ldw	r3,-28(fp)
   93fcc:	00bfff84 	movi	r2,-2
   93fd0:	1884703a 	and	r2,r3,r2
   93fd4:	1001703a 	wrctl	status,r2
  
  return context;
   93fd8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   93fdc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   93fe0:	d0a73917 	ldw	r2,-25372(gp)
   93fe4:	10800c43 	ldbu	r2,49(r2)
   93fe8:	10803fcc 	andi	r2,r2,255
   93fec:	10000326 	beq	r2,zero,93ffc <OSSemPend+0x184>
   93ff0:	108000a0 	cmpeqi	r2,r2,2
   93ff4:	1000041e 	bne	r2,zero,94008 <OSSemPend+0x190>
   93ff8:	00000706 	br	94018 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   93ffc:	e0bfff17 	ldw	r2,-4(fp)
   94000:	10000005 	stb	zero,0(r2)
             break;
   94004:	00000c06 	br	94038 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   94008:	e0bfff17 	ldw	r2,-4(fp)
   9400c:	00c00384 	movi	r3,14
   94010:	10c00005 	stb	r3,0(r2)
             break;
   94014:	00000806 	br	94038 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   94018:	d0a73917 	ldw	r2,-25372(gp)
   9401c:	e17ffd17 	ldw	r5,-12(fp)
   94020:	1009883a 	mov	r4,r2
   94024:	008fc800 	call	8fc80 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   94028:	e0bfff17 	ldw	r2,-4(fp)
   9402c:	00c00284 	movi	r3,10
   94030:	10c00005 	stb	r3,0(r2)
             break;
   94034:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   94038:	d0a73917 	ldw	r2,-25372(gp)
   9403c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   94040:	d0a73917 	ldw	r2,-25372(gp)
   94044:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   94048:	d0a73917 	ldw	r2,-25372(gp)
   9404c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   94050:	d0a73917 	ldw	r2,-25372(gp)
   94054:	10000815 	stw	zero,32(r2)
   94058:	e0bff717 	ldw	r2,-36(fp)
   9405c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94060:	e0bffa17 	ldw	r2,-24(fp)
   94064:	1001703a 	wrctl	status,r2
   94068:	00000106 	br	94070 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   9406c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   94070:	e037883a 	mov	sp,fp
   94074:	dfc00117 	ldw	ra,4(sp)
   94078:	df000017 	ldw	fp,0(sp)
   9407c:	dec00204 	addi	sp,sp,8
   94080:	f800283a 	ret

00094084 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   94084:	defff604 	addi	sp,sp,-40
   94088:	dfc00915 	stw	ra,36(sp)
   9408c:	df000815 	stw	fp,32(sp)
   94090:	df000804 	addi	fp,sp,32
   94094:	e13ffd15 	stw	r4,-12(fp)
   94098:	2805883a 	mov	r2,r5
   9409c:	e1bfff15 	stw	r6,-4(fp)
   940a0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   940a4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   940a8:	e0bfff17 	ldw	r2,-4(fp)
   940ac:	1000021e 	bne	r2,zero,940b8 <OSSemPendAbort+0x34>
        return (0);
   940b0:	0005883a 	mov	r2,zero
   940b4:	00004906 	br	941dc <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   940b8:	e0bffd17 	ldw	r2,-12(fp)
   940bc:	1000051e 	bne	r2,zero,940d4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   940c0:	e0bfff17 	ldw	r2,-4(fp)
   940c4:	00c00104 	movi	r3,4
   940c8:	10c00005 	stb	r3,0(r2)
        return (0);
   940cc:	0005883a 	mov	r2,zero
   940d0:	00004206 	br	941dc <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   940d4:	e0bffd17 	ldw	r2,-12(fp)
   940d8:	10800003 	ldbu	r2,0(r2)
   940dc:	10803fcc 	andi	r2,r2,255
   940e0:	108000e0 	cmpeqi	r2,r2,3
   940e4:	1000051e 	bne	r2,zero,940fc <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   940e8:	e0bfff17 	ldw	r2,-4(fp)
   940ec:	00c00044 	movi	r3,1
   940f0:	10c00005 	stb	r3,0(r2)
        return (0);
   940f4:	0005883a 	mov	r2,zero
   940f8:	00003806 	br	941dc <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   940fc:	0005303a 	rdctl	r2,status
   94100:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94104:	e0fffc17 	ldw	r3,-16(fp)
   94108:	00bfff84 	movi	r2,-2
   9410c:	1884703a 	and	r2,r3,r2
   94110:	1001703a 	wrctl	status,r2
  
  return context;
   94114:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   94118:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   9411c:	e0bffd17 	ldw	r2,-12(fp)
   94120:	10800283 	ldbu	r2,10(r2)
   94124:	10803fcc 	andi	r2,r2,255
   94128:	10002526 	beq	r2,zero,941c0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   9412c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   94130:	e0bffe03 	ldbu	r2,-8(fp)
   94134:	10800060 	cmpeqi	r2,r2,1
   94138:	10000e26 	beq	r2,zero,94174 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   9413c:	00000806 	br	94160 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   94140:	01c00084 	movi	r7,2
   94144:	01800044 	movi	r6,1
   94148:	000b883a 	mov	r5,zero
   9414c:	e13ffd17 	ldw	r4,-12(fp)
   94150:	008f8880 	call	8f888 <OS_EventTaskRdy>
                     nbr_tasks++;
   94154:	e0bff803 	ldbu	r2,-32(fp)
   94158:	10800044 	addi	r2,r2,1
   9415c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   94160:	e0bffd17 	ldw	r2,-12(fp)
   94164:	10800283 	ldbu	r2,10(r2)
   94168:	10803fcc 	andi	r2,r2,255
   9416c:	103ff41e 	bne	r2,zero,94140 <__alt_data_end+0xfffd5940>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   94170:	00000906 	br	94198 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   94174:	01c00084 	movi	r7,2
   94178:	01800044 	movi	r6,1
   9417c:	000b883a 	mov	r5,zero
   94180:	e13ffd17 	ldw	r4,-12(fp)
   94184:	008f8880 	call	8f888 <OS_EventTaskRdy>
                 nbr_tasks++;
   94188:	e0bff803 	ldbu	r2,-32(fp)
   9418c:	10800044 	addi	r2,r2,1
   94190:	e0bff805 	stb	r2,-32(fp)
                 break;
   94194:	0001883a 	nop
   94198:	e0bff917 	ldw	r2,-28(fp)
   9419c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   941a0:	e0bffa17 	ldw	r2,-24(fp)
   941a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   941a8:	00902d40 	call	902d4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   941ac:	e0bfff17 	ldw	r2,-4(fp)
   941b0:	00c00384 	movi	r3,14
   941b4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   941b8:	e0bff803 	ldbu	r2,-32(fp)
   941bc:	00000706 	br	941dc <OSSemPendAbort+0x158>
   941c0:	e0bff917 	ldw	r2,-28(fp)
   941c4:	e0bffb15 	stw	r2,-20(fp)
   941c8:	e0bffb17 	ldw	r2,-20(fp)
   941cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   941d0:	e0bfff17 	ldw	r2,-4(fp)
   941d4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   941d8:	0005883a 	mov	r2,zero
}
   941dc:	e037883a 	mov	sp,fp
   941e0:	dfc00117 	ldw	ra,4(sp)
   941e4:	df000017 	ldw	fp,0(sp)
   941e8:	dec00204 	addi	sp,sp,8
   941ec:	f800283a 	ret

000941f0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   941f0:	defff804 	addi	sp,sp,-32
   941f4:	dfc00715 	stw	ra,28(sp)
   941f8:	df000615 	stw	fp,24(sp)
   941fc:	df000604 	addi	fp,sp,24
   94200:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   94204:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   94208:	e0bfff17 	ldw	r2,-4(fp)
   9420c:	1000021e 	bne	r2,zero,94218 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   94210:	00800104 	movi	r2,4
   94214:	00003506 	br	942ec <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   94218:	e0bfff17 	ldw	r2,-4(fp)
   9421c:	10800003 	ldbu	r2,0(r2)
   94220:	10803fcc 	andi	r2,r2,255
   94224:	108000e0 	cmpeqi	r2,r2,3
   94228:	1000021e 	bne	r2,zero,94234 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   9422c:	00800044 	movi	r2,1
   94230:	00002e06 	br	942ec <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94234:	0005303a 	rdctl	r2,status
   94238:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9423c:	e0fffe17 	ldw	r3,-8(fp)
   94240:	00bfff84 	movi	r2,-2
   94244:	1884703a 	and	r2,r3,r2
   94248:	1001703a 	wrctl	status,r2
  
  return context;
   9424c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   94250:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   94254:	e0bfff17 	ldw	r2,-4(fp)
   94258:	10800283 	ldbu	r2,10(r2)
   9425c:	10803fcc 	andi	r2,r2,255
   94260:	10000c26 	beq	r2,zero,94294 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   94264:	000f883a 	mov	r7,zero
   94268:	01800044 	movi	r6,1
   9426c:	000b883a 	mov	r5,zero
   94270:	e13fff17 	ldw	r4,-4(fp)
   94274:	008f8880 	call	8f888 <OS_EventTaskRdy>
   94278:	e0bffa17 	ldw	r2,-24(fp)
   9427c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94280:	e0bffb17 	ldw	r2,-20(fp)
   94284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   94288:	00902d40 	call	902d4 <OS_Sched>
        return (OS_ERR_NONE);
   9428c:	0005883a 	mov	r2,zero
   94290:	00001606 	br	942ec <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   94294:	e0bfff17 	ldw	r2,-4(fp)
   94298:	1080020b 	ldhu	r2,8(r2)
   9429c:	10ffffcc 	andi	r3,r2,65535
   942a0:	00bfffd4 	movui	r2,65535
   942a4:	18800c26 	beq	r3,r2,942d8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   942a8:	e0bfff17 	ldw	r2,-4(fp)
   942ac:	1080020b 	ldhu	r2,8(r2)
   942b0:	10800044 	addi	r2,r2,1
   942b4:	1007883a 	mov	r3,r2
   942b8:	e0bfff17 	ldw	r2,-4(fp)
   942bc:	10c0020d 	sth	r3,8(r2)
   942c0:	e0bffa17 	ldw	r2,-24(fp)
   942c4:	e0bffc15 	stw	r2,-16(fp)
   942c8:	e0bffc17 	ldw	r2,-16(fp)
   942cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   942d0:	0005883a 	mov	r2,zero
   942d4:	00000506 	br	942ec <OSSemPost+0xfc>
   942d8:	e0bffa17 	ldw	r2,-24(fp)
   942dc:	e0bffd15 	stw	r2,-12(fp)
   942e0:	e0bffd17 	ldw	r2,-12(fp)
   942e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   942e8:	00800c84 	movi	r2,50
}
   942ec:	e037883a 	mov	sp,fp
   942f0:	dfc00117 	ldw	ra,4(sp)
   942f4:	df000017 	ldw	fp,0(sp)
   942f8:	dec00204 	addi	sp,sp,8
   942fc:	f800283a 	ret

00094300 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   94300:	defff704 	addi	sp,sp,-36
   94304:	df000815 	stw	fp,32(sp)
   94308:	df000804 	addi	fp,sp,32
   9430c:	e13ffe15 	stw	r4,-8(fp)
   94310:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   94314:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   94318:	e0bffe17 	ldw	r2,-8(fp)
   9431c:	1000021e 	bne	r2,zero,94328 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   94320:	00800104 	movi	r2,4
   94324:	00003606 	br	94400 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   94328:	e0bfff17 	ldw	r2,-4(fp)
   9432c:	1000021e 	bne	r2,zero,94338 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   94330:	00800244 	movi	r2,9
   94334:	00003206 	br	94400 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   94338:	e0bffe17 	ldw	r2,-8(fp)
   9433c:	10800003 	ldbu	r2,0(r2)
   94340:	10803fcc 	andi	r2,r2,255
   94344:	108000e0 	cmpeqi	r2,r2,3
   94348:	1000021e 	bne	r2,zero,94354 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   9434c:	00800044 	movi	r2,1
   94350:	00002b06 	br	94400 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94354:	0005303a 	rdctl	r2,status
   94358:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9435c:	e0fffd17 	ldw	r3,-12(fp)
   94360:	00bfff84 	movi	r2,-2
   94364:	1884703a 	and	r2,r3,r2
   94368:	1001703a 	wrctl	status,r2
  
  return context;
   9436c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   94370:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   94374:	e0bffe17 	ldw	r2,-8(fp)
   94378:	10c00283 	ldbu	r3,10(r2)
   9437c:	e0bfff17 	ldw	r2,-4(fp)
   94380:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   94384:	e0bffe17 	ldw	r2,-8(fp)
   94388:	108002c4 	addi	r2,r2,11
   9438c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   94390:	e0bfff17 	ldw	r2,-4(fp)
   94394:	10800084 	addi	r2,r2,2
   94398:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   9439c:	e03ffa05 	stb	zero,-24(fp)
   943a0:	00000b06 	br	943d0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   943a4:	e0bff917 	ldw	r2,-28(fp)
   943a8:	10c00044 	addi	r3,r2,1
   943ac:	e0fff915 	stw	r3,-28(fp)
   943b0:	e0fff817 	ldw	r3,-32(fp)
   943b4:	19000044 	addi	r4,r3,1
   943b8:	e13ff815 	stw	r4,-32(fp)
   943bc:	18c00003 	ldbu	r3,0(r3)
   943c0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   943c4:	e0bffa03 	ldbu	r2,-24(fp)
   943c8:	10800044 	addi	r2,r2,1
   943cc:	e0bffa05 	stb	r2,-24(fp)
   943d0:	e0bffa03 	ldbu	r2,-24(fp)
   943d4:	108000f0 	cmpltui	r2,r2,3
   943d8:	103ff21e 	bne	r2,zero,943a4 <__alt_data_end+0xfffd5ba4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   943dc:	e0bffe17 	ldw	r2,-8(fp)
   943e0:	10c0020b 	ldhu	r3,8(r2)
   943e4:	e0bfff17 	ldw	r2,-4(fp)
   943e8:	10c0000d 	sth	r3,0(r2)
   943ec:	e0bffb17 	ldw	r2,-20(fp)
   943f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   943f4:	e0bffc17 	ldw	r2,-16(fp)
   943f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   943fc:	0005883a 	mov	r2,zero
}
   94400:	e037883a 	mov	sp,fp
   94404:	df000017 	ldw	fp,0(sp)
   94408:	dec00104 	addi	sp,sp,4
   9440c:	f800283a 	ret

00094410 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   94410:	defff904 	addi	sp,sp,-28
   94414:	df000615 	stw	fp,24(sp)
   94418:	df000604 	addi	fp,sp,24
   9441c:	e13ffd15 	stw	r4,-12(fp)
   94420:	2805883a 	mov	r2,r5
   94424:	e1bfff15 	stw	r6,-4(fp)
   94428:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   9442c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   94430:	e0bfff17 	ldw	r2,-4(fp)
   94434:	10003126 	beq	r2,zero,944fc <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   94438:	e0bffd17 	ldw	r2,-12(fp)
   9443c:	1000041e 	bne	r2,zero,94450 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   94440:	e0bfff17 	ldw	r2,-4(fp)
   94444:	00c00104 	movi	r3,4
   94448:	10c00005 	stb	r3,0(r2)
        return;
   9444c:	00002c06 	br	94500 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   94450:	e0bffd17 	ldw	r2,-12(fp)
   94454:	10800003 	ldbu	r2,0(r2)
   94458:	10803fcc 	andi	r2,r2,255
   9445c:	108000e0 	cmpeqi	r2,r2,3
   94460:	1000041e 	bne	r2,zero,94474 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   94464:	e0bfff17 	ldw	r2,-4(fp)
   94468:	00c00044 	movi	r3,1
   9446c:	10c00005 	stb	r3,0(r2)
        return;
   94470:	00002306 	br	94500 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94474:	0005303a 	rdctl	r2,status
   94478:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9447c:	e0fffc17 	ldw	r3,-16(fp)
   94480:	00bfff84 	movi	r2,-2
   94484:	1884703a 	and	r2,r3,r2
   94488:	1001703a 	wrctl	status,r2
  
  return context;
   9448c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   94490:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   94494:	e0bfff17 	ldw	r2,-4(fp)
   94498:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   9449c:	e0bffd17 	ldw	r2,-12(fp)
   944a0:	1080020b 	ldhu	r2,8(r2)
   944a4:	10bfffcc 	andi	r2,r2,65535
   944a8:	10000426 	beq	r2,zero,944bc <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   944ac:	e0bffd17 	ldw	r2,-12(fp)
   944b0:	e0fffe0b 	ldhu	r3,-8(fp)
   944b4:	10c0020d 	sth	r3,8(r2)
   944b8:	00000b06 	br	944e8 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   944bc:	e0bffd17 	ldw	r2,-12(fp)
   944c0:	10800283 	ldbu	r2,10(r2)
   944c4:	10803fcc 	andi	r2,r2,255
   944c8:	1000041e 	bne	r2,zero,944dc <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   944cc:	e0bffd17 	ldw	r2,-12(fp)
   944d0:	e0fffe0b 	ldhu	r3,-8(fp)
   944d4:	10c0020d 	sth	r3,8(r2)
   944d8:	00000306 	br	944e8 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   944dc:	e0bfff17 	ldw	r2,-4(fp)
   944e0:	00c01244 	movi	r3,73
   944e4:	10c00005 	stb	r3,0(r2)
   944e8:	e0bffa17 	ldw	r2,-24(fp)
   944ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   944f0:	e0bffb17 	ldw	r2,-20(fp)
   944f4:	1001703a 	wrctl	status,r2
   944f8:	00000106 	br	94500 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   944fc:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   94500:	e037883a 	mov	sp,fp
   94504:	df000017 	ldw	fp,0(sp)
   94508:	dec00104 	addi	sp,sp,4
   9450c:	f800283a 	ret

00094510 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   94510:	defff104 	addi	sp,sp,-60
   94514:	dfc00e15 	stw	ra,56(sp)
   94518:	df000d15 	stw	fp,52(sp)
   9451c:	df000d04 	addi	fp,sp,52
   94520:	2007883a 	mov	r3,r4
   94524:	2805883a 	mov	r2,r5
   94528:	e0fffe05 	stb	r3,-8(fp)
   9452c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   94530:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   94534:	e0bffe03 	ldbu	r2,-8(fp)
   94538:	10800530 	cmpltui	r2,r2,20
   9453c:	1000051e 	bne	r2,zero,94554 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   94540:	e0bffe03 	ldbu	r2,-8(fp)
   94544:	10803fe0 	cmpeqi	r2,r2,255
   94548:	1000021e 	bne	r2,zero,94554 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   9454c:	00800a84 	movi	r2,42
   94550:	00012606 	br	949ec <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   94554:	e0bfff03 	ldbu	r2,-4(fp)
   94558:	10800530 	cmpltui	r2,r2,20
   9455c:	1000021e 	bne	r2,zero,94568 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   94560:	00800a84 	movi	r2,42
   94564:	00012106 	br	949ec <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94568:	0005303a 	rdctl	r2,status
   9456c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94570:	e0fffd17 	ldw	r3,-12(fp)
   94574:	00bfff84 	movi	r2,-2
   94578:	1884703a 	and	r2,r3,r2
   9457c:	1001703a 	wrctl	status,r2
  
  return context;
   94580:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   94584:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   94588:	e0ffff03 	ldbu	r3,-4(fp)
   9458c:	008002b4 	movhi	r2,10
   94590:	10bc7904 	addi	r2,r2,-3612
   94594:	18c7883a 	add	r3,r3,r3
   94598:	18c7883a 	add	r3,r3,r3
   9459c:	10c5883a 	add	r2,r2,r3
   945a0:	10800017 	ldw	r2,0(r2)
   945a4:	10000626 	beq	r2,zero,945c0 <OSTaskChangePrio+0xb0>
   945a8:	e0bff517 	ldw	r2,-44(fp)
   945ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   945b0:	e0bff617 	ldw	r2,-40(fp)
   945b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   945b8:	00800a04 	movi	r2,40
   945bc:	00010b06 	br	949ec <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   945c0:	e0bffe03 	ldbu	r2,-8(fp)
   945c4:	10803fd8 	cmpnei	r2,r2,255
   945c8:	1000031e 	bne	r2,zero,945d8 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   945cc:	d0a73917 	ldw	r2,-25372(gp)
   945d0:	10800c83 	ldbu	r2,50(r2)
   945d4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   945d8:	e0fffe03 	ldbu	r3,-8(fp)
   945dc:	008002b4 	movhi	r2,10
   945e0:	10bc7904 	addi	r2,r2,-3612
   945e4:	18c7883a 	add	r3,r3,r3
   945e8:	18c7883a 	add	r3,r3,r3
   945ec:	10c5883a 	add	r2,r2,r3
   945f0:	10800017 	ldw	r2,0(r2)
   945f4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   945f8:	e0bff817 	ldw	r2,-32(fp)
   945fc:	1000061e 	bne	r2,zero,94618 <OSTaskChangePrio+0x108>
   94600:	e0bff517 	ldw	r2,-44(fp)
   94604:	e0bff715 	stw	r2,-36(fp)
   94608:	e0bff717 	ldw	r2,-36(fp)
   9460c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   94610:	00800a44 	movi	r2,41
   94614:	0000f506 	br	949ec <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   94618:	e0bff817 	ldw	r2,-32(fp)
   9461c:	10800058 	cmpnei	r2,r2,1
   94620:	1000061e 	bne	r2,zero,9463c <OSTaskChangePrio+0x12c>
   94624:	e0bff517 	ldw	r2,-44(fp)
   94628:	e0bff915 	stw	r2,-28(fp)
   9462c:	e0bff917 	ldw	r2,-28(fp)
   94630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   94634:	008010c4 	movi	r2,67
   94638:	0000ec06 	br	949ec <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   9463c:	e0bfff03 	ldbu	r2,-4(fp)
   94640:	1004d0fa 	srli	r2,r2,3
   94644:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   94648:	e0bfff03 	ldbu	r2,-4(fp)
   9464c:	108001cc 	andi	r2,r2,7
   94650:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   94654:	e0bffb03 	ldbu	r2,-20(fp)
   94658:	00c00044 	movi	r3,1
   9465c:	1884983a 	sll	r2,r3,r2
   94660:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   94664:	e0bffb43 	ldbu	r2,-19(fp)
   94668:	00c00044 	movi	r3,1
   9466c:	1884983a 	sll	r2,r3,r2
   94670:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   94674:	e0fffe03 	ldbu	r3,-8(fp)
   94678:	008002b4 	movhi	r2,10
   9467c:	10bc7904 	addi	r2,r2,-3612
   94680:	18c7883a 	add	r3,r3,r3
   94684:	18c7883a 	add	r3,r3,r3
   94688:	10c5883a 	add	r2,r2,r3
   9468c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   94690:	e0ffff03 	ldbu	r3,-4(fp)
   94694:	008002b4 	movhi	r2,10
   94698:	10bc7904 	addi	r2,r2,-3612
   9469c:	18c7883a 	add	r3,r3,r3
   946a0:	18c7883a 	add	r3,r3,r3
   946a4:	10c5883a 	add	r2,r2,r3
   946a8:	e0fff817 	ldw	r3,-32(fp)
   946ac:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   946b0:	e0bff817 	ldw	r2,-32(fp)
   946b4:	10800d03 	ldbu	r2,52(r2)
   946b8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   946bc:	e0bff817 	ldw	r2,-32(fp)
   946c0:	10800d83 	ldbu	r2,54(r2)
   946c4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   946c8:	e0bff817 	ldw	r2,-32(fp)
   946cc:	10800d43 	ldbu	r2,53(r2)
   946d0:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   946d4:	e0fffc03 	ldbu	r3,-16(fp)
   946d8:	d0a73644 	addi	r2,gp,-25383
   946dc:	1885883a 	add	r2,r3,r2
   946e0:	10c00003 	ldbu	r3,0(r2)
   946e4:	e0bffc83 	ldbu	r2,-14(fp)
   946e8:	1884703a 	and	r2,r3,r2
   946ec:	10803fcc 	andi	r2,r2,255
   946f0:	10002826 	beq	r2,zero,94794 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   946f4:	e0fffc03 	ldbu	r3,-16(fp)
   946f8:	e13ffc03 	ldbu	r4,-16(fp)
   946fc:	d0a73644 	addi	r2,gp,-25383
   94700:	2085883a 	add	r2,r4,r2
   94704:	10800003 	ldbu	r2,0(r2)
   94708:	1009883a 	mov	r4,r2
   9470c:	e0bffc83 	ldbu	r2,-14(fp)
   94710:	0084303a 	nor	r2,zero,r2
   94714:	2084703a 	and	r2,r4,r2
   94718:	1009883a 	mov	r4,r2
   9471c:	d0a73644 	addi	r2,gp,-25383
   94720:	1885883a 	add	r2,r3,r2
   94724:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   94728:	e0fffc03 	ldbu	r3,-16(fp)
   9472c:	d0a73644 	addi	r2,gp,-25383
   94730:	1885883a 	add	r2,r3,r2
   94734:	10800003 	ldbu	r2,0(r2)
   94738:	10803fcc 	andi	r2,r2,255
   9473c:	1000061e 	bne	r2,zero,94758 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   94740:	e0bffc43 	ldbu	r2,-15(fp)
   94744:	0084303a 	nor	r2,zero,r2
   94748:	1007883a 	mov	r3,r2
   9474c:	d0a73603 	ldbu	r2,-25384(gp)
   94750:	1884703a 	and	r2,r3,r2
   94754:	d0a73605 	stb	r2,-25384(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   94758:	d0e73603 	ldbu	r3,-25384(gp)
   9475c:	e0bffb83 	ldbu	r2,-18(fp)
   94760:	1884b03a 	or	r2,r3,r2
   94764:	d0a73605 	stb	r2,-25384(gp)
         OSRdyTbl[y_new] |= bitx_new;
   94768:	e0fffb03 	ldbu	r3,-20(fp)
   9476c:	e13ffb03 	ldbu	r4,-20(fp)
   94770:	d0a73644 	addi	r2,gp,-25383
   94774:	2085883a 	add	r2,r4,r2
   94778:	11000003 	ldbu	r4,0(r2)
   9477c:	e0bffbc3 	ldbu	r2,-17(fp)
   94780:	2084b03a 	or	r2,r4,r2
   94784:	1009883a 	mov	r4,r2
   94788:	d0a73644 	addi	r2,gp,-25383
   9478c:	1885883a 	add	r2,r3,r2
   94790:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   94794:	e0bff817 	ldw	r2,-32(fp)
   94798:	10800717 	ldw	r2,28(r2)
   9479c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   947a0:	e0bff317 	ldw	r2,-52(fp)
   947a4:	10003326 	beq	r2,zero,94874 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   947a8:	e0bffc03 	ldbu	r2,-16(fp)
   947ac:	e0fffc03 	ldbu	r3,-16(fp)
   947b0:	e13ff317 	ldw	r4,-52(fp)
   947b4:	20c7883a 	add	r3,r4,r3
   947b8:	18c002c4 	addi	r3,r3,11
   947bc:	18c00003 	ldbu	r3,0(r3)
   947c0:	1809883a 	mov	r4,r3
   947c4:	e0fffc83 	ldbu	r3,-14(fp)
   947c8:	00c6303a 	nor	r3,zero,r3
   947cc:	20c6703a 	and	r3,r4,r3
   947d0:	1809883a 	mov	r4,r3
   947d4:	e0fff317 	ldw	r3,-52(fp)
   947d8:	1885883a 	add	r2,r3,r2
   947dc:	108002c4 	addi	r2,r2,11
   947e0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   947e4:	e0bffc03 	ldbu	r2,-16(fp)
   947e8:	e0fff317 	ldw	r3,-52(fp)
   947ec:	1885883a 	add	r2,r3,r2
   947f0:	108002c4 	addi	r2,r2,11
   947f4:	10800003 	ldbu	r2,0(r2)
   947f8:	10803fcc 	andi	r2,r2,255
   947fc:	1000091e 	bne	r2,zero,94824 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   94800:	e0bff317 	ldw	r2,-52(fp)
   94804:	10800283 	ldbu	r2,10(r2)
   94808:	1007883a 	mov	r3,r2
   9480c:	e0bffc43 	ldbu	r2,-15(fp)
   94810:	0084303a 	nor	r2,zero,r2
   94814:	1884703a 	and	r2,r3,r2
   94818:	1007883a 	mov	r3,r2
   9481c:	e0bff317 	ldw	r2,-52(fp)
   94820:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   94824:	e0bff317 	ldw	r2,-52(fp)
   94828:	10c00283 	ldbu	r3,10(r2)
   9482c:	e0bffb83 	ldbu	r2,-18(fp)
   94830:	1884b03a 	or	r2,r3,r2
   94834:	1007883a 	mov	r3,r2
   94838:	e0bff317 	ldw	r2,-52(fp)
   9483c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   94840:	e0bffb03 	ldbu	r2,-20(fp)
   94844:	e0fffb03 	ldbu	r3,-20(fp)
   94848:	e13ff317 	ldw	r4,-52(fp)
   9484c:	20c7883a 	add	r3,r4,r3
   94850:	18c002c4 	addi	r3,r3,11
   94854:	19000003 	ldbu	r4,0(r3)
   94858:	e0fffbc3 	ldbu	r3,-17(fp)
   9485c:	20c6b03a 	or	r3,r4,r3
   94860:	1809883a 	mov	r4,r3
   94864:	e0fff317 	ldw	r3,-52(fp)
   94868:	1885883a 	add	r2,r3,r2
   9486c:	108002c4 	addi	r2,r2,11
   94870:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   94874:	e0bff817 	ldw	r2,-32(fp)
   94878:	10800817 	ldw	r2,32(r2)
   9487c:	10004226 	beq	r2,zero,94988 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   94880:	e0bff817 	ldw	r2,-32(fp)
   94884:	10800817 	ldw	r2,32(r2)
   94888:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   9488c:	e0bff417 	ldw	r2,-48(fp)
   94890:	10800017 	ldw	r2,0(r2)
   94894:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   94898:	00003906 	br	94980 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   9489c:	e0bffc03 	ldbu	r2,-16(fp)
   948a0:	e0fffc03 	ldbu	r3,-16(fp)
   948a4:	e13ff317 	ldw	r4,-52(fp)
   948a8:	20c7883a 	add	r3,r4,r3
   948ac:	18c002c4 	addi	r3,r3,11
   948b0:	18c00003 	ldbu	r3,0(r3)
   948b4:	1809883a 	mov	r4,r3
   948b8:	e0fffc83 	ldbu	r3,-14(fp)
   948bc:	00c6303a 	nor	r3,zero,r3
   948c0:	20c6703a 	and	r3,r4,r3
   948c4:	1809883a 	mov	r4,r3
   948c8:	e0fff317 	ldw	r3,-52(fp)
   948cc:	1885883a 	add	r2,r3,r2
   948d0:	108002c4 	addi	r2,r2,11
   948d4:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   948d8:	e0bffc03 	ldbu	r2,-16(fp)
   948dc:	e0fff317 	ldw	r3,-52(fp)
   948e0:	1885883a 	add	r2,r3,r2
   948e4:	108002c4 	addi	r2,r2,11
   948e8:	10800003 	ldbu	r2,0(r2)
   948ec:	10803fcc 	andi	r2,r2,255
   948f0:	1000091e 	bne	r2,zero,94918 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   948f4:	e0bff317 	ldw	r2,-52(fp)
   948f8:	10800283 	ldbu	r2,10(r2)
   948fc:	1007883a 	mov	r3,r2
   94900:	e0bffc43 	ldbu	r2,-15(fp)
   94904:	0084303a 	nor	r2,zero,r2
   94908:	1884703a 	and	r2,r3,r2
   9490c:	1007883a 	mov	r3,r2
   94910:	e0bff317 	ldw	r2,-52(fp)
   94914:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   94918:	e0bff317 	ldw	r2,-52(fp)
   9491c:	10c00283 	ldbu	r3,10(r2)
   94920:	e0bffb83 	ldbu	r2,-18(fp)
   94924:	1884b03a 	or	r2,r3,r2
   94928:	1007883a 	mov	r3,r2
   9492c:	e0bff317 	ldw	r2,-52(fp)
   94930:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   94934:	e0bffb03 	ldbu	r2,-20(fp)
   94938:	e0fffb03 	ldbu	r3,-20(fp)
   9493c:	e13ff317 	ldw	r4,-52(fp)
   94940:	20c7883a 	add	r3,r4,r3
   94944:	18c002c4 	addi	r3,r3,11
   94948:	19000003 	ldbu	r4,0(r3)
   9494c:	e0fffbc3 	ldbu	r3,-17(fp)
   94950:	20c6b03a 	or	r3,r4,r3
   94954:	1809883a 	mov	r4,r3
   94958:	e0fff317 	ldw	r3,-52(fp)
   9495c:	1885883a 	add	r2,r3,r2
   94960:	108002c4 	addi	r2,r2,11
   94964:	11000005 	stb	r4,0(r2)
            pevents++;
   94968:	e0bff417 	ldw	r2,-48(fp)
   9496c:	10800104 	addi	r2,r2,4
   94970:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   94974:	e0bff417 	ldw	r2,-48(fp)
   94978:	10800017 	ldw	r2,0(r2)
   9497c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   94980:	e0bff317 	ldw	r2,-52(fp)
   94984:	103fc51e 	bne	r2,zero,9489c <__alt_data_end+0xfffd609c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   94988:	e0bff817 	ldw	r2,-32(fp)
   9498c:	e0ffff03 	ldbu	r3,-4(fp)
   94990:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   94994:	e0bff817 	ldw	r2,-32(fp)
   94998:	e0fffb03 	ldbu	r3,-20(fp)
   9499c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   949a0:	e0bff817 	ldw	r2,-32(fp)
   949a4:	e0fffb43 	ldbu	r3,-19(fp)
   949a8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   949ac:	e0bff817 	ldw	r2,-32(fp)
   949b0:	e0fffb83 	ldbu	r3,-18(fp)
   949b4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   949b8:	e0bff817 	ldw	r2,-32(fp)
   949bc:	e0fffbc3 	ldbu	r3,-17(fp)
   949c0:	10c00d45 	stb	r3,53(r2)
   949c4:	e0bff517 	ldw	r2,-44(fp)
   949c8:	e0bffa15 	stw	r2,-24(fp)
   949cc:	e0bffa17 	ldw	r2,-24(fp)
   949d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   949d4:	d0a72a43 	ldbu	r2,-25431(gp)
   949d8:	10803fcc 	andi	r2,r2,255
   949dc:	10800058 	cmpnei	r2,r2,1
   949e0:	1000011e 	bne	r2,zero,949e8 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   949e4:	00902d40 	call	902d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   949e8:	0005883a 	mov	r2,zero
}
   949ec:	e037883a 	mov	sp,fp
   949f0:	dfc00117 	ldw	ra,4(sp)
   949f4:	df000017 	ldw	fp,0(sp)
   949f8:	dec00204 	addi	sp,sp,8
   949fc:	f800283a 	ret

00094a00 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   94a00:	deffee04 	addi	sp,sp,-72
   94a04:	dfc01115 	stw	ra,68(sp)
   94a08:	df001015 	stw	fp,64(sp)
   94a0c:	df001004 	addi	fp,sp,64
   94a10:	e13ffc15 	stw	r4,-16(fp)
   94a14:	e17ffd15 	stw	r5,-12(fp)
   94a18:	e1bffe15 	stw	r6,-8(fp)
   94a1c:	3805883a 	mov	r2,r7
   94a20:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   94a24:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   94a28:	e0bfff03 	ldbu	r2,-4(fp)
   94a2c:	10800570 	cmpltui	r2,r2,21
   94a30:	1000021e 	bne	r2,zero,94a3c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   94a34:	00800a84 	movi	r2,42
   94a38:	00005706 	br	94b98 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94a3c:	0005303a 	rdctl	r2,status
   94a40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94a44:	e0fffb17 	ldw	r3,-20(fp)
   94a48:	00bfff84 	movi	r2,-2
   94a4c:	1884703a 	and	r2,r3,r2
   94a50:	1001703a 	wrctl	status,r2
  
  return context;
   94a54:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   94a58:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   94a5c:	d0a73803 	ldbu	r2,-25376(gp)
   94a60:	10803fcc 	andi	r2,r2,255
   94a64:	10000626 	beq	r2,zero,94a80 <OSTaskCreate+0x80>
   94a68:	e0bff317 	ldw	r2,-52(fp)
   94a6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94a70:	e0bff417 	ldw	r2,-48(fp)
   94a74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   94a78:	00800f04 	movi	r2,60
   94a7c:	00004606 	br	94b98 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   94a80:	e0ffff03 	ldbu	r3,-4(fp)
   94a84:	008002b4 	movhi	r2,10
   94a88:	10bc7904 	addi	r2,r2,-3612
   94a8c:	18c7883a 	add	r3,r3,r3
   94a90:	18c7883a 	add	r3,r3,r3
   94a94:	10c5883a 	add	r2,r2,r3
   94a98:	10800017 	ldw	r2,0(r2)
   94a9c:	1000391e 	bne	r2,zero,94b84 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   94aa0:	e0ffff03 	ldbu	r3,-4(fp)
   94aa4:	008002b4 	movhi	r2,10
   94aa8:	10bc7904 	addi	r2,r2,-3612
   94aac:	18c7883a 	add	r3,r3,r3
   94ab0:	18c7883a 	add	r3,r3,r3
   94ab4:	10c5883a 	add	r2,r2,r3
   94ab8:	00c00044 	movi	r3,1
   94abc:	10c00015 	stw	r3,0(r2)
   94ac0:	e0bff317 	ldw	r2,-52(fp)
   94ac4:	e0bff515 	stw	r2,-44(fp)
   94ac8:	e0bff517 	ldw	r2,-44(fp)
   94acc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   94ad0:	000f883a 	mov	r7,zero
   94ad4:	e1bffe17 	ldw	r6,-8(fp)
   94ad8:	e17ffd17 	ldw	r5,-12(fp)
   94adc:	e13ffc17 	ldw	r4,-16(fp)
   94ae0:	0097a000 	call	97a00 <OSTaskStkInit>
   94ae4:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   94ae8:	e0bfff03 	ldbu	r2,-4(fp)
   94aec:	d8000215 	stw	zero,8(sp)
   94af0:	d8000115 	stw	zero,4(sp)
   94af4:	d8000015 	stw	zero,0(sp)
   94af8:	000f883a 	mov	r7,zero
   94afc:	000d883a 	mov	r6,zero
   94b00:	e17ff717 	ldw	r5,-36(fp)
   94b04:	1009883a 	mov	r4,r2
   94b08:	00906d40 	call	906d4 <OS_TCBInit>
   94b0c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   94b10:	e0bff803 	ldbu	r2,-32(fp)
   94b14:	1000061e 	bne	r2,zero,94b30 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   94b18:	d0a72a43 	ldbu	r2,-25431(gp)
   94b1c:	10803fcc 	andi	r2,r2,255
   94b20:	10800058 	cmpnei	r2,r2,1
   94b24:	1000151e 	bne	r2,zero,94b7c <OSTaskCreate+0x17c>
                OS_Sched();
   94b28:	00902d40 	call	902d4 <OS_Sched>
   94b2c:	00001306 	br	94b7c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94b30:	0005303a 	rdctl	r2,status
   94b34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94b38:	e0fffa17 	ldw	r3,-24(fp)
   94b3c:	00bfff84 	movi	r2,-2
   94b40:	1884703a 	and	r2,r3,r2
   94b44:	1001703a 	wrctl	status,r2
  
  return context;
   94b48:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   94b4c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   94b50:	e0ffff03 	ldbu	r3,-4(fp)
   94b54:	008002b4 	movhi	r2,10
   94b58:	10bc7904 	addi	r2,r2,-3612
   94b5c:	18c7883a 	add	r3,r3,r3
   94b60:	18c7883a 	add	r3,r3,r3
   94b64:	10c5883a 	add	r2,r2,r3
   94b68:	10000015 	stw	zero,0(r2)
   94b6c:	e0bff317 	ldw	r2,-52(fp)
   94b70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94b74:	e0bff617 	ldw	r2,-40(fp)
   94b78:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   94b7c:	e0bff803 	ldbu	r2,-32(fp)
   94b80:	00000506 	br	94b98 <OSTaskCreate+0x198>
   94b84:	e0bff317 	ldw	r2,-52(fp)
   94b88:	e0bff915 	stw	r2,-28(fp)
   94b8c:	e0bff917 	ldw	r2,-28(fp)
   94b90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   94b94:	00800a04 	movi	r2,40
}
   94b98:	e037883a 	mov	sp,fp
   94b9c:	dfc00117 	ldw	ra,4(sp)
   94ba0:	df000017 	ldw	fp,0(sp)
   94ba4:	dec00204 	addi	sp,sp,8
   94ba8:	f800283a 	ret

00094bac <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   94bac:	deffec04 	addi	sp,sp,-80
   94bb0:	dfc01315 	stw	ra,76(sp)
   94bb4:	df001215 	stw	fp,72(sp)
   94bb8:	df001204 	addi	fp,sp,72
   94bbc:	e13ffa15 	stw	r4,-24(fp)
   94bc0:	e17ffb15 	stw	r5,-20(fp)
   94bc4:	e1bffc15 	stw	r6,-16(fp)
   94bc8:	3809883a 	mov	r4,r7
   94bcc:	e0c00217 	ldw	r3,8(fp)
   94bd0:	e0800617 	ldw	r2,24(fp)
   94bd4:	e13ffd05 	stb	r4,-12(fp)
   94bd8:	e0fffe0d 	sth	r3,-8(fp)
   94bdc:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   94be0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   94be4:	e0bffd03 	ldbu	r2,-12(fp)
   94be8:	10800570 	cmpltui	r2,r2,21
   94bec:	1000021e 	bne	r2,zero,94bf8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   94bf0:	00800a84 	movi	r2,42
   94bf4:	00006106 	br	94d7c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94bf8:	0005303a 	rdctl	r2,status
   94bfc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94c00:	e0fff917 	ldw	r3,-28(fp)
   94c04:	00bfff84 	movi	r2,-2
   94c08:	1884703a 	and	r2,r3,r2
   94c0c:	1001703a 	wrctl	status,r2
  
  return context;
   94c10:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   94c14:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   94c18:	d0a73803 	ldbu	r2,-25376(gp)
   94c1c:	10803fcc 	andi	r2,r2,255
   94c20:	10000626 	beq	r2,zero,94c3c <OSTaskCreateExt+0x90>
   94c24:	e0bff117 	ldw	r2,-60(fp)
   94c28:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94c2c:	e0bff217 	ldw	r2,-56(fp)
   94c30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   94c34:	00800f04 	movi	r2,60
   94c38:	00005006 	br	94d7c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   94c3c:	e0fffd03 	ldbu	r3,-12(fp)
   94c40:	008002b4 	movhi	r2,10
   94c44:	10bc7904 	addi	r2,r2,-3612
   94c48:	18c7883a 	add	r3,r3,r3
   94c4c:	18c7883a 	add	r3,r3,r3
   94c50:	10c5883a 	add	r2,r2,r3
   94c54:	10800017 	ldw	r2,0(r2)
   94c58:	1000431e 	bne	r2,zero,94d68 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   94c5c:	e0fffd03 	ldbu	r3,-12(fp)
   94c60:	008002b4 	movhi	r2,10
   94c64:	10bc7904 	addi	r2,r2,-3612
   94c68:	18c7883a 	add	r3,r3,r3
   94c6c:	18c7883a 	add	r3,r3,r3
   94c70:	10c5883a 	add	r2,r2,r3
   94c74:	00c00044 	movi	r3,1
   94c78:	10c00015 	stw	r3,0(r2)
   94c7c:	e0bff117 	ldw	r2,-60(fp)
   94c80:	e0bff315 	stw	r2,-52(fp)
   94c84:	e0bff317 	ldw	r2,-52(fp)
   94c88:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   94c8c:	e0bfff0b 	ldhu	r2,-4(fp)
   94c90:	100d883a 	mov	r6,r2
   94c94:	e1400417 	ldw	r5,16(fp)
   94c98:	e1000317 	ldw	r4,12(fp)
   94c9c:	0095c0c0 	call	95c0c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   94ca0:	e0bfff0b 	ldhu	r2,-4(fp)
   94ca4:	100f883a 	mov	r7,r2
   94ca8:	e1bffc17 	ldw	r6,-16(fp)
   94cac:	e17ffb17 	ldw	r5,-20(fp)
   94cb0:	e13ffa17 	ldw	r4,-24(fp)
   94cb4:	0097a000 	call	97a00 <OSTaskStkInit>
   94cb8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   94cbc:	e0fffd03 	ldbu	r3,-12(fp)
   94cc0:	e13ffe0b 	ldhu	r4,-8(fp)
   94cc4:	e0bfff0b 	ldhu	r2,-4(fp)
   94cc8:	d8800215 	stw	r2,8(sp)
   94ccc:	e0800517 	ldw	r2,20(fp)
   94cd0:	d8800115 	stw	r2,4(sp)
   94cd4:	e0800417 	ldw	r2,16(fp)
   94cd8:	d8800015 	stw	r2,0(sp)
   94cdc:	200f883a 	mov	r7,r4
   94ce0:	e1800317 	ldw	r6,12(fp)
   94ce4:	e17ff517 	ldw	r5,-44(fp)
   94ce8:	1809883a 	mov	r4,r3
   94cec:	00906d40 	call	906d4 <OS_TCBInit>
   94cf0:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   94cf4:	e0bff603 	ldbu	r2,-40(fp)
   94cf8:	1000061e 	bne	r2,zero,94d14 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   94cfc:	d0a72a43 	ldbu	r2,-25431(gp)
   94d00:	10803fcc 	andi	r2,r2,255
   94d04:	10800058 	cmpnei	r2,r2,1
   94d08:	1000151e 	bne	r2,zero,94d60 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   94d0c:	00902d40 	call	902d4 <OS_Sched>
   94d10:	00001306 	br	94d60 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94d14:	0005303a 	rdctl	r2,status
   94d18:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94d1c:	e0fff817 	ldw	r3,-32(fp)
   94d20:	00bfff84 	movi	r2,-2
   94d24:	1884703a 	and	r2,r3,r2
   94d28:	1001703a 	wrctl	status,r2
  
  return context;
   94d2c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   94d30:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   94d34:	e0fffd03 	ldbu	r3,-12(fp)
   94d38:	008002b4 	movhi	r2,10
   94d3c:	10bc7904 	addi	r2,r2,-3612
   94d40:	18c7883a 	add	r3,r3,r3
   94d44:	18c7883a 	add	r3,r3,r3
   94d48:	10c5883a 	add	r2,r2,r3
   94d4c:	10000015 	stw	zero,0(r2)
   94d50:	e0bff117 	ldw	r2,-60(fp)
   94d54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94d58:	e0bff417 	ldw	r2,-48(fp)
   94d5c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   94d60:	e0bff603 	ldbu	r2,-40(fp)
   94d64:	00000506 	br	94d7c <OSTaskCreateExt+0x1d0>
   94d68:	e0bff117 	ldw	r2,-60(fp)
   94d6c:	e0bff715 	stw	r2,-36(fp)
   94d70:	e0bff717 	ldw	r2,-36(fp)
   94d74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   94d78:	00800a04 	movi	r2,40
}
   94d7c:	e037883a 	mov	sp,fp
   94d80:	dfc00117 	ldw	ra,4(sp)
   94d84:	df000017 	ldw	fp,0(sp)
   94d88:	dec00204 	addi	sp,sp,8
   94d8c:	f800283a 	ret

00094d90 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   94d90:	defff404 	addi	sp,sp,-48
   94d94:	dfc00b15 	stw	ra,44(sp)
   94d98:	df000a15 	stw	fp,40(sp)
   94d9c:	df000a04 	addi	fp,sp,40
   94da0:	2005883a 	mov	r2,r4
   94da4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   94da8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   94dac:	d0a73803 	ldbu	r2,-25376(gp)
   94db0:	10803fcc 	andi	r2,r2,255
   94db4:	10000226 	beq	r2,zero,94dc0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   94db8:	00801004 	movi	r2,64
   94dbc:	0000c006 	br	950c0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   94dc0:	e0bfff03 	ldbu	r2,-4(fp)
   94dc4:	10800518 	cmpnei	r2,r2,20
   94dc8:	1000021e 	bne	r2,zero,94dd4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   94dcc:	00800f84 	movi	r2,62
   94dd0:	0000bb06 	br	950c0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   94dd4:	e0bfff03 	ldbu	r2,-4(fp)
   94dd8:	10800530 	cmpltui	r2,r2,20
   94ddc:	1000051e 	bne	r2,zero,94df4 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   94de0:	e0bfff03 	ldbu	r2,-4(fp)
   94de4:	10803fe0 	cmpeqi	r2,r2,255
   94de8:	1000021e 	bne	r2,zero,94df4 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   94dec:	00800a84 	movi	r2,42
   94df0:	0000b306 	br	950c0 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94df4:	0005303a 	rdctl	r2,status
   94df8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94dfc:	e0fffe17 	ldw	r3,-8(fp)
   94e00:	00bfff84 	movi	r2,-2
   94e04:	1884703a 	and	r2,r3,r2
   94e08:	1001703a 	wrctl	status,r2
  
  return context;
   94e0c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   94e10:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   94e14:	e0bfff03 	ldbu	r2,-4(fp)
   94e18:	10803fd8 	cmpnei	r2,r2,255
   94e1c:	1000031e 	bne	r2,zero,94e2c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   94e20:	d0a73917 	ldw	r2,-25372(gp)
   94e24:	10800c83 	ldbu	r2,50(r2)
   94e28:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   94e2c:	e0ffff03 	ldbu	r3,-4(fp)
   94e30:	008002b4 	movhi	r2,10
   94e34:	10bc7904 	addi	r2,r2,-3612
   94e38:	18c7883a 	add	r3,r3,r3
   94e3c:	18c7883a 	add	r3,r3,r3
   94e40:	10c5883a 	add	r2,r2,r3
   94e44:	10800017 	ldw	r2,0(r2)
   94e48:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   94e4c:	e0bff817 	ldw	r2,-32(fp)
   94e50:	1000061e 	bne	r2,zero,94e6c <OSTaskDel+0xdc>
   94e54:	e0bff617 	ldw	r2,-40(fp)
   94e58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94e5c:	e0bff717 	ldw	r2,-36(fp)
   94e60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   94e64:	008010c4 	movi	r2,67
   94e68:	00009506 	br	950c0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   94e6c:	e0bff817 	ldw	r2,-32(fp)
   94e70:	10800058 	cmpnei	r2,r2,1
   94e74:	1000061e 	bne	r2,zero,94e90 <OSTaskDel+0x100>
   94e78:	e0bff617 	ldw	r2,-40(fp)
   94e7c:	e0bff915 	stw	r2,-28(fp)
   94e80:	e0bff917 	ldw	r2,-28(fp)
   94e84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   94e88:	00800f44 	movi	r2,61
   94e8c:	00008c06 	br	950c0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   94e90:	e0bff817 	ldw	r2,-32(fp)
   94e94:	10800d03 	ldbu	r2,52(r2)
   94e98:	10c03fcc 	andi	r3,r2,255
   94e9c:	e0bff817 	ldw	r2,-32(fp)
   94ea0:	10800d03 	ldbu	r2,52(r2)
   94ea4:	11003fcc 	andi	r4,r2,255
   94ea8:	d0a73644 	addi	r2,gp,-25383
   94eac:	2085883a 	add	r2,r4,r2
   94eb0:	10800003 	ldbu	r2,0(r2)
   94eb4:	1009883a 	mov	r4,r2
   94eb8:	e0bff817 	ldw	r2,-32(fp)
   94ebc:	10800d43 	ldbu	r2,53(r2)
   94ec0:	0084303a 	nor	r2,zero,r2
   94ec4:	2084703a 	and	r2,r4,r2
   94ec8:	1009883a 	mov	r4,r2
   94ecc:	d0a73644 	addi	r2,gp,-25383
   94ed0:	1885883a 	add	r2,r3,r2
   94ed4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   94ed8:	e0bff817 	ldw	r2,-32(fp)
   94edc:	10800d03 	ldbu	r2,52(r2)
   94ee0:	10c03fcc 	andi	r3,r2,255
   94ee4:	d0a73644 	addi	r2,gp,-25383
   94ee8:	1885883a 	add	r2,r3,r2
   94eec:	10800003 	ldbu	r2,0(r2)
   94ef0:	10803fcc 	andi	r2,r2,255
   94ef4:	1000071e 	bne	r2,zero,94f14 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   94ef8:	e0bff817 	ldw	r2,-32(fp)
   94efc:	10800d83 	ldbu	r2,54(r2)
   94f00:	0084303a 	nor	r2,zero,r2
   94f04:	1007883a 	mov	r3,r2
   94f08:	d0a73603 	ldbu	r2,-25384(gp)
   94f0c:	1884703a 	and	r2,r3,r2
   94f10:	d0a73605 	stb	r2,-25384(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   94f14:	e0bff817 	ldw	r2,-32(fp)
   94f18:	10800717 	ldw	r2,28(r2)
   94f1c:	10000526 	beq	r2,zero,94f34 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   94f20:	e0bff817 	ldw	r2,-32(fp)
   94f24:	10800717 	ldw	r2,28(r2)
   94f28:	100b883a 	mov	r5,r2
   94f2c:	e13ff817 	ldw	r4,-32(fp)
   94f30:	008fc800 	call	8fc80 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   94f34:	e0bff817 	ldw	r2,-32(fp)
   94f38:	10800817 	ldw	r2,32(r2)
   94f3c:	10000526 	beq	r2,zero,94f54 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   94f40:	e0bff817 	ldw	r2,-32(fp)
   94f44:	10800817 	ldw	r2,32(r2)
   94f48:	100b883a 	mov	r5,r2
   94f4c:	e13ff817 	ldw	r4,-32(fp)
   94f50:	008fd380 	call	8fd38 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   94f54:	e0bff817 	ldw	r2,-32(fp)
   94f58:	10800a17 	ldw	r2,40(r2)
   94f5c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   94f60:	e0bffb17 	ldw	r2,-20(fp)
   94f64:	10000226 	beq	r2,zero,94f70 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   94f68:	e13ffb17 	ldw	r4,-20(fp)
   94f6c:	00921a80 	call	921a8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   94f70:	e0bff817 	ldw	r2,-32(fp)
   94f74:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   94f78:	e0bff817 	ldw	r2,-32(fp)
   94f7c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   94f80:	e0bff817 	ldw	r2,-32(fp)
   94f84:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   94f88:	d0a72a03 	ldbu	r2,-25432(gp)
   94f8c:	10803fcc 	andi	r2,r2,255
   94f90:	10803fe0 	cmpeqi	r2,r2,255
   94f94:	1000031e 	bne	r2,zero,94fa4 <OSTaskDel+0x214>
        OSLockNesting++;
   94f98:	d0a72a03 	ldbu	r2,-25432(gp)
   94f9c:	10800044 	addi	r2,r2,1
   94fa0:	d0a72a05 	stb	r2,-25432(gp)
   94fa4:	e0bff617 	ldw	r2,-40(fp)
   94fa8:	e0bffd15 	stw	r2,-12(fp)
   94fac:	e0bffd17 	ldw	r2,-12(fp)
   94fb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   94fb4:	008f8680 	call	8f868 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94fb8:	0005303a 	rdctl	r2,status
   94fbc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94fc0:	e0fffa17 	ldw	r3,-24(fp)
   94fc4:	00bfff84 	movi	r2,-2
   94fc8:	1884703a 	and	r2,r3,r2
   94fcc:	1001703a 	wrctl	status,r2
  
  return context;
   94fd0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   94fd4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   94fd8:	d0a72a03 	ldbu	r2,-25432(gp)
   94fdc:	10803fcc 	andi	r2,r2,255
   94fe0:	10000326 	beq	r2,zero,94ff0 <OSTaskDel+0x260>
        OSLockNesting--;
   94fe4:	d0a72a03 	ldbu	r2,-25432(gp)
   94fe8:	10bfffc4 	addi	r2,r2,-1
   94fec:	d0a72a05 	stb	r2,-25432(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   94ff0:	e13ff817 	ldw	r4,-32(fp)
   94ff4:	0097b800 	call	97b80 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   94ff8:	d0a73243 	ldbu	r2,-25399(gp)
   94ffc:	10bfffc4 	addi	r2,r2,-1
   95000:	d0a73245 	stb	r2,-25399(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   95004:	e0ffff03 	ldbu	r3,-4(fp)
   95008:	008002b4 	movhi	r2,10
   9500c:	10bc7904 	addi	r2,r2,-3612
   95010:	18c7883a 	add	r3,r3,r3
   95014:	18c7883a 	add	r3,r3,r3
   95018:	10c5883a 	add	r2,r2,r3
   9501c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   95020:	e0bff817 	ldw	r2,-32(fp)
   95024:	10800617 	ldw	r2,24(r2)
   95028:	1000071e 	bne	r2,zero,95048 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   9502c:	e0bff817 	ldw	r2,-32(fp)
   95030:	10800517 	ldw	r2,20(r2)
   95034:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   95038:	e0bff817 	ldw	r2,-32(fp)
   9503c:	10800517 	ldw	r2,20(r2)
   95040:	d0a72d15 	stw	r2,-25420(gp)
   95044:	00000a06 	br	95070 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   95048:	e0bff817 	ldw	r2,-32(fp)
   9504c:	10800617 	ldw	r2,24(r2)
   95050:	e0fff817 	ldw	r3,-32(fp)
   95054:	18c00517 	ldw	r3,20(r3)
   95058:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   9505c:	e0bff817 	ldw	r2,-32(fp)
   95060:	10800517 	ldw	r2,20(r2)
   95064:	e0fff817 	ldw	r3,-32(fp)
   95068:	18c00617 	ldw	r3,24(r3)
   9506c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   95070:	d0e73117 	ldw	r3,-25404(gp)
   95074:	e0bff817 	ldw	r2,-32(fp)
   95078:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   9507c:	e0bff817 	ldw	r2,-32(fp)
   95080:	d0a73115 	stw	r2,-25404(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   95084:	e0bff817 	ldw	r2,-32(fp)
   95088:	00c00fc4 	movi	r3,63
   9508c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   95090:	e0bff817 	ldw	r2,-32(fp)
   95094:	10001345 	stb	zero,77(r2)
   95098:	e0bff617 	ldw	r2,-40(fp)
   9509c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   950a0:	e0bffc17 	ldw	r2,-16(fp)
   950a4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   950a8:	d0a72a43 	ldbu	r2,-25431(gp)
   950ac:	10803fcc 	andi	r2,r2,255
   950b0:	10800058 	cmpnei	r2,r2,1
   950b4:	1000011e 	bne	r2,zero,950bc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   950b8:	00902d40 	call	902d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   950bc:	0005883a 	mov	r2,zero
}
   950c0:	e037883a 	mov	sp,fp
   950c4:	dfc00117 	ldw	ra,4(sp)
   950c8:	df000017 	ldw	fp,0(sp)
   950cc:	dec00204 	addi	sp,sp,8
   950d0:	f800283a 	ret

000950d4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   950d4:	defff504 	addi	sp,sp,-44
   950d8:	df000a15 	stw	fp,40(sp)
   950dc:	df000a04 	addi	fp,sp,40
   950e0:	2005883a 	mov	r2,r4
   950e4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   950e8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   950ec:	e0bfff03 	ldbu	r2,-4(fp)
   950f0:	10800518 	cmpnei	r2,r2,20
   950f4:	1000021e 	bne	r2,zero,95100 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   950f8:	00800f84 	movi	r2,62
   950fc:	00004506 	br	95214 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   95100:	e0bfff03 	ldbu	r2,-4(fp)
   95104:	10800530 	cmpltui	r2,r2,20
   95108:	1000051e 	bne	r2,zero,95120 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   9510c:	e0bfff03 	ldbu	r2,-4(fp)
   95110:	10803fe0 	cmpeqi	r2,r2,255
   95114:	1000021e 	bne	r2,zero,95120 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   95118:	00800a84 	movi	r2,42
   9511c:	00003d06 	br	95214 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   95120:	e0bfff03 	ldbu	r2,-4(fp)
   95124:	10803fd8 	cmpnei	r2,r2,255
   95128:	1000111e 	bne	r2,zero,95170 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9512c:	0005303a 	rdctl	r2,status
   95130:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95134:	e0fff917 	ldw	r3,-28(fp)
   95138:	00bfff84 	movi	r2,-2
   9513c:	1884703a 	and	r2,r3,r2
   95140:	1001703a 	wrctl	status,r2
  
  return context;
   95144:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   95148:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   9514c:	d0a73917 	ldw	r2,-25372(gp)
   95150:	10800dc3 	ldbu	r2,55(r2)
   95154:	e0bff805 	stb	r2,-32(fp)
   95158:	e0bff617 	ldw	r2,-40(fp)
   9515c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95160:	e0bffe17 	ldw	r2,-8(fp)
   95164:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   95168:	e0bff803 	ldbu	r2,-32(fp)
   9516c:	00002906 	br	95214 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95170:	0005303a 	rdctl	r2,status
   95174:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95178:	e0fff717 	ldw	r3,-36(fp)
   9517c:	00bfff84 	movi	r2,-2
   95180:	1884703a 	and	r2,r3,r2
   95184:	1001703a 	wrctl	status,r2
  
  return context;
   95188:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   9518c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   95190:	e0ffff03 	ldbu	r3,-4(fp)
   95194:	008002b4 	movhi	r2,10
   95198:	10bc7904 	addi	r2,r2,-3612
   9519c:	18c7883a 	add	r3,r3,r3
   951a0:	18c7883a 	add	r3,r3,r3
   951a4:	10c5883a 	add	r2,r2,r3
   951a8:	10800017 	ldw	r2,0(r2)
   951ac:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   951b0:	e0bffb17 	ldw	r2,-20(fp)
   951b4:	1000061e 	bne	r2,zero,951d0 <OSTaskDelReq+0xfc>
   951b8:	e0bff617 	ldw	r2,-40(fp)
   951bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   951c0:	e0bffa17 	ldw	r2,-24(fp)
   951c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   951c8:	008010c4 	movi	r2,67
   951cc:	00001106 	br	95214 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   951d0:	e0bffb17 	ldw	r2,-20(fp)
   951d4:	10800058 	cmpnei	r2,r2,1
   951d8:	1000061e 	bne	r2,zero,951f4 <OSTaskDelReq+0x120>
   951dc:	e0bff617 	ldw	r2,-40(fp)
   951e0:	e0bffc15 	stw	r2,-16(fp)
   951e4:	e0bffc17 	ldw	r2,-16(fp)
   951e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   951ec:	00800f44 	movi	r2,61
   951f0:	00000806 	br	95214 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   951f4:	e0bffb17 	ldw	r2,-20(fp)
   951f8:	00c00fc4 	movi	r3,63
   951fc:	10c00dc5 	stb	r3,55(r2)
   95200:	e0bff617 	ldw	r2,-40(fp)
   95204:	e0bffd15 	stw	r2,-12(fp)
   95208:	e0bffd17 	ldw	r2,-12(fp)
   9520c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   95210:	0005883a 	mov	r2,zero
}
   95214:	e037883a 	mov	sp,fp
   95218:	df000017 	ldw	fp,0(sp)
   9521c:	dec00104 	addi	sp,sp,4
   95220:	f800283a 	ret

00095224 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   95224:	defff404 	addi	sp,sp,-48
   95228:	dfc00b15 	stw	ra,44(sp)
   9522c:	df000a15 	stw	fp,40(sp)
   95230:	df000a04 	addi	fp,sp,40
   95234:	2005883a 	mov	r2,r4
   95238:	e17ffe15 	stw	r5,-8(fp)
   9523c:	e1bfff15 	stw	r6,-4(fp)
   95240:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   95244:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   95248:	e0bfff17 	ldw	r2,-4(fp)
   9524c:	1000021e 	bne	r2,zero,95258 <OSTaskNameGet+0x34>
        return (0);
   95250:	0005883a 	mov	r2,zero
   95254:	00005406 	br	953a8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   95258:	e0bffd03 	ldbu	r2,-12(fp)
   9525c:	10800570 	cmpltui	r2,r2,21
   95260:	1000081e 	bne	r2,zero,95284 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   95264:	e0bffd03 	ldbu	r2,-12(fp)
   95268:	10803fe0 	cmpeqi	r2,r2,255
   9526c:	1000051e 	bne	r2,zero,95284 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   95270:	e0bfff17 	ldw	r2,-4(fp)
   95274:	00c00a84 	movi	r3,42
   95278:	10c00005 	stb	r3,0(r2)
            return (0);
   9527c:	0005883a 	mov	r2,zero
   95280:	00004906 	br	953a8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   95284:	e0bffe17 	ldw	r2,-8(fp)
   95288:	1000051e 	bne	r2,zero,952a0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   9528c:	e0bfff17 	ldw	r2,-4(fp)
   95290:	00c00304 	movi	r3,12
   95294:	10c00005 	stb	r3,0(r2)
        return (0);
   95298:	0005883a 	mov	r2,zero
   9529c:	00004206 	br	953a8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   952a0:	d0a73803 	ldbu	r2,-25376(gp)
   952a4:	10803fcc 	andi	r2,r2,255
   952a8:	10000526 	beq	r2,zero,952c0 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   952ac:	e0bfff17 	ldw	r2,-4(fp)
   952b0:	00c00444 	movi	r3,17
   952b4:	10c00005 	stb	r3,0(r2)
        return (0);
   952b8:	0005883a 	mov	r2,zero
   952bc:	00003a06 	br	953a8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   952c0:	0005303a 	rdctl	r2,status
   952c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   952c8:	e0fffc17 	ldw	r3,-16(fp)
   952cc:	00bfff84 	movi	r2,-2
   952d0:	1884703a 	and	r2,r3,r2
   952d4:	1001703a 	wrctl	status,r2
  
  return context;
   952d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   952dc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   952e0:	e0bffd03 	ldbu	r2,-12(fp)
   952e4:	10803fd8 	cmpnei	r2,r2,255
   952e8:	1000031e 	bne	r2,zero,952f8 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   952ec:	d0a73917 	ldw	r2,-25372(gp)
   952f0:	10800c83 	ldbu	r2,50(r2)
   952f4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   952f8:	e0fffd03 	ldbu	r3,-12(fp)
   952fc:	008002b4 	movhi	r2,10
   95300:	10bc7904 	addi	r2,r2,-3612
   95304:	18c7883a 	add	r3,r3,r3
   95308:	18c7883a 	add	r3,r3,r3
   9530c:	10c5883a 	add	r2,r2,r3
   95310:	10800017 	ldw	r2,0(r2)
   95314:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   95318:	e0bff817 	ldw	r2,-32(fp)
   9531c:	1000091e 	bne	r2,zero,95344 <OSTaskNameGet+0x120>
   95320:	e0bff617 	ldw	r2,-40(fp)
   95324:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95328:	e0bff717 	ldw	r2,-36(fp)
   9532c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   95330:	e0bfff17 	ldw	r2,-4(fp)
   95334:	00c010c4 	movi	r3,67
   95338:	10c00005 	stb	r3,0(r2)
        return (0);
   9533c:	0005883a 	mov	r2,zero
   95340:	00001906 	br	953a8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   95344:	e0bff817 	ldw	r2,-32(fp)
   95348:	10800058 	cmpnei	r2,r2,1
   9534c:	1000091e 	bne	r2,zero,95374 <OSTaskNameGet+0x150>
   95350:	e0bff617 	ldw	r2,-40(fp)
   95354:	e0bff915 	stw	r2,-28(fp)
   95358:	e0bff917 	ldw	r2,-28(fp)
   9535c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   95360:	e0bfff17 	ldw	r2,-4(fp)
   95364:	00c010c4 	movi	r3,67
   95368:	10c00005 	stb	r3,0(r2)
        return (0);
   9536c:	0005883a 	mov	r2,zero
   95370:	00000d06 	br	953a8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   95374:	e0bff817 	ldw	r2,-32(fp)
   95378:	10801304 	addi	r2,r2,76
   9537c:	100b883a 	mov	r5,r2
   95380:	e13ffe17 	ldw	r4,-8(fp)
   95384:	00904180 	call	90418 <OS_StrCopy>
   95388:	e0bffb05 	stb	r2,-20(fp)
   9538c:	e0bff617 	ldw	r2,-40(fp)
   95390:	e0bffa15 	stw	r2,-24(fp)
   95394:	e0bffa17 	ldw	r2,-24(fp)
   95398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9539c:	e0bfff17 	ldw	r2,-4(fp)
   953a0:	10000005 	stb	zero,0(r2)
    return (len);
   953a4:	e0bffb03 	ldbu	r2,-20(fp)
}
   953a8:	e037883a 	mov	sp,fp
   953ac:	dfc00117 	ldw	ra,4(sp)
   953b0:	df000017 	ldw	fp,0(sp)
   953b4:	dec00204 	addi	sp,sp,8
   953b8:	f800283a 	ret

000953bc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   953bc:	defff304 	addi	sp,sp,-52
   953c0:	dfc00c15 	stw	ra,48(sp)
   953c4:	df000b15 	stw	fp,44(sp)
   953c8:	df000b04 	addi	fp,sp,44
   953cc:	2005883a 	mov	r2,r4
   953d0:	e17ffe15 	stw	r5,-8(fp)
   953d4:	e1bfff15 	stw	r6,-4(fp)
   953d8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   953dc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   953e0:	e0bfff17 	ldw	r2,-4(fp)
   953e4:	10005c26 	beq	r2,zero,95558 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   953e8:	e0bffd03 	ldbu	r2,-12(fp)
   953ec:	10800570 	cmpltui	r2,r2,21
   953f0:	1000071e 	bne	r2,zero,95410 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   953f4:	e0bffd03 	ldbu	r2,-12(fp)
   953f8:	10803fe0 	cmpeqi	r2,r2,255
   953fc:	1000041e 	bne	r2,zero,95410 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   95400:	e0bfff17 	ldw	r2,-4(fp)
   95404:	00c00a84 	movi	r3,42
   95408:	10c00005 	stb	r3,0(r2)
            return;
   9540c:	00005306 	br	9555c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   95410:	e0bffe17 	ldw	r2,-8(fp)
   95414:	1000041e 	bne	r2,zero,95428 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   95418:	e0bfff17 	ldw	r2,-4(fp)
   9541c:	00c00304 	movi	r3,12
   95420:	10c00005 	stb	r3,0(r2)
        return;
   95424:	00004d06 	br	9555c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   95428:	d0a73803 	ldbu	r2,-25376(gp)
   9542c:	10803fcc 	andi	r2,r2,255
   95430:	10000426 	beq	r2,zero,95444 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   95434:	e0bfff17 	ldw	r2,-4(fp)
   95438:	00c00484 	movi	r3,18
   9543c:	10c00005 	stb	r3,0(r2)
        return;
   95440:	00004606 	br	9555c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95444:	0005303a 	rdctl	r2,status
   95448:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9544c:	e0fffc17 	ldw	r3,-16(fp)
   95450:	00bfff84 	movi	r2,-2
   95454:	1884703a 	and	r2,r3,r2
   95458:	1001703a 	wrctl	status,r2
  
  return context;
   9545c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   95460:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   95464:	e0bffd03 	ldbu	r2,-12(fp)
   95468:	10803fd8 	cmpnei	r2,r2,255
   9546c:	1000031e 	bne	r2,zero,9547c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   95470:	d0a73917 	ldw	r2,-25372(gp)
   95474:	10800c83 	ldbu	r2,50(r2)
   95478:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9547c:	e0fffd03 	ldbu	r3,-12(fp)
   95480:	008002b4 	movhi	r2,10
   95484:	10bc7904 	addi	r2,r2,-3612
   95488:	18c7883a 	add	r3,r3,r3
   9548c:	18c7883a 	add	r3,r3,r3
   95490:	10c5883a 	add	r2,r2,r3
   95494:	10800017 	ldw	r2,0(r2)
   95498:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   9549c:	e0bff717 	ldw	r2,-36(fp)
   954a0:	1000081e 	bne	r2,zero,954c4 <OSTaskNameSet+0x108>
   954a4:	e0bff517 	ldw	r2,-44(fp)
   954a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   954ac:	e0bff617 	ldw	r2,-40(fp)
   954b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   954b4:	e0bfff17 	ldw	r2,-4(fp)
   954b8:	00c010c4 	movi	r3,67
   954bc:	10c00005 	stb	r3,0(r2)
        return;
   954c0:	00002606 	br	9555c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   954c4:	e0bff717 	ldw	r2,-36(fp)
   954c8:	10800058 	cmpnei	r2,r2,1
   954cc:	1000081e 	bne	r2,zero,954f0 <OSTaskNameSet+0x134>
   954d0:	e0bff517 	ldw	r2,-44(fp)
   954d4:	e0bff815 	stw	r2,-32(fp)
   954d8:	e0bff817 	ldw	r2,-32(fp)
   954dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   954e0:	e0bfff17 	ldw	r2,-4(fp)
   954e4:	00c010c4 	movi	r3,67
   954e8:	10c00005 	stb	r3,0(r2)
        return;
   954ec:	00001b06 	br	9555c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   954f0:	e13ffe17 	ldw	r4,-8(fp)
   954f4:	009048c0 	call	9048c <OS_StrLen>
   954f8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   954fc:	e0bffa03 	ldbu	r2,-24(fp)
   95500:	10800830 	cmpltui	r2,r2,32
   95504:	1000081e 	bne	r2,zero,95528 <OSTaskNameSet+0x16c>
   95508:	e0bff517 	ldw	r2,-44(fp)
   9550c:	e0bff915 	stw	r2,-28(fp)
   95510:	e0bff917 	ldw	r2,-28(fp)
   95514:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   95518:	e0bfff17 	ldw	r2,-4(fp)
   9551c:	00c01044 	movi	r3,65
   95520:	10c00005 	stb	r3,0(r2)
        return;
   95524:	00000d06 	br	9555c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   95528:	e0bff717 	ldw	r2,-36(fp)
   9552c:	10801304 	addi	r2,r2,76
   95530:	e17ffe17 	ldw	r5,-8(fp)
   95534:	1009883a 	mov	r4,r2
   95538:	00904180 	call	90418 <OS_StrCopy>
   9553c:	e0bff517 	ldw	r2,-44(fp)
   95540:	e0bffb15 	stw	r2,-20(fp)
   95544:	e0bffb17 	ldw	r2,-20(fp)
   95548:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9554c:	e0bfff17 	ldw	r2,-4(fp)
   95550:	10000005 	stb	zero,0(r2)
   95554:	00000106 	br	9555c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   95558:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   9555c:	e037883a 	mov	sp,fp
   95560:	dfc00117 	ldw	ra,4(sp)
   95564:	df000017 	ldw	fp,0(sp)
   95568:	dec00204 	addi	sp,sp,8
   9556c:	f800283a 	ret

00095570 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   95570:	defff404 	addi	sp,sp,-48
   95574:	dfc00b15 	stw	ra,44(sp)
   95578:	df000a15 	stw	fp,40(sp)
   9557c:	df000a04 	addi	fp,sp,40
   95580:	2005883a 	mov	r2,r4
   95584:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   95588:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   9558c:	e0bfff03 	ldbu	r2,-4(fp)
   95590:	10800530 	cmpltui	r2,r2,20
   95594:	1000021e 	bne	r2,zero,955a0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   95598:	00800a84 	movi	r2,42
   9559c:	00006406 	br	95730 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   955a0:	0005303a 	rdctl	r2,status
   955a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   955a8:	e0fffe17 	ldw	r3,-8(fp)
   955ac:	00bfff84 	movi	r2,-2
   955b0:	1884703a 	and	r2,r3,r2
   955b4:	1001703a 	wrctl	status,r2
  
  return context;
   955b8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   955bc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   955c0:	e0ffff03 	ldbu	r3,-4(fp)
   955c4:	008002b4 	movhi	r2,10
   955c8:	10bc7904 	addi	r2,r2,-3612
   955cc:	18c7883a 	add	r3,r3,r3
   955d0:	18c7883a 	add	r3,r3,r3
   955d4:	10c5883a 	add	r2,r2,r3
   955d8:	10800017 	ldw	r2,0(r2)
   955dc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   955e0:	e0bff817 	ldw	r2,-32(fp)
   955e4:	1000061e 	bne	r2,zero,95600 <OSTaskResume+0x90>
   955e8:	e0bff617 	ldw	r2,-40(fp)
   955ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   955f0:	e0bff717 	ldw	r2,-36(fp)
   955f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   955f8:	00801184 	movi	r2,70
   955fc:	00004c06 	br	95730 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   95600:	e0bff817 	ldw	r2,-32(fp)
   95604:	10800058 	cmpnei	r2,r2,1
   95608:	1000061e 	bne	r2,zero,95624 <OSTaskResume+0xb4>
   9560c:	e0bff617 	ldw	r2,-40(fp)
   95610:	e0bff915 	stw	r2,-28(fp)
   95614:	e0bff917 	ldw	r2,-28(fp)
   95618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9561c:	008010c4 	movi	r2,67
   95620:	00004306 	br	95730 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   95624:	e0bff817 	ldw	r2,-32(fp)
   95628:	10800c03 	ldbu	r2,48(r2)
   9562c:	10803fcc 	andi	r2,r2,255
   95630:	1080020c 	andi	r2,r2,8
   95634:	10003926 	beq	r2,zero,9571c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   95638:	e0bff817 	ldw	r2,-32(fp)
   9563c:	10c00c03 	ldbu	r3,48(r2)
   95640:	00bffdc4 	movi	r2,-9
   95644:	1884703a 	and	r2,r3,r2
   95648:	1007883a 	mov	r3,r2
   9564c:	e0bff817 	ldw	r2,-32(fp)
   95650:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   95654:	e0bff817 	ldw	r2,-32(fp)
   95658:	10800c03 	ldbu	r2,48(r2)
   9565c:	10803fcc 	andi	r2,r2,255
   95660:	1000281e 	bne	r2,zero,95704 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   95664:	e0bff817 	ldw	r2,-32(fp)
   95668:	10800b8b 	ldhu	r2,46(r2)
   9566c:	10bfffcc 	andi	r2,r2,65535
   95670:	10001f1e 	bne	r2,zero,956f0 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   95674:	e0bff817 	ldw	r2,-32(fp)
   95678:	10c00d83 	ldbu	r3,54(r2)
   9567c:	d0a73603 	ldbu	r2,-25384(gp)
   95680:	1884b03a 	or	r2,r3,r2
   95684:	d0a73605 	stb	r2,-25384(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   95688:	e0bff817 	ldw	r2,-32(fp)
   9568c:	10800d03 	ldbu	r2,52(r2)
   95690:	10c03fcc 	andi	r3,r2,255
   95694:	e0bff817 	ldw	r2,-32(fp)
   95698:	10800d03 	ldbu	r2,52(r2)
   9569c:	11003fcc 	andi	r4,r2,255
   956a0:	d0a73644 	addi	r2,gp,-25383
   956a4:	2085883a 	add	r2,r4,r2
   956a8:	11000003 	ldbu	r4,0(r2)
   956ac:	e0bff817 	ldw	r2,-32(fp)
   956b0:	10800d43 	ldbu	r2,53(r2)
   956b4:	2084b03a 	or	r2,r4,r2
   956b8:	1009883a 	mov	r4,r2
   956bc:	d0a73644 	addi	r2,gp,-25383
   956c0:	1885883a 	add	r2,r3,r2
   956c4:	11000005 	stb	r4,0(r2)
   956c8:	e0bff617 	ldw	r2,-40(fp)
   956cc:	e0bffa15 	stw	r2,-24(fp)
   956d0:	e0bffa17 	ldw	r2,-24(fp)
   956d4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   956d8:	d0a72a43 	ldbu	r2,-25431(gp)
   956dc:	10803fcc 	andi	r2,r2,255
   956e0:	10800058 	cmpnei	r2,r2,1
   956e4:	10000b1e 	bne	r2,zero,95714 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   956e8:	00902d40 	call	902d4 <OS_Sched>
   956ec:	00000906 	br	95714 <OSTaskResume+0x1a4>
   956f0:	e0bff617 	ldw	r2,-40(fp)
   956f4:	e0bffb15 	stw	r2,-20(fp)
   956f8:	e0bffb17 	ldw	r2,-20(fp)
   956fc:	1001703a 	wrctl	status,r2
   95700:	00000406 	br	95714 <OSTaskResume+0x1a4>
   95704:	e0bff617 	ldw	r2,-40(fp)
   95708:	e0bffc15 	stw	r2,-16(fp)
   9570c:	e0bffc17 	ldw	r2,-16(fp)
   95710:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   95714:	0005883a 	mov	r2,zero
   95718:	00000506 	br	95730 <OSTaskResume+0x1c0>
   9571c:	e0bff617 	ldw	r2,-40(fp)
   95720:	e0bffd15 	stw	r2,-12(fp)
   95724:	e0bffd17 	ldw	r2,-12(fp)
   95728:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   9572c:	00801104 	movi	r2,68
}
   95730:	e037883a 	mov	sp,fp
   95734:	dfc00117 	ldw	ra,4(sp)
   95738:	df000017 	ldw	fp,0(sp)
   9573c:	dec00204 	addi	sp,sp,8
   95740:	f800283a 	ret

00095744 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   95744:	defff304 	addi	sp,sp,-52
   95748:	df000c15 	stw	fp,48(sp)
   9574c:	df000c04 	addi	fp,sp,48
   95750:	2005883a 	mov	r2,r4
   95754:	e17fff15 	stw	r5,-4(fp)
   95758:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   9575c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   95760:	e0bffe03 	ldbu	r2,-8(fp)
   95764:	10800570 	cmpltui	r2,r2,21
   95768:	1000051e 	bne	r2,zero,95780 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   9576c:	e0bffe03 	ldbu	r2,-8(fp)
   95770:	10803fe0 	cmpeqi	r2,r2,255
   95774:	1000021e 	bne	r2,zero,95780 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   95778:	00800a84 	movi	r2,42
   9577c:	00005d06 	br	958f4 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   95780:	e0bfff17 	ldw	r2,-4(fp)
   95784:	1000021e 	bne	r2,zero,95790 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   95788:	00800244 	movi	r2,9
   9578c:	00005906 	br	958f4 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   95790:	e0bfff17 	ldw	r2,-4(fp)
   95794:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   95798:	e0bfff17 	ldw	r2,-4(fp)
   9579c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   957a0:	0005303a 	rdctl	r2,status
   957a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   957a8:	e0fffd17 	ldw	r3,-12(fp)
   957ac:	00bfff84 	movi	r2,-2
   957b0:	1884703a 	and	r2,r3,r2
   957b4:	1001703a 	wrctl	status,r2
  
  return context;
   957b8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   957bc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   957c0:	e0bffe03 	ldbu	r2,-8(fp)
   957c4:	10803fd8 	cmpnei	r2,r2,255
   957c8:	1000031e 	bne	r2,zero,957d8 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   957cc:	d0a73917 	ldw	r2,-25372(gp)
   957d0:	10800c83 	ldbu	r2,50(r2)
   957d4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   957d8:	e0fffe03 	ldbu	r3,-8(fp)
   957dc:	008002b4 	movhi	r2,10
   957e0:	10bc7904 	addi	r2,r2,-3612
   957e4:	18c7883a 	add	r3,r3,r3
   957e8:	18c7883a 	add	r3,r3,r3
   957ec:	10c5883a 	add	r2,r2,r3
   957f0:	10800017 	ldw	r2,0(r2)
   957f4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   957f8:	e0bff817 	ldw	r2,-32(fp)
   957fc:	1000061e 	bne	r2,zero,95818 <OSTaskStkChk+0xd4>
   95800:	e0bff617 	ldw	r2,-40(fp)
   95804:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95808:	e0bff717 	ldw	r2,-36(fp)
   9580c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   95810:	008010c4 	movi	r2,67
   95814:	00003706 	br	958f4 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   95818:	e0bff817 	ldw	r2,-32(fp)
   9581c:	10800058 	cmpnei	r2,r2,1
   95820:	1000061e 	bne	r2,zero,9583c <OSTaskStkChk+0xf8>
   95824:	e0bff617 	ldw	r2,-40(fp)
   95828:	e0bff915 	stw	r2,-28(fp)
   9582c:	e0bff917 	ldw	r2,-28(fp)
   95830:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   95834:	008010c4 	movi	r2,67
   95838:	00002e06 	br	958f4 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   9583c:	e0bff817 	ldw	r2,-32(fp)
   95840:	1080040b 	ldhu	r2,16(r2)
   95844:	10bfffcc 	andi	r2,r2,65535
   95848:	1080004c 	andi	r2,r2,1
   9584c:	1000061e 	bne	r2,zero,95868 <OSTaskStkChk+0x124>
   95850:	e0bff617 	ldw	r2,-40(fp)
   95854:	e0bffa15 	stw	r2,-24(fp)
   95858:	e0bffa17 	ldw	r2,-24(fp)
   9585c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   95860:	00801144 	movi	r2,69
   95864:	00002306 	br	958f4 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   95868:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   9586c:	e0bff817 	ldw	r2,-32(fp)
   95870:	10800317 	ldw	r2,12(r2)
   95874:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   95878:	e0bff817 	ldw	r2,-32(fp)
   9587c:	10800217 	ldw	r2,8(r2)
   95880:	e0bff415 	stw	r2,-48(fp)
   95884:	e0bff617 	ldw	r2,-40(fp)
   95888:	e0bffb15 	stw	r2,-20(fp)
   9588c:	e0bffb17 	ldw	r2,-20(fp)
   95890:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   95894:	00000306 	br	958a4 <OSTaskStkChk+0x160>
        nfree++;
   95898:	e0bff517 	ldw	r2,-44(fp)
   9589c:	10800044 	addi	r2,r2,1
   958a0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   958a4:	e0bff417 	ldw	r2,-48(fp)
   958a8:	10c00104 	addi	r3,r2,4
   958ac:	e0fff415 	stw	r3,-48(fp)
   958b0:	10800017 	ldw	r2,0(r2)
   958b4:	103ff826 	beq	r2,zero,95898 <__alt_data_end+0xfffd7098>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   958b8:	e0bff517 	ldw	r2,-44(fp)
   958bc:	1085883a 	add	r2,r2,r2
   958c0:	1085883a 	add	r2,r2,r2
   958c4:	1007883a 	mov	r3,r2
   958c8:	e0bfff17 	ldw	r2,-4(fp)
   958cc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   958d0:	e0fffc17 	ldw	r3,-16(fp)
   958d4:	e0bff517 	ldw	r2,-44(fp)
   958d8:	1885c83a 	sub	r2,r3,r2
   958dc:	1085883a 	add	r2,r2,r2
   958e0:	1085883a 	add	r2,r2,r2
   958e4:	1007883a 	mov	r3,r2
   958e8:	e0bfff17 	ldw	r2,-4(fp)
   958ec:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   958f0:	0005883a 	mov	r2,zero
}
   958f4:	e037883a 	mov	sp,fp
   958f8:	df000017 	ldw	fp,0(sp)
   958fc:	dec00104 	addi	sp,sp,4
   95900:	f800283a 	ret

00095904 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   95904:	defff504 	addi	sp,sp,-44
   95908:	dfc00a15 	stw	ra,40(sp)
   9590c:	df000915 	stw	fp,36(sp)
   95910:	df000904 	addi	fp,sp,36
   95914:	2005883a 	mov	r2,r4
   95918:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9591c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   95920:	e0bfff03 	ldbu	r2,-4(fp)
   95924:	10800518 	cmpnei	r2,r2,20
   95928:	1000021e 	bne	r2,zero,95934 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   9592c:	008011c4 	movi	r2,71
   95930:	00006806 	br	95ad4 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   95934:	e0bfff03 	ldbu	r2,-4(fp)
   95938:	10800530 	cmpltui	r2,r2,20
   9593c:	1000051e 	bne	r2,zero,95954 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   95940:	e0bfff03 	ldbu	r2,-4(fp)
   95944:	10803fe0 	cmpeqi	r2,r2,255
   95948:	1000021e 	bne	r2,zero,95954 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   9594c:	00800a84 	movi	r2,42
   95950:	00006006 	br	95ad4 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95954:	0005303a 	rdctl	r2,status
   95958:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9595c:	e0fffe17 	ldw	r3,-8(fp)
   95960:	00bfff84 	movi	r2,-2
   95964:	1884703a 	and	r2,r3,r2
   95968:	1001703a 	wrctl	status,r2
  
  return context;
   9596c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   95970:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   95974:	e0bfff03 	ldbu	r2,-4(fp)
   95978:	10803fd8 	cmpnei	r2,r2,255
   9597c:	1000061e 	bne	r2,zero,95998 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   95980:	d0a73917 	ldw	r2,-25372(gp)
   95984:	10800c83 	ldbu	r2,50(r2)
   95988:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   9598c:	00800044 	movi	r2,1
   95990:	e0bff705 	stb	r2,-36(fp)
   95994:	00000906 	br	959bc <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   95998:	d0a73917 	ldw	r2,-25372(gp)
   9599c:	10800c83 	ldbu	r2,50(r2)
   959a0:	10c03fcc 	andi	r3,r2,255
   959a4:	e0bfff03 	ldbu	r2,-4(fp)
   959a8:	1880031e 	bne	r3,r2,959b8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   959ac:	00800044 	movi	r2,1
   959b0:	e0bff705 	stb	r2,-36(fp)
   959b4:	00000106 	br	959bc <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   959b8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   959bc:	e0ffff03 	ldbu	r3,-4(fp)
   959c0:	008002b4 	movhi	r2,10
   959c4:	10bc7904 	addi	r2,r2,-3612
   959c8:	18c7883a 	add	r3,r3,r3
   959cc:	18c7883a 	add	r3,r3,r3
   959d0:	10c5883a 	add	r2,r2,r3
   959d4:	10800017 	ldw	r2,0(r2)
   959d8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   959dc:	e0bffa17 	ldw	r2,-24(fp)
   959e0:	1000061e 	bne	r2,zero,959fc <OSTaskSuspend+0xf8>
   959e4:	e0bff817 	ldw	r2,-32(fp)
   959e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   959ec:	e0bff917 	ldw	r2,-28(fp)
   959f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   959f4:	00801204 	movi	r2,72
   959f8:	00003606 	br	95ad4 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   959fc:	e0bffa17 	ldw	r2,-24(fp)
   95a00:	10800058 	cmpnei	r2,r2,1
   95a04:	1000061e 	bne	r2,zero,95a20 <OSTaskSuspend+0x11c>
   95a08:	e0bff817 	ldw	r2,-32(fp)
   95a0c:	e0bffb15 	stw	r2,-20(fp)
   95a10:	e0bffb17 	ldw	r2,-20(fp)
   95a14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   95a18:	008010c4 	movi	r2,67
   95a1c:	00002d06 	br	95ad4 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   95a20:	e0bffa17 	ldw	r2,-24(fp)
   95a24:	10800d03 	ldbu	r2,52(r2)
   95a28:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   95a2c:	e0fffd03 	ldbu	r3,-12(fp)
   95a30:	e13ffd03 	ldbu	r4,-12(fp)
   95a34:	d0a73644 	addi	r2,gp,-25383
   95a38:	2085883a 	add	r2,r4,r2
   95a3c:	10800003 	ldbu	r2,0(r2)
   95a40:	1009883a 	mov	r4,r2
   95a44:	e0bffa17 	ldw	r2,-24(fp)
   95a48:	10800d43 	ldbu	r2,53(r2)
   95a4c:	0084303a 	nor	r2,zero,r2
   95a50:	2084703a 	and	r2,r4,r2
   95a54:	1009883a 	mov	r4,r2
   95a58:	d0a73644 	addi	r2,gp,-25383
   95a5c:	1885883a 	add	r2,r3,r2
   95a60:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   95a64:	e0fffd03 	ldbu	r3,-12(fp)
   95a68:	d0a73644 	addi	r2,gp,-25383
   95a6c:	1885883a 	add	r2,r3,r2
   95a70:	10800003 	ldbu	r2,0(r2)
   95a74:	10803fcc 	andi	r2,r2,255
   95a78:	1000071e 	bne	r2,zero,95a98 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   95a7c:	e0bffa17 	ldw	r2,-24(fp)
   95a80:	10800d83 	ldbu	r2,54(r2)
   95a84:	0084303a 	nor	r2,zero,r2
   95a88:	1007883a 	mov	r3,r2
   95a8c:	d0a73603 	ldbu	r2,-25384(gp)
   95a90:	1884703a 	and	r2,r3,r2
   95a94:	d0a73605 	stb	r2,-25384(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   95a98:	e0bffa17 	ldw	r2,-24(fp)
   95a9c:	10800c03 	ldbu	r2,48(r2)
   95aa0:	10800214 	ori	r2,r2,8
   95aa4:	1007883a 	mov	r3,r2
   95aa8:	e0bffa17 	ldw	r2,-24(fp)
   95aac:	10c00c05 	stb	r3,48(r2)
   95ab0:	e0bff817 	ldw	r2,-32(fp)
   95ab4:	e0bffc15 	stw	r2,-16(fp)
   95ab8:	e0bffc17 	ldw	r2,-16(fp)
   95abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   95ac0:	e0bff703 	ldbu	r2,-36(fp)
   95ac4:	10800058 	cmpnei	r2,r2,1
   95ac8:	1000011e 	bne	r2,zero,95ad0 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   95acc:	00902d40 	call	902d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   95ad0:	0005883a 	mov	r2,zero
}
   95ad4:	e037883a 	mov	sp,fp
   95ad8:	dfc00117 	ldw	ra,4(sp)
   95adc:	df000017 	ldw	fp,0(sp)
   95ae0:	dec00204 	addi	sp,sp,8
   95ae4:	f800283a 	ret

00095ae8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   95ae8:	defff604 	addi	sp,sp,-40
   95aec:	dfc00915 	stw	ra,36(sp)
   95af0:	df000815 	stw	fp,32(sp)
   95af4:	df000804 	addi	fp,sp,32
   95af8:	2005883a 	mov	r2,r4
   95afc:	e17fff15 	stw	r5,-4(fp)
   95b00:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   95b04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   95b08:	e0bffe03 	ldbu	r2,-8(fp)
   95b0c:	10800570 	cmpltui	r2,r2,21
   95b10:	1000051e 	bne	r2,zero,95b28 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   95b14:	e0bffe03 	ldbu	r2,-8(fp)
   95b18:	10803fe0 	cmpeqi	r2,r2,255
   95b1c:	1000021e 	bne	r2,zero,95b28 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   95b20:	00800a84 	movi	r2,42
   95b24:	00003406 	br	95bf8 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   95b28:	e0bfff17 	ldw	r2,-4(fp)
   95b2c:	1000021e 	bne	r2,zero,95b38 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   95b30:	00800244 	movi	r2,9
   95b34:	00003006 	br	95bf8 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95b38:	0005303a 	rdctl	r2,status
   95b3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95b40:	e0fffd17 	ldw	r3,-12(fp)
   95b44:	00bfff84 	movi	r2,-2
   95b48:	1884703a 	and	r2,r3,r2
   95b4c:	1001703a 	wrctl	status,r2
  
  return context;
   95b50:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   95b54:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   95b58:	e0bffe03 	ldbu	r2,-8(fp)
   95b5c:	10803fd8 	cmpnei	r2,r2,255
   95b60:	1000031e 	bne	r2,zero,95b70 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   95b64:	d0a73917 	ldw	r2,-25372(gp)
   95b68:	10800c83 	ldbu	r2,50(r2)
   95b6c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   95b70:	e0fffe03 	ldbu	r3,-8(fp)
   95b74:	008002b4 	movhi	r2,10
   95b78:	10bc7904 	addi	r2,r2,-3612
   95b7c:	18c7883a 	add	r3,r3,r3
   95b80:	18c7883a 	add	r3,r3,r3
   95b84:	10c5883a 	add	r2,r2,r3
   95b88:	10800017 	ldw	r2,0(r2)
   95b8c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   95b90:	e0bffa17 	ldw	r2,-24(fp)
   95b94:	1000061e 	bne	r2,zero,95bb0 <OSTaskQuery+0xc8>
   95b98:	e0bff817 	ldw	r2,-32(fp)
   95b9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95ba0:	e0bff917 	ldw	r2,-28(fp)
   95ba4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   95ba8:	00800a44 	movi	r2,41
   95bac:	00001206 	br	95bf8 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   95bb0:	e0bffa17 	ldw	r2,-24(fp)
   95bb4:	10800058 	cmpnei	r2,r2,1
   95bb8:	1000061e 	bne	r2,zero,95bd4 <OSTaskQuery+0xec>
   95bbc:	e0bff817 	ldw	r2,-32(fp)
   95bc0:	e0bffb15 	stw	r2,-20(fp)
   95bc4:	e0bffb17 	ldw	r2,-20(fp)
   95bc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   95bcc:	008010c4 	movi	r2,67
   95bd0:	00000906 	br	95bf8 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   95bd4:	01801b04 	movi	r6,108
   95bd8:	e17ffa17 	ldw	r5,-24(fp)
   95bdc:	e13fff17 	ldw	r4,-4(fp)
   95be0:	009026c0 	call	9026c <OS_MemCopy>
   95be4:	e0bff817 	ldw	r2,-32(fp)
   95be8:	e0bffc15 	stw	r2,-16(fp)
   95bec:	e0bffc17 	ldw	r2,-16(fp)
   95bf0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   95bf4:	0005883a 	mov	r2,zero
}
   95bf8:	e037883a 	mov	sp,fp
   95bfc:	dfc00117 	ldw	ra,4(sp)
   95c00:	df000017 	ldw	fp,0(sp)
   95c04:	dec00204 	addi	sp,sp,8
   95c08:	f800283a 	ret

00095c0c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   95c0c:	defffc04 	addi	sp,sp,-16
   95c10:	df000315 	stw	fp,12(sp)
   95c14:	df000304 	addi	fp,sp,12
   95c18:	e13ffd15 	stw	r4,-12(fp)
   95c1c:	e17ffe15 	stw	r5,-8(fp)
   95c20:	3005883a 	mov	r2,r6
   95c24:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   95c28:	e0bfff0b 	ldhu	r2,-4(fp)
   95c2c:	1080004c 	andi	r2,r2,1
   95c30:	10000d26 	beq	r2,zero,95c68 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   95c34:	e0bfff0b 	ldhu	r2,-4(fp)
   95c38:	1080008c 	andi	r2,r2,2
   95c3c:	10000a26 	beq	r2,zero,95c68 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   95c40:	00000706 	br	95c60 <OS_TaskStkClr+0x54>
                size--;
   95c44:	e0bffe17 	ldw	r2,-8(fp)
   95c48:	10bfffc4 	addi	r2,r2,-1
   95c4c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   95c50:	e0bffd17 	ldw	r2,-12(fp)
   95c54:	10c00104 	addi	r3,r2,4
   95c58:	e0fffd15 	stw	r3,-12(fp)
   95c5c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   95c60:	e0bffe17 	ldw	r2,-8(fp)
   95c64:	103ff71e 	bne	r2,zero,95c44 <__alt_data_end+0xfffd7444>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   95c68:	0001883a 	nop
   95c6c:	e037883a 	mov	sp,fp
   95c70:	df000017 	ldw	fp,0(sp)
   95c74:	dec00104 	addi	sp,sp,4
   95c78:	f800283a 	ret

00095c7c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   95c7c:	defff904 	addi	sp,sp,-28
   95c80:	dfc00615 	stw	ra,24(sp)
   95c84:	df000515 	stw	fp,20(sp)
   95c88:	df000504 	addi	fp,sp,20
   95c8c:	2005883a 	mov	r2,r4
   95c90:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   95c94:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   95c98:	d0a73803 	ldbu	r2,-25376(gp)
   95c9c:	10803fcc 	andi	r2,r2,255
   95ca0:	1000311e 	bne	r2,zero,95d68 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   95ca4:	e0bfff0b 	ldhu	r2,-4(fp)
   95ca8:	10003026 	beq	r2,zero,95d6c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95cac:	0005303a 	rdctl	r2,status
   95cb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95cb4:	e0fffe17 	ldw	r3,-8(fp)
   95cb8:	00bfff84 	movi	r2,-2
   95cbc:	1884703a 	and	r2,r3,r2
   95cc0:	1001703a 	wrctl	status,r2
  
  return context;
   95cc4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   95cc8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   95ccc:	d0a73917 	ldw	r2,-25372(gp)
   95cd0:	10800d03 	ldbu	r2,52(r2)
   95cd4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   95cd8:	e0fffd03 	ldbu	r3,-12(fp)
   95cdc:	e13ffd03 	ldbu	r4,-12(fp)
   95ce0:	d0a73644 	addi	r2,gp,-25383
   95ce4:	2085883a 	add	r2,r4,r2
   95ce8:	10800003 	ldbu	r2,0(r2)
   95cec:	1009883a 	mov	r4,r2
   95cf0:	d0a73917 	ldw	r2,-25372(gp)
   95cf4:	10800d43 	ldbu	r2,53(r2)
   95cf8:	0084303a 	nor	r2,zero,r2
   95cfc:	2084703a 	and	r2,r4,r2
   95d00:	1009883a 	mov	r4,r2
   95d04:	d0a73644 	addi	r2,gp,-25383
   95d08:	1885883a 	add	r2,r3,r2
   95d0c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   95d10:	e0fffd03 	ldbu	r3,-12(fp)
   95d14:	d0a73644 	addi	r2,gp,-25383
   95d18:	1885883a 	add	r2,r3,r2
   95d1c:	10800003 	ldbu	r2,0(r2)
   95d20:	10803fcc 	andi	r2,r2,255
   95d24:	1000071e 	bne	r2,zero,95d44 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   95d28:	d0a73917 	ldw	r2,-25372(gp)
   95d2c:	10800d83 	ldbu	r2,54(r2)
   95d30:	0084303a 	nor	r2,zero,r2
   95d34:	1007883a 	mov	r3,r2
   95d38:	d0a73603 	ldbu	r2,-25384(gp)
   95d3c:	1884703a 	and	r2,r3,r2
   95d40:	d0a73605 	stb	r2,-25384(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   95d44:	d0a73917 	ldw	r2,-25372(gp)
   95d48:	e0ffff0b 	ldhu	r3,-4(fp)
   95d4c:	10c00b8d 	sth	r3,46(r2)
   95d50:	e0bffb17 	ldw	r2,-20(fp)
   95d54:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95d58:	e0bffc17 	ldw	r2,-16(fp)
   95d5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   95d60:	00902d40 	call	902d4 <OS_Sched>
   95d64:	00000106 	br	95d6c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   95d68:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   95d6c:	e037883a 	mov	sp,fp
   95d70:	dfc00117 	ldw	ra,4(sp)
   95d74:	df000017 	ldw	fp,0(sp)
   95d78:	dec00204 	addi	sp,sp,8
   95d7c:	f800283a 	ret

00095d80 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   95d80:	defff704 	addi	sp,sp,-36
   95d84:	dfc00815 	stw	ra,32(sp)
   95d88:	df000715 	stw	fp,28(sp)
   95d8c:	dc000615 	stw	r16,24(sp)
   95d90:	df000704 	addi	fp,sp,28
   95d94:	2011883a 	mov	r8,r4
   95d98:	2809883a 	mov	r4,r5
   95d9c:	3007883a 	mov	r3,r6
   95da0:	3805883a 	mov	r2,r7
   95da4:	e23ffb05 	stb	r8,-20(fp)
   95da8:	e13ffc05 	stb	r4,-16(fp)
   95dac:	e0fffd05 	stb	r3,-12(fp)
   95db0:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   95db4:	d0a73803 	ldbu	r2,-25376(gp)
   95db8:	10803fcc 	andi	r2,r2,255
   95dbc:	10000226 	beq	r2,zero,95dc8 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   95dc0:	00801544 	movi	r2,85
   95dc4:	00004706 	br	95ee4 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   95dc8:	e0bffb03 	ldbu	r2,-20(fp)
   95dcc:	1000081e 	bne	r2,zero,95df0 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   95dd0:	e0bffc03 	ldbu	r2,-16(fp)
   95dd4:	1000061e 	bne	r2,zero,95df0 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   95dd8:	e0bffd03 	ldbu	r2,-12(fp)
   95ddc:	1000041e 	bne	r2,zero,95df0 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   95de0:	e0bffe0b 	ldhu	r2,-8(fp)
   95de4:	1000021e 	bne	r2,zero,95df0 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   95de8:	00801504 	movi	r2,84
   95dec:	00003d06 	br	95ee4 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   95df0:	e0bffc03 	ldbu	r2,-16(fp)
   95df4:	10800f30 	cmpltui	r2,r2,60
   95df8:	1000021e 	bne	r2,zero,95e04 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   95dfc:	00801444 	movi	r2,81
   95e00:	00003806 	br	95ee4 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   95e04:	e0bffd03 	ldbu	r2,-12(fp)
   95e08:	10800f30 	cmpltui	r2,r2,60
   95e0c:	1000021e 	bne	r2,zero,95e18 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   95e10:	00801484 	movi	r2,82
   95e14:	00003306 	br	95ee4 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   95e18:	e0bffe0b 	ldhu	r2,-8(fp)
   95e1c:	1080fa30 	cmpltui	r2,r2,1000
   95e20:	1000021e 	bne	r2,zero,95e2c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   95e24:	008014c4 	movi	r2,83
   95e28:	00002e06 	br	95ee4 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   95e2c:	e0bffb03 	ldbu	r2,-20(fp)
   95e30:	01438404 	movi	r5,3600
   95e34:	1009883a 	mov	r4,r2
   95e38:	008b18c0 	call	8b18c <__mulsi3>
   95e3c:	1021883a 	mov	r16,r2
   95e40:	e0bffc03 	ldbu	r2,-16(fp)
   95e44:	01400f04 	movi	r5,60
   95e48:	1009883a 	mov	r4,r2
   95e4c:	008b18c0 	call	8b18c <__mulsi3>
   95e50:	8087883a 	add	r3,r16,r2
   95e54:	e0bffd03 	ldbu	r2,-12(fp)
   95e58:	1885883a 	add	r2,r3,r2
   95e5c:	0140fa04 	movi	r5,1000
   95e60:	1009883a 	mov	r4,r2
   95e64:	008b18c0 	call	8b18c <__mulsi3>
   95e68:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   95e6c:	e0bffe0b 	ldhu	r2,-8(fp)
   95e70:	0140fa04 	movi	r5,1000
   95e74:	1009883a 	mov	r4,r2
   95e78:	008b18c0 	call	8b18c <__mulsi3>
   95e7c:	0140fa04 	movi	r5,1000
   95e80:	1009883a 	mov	r4,r2
   95e84:	0080c040 	call	80c04 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   95e88:	8085883a 	add	r2,r16,r2
   95e8c:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   95e90:	e0bffa17 	ldw	r2,-24(fp)
   95e94:	1004d43a 	srli	r2,r2,16
   95e98:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   95e9c:	e0bffa17 	ldw	r2,-24(fp)
   95ea0:	10bfffcc 	andi	r2,r2,65535
   95ea4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   95ea8:	e0bffa17 	ldw	r2,-24(fp)
   95eac:	10bfffcc 	andi	r2,r2,65535
   95eb0:	1009883a 	mov	r4,r2
   95eb4:	0095c7c0 	call	95c7c <OSTimeDly>
    while (loops > 0) {
   95eb8:	00000706 	br	95ed8 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   95ebc:	01200014 	movui	r4,32768
   95ec0:	0095c7c0 	call	95c7c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   95ec4:	01200014 	movui	r4,32768
   95ec8:	0095c7c0 	call	95c7c <OSTimeDly>
        loops--;
   95ecc:	e0bff90b 	ldhu	r2,-28(fp)
   95ed0:	10bfffc4 	addi	r2,r2,-1
   95ed4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   95ed8:	e0bff90b 	ldhu	r2,-28(fp)
   95edc:	103ff71e 	bne	r2,zero,95ebc <__alt_data_end+0xfffd76bc>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   95ee0:	0005883a 	mov	r2,zero
}
   95ee4:	e6ffff04 	addi	sp,fp,-4
   95ee8:	dfc00217 	ldw	ra,8(sp)
   95eec:	df000117 	ldw	fp,4(sp)
   95ef0:	dc000017 	ldw	r16,0(sp)
   95ef4:	dec00304 	addi	sp,sp,12
   95ef8:	f800283a 	ret

00095efc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   95efc:	defff504 	addi	sp,sp,-44
   95f00:	dfc00a15 	stw	ra,40(sp)
   95f04:	df000915 	stw	fp,36(sp)
   95f08:	df000904 	addi	fp,sp,36
   95f0c:	2005883a 	mov	r2,r4
   95f10:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   95f14:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   95f18:	e0bfff03 	ldbu	r2,-4(fp)
   95f1c:	10800530 	cmpltui	r2,r2,20
   95f20:	1000021e 	bne	r2,zero,95f2c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   95f24:	00800a84 	movi	r2,42
   95f28:	00006406 	br	960bc <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95f2c:	0005303a 	rdctl	r2,status
   95f30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95f34:	e0fffe17 	ldw	r3,-8(fp)
   95f38:	00bfff84 	movi	r2,-2
   95f3c:	1884703a 	and	r2,r3,r2
   95f40:	1001703a 	wrctl	status,r2
  
  return context;
   95f44:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   95f48:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   95f4c:	e0ffff03 	ldbu	r3,-4(fp)
   95f50:	008002b4 	movhi	r2,10
   95f54:	10bc7904 	addi	r2,r2,-3612
   95f58:	18c7883a 	add	r3,r3,r3
   95f5c:	18c7883a 	add	r3,r3,r3
   95f60:	10c5883a 	add	r2,r2,r3
   95f64:	10800017 	ldw	r2,0(r2)
   95f68:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   95f6c:	e0bff917 	ldw	r2,-28(fp)
   95f70:	1000061e 	bne	r2,zero,95f8c <OSTimeDlyResume+0x90>
   95f74:	e0bff717 	ldw	r2,-36(fp)
   95f78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95f7c:	e0bff817 	ldw	r2,-32(fp)
   95f80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   95f84:	008010c4 	movi	r2,67
   95f88:	00004c06 	br	960bc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   95f8c:	e0bff917 	ldw	r2,-28(fp)
   95f90:	10800058 	cmpnei	r2,r2,1
   95f94:	1000061e 	bne	r2,zero,95fb0 <OSTimeDlyResume+0xb4>
   95f98:	e0bff717 	ldw	r2,-36(fp)
   95f9c:	e0bffa15 	stw	r2,-24(fp)
   95fa0:	e0bffa17 	ldw	r2,-24(fp)
   95fa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   95fa8:	008010c4 	movi	r2,67
   95fac:	00004306 	br	960bc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   95fb0:	e0bff917 	ldw	r2,-28(fp)
   95fb4:	10800b8b 	ldhu	r2,46(r2)
   95fb8:	10bfffcc 	andi	r2,r2,65535
   95fbc:	1000061e 	bne	r2,zero,95fd8 <OSTimeDlyResume+0xdc>
   95fc0:	e0bff717 	ldw	r2,-36(fp)
   95fc4:	e0bffb15 	stw	r2,-20(fp)
   95fc8:	e0bffb17 	ldw	r2,-20(fp)
   95fcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   95fd0:	00801404 	movi	r2,80
   95fd4:	00003906 	br	960bc <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   95fd8:	e0bff917 	ldw	r2,-28(fp)
   95fdc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   95fe0:	e0bff917 	ldw	r2,-28(fp)
   95fe4:	10800c03 	ldbu	r2,48(r2)
   95fe8:	10803fcc 	andi	r2,r2,255
   95fec:	10800dcc 	andi	r2,r2,55
   95ff0:	10000b26 	beq	r2,zero,96020 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   95ff4:	e0bff917 	ldw	r2,-28(fp)
   95ff8:	10c00c03 	ldbu	r3,48(r2)
   95ffc:	00bff204 	movi	r2,-56
   96000:	1884703a 	and	r2,r3,r2
   96004:	1007883a 	mov	r3,r2
   96008:	e0bff917 	ldw	r2,-28(fp)
   9600c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   96010:	e0bff917 	ldw	r2,-28(fp)
   96014:	00c00044 	movi	r3,1
   96018:	10c00c45 	stb	r3,49(r2)
   9601c:	00000206 	br	96028 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   96020:	e0bff917 	ldw	r2,-28(fp)
   96024:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   96028:	e0bff917 	ldw	r2,-28(fp)
   9602c:	10800c03 	ldbu	r2,48(r2)
   96030:	10803fcc 	andi	r2,r2,255
   96034:	1080020c 	andi	r2,r2,8
   96038:	10001b1e 	bne	r2,zero,960a8 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   9603c:	e0bff917 	ldw	r2,-28(fp)
   96040:	10c00d83 	ldbu	r3,54(r2)
   96044:	d0a73603 	ldbu	r2,-25384(gp)
   96048:	1884b03a 	or	r2,r3,r2
   9604c:	d0a73605 	stb	r2,-25384(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   96050:	e0bff917 	ldw	r2,-28(fp)
   96054:	10800d03 	ldbu	r2,52(r2)
   96058:	10c03fcc 	andi	r3,r2,255
   9605c:	e0bff917 	ldw	r2,-28(fp)
   96060:	10800d03 	ldbu	r2,52(r2)
   96064:	11003fcc 	andi	r4,r2,255
   96068:	d0a73644 	addi	r2,gp,-25383
   9606c:	2085883a 	add	r2,r4,r2
   96070:	11000003 	ldbu	r4,0(r2)
   96074:	e0bff917 	ldw	r2,-28(fp)
   96078:	10800d43 	ldbu	r2,53(r2)
   9607c:	2084b03a 	or	r2,r4,r2
   96080:	1009883a 	mov	r4,r2
   96084:	d0a73644 	addi	r2,gp,-25383
   96088:	1885883a 	add	r2,r3,r2
   9608c:	11000005 	stb	r4,0(r2)
   96090:	e0bff717 	ldw	r2,-36(fp)
   96094:	e0bffc15 	stw	r2,-16(fp)
   96098:	e0bffc17 	ldw	r2,-16(fp)
   9609c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   960a0:	00902d40 	call	902d4 <OS_Sched>
   960a4:	00000406 	br	960b8 <OSTimeDlyResume+0x1bc>
   960a8:	e0bff717 	ldw	r2,-36(fp)
   960ac:	e0bffd15 	stw	r2,-12(fp)
   960b0:	e0bffd17 	ldw	r2,-12(fp)
   960b4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   960b8:	0005883a 	mov	r2,zero
}
   960bc:	e037883a 	mov	sp,fp
   960c0:	dfc00117 	ldw	ra,4(sp)
   960c4:	df000017 	ldw	fp,0(sp)
   960c8:	dec00204 	addi	sp,sp,8
   960cc:	f800283a 	ret

000960d0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   960d0:	defffb04 	addi	sp,sp,-20
   960d4:	df000415 	stw	fp,16(sp)
   960d8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   960dc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   960e0:	0005303a 	rdctl	r2,status
   960e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   960e8:	e0fffe17 	ldw	r3,-8(fp)
   960ec:	00bfff84 	movi	r2,-2
   960f0:	1884703a 	and	r2,r3,r2
   960f4:	1001703a 	wrctl	status,r2
  
  return context;
   960f8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   960fc:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   96100:	d0a73a17 	ldw	r2,-25368(gp)
   96104:	e0bffd15 	stw	r2,-12(fp)
   96108:	e0bffc17 	ldw	r2,-16(fp)
   9610c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96110:	e0bfff17 	ldw	r2,-4(fp)
   96114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   96118:	e0bffd17 	ldw	r2,-12(fp)
}
   9611c:	e037883a 	mov	sp,fp
   96120:	df000017 	ldw	fp,0(sp)
   96124:	dec00104 	addi	sp,sp,4
   96128:	f800283a 	ret

0009612c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   9612c:	defffb04 	addi	sp,sp,-20
   96130:	df000415 	stw	fp,16(sp)
   96134:	df000404 	addi	fp,sp,16
   96138:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9613c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96140:	0005303a 	rdctl	r2,status
   96144:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96148:	e0fffd17 	ldw	r3,-12(fp)
   9614c:	00bfff84 	movi	r2,-2
   96150:	1884703a 	and	r2,r3,r2
   96154:	1001703a 	wrctl	status,r2
  
  return context;
   96158:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   9615c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   96160:	e0bfff17 	ldw	r2,-4(fp)
   96164:	d0a73a15 	stw	r2,-25368(gp)
   96168:	e0bffc17 	ldw	r2,-16(fp)
   9616c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96170:	e0bffe17 	ldw	r2,-8(fp)
   96174:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   96178:	0001883a 	nop
   9617c:	e037883a 	mov	sp,fp
   96180:	df000017 	ldw	fp,0(sp)
   96184:	dec00104 	addi	sp,sp,4
   96188:	f800283a 	ret

0009618c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   9618c:	defffd04 	addi	sp,sp,-12
   96190:	dfc00215 	stw	ra,8(sp)
   96194:	df000115 	stw	fp,4(sp)
   96198:	df000104 	addi	fp,sp,4
   9619c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   961a0:	d1600904 	addi	r5,gp,-32732
   961a4:	e13fff17 	ldw	r4,-4(fp)
   961a8:	00972000 	call	97200 <alt_dev_llist_insert>
}
   961ac:	e037883a 	mov	sp,fp
   961b0:	dfc00117 	ldw	ra,4(sp)
   961b4:	df000017 	ldw	fp,0(sp)
   961b8:	dec00204 	addi	sp,sp,8
   961bc:	f800283a 	ret

000961c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   961c0:	defffd04 	addi	sp,sp,-12
   961c4:	dfc00215 	stw	ra,8(sp)
   961c8:	df000115 	stw	fp,4(sp)
   961cc:	df000104 	addi	fp,sp,4
   961d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   961d4:	009790c0 	call	9790c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   961d8:	00800044 	movi	r2,1
   961dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   961e0:	0001883a 	nop
   961e4:	e037883a 	mov	sp,fp
   961e8:	dfc00117 	ldw	ra,4(sp)
   961ec:	df000017 	ldw	fp,0(sp)
   961f0:	dec00204 	addi	sp,sp,8
   961f4:	f800283a 	ret

000961f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   961f8:	defffe04 	addi	sp,sp,-8
   961fc:	dfc00115 	stw	ra,4(sp)
   96200:	df000015 	stw	fp,0(sp)
   96204:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   96208:	01c0fa04 	movi	r7,1000
   9620c:	01800144 	movi	r6,5
   96210:	000b883a 	mov	r5,zero
   96214:	01000134 	movhi	r4,4
   96218:	21000804 	addi	r4,r4,32
   9621c:	0096ffc0 	call	96ffc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   96220:	01800184 	movi	r6,6
   96224:	000b883a 	mov	r5,zero
   96228:	010002b4 	movhi	r4,10
   9622c:	21246a04 	addi	r4,r4,-28248
   96230:	00963bc0 	call	963bc <altera_avalon_jtag_uart_init>
   96234:	010002b4 	movhi	r4,10
   96238:	21246004 	addi	r4,r4,-28288
   9623c:	009618c0 	call	9618c <alt_dev_reg>
}
   96240:	0001883a 	nop
   96244:	e037883a 	mov	sp,fp
   96248:	dfc00117 	ldw	ra,4(sp)
   9624c:	df000017 	ldw	fp,0(sp)
   96250:	dec00204 	addi	sp,sp,8
   96254:	f800283a 	ret

00096258 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   96258:	defffa04 	addi	sp,sp,-24
   9625c:	dfc00515 	stw	ra,20(sp)
   96260:	df000415 	stw	fp,16(sp)
   96264:	df000404 	addi	fp,sp,16
   96268:	e13ffd15 	stw	r4,-12(fp)
   9626c:	e17ffe15 	stw	r5,-8(fp)
   96270:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   96274:	e0bffd17 	ldw	r2,-12(fp)
   96278:	10800017 	ldw	r2,0(r2)
   9627c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   96280:	e0bffc17 	ldw	r2,-16(fp)
   96284:	10c00a04 	addi	r3,r2,40
   96288:	e0bffd17 	ldw	r2,-12(fp)
   9628c:	10800217 	ldw	r2,8(r2)
   96290:	100f883a 	mov	r7,r2
   96294:	e1bfff17 	ldw	r6,-4(fp)
   96298:	e17ffe17 	ldw	r5,-8(fp)
   9629c:	1809883a 	mov	r4,r3
   962a0:	0096a040 	call	96a04 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   962a4:	e037883a 	mov	sp,fp
   962a8:	dfc00117 	ldw	ra,4(sp)
   962ac:	df000017 	ldw	fp,0(sp)
   962b0:	dec00204 	addi	sp,sp,8
   962b4:	f800283a 	ret

000962b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   962b8:	defffa04 	addi	sp,sp,-24
   962bc:	dfc00515 	stw	ra,20(sp)
   962c0:	df000415 	stw	fp,16(sp)
   962c4:	df000404 	addi	fp,sp,16
   962c8:	e13ffd15 	stw	r4,-12(fp)
   962cc:	e17ffe15 	stw	r5,-8(fp)
   962d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   962d4:	e0bffd17 	ldw	r2,-12(fp)
   962d8:	10800017 	ldw	r2,0(r2)
   962dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   962e0:	e0bffc17 	ldw	r2,-16(fp)
   962e4:	10c00a04 	addi	r3,r2,40
   962e8:	e0bffd17 	ldw	r2,-12(fp)
   962ec:	10800217 	ldw	r2,8(r2)
   962f0:	100f883a 	mov	r7,r2
   962f4:	e1bfff17 	ldw	r6,-4(fp)
   962f8:	e17ffe17 	ldw	r5,-8(fp)
   962fc:	1809883a 	mov	r4,r3
   96300:	0096cc00 	call	96cc0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   96304:	e037883a 	mov	sp,fp
   96308:	dfc00117 	ldw	ra,4(sp)
   9630c:	df000017 	ldw	fp,0(sp)
   96310:	dec00204 	addi	sp,sp,8
   96314:	f800283a 	ret

00096318 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   96318:	defffc04 	addi	sp,sp,-16
   9631c:	dfc00315 	stw	ra,12(sp)
   96320:	df000215 	stw	fp,8(sp)
   96324:	df000204 	addi	fp,sp,8
   96328:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9632c:	e0bfff17 	ldw	r2,-4(fp)
   96330:	10800017 	ldw	r2,0(r2)
   96334:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   96338:	e0bffe17 	ldw	r2,-8(fp)
   9633c:	10c00a04 	addi	r3,r2,40
   96340:	e0bfff17 	ldw	r2,-4(fp)
   96344:	10800217 	ldw	r2,8(r2)
   96348:	100b883a 	mov	r5,r2
   9634c:	1809883a 	mov	r4,r3
   96350:	00968ac0 	call	968ac <altera_avalon_jtag_uart_close>
}
   96354:	e037883a 	mov	sp,fp
   96358:	dfc00117 	ldw	ra,4(sp)
   9635c:	df000017 	ldw	fp,0(sp)
   96360:	dec00204 	addi	sp,sp,8
   96364:	f800283a 	ret

00096368 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   96368:	defffa04 	addi	sp,sp,-24
   9636c:	dfc00515 	stw	ra,20(sp)
   96370:	df000415 	stw	fp,16(sp)
   96374:	df000404 	addi	fp,sp,16
   96378:	e13ffd15 	stw	r4,-12(fp)
   9637c:	e17ffe15 	stw	r5,-8(fp)
   96380:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   96384:	e0bffd17 	ldw	r2,-12(fp)
   96388:	10800017 	ldw	r2,0(r2)
   9638c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   96390:	e0bffc17 	ldw	r2,-16(fp)
   96394:	10800a04 	addi	r2,r2,40
   96398:	e1bfff17 	ldw	r6,-4(fp)
   9639c:	e17ffe17 	ldw	r5,-8(fp)
   963a0:	1009883a 	mov	r4,r2
   963a4:	00969140 	call	96914 <altera_avalon_jtag_uart_ioctl>
}
   963a8:	e037883a 	mov	sp,fp
   963ac:	dfc00117 	ldw	ra,4(sp)
   963b0:	df000017 	ldw	fp,0(sp)
   963b4:	dec00204 	addi	sp,sp,8
   963b8:	f800283a 	ret

000963bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   963bc:	defff104 	addi	sp,sp,-60
   963c0:	dfc00e15 	stw	ra,56(sp)
   963c4:	df000d15 	stw	fp,52(sp)
   963c8:	df000d04 	addi	fp,sp,52
   963cc:	e13ff915 	stw	r4,-28(fp)
   963d0:	e17ffa15 	stw	r5,-24(fp)
   963d4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   963d8:	e0bff917 	ldw	r2,-28(fp)
   963dc:	10800c04 	addi	r2,r2,48
   963e0:	e0bff415 	stw	r2,-48(fp)
   963e4:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   963e8:	e0bff80b 	ldhu	r2,-32(fp)
   963ec:	e0fff884 	addi	r3,fp,-30
   963f0:	180b883a 	mov	r5,r3
   963f4:	1009883a 	mov	r4,r2
   963f8:	0090e400 	call	90e40 <OSFlagCreate>
   963fc:	1007883a 	mov	r3,r2
   96400:	e0bff417 	ldw	r2,-48(fp)
   96404:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   96408:	e0bff917 	ldw	r2,-28(fp)
   9640c:	10800a04 	addi	r2,r2,40
   96410:	e0bff515 	stw	r2,-44(fp)
   96414:	00800044 	movi	r2,1
   96418:	e0bff78d 	sth	r2,-34(fp)
   9641c:	e0bff78b 	ldhu	r2,-34(fp)
   96420:	1009883a 	mov	r4,r2
   96424:	0093b600 	call	93b60 <OSSemCreate>
   96428:	1007883a 	mov	r3,r2
   9642c:	e0bff517 	ldw	r2,-44(fp)
   96430:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   96434:	e0bff917 	ldw	r2,-28(fp)
   96438:	10800b04 	addi	r2,r2,44
   9643c:	e0bff615 	stw	r2,-40(fp)
   96440:	00800044 	movi	r2,1
   96444:	e0bff70d 	sth	r2,-36(fp)
   96448:	e0bff70b 	ldhu	r2,-36(fp)
   9644c:	1009883a 	mov	r4,r2
   96450:	0093b600 	call	93b60 <OSSemCreate>
   96454:	1007883a 	mov	r3,r2
   96458:	e0bff617 	ldw	r2,-40(fp)
   9645c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   96460:	e0bff917 	ldw	r2,-28(fp)
   96464:	00c00044 	movi	r3,1
   96468:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   9646c:	e0bff917 	ldw	r2,-28(fp)
   96470:	10800017 	ldw	r2,0(r2)
   96474:	10800104 	addi	r2,r2,4
   96478:	1007883a 	mov	r3,r2
   9647c:	e0bff917 	ldw	r2,-28(fp)
   96480:	10800817 	ldw	r2,32(r2)
   96484:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   96488:	e0bffa17 	ldw	r2,-24(fp)
   9648c:	e0fffb17 	ldw	r3,-20(fp)
   96490:	d8000015 	stw	zero,0(sp)
   96494:	e1fff917 	ldw	r7,-28(fp)
   96498:	01800274 	movhi	r6,9
   9649c:	31994104 	addi	r6,r6,25860
   964a0:	180b883a 	mov	r5,r3
   964a4:	1009883a 	mov	r4,r2
   964a8:	008dc8c0 	call	8dc8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   964ac:	e0bff917 	ldw	r2,-28(fp)
   964b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   964b4:	e0bff917 	ldw	r2,-28(fp)
   964b8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   964bc:	d0e73e17 	ldw	r3,-25352(gp)
   964c0:	e1fff917 	ldw	r7,-28(fp)
   964c4:	01800274 	movhi	r6,9
   964c8:	3199ea04 	addi	r6,r6,26536
   964cc:	180b883a 	mov	r5,r3
   964d0:	1009883a 	mov	r4,r2
   964d4:	00970780 	call	97078 <alt_alarm_start>
   964d8:	1000040e 	bge	r2,zero,964ec <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   964dc:	e0fff917 	ldw	r3,-28(fp)
   964e0:	00a00034 	movhi	r2,32768
   964e4:	10bfffc4 	addi	r2,r2,-1
   964e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   964ec:	0001883a 	nop
   964f0:	e037883a 	mov	sp,fp
   964f4:	dfc00117 	ldw	ra,4(sp)
   964f8:	df000017 	ldw	fp,0(sp)
   964fc:	dec00204 	addi	sp,sp,8
   96500:	f800283a 	ret

00096504 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   96504:	defff204 	addi	sp,sp,-56
   96508:	dfc00d15 	stw	ra,52(sp)
   9650c:	df000c15 	stw	fp,48(sp)
   96510:	df000c04 	addi	fp,sp,48
   96514:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   96518:	e0bfff17 	ldw	r2,-4(fp)
   9651c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   96520:	e0bff617 	ldw	r2,-40(fp)
   96524:	10800017 	ldw	r2,0(r2)
   96528:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9652c:	e0bff717 	ldw	r2,-36(fp)
   96530:	10800104 	addi	r2,r2,4
   96534:	10800037 	ldwio	r2,0(r2)
   96538:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   9653c:	e0bff817 	ldw	r2,-32(fp)
   96540:	1080c00c 	andi	r2,r2,768
   96544:	10009126 	beq	r2,zero,9678c <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   96548:	e0bff817 	ldw	r2,-32(fp)
   9654c:	1080400c 	andi	r2,r2,256
   96550:	10004726 	beq	r2,zero,96670 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   96554:	00800074 	movhi	r2,1
   96558:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9655c:	e0bff617 	ldw	r2,-40(fp)
   96560:	10800d17 	ldw	r2,52(r2)
   96564:	10800044 	addi	r2,r2,1
   96568:	1081ffcc 	andi	r2,r2,2047
   9656c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   96570:	e0bff617 	ldw	r2,-40(fp)
   96574:	10c00e17 	ldw	r3,56(r2)
   96578:	e0bff917 	ldw	r2,-28(fp)
   9657c:	18802726 	beq	r3,r2,9661c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   96580:	e0bff717 	ldw	r2,-36(fp)
   96584:	10800037 	ldwio	r2,0(r2)
   96588:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   9658c:	e0bff417 	ldw	r2,-48(fp)
   96590:	10a0000c 	andi	r2,r2,32768
   96594:	10002326 	beq	r2,zero,96624 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   96598:	e0bff617 	ldw	r2,-40(fp)
   9659c:	10800d17 	ldw	r2,52(r2)
   965a0:	e0fff417 	ldw	r3,-48(fp)
   965a4:	1809883a 	mov	r4,r3
   965a8:	e0fff617 	ldw	r3,-40(fp)
   965ac:	1885883a 	add	r2,r3,r2
   965b0:	10801104 	addi	r2,r2,68
   965b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   965b8:	e0bff617 	ldw	r2,-40(fp)
   965bc:	10800d17 	ldw	r2,52(r2)
   965c0:	10800044 	addi	r2,r2,1
   965c4:	10c1ffcc 	andi	r3,r2,2047
   965c8:	e0bff617 	ldw	r2,-40(fp)
   965cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   965d0:	e0bff617 	ldw	r2,-40(fp)
   965d4:	10800c17 	ldw	r2,48(r2)
   965d8:	e0bffb15 	stw	r2,-20(fp)
   965dc:	00800044 	movi	r2,1
   965e0:	e0bffc0d 	sth	r2,-16(fp)
   965e4:	00800044 	movi	r2,1
   965e8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   965ec:	d0a72a43 	ldbu	r2,-25431(gp)
   965f0:	10803fcc 	andi	r2,r2,255
   965f4:	103fd926 	beq	r2,zero,9655c <__alt_data_end+0xfffd7d5c>
  {
    OSFlagPost (group, flags, opt, &err);
   965f8:	e0bffc0b 	ldhu	r2,-16(fp)
   965fc:	e0fffc83 	ldbu	r3,-14(fp)
   96600:	e13ffdc4 	addi	r4,fp,-9
   96604:	200f883a 	mov	r7,r4
   96608:	180d883a 	mov	r6,r3
   9660c:	100b883a 	mov	r5,r2
   96610:	e13ffb17 	ldw	r4,-20(fp)
   96614:	0091a1c0 	call	91a1c <OSFlagPost>
      }
   96618:	003fd006 	br	9655c <__alt_data_end+0xfffd7d5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   9661c:	0001883a 	nop
   96620:	00000106 	br	96628 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   96624:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   96628:	e0bff417 	ldw	r2,-48(fp)
   9662c:	10bfffec 	andhi	r2,r2,65535
   96630:	10000f26 	beq	r2,zero,96670 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   96634:	e0bff617 	ldw	r2,-40(fp)
   96638:	10c00817 	ldw	r3,32(r2)
   9663c:	00bfff84 	movi	r2,-2
   96640:	1886703a 	and	r3,r3,r2
   96644:	e0bff617 	ldw	r2,-40(fp)
   96648:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   9664c:	e0bff717 	ldw	r2,-36(fp)
   96650:	10800104 	addi	r2,r2,4
   96654:	1007883a 	mov	r3,r2
   96658:	e0bff617 	ldw	r2,-40(fp)
   9665c:	10800817 	ldw	r2,32(r2)
   96660:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   96664:	e0bff717 	ldw	r2,-36(fp)
   96668:	10800104 	addi	r2,r2,4
   9666c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   96670:	e0bff817 	ldw	r2,-32(fp)
   96674:	1080800c 	andi	r2,r2,512
   96678:	103fac26 	beq	r2,zero,9652c <__alt_data_end+0xfffd7d2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   9667c:	e0bff817 	ldw	r2,-32(fp)
   96680:	1004d43a 	srli	r2,r2,16
   96684:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   96688:	00002606 	br	96724 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   9668c:	e0bff717 	ldw	r2,-36(fp)
   96690:	e0fff617 	ldw	r3,-40(fp)
   96694:	18c01017 	ldw	r3,64(r3)
   96698:	e13ff617 	ldw	r4,-40(fp)
   9669c:	20c7883a 	add	r3,r4,r3
   966a0:	18c21104 	addi	r3,r3,2116
   966a4:	18c00003 	ldbu	r3,0(r3)
   966a8:	18c03fcc 	andi	r3,r3,255
   966ac:	18c0201c 	xori	r3,r3,128
   966b0:	18ffe004 	addi	r3,r3,-128
   966b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   966b8:	e0bff617 	ldw	r2,-40(fp)
   966bc:	10801017 	ldw	r2,64(r2)
   966c0:	10800044 	addi	r2,r2,1
   966c4:	10c1ffcc 	andi	r3,r2,2047
   966c8:	e0bff617 	ldw	r2,-40(fp)
   966cc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   966d0:	e0bff617 	ldw	r2,-40(fp)
   966d4:	10800c17 	ldw	r2,48(r2)
   966d8:	e0bffa15 	stw	r2,-24(fp)
   966dc:	00800084 	movi	r2,2
   966e0:	e0bffd0d 	sth	r2,-12(fp)
   966e4:	00800044 	movi	r2,1
   966e8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   966ec:	d0a72a43 	ldbu	r2,-25431(gp)
   966f0:	10803fcc 	andi	r2,r2,255
   966f4:	10000826 	beq	r2,zero,96718 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   966f8:	e0bffd0b 	ldhu	r2,-12(fp)
   966fc:	e0fffd83 	ldbu	r3,-10(fp)
   96700:	e13ffe04 	addi	r4,fp,-8
   96704:	200f883a 	mov	r7,r4
   96708:	180d883a 	mov	r6,r3
   9670c:	100b883a 	mov	r5,r2
   96710:	e13ffa17 	ldw	r4,-24(fp)
   96714:	0091a1c0 	call	91a1c <OSFlagPost>

        space--;
   96718:	e0bff517 	ldw	r2,-44(fp)
   9671c:	10bfffc4 	addi	r2,r2,-1
   96720:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   96724:	e0bff517 	ldw	r2,-44(fp)
   96728:	10000526 	beq	r2,zero,96740 <altera_avalon_jtag_uart_irq+0x23c>
   9672c:	e0bff617 	ldw	r2,-40(fp)
   96730:	10c01017 	ldw	r3,64(r2)
   96734:	e0bff617 	ldw	r2,-40(fp)
   96738:	10800f17 	ldw	r2,60(r2)
   9673c:	18bfd31e 	bne	r3,r2,9668c <__alt_data_end+0xfffd7e8c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   96740:	e0bff517 	ldw	r2,-44(fp)
   96744:	103f7926 	beq	r2,zero,9652c <__alt_data_end+0xfffd7d2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   96748:	e0bff617 	ldw	r2,-40(fp)
   9674c:	10c00817 	ldw	r3,32(r2)
   96750:	00bfff44 	movi	r2,-3
   96754:	1886703a 	and	r3,r3,r2
   96758:	e0bff617 	ldw	r2,-40(fp)
   9675c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   96760:	e0bff617 	ldw	r2,-40(fp)
   96764:	10800017 	ldw	r2,0(r2)
   96768:	10800104 	addi	r2,r2,4
   9676c:	1007883a 	mov	r3,r2
   96770:	e0bff617 	ldw	r2,-40(fp)
   96774:	10800817 	ldw	r2,32(r2)
   96778:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9677c:	e0bff717 	ldw	r2,-36(fp)
   96780:	10800104 	addi	r2,r2,4
   96784:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   96788:	003f6806 	br	9652c <__alt_data_end+0xfffd7d2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   9678c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   96790:	0001883a 	nop
   96794:	e037883a 	mov	sp,fp
   96798:	dfc00117 	ldw	ra,4(sp)
   9679c:	df000017 	ldw	fp,0(sp)
   967a0:	dec00204 	addi	sp,sp,8
   967a4:	f800283a 	ret

000967a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   967a8:	defff904 	addi	sp,sp,-28
   967ac:	dfc00615 	stw	ra,24(sp)
   967b0:	df000515 	stw	fp,20(sp)
   967b4:	df000504 	addi	fp,sp,20
   967b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   967bc:	e0bfff17 	ldw	r2,-4(fp)
   967c0:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   967c4:	e0bffb17 	ldw	r2,-20(fp)
   967c8:	10800017 	ldw	r2,0(r2)
   967cc:	10800104 	addi	r2,r2,4
   967d0:	10800037 	ldwio	r2,0(r2)
   967d4:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   967d8:	e0bffc17 	ldw	r2,-16(fp)
   967dc:	1081000c 	andi	r2,r2,1024
   967e0:	10000b26 	beq	r2,zero,96810 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   967e4:	e0bffb17 	ldw	r2,-20(fp)
   967e8:	10800017 	ldw	r2,0(r2)
   967ec:	10800104 	addi	r2,r2,4
   967f0:	1007883a 	mov	r3,r2
   967f4:	e0bffb17 	ldw	r2,-20(fp)
   967f8:	10800817 	ldw	r2,32(r2)
   967fc:	10810014 	ori	r2,r2,1024
   96800:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   96804:	e0bffb17 	ldw	r2,-20(fp)
   96808:	10000915 	stw	zero,36(r2)
   9680c:	00002106 	br	96894 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   96810:	e0bffb17 	ldw	r2,-20(fp)
   96814:	10c00917 	ldw	r3,36(r2)
   96818:	00a00034 	movhi	r2,32768
   9681c:	10bfff04 	addi	r2,r2,-4
   96820:	10c01c36 	bltu	r2,r3,96894 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   96824:	e0bffb17 	ldw	r2,-20(fp)
   96828:	10800917 	ldw	r2,36(r2)
   9682c:	10c00044 	addi	r3,r2,1
   96830:	e0bffb17 	ldw	r2,-20(fp)
   96834:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   96838:	e0bffb17 	ldw	r2,-20(fp)
   9683c:	10c00917 	ldw	r3,36(r2)
   96840:	e0bffb17 	ldw	r2,-20(fp)
   96844:	10800117 	ldw	r2,4(r2)
   96848:	18801236 	bltu	r3,r2,96894 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   9684c:	e0bffb17 	ldw	r2,-20(fp)
   96850:	10800c17 	ldw	r2,48(r2)
   96854:	e0bffd15 	stw	r2,-12(fp)
   96858:	00800104 	movi	r2,4
   9685c:	e0bffe0d 	sth	r2,-8(fp)
   96860:	00800044 	movi	r2,1
   96864:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   96868:	d0a72a43 	ldbu	r2,-25431(gp)
   9686c:	10803fcc 	andi	r2,r2,255
   96870:	10000826 	beq	r2,zero,96894 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   96874:	e0bffe0b 	ldhu	r2,-8(fp)
   96878:	e0fffe83 	ldbu	r3,-6(fp)
   9687c:	e13ffec4 	addi	r4,fp,-5
   96880:	200f883a 	mov	r7,r4
   96884:	180d883a 	mov	r6,r3
   96888:	100b883a 	mov	r5,r2
   9688c:	e13ffd17 	ldw	r4,-12(fp)
   96890:	0091a1c0 	call	91a1c <OSFlagPost>
   96894:	d0a73e17 	ldw	r2,-25352(gp)
    }
  }

  return alt_ticks_per_second();
}
   96898:	e037883a 	mov	sp,fp
   9689c:	dfc00117 	ldw	ra,4(sp)
   968a0:	df000017 	ldw	fp,0(sp)
   968a4:	dec00204 	addi	sp,sp,8
   968a8:	f800283a 	ret

000968ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   968ac:	defffd04 	addi	sp,sp,-12
   968b0:	df000215 	stw	fp,8(sp)
   968b4:	df000204 	addi	fp,sp,8
   968b8:	e13ffe15 	stw	r4,-8(fp)
   968bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   968c0:	00000506 	br	968d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   968c4:	e0bfff17 	ldw	r2,-4(fp)
   968c8:	1090000c 	andi	r2,r2,16384
   968cc:	10000226 	beq	r2,zero,968d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   968d0:	00bffd44 	movi	r2,-11
   968d4:	00000b06 	br	96904 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   968d8:	e0bffe17 	ldw	r2,-8(fp)
   968dc:	10c01017 	ldw	r3,64(r2)
   968e0:	e0bffe17 	ldw	r2,-8(fp)
   968e4:	10800f17 	ldw	r2,60(r2)
   968e8:	18800526 	beq	r3,r2,96900 <altera_avalon_jtag_uart_close+0x54>
   968ec:	e0bffe17 	ldw	r2,-8(fp)
   968f0:	10c00917 	ldw	r3,36(r2)
   968f4:	e0bffe17 	ldw	r2,-8(fp)
   968f8:	10800117 	ldw	r2,4(r2)
   968fc:	18bff136 	bltu	r3,r2,968c4 <__alt_data_end+0xfffd80c4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   96900:	0005883a 	mov	r2,zero
}
   96904:	e037883a 	mov	sp,fp
   96908:	df000017 	ldw	fp,0(sp)
   9690c:	dec00104 	addi	sp,sp,4
   96910:	f800283a 	ret

00096914 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   96914:	defffa04 	addi	sp,sp,-24
   96918:	df000515 	stw	fp,20(sp)
   9691c:	df000504 	addi	fp,sp,20
   96920:	e13ffd15 	stw	r4,-12(fp)
   96924:	e17ffe15 	stw	r5,-8(fp)
   96928:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   9692c:	00bff9c4 	movi	r2,-25
   96930:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   96934:	e0bffe17 	ldw	r2,-8(fp)
   96938:	10da8060 	cmpeqi	r3,r2,27137
   9693c:	1800031e 	bne	r3,zero,9694c <altera_avalon_jtag_uart_ioctl+0x38>
   96940:	109a80a0 	cmpeqi	r2,r2,27138
   96944:	1000181e 	bne	r2,zero,969a8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   96948:	00002906 	br	969f0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   9694c:	e0bffd17 	ldw	r2,-12(fp)
   96950:	10c00117 	ldw	r3,4(r2)
   96954:	00a00034 	movhi	r2,32768
   96958:	10bfffc4 	addi	r2,r2,-1
   9695c:	18802126 	beq	r3,r2,969e4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   96960:	e0bfff17 	ldw	r2,-4(fp)
   96964:	10800017 	ldw	r2,0(r2)
   96968:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   9696c:	e0bffc17 	ldw	r2,-16(fp)
   96970:	10800090 	cmplti	r2,r2,2
   96974:	1000061e 	bne	r2,zero,96990 <altera_avalon_jtag_uart_ioctl+0x7c>
   96978:	e0fffc17 	ldw	r3,-16(fp)
   9697c:	00a00034 	movhi	r2,32768
   96980:	10bfffc4 	addi	r2,r2,-1
   96984:	18800226 	beq	r3,r2,96990 <altera_avalon_jtag_uart_ioctl+0x7c>
   96988:	e0bffc17 	ldw	r2,-16(fp)
   9698c:	00000206 	br	96998 <altera_avalon_jtag_uart_ioctl+0x84>
   96990:	00a00034 	movhi	r2,32768
   96994:	10bfff84 	addi	r2,r2,-2
   96998:	e0fffd17 	ldw	r3,-12(fp)
   9699c:	18800115 	stw	r2,4(r3)
      rc = 0;
   969a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   969a4:	00000f06 	br	969e4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   969a8:	e0bffd17 	ldw	r2,-12(fp)
   969ac:	10c00117 	ldw	r3,4(r2)
   969b0:	00a00034 	movhi	r2,32768
   969b4:	10bfffc4 	addi	r2,r2,-1
   969b8:	18800c26 	beq	r3,r2,969ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   969bc:	e0bffd17 	ldw	r2,-12(fp)
   969c0:	10c00917 	ldw	r3,36(r2)
   969c4:	e0bffd17 	ldw	r2,-12(fp)
   969c8:	10800117 	ldw	r2,4(r2)
   969cc:	1885803a 	cmpltu	r2,r3,r2
   969d0:	10c03fcc 	andi	r3,r2,255
   969d4:	e0bfff17 	ldw	r2,-4(fp)
   969d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   969dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   969e0:	00000206 	br	969ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   969e4:	0001883a 	nop
   969e8:	00000106 	br	969f0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   969ec:	0001883a 	nop

  default:
    break;
  }

  return rc;
   969f0:	e0bffb17 	ldw	r2,-20(fp)
}
   969f4:	e037883a 	mov	sp,fp
   969f8:	df000017 	ldw	fp,0(sp)
   969fc:	dec00104 	addi	sp,sp,4
   96a00:	f800283a 	ret

00096a04 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   96a04:	deffed04 	addi	sp,sp,-76
   96a08:	dfc01215 	stw	ra,72(sp)
   96a0c:	df001115 	stw	fp,68(sp)
   96a10:	df001104 	addi	fp,sp,68
   96a14:	e13ffc15 	stw	r4,-16(fp)
   96a18:	e17ffd15 	stw	r5,-12(fp)
   96a1c:	e1bffe15 	stw	r6,-8(fp)
   96a20:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   96a24:	e0bffd17 	ldw	r2,-12(fp)
   96a28:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   96a2c:	e0bffc17 	ldw	r2,-16(fp)
   96a30:	10800a17 	ldw	r2,40(r2)
   96a34:	e0bff815 	stw	r2,-32(fp)
   96a38:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   96a3c:	e0bff90b 	ldhu	r2,-28(fp)
   96a40:	e0fffb04 	addi	r3,fp,-20
   96a44:	180d883a 	mov	r6,r3
   96a48:	100b883a 	mov	r5,r2
   96a4c:	e13ff817 	ldw	r4,-32(fp)
   96a50:	0093e780 	call	93e78 <OSSemPend>

  while (space > 0)
   96a54:	00006106 	br	96bdc <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   96a58:	e0bffc17 	ldw	r2,-16(fp)
   96a5c:	10800d17 	ldw	r2,52(r2)
   96a60:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   96a64:	e0bffc17 	ldw	r2,-16(fp)
   96a68:	10800e17 	ldw	r2,56(r2)
   96a6c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   96a70:	e0fff317 	ldw	r3,-52(fp)
   96a74:	e0bff417 	ldw	r2,-48(fp)
   96a78:	18800536 	bltu	r3,r2,96a90 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   96a7c:	e0fff317 	ldw	r3,-52(fp)
   96a80:	e0bff417 	ldw	r2,-48(fp)
   96a84:	1885c83a 	sub	r2,r3,r2
   96a88:	e0bff115 	stw	r2,-60(fp)
   96a8c:	00000406 	br	96aa0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   96a90:	00c20004 	movi	r3,2048
   96a94:	e0bff417 	ldw	r2,-48(fp)
   96a98:	1885c83a 	sub	r2,r3,r2
   96a9c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   96aa0:	e0bff117 	ldw	r2,-60(fp)
   96aa4:	10001e26 	beq	r2,zero,96b20 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   96aa8:	e0fffe17 	ldw	r3,-8(fp)
   96aac:	e0bff117 	ldw	r2,-60(fp)
   96ab0:	1880022e 	bgeu	r3,r2,96abc <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   96ab4:	e0bffe17 	ldw	r2,-8(fp)
   96ab8:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   96abc:	e0bffc17 	ldw	r2,-16(fp)
   96ac0:	10c01104 	addi	r3,r2,68
   96ac4:	e0bff417 	ldw	r2,-48(fp)
   96ac8:	1885883a 	add	r2,r3,r2
   96acc:	e1bff117 	ldw	r6,-60(fp)
   96ad0:	100b883a 	mov	r5,r2
   96ad4:	e13ff017 	ldw	r4,-64(fp)
   96ad8:	00864900 	call	86490 <memcpy>
      ptr   += n;
   96adc:	e0fff017 	ldw	r3,-64(fp)
   96ae0:	e0bff117 	ldw	r2,-60(fp)
   96ae4:	1885883a 	add	r2,r3,r2
   96ae8:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   96aec:	e0fffe17 	ldw	r3,-8(fp)
   96af0:	e0bff117 	ldw	r2,-60(fp)
   96af4:	1885c83a 	sub	r2,r3,r2
   96af8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   96afc:	e0fff417 	ldw	r3,-48(fp)
   96b00:	e0bff117 	ldw	r2,-60(fp)
   96b04:	1885883a 	add	r2,r3,r2
   96b08:	10c1ffcc 	andi	r3,r2,2047
   96b0c:	e0bffc17 	ldw	r2,-16(fp)
   96b10:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   96b14:	e0bffe17 	ldw	r2,-8(fp)
   96b18:	00bfcf16 	blt	zero,r2,96a58 <__alt_data_end+0xfffd8258>
   96b1c:	00000106 	br	96b24 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   96b20:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   96b24:	e0fff017 	ldw	r3,-64(fp)
   96b28:	e0bffd17 	ldw	r2,-12(fp)
   96b2c:	18802e1e 	bne	r3,r2,96be8 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   96b30:	e0bfff17 	ldw	r2,-4(fp)
   96b34:	1090000c 	andi	r2,r2,16384
   96b38:	10002d1e 	bne	r2,zero,96bf0 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   96b3c:	d0a72a43 	ldbu	r2,-25431(gp)
   96b40:	10803fcc 	andi	r2,r2,255
   96b44:	10800058 	cmpnei	r2,r2,1
   96b48:	1000161e 	bne	r2,zero,96ba4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   96b4c:	e0bffc17 	ldw	r2,-16(fp)
   96b50:	10800c17 	ldw	r2,48(r2)
   96b54:	e0bff215 	stw	r2,-56(fp)
   96b58:	00800144 	movi	r2,5
   96b5c:	e0bff98d 	sth	r2,-26(fp)
   96b60:	00bfe0c4 	movi	r2,-125
   96b64:	e0bffa05 	stb	r2,-24(fp)
   96b68:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   96b6c:	d0a72a43 	ldbu	r2,-25431(gp)
   96b70:	10803fcc 	andi	r2,r2,255
   96b74:	10001526 	beq	r2,zero,96bcc <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   96b78:	e0fff98b 	ldhu	r3,-26(fp)
   96b7c:	e13ffa03 	ldbu	r4,-24(fp)
   96b80:	e17ffa8b 	ldhu	r5,-22(fp)
   96b84:	e0bffb44 	addi	r2,fp,-19
   96b88:	d8800015 	stw	r2,0(sp)
   96b8c:	280f883a 	mov	r7,r5
   96b90:	200d883a 	mov	r6,r4
   96b94:	180b883a 	mov	r5,r3
   96b98:	e13ff217 	ldw	r4,-56(fp)
   96b9c:	00914040 	call	91404 <OSFlagPend>
   96ba0:	00000a06 	br	96bcc <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   96ba4:	0001883a 	nop
   96ba8:	e0bffc17 	ldw	r2,-16(fp)
   96bac:	10c00d17 	ldw	r3,52(r2)
   96bb0:	e0bff317 	ldw	r2,-52(fp)
   96bb4:	1880051e 	bne	r3,r2,96bcc <altera_avalon_jtag_uart_read+0x1c8>
   96bb8:	e0bffc17 	ldw	r2,-16(fp)
   96bbc:	10c00917 	ldw	r3,36(r2)
   96bc0:	e0bffc17 	ldw	r2,-16(fp)
   96bc4:	10800117 	ldw	r2,4(r2)
   96bc8:	18bff736 	bltu	r3,r2,96ba8 <__alt_data_end+0xfffd83a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   96bcc:	e0bffc17 	ldw	r2,-16(fp)
   96bd0:	10c00d17 	ldw	r3,52(r2)
   96bd4:	e0bff317 	ldw	r2,-52(fp)
   96bd8:	18800726 	beq	r3,r2,96bf8 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   96bdc:	e0bffe17 	ldw	r2,-8(fp)
   96be0:	00bf9d16 	blt	zero,r2,96a58 <__alt_data_end+0xfffd8258>
   96be4:	00000506 	br	96bfc <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   96be8:	0001883a 	nop
   96bec:	00000306 	br	96bfc <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   96bf0:	0001883a 	nop
   96bf4:	00000106 	br	96bfc <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   96bf8:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   96bfc:	e0bffc17 	ldw	r2,-16(fp)
   96c00:	10800a17 	ldw	r2,40(r2)
   96c04:	1009883a 	mov	r4,r2
   96c08:	00941f00 	call	941f0 <OSSemPost>

  if (ptr != buffer)
   96c0c:	e0fff017 	ldw	r3,-64(fp)
   96c10:	e0bffd17 	ldw	r2,-12(fp)
   96c14:	18801826 	beq	r3,r2,96c78 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96c18:	0005303a 	rdctl	r2,status
   96c1c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96c20:	e0fff717 	ldw	r3,-36(fp)
   96c24:	00bfff84 	movi	r2,-2
   96c28:	1884703a 	and	r2,r3,r2
   96c2c:	1001703a 	wrctl	status,r2
  
  return context;
   96c30:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   96c34:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   96c38:	e0bffc17 	ldw	r2,-16(fp)
   96c3c:	10800817 	ldw	r2,32(r2)
   96c40:	10c00054 	ori	r3,r2,1
   96c44:	e0bffc17 	ldw	r2,-16(fp)
   96c48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   96c4c:	e0bffc17 	ldw	r2,-16(fp)
   96c50:	10800017 	ldw	r2,0(r2)
   96c54:	10800104 	addi	r2,r2,4
   96c58:	1007883a 	mov	r3,r2
   96c5c:	e0bffc17 	ldw	r2,-16(fp)
   96c60:	10800817 	ldw	r2,32(r2)
   96c64:	18800035 	stwio	r2,0(r3)
   96c68:	e0bff617 	ldw	r2,-40(fp)
   96c6c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96c70:	e0bff517 	ldw	r2,-44(fp)
   96c74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   96c78:	e0fff017 	ldw	r3,-64(fp)
   96c7c:	e0bffd17 	ldw	r2,-12(fp)
   96c80:	18800426 	beq	r3,r2,96c94 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   96c84:	e0fff017 	ldw	r3,-64(fp)
   96c88:	e0bffd17 	ldw	r2,-12(fp)
   96c8c:	1885c83a 	sub	r2,r3,r2
   96c90:	00000606 	br	96cac <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   96c94:	e0bfff17 	ldw	r2,-4(fp)
   96c98:	1090000c 	andi	r2,r2,16384
   96c9c:	10000226 	beq	r2,zero,96ca8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   96ca0:	00bffd44 	movi	r2,-11
   96ca4:	00000106 	br	96cac <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   96ca8:	00bffec4 	movi	r2,-5
}
   96cac:	e037883a 	mov	sp,fp
   96cb0:	dfc00117 	ldw	ra,4(sp)
   96cb4:	df000017 	ldw	fp,0(sp)
   96cb8:	dec00204 	addi	sp,sp,8
   96cbc:	f800283a 	ret

00096cc0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   96cc0:	deffed04 	addi	sp,sp,-76
   96cc4:	dfc01215 	stw	ra,72(sp)
   96cc8:	df001115 	stw	fp,68(sp)
   96ccc:	df001104 	addi	fp,sp,68
   96cd0:	e13ffc15 	stw	r4,-16(fp)
   96cd4:	e17ffd15 	stw	r5,-12(fp)
   96cd8:	e1bffe15 	stw	r6,-8(fp)
   96cdc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   96ce0:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   96ce4:	e0bffd17 	ldw	r2,-12(fp)
   96ce8:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   96cec:	e0bffc17 	ldw	r2,-16(fp)
   96cf0:	10800b17 	ldw	r2,44(r2)
   96cf4:	e0bff815 	stw	r2,-32(fp)
   96cf8:	e03ff90d 	sth	zero,-28(fp)
   96cfc:	e0bff90b 	ldhu	r2,-28(fp)
   96d00:	e0fffb44 	addi	r3,fp,-19
   96d04:	180d883a 	mov	r6,r3
   96d08:	100b883a 	mov	r5,r2
   96d0c:	e13ff817 	ldw	r4,-32(fp)
   96d10:	0093e780 	call	93e78 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   96d14:	00003706 	br	96df4 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   96d18:	e0bffc17 	ldw	r2,-16(fp)
   96d1c:	10800f17 	ldw	r2,60(r2)
   96d20:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   96d24:	e0bffc17 	ldw	r2,-16(fp)
   96d28:	10801017 	ldw	r2,64(r2)
   96d2c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   96d30:	e0fff417 	ldw	r3,-48(fp)
   96d34:	e0bff017 	ldw	r2,-64(fp)
   96d38:	1880062e 	bgeu	r3,r2,96d54 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   96d3c:	e0fff017 	ldw	r3,-64(fp)
   96d40:	e0bff417 	ldw	r2,-48(fp)
   96d44:	1885c83a 	sub	r2,r3,r2
   96d48:	10bfffc4 	addi	r2,r2,-1
   96d4c:	e0bff115 	stw	r2,-60(fp)
   96d50:	00000b06 	br	96d80 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   96d54:	e0bff017 	ldw	r2,-64(fp)
   96d58:	10000526 	beq	r2,zero,96d70 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   96d5c:	00c20004 	movi	r3,2048
   96d60:	e0bff417 	ldw	r2,-48(fp)
   96d64:	1885c83a 	sub	r2,r3,r2
   96d68:	e0bff115 	stw	r2,-60(fp)
   96d6c:	00000406 	br	96d80 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   96d70:	00c1ffc4 	movi	r3,2047
   96d74:	e0bff417 	ldw	r2,-48(fp)
   96d78:	1885c83a 	sub	r2,r3,r2
   96d7c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   96d80:	e0bff117 	ldw	r2,-60(fp)
   96d84:	10001e26 	beq	r2,zero,96e00 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   96d88:	e0fffe17 	ldw	r3,-8(fp)
   96d8c:	e0bff117 	ldw	r2,-60(fp)
   96d90:	1880022e 	bgeu	r3,r2,96d9c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   96d94:	e0bffe17 	ldw	r2,-8(fp)
   96d98:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   96d9c:	e0bffc17 	ldw	r2,-16(fp)
   96da0:	10c21104 	addi	r3,r2,2116
   96da4:	e0bff417 	ldw	r2,-48(fp)
   96da8:	1885883a 	add	r2,r3,r2
   96dac:	e1bff117 	ldw	r6,-60(fp)
   96db0:	e17ffd17 	ldw	r5,-12(fp)
   96db4:	1009883a 	mov	r4,r2
   96db8:	00864900 	call	86490 <memcpy>
      ptr   += n;
   96dbc:	e0fffd17 	ldw	r3,-12(fp)
   96dc0:	e0bff117 	ldw	r2,-60(fp)
   96dc4:	1885883a 	add	r2,r3,r2
   96dc8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   96dcc:	e0fffe17 	ldw	r3,-8(fp)
   96dd0:	e0bff117 	ldw	r2,-60(fp)
   96dd4:	1885c83a 	sub	r2,r3,r2
   96dd8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   96ddc:	e0fff417 	ldw	r3,-48(fp)
   96de0:	e0bff117 	ldw	r2,-60(fp)
   96de4:	1885883a 	add	r2,r3,r2
   96de8:	10c1ffcc 	andi	r3,r2,2047
   96dec:	e0bffc17 	ldw	r2,-16(fp)
   96df0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   96df4:	e0bffe17 	ldw	r2,-8(fp)
   96df8:	00bfc716 	blt	zero,r2,96d18 <__alt_data_end+0xfffd8518>
   96dfc:	00000106 	br	96e04 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   96e00:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96e04:	0005303a 	rdctl	r2,status
   96e08:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96e0c:	e0fff717 	ldw	r3,-36(fp)
   96e10:	00bfff84 	movi	r2,-2
   96e14:	1884703a 	and	r2,r3,r2
   96e18:	1001703a 	wrctl	status,r2
  
  return context;
   96e1c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   96e20:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   96e24:	e0bffc17 	ldw	r2,-16(fp)
   96e28:	10800817 	ldw	r2,32(r2)
   96e2c:	10c00094 	ori	r3,r2,2
   96e30:	e0bffc17 	ldw	r2,-16(fp)
   96e34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   96e38:	e0bffc17 	ldw	r2,-16(fp)
   96e3c:	10800017 	ldw	r2,0(r2)
   96e40:	10800104 	addi	r2,r2,4
   96e44:	1007883a 	mov	r3,r2
   96e48:	e0bffc17 	ldw	r2,-16(fp)
   96e4c:	10800817 	ldw	r2,32(r2)
   96e50:	18800035 	stwio	r2,0(r3)
   96e54:	e0bff617 	ldw	r2,-40(fp)
   96e58:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96e5c:	e0bff317 	ldw	r2,-52(fp)
   96e60:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   96e64:	e0bffe17 	ldw	r2,-8(fp)
   96e68:	00802a0e 	bge	zero,r2,96f14 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   96e6c:	e0bfff17 	ldw	r2,-4(fp)
   96e70:	1090000c 	andi	r2,r2,16384
   96e74:	10002a1e 	bne	r2,zero,96f20 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   96e78:	d0a72a43 	ldbu	r2,-25431(gp)
   96e7c:	10803fcc 	andi	r2,r2,255
   96e80:	10800058 	cmpnei	r2,r2,1
   96e84:	1000161e 	bne	r2,zero,96ee0 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   96e88:	e0bffc17 	ldw	r2,-16(fp)
   96e8c:	10800c17 	ldw	r2,48(r2)
   96e90:	e0bff515 	stw	r2,-44(fp)
   96e94:	00800184 	movi	r2,6
   96e98:	e0bff98d 	sth	r2,-26(fp)
   96e9c:	00bfe0c4 	movi	r2,-125
   96ea0:	e0bffa05 	stb	r2,-24(fp)
   96ea4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   96ea8:	d0a72a43 	ldbu	r2,-25431(gp)
   96eac:	10803fcc 	andi	r2,r2,255
   96eb0:	10001526 	beq	r2,zero,96f08 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   96eb4:	e0fff98b 	ldhu	r3,-26(fp)
   96eb8:	e13ffa03 	ldbu	r4,-24(fp)
   96ebc:	e17ffa8b 	ldhu	r5,-22(fp)
   96ec0:	e0bffb04 	addi	r2,fp,-20
   96ec4:	d8800015 	stw	r2,0(sp)
   96ec8:	280f883a 	mov	r7,r5
   96ecc:	200d883a 	mov	r6,r4
   96ed0:	180b883a 	mov	r5,r3
   96ed4:	e13ff517 	ldw	r4,-44(fp)
   96ed8:	00914040 	call	91404 <OSFlagPend>
   96edc:	00000a06 	br	96f08 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   96ee0:	0001883a 	nop
   96ee4:	e0bffc17 	ldw	r2,-16(fp)
   96ee8:	10c01017 	ldw	r3,64(r2)
   96eec:	e0bff017 	ldw	r2,-64(fp)
   96ef0:	1880051e 	bne	r3,r2,96f08 <altera_avalon_jtag_uart_write+0x248>
   96ef4:	e0bffc17 	ldw	r2,-16(fp)
   96ef8:	10c00917 	ldw	r3,36(r2)
   96efc:	e0bffc17 	ldw	r2,-16(fp)
   96f00:	10800117 	ldw	r2,4(r2)
   96f04:	18bff736 	bltu	r3,r2,96ee4 <__alt_data_end+0xfffd86e4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   96f08:	e0bffc17 	ldw	r2,-16(fp)
   96f0c:	10800917 	ldw	r2,36(r2)
   96f10:	1000051e 	bne	r2,zero,96f28 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   96f14:	e0bffe17 	ldw	r2,-8(fp)
   96f18:	00bfb616 	blt	zero,r2,96df4 <__alt_data_end+0xfffd85f4>
   96f1c:	00000306 	br	96f2c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   96f20:	0001883a 	nop
   96f24:	00000106 	br	96f2c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   96f28:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   96f2c:	e0bffc17 	ldw	r2,-16(fp)
   96f30:	10800b17 	ldw	r2,44(r2)
   96f34:	1009883a 	mov	r4,r2
   96f38:	00941f00 	call	941f0 <OSSemPost>

  if (ptr != start)
   96f3c:	e0fffd17 	ldw	r3,-12(fp)
   96f40:	e0bff217 	ldw	r2,-56(fp)
   96f44:	18800426 	beq	r3,r2,96f58 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   96f48:	e0fffd17 	ldw	r3,-12(fp)
   96f4c:	e0bff217 	ldw	r2,-56(fp)
   96f50:	1885c83a 	sub	r2,r3,r2
   96f54:	00000606 	br	96f70 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   96f58:	e0bfff17 	ldw	r2,-4(fp)
   96f5c:	1090000c 	andi	r2,r2,16384
   96f60:	10000226 	beq	r2,zero,96f6c <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   96f64:	00bffd44 	movi	r2,-11
   96f68:	00000106 	br	96f70 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   96f6c:	00bffec4 	movi	r2,-5
}
   96f70:	e037883a 	mov	sp,fp
   96f74:	dfc00117 	ldw	ra,4(sp)
   96f78:	df000017 	ldw	fp,0(sp)
   96f7c:	dec00204 	addi	sp,sp,8
   96f80:	f800283a 	ret

00096f84 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   96f84:	defffa04 	addi	sp,sp,-24
   96f88:	dfc00515 	stw	ra,20(sp)
   96f8c:	df000415 	stw	fp,16(sp)
   96f90:	df000404 	addi	fp,sp,16
   96f94:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   96f98:	0007883a 	mov	r3,zero
   96f9c:	e0bfff17 	ldw	r2,-4(fp)
   96fa0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   96fa4:	e0bfff17 	ldw	r2,-4(fp)
   96fa8:	10800104 	addi	r2,r2,4
   96fac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96fb0:	0005303a 	rdctl	r2,status
   96fb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96fb8:	e0fffd17 	ldw	r3,-12(fp)
   96fbc:	00bfff84 	movi	r2,-2
   96fc0:	1884703a 	and	r2,r3,r2
   96fc4:	1001703a 	wrctl	status,r2
  
  return context;
   96fc8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   96fcc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   96fd0:	00978040 	call	97804 <alt_tick>
   96fd4:	e0bffc17 	ldw	r2,-16(fp)
   96fd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96fdc:	e0bffe17 	ldw	r2,-8(fp)
   96fe0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   96fe4:	0001883a 	nop
   96fe8:	e037883a 	mov	sp,fp
   96fec:	dfc00117 	ldw	ra,4(sp)
   96ff0:	df000017 	ldw	fp,0(sp)
   96ff4:	dec00204 	addi	sp,sp,8
   96ff8:	f800283a 	ret

00096ffc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   96ffc:	defff804 	addi	sp,sp,-32
   97000:	dfc00715 	stw	ra,28(sp)
   97004:	df000615 	stw	fp,24(sp)
   97008:	df000604 	addi	fp,sp,24
   9700c:	e13ffc15 	stw	r4,-16(fp)
   97010:	e17ffd15 	stw	r5,-12(fp)
   97014:	e1bffe15 	stw	r6,-8(fp)
   97018:	e1ffff15 	stw	r7,-4(fp)
   9701c:	e0bfff17 	ldw	r2,-4(fp)
   97020:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   97024:	d0a73e17 	ldw	r2,-25352(gp)
   97028:	1000021e 	bne	r2,zero,97034 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   9702c:	e0bffb17 	ldw	r2,-20(fp)
   97030:	d0a73e15 	stw	r2,-25352(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   97034:	e0bffc17 	ldw	r2,-16(fp)
   97038:	10800104 	addi	r2,r2,4
   9703c:	00c001c4 	movi	r3,7
   97040:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   97044:	d8000015 	stw	zero,0(sp)
   97048:	e1fffc17 	ldw	r7,-16(fp)
   9704c:	01800274 	movhi	r6,9
   97050:	319be104 	addi	r6,r6,28548
   97054:	e17ffe17 	ldw	r5,-8(fp)
   97058:	e13ffd17 	ldw	r4,-12(fp)
   9705c:	008dc8c0 	call	8dc8c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   97060:	0001883a 	nop
   97064:	e037883a 	mov	sp,fp
   97068:	dfc00117 	ldw	ra,4(sp)
   9706c:	df000017 	ldw	fp,0(sp)
   97070:	dec00204 	addi	sp,sp,8
   97074:	f800283a 	ret

00097078 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   97078:	defff504 	addi	sp,sp,-44
   9707c:	df000a15 	stw	fp,40(sp)
   97080:	df000a04 	addi	fp,sp,40
   97084:	e13ffc15 	stw	r4,-16(fp)
   97088:	e17ffd15 	stw	r5,-12(fp)
   9708c:	e1bffe15 	stw	r6,-8(fp)
   97090:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   97094:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   97098:	d0a73e17 	ldw	r2,-25352(gp)
  
  if (alt_ticks_per_second ())
   9709c:	10003c26 	beq	r2,zero,97190 <alt_alarm_start+0x118>
  {
    if (alarm)
   970a0:	e0bffc17 	ldw	r2,-16(fp)
   970a4:	10003826 	beq	r2,zero,97188 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   970a8:	e0bffc17 	ldw	r2,-16(fp)
   970ac:	e0fffe17 	ldw	r3,-8(fp)
   970b0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   970b4:	e0bffc17 	ldw	r2,-16(fp)
   970b8:	e0ffff17 	ldw	r3,-4(fp)
   970bc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   970c0:	0005303a 	rdctl	r2,status
   970c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   970c8:	e0fff917 	ldw	r3,-28(fp)
   970cc:	00bfff84 	movi	r2,-2
   970d0:	1884703a 	and	r2,r3,r2
   970d4:	1001703a 	wrctl	status,r2
  
  return context;
   970d8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   970dc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   970e0:	d0a73f17 	ldw	r2,-25348(gp)
      
      current_nticks = alt_nticks();
   970e4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   970e8:	e0fffd17 	ldw	r3,-12(fp)
   970ec:	e0bff617 	ldw	r2,-40(fp)
   970f0:	1885883a 	add	r2,r3,r2
   970f4:	10c00044 	addi	r3,r2,1
   970f8:	e0bffc17 	ldw	r2,-16(fp)
   970fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   97100:	e0bffc17 	ldw	r2,-16(fp)
   97104:	10c00217 	ldw	r3,8(r2)
   97108:	e0bff617 	ldw	r2,-40(fp)
   9710c:	1880042e 	bgeu	r3,r2,97120 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   97110:	e0bffc17 	ldw	r2,-16(fp)
   97114:	00c00044 	movi	r3,1
   97118:	10c00405 	stb	r3,16(r2)
   9711c:	00000206 	br	97128 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   97120:	e0bffc17 	ldw	r2,-16(fp)
   97124:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   97128:	e0bffc17 	ldw	r2,-16(fp)
   9712c:	d0e02e04 	addi	r3,gp,-32584
   97130:	e0fffa15 	stw	r3,-24(fp)
   97134:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   97138:	e0bffb17 	ldw	r2,-20(fp)
   9713c:	e0fffa17 	ldw	r3,-24(fp)
   97140:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   97144:	e0bffa17 	ldw	r2,-24(fp)
   97148:	10c00017 	ldw	r3,0(r2)
   9714c:	e0bffb17 	ldw	r2,-20(fp)
   97150:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   97154:	e0bffa17 	ldw	r2,-24(fp)
   97158:	10800017 	ldw	r2,0(r2)
   9715c:	e0fffb17 	ldw	r3,-20(fp)
   97160:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   97164:	e0bffa17 	ldw	r2,-24(fp)
   97168:	e0fffb17 	ldw	r3,-20(fp)
   9716c:	10c00015 	stw	r3,0(r2)
   97170:	e0bff817 	ldw	r2,-32(fp)
   97174:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97178:	e0bff717 	ldw	r2,-36(fp)
   9717c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   97180:	0005883a 	mov	r2,zero
   97184:	00000306 	br	97194 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   97188:	00bffa84 	movi	r2,-22
   9718c:	00000106 	br	97194 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   97190:	00bfde84 	movi	r2,-134
  }
}
   97194:	e037883a 	mov	sp,fp
   97198:	df000017 	ldw	fp,0(sp)
   9719c:	dec00104 	addi	sp,sp,4
   971a0:	f800283a 	ret

000971a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   971a4:	deffff04 	addi	sp,sp,-4
   971a8:	df000015 	stw	fp,0(sp)
   971ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   971b0:	0001883a 	nop
   971b4:	e037883a 	mov	sp,fp
   971b8:	df000017 	ldw	fp,0(sp)
   971bc:	dec00104 	addi	sp,sp,4
   971c0:	f800283a 	ret

000971c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   971c4:	defffe04 	addi	sp,sp,-8
   971c8:	dfc00115 	stw	ra,4(sp)
   971cc:	df000015 	stw	fp,0(sp)
   971d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   971d4:	d0a00c17 	ldw	r2,-32720(gp)
   971d8:	10000326 	beq	r2,zero,971e8 <alt_get_errno+0x24>
   971dc:	d0a00c17 	ldw	r2,-32720(gp)
   971e0:	103ee83a 	callr	r2
   971e4:	00000106 	br	971ec <alt_get_errno+0x28>
   971e8:	d0a71d04 	addi	r2,gp,-25484
}
   971ec:	e037883a 	mov	sp,fp
   971f0:	dfc00117 	ldw	ra,4(sp)
   971f4:	df000017 	ldw	fp,0(sp)
   971f8:	dec00204 	addi	sp,sp,8
   971fc:	f800283a 	ret

00097200 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   97200:	defffa04 	addi	sp,sp,-24
   97204:	dfc00515 	stw	ra,20(sp)
   97208:	df000415 	stw	fp,16(sp)
   9720c:	df000404 	addi	fp,sp,16
   97210:	e13ffe15 	stw	r4,-8(fp)
   97214:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   97218:	e0bffe17 	ldw	r2,-8(fp)
   9721c:	10000326 	beq	r2,zero,9722c <alt_dev_llist_insert+0x2c>
   97220:	e0bffe17 	ldw	r2,-8(fp)
   97224:	10800217 	ldw	r2,8(r2)
   97228:	1000061e 	bne	r2,zero,97244 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   9722c:	00971c40 	call	971c4 <alt_get_errno>
   97230:	1007883a 	mov	r3,r2
   97234:	00800584 	movi	r2,22
   97238:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   9723c:	00bffa84 	movi	r2,-22
   97240:	00001306 	br	97290 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   97244:	e0bffe17 	ldw	r2,-8(fp)
   97248:	e0ffff17 	ldw	r3,-4(fp)
   9724c:	e0fffc15 	stw	r3,-16(fp)
   97250:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   97254:	e0bffd17 	ldw	r2,-12(fp)
   97258:	e0fffc17 	ldw	r3,-16(fp)
   9725c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   97260:	e0bffc17 	ldw	r2,-16(fp)
   97264:	10c00017 	ldw	r3,0(r2)
   97268:	e0bffd17 	ldw	r2,-12(fp)
   9726c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   97270:	e0bffc17 	ldw	r2,-16(fp)
   97274:	10800017 	ldw	r2,0(r2)
   97278:	e0fffd17 	ldw	r3,-12(fp)
   9727c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   97280:	e0bffc17 	ldw	r2,-16(fp)
   97284:	e0fffd17 	ldw	r3,-12(fp)
   97288:	10c00015 	stw	r3,0(r2)

  return 0;  
   9728c:	0005883a 	mov	r2,zero
}
   97290:	e037883a 	mov	sp,fp
   97294:	dfc00117 	ldw	ra,4(sp)
   97298:	df000017 	ldw	fp,0(sp)
   9729c:	dec00204 	addi	sp,sp,8
   972a0:	f800283a 	ret

000972a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   972a4:	defffd04 	addi	sp,sp,-12
   972a8:	dfc00215 	stw	ra,8(sp)
   972ac:	df000115 	stw	fp,4(sp)
   972b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   972b4:	008002b4 	movhi	r2,10
   972b8:	10a0a904 	addi	r2,r2,-32092
   972bc:	e0bfff15 	stw	r2,-4(fp)
   972c0:	00000606 	br	972dc <_do_ctors+0x38>
        (*ctor) (); 
   972c4:	e0bfff17 	ldw	r2,-4(fp)
   972c8:	10800017 	ldw	r2,0(r2)
   972cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   972d0:	e0bfff17 	ldw	r2,-4(fp)
   972d4:	10bfff04 	addi	r2,r2,-4
   972d8:	e0bfff15 	stw	r2,-4(fp)
   972dc:	e0ffff17 	ldw	r3,-4(fp)
   972e0:	008002b4 	movhi	r2,10
   972e4:	10a0aa04 	addi	r2,r2,-32088
   972e8:	18bff62e 	bgeu	r3,r2,972c4 <__alt_data_end+0xfffd8ac4>
        (*ctor) (); 
}
   972ec:	0001883a 	nop
   972f0:	e037883a 	mov	sp,fp
   972f4:	dfc00117 	ldw	ra,4(sp)
   972f8:	df000017 	ldw	fp,0(sp)
   972fc:	dec00204 	addi	sp,sp,8
   97300:	f800283a 	ret

00097304 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   97304:	defffd04 	addi	sp,sp,-12
   97308:	dfc00215 	stw	ra,8(sp)
   9730c:	df000115 	stw	fp,4(sp)
   97310:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   97314:	008002b4 	movhi	r2,10
   97318:	10a0a904 	addi	r2,r2,-32092
   9731c:	e0bfff15 	stw	r2,-4(fp)
   97320:	00000606 	br	9733c <_do_dtors+0x38>
        (*dtor) (); 
   97324:	e0bfff17 	ldw	r2,-4(fp)
   97328:	10800017 	ldw	r2,0(r2)
   9732c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   97330:	e0bfff17 	ldw	r2,-4(fp)
   97334:	10bfff04 	addi	r2,r2,-4
   97338:	e0bfff15 	stw	r2,-4(fp)
   9733c:	e0ffff17 	ldw	r3,-4(fp)
   97340:	008002b4 	movhi	r2,10
   97344:	10a0aa04 	addi	r2,r2,-32088
   97348:	18bff62e 	bgeu	r3,r2,97324 <__alt_data_end+0xfffd8b24>
        (*dtor) (); 
}
   9734c:	0001883a 	nop
   97350:	e037883a 	mov	sp,fp
   97354:	dfc00117 	ldw	ra,4(sp)
   97358:	df000017 	ldw	fp,0(sp)
   9735c:	dec00204 	addi	sp,sp,8
   97360:	f800283a 	ret

00097364 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   97364:	deffff04 	addi	sp,sp,-4
   97368:	df000015 	stw	fp,0(sp)
   9736c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   97370:	0001883a 	nop
   97374:	e037883a 	mov	sp,fp
   97378:	df000017 	ldw	fp,0(sp)
   9737c:	dec00104 	addi	sp,sp,4
   97380:	f800283a 	ret

00097384 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   97384:	defff804 	addi	sp,sp,-32
   97388:	dfc00715 	stw	ra,28(sp)
   9738c:	df000615 	stw	fp,24(sp)
   97390:	dc000515 	stw	r16,20(sp)
   97394:	df000604 	addi	fp,sp,24
   97398:	e13ffb15 	stw	r4,-20(fp)
   9739c:	e17ffc15 	stw	r5,-16(fp)
   973a0:	e1bffd15 	stw	r6,-12(fp)
   973a4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   973a8:	e1bffe17 	ldw	r6,-8(fp)
   973ac:	e17ffd17 	ldw	r5,-12(fp)
   973b0:	e13ffc17 	ldw	r4,-16(fp)
   973b4:	009760c0 	call	9760c <open>
   973b8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   973bc:	e0bffa17 	ldw	r2,-24(fp)
   973c0:	10002216 	blt	r2,zero,9744c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   973c4:	040002b4 	movhi	r16,10
   973c8:	84240004 	addi	r16,r16,-28672
   973cc:	e0bffa17 	ldw	r2,-24(fp)
   973d0:	01400304 	movi	r5,12
   973d4:	1009883a 	mov	r4,r2
   973d8:	008b18c0 	call	8b18c <__mulsi3>
   973dc:	8085883a 	add	r2,r16,r2
   973e0:	10c00017 	ldw	r3,0(r2)
   973e4:	e0bffb17 	ldw	r2,-20(fp)
   973e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   973ec:	040002b4 	movhi	r16,10
   973f0:	84240004 	addi	r16,r16,-28672
   973f4:	e0bffa17 	ldw	r2,-24(fp)
   973f8:	01400304 	movi	r5,12
   973fc:	1009883a 	mov	r4,r2
   97400:	008b18c0 	call	8b18c <__mulsi3>
   97404:	8085883a 	add	r2,r16,r2
   97408:	10800104 	addi	r2,r2,4
   9740c:	10c00017 	ldw	r3,0(r2)
   97410:	e0bffb17 	ldw	r2,-20(fp)
   97414:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   97418:	040002b4 	movhi	r16,10
   9741c:	84240004 	addi	r16,r16,-28672
   97420:	e0bffa17 	ldw	r2,-24(fp)
   97424:	01400304 	movi	r5,12
   97428:	1009883a 	mov	r4,r2
   9742c:	008b18c0 	call	8b18c <__mulsi3>
   97430:	8085883a 	add	r2,r16,r2
   97434:	10800204 	addi	r2,r2,8
   97438:	10c00017 	ldw	r3,0(r2)
   9743c:	e0bffb17 	ldw	r2,-20(fp)
   97440:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   97444:	e13ffa17 	ldw	r4,-24(fp)
   97448:	008e4140 	call	8e414 <alt_release_fd>
  }
} 
   9744c:	0001883a 	nop
   97450:	e6ffff04 	addi	sp,fp,-4
   97454:	dfc00217 	ldw	ra,8(sp)
   97458:	df000117 	ldw	fp,4(sp)
   9745c:	dc000017 	ldw	r16,0(sp)
   97460:	dec00304 	addi	sp,sp,12
   97464:	f800283a 	ret

00097468 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   97468:	defffb04 	addi	sp,sp,-20
   9746c:	dfc00415 	stw	ra,16(sp)
   97470:	df000315 	stw	fp,12(sp)
   97474:	df000304 	addi	fp,sp,12
   97478:	e13ffd15 	stw	r4,-12(fp)
   9747c:	e17ffe15 	stw	r5,-8(fp)
   97480:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   97484:	01c07fc4 	movi	r7,511
   97488:	01800044 	movi	r6,1
   9748c:	e17ffd17 	ldw	r5,-12(fp)
   97490:	010002b4 	movhi	r4,10
   97494:	21240304 	addi	r4,r4,-28660
   97498:	00973840 	call	97384 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   9749c:	01c07fc4 	movi	r7,511
   974a0:	000d883a 	mov	r6,zero
   974a4:	e17ffe17 	ldw	r5,-8(fp)
   974a8:	010002b4 	movhi	r4,10
   974ac:	21240004 	addi	r4,r4,-28672
   974b0:	00973840 	call	97384 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   974b4:	01c07fc4 	movi	r7,511
   974b8:	01800044 	movi	r6,1
   974bc:	e17fff17 	ldw	r5,-4(fp)
   974c0:	010002b4 	movhi	r4,10
   974c4:	21240604 	addi	r4,r4,-28648
   974c8:	00973840 	call	97384 <alt_open_fd>
}  
   974cc:	0001883a 	nop
   974d0:	e037883a 	mov	sp,fp
   974d4:	dfc00117 	ldw	ra,4(sp)
   974d8:	df000017 	ldw	fp,0(sp)
   974dc:	dec00204 	addi	sp,sp,8
   974e0:	f800283a 	ret

000974e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   974e4:	defffe04 	addi	sp,sp,-8
   974e8:	dfc00115 	stw	ra,4(sp)
   974ec:	df000015 	stw	fp,0(sp)
   974f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   974f4:	d0a00c17 	ldw	r2,-32720(gp)
   974f8:	10000326 	beq	r2,zero,97508 <alt_get_errno+0x24>
   974fc:	d0a00c17 	ldw	r2,-32720(gp)
   97500:	103ee83a 	callr	r2
   97504:	00000106 	br	9750c <alt_get_errno+0x28>
   97508:	d0a71d04 	addi	r2,gp,-25484
}
   9750c:	e037883a 	mov	sp,fp
   97510:	dfc00117 	ldw	ra,4(sp)
   97514:	df000017 	ldw	fp,0(sp)
   97518:	dec00204 	addi	sp,sp,8
   9751c:	f800283a 	ret

00097520 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   97520:	defffb04 	addi	sp,sp,-20
   97524:	dfc00415 	stw	ra,16(sp)
   97528:	df000315 	stw	fp,12(sp)
   9752c:	dc000215 	stw	r16,8(sp)
   97530:	df000304 	addi	fp,sp,12
   97534:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   97538:	e0bffe17 	ldw	r2,-8(fp)
   9753c:	10800217 	ldw	r2,8(r2)
   97540:	10d00034 	orhi	r3,r2,16384
   97544:	e0bffe17 	ldw	r2,-8(fp)
   97548:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9754c:	e03ffd15 	stw	zero,-12(fp)
   97550:	00002306 	br	975e0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   97554:	040002b4 	movhi	r16,10
   97558:	84240004 	addi	r16,r16,-28672
   9755c:	e0bffd17 	ldw	r2,-12(fp)
   97560:	01400304 	movi	r5,12
   97564:	1009883a 	mov	r4,r2
   97568:	008b18c0 	call	8b18c <__mulsi3>
   9756c:	8085883a 	add	r2,r16,r2
   97570:	10c00017 	ldw	r3,0(r2)
   97574:	e0bffe17 	ldw	r2,-8(fp)
   97578:	10800017 	ldw	r2,0(r2)
   9757c:	1880151e 	bne	r3,r2,975d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   97580:	040002b4 	movhi	r16,10
   97584:	84240004 	addi	r16,r16,-28672
   97588:	e0bffd17 	ldw	r2,-12(fp)
   9758c:	01400304 	movi	r5,12
   97590:	1009883a 	mov	r4,r2
   97594:	008b18c0 	call	8b18c <__mulsi3>
   97598:	8085883a 	add	r2,r16,r2
   9759c:	10800204 	addi	r2,r2,8
   975a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   975a4:	10000b0e 	bge	r2,zero,975d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   975a8:	01400304 	movi	r5,12
   975ac:	e13ffd17 	ldw	r4,-12(fp)
   975b0:	008b18c0 	call	8b18c <__mulsi3>
   975b4:	1007883a 	mov	r3,r2
   975b8:	008002b4 	movhi	r2,10
   975bc:	10a40004 	addi	r2,r2,-28672
   975c0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   975c4:	e0bffe17 	ldw	r2,-8(fp)
   975c8:	18800226 	beq	r3,r2,975d4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   975cc:	00bffcc4 	movi	r2,-13
   975d0:	00000806 	br	975f4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   975d4:	e0bffd17 	ldw	r2,-12(fp)
   975d8:	10800044 	addi	r2,r2,1
   975dc:	e0bffd15 	stw	r2,-12(fp)
   975e0:	d0a00b17 	ldw	r2,-32724(gp)
   975e4:	1007883a 	mov	r3,r2
   975e8:	e0bffd17 	ldw	r2,-12(fp)
   975ec:	18bfd92e 	bgeu	r3,r2,97554 <__alt_data_end+0xfffd8d54>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   975f0:	0005883a 	mov	r2,zero
}
   975f4:	e6ffff04 	addi	sp,fp,-4
   975f8:	dfc00217 	ldw	ra,8(sp)
   975fc:	df000117 	ldw	fp,4(sp)
   97600:	dc000017 	ldw	r16,0(sp)
   97604:	dec00304 	addi	sp,sp,12
   97608:	f800283a 	ret

0009760c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   9760c:	defff604 	addi	sp,sp,-40
   97610:	dfc00915 	stw	ra,36(sp)
   97614:	df000815 	stw	fp,32(sp)
   97618:	df000804 	addi	fp,sp,32
   9761c:	e13ffd15 	stw	r4,-12(fp)
   97620:	e17ffe15 	stw	r5,-8(fp)
   97624:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   97628:	00bfffc4 	movi	r2,-1
   9762c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   97630:	00bffb44 	movi	r2,-19
   97634:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   97638:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9763c:	d1600904 	addi	r5,gp,-32732
   97640:	e13ffd17 	ldw	r4,-12(fp)
   97644:	0097c880 	call	97c88 <alt_find_dev>
   97648:	e0bff815 	stw	r2,-32(fp)
   9764c:	e0bff817 	ldw	r2,-32(fp)
   97650:	1000051e 	bne	r2,zero,97668 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   97654:	e13ffd17 	ldw	r4,-12(fp)
   97658:	0097d180 	call	97d18 <alt_find_file>
   9765c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   97660:	00800044 	movi	r2,1
   97664:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   97668:	e0bff817 	ldw	r2,-32(fp)
   9766c:	10002b26 	beq	r2,zero,9771c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   97670:	e13ff817 	ldw	r4,-32(fp)
   97674:	0097e200 	call	97e20 <alt_get_fd>
   97678:	e0bff915 	stw	r2,-28(fp)
   9767c:	e0bff917 	ldw	r2,-28(fp)
   97680:	1000030e 	bge	r2,zero,97690 <open+0x84>
    {
      status = index;
   97684:	e0bff917 	ldw	r2,-28(fp)
   97688:	e0bffa15 	stw	r2,-24(fp)
   9768c:	00002506 	br	97724 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   97690:	01400304 	movi	r5,12
   97694:	e13ff917 	ldw	r4,-28(fp)
   97698:	008b18c0 	call	8b18c <__mulsi3>
   9769c:	1007883a 	mov	r3,r2
   976a0:	008002b4 	movhi	r2,10
   976a4:	10a40004 	addi	r2,r2,-28672
   976a8:	1885883a 	add	r2,r3,r2
   976ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   976b0:	e0fffe17 	ldw	r3,-8(fp)
   976b4:	00900034 	movhi	r2,16384
   976b8:	10bfffc4 	addi	r2,r2,-1
   976bc:	1886703a 	and	r3,r3,r2
   976c0:	e0bffc17 	ldw	r2,-16(fp)
   976c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   976c8:	e0bffb17 	ldw	r2,-20(fp)
   976cc:	1000051e 	bne	r2,zero,976e4 <open+0xd8>
   976d0:	e13ffc17 	ldw	r4,-16(fp)
   976d4:	00975200 	call	97520 <alt_file_locked>
   976d8:	e0bffa15 	stw	r2,-24(fp)
   976dc:	e0bffa17 	ldw	r2,-24(fp)
   976e0:	10001016 	blt	r2,zero,97724 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   976e4:	e0bff817 	ldw	r2,-32(fp)
   976e8:	10800317 	ldw	r2,12(r2)
   976ec:	10000826 	beq	r2,zero,97710 <open+0x104>
   976f0:	e0bff817 	ldw	r2,-32(fp)
   976f4:	10800317 	ldw	r2,12(r2)
   976f8:	e1ffff17 	ldw	r7,-4(fp)
   976fc:	e1bffe17 	ldw	r6,-8(fp)
   97700:	e17ffd17 	ldw	r5,-12(fp)
   97704:	e13ffc17 	ldw	r4,-16(fp)
   97708:	103ee83a 	callr	r2
   9770c:	00000106 	br	97714 <open+0x108>
   97710:	0005883a 	mov	r2,zero
   97714:	e0bffa15 	stw	r2,-24(fp)
   97718:	00000206 	br	97724 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   9771c:	00bffb44 	movi	r2,-19
   97720:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   97724:	e0bffa17 	ldw	r2,-24(fp)
   97728:	1000090e 	bge	r2,zero,97750 <open+0x144>
  {
    alt_release_fd (index);  
   9772c:	e13ff917 	ldw	r4,-28(fp)
   97730:	008e4140 	call	8e414 <alt_release_fd>
    ALT_ERRNO = -status;
   97734:	00974e40 	call	974e4 <alt_get_errno>
   97738:	1007883a 	mov	r3,r2
   9773c:	e0bffa17 	ldw	r2,-24(fp)
   97740:	0085c83a 	sub	r2,zero,r2
   97744:	18800015 	stw	r2,0(r3)
    return -1;
   97748:	00bfffc4 	movi	r2,-1
   9774c:	00000106 	br	97754 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   97750:	e0bff917 	ldw	r2,-28(fp)
}
   97754:	e037883a 	mov	sp,fp
   97758:	dfc00117 	ldw	ra,4(sp)
   9775c:	df000017 	ldw	fp,0(sp)
   97760:	dec00204 	addi	sp,sp,8
   97764:	f800283a 	ret

00097768 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   97768:	defffa04 	addi	sp,sp,-24
   9776c:	df000515 	stw	fp,20(sp)
   97770:	df000504 	addi	fp,sp,20
   97774:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97778:	0005303a 	rdctl	r2,status
   9777c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97780:	e0fffc17 	ldw	r3,-16(fp)
   97784:	00bfff84 	movi	r2,-2
   97788:	1884703a 	and	r2,r3,r2
   9778c:	1001703a 	wrctl	status,r2
  
  return context;
   97790:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   97794:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   97798:	e0bfff17 	ldw	r2,-4(fp)
   9779c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   977a0:	e0bffd17 	ldw	r2,-12(fp)
   977a4:	10800017 	ldw	r2,0(r2)
   977a8:	e0fffd17 	ldw	r3,-12(fp)
   977ac:	18c00117 	ldw	r3,4(r3)
   977b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   977b4:	e0bffd17 	ldw	r2,-12(fp)
   977b8:	10800117 	ldw	r2,4(r2)
   977bc:	e0fffd17 	ldw	r3,-12(fp)
   977c0:	18c00017 	ldw	r3,0(r3)
   977c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   977c8:	e0bffd17 	ldw	r2,-12(fp)
   977cc:	e0fffd17 	ldw	r3,-12(fp)
   977d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   977d4:	e0bffd17 	ldw	r2,-12(fp)
   977d8:	e0fffd17 	ldw	r3,-12(fp)
   977dc:	10c00015 	stw	r3,0(r2)
   977e0:	e0bffb17 	ldw	r2,-20(fp)
   977e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   977e8:	e0bffe17 	ldw	r2,-8(fp)
   977ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   977f0:	0001883a 	nop
   977f4:	e037883a 	mov	sp,fp
   977f8:	df000017 	ldw	fp,0(sp)
   977fc:	dec00104 	addi	sp,sp,4
   97800:	f800283a 	ret

00097804 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   97804:	defffb04 	addi	sp,sp,-20
   97808:	dfc00415 	stw	ra,16(sp)
   9780c:	df000315 	stw	fp,12(sp)
   97810:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   97814:	d0a02e17 	ldw	r2,-32584(gp)
   97818:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   9781c:	d0a73f17 	ldw	r2,-25348(gp)
   97820:	10800044 	addi	r2,r2,1
   97824:	d0a73f15 	stw	r2,-25348(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   97828:	00002e06 	br	978e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   9782c:	e0bffd17 	ldw	r2,-12(fp)
   97830:	10800017 	ldw	r2,0(r2)
   97834:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   97838:	e0bffd17 	ldw	r2,-12(fp)
   9783c:	10800403 	ldbu	r2,16(r2)
   97840:	10803fcc 	andi	r2,r2,255
   97844:	10000426 	beq	r2,zero,97858 <alt_tick+0x54>
   97848:	d0a73f17 	ldw	r2,-25348(gp)
   9784c:	1000021e 	bne	r2,zero,97858 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   97850:	e0bffd17 	ldw	r2,-12(fp)
   97854:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   97858:	e0bffd17 	ldw	r2,-12(fp)
   9785c:	10800217 	ldw	r2,8(r2)
   97860:	d0e73f17 	ldw	r3,-25348(gp)
   97864:	18801d36 	bltu	r3,r2,978dc <alt_tick+0xd8>
   97868:	e0bffd17 	ldw	r2,-12(fp)
   9786c:	10800403 	ldbu	r2,16(r2)
   97870:	10803fcc 	andi	r2,r2,255
   97874:	1000191e 	bne	r2,zero,978dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   97878:	e0bffd17 	ldw	r2,-12(fp)
   9787c:	10800317 	ldw	r2,12(r2)
   97880:	e0fffd17 	ldw	r3,-12(fp)
   97884:	18c00517 	ldw	r3,20(r3)
   97888:	1809883a 	mov	r4,r3
   9788c:	103ee83a 	callr	r2
   97890:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   97894:	e0bfff17 	ldw	r2,-4(fp)
   97898:	1000031e 	bne	r2,zero,978a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   9789c:	e13ffd17 	ldw	r4,-12(fp)
   978a0:	00977680 	call	97768 <alt_alarm_stop>
   978a4:	00000d06 	br	978dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   978a8:	e0bffd17 	ldw	r2,-12(fp)
   978ac:	10c00217 	ldw	r3,8(r2)
   978b0:	e0bfff17 	ldw	r2,-4(fp)
   978b4:	1887883a 	add	r3,r3,r2
   978b8:	e0bffd17 	ldw	r2,-12(fp)
   978bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   978c0:	e0bffd17 	ldw	r2,-12(fp)
   978c4:	10c00217 	ldw	r3,8(r2)
   978c8:	d0a73f17 	ldw	r2,-25348(gp)
   978cc:	1880032e 	bgeu	r3,r2,978dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   978d0:	e0bffd17 	ldw	r2,-12(fp)
   978d4:	00c00044 	movi	r3,1
   978d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   978dc:	e0bffe17 	ldw	r2,-8(fp)
   978e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   978e4:	e0fffd17 	ldw	r3,-12(fp)
   978e8:	d0a02e04 	addi	r2,gp,-32584
   978ec:	18bfcf1e 	bne	r3,r2,9782c <__alt_data_end+0xfffd902c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   978f0:	008f6280 	call	8f628 <OSTimeTick>
}
   978f4:	0001883a 	nop
   978f8:	e037883a 	mov	sp,fp
   978fc:	dfc00117 	ldw	ra,4(sp)
   97900:	df000017 	ldw	fp,0(sp)
   97904:	dec00204 	addi	sp,sp,8
   97908:	f800283a 	ret

0009790c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   9790c:	deffff04 	addi	sp,sp,-4
   97910:	df000015 	stw	fp,0(sp)
   97914:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   97918:	000170fa 	wrctl	ienable,zero
}
   9791c:	0001883a 	nop
   97920:	e037883a 	mov	sp,fp
   97924:	df000017 	ldw	fp,0(sp)
   97928:	dec00104 	addi	sp,sp,4
   9792c:	f800283a 	ret

00097930 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   97930:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   97934:	d0e00417 	ldw	r3,-32752(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   97938:	d1273917 	ldw	r4,-25372(gp)

      stw ra,  0(sp)
   9793c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   97940:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   97944:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   97948:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   9794c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   97950:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   97954:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   97958:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   9795c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   97960:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   97964:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   97968:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   9796c:	0097ba40 	call	97ba4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   97970:	d1273417 	ldw	r4,-25392(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   97974:	d1672c07 	ldb	r5,-25424(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   97978:	d1273915 	stw	r4,-25372(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   9797c:	d1672c45 	stb	r5,-25423(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   97980:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   97984:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   97988:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   9798c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   97990:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   97994:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   97998:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   9799c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   979a0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   979a4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   979a8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   979ac:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   979b0:	d0e00415 	stw	r3,-32752(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   979b4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   979b8:	f800283a 	ret

000979bc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   979bc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   979c0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   979c4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   979c8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   979cc:	0097ba40 	call	97ba4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   979d0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   979d4:	d4a72a45 	stb	r18,-25431(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   979d8:	003fe506 	br	97970 <__alt_data_end+0xfffd9170>

000979dc <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   979dc:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   979e0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   979e4:	10800054 	ori	r2,r2,1
      wrctl status, r2
   979e8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   979ec:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   979f0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   979f4:	dec00204 	addi	sp,sp,8

      callr r2
   979f8:	103ee83a 	callr	r2

      nop
   979fc:	0001883a 	nop

00097a00 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   97a00:	defff704 	addi	sp,sp,-36
   97a04:	dfc00815 	stw	ra,32(sp)
   97a08:	df000715 	stw	fp,28(sp)
   97a0c:	df000704 	addi	fp,sp,28
   97a10:	e13ffc15 	stw	r4,-16(fp)
   97a14:	e17ffd15 	stw	r5,-12(fp)
   97a18:	e1bffe15 	stw	r6,-8(fp)
   97a1c:	3805883a 	mov	r2,r7
   97a20:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   97a24:	e0fffe17 	ldw	r3,-8(fp)
   97a28:	00bfff04 	movi	r2,-4
   97a2c:	1884703a 	and	r2,r3,r2
   97a30:	10bef704 	addi	r2,r2,-1060
   97a34:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   97a38:	01810904 	movi	r6,1060
   97a3c:	000b883a 	mov	r5,zero
   97a40:	e13ff917 	ldw	r4,-28(fp)
   97a44:	00865d80 	call	865d8 <memset>
   97a48:	e0bff917 	ldw	r2,-28(fp)
   97a4c:	10c0bb04 	addi	r3,r2,748
   97a50:	e0bff917 	ldw	r2,-28(fp)
   97a54:	10c00115 	stw	r3,4(r2)
   97a58:	e0bff917 	ldw	r2,-28(fp)
   97a5c:	10c0d504 	addi	r3,r2,852
   97a60:	e0bff917 	ldw	r2,-28(fp)
   97a64:	10c00215 	stw	r3,8(r2)
   97a68:	e0bff917 	ldw	r2,-28(fp)
   97a6c:	10c0ef04 	addi	r3,r2,956
   97a70:	e0bff917 	ldw	r2,-28(fp)
   97a74:	10c00315 	stw	r3,12(r2)
   97a78:	e0fff917 	ldw	r3,-28(fp)
   97a7c:	008002b4 	movhi	r2,10
   97a80:	10a1cc04 	addi	r2,r2,-30928
   97a84:	18800d15 	stw	r2,52(r3)
   97a88:	e0bff917 	ldw	r2,-28(fp)
   97a8c:	00c00044 	movi	r3,1
   97a90:	10c02915 	stw	r3,164(r2)
   97a94:	10002a15 	stw	zero,168(r2)
   97a98:	e0bff917 	ldw	r2,-28(fp)
   97a9c:	00ccc384 	movi	r3,13070
   97aa0:	10c02b0d 	sth	r3,172(r2)
   97aa4:	e0bff917 	ldw	r2,-28(fp)
   97aa8:	00eaf344 	movi	r3,-21555
   97aac:	10c02b8d 	sth	r3,174(r2)
   97ab0:	e0bff917 	ldw	r2,-28(fp)
   97ab4:	00c48d04 	movi	r3,4660
   97ab8:	10c02c0d 	sth	r3,176(r2)
   97abc:	e0bff917 	ldw	r2,-28(fp)
   97ac0:	00f99b44 	movi	r3,-6547
   97ac4:	10c02c8d 	sth	r3,178(r2)
   97ac8:	e0bff917 	ldw	r2,-28(fp)
   97acc:	00f7bb04 	movi	r3,-8468
   97ad0:	10c02d0d 	sth	r3,180(r2)
   97ad4:	e0bff917 	ldw	r2,-28(fp)
   97ad8:	00c00144 	movi	r3,5
   97adc:	10c02d8d 	sth	r3,182(r2)
   97ae0:	e0bff917 	ldw	r2,-28(fp)
   97ae4:	00c002c4 	movi	r3,11
   97ae8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   97aec:	e0bff917 	ldw	r2,-28(fp)
   97af0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   97af4:	e0bffa17 	ldw	r2,-24(fp)
   97af8:	10bff304 	addi	r2,r2,-52
   97afc:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   97b00:	e0bffb17 	ldw	r2,-20(fp)
   97b04:	10800c04 	addi	r2,r2,48
   97b08:	e0fffc17 	ldw	r3,-16(fp)
   97b0c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   97b10:	e0bffb17 	ldw	r2,-20(fp)
   97b14:	10800b04 	addi	r2,r2,44
   97b18:	e0fffd17 	ldw	r3,-12(fp)
   97b1c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   97b20:	e0bffb17 	ldw	r2,-20(fp)
   97b24:	10800a04 	addi	r2,r2,40
   97b28:	e0fff917 	ldw	r3,-28(fp)
   97b2c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   97b30:	00800274 	movhi	r2,9
   97b34:	109e7704 	addi	r2,r2,31196
   97b38:	10c00104 	addi	r3,r2,4
   97b3c:	e0bffb17 	ldw	r2,-20(fp)
   97b40:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   97b44:	e0bffb17 	ldw	r2,-20(fp)
}
   97b48:	e037883a 	mov	sp,fp
   97b4c:	dfc00117 	ldw	ra,4(sp)
   97b50:	df000017 	ldw	fp,0(sp)
   97b54:	dec00204 	addi	sp,sp,8
   97b58:	f800283a 	ret

00097b5c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   97b5c:	defffe04 	addi	sp,sp,-8
   97b60:	df000115 	stw	fp,4(sp)
   97b64:	df000104 	addi	fp,sp,4
   97b68:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   97b6c:	0001883a 	nop
   97b70:	e037883a 	mov	sp,fp
   97b74:	df000017 	ldw	fp,0(sp)
   97b78:	dec00104 	addi	sp,sp,4
   97b7c:	f800283a 	ret

00097b80 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   97b80:	defffe04 	addi	sp,sp,-8
   97b84:	df000115 	stw	fp,4(sp)
   97b88:	df000104 	addi	fp,sp,4
   97b8c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   97b90:	0001883a 	nop
   97b94:	e037883a 	mov	sp,fp
   97b98:	df000017 	ldw	fp,0(sp)
   97b9c:	dec00104 	addi	sp,sp,4
   97ba0:	f800283a 	ret

00097ba4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   97ba4:	deffff04 	addi	sp,sp,-4
   97ba8:	df000015 	stw	fp,0(sp)
   97bac:	d839883a 	mov	fp,sp
}
   97bb0:	0001883a 	nop
   97bb4:	e037883a 	mov	sp,fp
   97bb8:	df000017 	ldw	fp,0(sp)
   97bbc:	dec00104 	addi	sp,sp,4
   97bc0:	f800283a 	ret

00097bc4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   97bc4:	deffff04 	addi	sp,sp,-4
   97bc8:	df000015 	stw	fp,0(sp)
   97bcc:	d839883a 	mov	fp,sp
}
   97bd0:	0001883a 	nop
   97bd4:	e037883a 	mov	sp,fp
   97bd8:	df000017 	ldw	fp,0(sp)
   97bdc:	dec00104 	addi	sp,sp,4
   97be0:	f800283a 	ret

00097be4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   97be4:	deffff04 	addi	sp,sp,-4
   97be8:	df000015 	stw	fp,0(sp)
   97bec:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   97bf0:	0001883a 	nop
   97bf4:	e037883a 	mov	sp,fp
   97bf8:	df000017 	ldw	fp,0(sp)
   97bfc:	dec00104 	addi	sp,sp,4
   97c00:	f800283a 	ret

00097c04 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   97c04:	deffff04 	addi	sp,sp,-4
   97c08:	df000015 	stw	fp,0(sp)
   97c0c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   97c10:	0001883a 	nop
   97c14:	e037883a 	mov	sp,fp
   97c18:	df000017 	ldw	fp,0(sp)
   97c1c:	dec00104 	addi	sp,sp,4
   97c20:	f800283a 	ret

00097c24 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   97c24:	deffff04 	addi	sp,sp,-4
   97c28:	df000015 	stw	fp,0(sp)
   97c2c:	d839883a 	mov	fp,sp
}
   97c30:	0001883a 	nop
   97c34:	e037883a 	mov	sp,fp
   97c38:	df000017 	ldw	fp,0(sp)
   97c3c:	dec00104 	addi	sp,sp,4
   97c40:	f800283a 	ret

00097c44 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   97c44:	deffff04 	addi	sp,sp,-4
   97c48:	df000015 	stw	fp,0(sp)
   97c4c:	d839883a 	mov	fp,sp
}
   97c50:	0001883a 	nop
   97c54:	e037883a 	mov	sp,fp
   97c58:	df000017 	ldw	fp,0(sp)
   97c5c:	dec00104 	addi	sp,sp,4
   97c60:	f800283a 	ret

00097c64 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   97c64:	defffe04 	addi	sp,sp,-8
   97c68:	df000115 	stw	fp,4(sp)
   97c6c:	df000104 	addi	fp,sp,4
   97c70:	e13fff15 	stw	r4,-4(fp)
}
   97c74:	0001883a 	nop
   97c78:	e037883a 	mov	sp,fp
   97c7c:	df000017 	ldw	fp,0(sp)
   97c80:	dec00104 	addi	sp,sp,4
   97c84:	f800283a 	ret

00097c88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   97c88:	defffa04 	addi	sp,sp,-24
   97c8c:	dfc00515 	stw	ra,20(sp)
   97c90:	df000415 	stw	fp,16(sp)
   97c94:	df000404 	addi	fp,sp,16
   97c98:	e13ffe15 	stw	r4,-8(fp)
   97c9c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   97ca0:	e0bfff17 	ldw	r2,-4(fp)
   97ca4:	10800017 	ldw	r2,0(r2)
   97ca8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   97cac:	e13ffe17 	ldw	r4,-8(fp)
   97cb0:	00879680 	call	87968 <strlen>
   97cb4:	10800044 	addi	r2,r2,1
   97cb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   97cbc:	00000d06 	br	97cf4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   97cc0:	e0bffc17 	ldw	r2,-16(fp)
   97cc4:	10800217 	ldw	r2,8(r2)
   97cc8:	e0fffd17 	ldw	r3,-12(fp)
   97ccc:	180d883a 	mov	r6,r3
   97cd0:	e17ffe17 	ldw	r5,-8(fp)
   97cd4:	1009883a 	mov	r4,r2
   97cd8:	0097f600 	call	97f60 <memcmp>
   97cdc:	1000021e 	bne	r2,zero,97ce8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   97ce0:	e0bffc17 	ldw	r2,-16(fp)
   97ce4:	00000706 	br	97d04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   97ce8:	e0bffc17 	ldw	r2,-16(fp)
   97cec:	10800017 	ldw	r2,0(r2)
   97cf0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   97cf4:	e0fffc17 	ldw	r3,-16(fp)
   97cf8:	e0bfff17 	ldw	r2,-4(fp)
   97cfc:	18bff01e 	bne	r3,r2,97cc0 <__alt_data_end+0xfffd94c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   97d00:	0005883a 	mov	r2,zero
}
   97d04:	e037883a 	mov	sp,fp
   97d08:	dfc00117 	ldw	ra,4(sp)
   97d0c:	df000017 	ldw	fp,0(sp)
   97d10:	dec00204 	addi	sp,sp,8
   97d14:	f800283a 	ret

00097d18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   97d18:	defffb04 	addi	sp,sp,-20
   97d1c:	dfc00415 	stw	ra,16(sp)
   97d20:	df000315 	stw	fp,12(sp)
   97d24:	df000304 	addi	fp,sp,12
   97d28:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   97d2c:	d0a00717 	ldw	r2,-32740(gp)
   97d30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   97d34:	00003106 	br	97dfc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   97d38:	e0bffd17 	ldw	r2,-12(fp)
   97d3c:	10800217 	ldw	r2,8(r2)
   97d40:	1009883a 	mov	r4,r2
   97d44:	00879680 	call	87968 <strlen>
   97d48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   97d4c:	e0bffd17 	ldw	r2,-12(fp)
   97d50:	10c00217 	ldw	r3,8(r2)
   97d54:	e0bffe17 	ldw	r2,-8(fp)
   97d58:	10bfffc4 	addi	r2,r2,-1
   97d5c:	1885883a 	add	r2,r3,r2
   97d60:	10800003 	ldbu	r2,0(r2)
   97d64:	10803fcc 	andi	r2,r2,255
   97d68:	1080201c 	xori	r2,r2,128
   97d6c:	10bfe004 	addi	r2,r2,-128
   97d70:	10800bd8 	cmpnei	r2,r2,47
   97d74:	1000031e 	bne	r2,zero,97d84 <alt_find_file+0x6c>
    {
      len -= 1;
   97d78:	e0bffe17 	ldw	r2,-8(fp)
   97d7c:	10bfffc4 	addi	r2,r2,-1
   97d80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   97d84:	e0bffe17 	ldw	r2,-8(fp)
   97d88:	e0ffff17 	ldw	r3,-4(fp)
   97d8c:	1885883a 	add	r2,r3,r2
   97d90:	10800003 	ldbu	r2,0(r2)
   97d94:	10803fcc 	andi	r2,r2,255
   97d98:	1080201c 	xori	r2,r2,128
   97d9c:	10bfe004 	addi	r2,r2,-128
   97da0:	10800be0 	cmpeqi	r2,r2,47
   97da4:	1000081e 	bne	r2,zero,97dc8 <alt_find_file+0xb0>
   97da8:	e0bffe17 	ldw	r2,-8(fp)
   97dac:	e0ffff17 	ldw	r3,-4(fp)
   97db0:	1885883a 	add	r2,r3,r2
   97db4:	10800003 	ldbu	r2,0(r2)
   97db8:	10803fcc 	andi	r2,r2,255
   97dbc:	1080201c 	xori	r2,r2,128
   97dc0:	10bfe004 	addi	r2,r2,-128
   97dc4:	10000a1e 	bne	r2,zero,97df0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   97dc8:	e0bffd17 	ldw	r2,-12(fp)
   97dcc:	10800217 	ldw	r2,8(r2)
   97dd0:	e0fffe17 	ldw	r3,-8(fp)
   97dd4:	180d883a 	mov	r6,r3
   97dd8:	e17fff17 	ldw	r5,-4(fp)
   97ddc:	1009883a 	mov	r4,r2
   97de0:	0097f600 	call	97f60 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   97de4:	1000021e 	bne	r2,zero,97df0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   97de8:	e0bffd17 	ldw	r2,-12(fp)
   97dec:	00000706 	br	97e0c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   97df0:	e0bffd17 	ldw	r2,-12(fp)
   97df4:	10800017 	ldw	r2,0(r2)
   97df8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   97dfc:	e0fffd17 	ldw	r3,-12(fp)
   97e00:	d0a00704 	addi	r2,gp,-32740
   97e04:	18bfcc1e 	bne	r3,r2,97d38 <__alt_data_end+0xfffd9538>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   97e08:	0005883a 	mov	r2,zero
}
   97e0c:	e037883a 	mov	sp,fp
   97e10:	dfc00117 	ldw	ra,4(sp)
   97e14:	df000017 	ldw	fp,0(sp)
   97e18:	dec00204 	addi	sp,sp,8
   97e1c:	f800283a 	ret

00097e20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   97e20:	defff804 	addi	sp,sp,-32
   97e24:	dfc00715 	stw	ra,28(sp)
   97e28:	df000615 	stw	fp,24(sp)
   97e2c:	dc000515 	stw	r16,20(sp)
   97e30:	df000604 	addi	fp,sp,24
   97e34:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   97e38:	00bffa04 	movi	r2,-24
   97e3c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   97e40:	d0a72117 	ldw	r2,-25468(gp)
   97e44:	e0bffc15 	stw	r2,-16(fp)
   97e48:	e03ffd0d 	sth	zero,-12(fp)
   97e4c:	e0bffd0b 	ldhu	r2,-12(fp)
   97e50:	e0fffd84 	addi	r3,fp,-10
   97e54:	180d883a 	mov	r6,r3
   97e58:	100b883a 	mov	r5,r2
   97e5c:	e13ffc17 	ldw	r4,-16(fp)
   97e60:	0093e780 	call	93e78 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   97e64:	e03ffa15 	stw	zero,-24(fp)
   97e68:	00001d06 	br	97ee0 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   97e6c:	040002b4 	movhi	r16,10
   97e70:	84240004 	addi	r16,r16,-28672
   97e74:	e0bffa17 	ldw	r2,-24(fp)
   97e78:	01400304 	movi	r5,12
   97e7c:	1009883a 	mov	r4,r2
   97e80:	008b18c0 	call	8b18c <__mulsi3>
   97e84:	8085883a 	add	r2,r16,r2
   97e88:	10800017 	ldw	r2,0(r2)
   97e8c:	1000111e 	bne	r2,zero,97ed4 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   97e90:	040002b4 	movhi	r16,10
   97e94:	84240004 	addi	r16,r16,-28672
   97e98:	e0bffa17 	ldw	r2,-24(fp)
   97e9c:	01400304 	movi	r5,12
   97ea0:	1009883a 	mov	r4,r2
   97ea4:	008b18c0 	call	8b18c <__mulsi3>
   97ea8:	8085883a 	add	r2,r16,r2
   97eac:	e0fffe17 	ldw	r3,-8(fp)
   97eb0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   97eb4:	d0e00b17 	ldw	r3,-32724(gp)
   97eb8:	e0bffa17 	ldw	r2,-24(fp)
   97ebc:	1880020e 	bge	r3,r2,97ec8 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   97ec0:	e0bffa17 	ldw	r2,-24(fp)
   97ec4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   97ec8:	e0bffa17 	ldw	r2,-24(fp)
   97ecc:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   97ed0:	00000606 	br	97eec <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   97ed4:	e0bffa17 	ldw	r2,-24(fp)
   97ed8:	10800044 	addi	r2,r2,1
   97edc:	e0bffa15 	stw	r2,-24(fp)
   97ee0:	e0bffa17 	ldw	r2,-24(fp)
   97ee4:	10800810 	cmplti	r2,r2,32
   97ee8:	103fe01e 	bne	r2,zero,97e6c <__alt_data_end+0xfffd966c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   97eec:	d0a72117 	ldw	r2,-25468(gp)
   97ef0:	1009883a 	mov	r4,r2
   97ef4:	00941f00 	call	941f0 <OSSemPost>

  return rc;
   97ef8:	e0bffb17 	ldw	r2,-20(fp)
}
   97efc:	e6ffff04 	addi	sp,fp,-4
   97f00:	dfc00217 	ldw	ra,8(sp)
   97f04:	df000117 	ldw	fp,4(sp)
   97f08:	dc000017 	ldw	r16,0(sp)
   97f0c:	dec00304 	addi	sp,sp,12
   97f10:	f800283a 	ret

00097f14 <atexit>:
   97f14:	200b883a 	mov	r5,r4
   97f18:	000f883a 	mov	r7,zero
   97f1c:	000d883a 	mov	r6,zero
   97f20:	0009883a 	mov	r4,zero
   97f24:	0097fdc1 	jmpi	97fdc <__register_exitproc>

00097f28 <exit>:
   97f28:	defffe04 	addi	sp,sp,-8
   97f2c:	000b883a 	mov	r5,zero
   97f30:	dc000015 	stw	r16,0(sp)
   97f34:	dfc00115 	stw	ra,4(sp)
   97f38:	2021883a 	mov	r16,r4
   97f3c:	00980f40 	call	980f4 <__call_exitprocs>
   97f40:	008002b4 	movhi	r2,10
   97f44:	10a87e04 	addi	r2,r2,-24072
   97f48:	11000017 	ldw	r4,0(r2)
   97f4c:	20800f17 	ldw	r2,60(r4)
   97f50:	10000126 	beq	r2,zero,97f58 <exit+0x30>
   97f54:	103ee83a 	callr	r2
   97f58:	8009883a 	mov	r4,r16
   97f5c:	00982740 	call	98274 <_exit>

00097f60 <memcmp>:
   97f60:	01c000c4 	movi	r7,3
   97f64:	3980192e 	bgeu	r7,r6,97fcc <memcmp+0x6c>
   97f68:	2144b03a 	or	r2,r4,r5
   97f6c:	11c4703a 	and	r2,r2,r7
   97f70:	10000f26 	beq	r2,zero,97fb0 <memcmp+0x50>
   97f74:	20800003 	ldbu	r2,0(r4)
   97f78:	28c00003 	ldbu	r3,0(r5)
   97f7c:	10c0151e 	bne	r2,r3,97fd4 <memcmp+0x74>
   97f80:	31bfff84 	addi	r6,r6,-2
   97f84:	01ffffc4 	movi	r7,-1
   97f88:	00000406 	br	97f9c <memcmp+0x3c>
   97f8c:	20800003 	ldbu	r2,0(r4)
   97f90:	28c00003 	ldbu	r3,0(r5)
   97f94:	31bfffc4 	addi	r6,r6,-1
   97f98:	10c00e1e 	bne	r2,r3,97fd4 <memcmp+0x74>
   97f9c:	21000044 	addi	r4,r4,1
   97fa0:	29400044 	addi	r5,r5,1
   97fa4:	31fff91e 	bne	r6,r7,97f8c <__alt_data_end+0xfffd978c>
   97fa8:	0005883a 	mov	r2,zero
   97fac:	f800283a 	ret
   97fb0:	20c00017 	ldw	r3,0(r4)
   97fb4:	28800017 	ldw	r2,0(r5)
   97fb8:	18bfee1e 	bne	r3,r2,97f74 <__alt_data_end+0xfffd9774>
   97fbc:	31bfff04 	addi	r6,r6,-4
   97fc0:	21000104 	addi	r4,r4,4
   97fc4:	29400104 	addi	r5,r5,4
   97fc8:	39bff936 	bltu	r7,r6,97fb0 <__alt_data_end+0xfffd97b0>
   97fcc:	303fe91e 	bne	r6,zero,97f74 <__alt_data_end+0xfffd9774>
   97fd0:	003ff506 	br	97fa8 <__alt_data_end+0xfffd97a8>
   97fd4:	10c5c83a 	sub	r2,r2,r3
   97fd8:	f800283a 	ret

00097fdc <__register_exitproc>:
   97fdc:	defffa04 	addi	sp,sp,-24
   97fe0:	dc000315 	stw	r16,12(sp)
   97fe4:	040002b4 	movhi	r16,10
   97fe8:	84287e04 	addi	r16,r16,-24072
   97fec:	80c00017 	ldw	r3,0(r16)
   97ff0:	dc400415 	stw	r17,16(sp)
   97ff4:	dfc00515 	stw	ra,20(sp)
   97ff8:	18805217 	ldw	r2,328(r3)
   97ffc:	2023883a 	mov	r17,r4
   98000:	10003726 	beq	r2,zero,980e0 <__register_exitproc+0x104>
   98004:	10c00117 	ldw	r3,4(r2)
   98008:	010007c4 	movi	r4,31
   9800c:	20c00e16 	blt	r4,r3,98048 <__register_exitproc+0x6c>
   98010:	1a000044 	addi	r8,r3,1
   98014:	8800221e 	bne	r17,zero,980a0 <__register_exitproc+0xc4>
   98018:	18c00084 	addi	r3,r3,2
   9801c:	18c7883a 	add	r3,r3,r3
   98020:	18c7883a 	add	r3,r3,r3
   98024:	12000115 	stw	r8,4(r2)
   98028:	10c7883a 	add	r3,r2,r3
   9802c:	19400015 	stw	r5,0(r3)
   98030:	0005883a 	mov	r2,zero
   98034:	dfc00517 	ldw	ra,20(sp)
   98038:	dc400417 	ldw	r17,16(sp)
   9803c:	dc000317 	ldw	r16,12(sp)
   98040:	dec00604 	addi	sp,sp,24
   98044:	f800283a 	ret
   98048:	00800234 	movhi	r2,8
   9804c:	10833004 	addi	r2,r2,3264
   98050:	10002626 	beq	r2,zero,980ec <__register_exitproc+0x110>
   98054:	01006404 	movi	r4,400
   98058:	d9400015 	stw	r5,0(sp)
   9805c:	d9800115 	stw	r6,4(sp)
   98060:	d9c00215 	stw	r7,8(sp)
   98064:	0080cc00 	call	80cc0 <malloc>
   98068:	d9400017 	ldw	r5,0(sp)
   9806c:	d9800117 	ldw	r6,4(sp)
   98070:	d9c00217 	ldw	r7,8(sp)
   98074:	10001d26 	beq	r2,zero,980ec <__register_exitproc+0x110>
   98078:	81000017 	ldw	r4,0(r16)
   9807c:	10000115 	stw	zero,4(r2)
   98080:	02000044 	movi	r8,1
   98084:	22405217 	ldw	r9,328(r4)
   98088:	0007883a 	mov	r3,zero
   9808c:	12400015 	stw	r9,0(r2)
   98090:	20805215 	stw	r2,328(r4)
   98094:	10006215 	stw	zero,392(r2)
   98098:	10006315 	stw	zero,396(r2)
   9809c:	883fde26 	beq	r17,zero,98018 <__alt_data_end+0xfffd9818>
   980a0:	18c9883a 	add	r4,r3,r3
   980a4:	2109883a 	add	r4,r4,r4
   980a8:	1109883a 	add	r4,r2,r4
   980ac:	21802215 	stw	r6,136(r4)
   980b0:	01800044 	movi	r6,1
   980b4:	12406217 	ldw	r9,392(r2)
   980b8:	30cc983a 	sll	r6,r6,r3
   980bc:	4992b03a 	or	r9,r9,r6
   980c0:	12406215 	stw	r9,392(r2)
   980c4:	21c04215 	stw	r7,264(r4)
   980c8:	01000084 	movi	r4,2
   980cc:	893fd21e 	bne	r17,r4,98018 <__alt_data_end+0xfffd9818>
   980d0:	11006317 	ldw	r4,396(r2)
   980d4:	218cb03a 	or	r6,r4,r6
   980d8:	11806315 	stw	r6,396(r2)
   980dc:	003fce06 	br	98018 <__alt_data_end+0xfffd9818>
   980e0:	18805304 	addi	r2,r3,332
   980e4:	18805215 	stw	r2,328(r3)
   980e8:	003fc606 	br	98004 <__alt_data_end+0xfffd9804>
   980ec:	00bfffc4 	movi	r2,-1
   980f0:	003fd006 	br	98034 <__alt_data_end+0xfffd9834>

000980f4 <__call_exitprocs>:
   980f4:	defff504 	addi	sp,sp,-44
   980f8:	df000915 	stw	fp,36(sp)
   980fc:	dd400615 	stw	r21,24(sp)
   98100:	dc800315 	stw	r18,12(sp)
   98104:	dfc00a15 	stw	ra,40(sp)
   98108:	ddc00815 	stw	r23,32(sp)
   9810c:	dd800715 	stw	r22,28(sp)
   98110:	dd000515 	stw	r20,20(sp)
   98114:	dcc00415 	stw	r19,16(sp)
   98118:	dc400215 	stw	r17,8(sp)
   9811c:	dc000115 	stw	r16,4(sp)
   98120:	d9000015 	stw	r4,0(sp)
   98124:	2839883a 	mov	fp,r5
   98128:	04800044 	movi	r18,1
   9812c:	057fffc4 	movi	r21,-1
   98130:	008002b4 	movhi	r2,10
   98134:	10a87e04 	addi	r2,r2,-24072
   98138:	12000017 	ldw	r8,0(r2)
   9813c:	45005217 	ldw	r20,328(r8)
   98140:	44c05204 	addi	r19,r8,328
   98144:	a0001c26 	beq	r20,zero,981b8 <__call_exitprocs+0xc4>
   98148:	a0800117 	ldw	r2,4(r20)
   9814c:	15ffffc4 	addi	r23,r2,-1
   98150:	b8000d16 	blt	r23,zero,98188 <__call_exitprocs+0x94>
   98154:	14000044 	addi	r16,r2,1
   98158:	8421883a 	add	r16,r16,r16
   9815c:	8421883a 	add	r16,r16,r16
   98160:	84402004 	addi	r17,r16,128
   98164:	a463883a 	add	r17,r20,r17
   98168:	a421883a 	add	r16,r20,r16
   9816c:	e0001e26 	beq	fp,zero,981e8 <__call_exitprocs+0xf4>
   98170:	80804017 	ldw	r2,256(r16)
   98174:	e0801c26 	beq	fp,r2,981e8 <__call_exitprocs+0xf4>
   98178:	bdffffc4 	addi	r23,r23,-1
   9817c:	843fff04 	addi	r16,r16,-4
   98180:	8c7fff04 	addi	r17,r17,-4
   98184:	bd7ff91e 	bne	r23,r21,9816c <__alt_data_end+0xfffd996c>
   98188:	00800234 	movhi	r2,8
   9818c:	10833504 	addi	r2,r2,3284
   98190:	10000926 	beq	r2,zero,981b8 <__call_exitprocs+0xc4>
   98194:	a0800117 	ldw	r2,4(r20)
   98198:	1000301e 	bne	r2,zero,9825c <__call_exitprocs+0x168>
   9819c:	a0800017 	ldw	r2,0(r20)
   981a0:	10003226 	beq	r2,zero,9826c <__call_exitprocs+0x178>
   981a4:	a009883a 	mov	r4,r20
   981a8:	98800015 	stw	r2,0(r19)
   981ac:	0080cd40 	call	80cd4 <free>
   981b0:	9d000017 	ldw	r20,0(r19)
   981b4:	a03fe41e 	bne	r20,zero,98148 <__alt_data_end+0xfffd9948>
   981b8:	dfc00a17 	ldw	ra,40(sp)
   981bc:	df000917 	ldw	fp,36(sp)
   981c0:	ddc00817 	ldw	r23,32(sp)
   981c4:	dd800717 	ldw	r22,28(sp)
   981c8:	dd400617 	ldw	r21,24(sp)
   981cc:	dd000517 	ldw	r20,20(sp)
   981d0:	dcc00417 	ldw	r19,16(sp)
   981d4:	dc800317 	ldw	r18,12(sp)
   981d8:	dc400217 	ldw	r17,8(sp)
   981dc:	dc000117 	ldw	r16,4(sp)
   981e0:	dec00b04 	addi	sp,sp,44
   981e4:	f800283a 	ret
   981e8:	a0800117 	ldw	r2,4(r20)
   981ec:	80c00017 	ldw	r3,0(r16)
   981f0:	10bfffc4 	addi	r2,r2,-1
   981f4:	15c01426 	beq	r2,r23,98248 <__call_exitprocs+0x154>
   981f8:	80000015 	stw	zero,0(r16)
   981fc:	183fde26 	beq	r3,zero,98178 <__alt_data_end+0xfffd9978>
   98200:	95c8983a 	sll	r4,r18,r23
   98204:	a0806217 	ldw	r2,392(r20)
   98208:	a5800117 	ldw	r22,4(r20)
   9820c:	2084703a 	and	r2,r4,r2
   98210:	10000b26 	beq	r2,zero,98240 <__call_exitprocs+0x14c>
   98214:	a0806317 	ldw	r2,396(r20)
   98218:	2088703a 	and	r4,r4,r2
   9821c:	20000c1e 	bne	r4,zero,98250 <__call_exitprocs+0x15c>
   98220:	89400017 	ldw	r5,0(r17)
   98224:	d9000017 	ldw	r4,0(sp)
   98228:	183ee83a 	callr	r3
   9822c:	a0800117 	ldw	r2,4(r20)
   98230:	15bfbf1e 	bne	r2,r22,98130 <__alt_data_end+0xfffd9930>
   98234:	98800017 	ldw	r2,0(r19)
   98238:	153fcf26 	beq	r2,r20,98178 <__alt_data_end+0xfffd9978>
   9823c:	003fbc06 	br	98130 <__alt_data_end+0xfffd9930>
   98240:	183ee83a 	callr	r3
   98244:	003ff906 	br	9822c <__alt_data_end+0xfffd9a2c>
   98248:	a5c00115 	stw	r23,4(r20)
   9824c:	003feb06 	br	981fc <__alt_data_end+0xfffd99fc>
   98250:	89000017 	ldw	r4,0(r17)
   98254:	183ee83a 	callr	r3
   98258:	003ff406 	br	9822c <__alt_data_end+0xfffd9a2c>
   9825c:	a0800017 	ldw	r2,0(r20)
   98260:	a027883a 	mov	r19,r20
   98264:	1029883a 	mov	r20,r2
   98268:	003fb606 	br	98144 <__alt_data_end+0xfffd9944>
   9826c:	0005883a 	mov	r2,zero
   98270:	003ffb06 	br	98260 <__alt_data_end+0xfffd9a60>

00098274 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   98274:	defffd04 	addi	sp,sp,-12
   98278:	df000215 	stw	fp,8(sp)
   9827c:	df000204 	addi	fp,sp,8
   98280:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   98284:	d0272a45 	stb	zero,-25431(gp)
   98288:	e0bfff17 	ldw	r2,-4(fp)
   9828c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   98290:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   98294:	10000226 	beq	r2,zero,982a0 <_exit+0x2c>
    ALT_SIM_FAIL();
   98298:	002af070 	cmpltui	zero,zero,43969
   9829c:	00000106 	br	982a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   982a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   982a4:	003fff06 	br	982a4 <__alt_data_end+0xfffd9aa4>
